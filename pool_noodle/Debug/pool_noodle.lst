
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 a9 5b 00 00 61 5b 00 00     ... .....[..a[..
      10:	61 5b 00 00 61 5b 00 00 61 5b 00 00 61 5b 00 00     a[..a[..a[..a[..
      20:	61 5b 00 00 61 5b 00 00 61 5b 00 00 a9 5b 00 00     a[..a[..a[...[..
      30:	a9 5b 00 00 61 5b 00 00 d5 6f 00 00 d9 70 00 00     .[..a[...o...p..
      40:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      50:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      60:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      70:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      80:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      90:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      a0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      b0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      c0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      d0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      e0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
      f0:	a9 5b 00 00 e1 72 00 00 a9 5b 00 00 0d 74 00 00     .[...r...[...t..
     100:	a9 5b 00 00 39 75 00 00 a9 5b 00 00 a9 5b 00 00     .[..9u...[...[..
     110:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     120:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     130:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     140:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     150:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     160:	a9 5b 00 00 f1 5f 00 00 a9 5b 00 00 a9 5b 00 00     .[..._...[...[..
     170:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     180:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     190:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     1a0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00 a9 5b 00 00     .[...[...[...[..
     1b0:	a9 5b 00 00 a9 5b 00 00 a9 5b 00 00                 .[...[...[..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f005 fcee 	bl	5bb0 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f005 fd42 	bl	5d5c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f005 fcb3 	bl	5c4c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f005 fca4 	bl	5c4c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f007 f9ca 	bl	76a0 <__libc_init_array>

	startup_late_hook();
     30c:	f005 fc56 	bl	5bbc <startup_late_hook>
	main();
     310:	f006 feea 	bl	70e8 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c1c 	.word	0x1fff8c1c
     33c:	00009fc4 	.word	0x00009fc4
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c1c 	.word	0x1fff8c1c
     348:	1fff97a8 	.word	0x1fff97a8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e29e057 	.word	0x5e29e057
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c1c 	.word	0x1fff8c1c
     42c:	00000000 	.word	0x00000000
     430:	00009fc8 	.word	0x00009fc8

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c20 	.word	0x1fff8c20
     460:	00009fc8 	.word	0x00009fc8
     464:	1fff8c1c 	.word	0x1fff8c1c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	4604      	mov	r4, r0
     496:	200e      	movs	r0, #14
     498:	f005 fbea 	bl	5c70 <pinMode>
     49c:	2007      	movs	r0, #7
     49e:	2101      	movs	r1, #1
     4a0:	f005 fbe6 	bl	5c70 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     4a4:	69a0      	ldr	r0, [r4, #24]
     4a6:	b158      	cbz	r0, 4c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     4a8:	6803      	ldr	r3, [r0, #0]
     4aa:	4a07      	ldr	r2, [pc, #28]	; (4c8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	4293      	cmp	r3, r2
     4b0:	d107      	bne.n	4c2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     4b2:	6842      	ldr	r2, [r0, #4]
     4b4:	7b01      	ldrb	r1, [r0, #12]
     4b6:	7813      	ldrb	r3, [r2, #0]
     4b8:	ea23 0301 	bic.w	r3, r3, r1
     4bc:	7013      	strb	r3, [r2, #0]
     4be:	bd10      	pop	{r4, pc}
     4c0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4c6:	4718      	bx	r3
     4c8:	00000481 	.word	0x00000481

000004cc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4d0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4d2:	6805      	ldr	r5, [r0, #0]
     4d4:	f88d 3004 	strb.w	r3, [sp, #4]
     4d8:	f88d 3005 	strb.w	r3, [sp, #5]
     4dc:	f88d 3006 	strb.w	r3, [sp, #6]
     4e0:	682e      	ldr	r6, [r5, #0]
     4e2:	4a37      	ldr	r2, [pc, #220]	; (5c0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4e4:	f88d 3008 	strb.w	r3, [sp, #8]
     4e8:	4296      	cmp	r6, r2
     4ea:	f88d 3009 	strb.w	r3, [sp, #9]
     4ee:	f88d 300a 	strb.w	r3, [sp, #10]
     4f2:	d15f      	bne.n	5b4 <CLEDController::clearLeds(int)+0xe8>
     4f4:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4f6:	9104      	str	r1, [sp, #16]
     4f8:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     4fa:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4fc:	a801      	add	r0, sp, #4
     4fe:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     500:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     504:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     508:	f88d 3020 	strb.w	r3, [sp, #32]
     50c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50e:	d015      	beq.n	53c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     510:	f88d 301d 	strb.w	r3, [sp, #29]
     514:	f88d 301c 	strb.w	r3, [sp, #28]
     518:	f88d 301b 	strb.w	r3, [sp, #27]
     51c:	f88d 301a 	strb.w	r3, [sp, #26]
     520:	f88d 3019 	strb.w	r3, [sp, #25]
     524:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     528:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     52c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     530:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     532:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     534:	a903      	add	r1, sp, #12
     536:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     538:	b00b      	add	sp, #44	; 0x2c
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     53c:	4a21      	ldr	r2, [pc, #132]	; (5c4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     53e:	7813      	ldrb	r3, [r2, #0]
     540:	3301      	adds	r3, #1
     542:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     546:	f013 0f01 	tst.w	r3, #1
     54a:	bf14      	ite	ne
     54c:	2180      	movne	r1, #128	; 0x80
     54e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     550:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     552:	079a      	lsls	r2, r3, #30
     554:	bf44      	itt	mi
     556:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     55a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     55c:	075b      	lsls	r3, r3, #29
     55e:	bf48      	it	mi
     560:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     564:	3110      	adds	r1, #16
     566:	2200      	movs	r2, #0
     568:	b2c9      	uxtb	r1, r1
     56a:	f10d 031b 	add.w	r3, sp, #27
     56e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     572:	f44f 7e80 	mov.w	lr, #256	; 0x100
     576:	b1aa      	cbz	r2, 5a4 <CLEDController::clearLeds(int)+0xd8>
     578:	fb9e f2f2 	sdiv	r2, lr, r2
     57c:	b2d2      	uxtb	r2, r2
     57e:	1c50      	adds	r0, r2, #1
     580:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     582:	fb00 1501 	mla	r5, r0, r1, r1
     586:	122d      	asrs	r5, r5, #8
     588:	7018      	strb	r0, [r3, #0]
     58a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     58c:	b105      	cbz	r5, 590 <CLEDController::clearLeds(int)+0xc4>
     58e:	3e01      	subs	r6, #1
     590:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     594:	b100      	cbz	r0, 598 <CLEDController::clearLeds(int)+0xcc>
     596:	701a      	strb	r2, [r3, #0]
     598:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     59a:	429f      	cmp	r7, r3
     59c:	d008      	beq.n	5b0 <CLEDController::clearLeds(int)+0xe4>
     59e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d1e9      	bne.n	578 <CLEDController::clearLeds(int)+0xac>
     5a4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5a6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ac:	429f      	cmp	r7, r3
     5ae:	d1f6      	bne.n	59e <CLEDController::clearLeds(int)+0xd2>
     5b0:	6825      	ldr	r5, [r4, #0]
     5b2:	e7b9      	b.n	528 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5b4:	460a      	mov	r2, r1
     5b6:	ab02      	add	r3, sp, #8
     5b8:	a901      	add	r1, sp, #4
     5ba:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5bc:	b00b      	add	sp, #44	; 0x2c
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	000005c9 	.word	0x000005c9
     5c4:	1fff8c38 	.word	0x1fff8c38

000005c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     5ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     5d0:	789b      	ldrb	r3, [r3, #2]
     5d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5d6:	9101      	str	r1, [sp, #4]
     5d8:	9202      	str	r2, [sp, #8]
     5da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     5e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     5e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5e8:	d016      	beq.n	618 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5ea:	2300      	movs	r3, #0
     5ec:	f88d 3015 	strb.w	r3, [sp, #21]
     5f0:	f88d 3014 	strb.w	r3, [sp, #20]
     5f4:	f88d 3013 	strb.w	r3, [sp, #19]
     5f8:	f88d 3012 	strb.w	r3, [sp, #18]
     5fc:	f88d 3011 	strb.w	r3, [sp, #17]
     600:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     606:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     608:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     60a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     60e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     610:	a901      	add	r1, sp, #4
     612:	4790      	blx	r2
  }
     614:	b009      	add	sp, #36	; 0x24
     616:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     618:	4a1b      	ldr	r2, [pc, #108]	; (688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     622:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     626:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     628:	bf14      	ite	ne
     62a:	2280      	movne	r2, #128	; 0x80
     62c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     62e:	0799      	lsls	r1, r3, #30
     630:	bf44      	itt	mi
     632:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     636:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     638:	075b      	lsls	r3, r3, #29
     63a:	bf48      	it	mi
     63c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     640:	3210      	adds	r2, #16
     642:	b2d2      	uxtb	r2, r2
     644:	f10d 0313 	add.w	r3, sp, #19
     648:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     64c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     650:	b1ac      	cbz	r4, 67e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     652:	fb9e f4f4 	sdiv	r4, lr, r4
     656:	b2e4      	uxtb	r4, r4
     658:	1c61      	adds	r1, r4, #1
     65a:	b2c9      	uxtb	r1, r1
     65c:	fb01 2502 	mla	r5, r1, r2, r2
     660:	122d      	asrs	r5, r5, #8
     662:	7019      	strb	r1, [r3, #0]
     664:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     666:	b105      	cbz	r5, 66a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     668:	3e01      	subs	r6, #1
     66a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     66e:	b101      	cbz	r1, 672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     670:	701c      	strb	r4, [r3, #0]
     672:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     674:	42bb      	cmp	r3, r7
     676:	d0c5      	beq.n	604 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     678:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67a:	2c00      	cmp	r4, #0
     67c:	d1e9      	bne.n	652 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     67e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     680:	f803 4c03 	strb.w	r4, [r3, #-3]
     684:	e7f5      	b.n	672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     686:	bf00      	nop
     688:	1fff8c38 	.word	0x1fff8c38

0000068c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     690:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     692:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     694:	789b      	ldrb	r3, [r3, #2]
     696:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     698:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     69a:	9101      	str	r1, [sp, #4]
     69c:	9202      	str	r2, [sp, #8]
     69e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6a4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6a8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ac:	d017      	beq.n	6de <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ae:	2300      	movs	r3, #0
     6b0:	f88d 3015 	strb.w	r3, [sp, #21]
     6b4:	f88d 3014 	strb.w	r3, [sp, #20]
     6b8:	f88d 3013 	strb.w	r3, [sp, #19]
     6bc:	f88d 3012 	strb.w	r3, [sp, #18]
     6c0:	f88d 3011 	strb.w	r3, [sp, #17]
     6c4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6c8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6ca:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6cc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ce:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6d0:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d4:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d6:	a901      	add	r1, sp, #4
     6d8:	4798      	blx	r3
  }
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6de:	4a1b      	ldr	r2, [pc, #108]	; (74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6e0:	7813      	ldrb	r3, [r2, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ec:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ee:	bf14      	ite	ne
     6f0:	2280      	movne	r2, #128	; 0x80
     6f2:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f4:	0799      	lsls	r1, r3, #30
     6f6:	bf44      	itt	mi
     6f8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6fc:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6fe:	075b      	lsls	r3, r3, #29
     700:	bf48      	it	mi
     702:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     706:	3210      	adds	r2, #16
     708:	b2d2      	uxtb	r2, r2
     70a:	f10d 0313 	add.w	r3, sp, #19
     70e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1ac      	cbz	r4, 744 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     718:	fb9e f4f4 	sdiv	r4, lr, r4
     71c:	b2e4      	uxtb	r4, r4
     71e:	1c61      	adds	r1, r4, #1
     720:	b2c9      	uxtb	r1, r1
     722:	fb01 2502 	mla	r5, r1, r2, r2
     726:	122d      	asrs	r5, r5, #8
     728:	7019      	strb	r1, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b101      	cbz	r1, 738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     736:	701c      	strb	r4, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	42bb      	cmp	r3, r7
     73c:	d0c4      	beq.n	6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     73e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2c00      	cmp	r4, #0
     742:	d1e9      	bne.n	718 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     744:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 4c03 	strb.w	r4, [r3, #-3]
     74a:	e7f5      	b.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     74c:	1fff8c38 	.word	0x1fff8c38

00000750 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     750:	b538      	push	{r3, r4, r5, lr}
     752:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     754:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     756:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     758:	f007 f852 	bl	7800 <strlen>
     75c:	6823      	ldr	r3, [r4, #0]
     75e:	4602      	mov	r2, r0
     760:	4629      	mov	r1, r5
     762:	685b      	ldr	r3, [r3, #4]
     764:	4620      	mov	r0, r4
     766:	4798      	blx	r3
     768:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     76a:	4620      	mov	r0, r4
     76c:	f006 fcc4 	bl	70f8 <Print::println()>
     770:	4428      	add	r0, r5
     772:	bd38      	pop	{r3, r4, r5, pc}

00000774 <updatePaletteIndex(LEDStruct&)>:
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     774:	4b48      	ldr	r3, [pc, #288]	; (898 <updatePaletteIndex(LEDStruct&)+0x124>)
     776:	781b      	ldrb	r3, [r3, #0]
     778:	2b00      	cmp	r3, #0
     77a:	f000 808b 	beq.w	894 <updatePaletteIndex(LEDStruct&)+0x120>
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     782:	b09b      	sub	sp, #108	; 0x6c
     784:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     788:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     78a:	2300      	movs	r3, #0
     78c:	4a43      	ldr	r2, [pc, #268]	; (89c <updatePaletteIndex(LEDStruct&)+0x128>)
     78e:	9307      	str	r3, [sp, #28]
     790:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8a0 <updatePaletteIndex(LEDStruct&)+0x12c>
     794:	9009      	str	r0, [sp, #36]	; 0x24
     796:	f200 2326 	addw	r3, r0, #550	; 0x226
     79a:	9208      	str	r2, [sp, #32]
     79c:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     79e:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     7a0:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     7a4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7a6:	3701      	adds	r7, #1
        } while ( u.index != 255);
     7a8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7aa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     7ac:	d1f8      	bne.n	7a0 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7ae:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     7b2:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7b4:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     7b8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7bc:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     7be:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     7c2:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     7c6:	2400      	movs	r4, #0
     7c8:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7ca:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7ce:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     7d2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7d6:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     7da:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     7dc:	b2f1      	uxtb	r1, r6
     7de:	f3c5 6507 	ubfx	r5, r5, #24, #8
     7e2:	9103      	str	r1, [sp, #12]
     7e4:	b2e9      	uxtb	r1, r5
     7e6:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     7e8:	fa5f f18c 	uxtb.w	r1, ip
     7ec:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     7ee:	9906      	ldr	r1, [sp, #24]
     7f0:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     7f2:	aa0d      	add	r2, sp, #52	; 0x34
     7f4:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     7f6:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7fa:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     7fe:	d80c      	bhi.n	81a <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     800:	9905      	ldr	r1, [sp, #20]
     802:	458c      	cmp	ip, r1
     804:	dc07      	bgt.n	816 <updatePaletteIndex(LEDStruct&)+0xa2>
     806:	290f      	cmp	r1, #15
     808:	d005      	beq.n	816 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     80a:	3101      	adds	r1, #1
     80c:	b2c9      	uxtb	r1, r1
     80e:	428b      	cmp	r3, r1
     810:	9102      	str	r1, [sp, #8]
     812:	bf38      	it	cc
     814:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     816:	b259      	sxtb	r1, r3
     818:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     81a:	a90c      	add	r1, sp, #48	; 0x30
     81c:	9100      	str	r1, [sp, #0]
     81e:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     820:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
     824:	f88d e035 	strb.w	lr, [sp, #53]	; 0x35
        b = rhs.b;
     828:	f88d 8036 	strb.w	r8, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     82c:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
     830:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
     834:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
     838:	f004 fab4 	bl	4da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     83c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     83e:	46d3      	mov	fp, sl
        g = rhs.g;
     840:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     844:	f8dd 8010 	ldr.w	r8, [sp, #16]
     848:	d1bf      	bne.n	7ca <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     84c:	aa0e      	add	r2, sp, #56	; 0x38
     84e:	4293      	cmp	r3, r2
     850:	d018      	beq.n	884 <updatePaletteIndex(LEDStruct&)+0x110>
     852:	9b09      	ldr	r3, [sp, #36]	; 0x24
     854:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     856:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     85a:	e001      	b.n	860 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     85c:	42a3      	cmp	r3, r4
     85e:	d011      	beq.n	884 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     860:	f812 1b01 	ldrb.w	r1, [r2], #1
     864:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     868:	4288      	cmp	r0, r1
     86a:	d0f7      	beq.n	85c <updatePaletteIndex(LEDStruct&)+0xe8>
     86c:	4b0a      	ldr	r3, [pc, #40]	; (898 <updatePaletteIndex(LEDStruct&)+0x124>)
     86e:	9a07      	ldr	r2, [sp, #28]
     870:	781b      	ldrb	r3, [r3, #0]
     872:	3201      	adds	r2, #1
     874:	4293      	cmp	r3, r2
     876:	9207      	str	r2, [sp, #28]
     878:	dd09      	ble.n	88e <updatePaletteIndex(LEDStruct&)+0x11a>
     87a:	9b08      	ldr	r3, [sp, #32]
     87c:	f853 9f04 	ldr.w	r9, [r3, #4]!
     880:	9308      	str	r3, [sp, #32]
     882:	e78c      	b.n	79e <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     884:	9b09      	ldr	r3, [sp, #36]	; 0x24
     886:	f89d 201c 	ldrb.w	r2, [sp, #28]
     88a:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
			break;
		}
	}
}
     88e:	b01b      	add	sp, #108	; 0x6c
     890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     894:	4770      	bx	lr
     896:	bf00      	nop
     898:	1fff8732 	.word	0x1fff8732
     89c:	000085a0 	.word	0x000085a0
     8a0:	0000879c 	.word	0x0000879c

000008a4 <initialize()>:

// Initialization function
void initialize() {
     8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     8a8:	4cb8      	ldr	r4, [pc, #736]	; (b8c <initialize()+0x2e8>)
		}
	}
}

// Initialization function
void initialize() {
     8aa:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     8ac:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     8ae:	2196      	movs	r1, #150	; 0x96
     8b0:	4620      	mov	r0, r4
     8b2:	aa09      	add	r2, sp, #36	; 0x24
     8b4:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     8b8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     8bc:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     8c0:	f004 fa40 	bl	4d44 <fill_solid(CRGB*, int, CRGB const&)>
     8c4:	49b2      	ldr	r1, [pc, #712]	; (b90 <initialize()+0x2ec>)
	curr_leds.array_type		= CURRENT;
     8c6:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     8ca:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     8ce:	4ab0      	ldr	r2, [pc, #704]	; (b90 <initialize()+0x2ec>)
            count++;;
        } while ( u.index != 255);
     8d0:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     8d2:	3701      	adds	r7, #1
        } while ( u.index != 255);
     8d4:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     8d6:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     8d8:	d1f7      	bne.n	8ca <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     8da:	6813      	ldr	r3, [r2, #0]
     8dc:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     8de:	ea4f 6813 	mov.w	r8, r3, lsr #24
     8e2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     8e6:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     8ea:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
     8ee:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     8f0:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     8f2:	2400      	movs	r4, #0
     8f4:	46c6      	mov	lr, r8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     8f6:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     8fa:	48a6      	ldr	r0, [pc, #664]	; (b94 <initialize()+0x2f0>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     8fc:	f3c5 2707 	ubfx	r7, r5, #8, #8
     900:	f3c5 4607 	ubfx	r6, r5, #16, #8
     904:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     906:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     90a:	9104      	str	r1, [sp, #16]
     90c:	b2f1      	uxtb	r1, r6
     90e:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     910:	fa5f f18c 	uxtb.w	r1, ip
     914:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     916:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     918:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     91a:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     91c:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     920:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     922:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     926:	fa5f f885 	uxtb.w	r8, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     92a:	d80c      	bhi.n	946 <initialize()+0xa2>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     92c:	9906      	ldr	r1, [sp, #24]
     92e:	458c      	cmp	ip, r1
     930:	dc07      	bgt.n	942 <initialize()+0x9e>
     932:	290f      	cmp	r1, #15
     934:	d005      	beq.n	942 <initialize()+0x9e>
                    istart8 = lastSlotUsed + 1;
     936:	3101      	adds	r1, #1
     938:	b2c9      	uxtb	r1, r1
     93a:	428b      	cmp	r3, r1
     93c:	9103      	str	r1, [sp, #12]
     93e:	bf38      	it	cc
     940:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     942:	b259      	sxtb	r1, r3
     944:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     946:	a908      	add	r1, sp, #32
     948:	9100      	str	r1, [sp, #0]
     94a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     94c:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     950:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     954:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     958:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     95c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     960:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     964:	f004 fa1e 	bl	4da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     968:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     96a:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     96e:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     972:	46c6      	mov	lr, r8
     974:	d1bf      	bne.n	8f6 <initialize()+0x52>
     976:	4988      	ldr	r1, [pc, #544]	; (b98 <initialize()+0x2f4>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     978:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     97a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     97e:	4a86      	ldr	r2, [pc, #536]	; (b98 <initialize()+0x2f4>)
            count++;;
        } while ( u.index != 255);
     980:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     982:	3701      	adds	r7, #1
        } while ( u.index != 255);
     984:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     986:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     988:	d1f7      	bne.n	97a <initialize()+0xd6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     98a:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     98c:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     98e:	ea4f 6813 	mov.w	r8, r3, lsr #24
     992:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     996:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     99a:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     99e:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     9a0:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     9a2:	2400      	movs	r4, #0
     9a4:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9a6:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9aa:	4b78      	ldr	r3, [pc, #480]	; (b8c <initialize()+0x2e8>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9ac:	f3c5 2707 	ubfx	r7, r5, #8, #8
     9b0:	f3c5 4607 	ubfx	r6, r5, #16, #8
     9b4:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     9b6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9ba:	9104      	str	r1, [sp, #16]
     9bc:	b2f1      	uxtb	r1, r6
     9be:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     9c0:	fa5f f18c 	uxtb.w	r1, ip
     9c4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     9c6:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     9c8:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9ca:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9cc:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9d0:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
     9d4:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     9d6:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9da:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9de:	d80c      	bhi.n	9fa <initialize()+0x156>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     9e0:	9906      	ldr	r1, [sp, #24]
     9e2:	458c      	cmp	ip, r1
     9e4:	dc07      	bgt.n	9f6 <initialize()+0x152>
     9e6:	290f      	cmp	r1, #15
     9e8:	d005      	beq.n	9f6 <initialize()+0x152>
                    istart8 = lastSlotUsed + 1;
     9ea:	3101      	adds	r1, #1
     9ec:	b2c9      	uxtb	r1, r1
     9ee:	428b      	cmp	r3, r1
     9f0:	9103      	str	r1, [sp, #12]
     9f2:	bf38      	it	cc
     9f4:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     9f6:	b259      	sxtb	r1, r3
     9f8:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9fa:	a908      	add	r1, sp, #32
     9fc:	9100      	str	r1, [sp, #0]
     9fe:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a00:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     a04:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     a08:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a0c:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     a10:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     a14:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     a18:	f004 f9c4 	bl	4da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a1c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a1e:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     a22:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     a26:	46d6      	mov	lr, sl
     a28:	d1bd      	bne.n	9a6 <initialize()+0x102>
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
	updatePaletteIndex(curr_leds);
     a2a:	4858      	ldr	r0, [pc, #352]	; (b8c <initialize()+0x2e8>)
	curr_leds.mode_name			= start_mode;

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     a2c:	4c5b      	ldr	r4, [pc, #364]	; (b9c <initialize()+0x2f8>)
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
	updatePaletteIndex(curr_leds);
     a2e:	f7ff fea1 	bl	774 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     a32:	4b5b      	ldr	r3, [pc, #364]	; (ba0 <initialize()+0x2fc>)
     a34:	4a55      	ldr	r2, [pc, #340]	; (b8c <initialize()+0x2e8>)
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	f882 322b 	strb.w	r3, [r2, #555]	; 0x22b
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     a3c:	2700      	movs	r7, #0

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     a3e:	2196      	movs	r1, #150	; 0x96
     a40:	4620      	mov	r0, r4
     a42:	aa09      	add	r2, sp, #36	; 0x24
     a44:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     a48:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     a4c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     a50:	f004 f978 	bl	4d44 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     a54:	2301      	movs	r3, #1
     a56:	4953      	ldr	r1, [pc, #332]	; (ba4 <initialize()+0x300>)
     a58:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a5c:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     a60:	4a50      	ldr	r2, [pc, #320]	; (ba4 <initialize()+0x300>)
            count++;;
        } while ( u.index != 255);
     a62:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a64:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a66:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a68:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a6a:	d1f7      	bne.n	a5c <initialize()+0x1b8>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a6c:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a6e:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a70:	f3c3 4907 	ubfx	r9, r3, #16, #8
     a74:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a78:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a7c:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
     a80:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a82:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a84:	2400      	movs	r4, #0
     a86:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a88:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a8c:	4846      	ldr	r0, [pc, #280]	; (ba8 <initialize()+0x304>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a8e:	f3c5 2707 	ubfx	r7, r5, #8, #8
     a92:	f3c5 4607 	ubfx	r6, r5, #16, #8
     a96:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     a98:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a9c:	9104      	str	r1, [sp, #16]
     a9e:	b2f1      	uxtb	r1, r6
     aa0:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     aa2:	fa5f f18c 	uxtb.w	r1, ip
     aa6:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     aa8:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     aaa:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     aac:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     aae:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ab2:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ab4:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ab8:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     abc:	d80c      	bhi.n	ad8 <initialize()+0x234>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     abe:	9906      	ldr	r1, [sp, #24]
     ac0:	458c      	cmp	ip, r1
     ac2:	dc07      	bgt.n	ad4 <initialize()+0x230>
     ac4:	290f      	cmp	r1, #15
     ac6:	d005      	beq.n	ad4 <initialize()+0x230>
                    istart8 = lastSlotUsed + 1;
     ac8:	3101      	adds	r1, #1
     aca:	b2c9      	uxtb	r1, r1
     acc:	428b      	cmp	r3, r1
     ace:	9103      	str	r1, [sp, #12]
     ad0:	bf38      	it	cc
     ad2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     ad4:	b259      	sxtb	r1, r3
     ad6:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ad8:	a908      	add	r1, sp, #32
     ada:	9100      	str	r1, [sp, #0]
     adc:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ade:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     ae2:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
     ae6:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aea:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     aee:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     af2:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     af6:	f004 f955 	bl	4da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     afa:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     afc:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     b00:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
     b04:	46c8      	mov	r8, r9
     b06:	d1bf      	bne.n	a88 <initialize()+0x1e4>
     b08:	4928      	ldr	r1, [pc, #160]	; (bac <initialize()+0x308>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b0a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b0c:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     b10:	4a26      	ldr	r2, [pc, #152]	; (bac <initialize()+0x308>)
            count++;;
        } while ( u.index != 255);
     b12:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b14:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b16:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b18:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b1a:	d1f7      	bne.n	b0c <initialize()+0x268>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b1c:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b1e:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b20:	f3c3 4907 	ubfx	r9, r3, #16, #8
     b24:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b28:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b2c:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
     b30:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b32:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b34:	2400      	movs	r4, #0
     b36:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b38:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b3c:	481c      	ldr	r0, [pc, #112]	; (bb0 <initialize()+0x30c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b3e:	f3c5 2707 	ubfx	r7, r5, #8, #8
     b42:	f3c5 4607 	ubfx	r6, r5, #16, #8
     b46:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     b48:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b4c:	9104      	str	r1, [sp, #16]
     b4e:	b2f1      	uxtb	r1, r6
     b50:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     b52:	fa5f f18c 	uxtb.w	r1, ip
     b56:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     b58:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b5a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b5c:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b5e:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b62:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b64:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b68:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b6c:	d822      	bhi.n	bb4 <initialize()+0x310>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b6e:	9906      	ldr	r1, [sp, #24]
     b70:	458c      	cmp	ip, r1
     b72:	dc07      	bgt.n	b84 <initialize()+0x2e0>
     b74:	290f      	cmp	r1, #15
     b76:	d005      	beq.n	b84 <initialize()+0x2e0>
                    istart8 = lastSlotUsed + 1;
     b78:	3101      	adds	r1, #1
     b7a:	b2c9      	uxtb	r1, r1
     b7c:	428b      	cmp	r3, r1
     b7e:	9103      	str	r1, [sp, #12]
     b80:	bf38      	it	cc
     b82:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b84:	b259      	sxtb	r1, r3
     b86:	9106      	str	r1, [sp, #24]
     b88:	e014      	b.n	bb4 <initialize()+0x310>
     b8a:	bf00      	nop
     b8c:	1fff9174 	.word	0x1fff9174
     b90:	00009528 	.word	0x00009528
     b94:	1fff933b 	.word	0x1fff933b
     b98:	0000949c 	.word	0x0000949c
     b9c:	1fff8c64 	.word	0x1fff8c64
     ba0:	1fff8730 	.word	0x1fff8730
     ba4:	00009220 	.word	0x00009220
     ba8:	1fff8e2b 	.word	0x1fff8e2b
     bac:	00009300 	.word	0x00009300
     bb0:	1fff8e5b 	.word	0x1fff8e5b
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bb4:	a908      	add	r1, sp, #32
     bb6:	9100      	str	r1, [sp, #0]
     bb8:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bba:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     bbe:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
     bc2:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bc6:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     bca:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     bce:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     bd2:	f004 f8e7 	bl	4da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     bd6:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bd8:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     bdc:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
     be0:	46c8      	mov	r8, r9
     be2:	d1a9      	bne.n	b38 <initialize()+0x294>
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	updatePaletteIndex(next_leds);
     be4:	4802      	ldr	r0, [pc, #8]	; (bf0 <initialize()+0x34c>)
     be6:	f7ff fdc5 	bl	774 <updatePaletteIndex(LEDStruct&)>
}
     bea:	b00b      	add	sp, #44	; 0x2c
     bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bf0:	1fff8c64 	.word	0x1fff8c64

00000bf4 <change_pattern()>:



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
     bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     bf6:	2120      	movs	r1, #32
     bf8:	4823      	ldr	r0, [pc, #140]	; (c88 <change_pattern()+0x94>)
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
     bfa:	4f24      	ldr	r7, [pc, #144]	; (c8c <change_pattern()+0x98>)
	transition_type  = BLENDING;
     bfc:	4e24      	ldr	r6, [pc, #144]	; (c90 <change_pattern()+0x9c>)
	transition_speed = random8(3,7);
	transition_ratio = 0;
     bfe:	4d25      	ldr	r5, [pc, #148]	; (c94 <change_pattern()+0xa0>)
     c00:	f006 f876 	bl	6cf0 <usb_serial_write>
     c04:	4824      	ldr	r0, [pc, #144]	; (c98 <change_pattern()+0xa4>)
     c06:	f006 fa77 	bl	70f8 <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c0a:	4824      	ldr	r0, [pc, #144]	; (c9c <change_pattern()+0xa8>)

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
     c0c:	4a24      	ldr	r2, [pc, #144]	; (ca0 <change_pattern()+0xac>)
     c0e:	8803      	ldrh	r3, [r0, #0]
     c10:	7814      	ldrb	r4, [r2, #0]
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
     c12:	4924      	ldr	r1, [pc, #144]	; (ca4 <change_pattern()+0xb0>)
     c14:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     c18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     c1c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     c20:	3319      	adds	r3, #25
     c22:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c24:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     c28:	f3c2 1281 	ubfx	r2, r2, #6, #2
     c2c:	3203      	adds	r2, #3
     c2e:	700a      	strb	r2, [r1, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
     c30:	2201      	movs	r2, #1
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
     c32:	491d      	ldr	r1, [pc, #116]	; (ca8 <change_pattern()+0xb4>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
     c34:	703a      	strb	r2, [r7, #0]
	transition_type  = BLENDING;
     c36:	2200      	movs	r2, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c38:	8003      	strh	r3, [r0, #0]
     c3a:	7032      	strb	r2, [r6, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;
     c3c:	702a      	strb	r2, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
     c3e:	f881 222d 	strb.w	r2, [r1, #557]	; 0x22d
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
     c42:	b95c      	cbnz	r4, c5c <change_pattern()+0x68>
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
     c44:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
     c48:	4a18      	ldr	r2, [pc, #96]	; (cac <change_pattern()+0xb8>)
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
     c4a:	3301      	adds	r3, #1
     c4c:	f003 030f 	and.w	r3, r3, #15
     c50:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
     c54:	5cd3      	ldrb	r3, [r2, r3]
     c56:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
     c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c5c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     c60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     c64:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     c68:	3319      	adds	r3, #25
     c6a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c6c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     c70:	f3c2 1203 	ubfx	r2, r2, #4, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c74:	8003      	strh	r3, [r0, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
     c76:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
     c7a:	4613      	mov	r3, r2
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
     c7c:	4a0b      	ldr	r2, [pc, #44]	; (cac <change_pattern()+0xb8>)
     c7e:	5cd3      	ldrb	r3, [r2, r3]
     c80:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
     c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c86:	bf00      	nop
     c88:	000087ec 	.word	0x000087ec
     c8c:	1fff8f70 	.word	0x1fff8f70
     c90:	1fff8f7c 	.word	0x1fff8f7c
     c94:	1fff8c5c 	.word	0x1fff8c5c
     c98:	1fff873c 	.word	0x1fff873c
     c9c:	1fff8734 	.word	0x1fff8734
     ca0:	1fff8731 	.word	0x1fff8731
     ca4:	1fff916a 	.word	0x1fff916a
     ca8:	1fff8c64 	.word	0x1fff8c64
     cac:	1fff8720 	.word	0x1fff8720

00000cb0 <blending()>:
}



// Transition functions
void blending() {
     cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cb4:	f8df b344 	ldr.w	fp, [pc, #836]	; ffc <blending()+0x34c>
     cb8:	f8df a348 	ldr.w	sl, [pc, #840]	; 1004 <blending()+0x354>
     cbc:	4cc0      	ldr	r4, [pc, #768]	; (fc0 <blending()+0x310>)
     cbe:	4fc1      	ldr	r7, [pc, #772]	; (fc4 <blending()+0x314>)
     cc0:	b085      	sub	sp, #20
     cc2:	465d      	mov	r5, fp
     cc4:	f50b 78e1 	add.w	r8, fp, #450	; 0x1c2
     cc8:	4656      	mov	r6, sl
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
     cca:	4632      	mov	r2, r6
     ccc:	4629      	mov	r1, r5
     cce:	783b      	ldrb	r3, [r7, #0]
     cd0:	f8df 92f0 	ldr.w	r9, [pc, #752]	; fc4 <blending()+0x314>
     cd4:	a803      	add	r0, sp, #12
     cd6:	3503      	adds	r5, #3
     cd8:	f004 f926 	bl	4f28 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cdc:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     ce0:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     ce4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ce8:	7021      	strb	r1, [r4, #0]
     cea:	4545      	cmp	r5, r8
        g = rhs.g;
     cec:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
     cee:	70a3      	strb	r3, [r4, #2]
     cf0:	f106 0603 	add.w	r6, r6, #3
     cf4:	f104 0403 	add.w	r4, r4, #3
     cf8:	d1e7      	bne.n	cca <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
     cfa:	4eb3      	ldr	r6, [pc, #716]	; (fc8 <blending()+0x318>)
     cfc:	6833      	ldr	r3, [r6, #0]
     cfe:	07db      	lsls	r3, r3, #31
     d00:	f140 813f 	bpl.w	f82 <blending()+0x2d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d04:	4db1      	ldr	r5, [pc, #708]	; (fcc <blending()+0x31c>)
     d06:	4cb2      	ldr	r4, [pc, #712]	; (fd0 <blending()+0x320>)
     d08:	682b      	ldr	r3, [r5, #0]
     d0a:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     d0c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
     d10:	9b03      	ldr	r3, [sp, #12]
     d12:	1a5b      	subs	r3, r3, r1
     d14:	4293      	cmp	r3, r2
     d16:	d30c      	bcc.n	d32 <blending()+0x82>
     d18:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d1a:	682a      	ldr	r2, [r5, #0]
     d1c:	9202      	str	r2, [sp, #8]
     d1e:	3301      	adds	r3, #1
	return ret;
     d20:	9a02      	ldr	r2, [sp, #8]
     d22:	6022      	str	r2, [r4, #0]
     d24:	b2db      	uxtb	r3, r3
     d26:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
     d28:	2bff      	cmp	r3, #255	; 0xff
     d2a:	d006      	beq.n	d3a <blending()+0x8a>
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
	}
}
     d2c:	b005      	add	sp, #20
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d32:	f899 3000 	ldrb.w	r3, [r9]

// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
     d36:	2bff      	cmp	r3, #255	; 0xff
     d38:	d1f8      	bne.n	d2c <blending()+0x7c>
		in_transition = 0;
     d3a:	49a6      	ldr	r1, [pc, #664]	; (fd4 <blending()+0x324>)
     d3c:	4ba6      	ldr	r3, [pc, #664]	; (fd8 <blending()+0x328>)
     d3e:	4aa7      	ldr	r2, [pc, #668]	; (fdc <blending()+0x32c>)
     d40:	2000      	movs	r0, #0
     d42:	7008      	strb	r0, [r1, #0]
     d44:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d48:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     d4c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     d50:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d54:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     d58:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     d5c:	f803 1c01 	strb.w	r1, [r3, #-1]
     d60:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     d62:	429d      	cmp	r5, r3
     d64:	f102 0203 	add.w	r2, r2, #3
     d68:	d1ee      	bne.n	d48 <blending()+0x98>
     d6a:	f89a 21c2 	ldrb.w	r2, [sl, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     d6e:	4b9c      	ldr	r3, [pc, #624]	; (fe0 <blending()+0x330>)
     d70:	f89a 41c3 	ldrb.w	r4, [sl, #451]	; 0x1c3
     d74:	f89a 01c4 	ldrb.w	r0, [sl, #452]	; 0x1c4
     d78:	f89a 11c5 	ldrb.w	r1, [sl, #453]	; 0x1c5
     d7c:	f88b 21c2 	strb.w	r2, [fp, #450]	; 0x1c2
     d80:	4a98      	ldr	r2, [pc, #608]	; (fe4 <blending()+0x334>)
     d82:	f88b 41c3 	strb.w	r4, [fp, #451]	; 0x1c3
     d86:	f88b 01c4 	strb.w	r0, [fp, #452]	; 0x1c4
     d8a:	f103 0430 	add.w	r4, r3, #48	; 0x30
     d8e:	f88b 11c5 	strb.w	r1, [fp, #453]	; 0x1c5
     d92:	6819      	ldr	r1, [r3, #0]
     d94:	685d      	ldr	r5, [r3, #4]
     d96:	6898      	ldr	r0, [r3, #8]
     d98:	6011      	str	r1, [r2, #0]
     d9a:	68d9      	ldr	r1, [r3, #12]
     d9c:	60d1      	str	r1, [r2, #12]
     d9e:	3310      	adds	r3, #16
     da0:	42a3      	cmp	r3, r4
     da2:	6055      	str	r5, [r2, #4]
     da4:	6090      	str	r0, [r2, #8]
     da6:	f102 0210 	add.w	r2, r2, #16
     daa:	d1f2      	bne.n	d92 <blending()+0xe2>
     dac:	4b8e      	ldr	r3, [pc, #568]	; (fe8 <blending()+0x338>)
     dae:	4a8f      	ldr	r2, [pc, #572]	; (fec <blending()+0x33c>)
     db0:	f103 0130 	add.w	r1, r3, #48	; 0x30
     db4:	6818      	ldr	r0, [r3, #0]
     db6:	685d      	ldr	r5, [r3, #4]
     db8:	689c      	ldr	r4, [r3, #8]
     dba:	6010      	str	r0, [r2, #0]
     dbc:	68d8      	ldr	r0, [r3, #12]
     dbe:	60d0      	str	r0, [r2, #12]
     dc0:	3310      	adds	r3, #16
     dc2:	428b      	cmp	r3, r1
     dc4:	6055      	str	r5, [r2, #4]
     dc6:	6094      	str	r4, [r2, #8]
     dc8:	f102 0210 	add.w	r2, r2, #16
     dcc:	d1f2      	bne.n	db4 <blending()+0x104>
     dce:	f89a 4227 	ldrb.w	r4, [sl, #551]	; 0x227
     dd2:	f89a 0228 	ldrb.w	r0, [sl, #552]	; 0x228
     dd6:	f89a 1229 	ldrb.w	r1, [sl, #553]	; 0x229
     dda:	f89a 222a 	ldrb.w	r2, [sl, #554]	; 0x22a
     dde:	f89a 322b 	ldrb.w	r3, [sl, #555]	; 0x22b
     de2:	f89a 522c 	ldrb.w	r5, [sl, #556]	; 0x22c
     de6:	f88b 4227 	strb.w	r4, [fp, #551]	; 0x227
     dea:	f88b 0228 	strb.w	r0, [fp, #552]	; 0x228
     dee:	f89a 422d 	ldrb.w	r4, [sl, #557]	; 0x22d
     df2:	f89a 022e 	ldrb.w	r0, [sl, #558]	; 0x22e
     df6:	f88b 1229 	strb.w	r1, [fp, #553]	; 0x229
     dfa:	f88b 222a 	strb.w	r2, [fp, #554]	; 0x22a
     dfe:	f89a 122f 	ldrb.w	r1, [sl, #559]	; 0x22f
     e02:	f89a 2230 	ldrb.w	r2, [sl, #560]	; 0x230
     e06:	f88b 322b 	strb.w	r3, [fp, #555]	; 0x22b
     e0a:	f88b 522c 	strb.w	r5, [fp, #556]	; 0x22c
     e0e:	f89a 3231 	ldrb.w	r3, [sl, #561]	; 0x231
     e12:	f89a 5232 	ldrb.w	r5, [sl, #562]	; 0x232
     e16:	f88b 422d 	strb.w	r4, [fp, #557]	; 0x22d
     e1a:	f88b 022e 	strb.w	r0, [fp, #558]	; 0x22e
     e1e:	f89a 4233 	ldrb.w	r4, [sl, #563]	; 0x233
     e22:	f89a 0234 	ldrb.w	r0, [sl, #564]	; 0x234
     e26:	f88b 122f 	strb.w	r1, [fp, #559]	; 0x22f
     e2a:	f88b 2230 	strb.w	r2, [fp, #560]	; 0x230
     e2e:	f89a 1235 	ldrb.w	r1, [sl, #565]	; 0x235
     e32:	f89a 2236 	ldrb.w	r2, [sl, #566]	; 0x236
     e36:	f88b 3231 	strb.w	r3, [fp, #561]	; 0x231
     e3a:	f88b 5232 	strb.w	r5, [fp, #562]	; 0x232
     e3e:	f88b 4233 	strb.w	r4, [fp, #563]	; 0x233
     e42:	f88b 1235 	strb.w	r1, [fp, #565]	; 0x235
     e46:	f88b 2236 	strb.w	r2, [fp, #566]	; 0x236
     e4a:	4b69      	ldr	r3, [pc, #420]	; (ff0 <blending()+0x340>)
     e4c:	f88b 0234 	strb.w	r0, [fp, #564]	; 0x234
     e50:	f89a 0237 	ldrb.w	r0, [sl, #567]	; 0x237
     e54:	f89a 5238 	ldrb.w	r5, [sl, #568]	; 0x238
     e58:	f89a 4239 	ldrb.w	r4, [sl, #569]	; 0x239
     e5c:	f89a 123a 	ldrb.w	r1, [sl, #570]	; 0x23a
     e60:	f88b 5238 	strb.w	r5, [fp, #568]	; 0x238
     e64:	f88b 4239 	strb.w	r4, [fp, #569]	; 0x239
     e68:	f89a 523b 	ldrb.w	r5, [sl, #571]	; 0x23b
     e6c:	f89a 423c 	ldrb.w	r4, [sl, #572]	; 0x23c
     e70:	f88b 123a 	strb.w	r1, [fp, #570]	; 0x23a
     e74:	4a5f      	ldr	r2, [pc, #380]	; (ff4 <blending()+0x344>)
     e76:	f89a 123d 	ldrb.w	r1, [sl, #573]	; 0x23d
     e7a:	f88b 0237 	strb.w	r0, [fp, #567]	; 0x237
     e7e:	f88b 523b 	strb.w	r5, [fp, #571]	; 0x23b
     e82:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     e86:	f88b 423c 	strb.w	r4, [fp, #572]	; 0x23c
     e8a:	f88b 123d 	strb.w	r1, [fp, #573]	; 0x23d
     e8e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     e92:	f803 1b01 	strb.w	r1, [r3], #1
     e96:	4283      	cmp	r3, r0
     e98:	d1f9      	bne.n	e8e <blending()+0x1de>
     e9a:	4a57      	ldr	r2, [pc, #348]	; (ff8 <blending()+0x348>)
     e9c:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     ea0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     ea4:	f803 1b01 	strb.w	r1, [r3], #1
     ea8:	4283      	cmp	r3, r0
     eaa:	4954      	ldr	r1, [pc, #336]	; (ffc <blending()+0x34c>)
     eac:	d1f8      	bne.n	ea0 <blending()+0x1f0>
     eae:	f89a 42d4 	ldrb.w	r4, [sl, #724]	; 0x2d4
     eb2:	f89a 02d5 	ldrb.w	r0, [sl, #725]	; 0x2d5
     eb6:	f89a 22d6 	ldrb.w	r2, [sl, #726]	; 0x2d6
     eba:	f89a 32d7 	ldrb.w	r3, [sl, #727]	; 0x2d7
     ebe:	f89a 62d8 	ldrb.w	r6, [sl, #728]	; 0x2d8
     ec2:	f89a 52d9 	ldrb.w	r5, [sl, #729]	; 0x2d9
     ec6:	f881 42d4 	strb.w	r4, [r1, #724]	; 0x2d4
     eca:	f881 02d5 	strb.w	r0, [r1, #725]	; 0x2d5
     ece:	f8ba 42da 	ldrh.w	r4, [sl, #730]	; 0x2da
     ed2:	f8ba 02dc 	ldrh.w	r0, [sl, #732]	; 0x2dc
     ed6:	f881 22d6 	strb.w	r2, [r1, #726]	; 0x2d6
     eda:	f881 32d7 	strb.w	r3, [r1, #727]	; 0x2d7
     ede:	f8ba 22de 	ldrh.w	r2, [sl, #734]	; 0x2de
     ee2:	f89a 32e0 	ldrb.w	r3, [sl, #736]	; 0x2e0
     ee6:	f881 62d8 	strb.w	r6, [r1, #728]	; 0x2d8
     eea:	f881 52d9 	strb.w	r5, [r1, #729]	; 0x2d9
     eee:	f89a 62e1 	ldrb.w	r6, [sl, #737]	; 0x2e1
     ef2:	f89a 52e2 	ldrb.w	r5, [sl, #738]	; 0x2e2
     ef6:	f8a1 42da 	strh.w	r4, [r1, #730]	; 0x2da
     efa:	f8a1 02dc 	strh.w	r0, [r1, #732]	; 0x2dc
     efe:	f89a 42e3 	ldrb.w	r4, [sl, #739]	; 0x2e3
     f02:	f89a 02e4 	ldrb.w	r0, [sl, #740]	; 0x2e4
     f06:	f8a1 22de 	strh.w	r2, [r1, #734]	; 0x2de
     f0a:	f881 32e0 	strb.w	r3, [r1, #736]	; 0x2e0
     f0e:	f8ba 22e6 	ldrh.w	r2, [sl, #742]	; 0x2e6
     f12:	f8ba 32e8 	ldrh.w	r3, [sl, #744]	; 0x2e8
     f16:	f881 62e1 	strb.w	r6, [r1, #737]	; 0x2e1
     f1a:	f881 52e2 	strb.w	r5, [r1, #738]	; 0x2e2
     f1e:	f881 02e4 	strb.w	r0, [r1, #740]	; 0x2e4
     f22:	f8a1 22e6 	strh.w	r2, [r1, #742]	; 0x2e6
     f26:	f8a1 32e8 	strh.w	r3, [r1, #744]	; 0x2e8
     f2a:	f881 42e3 	strb.w	r4, [r1, #739]	; 0x2e3
     f2e:	f8ba 42ea 	ldrh.w	r4, [sl, #746]	; 0x2ea
     f32:	f8ba 02ec 	ldrh.w	r0, [sl, #748]	; 0x2ec
     f36:	f8ba 22ee 	ldrh.w	r2, [sl, #750]	; 0x2ee
     f3a:	f8ba 72f0 	ldrh.w	r7, [sl, #752]	; 0x2f0
     f3e:	f8ba 62f2 	ldrh.w	r6, [sl, #754]	; 0x2f2
     f42:	f8a1 42ea 	strh.w	r4, [r1, #746]	; 0x2ea
     f46:	f8ba 52f4 	ldrh.w	r5, [sl, #756]	; 0x2f4
     f4a:	f8a1 02ec 	strh.w	r0, [r1, #748]	; 0x2ec
     f4e:	f8ba 42f6 	ldrh.w	r4, [sl, #758]	; 0x2f6
     f52:	f8a1 22ee 	strh.w	r2, [r1, #750]	; 0x2ee
     f56:	f8ba 02f8 	ldrh.w	r0, [sl, #760]	; 0x2f8
     f5a:	f8ba 22fa 	ldrh.w	r2, [sl, #762]	; 0x2fa
     f5e:	f8a1 72f0 	strh.w	r7, [r1, #752]	; 0x2f0
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
     f62:	2300      	movs	r3, #0
     f64:	f8a1 62f2 	strh.w	r6, [r1, #754]	; 0x2f2
     f68:	f8a1 52f4 	strh.w	r5, [r1, #756]	; 0x2f4
     f6c:	f8a1 42f6 	strh.w	r4, [r1, #758]	; 0x2f6
     f70:	f8a1 02f8 	strh.w	r0, [r1, #760]	; 0x2f8
     f74:	f8a1 22fa 	strh.w	r2, [r1, #762]	; 0x2fa
     f78:	f881 31c6 	strb.w	r3, [r1, #454]	; 0x1c6
	}
}
     f7c:	b005      	add	sp, #20
     f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
     f82:	4630      	mov	r0, r6
     f84:	f004 fe1c 	bl	5bc0 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f88:	4d10      	ldr	r5, [pc, #64]	; (fcc <blending()+0x31c>)
     f8a:	b958      	cbnz	r0, fa4 <blending()+0x2f4>
     f8c:	4c10      	ldr	r4, [pc, #64]	; (fd0 <blending()+0x320>)
     f8e:	682b      	ldr	r3, [r5, #0]
     f90:	9303      	str	r3, [sp, #12]
     f92:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
     f96:	9b03      	ldr	r3, [sp, #12]
     f98:	1a5b      	subs	r3, r3, r1
     f9a:	4293      	cmp	r3, r2
     f9c:	f4bf aebc 	bcs.w	d18 <blending()+0x68>
     fa0:	783b      	ldrb	r3, [r7, #0]
     fa2:	e6c1      	b.n	d28 <blending()+0x78>
     fa4:	4b16      	ldr	r3, [pc, #88]	; (1000 <blending()+0x350>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fa6:	682a      	ldr	r2, [r5, #0]
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	4c09      	ldr	r4, [pc, #36]	; (fd0 <blending()+0x320>)
     fac:	9201      	str	r2, [sp, #4]
	return ret;
     fae:	9a01      	ldr	r2, [sp, #4]
     fb0:	6022      	str	r2, [r4, #0]
     fb2:	009b      	lsls	r3, r3, #2
     fb4:	4630      	mov	r0, r6
     fb6:	6063      	str	r3, [r4, #4]
     fb8:	f004 fe08 	bl	5bcc <__cxa_guard_release>
     fbc:	e7e7      	b.n	f8e <blending()+0x2de>
     fbe:	bf00      	nop
     fc0:	1fff8fa8 	.word	0x1fff8fa8
     fc4:	1fff8c5c 	.word	0x1fff8c5c
     fc8:	1fff8fa4 	.word	0x1fff8fa4
     fcc:	1fff94e8 	.word	0x1fff94e8
     fd0:	1fff8f74 	.word	0x1fff8f74
     fd4:	1fff8f70 	.word	0x1fff8f70
     fd8:	1fff9177 	.word	0x1fff9177
     fdc:	1fff8c67 	.word	0x1fff8c67
     fe0:	1fff8e2b 	.word	0x1fff8e2b
     fe4:	1fff933b 	.word	0x1fff933b
     fe8:	1fff8e5b 	.word	0x1fff8e5b
     fec:	1fff936b 	.word	0x1fff936b
     ff0:	1fff93b2 	.word	0x1fff93b2
     ff4:	1fff8ea1 	.word	0x1fff8ea1
     ff8:	1fff8eec 	.word	0x1fff8eec
     ffc:	1fff9174 	.word	0x1fff9174
    1000:	1fff916a 	.word	0x1fff916a
    1004:	1fff8c64 	.word	0x1fff8c64

00001008 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1008:	b510      	push	{r4, lr}
    100a:	2101      	movs	r1, #1
    100c:	4604      	mov	r4, r0
    100e:	4893      	ldr	r0, [pc, #588]	; (125c <print_palette(unsigned char)+0x254>)
    1010:	f005 fe6e 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1014:	4621      	mov	r1, r4
    1016:	2300      	movs	r3, #0
    1018:	220a      	movs	r2, #10
    101a:	4891      	ldr	r0, [pc, #580]	; (1260 <print_palette(unsigned char)+0x258>)
    101c:	f006 f87c 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1020:	2102      	movs	r1, #2
    1022:	4890      	ldr	r0, [pc, #576]	; (1264 <print_palette(unsigned char)+0x25c>)
    1024:	f005 fe64 	bl	6cf0 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1028:	2c5c      	cmp	r4, #92	; 0x5c
    102a:	f200 828a 	bhi.w	1542 <print_palette(unsigned char)+0x53a>
    102e:	e8df f014 	tbh	[pc, r4, lsl #1]
    1032:	0283      	.short	0x0283
    1034:	0271027a 	.word	0x0271027a
    1038:	0267026c 	.word	0x0267026c
    103c:	025d0262 	.word	0x025d0262
    1040:	02530258 	.word	0x02530258
    1044:	0249024e 	.word	0x0249024e
    1048:	023f0244 	.word	0x023f0244
    104c:	0235023a 	.word	0x0235023a
    1050:	022b0230 	.word	0x022b0230
    1054:	02210226 	.word	0x02210226
    1058:	0217021c 	.word	0x0217021c
    105c:	020d0212 	.word	0x020d0212
    1060:	02030208 	.word	0x02030208
    1064:	01f901fe 	.word	0x01f901fe
    1068:	01ef01f4 	.word	0x01ef01f4
    106c:	01e501ea 	.word	0x01e501ea
    1070:	01db01e0 	.word	0x01db01e0
    1074:	01d101d6 	.word	0x01d101d6
    1078:	01c701cc 	.word	0x01c701cc
    107c:	01bd01c2 	.word	0x01bd01c2
    1080:	01b301b8 	.word	0x01b301b8
    1084:	01a901ae 	.word	0x01a901ae
    1088:	019f01a4 	.word	0x019f01a4
    108c:	0195019a 	.word	0x0195019a
    1090:	018b0190 	.word	0x018b0190
    1094:	01810186 	.word	0x01810186
    1098:	0177017c 	.word	0x0177017c
    109c:	016d0172 	.word	0x016d0172
    10a0:	01630168 	.word	0x01630168
    10a4:	010b0110 	.word	0x010b0110
    10a8:	01010106 	.word	0x01010106
    10ac:	00f700fc 	.word	0x00f700fc
    10b0:	00ed00f2 	.word	0x00ed00f2
    10b4:	00e300e8 	.word	0x00e300e8
    10b8:	00d900de 	.word	0x00d900de
    10bc:	00cf00d4 	.word	0x00cf00d4
    10c0:	00c500ca 	.word	0x00c500ca
    10c4:	00bb00c0 	.word	0x00bb00c0
    10c8:	00b100b6 	.word	0x00b100b6
    10cc:	00a700ac 	.word	0x00a700ac
    10d0:	009d00a2 	.word	0x009d00a2
    10d4:	00930098 	.word	0x00930098
    10d8:	0089008e 	.word	0x0089008e
    10dc:	007f0084 	.word	0x007f0084
    10e0:	0075007a 	.word	0x0075007a
    10e4:	00670070 	.word	0x00670070
    10e8:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    10ec:	495e      	ldr	r1, [pc, #376]	; (1268 <print_palette(unsigned char)+0x260>)
    10ee:	485c      	ldr	r0, [pc, #368]	; (1260 <print_palette(unsigned char)+0x258>)
    10f0:	f7ff fb2e 	bl	750 <Print::println(char const*)>
		break;
    10f4:	bd10      	pop	{r4, pc}
	case 90:
		Serial.println("purplefly_gp");
		break;

	case 91:
		Serial.println("rainbow2_gp");
    10f6:	495d      	ldr	r1, [pc, #372]	; (126c <print_palette(unsigned char)+0x264>)
    10f8:	4859      	ldr	r0, [pc, #356]	; (1260 <print_palette(unsigned char)+0x258>)
    10fa:	f7ff fb29 	bl	750 <Print::println(char const*)>
		break;
    10fe:	bd10      	pop	{r4, pc}
    1100:	210c      	movs	r1, #12
    1102:	485b      	ldr	r0, [pc, #364]	; (1270 <print_palette(unsigned char)+0x268>)
    1104:	f005 fdf4 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1108:	4855      	ldr	r0, [pc, #340]	; (1260 <print_palette(unsigned char)+0x258>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    110a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    110e:	f005 bff3 	b.w	70f8 <Print::println()>
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    1112:	4958      	ldr	r1, [pc, #352]	; (1274 <print_palette(unsigned char)+0x26c>)
    1114:	4852      	ldr	r0, [pc, #328]	; (1260 <print_palette(unsigned char)+0x258>)
    1116:	f7ff fb1b 	bl	750 <Print::println(char const*)>
		break;
    111a:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    111c:	4956      	ldr	r1, [pc, #344]	; (1278 <print_palette(unsigned char)+0x270>)
    111e:	4850      	ldr	r0, [pc, #320]	; (1260 <print_palette(unsigned char)+0x258>)
    1120:	f7ff fb16 	bl	750 <Print::println(char const*)>
		break;
    1124:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    1126:	4955      	ldr	r1, [pc, #340]	; (127c <print_palette(unsigned char)+0x274>)
    1128:	484d      	ldr	r0, [pc, #308]	; (1260 <print_palette(unsigned char)+0x258>)
    112a:	f7ff fb11 	bl	750 <Print::println(char const*)>
		break;
    112e:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    1130:	4953      	ldr	r1, [pc, #332]	; (1280 <print_palette(unsigned char)+0x278>)
    1132:	484b      	ldr	r0, [pc, #300]	; (1260 <print_palette(unsigned char)+0x258>)
    1134:	f7ff fb0c 	bl	750 <Print::println(char const*)>
		break;
    1138:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    113a:	4952      	ldr	r1, [pc, #328]	; (1284 <print_palette(unsigned char)+0x27c>)
    113c:	4848      	ldr	r0, [pc, #288]	; (1260 <print_palette(unsigned char)+0x258>)
    113e:	f7ff fb07 	bl	750 <Print::println(char const*)>
		break;
    1142:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    1144:	4950      	ldr	r1, [pc, #320]	; (1288 <print_palette(unsigned char)+0x280>)
    1146:	4846      	ldr	r0, [pc, #280]	; (1260 <print_palette(unsigned char)+0x258>)
    1148:	f7ff fb02 	bl	750 <Print::println(char const*)>
		break;
    114c:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    114e:	494f      	ldr	r1, [pc, #316]	; (128c <print_palette(unsigned char)+0x284>)
    1150:	4843      	ldr	r0, [pc, #268]	; (1260 <print_palette(unsigned char)+0x258>)
    1152:	f7ff fafd 	bl	750 <Print::println(char const*)>
		break;
    1156:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    1158:	494d      	ldr	r1, [pc, #308]	; (1290 <print_palette(unsigned char)+0x288>)
    115a:	4841      	ldr	r0, [pc, #260]	; (1260 <print_palette(unsigned char)+0x258>)
    115c:	f7ff faf8 	bl	750 <Print::println(char const*)>
		break;
    1160:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    1162:	494c      	ldr	r1, [pc, #304]	; (1294 <print_palette(unsigned char)+0x28c>)
    1164:	483e      	ldr	r0, [pc, #248]	; (1260 <print_palette(unsigned char)+0x258>)
    1166:	f7ff faf3 	bl	750 <Print::println(char const*)>
		break;
    116a:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    116c:	494a      	ldr	r1, [pc, #296]	; (1298 <print_palette(unsigned char)+0x290>)
    116e:	483c      	ldr	r0, [pc, #240]	; (1260 <print_palette(unsigned char)+0x258>)
    1170:	f7ff faee 	bl	750 <Print::println(char const*)>
		break;
    1174:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    1176:	4949      	ldr	r1, [pc, #292]	; (129c <print_palette(unsigned char)+0x294>)
    1178:	4839      	ldr	r0, [pc, #228]	; (1260 <print_palette(unsigned char)+0x258>)
    117a:	f7ff fae9 	bl	750 <Print::println(char const*)>
		break;
    117e:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    1180:	4947      	ldr	r1, [pc, #284]	; (12a0 <print_palette(unsigned char)+0x298>)
    1182:	4837      	ldr	r0, [pc, #220]	; (1260 <print_palette(unsigned char)+0x258>)
    1184:	f7ff fae4 	bl	750 <Print::println(char const*)>
		break;
    1188:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    118a:	4946      	ldr	r1, [pc, #280]	; (12a4 <print_palette(unsigned char)+0x29c>)
    118c:	4834      	ldr	r0, [pc, #208]	; (1260 <print_palette(unsigned char)+0x258>)
    118e:	f7ff fadf 	bl	750 <Print::println(char const*)>
		break;
    1192:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    1194:	4944      	ldr	r1, [pc, #272]	; (12a8 <print_palette(unsigned char)+0x2a0>)
    1196:	4832      	ldr	r0, [pc, #200]	; (1260 <print_palette(unsigned char)+0x258>)
    1198:	f7ff fada 	bl	750 <Print::println(char const*)>
		break;
    119c:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    119e:	4943      	ldr	r1, [pc, #268]	; (12ac <print_palette(unsigned char)+0x2a4>)
    11a0:	482f      	ldr	r0, [pc, #188]	; (1260 <print_palette(unsigned char)+0x258>)
    11a2:	f7ff fad5 	bl	750 <Print::println(char const*)>
		break;
    11a6:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    11a8:	4941      	ldr	r1, [pc, #260]	; (12b0 <print_palette(unsigned char)+0x2a8>)
    11aa:	482d      	ldr	r0, [pc, #180]	; (1260 <print_palette(unsigned char)+0x258>)
    11ac:	f7ff fad0 	bl	750 <Print::println(char const*)>
		break;
    11b0:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    11b2:	4940      	ldr	r1, [pc, #256]	; (12b4 <print_palette(unsigned char)+0x2ac>)
    11b4:	482a      	ldr	r0, [pc, #168]	; (1260 <print_palette(unsigned char)+0x258>)
    11b6:	f7ff facb 	bl	750 <Print::println(char const*)>
		break;
    11ba:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    11bc:	493e      	ldr	r1, [pc, #248]	; (12b8 <print_palette(unsigned char)+0x2b0>)
    11be:	4828      	ldr	r0, [pc, #160]	; (1260 <print_palette(unsigned char)+0x258>)
    11c0:	f7ff fac6 	bl	750 <Print::println(char const*)>
		break;
    11c4:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    11c6:	493d      	ldr	r1, [pc, #244]	; (12bc <print_palette(unsigned char)+0x2b4>)
    11c8:	4825      	ldr	r0, [pc, #148]	; (1260 <print_palette(unsigned char)+0x258>)
    11ca:	f7ff fac1 	bl	750 <Print::println(char const*)>
		break;
    11ce:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    11d0:	493b      	ldr	r1, [pc, #236]	; (12c0 <print_palette(unsigned char)+0x2b8>)
    11d2:	4823      	ldr	r0, [pc, #140]	; (1260 <print_palette(unsigned char)+0x258>)
    11d4:	f7ff fabc 	bl	750 <Print::println(char const*)>
		break;
    11d8:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    11da:	493a      	ldr	r1, [pc, #232]	; (12c4 <print_palette(unsigned char)+0x2bc>)
    11dc:	4820      	ldr	r0, [pc, #128]	; (1260 <print_palette(unsigned char)+0x258>)
    11de:	f7ff fab7 	bl	750 <Print::println(char const*)>
		break;
    11e2:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    11e4:	4938      	ldr	r1, [pc, #224]	; (12c8 <print_palette(unsigned char)+0x2c0>)
    11e6:	481e      	ldr	r0, [pc, #120]	; (1260 <print_palette(unsigned char)+0x258>)
    11e8:	f7ff fab2 	bl	750 <Print::println(char const*)>
		break;
    11ec:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    11ee:	4937      	ldr	r1, [pc, #220]	; (12cc <print_palette(unsigned char)+0x2c4>)
    11f0:	481b      	ldr	r0, [pc, #108]	; (1260 <print_palette(unsigned char)+0x258>)
    11f2:	f7ff faad 	bl	750 <Print::println(char const*)>
		break;
    11f6:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    11f8:	4935      	ldr	r1, [pc, #212]	; (12d0 <print_palette(unsigned char)+0x2c8>)
    11fa:	4819      	ldr	r0, [pc, #100]	; (1260 <print_palette(unsigned char)+0x258>)
    11fc:	f7ff faa8 	bl	750 <Print::println(char const*)>
		break;
    1200:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    1202:	4934      	ldr	r1, [pc, #208]	; (12d4 <print_palette(unsigned char)+0x2cc>)
    1204:	4816      	ldr	r0, [pc, #88]	; (1260 <print_palette(unsigned char)+0x258>)
    1206:	f7ff faa3 	bl	750 <Print::println(char const*)>
		break;
    120a:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    120c:	4932      	ldr	r1, [pc, #200]	; (12d8 <print_palette(unsigned char)+0x2d0>)
    120e:	4814      	ldr	r0, [pc, #80]	; (1260 <print_palette(unsigned char)+0x258>)
    1210:	f7ff fa9e 	bl	750 <Print::println(char const*)>
		break;
    1214:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    1216:	4931      	ldr	r1, [pc, #196]	; (12dc <print_palette(unsigned char)+0x2d4>)
    1218:	4811      	ldr	r0, [pc, #68]	; (1260 <print_palette(unsigned char)+0x258>)
    121a:	f7ff fa99 	bl	750 <Print::println(char const*)>
		break;
    121e:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    1220:	492f      	ldr	r1, [pc, #188]	; (12e0 <print_palette(unsigned char)+0x2d8>)
    1222:	480f      	ldr	r0, [pc, #60]	; (1260 <print_palette(unsigned char)+0x258>)
    1224:	f7ff fa94 	bl	750 <Print::println(char const*)>
		break;
    1228:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    122a:	492e      	ldr	r1, [pc, #184]	; (12e4 <print_palette(unsigned char)+0x2dc>)
    122c:	480c      	ldr	r0, [pc, #48]	; (1260 <print_palette(unsigned char)+0x258>)
    122e:	f7ff fa8f 	bl	750 <Print::println(char const*)>
		break;
    1232:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    1234:	492c      	ldr	r1, [pc, #176]	; (12e8 <print_palette(unsigned char)+0x2e0>)
    1236:	480a      	ldr	r0, [pc, #40]	; (1260 <print_palette(unsigned char)+0x258>)
    1238:	f7ff fa8a 	bl	750 <Print::println(char const*)>
		break;
    123c:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    123e:	492b      	ldr	r1, [pc, #172]	; (12ec <print_palette(unsigned char)+0x2e4>)
    1240:	4807      	ldr	r0, [pc, #28]	; (1260 <print_palette(unsigned char)+0x258>)
    1242:	f7ff fa85 	bl	750 <Print::println(char const*)>
		break;
    1246:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    1248:	4929      	ldr	r1, [pc, #164]	; (12f0 <print_palette(unsigned char)+0x2e8>)
    124a:	4805      	ldr	r0, [pc, #20]	; (1260 <print_palette(unsigned char)+0x258>)
    124c:	f7ff fa80 	bl	750 <Print::println(char const*)>
		break;
    1250:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    1252:	4928      	ldr	r1, [pc, #160]	; (12f4 <print_palette(unsigned char)+0x2ec>)
    1254:	4802      	ldr	r0, [pc, #8]	; (1260 <print_palette(unsigned char)+0x258>)
    1256:	f7ff fa7b 	bl	750 <Print::println(char const*)>
		break;
    125a:	bd10      	pop	{r4, pc}
    125c:	00008810 	.word	0x00008810
    1260:	1fff873c 	.word	0x1fff873c
    1264:	00008814 	.word	0x00008814
    1268:	00008da8 	.word	0x00008da8
    126c:	00008d9c 	.word	0x00008d9c
    1270:	00008d8c 	.word	0x00008d8c
    1274:	00008d7c 	.word	0x00008d7c
    1278:	00008d68 	.word	0x00008d68
    127c:	00008d50 	.word	0x00008d50
    1280:	00008d38 	.word	0x00008d38
    1284:	00008d28 	.word	0x00008d28
    1288:	00008d10 	.word	0x00008d10
    128c:	00008d04 	.word	0x00008d04
    1290:	00008cf8 	.word	0x00008cf8
    1294:	00008ce0 	.word	0x00008ce0
    1298:	00008cd4 	.word	0x00008cd4
    129c:	00008cc8 	.word	0x00008cc8
    12a0:	00008cbc 	.word	0x00008cbc
    12a4:	00008cb0 	.word	0x00008cb0
    12a8:	00008ca0 	.word	0x00008ca0
    12ac:	00008c94 	.word	0x00008c94
    12b0:	00008c80 	.word	0x00008c80
    12b4:	00008c74 	.word	0x00008c74
    12b8:	00008c64 	.word	0x00008c64
    12bc:	00008c58 	.word	0x00008c58
    12c0:	00008c4c 	.word	0x00008c4c
    12c4:	00008c44 	.word	0x00008c44
    12c8:	00008c30 	.word	0x00008c30
    12cc:	00008c20 	.word	0x00008c20
    12d0:	00008c0c 	.word	0x00008c0c
    12d4:	00008c00 	.word	0x00008c00
    12d8:	00008bf4 	.word	0x00008bf4
    12dc:	00008be8 	.word	0x00008be8
    12e0:	00008bd8 	.word	0x00008bd8
    12e4:	00008bc4 	.word	0x00008bc4
    12e8:	00008bb8 	.word	0x00008bb8
    12ec:	00008ba8 	.word	0x00008ba8
    12f0:	00008b9c 	.word	0x00008b9c
    12f4:	00008b8c 	.word	0x00008b8c
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    12f8:	4996      	ldr	r1, [pc, #600]	; (1554 <print_palette(unsigned char)+0x54c>)
    12fa:	4897      	ldr	r0, [pc, #604]	; (1558 <print_palette(unsigned char)+0x550>)
    12fc:	f7ff fa28 	bl	750 <Print::println(char const*)>
		break;
    1300:	bd10      	pop	{r4, pc}
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    1302:	4996      	ldr	r1, [pc, #600]	; (155c <print_palette(unsigned char)+0x554>)
    1304:	4894      	ldr	r0, [pc, #592]	; (1558 <print_palette(unsigned char)+0x550>)
    1306:	f7ff fa23 	bl	750 <Print::println(char const*)>
		break;
    130a:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    130c:	4994      	ldr	r1, [pc, #592]	; (1560 <print_palette(unsigned char)+0x558>)
    130e:	4892      	ldr	r0, [pc, #584]	; (1558 <print_palette(unsigned char)+0x550>)
    1310:	f7ff fa1e 	bl	750 <Print::println(char const*)>
		break;
    1314:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1316:	4993      	ldr	r1, [pc, #588]	; (1564 <print_palette(unsigned char)+0x55c>)
    1318:	488f      	ldr	r0, [pc, #572]	; (1558 <print_palette(unsigned char)+0x550>)
    131a:	f7ff fa19 	bl	750 <Print::println(char const*)>
		break;
    131e:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    1320:	4991      	ldr	r1, [pc, #580]	; (1568 <print_palette(unsigned char)+0x560>)
    1322:	488d      	ldr	r0, [pc, #564]	; (1558 <print_palette(unsigned char)+0x550>)
    1324:	f7ff fa14 	bl	750 <Print::println(char const*)>
		break;
    1328:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    132a:	4990      	ldr	r1, [pc, #576]	; (156c <print_palette(unsigned char)+0x564>)
    132c:	488a      	ldr	r0, [pc, #552]	; (1558 <print_palette(unsigned char)+0x550>)
    132e:	f7ff fa0f 	bl	750 <Print::println(char const*)>
		break;
    1332:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    1334:	498e      	ldr	r1, [pc, #568]	; (1570 <print_palette(unsigned char)+0x568>)
    1336:	4888      	ldr	r0, [pc, #544]	; (1558 <print_palette(unsigned char)+0x550>)
    1338:	f7ff fa0a 	bl	750 <Print::println(char const*)>
		break;
    133c:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    133e:	498d      	ldr	r1, [pc, #564]	; (1574 <print_palette(unsigned char)+0x56c>)
    1340:	4885      	ldr	r0, [pc, #532]	; (1558 <print_palette(unsigned char)+0x550>)
    1342:	f7ff fa05 	bl	750 <Print::println(char const*)>
		break;
    1346:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    1348:	498b      	ldr	r1, [pc, #556]	; (1578 <print_palette(unsigned char)+0x570>)
    134a:	4883      	ldr	r0, [pc, #524]	; (1558 <print_palette(unsigned char)+0x550>)
    134c:	f7ff fa00 	bl	750 <Print::println(char const*)>
		break;
    1350:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    1352:	498a      	ldr	r1, [pc, #552]	; (157c <print_palette(unsigned char)+0x574>)
    1354:	4880      	ldr	r0, [pc, #512]	; (1558 <print_palette(unsigned char)+0x550>)
    1356:	f7ff f9fb 	bl	750 <Print::println(char const*)>
		break;
    135a:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    135c:	4988      	ldr	r1, [pc, #544]	; (1580 <print_palette(unsigned char)+0x578>)
    135e:	487e      	ldr	r0, [pc, #504]	; (1558 <print_palette(unsigned char)+0x550>)
    1360:	f7ff f9f6 	bl	750 <Print::println(char const*)>
		break;
    1364:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    1366:	4987      	ldr	r1, [pc, #540]	; (1584 <print_palette(unsigned char)+0x57c>)
    1368:	487b      	ldr	r0, [pc, #492]	; (1558 <print_palette(unsigned char)+0x550>)
    136a:	f7ff f9f1 	bl	750 <Print::println(char const*)>
		break;
    136e:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    1370:	4985      	ldr	r1, [pc, #532]	; (1588 <print_palette(unsigned char)+0x580>)
    1372:	4879      	ldr	r0, [pc, #484]	; (1558 <print_palette(unsigned char)+0x550>)
    1374:	f7ff f9ec 	bl	750 <Print::println(char const*)>
		break;
    1378:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    137a:	4984      	ldr	r1, [pc, #528]	; (158c <print_palette(unsigned char)+0x584>)
    137c:	4876      	ldr	r0, [pc, #472]	; (1558 <print_palette(unsigned char)+0x550>)
    137e:	f7ff f9e7 	bl	750 <Print::println(char const*)>
		break;
    1382:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    1384:	4982      	ldr	r1, [pc, #520]	; (1590 <print_palette(unsigned char)+0x588>)
    1386:	4874      	ldr	r0, [pc, #464]	; (1558 <print_palette(unsigned char)+0x550>)
    1388:	f7ff f9e2 	bl	750 <Print::println(char const*)>
		break;
    138c:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    138e:	4981      	ldr	r1, [pc, #516]	; (1594 <print_palette(unsigned char)+0x58c>)
    1390:	4871      	ldr	r0, [pc, #452]	; (1558 <print_palette(unsigned char)+0x550>)
    1392:	f7ff f9dd 	bl	750 <Print::println(char const*)>
		break;
    1396:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    1398:	497f      	ldr	r1, [pc, #508]	; (1598 <print_palette(unsigned char)+0x590>)
    139a:	486f      	ldr	r0, [pc, #444]	; (1558 <print_palette(unsigned char)+0x550>)
    139c:	f7ff f9d8 	bl	750 <Print::println(char const*)>
		break;
    13a0:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    13a2:	497e      	ldr	r1, [pc, #504]	; (159c <print_palette(unsigned char)+0x594>)
    13a4:	486c      	ldr	r0, [pc, #432]	; (1558 <print_palette(unsigned char)+0x550>)
    13a6:	f7ff f9d3 	bl	750 <Print::println(char const*)>
		break;
    13aa:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    13ac:	497c      	ldr	r1, [pc, #496]	; (15a0 <print_palette(unsigned char)+0x598>)
    13ae:	486a      	ldr	r0, [pc, #424]	; (1558 <print_palette(unsigned char)+0x550>)
    13b0:	f7ff f9ce 	bl	750 <Print::println(char const*)>
		break;
    13b4:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    13b6:	497b      	ldr	r1, [pc, #492]	; (15a4 <print_palette(unsigned char)+0x59c>)
    13b8:	4867      	ldr	r0, [pc, #412]	; (1558 <print_palette(unsigned char)+0x550>)
    13ba:	f7ff f9c9 	bl	750 <Print::println(char const*)>
		break;
    13be:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    13c0:	4979      	ldr	r1, [pc, #484]	; (15a8 <print_palette(unsigned char)+0x5a0>)
    13c2:	4865      	ldr	r0, [pc, #404]	; (1558 <print_palette(unsigned char)+0x550>)
    13c4:	f7ff f9c4 	bl	750 <Print::println(char const*)>
		break;
    13c8:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    13ca:	4978      	ldr	r1, [pc, #480]	; (15ac <print_palette(unsigned char)+0x5a4>)
    13cc:	4862      	ldr	r0, [pc, #392]	; (1558 <print_palette(unsigned char)+0x550>)
    13ce:	f7ff f9bf 	bl	750 <Print::println(char const*)>
		break;
    13d2:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    13d4:	4976      	ldr	r1, [pc, #472]	; (15b0 <print_palette(unsigned char)+0x5a8>)
    13d6:	4860      	ldr	r0, [pc, #384]	; (1558 <print_palette(unsigned char)+0x550>)
    13d8:	f7ff f9ba 	bl	750 <Print::println(char const*)>
		break;
    13dc:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    13de:	4975      	ldr	r1, [pc, #468]	; (15b4 <print_palette(unsigned char)+0x5ac>)
    13e0:	485d      	ldr	r0, [pc, #372]	; (1558 <print_palette(unsigned char)+0x550>)
    13e2:	f7ff f9b5 	bl	750 <Print::println(char const*)>
		break;
    13e6:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    13e8:	4973      	ldr	r1, [pc, #460]	; (15b8 <print_palette(unsigned char)+0x5b0>)
    13ea:	485b      	ldr	r0, [pc, #364]	; (1558 <print_palette(unsigned char)+0x550>)
    13ec:	f7ff f9b0 	bl	750 <Print::println(char const*)>
		break;
    13f0:	bd10      	pop	{r4, pc}
	case 30:
		Serial.println("bhw2_23_gp");
		break;

	case 31:
		Serial.println("bhw2_22_gp");
    13f2:	4972      	ldr	r1, [pc, #456]	; (15bc <print_palette(unsigned char)+0x5b4>)
    13f4:	4858      	ldr	r0, [pc, #352]	; (1558 <print_palette(unsigned char)+0x550>)
    13f6:	f7ff f9ab 	bl	750 <Print::println(char const*)>
		break;
    13fa:	bd10      	pop	{r4, pc}
	case 29:
		Serial.println("bhw1_28_gp");
		break;

	case 30:
		Serial.println("bhw2_23_gp");
    13fc:	4970      	ldr	r1, [pc, #448]	; (15c0 <print_palette(unsigned char)+0x5b8>)
    13fe:	4856      	ldr	r0, [pc, #344]	; (1558 <print_palette(unsigned char)+0x550>)
    1400:	f7ff f9a6 	bl	750 <Print::println(char const*)>
		break;
    1404:	bd10      	pop	{r4, pc}
	case 28:
		Serial.println("bhw1_26_gp");
		break;

	case 29:
		Serial.println("bhw1_28_gp");
    1406:	496f      	ldr	r1, [pc, #444]	; (15c4 <print_palette(unsigned char)+0x5bc>)
    1408:	4853      	ldr	r0, [pc, #332]	; (1558 <print_palette(unsigned char)+0x550>)
    140a:	f7ff f9a1 	bl	750 <Print::println(char const*)>
		break;
    140e:	bd10      	pop	{r4, pc}
	case 27:
		Serial.println("bhw1_greeny_gp");
		break;

	case 28:
		Serial.println("bhw1_26_gp");
    1410:	496d      	ldr	r1, [pc, #436]	; (15c8 <print_palette(unsigned char)+0x5c0>)
    1412:	4851      	ldr	r0, [pc, #324]	; (1558 <print_palette(unsigned char)+0x550>)
    1414:	f7ff f99c 	bl	750 <Print::println(char const*)>
		break;
    1418:	bd10      	pop	{r4, pc}
	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
		break;

	case 27:
		Serial.println("bhw1_greeny_gp");
    141a:	496c      	ldr	r1, [pc, #432]	; (15cc <print_palette(unsigned char)+0x5c4>)
    141c:	484e      	ldr	r0, [pc, #312]	; (1558 <print_palette(unsigned char)+0x550>)
    141e:	f7ff f997 	bl	750 <Print::println(char const*)>
		break;
    1422:	bd10      	pop	{r4, pc}
	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
		break;

	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
    1424:	496a      	ldr	r1, [pc, #424]	; (15d0 <print_palette(unsigned char)+0x5c8>)
    1426:	484c      	ldr	r0, [pc, #304]	; (1558 <print_palette(unsigned char)+0x550>)
    1428:	f7ff f992 	bl	750 <Print::println(char const*)>
		break;
    142c:	bd10      	pop	{r4, pc}
	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
		break;

	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
    142e:	4969      	ldr	r1, [pc, #420]	; (15d4 <print_palette(unsigned char)+0x5cc>)
    1430:	4849      	ldr	r0, [pc, #292]	; (1558 <print_palette(unsigned char)+0x550>)
    1432:	f7ff f98d 	bl	750 <Print::println(char const*)>
		break;
    1436:	bd10      	pop	{r4, pc}
	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
		break;

	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
    1438:	4967      	ldr	r1, [pc, #412]	; (15d8 <print_palette(unsigned char)+0x5d0>)
    143a:	4847      	ldr	r0, [pc, #284]	; (1558 <print_palette(unsigned char)+0x550>)
    143c:	f7ff f988 	bl	750 <Print::println(char const*)>
		break;
    1440:	bd10      	pop	{r4, pc}
	case 22:
		Serial.println("es_autumn_19_gp");
		break;

	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
    1442:	4966      	ldr	r1, [pc, #408]	; (15dc <print_palette(unsigned char)+0x5d4>)
    1444:	4844      	ldr	r0, [pc, #272]	; (1558 <print_palette(unsigned char)+0x550>)
    1446:	f7ff f983 	bl	750 <Print::println(char const*)>
		break;
    144a:	bd10      	pop	{r4, pc}
	case 21:
		Serial.println("Sunset_Real_gp");
		break;

	case 22:
		Serial.println("es_autumn_19_gp");
    144c:	4964      	ldr	r1, [pc, #400]	; (15e0 <print_palette(unsigned char)+0x5d8>)
    144e:	4842      	ldr	r0, [pc, #264]	; (1558 <print_palette(unsigned char)+0x550>)
    1450:	f7ff f97e 	bl	750 <Print::println(char const*)>
		break;
    1454:	bd10      	pop	{r4, pc}
	case 20:
		Serial.println("Magenta_Evening_gp");
		break;

	case 21:
		Serial.println("Sunset_Real_gp");
    1456:	4963      	ldr	r1, [pc, #396]	; (15e4 <print_palette(unsigned char)+0x5dc>)
    1458:	483f      	ldr	r0, [pc, #252]	; (1558 <print_palette(unsigned char)+0x550>)
    145a:	f7ff f979 	bl	750 <Print::println(char const*)>
		break;
    145e:	bd10      	pop	{r4, pc}
	case 19:
		Serial.println("Colorfull_gp");
		break;

	case 20:
		Serial.println("Magenta_Evening_gp");
    1460:	4961      	ldr	r1, [pc, #388]	; (15e8 <print_palette(unsigned char)+0x5e0>)
    1462:	483d      	ldr	r0, [pc, #244]	; (1558 <print_palette(unsigned char)+0x550>)
    1464:	f7ff f974 	bl	750 <Print::println(char const*)>
		break;
    1468:	bd10      	pop	{r4, pc}
	case 18:
		Serial.println("fire_gp");
		break;

	case 19:
		Serial.println("Colorfull_gp");
    146a:	4960      	ldr	r1, [pc, #384]	; (15ec <print_palette(unsigned char)+0x5e4>)
    146c:	483a      	ldr	r0, [pc, #232]	; (1558 <print_palette(unsigned char)+0x550>)
    146e:	f7ff f96f 	bl	750 <Print::println(char const*)>
		break;
    1472:	bd10      	pop	{r4, pc}
	case 17:
		Serial.println("lava_gp");
		break;

	case 18:
		Serial.println("fire_gp");
    1474:	495e      	ldr	r1, [pc, #376]	; (15f0 <print_palette(unsigned char)+0x5e8>)
    1476:	4838      	ldr	r0, [pc, #224]	; (1558 <print_palette(unsigned char)+0x550>)
    1478:	f7ff f96a 	bl	750 <Print::println(char const*)>
		break;
    147c:	bd10      	pop	{r4, pc}
	case 16:
		Serial.println("es_emerald_dragon_08_gp");
		break;

	case 17:
		Serial.println("lava_gp");
    147e:	495d      	ldr	r1, [pc, #372]	; (15f4 <print_palette(unsigned char)+0x5ec>)
    1480:	4835      	ldr	r0, [pc, #212]	; (1558 <print_palette(unsigned char)+0x550>)
    1482:	f7ff f965 	bl	750 <Print::println(char const*)>
		break;
    1486:	bd10      	pop	{r4, pc}
	case 15:
		Serial.println("Fuschia_7_gp");
		break;

	case 16:
		Serial.println("es_emerald_dragon_08_gp");
    1488:	495b      	ldr	r1, [pc, #364]	; (15f8 <print_palette(unsigned char)+0x5f0>)
    148a:	4833      	ldr	r0, [pc, #204]	; (1558 <print_palette(unsigned char)+0x550>)
    148c:	f7ff f960 	bl	750 <Print::println(char const*)>
		break;
    1490:	bd10      	pop	{r4, pc}
	case 14:
		Serial.println("ib15_gp");
		break;

	case 15:
		Serial.println("Fuschia_7_gp");
    1492:	495a      	ldr	r1, [pc, #360]	; (15fc <print_palette(unsigned char)+0x5f4>)
    1494:	4830      	ldr	r0, [pc, #192]	; (1558 <print_palette(unsigned char)+0x550>)
    1496:	f7ff f95b 	bl	750 <Print::println(char const*)>
		break;
    149a:	bd10      	pop	{r4, pc}
	case 13:
		Serial.println("GMT_drywet_gp");
		break;

	case 14:
		Serial.println("ib15_gp");
    149c:	4958      	ldr	r1, [pc, #352]	; (1600 <print_palette(unsigned char)+0x5f8>)
    149e:	482e      	ldr	r0, [pc, #184]	; (1558 <print_palette(unsigned char)+0x550>)
    14a0:	f7ff f956 	bl	750 <Print::println(char const*)>
		break;
    14a4:	bd10      	pop	{r4, pc}
	case 12:
		Serial.println("gr64_hult_gp");
		break;

	case 13:
		Serial.println("GMT_drywet_gp");
    14a6:	4957      	ldr	r1, [pc, #348]	; (1604 <print_palette(unsigned char)+0x5fc>)
    14a8:	482b      	ldr	r0, [pc, #172]	; (1558 <print_palette(unsigned char)+0x550>)
    14aa:	f7ff f951 	bl	750 <Print::println(char const*)>
		break;
    14ae:	bd10      	pop	{r4, pc}
	case 11:
		Serial.println("gr65_hult_gp");
		break;

	case 12:
		Serial.println("gr64_hult_gp");
    14b0:	4955      	ldr	r1, [pc, #340]	; (1608 <print_palette(unsigned char)+0x600>)
    14b2:	4829      	ldr	r0, [pc, #164]	; (1558 <print_palette(unsigned char)+0x550>)
    14b4:	f7ff f94c 	bl	750 <Print::println(char const*)>
		break;
    14b8:	bd10      	pop	{r4, pc}
	case 10:
		Serial.println("rainbowsherbet_gp");
		break;

	case 11:
		Serial.println("gr65_hult_gp");
    14ba:	4954      	ldr	r1, [pc, #336]	; (160c <print_palette(unsigned char)+0x604>)
    14bc:	4826      	ldr	r0, [pc, #152]	; (1558 <print_palette(unsigned char)+0x550>)
    14be:	f7ff f947 	bl	750 <Print::println(char const*)>
		break;
    14c2:	bd10      	pop	{r4, pc}
	case 9:
		Serial.println("es_landscape_33_gp");
		break;

	case 10:
		Serial.println("rainbowsherbet_gp");
    14c4:	4952      	ldr	r1, [pc, #328]	; (1610 <print_palette(unsigned char)+0x608>)
    14c6:	4824      	ldr	r0, [pc, #144]	; (1558 <print_palette(unsigned char)+0x550>)
    14c8:	f7ff f942 	bl	750 <Print::println(char const*)>
		break;
    14cc:	bd10      	pop	{r4, pc}
	case 8:
		Serial.println("es_landscape_64_gp");
		break;

	case 9:
		Serial.println("es_landscape_33_gp");
    14ce:	4951      	ldr	r1, [pc, #324]	; (1614 <print_palette(unsigned char)+0x60c>)
    14d0:	4821      	ldr	r0, [pc, #132]	; (1558 <print_palette(unsigned char)+0x550>)
    14d2:	f7ff f93d 	bl	750 <Print::println(char const*)>
		break;
    14d6:	bd10      	pop	{r4, pc}
	case 7:
		Serial.println("es_ocean_breeze_036_gp");
		break;

	case 8:
		Serial.println("es_landscape_64_gp");
    14d8:	494f      	ldr	r1, [pc, #316]	; (1618 <print_palette(unsigned char)+0x610>)
    14da:	481f      	ldr	r0, [pc, #124]	; (1558 <print_palette(unsigned char)+0x550>)
    14dc:	f7ff f938 	bl	750 <Print::println(char const*)>
		break;
    14e0:	bd10      	pop	{r4, pc}
	case 6:
		Serial.println("es_ocean_breeze_068_gp");
		break;

	case 7:
		Serial.println("es_ocean_breeze_036_gp");
    14e2:	494e      	ldr	r1, [pc, #312]	; (161c <print_palette(unsigned char)+0x614>)
    14e4:	481c      	ldr	r0, [pc, #112]	; (1558 <print_palette(unsigned char)+0x550>)
    14e6:	f7ff f933 	bl	750 <Print::println(char const*)>
		break;
    14ea:	bd10      	pop	{r4, pc}
	case 5:
		Serial.println("Coral_reef_gp");
		break;

	case 6:
		Serial.println("es_ocean_breeze_068_gp");
    14ec:	494c      	ldr	r1, [pc, #304]	; (1620 <print_palette(unsigned char)+0x618>)
    14ee:	481a      	ldr	r0, [pc, #104]	; (1558 <print_palette(unsigned char)+0x550>)
    14f0:	f7ff f92e 	bl	750 <Print::println(char const*)>
		break;
    14f4:	bd10      	pop	{r4, pc}
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    14f6:	494b      	ldr	r1, [pc, #300]	; (1624 <print_palette(unsigned char)+0x61c>)
    14f8:	4817      	ldr	r0, [pc, #92]	; (1558 <print_palette(unsigned char)+0x550>)
    14fa:	f7ff f929 	bl	750 <Print::println(char const*)>
		break;
    14fe:	bd10      	pop	{r4, pc}
	case 3:
		Serial.println("es_pinksplash_08_gp");
		break;

	case 4:
		Serial.println("es_pinksplash_07_gp");
    1500:	4949      	ldr	r1, [pc, #292]	; (1628 <print_palette(unsigned char)+0x620>)
    1502:	4815      	ldr	r0, [pc, #84]	; (1558 <print_palette(unsigned char)+0x550>)
    1504:	f7ff f924 	bl	750 <Print::println(char const*)>
		break;
    1508:	bd10      	pop	{r4, pc}
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    150a:	4948      	ldr	r1, [pc, #288]	; (162c <print_palette(unsigned char)+0x624>)
    150c:	4812      	ldr	r0, [pc, #72]	; (1558 <print_palette(unsigned char)+0x550>)
    150e:	f7ff f91f 	bl	750 <Print::println(char const*)>
		break;
    1512:	bd10      	pop	{r4, pc}
    1514:	210e      	movs	r1, #14
    1516:	4846      	ldr	r0, [pc, #280]	; (1630 <print_palette(unsigned char)+0x628>)
    1518:	f005 fbea 	bl	6cf0 <usb_serial_write>
    151c:	480e      	ldr	r0, [pc, #56]	; (1558 <print_palette(unsigned char)+0x550>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    151e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1522:	f005 bde9 	b.w	70f8 <Print::println()>
    1526:	2109      	movs	r1, #9
    1528:	4842      	ldr	r0, [pc, #264]	; (1634 <print_palette(unsigned char)+0x62c>)
    152a:	f005 fbe1 	bl	6cf0 <usb_serial_write>
    152e:	480a      	ldr	r0, [pc, #40]	; (1558 <print_palette(unsigned char)+0x550>)
    1530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1534:	f005 bde0 	b.w	70f8 <Print::println()>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    1538:	493f      	ldr	r1, [pc, #252]	; (1638 <print_palette(unsigned char)+0x630>)
    153a:	4807      	ldr	r0, [pc, #28]	; (1558 <print_palette(unsigned char)+0x550>)
    153c:	f7ff f908 	bl	750 <Print::println(char const*)>
		break;
    1540:	bd10      	pop	{r4, pc}
    1542:	2116      	movs	r1, #22
    1544:	483d      	ldr	r0, [pc, #244]	; (163c <print_palette(unsigned char)+0x634>)
    1546:	f005 fbd3 	bl	6cf0 <usb_serial_write>
    154a:	4803      	ldr	r0, [pc, #12]	; (1558 <print_palette(unsigned char)+0x550>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    154c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1550:	f005 bdd2 	b.w	70f8 <Print::println()>
    1554:	00008b80 	.word	0x00008b80
    1558:	1fff873c 	.word	0x1fff873c
    155c:	00008b6c 	.word	0x00008b6c
    1560:	00008b5c 	.word	0x00008b5c
    1564:	00008b50 	.word	0x00008b50
    1568:	00008b44 	.word	0x00008b44
    156c:	00008b38 	.word	0x00008b38
    1570:	00008b24 	.word	0x00008b24
    1574:	00008b18 	.word	0x00008b18
    1578:	00008b0c 	.word	0x00008b0c
    157c:	00008b00 	.word	0x00008b00
    1580:	00008ae8 	.word	0x00008ae8
    1584:	00008ae0 	.word	0x00008ae0
    1588:	00008b78 	.word	0x00008b78
    158c:	00008ad4 	.word	0x00008ad4
    1590:	00008ac8 	.word	0x00008ac8
    1594:	00008ab4 	.word	0x00008ab4
    1598:	00008aa0 	.word	0x00008aa0
    159c:	00008a90 	.word	0x00008a90
    15a0:	00008a84 	.word	0x00008a84
    15a4:	00008a78 	.word	0x00008a78
    15a8:	00008a6c 	.word	0x00008a6c
    15ac:	00008a60 	.word	0x00008a60
    15b0:	00008a54 	.word	0x00008a54
    15b4:	00008a48 	.word	0x00008a48
    15b8:	00008a3c 	.word	0x00008a3c
    15bc:	00008a30 	.word	0x00008a30
    15c0:	00008a24 	.word	0x00008a24
    15c4:	00008a18 	.word	0x00008a18
    15c8:	00008a0c 	.word	0x00008a0c
    15cc:	000089fc 	.word	0x000089fc
    15d0:	000089e8 	.word	0x000089e8
    15d4:	000089cc 	.word	0x000089cc
    15d8:	000089b4 	.word	0x000089b4
    15dc:	00008998 	.word	0x00008998
    15e0:	00008988 	.word	0x00008988
    15e4:	00008978 	.word	0x00008978
    15e8:	00008964 	.word	0x00008964
    15ec:	00008954 	.word	0x00008954
    15f0:	0000894c 	.word	0x0000894c
    15f4:	00008944 	.word	0x00008944
    15f8:	0000892c 	.word	0x0000892c
    15fc:	0000891c 	.word	0x0000891c
    1600:	00008914 	.word	0x00008914
    1604:	00008904 	.word	0x00008904
    1608:	000088f4 	.word	0x000088f4
    160c:	000088e4 	.word	0x000088e4
    1610:	000088d0 	.word	0x000088d0
    1614:	000088bc 	.word	0x000088bc
    1618:	000088a8 	.word	0x000088a8
    161c:	00008890 	.word	0x00008890
    1620:	00008878 	.word	0x00008878
    1624:	00008868 	.word	0x00008868
    1628:	00008854 	.word	0x00008854
    162c:	00008840 	.word	0x00008840
    1630:	00008830 	.word	0x00008830
    1634:	00008824 	.word	0x00008824
    1638:	00008818 	.word	0x00008818
    163c:	00008dc0 	.word	0x00008dc0

00001640 <LEDDebug(LEDStruct&)>:
}



// Debugging function
void LEDDebug(LEDStruct& leds) {
    1640:	b538      	push	{r3, r4, r5, lr}
    1642:	2100      	movs	r1, #0
    1644:	4604      	mov	r4, r0
    1646:	4896      	ldr	r0, [pc, #600]	; (18a0 <LEDDebug(LEDStruct&)+0x260>)
    1648:	f005 fb52 	bl	6cf0 <usb_serial_write>
    164c:	4895      	ldr	r0, [pc, #596]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    164e:	f005 fd53 	bl	70f8 <Print::println()>
    1652:	2132      	movs	r1, #50	; 0x32
    1654:	4894      	ldr	r0, [pc, #592]	; (18a8 <LEDDebug(LEDStruct&)+0x268>)
    1656:	f005 fb4b 	bl	6cf0 <usb_serial_write>
    165a:	4892      	ldr	r0, [pc, #584]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    165c:	f005 fd4c 	bl	70f8 <Print::println()>
    1660:	2112      	movs	r1, #18
    1662:	4892      	ldr	r0, [pc, #584]	; (18ac <LEDDebug(LEDStruct&)+0x26c>)
    1664:	f005 fb44 	bl	6cf0 <usb_serial_write>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    1668:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    166c:	2b00      	cmp	r3, #0
    166e:	f000 81d2 	beq.w	1a16 <LEDDebug(LEDStruct&)+0x3d6>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    1672:	2b01      	cmp	r3, #1
    1674:	f000 8206 	beq.w	1a84 <LEDDebug(LEDStruct&)+0x444>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1678:	2b02      	cmp	r3, #2
    167a:	f000 820b 	beq.w	1a94 <LEDDebug(LEDStruct&)+0x454>
    167e:	2112      	movs	r1, #18
    1680:	488b      	ldr	r0, [pc, #556]	; (18b0 <LEDDebug(LEDStruct&)+0x270>)
    1682:	f005 fb35 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1686:	2300      	movs	r3, #0
    1688:	220a      	movs	r2, #10
    168a:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
    168e:	4885      	ldr	r0, [pc, #532]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1690:	f005 fd42 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1694:	4883      	ldr	r0, [pc, #524]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1696:	f005 fd2f 	bl	70f8 <Print::println()>
    169a:	2112      	movs	r1, #18
    169c:	4885      	ldr	r0, [pc, #532]	; (18b4 <LEDDebug(LEDStruct&)+0x274>)
    169e:	f005 fb27 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    16a2:	2300      	movs	r3, #0
    16a4:	220a      	movs	r2, #10
    16a6:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    16aa:	487e      	ldr	r0, [pc, #504]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16ac:	f005 fd34 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    16b0:	487c      	ldr	r0, [pc, #496]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16b2:	f005 fd21 	bl	70f8 <Print::println()>
    16b6:	2112      	movs	r1, #18
    16b8:	487f      	ldr	r0, [pc, #508]	; (18b8 <LEDDebug(LEDStruct&)+0x278>)
    16ba:	f005 fb19 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    16be:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    16c2:	4878      	ldr	r0, [pc, #480]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16c4:	f005 fd68 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    16c8:	4876      	ldr	r0, [pc, #472]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16ca:	f005 fd15 	bl	70f8 <Print::println()>
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    16ce:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    16d2:	2b00      	cmp	r3, #0
    16d4:	f040 819a 	bne.w	1a0c <LEDDebug(LEDStruct&)+0x3cc>
    16d8:	2112      	movs	r1, #18
    16da:	4878      	ldr	r0, [pc, #480]	; (18bc <LEDDebug(LEDStruct&)+0x27c>)
    16dc:	f005 fb08 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    16e0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    16e4:	486f      	ldr	r0, [pc, #444]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16e6:	f005 fd57 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    16ea:	486e      	ldr	r0, [pc, #440]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16ec:	f005 fd04 	bl	70f8 <Print::println()>
    16f0:	2112      	movs	r1, #18
    16f2:	4873      	ldr	r0, [pc, #460]	; (18c0 <LEDDebug(LEDStruct&)+0x280>)
    16f4:	f005 fafc 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    16f8:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    16fc:	4869      	ldr	r0, [pc, #420]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    16fe:	f005 fd4b 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1702:	4868      	ldr	r0, [pc, #416]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1704:	f005 fcf8 	bl	70f8 <Print::println()>
    1708:	2112      	movs	r1, #18
    170a:	486e      	ldr	r0, [pc, #440]	; (18c4 <LEDDebug(LEDStruct&)+0x284>)
    170c:	f005 faf0 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1710:	2300      	movs	r3, #0
    1712:	220a      	movs	r2, #10
    1714:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    1718:	4862      	ldr	r0, [pc, #392]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    171a:	f005 fcfd 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    171e:	4861      	ldr	r0, [pc, #388]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1720:	f005 fcea 	bl	70f8 <Print::println()>
    1724:	2112      	movs	r1, #18
    1726:	4868      	ldr	r0, [pc, #416]	; (18c8 <LEDDebug(LEDStruct&)+0x288>)
    1728:	f005 fae2 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    172c:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    1730:	485c      	ldr	r0, [pc, #368]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1732:	f005 fd31 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1736:	485b      	ldr	r0, [pc, #364]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1738:	f005 fcde 	bl	70f8 <Print::println()>
    173c:	2119      	movs	r1, #25
    173e:	4863      	ldr	r0, [pc, #396]	; (18cc <LEDDebug(LEDStruct&)+0x28c>)
    1740:	f005 fad6 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1744:	4857      	ldr	r0, [pc, #348]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1746:	f005 fcd7 	bl	70f8 <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
    174a:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    174e:	2b0f      	cmp	r3, #15
    1750:	f200 8146 	bhi.w	19e0 <LEDDebug(LEDStruct&)+0x3a0>
    1754:	e8df f013 	tbh	[pc, r3, lsl #1]
    1758:	014400d2 	.word	0x014400d2
    175c:	01440144 	.word	0x01440144
    1760:	006d0144 	.word	0x006d0144
    1764:	01440144 	.word	0x01440144
    1768:	01440027 	.word	0x01440027
    176c:	01440144 	.word	0x01440144
    1770:	01440144 	.word	0x01440144
    1774:	00100144 	.word	0x00100144
    1778:	2113      	movs	r1, #19
    177a:	4855      	ldr	r0, [pc, #340]	; (18d0 <LEDDebug(LEDStruct&)+0x290>)
    177c:	f005 fab8 	bl	6cf0 <usb_serial_write>
    1780:	4848      	ldr	r0, [pc, #288]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1782:	f005 fcb9 	bl	70f8 <Print::println()>
    1786:	2119      	movs	r1, #25
    1788:	4850      	ldr	r0, [pc, #320]	; (18cc <LEDDebug(LEDStruct&)+0x28c>)
    178a:	f005 fab1 	bl	6cf0 <usb_serial_write>
    178e:	4845      	ldr	r0, [pc, #276]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1790:	f005 fcb2 	bl	70f8 <Print::println()>
    1794:	2100      	movs	r1, #0
    1796:	4842      	ldr	r0, [pc, #264]	; (18a0 <LEDDebug(LEDStruct&)+0x260>)
    1798:	f005 faaa 	bl	6cf0 <usb_serial_write>
    179c:	4841      	ldr	r0, [pc, #260]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
    179e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    17a2:	f005 bca9 	b.w	70f8 <Print::println()>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
			break;

		case FIRE:
			if (leds.mode_name == TORCH) { Serial.print("=====TORCH"); }
    17a6:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    17aa:	2b0d      	cmp	r3, #13
    17ac:	bf07      	ittee	eq
    17ae:	210a      	moveq	r1, #10
    17b0:	4848      	ldreq	r0, [pc, #288]	; (18d4 <LEDDebug(LEDStruct&)+0x294>)
    17b2:	4849      	ldrne	r0, [pc, #292]	; (18d8 <LEDDebug(LEDStruct&)+0x298>)
    17b4:	2109      	movne	r1, #9
    17b6:	f005 fa9b 	bl	6cf0 <usb_serial_write>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
    17ba:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    17be:	2b00      	cmp	r3, #0
    17c0:	f040 8139 	bne.w	1a36 <LEDDebug(LEDStruct&)+0x3f6>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
    17c4:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    17c8:	2b00      	cmp	r3, #0
    17ca:	f040 8156 	bne.w	1a7a <LEDDebug(LEDStruct&)+0x43a>
    17ce:	2105      	movs	r1, #5
    17d0:	4842      	ldr	r0, [pc, #264]	; (18dc <LEDDebug(LEDStruct&)+0x29c>)
    17d2:	f005 fa8d 	bl	6cf0 <usb_serial_write>
    17d6:	4833      	ldr	r0, [pc, #204]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    17d8:	f005 fc8e 	bl	70f8 <Print::println()>
    17dc:	210d      	movs	r1, #13
    17de:	4840      	ldr	r0, [pc, #256]	; (18e0 <LEDDebug(LEDStruct&)+0x2a0>)
    17e0:	f005 fa86 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    17e4:	2300      	movs	r3, #0
    17e6:	220a      	movs	r2, #10
    17e8:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    17ec:	482d      	ldr	r0, [pc, #180]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    17ee:	f005 fc93 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    17f2:	482c      	ldr	r0, [pc, #176]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    17f4:	f005 fc80 	bl	70f8 <Print::println()>
    17f8:	210d      	movs	r1, #13
    17fa:	483a      	ldr	r0, [pc, #232]	; (18e4 <LEDDebug(LEDStruct&)+0x2a4>)
    17fc:	f005 fa78 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1800:	2300      	movs	r3, #0
    1802:	220a      	movs	r2, #10
    1804:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    1808:	4826      	ldr	r0, [pc, #152]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    180a:	f005 fc85 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    180e:	4825      	ldr	r0, [pc, #148]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1810:	f005 fc72 	bl	70f8 <Print::println()>
			Serial.println("=====");
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
    1814:	f894 52d6 	ldrb.w	r5, [r4, #726]	; 0x2d6
    1818:	2d00      	cmp	r5, #0
    181a:	f000 8111 	beq.w	1a40 <LEDDebug(LEDStruct&)+0x400>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH) {
    181e:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    1822:	290d      	cmp	r1, #13
    1824:	d1af      	bne.n	1786 <LEDDebug(LEDStruct&)+0x146>
    1826:	4830      	ldr	r0, [pc, #192]	; (18e8 <LEDDebug(LEDStruct&)+0x2a8>)
    1828:	f005 fa62 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    182c:	f894 12d9 	ldrb.w	r1, [r4, #729]	; 0x2d9
    1830:	e02d      	b.n	188e <LEDDebug(LEDStruct&)+0x24e>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    1832:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    1836:	2b00      	cmp	r3, #0
    1838:	f000 80f5 	beq.w	1a26 <LEDDebug(LEDStruct&)+0x3e6>
    183c:	2119      	movs	r1, #25
    183e:	482b      	ldr	r0, [pc, #172]	; (18ec <LEDDebug(LEDStruct&)+0x2ac>)
    1840:	f005 fa56 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1844:	4817      	ldr	r0, [pc, #92]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1846:	f005 fc57 	bl	70f8 <Print::println()>
    184a:	210b      	movs	r1, #11
    184c:	4828      	ldr	r0, [pc, #160]	; (18f0 <LEDDebug(LEDStruct&)+0x2b0>)
    184e:	f005 fa4f 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1852:	2300      	movs	r3, #0
    1854:	220a      	movs	r2, #10
    1856:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    185a:	4812      	ldr	r0, [pc, #72]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    185c:	f005 fc5c 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1860:	4810      	ldr	r0, [pc, #64]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1862:	f005 fc49 	bl	70f8 <Print::println()>
    1866:	210b      	movs	r1, #11
    1868:	4822      	ldr	r0, [pc, #136]	; (18f4 <LEDDebug(LEDStruct&)+0x2b4>)
    186a:	f005 fa41 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    186e:	2300      	movs	r3, #0
    1870:	220a      	movs	r2, #10
    1872:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    1876:	480b      	ldr	r0, [pc, #44]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1878:	f005 fc4e 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    187c:	4809      	ldr	r0, [pc, #36]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    187e:	f005 fc3b 	bl	70f8 <Print::println()>
    1882:	210b      	movs	r1, #11
    1884:	481c      	ldr	r0, [pc, #112]	; (18f8 <LEDDebug(LEDStruct&)+0x2b8>)
    1886:	f005 fa33 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    188a:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    188e:	4805      	ldr	r0, [pc, #20]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    1890:	2300      	movs	r3, #0
    1892:	220a      	movs	r2, #10
    1894:	f005 fc40 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1898:	4802      	ldr	r0, [pc, #8]	; (18a4 <LEDDebug(LEDStruct&)+0x264>)
    189a:	f005 fc2d 	bl	70f8 <Print::println()>
    189e:	e772      	b.n	1786 <LEDDebug(LEDStruct&)+0x146>
    18a0:	000090a4 	.word	0x000090a4
    18a4:	1fff873c 	.word	0x1fff873c
    18a8:	00008dd8 	.word	0x00008dd8
    18ac:	00008e0c 	.word	0x00008e0c
    18b0:	00008e38 	.word	0x00008e38
    18b4:	00008e4c 	.word	0x00008e4c
    18b8:	00008e60 	.word	0x00008e60
    18bc:	00008e74 	.word	0x00008e74
    18c0:	00008e88 	.word	0x00008e88
    18c4:	00008e9c 	.word	0x00008e9c
    18c8:	00008eb0 	.word	0x00008eb0
    18cc:	00008ec4 	.word	0x00008ec4
    18d0:	00009044 	.word	0x00009044
    18d4:	00008fcc 	.word	0x00008fcc
    18d8:	00008fd8 	.word	0x00008fd8
    18dc:	00008ed8 	.word	0x00008ed8
    18e0:	00008ff4 	.word	0x00008ff4
    18e4:	00009004 	.word	0x00009004
    18e8:	00009034 	.word	0x00009034
    18ec:	00008f8c 	.word	0x00008f8c
    18f0:	00008fa8 	.word	0x00008fa8
    18f4:	00008fb4 	.word	0x00008fb4
    18f8:	00008fc0 	.word	0x00008fc0
    18fc:	2116      	movs	r1, #22
    18fe:	4869      	ldr	r0, [pc, #420]	; (1aa4 <LEDDebug(LEDStruct&)+0x464>)
    1900:	f005 f9f6 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1904:	4868      	ldr	r0, [pc, #416]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1906:	f005 fbf7 	bl	70f8 <Print::println()>
    190a:	210f      	movs	r1, #15
    190c:	4867      	ldr	r0, [pc, #412]	; (1aac <LEDDebug(LEDStruct&)+0x46c>)
    190e:	f005 f9ef 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1912:	2300      	movs	r3, #0
    1914:	220a      	movs	r2, #10
    1916:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    191a:	4863      	ldr	r0, [pc, #396]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    191c:	f005 fbfc 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1920:	4861      	ldr	r0, [pc, #388]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1922:	f005 fbe9 	bl	70f8 <Print::println()>
    1926:	210f      	movs	r1, #15
    1928:	4861      	ldr	r0, [pc, #388]	; (1ab0 <LEDDebug(LEDStruct&)+0x470>)
    192a:	f005 f9e1 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    192e:	2300      	movs	r3, #0
    1930:	220a      	movs	r2, #10
    1932:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    1936:	485c      	ldr	r0, [pc, #368]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1938:	f005 fbee 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    193c:	485a      	ldr	r0, [pc, #360]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    193e:	f005 fbdb 	bl	70f8 <Print::println()>
    1942:	210f      	movs	r1, #15
    1944:	485b      	ldr	r0, [pc, #364]	; (1ab4 <LEDDebug(LEDStruct&)+0x474>)
    1946:	f005 f9d3 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    194a:	2300      	movs	r3, #0
    194c:	220a      	movs	r2, #10
    194e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1952:	4855      	ldr	r0, [pc, #340]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1954:	f005 fbe0 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1958:	4853      	ldr	r0, [pc, #332]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    195a:	f005 fbcd 	bl	70f8 <Print::println()>
    195e:	210f      	movs	r1, #15
    1960:	4855      	ldr	r0, [pc, #340]	; (1ab8 <LEDDebug(LEDStruct&)+0x478>)
    1962:	f005 f9c5 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1966:	2300      	movs	r3, #0
    1968:	220a      	movs	r2, #10
    196a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    196e:	484e      	ldr	r0, [pc, #312]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1970:	f005 fbd2 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1974:	484c      	ldr	r0, [pc, #304]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1976:	f005 fbbf 	bl	70f8 <Print::println()>
    197a:	210f      	movs	r1, #15
    197c:	484f      	ldr	r0, [pc, #316]	; (1abc <LEDDebug(LEDStruct&)+0x47c>)
    197e:	f005 f9b7 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1982:	2300      	movs	r3, #0
    1984:	220a      	movs	r2, #10
    1986:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    198a:	4847      	ldr	r0, [pc, #284]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    198c:	f005 fbc4 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1990:	4845      	ldr	r0, [pc, #276]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1992:	f005 fbb1 	bl	70f8 <Print::println()>
    1996:	210f      	movs	r1, #15
    1998:	4849      	ldr	r0, [pc, #292]	; (1ac0 <LEDDebug(LEDStruct&)+0x480>)
    199a:	f005 f9a9 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    199e:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    19a2:	4841      	ldr	r0, [pc, #260]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19a4:	f005 fbf8 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    19a8:	483f      	ldr	r0, [pc, #252]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19aa:	f005 fba5 	bl	70f8 <Print::println()>
    19ae:	210f      	movs	r1, #15
    19b0:	4844      	ldr	r0, [pc, #272]	; (1ac4 <LEDDebug(LEDStruct&)+0x484>)
    19b2:	f005 f99d 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    19b6:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    19ba:	483b      	ldr	r0, [pc, #236]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19bc:	f005 fbec 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    19c0:	4839      	ldr	r0, [pc, #228]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19c2:	f005 fb99 	bl	70f8 <Print::println()>
    19c6:	210f      	movs	r1, #15
    19c8:	483f      	ldr	r0, [pc, #252]	; (1ac8 <LEDDebug(LEDStruct&)+0x488>)
    19ca:	f005 f991 	bl	6cf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    19ce:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    19d2:	4835      	ldr	r0, [pc, #212]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19d4:	f005 fbe0 	bl	7198 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    19d8:	4833      	ldr	r0, [pc, #204]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19da:	f005 fb8d 	bl	70f8 <Print::println()>
    19de:	e6d2      	b.n	1786 <LEDDebug(LEDStruct&)+0x146>
    19e0:	2100      	movs	r1, #0
    19e2:	483a      	ldr	r0, [pc, #232]	; (1acc <LEDDebug(LEDStruct&)+0x48c>)
    19e4:	f005 f984 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    19e8:	482f      	ldr	r0, [pc, #188]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19ea:	f005 fb85 	bl	70f8 <Print::println()>
    19ee:	2115      	movs	r1, #21
    19f0:	4837      	ldr	r0, [pc, #220]	; (1ad0 <LEDDebug(LEDStruct&)+0x490>)
    19f2:	f005 f97d 	bl	6cf0 <usb_serial_write>
    19f6:	482c      	ldr	r0, [pc, #176]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    19f8:	f005 fb7e 	bl	70f8 <Print::println()>
    19fc:	2100      	movs	r1, #0
    19fe:	4833      	ldr	r0, [pc, #204]	; (1acc <LEDDebug(LEDStruct&)+0x48c>)
    1a00:	f005 f976 	bl	6cf0 <usb_serial_write>
    1a04:	4828      	ldr	r0, [pc, #160]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a06:	f005 fb77 	bl	70f8 <Print::println()>
    1a0a:	e6bc      	b.n	1786 <LEDDebug(LEDStruct&)+0x146>
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1a0c:	f894 0227 	ldrb.w	r0, [r4, #551]	; 0x227
    1a10:	f7ff fafa 	bl	1008 <print_palette(unsigned char)>
    1a14:	e660      	b.n	16d8 <LEDDebug(LEDStruct&)+0x98>
    1a16:	2107      	movs	r1, #7
    1a18:	482e      	ldr	r0, [pc, #184]	; (1ad4 <LEDDebug(LEDStruct&)+0x494>)
    1a1a:	f005 f969 	bl	6cf0 <usb_serial_write>
    1a1e:	4822      	ldr	r0, [pc, #136]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a20:	f005 fb6a 	bl	70f8 <Print::println()>
    1a24:	e62b      	b.n	167e <LEDDebug(LEDStruct&)+0x3e>
    1a26:	2113      	movs	r1, #19
    1a28:	482b      	ldr	r0, [pc, #172]	; (1ad8 <LEDDebug(LEDStruct&)+0x498>)
    1a2a:	f005 f961 	bl	6cf0 <usb_serial_write>
    1a2e:	481e      	ldr	r0, [pc, #120]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a30:	f005 fb62 	bl	70f8 <Print::println()>
    1a34:	e709      	b.n	184a <LEDDebug(LEDStruct&)+0x20a>
    1a36:	2107      	movs	r1, #7
    1a38:	4828      	ldr	r0, [pc, #160]	; (1adc <LEDDebug(LEDStruct&)+0x49c>)
    1a3a:	f005 f959 	bl	6cf0 <usb_serial_write>
    1a3e:	e6c1      	b.n	17c4 <LEDDebug(LEDStruct&)+0x184>
    1a40:	210d      	movs	r1, #13
    1a42:	4827      	ldr	r0, [pc, #156]	; (1ae0 <LEDDebug(LEDStruct&)+0x4a0>)
    1a44:	f005 f954 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a48:	462b      	mov	r3, r5
    1a4a:	220a      	movs	r2, #10
    1a4c:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
    1a50:	4815      	ldr	r0, [pc, #84]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a52:	f005 fb61 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1a56:	4814      	ldr	r0, [pc, #80]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a58:	f005 fb4e 	bl	70f8 <Print::println()>
    1a5c:	210d      	movs	r1, #13
    1a5e:	4821      	ldr	r0, [pc, #132]	; (1ae4 <LEDDebug(LEDStruct&)+0x4a4>)
    1a60:	f005 f946 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a64:	462b      	mov	r3, r5
    1a66:	220a      	movs	r2, #10
    1a68:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    1a6c:	480e      	ldr	r0, [pc, #56]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a6e:	f005 fb53 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1a72:	480d      	ldr	r0, [pc, #52]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a74:	f005 fb40 	bl	70f8 <Print::println()>
    1a78:	e6d1      	b.n	181e <LEDDebug(LEDStruct&)+0x1de>
    1a7a:	2105      	movs	r1, #5
    1a7c:	481a      	ldr	r0, [pc, #104]	; (1ae8 <LEDDebug(LEDStruct&)+0x4a8>)
    1a7e:	f005 f937 	bl	6cf0 <usb_serial_write>
    1a82:	e6a4      	b.n	17ce <LEDDebug(LEDStruct&)+0x18e>
    1a84:	2104      	movs	r1, #4
    1a86:	4819      	ldr	r0, [pc, #100]	; (1aec <LEDDebug(LEDStruct&)+0x4ac>)
    1a88:	f005 f932 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1a8c:	4806      	ldr	r0, [pc, #24]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a8e:	f005 fb33 	bl	70f8 <Print::println()>
    1a92:	e5f4      	b.n	167e <LEDDebug(LEDStruct&)+0x3e>
    1a94:	2107      	movs	r1, #7
    1a96:	4816      	ldr	r0, [pc, #88]	; (1af0 <LEDDebug(LEDStruct&)+0x4b0>)
    1a98:	f005 f92a 	bl	6cf0 <usb_serial_write>
    1a9c:	4802      	ldr	r0, [pc, #8]	; (1aa8 <LEDDebug(LEDStruct&)+0x468>)
    1a9e:	f005 fb2b 	bl	70f8 <Print::println()>
    1aa2:	e5ec      	b.n	167e <LEDDebug(LEDStruct&)+0x3e>
    1aa4:	00008ee0 	.word	0x00008ee0
    1aa8:	1fff873c 	.word	0x1fff873c
    1aac:	00008ef8 	.word	0x00008ef8
    1ab0:	00008f08 	.word	0x00008f08
    1ab4:	00008f18 	.word	0x00008f18
    1ab8:	00008f28 	.word	0x00008f28
    1abc:	00008f38 	.word	0x00008f38
    1ac0:	00008f48 	.word	0x00008f48
    1ac4:	00008f58 	.word	0x00008f58
    1ac8:	00008f68 	.word	0x00008f68
    1acc:	000090a4 	.word	0x000090a4
    1ad0:	00009058 	.word	0x00009058
    1ad4:	00008e20 	.word	0x00008e20
    1ad8:	00008f78 	.word	0x00008f78
    1adc:	00008fe4 	.word	0x00008fe4
    1ae0:	00009014 	.word	0x00009014
    1ae4:	00009024 	.word	0x00009024
    1ae8:	00008fec 	.word	0x00008fec
    1aec:	00008e28 	.word	0x00008e28
    1af0:	00008e30 	.word	0x00008e30

00001af4 <change_palette(LEDStruct&) [clone .part.9]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	
}

// Change palette
void change_palette(LEDStruct& leds) {
    1af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1af8:	b08d      	sub	sp, #52	; 0x34
    1afa:	2120      	movs	r1, #32
    1afc:	4605      	mov	r5, r0
    1afe:	9009      	str	r0, [sp, #36]	; 0x24
    1b00:	483f      	ldr	r0, [pc, #252]	; (1c00 <change_palette(LEDStruct&) [clone .part.9]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    1b02:	4c40      	ldr	r4, [pc, #256]	; (1c04 <change_palette(LEDStruct&) [clone .part.9]+0x110>)
    1b04:	f005 f8f4 	bl	6cf0 <usb_serial_write>
    1b08:	483f      	ldr	r0, [pc, #252]	; (1c08 <change_palette(LEDStruct&) [clone .part.9]+0x114>)
    1b0a:	f005 faf5 	bl	70f8 <Print::println()>
    1b0e:	483f      	ldr	r0, [pc, #252]	; (1c0c <change_palette(LEDStruct&) [clone .part.9]+0x118>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1b10:	4a3f      	ldr	r2, [pc, #252]	; (1c10 <change_palette(LEDStruct&) [clone .part.9]+0x11c>)
    1b12:	8803      	ldrh	r3, [r0, #0]
    1b14:	7811      	ldrb	r1, [r2, #0]
    1b16:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1b1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b1e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1b22:	3319      	adds	r3, #25
    1b24:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1b26:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1b2a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1b2c:	fb12 f201 	smulbb	r2, r2, r1
    1b30:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1b32:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    1b34:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1b38:	f885 2227 	strb.w	r2, [r5, #551]	; 0x227
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1b3c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1b3e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    1b42:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1b44:	3701      	adds	r7, #1
        } while ( u.index != 255);
    1b46:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1b48:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    1b4a:	d1f8      	bne.n	1b3e <change_palette(LEDStruct&) [clone .part.9]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1b4c:	f8d8 3000 	ldr.w	r3, [r8]
    1b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b52:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    1b54:	ea4f 6913 	mov.w	r9, r3, lsr #24
    1b58:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    1b5c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1b60:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1b64:	f04f 33ff 	mov.w	r3, #4294967295
    1b68:	9207      	str	r2, [sp, #28]
    1b6a:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1b6c:	2400      	movs	r4, #0
    1b6e:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1b70:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1b74:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1b76:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    1b7a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1b7e:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1b82:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    1b84:	b2f9      	uxtb	r1, r7
    1b86:	f3c5 6507 	ubfx	r5, r5, #24, #8
    1b8a:	9104      	str	r1, [sp, #16]
    1b8c:	b2e9      	uxtb	r1, r5
    1b8e:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1b90:	fa5f f18c 	uxtb.w	r1, ip
    1b94:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1b96:	9908      	ldr	r1, [sp, #32]
    1b98:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1b9a:	aa0b      	add	r2, sp, #44	; 0x2c
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1b9c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1ba0:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1ba4:	d80c      	bhi.n	1bc0 <change_palette(LEDStruct&) [clone .part.9]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1ba6:	9906      	ldr	r1, [sp, #24]
    1ba8:	458c      	cmp	ip, r1
    1baa:	dc07      	bgt.n	1bbc <change_palette(LEDStruct&) [clone .part.9]+0xc8>
    1bac:	290f      	cmp	r1, #15
    1bae:	d005      	beq.n	1bbc <change_palette(LEDStruct&) [clone .part.9]+0xc8>
                    istart8 = lastSlotUsed + 1;
    1bb0:	3101      	adds	r1, #1
    1bb2:	b2c9      	uxtb	r1, r1
    1bb4:	428b      	cmp	r3, r1
    1bb6:	9103      	str	r1, [sp, #12]
    1bb8:	bf38      	it	cc
    1bba:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1bbc:	b259      	sxtb	r1, r3
    1bbe:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1bc0:	a90a      	add	r1, sp, #40	; 0x28
    1bc2:	9100      	str	r1, [sp, #0]
    1bc4:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1bc6:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
        g = rhs.g;
    1bca:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
        b = rhs.b;
    1bce:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1bd2:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    1bd6:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    1bda:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    1bde:	f003 f8e1 	bl	4da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1be2:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1be4:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    1be8:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1bec:	46ca      	mov	sl, r9
    1bee:	d1bf      	bne.n	1b70 <change_palette(LEDStruct&) [clone .part.9]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    1bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bf2:	f893 0227 	ldrb.w	r0, [r3, #551]	; 0x227
    1bf6:	f7ff fa07 	bl	1008 <print_palette(unsigned char)>
	}
}
    1bfa:	b00d      	add	sp, #52	; 0x34
    1bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c00:	00009070 	.word	0x00009070
    1c04:	000085a0 	.word	0x000085a0
    1c08:	1fff873c 	.word	0x1fff873c
    1c0c:	1fff8734 	.word	0x1fff8734
    1c10:	1fff8732 	.word	0x1fff8732

00001c14 <juggle(LEDStruct&)>:
	*/
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1c18:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	*/
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1c1c:	b091      	sub	sp, #68	; 0x44
    1c1e:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1c20:	2b00      	cmp	r3, #0
    1c22:	f000 80f3 	beq.w	1e0c <juggle(LEDStruct&)+0x1f8>
    1c26:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    1c2a:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    1c2e:	b113      	cbz	r3, 1c36 <juggle(LEDStruct&)+0x22>
    1c30:	2300      	movs	r3, #0
    1c32:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    1c36:	2196      	movs	r1, #150	; 0x96
    1c38:	4620      	mov	r0, r4
    1c3a:	f003 f945 	bl	4ec8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1c3e:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    1c42:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1c46:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1c4a:	2900      	cmp	r1, #0
    1c4c:	f040 8178 	bne.w	1f40 <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    1c50:	2f00      	cmp	r7, #0
    1c52:	f000 82ae 	beq.w	21b2 <juggle(LEDStruct&)+0x59e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1c56:	2b00      	cmp	r3, #0
    1c58:	f000 837e 	beq.w	2358 <juggle(LEDStruct&)+0x744>
    1c5c:	48c4      	ldr	r0, [pc, #784]	; (1f70 <juggle(LEDStruct&)+0x35c>)
    1c5e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    1c62:	f8df 9314 	ldr.w	r9, [pc, #788]	; 1f78 <juggle(LEDStruct&)+0x364>
    1c66:	f8df 8314 	ldr.w	r8, [pc, #788]	; 1f7c <juggle(LEDStruct&)+0x368>
    1c6a:	9002      	str	r0, [sp, #8]
    1c6c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    1c70:	460f      	mov	r7, r1
    1c72:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    1c76:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    1c7a:	9503      	str	r5, [sp, #12]
    1c7c:	e05e      	b.n	1d3c <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1c7e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1c82:	443b      	add	r3, r7
    1c84:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c86:	f8d9 1000 	ldr.w	r1, [r9]
    1c8a:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1c8c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1c8e:	9904      	ldr	r1, [sp, #16]
    1c90:	bf98      	it	ls
    1c92:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c94:	f44f 708c 	mov.w	r0, #280	; 0x118
    1c98:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1c9c:	bf98      	it	ls
    1c9e:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1ca0:	fb03 f301 	mul.w	r3, r3, r1
    1ca4:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1ca6:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1ca8:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cac:	d503      	bpl.n	1cb6 <juggle(LEDStruct&)+0xa2>
    1cae:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1cb2:	3107      	adds	r1, #7
    1cb4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1cb6:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1cb8:	9d02      	ldr	r5, [sp, #8]
    1cba:	f818 6000 	ldrb.w	r6, [r8, r0]
    1cbe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1cc2:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1cc6:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1cca:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ccc:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    1cce:	bf48      	it	mi
    1cd0:	4249      	negmi	r1, r1
    1cd2:	b20e      	sxth	r6, r1
    1cd4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1cd8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1cdc:	9100      	str	r1, [sp, #0]
    1cde:	4650      	mov	r0, sl
    1ce0:	4659      	mov	r1, fp
    1ce2:	f003 f951 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1ce6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1cea:	2296      	movs	r2, #150	; 0x96
    1cec:	b29b      	uxth	r3, r3
    1cee:	fb02 f303 	mul.w	r3, r2, r3
    1cf2:	0c1b      	lsrs	r3, r3, #16
    1cf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1cf8:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1cfa:	5ce2      	ldrb	r2, [r4, r3]
    1cfc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1d00:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1d04:	54e2      	strb	r2, [r4, r3]
    1d06:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1d0a:	784a      	ldrb	r2, [r1, #1]
    1d0c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1d10:	704a      	strb	r2, [r1, #1]
    1d12:	788b      	ldrb	r3, [r1, #2]
    1d14:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1d18:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1d1c:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1d1e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    1d22:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1d26:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    1d2a:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1d2c:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1d2e:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1d30:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1d32:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1d34:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1d38:	f240 830e 	bls.w	2358 <juggle(LEDStruct&)+0x744>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1d3c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    1d40:	2900      	cmp	r1, #0
    1d42:	d19c      	bne.n	1c7e <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1d44:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1d48:	443b      	add	r3, r7
    1d4a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d4c:	f8d9 1000 	ldr.w	r1, [r9]
    1d50:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1d52:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1d54:	9905      	ldr	r1, [sp, #20]
    1d56:	bf98      	it	ls
    1d58:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1d5a:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1d5e:	bf98      	it	ls
    1d60:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1d62:	fb00 f101 	mul.w	r1, r0, r1
    1d66:	fb03 f301 	mul.w	r3, r3, r1
    1d6a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d6c:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1d6e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d72:	d503      	bpl.n	1d7c <juggle(LEDStruct&)+0x168>
    1d74:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1d78:	3107      	adds	r1, #7
    1d7a:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d7c:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1d7e:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d80:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1d84:	f818 6000 	ldrb.w	r6, [r8, r0]
    1d88:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1d8c:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1d90:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d92:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    1d94:	bf48      	it	mi
    1d96:	4249      	negmi	r1, r1
    1d98:	b20e      	sxth	r6, r1
    1d9a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1d9e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1da2:	9100      	str	r1, [sp, #0]
    1da4:	4650      	mov	r0, sl
    1da6:	4659      	mov	r1, fp
    1da8:	f003 f8ee 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1dac:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1db0:	b29b      	uxth	r3, r3
    1db2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1db6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1dba:	0c1b      	lsrs	r3, r3, #16
    1dbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1dc0:	18e1      	adds	r1, r4, r3
    1dc2:	5ce2      	ldrb	r2, [r4, r3]
    1dc4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1dc8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1dcc:	54e2      	strb	r2, [r4, r3]
    1dce:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1dd2:	784a      	ldrb	r2, [r1, #1]
    1dd4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1dd8:	704a      	strb	r2, [r1, #1]
    1dda:	788b      	ldrb	r3, [r1, #2]
    1ddc:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1de0:	fa83 f352 	uqadd8	r3, r3, r2
    1de4:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    1de6:	708b      	strb	r3, [r1, #2]
    1de8:	4622      	mov	r2, r4
    1dea:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1dec:	7819      	ldrb	r1, [r3, #0]
    1dee:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1df2:	7859      	ldrb	r1, [r3, #1]
    1df4:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1df8:	7899      	ldrb	r1, [r3, #2]
    1dfa:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    1dfe:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    1e00:	429d      	cmp	r5, r3
    1e02:	f1a2 0203 	sub.w	r2, r2, #3
    1e06:	d1f1      	bne.n	1dec <juggle(LEDStruct&)+0x1d8>
    1e08:	9503      	str	r5, [sp, #12]
    1e0a:	e788      	b.n	1d1e <juggle(LEDStruct&)+0x10a>
    1e0c:	4d59      	ldr	r5, [pc, #356]	; (1f74 <juggle(LEDStruct&)+0x360>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    1e0e:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    1e12:	882b      	ldrh	r3, [r5, #0]
    1e14:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    1e18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1e1c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    1e20:	3119      	adds	r1, #25
    1e22:	b289      	uxth	r1, r1
    1e24:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    1e28:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1e2c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1e30:	3019      	adds	r0, #25
    1e32:	b280      	uxth	r0, r0
    1e34:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    1e38:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    1e3c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1e40:	3319      	adds	r3, #25
    1e42:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1e46:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1e4a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    1e4e:	3219      	adds	r2, #25
    1e50:	b292      	uxth	r2, r2
    1e52:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    1e56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    1e5a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    1e5e:	3619      	adds	r6, #25
    1e60:	b2b6      	uxth	r6, r6
    1e62:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    1e66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1e6a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1e6e:	3319      	adds	r3, #25
    1e70:	b29b      	uxth	r3, r3
    1e72:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    1e76:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    1e7a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    1e7e:	f10e 0e19 	add.w	lr, lr, #25
    1e82:	fa1f fe8e 	uxth.w	lr, lr
    1e86:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    1e8a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    1e8e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1e92:	3719      	adds	r7, #25
    1e94:	b2bf      	uxth	r7, r7
    1e96:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1e9a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    1e9e:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1ea2:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1ea6:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1ea8:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1eac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1eb0:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    1eb4:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    1eb8:	b2f2      	uxtb	r2, r6
    1eba:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    1ebe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1ec2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1ec6:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    1eca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1ece:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1ed0:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    1ed4:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    1ed8:	ea4f 18ec 	mov.w	r8, ip, asr #7
    1edc:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    1ee0:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1ee4:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    1ee8:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    1eec:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    1ef0:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    1ef4:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1ef8:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    1efc:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    1f00:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    1f04:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    1f08:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1f0c:	b2d2      	uxtb	r2, r2

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1f0e:	f3c7 13c0 	ubfx	r3, r7, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    1f12:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    1f16:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    1f1a:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    1f1c:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    1f20:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    1f24:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    1f28:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1f2c:	802e      	strh	r6, [r5, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    1f2e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    1f32:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    1f36:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    1f3a:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    1f3e:	e676      	b.n	1c2e <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    1f40:	2f00      	cmp	r7, #0
    1f42:	f000 809c 	beq.w	207e <juggle(LEDStruct&)+0x46a>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1f46:	2b00      	cmp	r3, #0
    1f48:	f000 8206 	beq.w	2358 <juggle(LEDStruct&)+0x744>
    1f4c:	4b08      	ldr	r3, [pc, #32]	; (1f70 <juggle(LEDStruct&)+0x35c>)
    1f4e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    1f52:	f8df 9024 	ldr.w	r9, [pc, #36]	; 1f78 <juggle(LEDStruct&)+0x364>
    1f56:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1f7c <juggle(LEDStruct&)+0x368>
    1f5a:	9302      	str	r3, [sp, #8]
    1f5c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    1f60:	2700      	movs	r7, #0
    1f62:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    1f66:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    1f6a:	9503      	str	r5, [sp, #12]
    1f6c:	e06c      	b.n	2048 <juggle(LEDStruct&)+0x434>
    1f6e:	bf00      	nop
    1f70:	00007eb8 	.word	0x00007eb8
    1f74:	1fff8734 	.word	0x1fff8734
    1f78:	1fff94e8 	.word	0x1fff94e8
    1f7c:	00008724 	.word	0x00008724
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1f80:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    1f84:	2b00      	cmp	r3, #0
    1f86:	f000 82ba 	beq.w	24fe <juggle(LEDStruct&)+0x8ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f8a:	f8d9 3000 	ldr.w	r3, [r9]
    1f8e:	9308      	str	r3, [sp, #32]
	return ret;
    1f90:	9b08      	ldr	r3, [sp, #32]
    1f92:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1f96:	f44f 708c 	mov.w	r0, #280	; 0x118
    1f9a:	fb00 f303 	mul.w	r3, r0, r3
    1f9e:	0209      	lsls	r1, r1, #8
    1fa0:	fb03 f301 	mul.w	r3, r3, r1
    1fa4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1fa8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1fac:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    1fb0:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fb2:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1fb4:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fb8:	d503      	bpl.n	1fc2 <juggle(LEDStruct&)+0x3ae>
    1fba:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1fbe:	3107      	adds	r1, #7
    1fc0:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1fc2:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1fc4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1fc6:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1fca:	f818 6000 	ldrb.w	r6, [r8, r0]
    1fce:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1fd2:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1fd6:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1fd8:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1fda:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1fde:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1fe2:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    1fe4:	bf48      	it	mi
    1fe6:	4276      	negmi	r6, r6
    1fe8:	4659      	mov	r1, fp
    1fea:	4650      	mov	r0, sl
    1fec:	b236      	sxth	r6, r6
    1fee:	f002 ffcb 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1ff2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1ff6:	2296      	movs	r2, #150	; 0x96
    1ff8:	b29b      	uxth	r3, r3
    1ffa:	fb02 f303 	mul.w	r3, r2, r3
    1ffe:	0c1b      	lsrs	r3, r3, #16
    2000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2004:	18e1      	adds	r1, r4, r3
    2006:	5ce2      	ldrb	r2, [r4, r3]
    2008:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    200c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2010:	54e2      	strb	r2, [r4, r3]
    2012:	784a      	ldrb	r2, [r1, #1]
    2014:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2018:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    201c:	704a      	strb	r2, [r1, #1]
    201e:	788b      	ldrb	r3, [r1, #2]
    2020:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2024:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2028:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    202a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    202e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2032:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2036:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2038:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    203a:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    203c:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    203e:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2040:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2044:	f240 8188 	bls.w	2358 <juggle(LEDStruct&)+0x744>
				if (leds.this_dir) {
    2048:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    204c:	2b00      	cmp	r3, #0
    204e:	d197      	bne.n	1f80 <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2050:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2054:	2b00      	cmp	r3, #0
    2056:	f000 8189 	beq.w	236c <juggle(LEDStruct&)+0x758>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    205a:	f8d9 3000 	ldr.w	r3, [r9]
    205e:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2062:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2066:	f44f 708c 	mov.w	r0, #280	; 0x118
    206a:	fb00 f303 	mul.w	r3, r0, r3
    206e:	0209      	lsls	r1, r1, #8
    2070:	fb03 f301 	mul.w	r3, r3, r1
    2074:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2078:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    207c:	e796      	b.n	1fac <juggle(LEDStruct&)+0x398>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    207e:	2b00      	cmp	r3, #0
    2080:	f000 816a 	beq.w	2358 <juggle(LEDStruct&)+0x744>
    2084:	49b6      	ldr	r1, [pc, #728]	; (2360 <juggle(LEDStruct&)+0x74c>)
    2086:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    208a:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2364 <juggle(LEDStruct&)+0x750>
    208e:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 2368 <juggle(LEDStruct&)+0x754>
    2092:	9102      	str	r1, [sp, #8]
    2094:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2098:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    209c:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    20a0:	9503      	str	r5, [sp, #12]
    20a2:	e063      	b.n	216c <juggle(LEDStruct&)+0x558>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    20a4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    20a8:	2900      	cmp	r1, #0
    20aa:	f000 828c 	beq.w	25c6 <juggle(LEDStruct&)+0x9b2>
    20ae:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    20b2:	443b      	add	r3, r7
    20b4:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20b6:	f8d9 1000 	ldr.w	r1, [r9]
    20ba:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    20bc:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    20be:	990c      	ldr	r1, [sp, #48]	; 0x30
    20c0:	bf9c      	itt	ls
    20c2:	021b      	lslls	r3, r3, #8
    20c4:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    20c6:	fb0a f101 	mul.w	r1, sl, r1
    20ca:	fb03 f301 	mul.w	r3, r3, r1
    20ce:	f3c3 430e 	ubfx	r3, r3, #16, #15
    20d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    20d6:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    20d8:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    20dc:	d503      	bpl.n	20e6 <juggle(LEDStruct&)+0x4d2>
    20de:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    20e2:	3107      	adds	r1, #7
    20e4:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    20e6:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    20e8:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    20ea:	f3c1 0146 	ubfx	r1, r1, #1, #7
    20ee:	f818 6000 	ldrb.w	r6, [r8, r0]
    20f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    20f6:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    20fa:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    20fc:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    20fe:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2102:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2106:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2108:	bf48      	it	mi
    210a:	4276      	negmi	r6, r6
    210c:	4659      	mov	r1, fp
    210e:	a80b      	add	r0, sp, #44	; 0x2c
    2110:	b236      	sxth	r6, r6
    2112:	f002 ff39 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2116:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    211a:	2296      	movs	r2, #150	; 0x96
    211c:	b29b      	uxth	r3, r3
    211e:	fb02 f303 	mul.w	r3, r2, r3
    2122:	0c1b      	lsrs	r3, r3, #16
    2124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2128:	18e1      	adds	r1, r4, r3
    212a:	5ce2      	ldrb	r2, [r4, r3]
    212c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2130:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2134:	54e2      	strb	r2, [r4, r3]
    2136:	784a      	ldrb	r2, [r1, #1]
    2138:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    213c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2140:	704a      	strb	r2, [r1, #1]
    2142:	788b      	ldrb	r3, [r1, #2]
    2144:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2148:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    214c:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    214e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2152:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2156:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    215a:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    215c:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    215e:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2160:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2162:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2164:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2168:	f240 80f6 	bls.w	2358 <juggle(LEDStruct&)+0x744>
				if (leds.this_dir) {
    216c:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2170:	2900      	cmp	r1, #0
    2172:	d197      	bne.n	20a4 <juggle(LEDStruct&)+0x490>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2174:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2178:	2900      	cmp	r1, #0
    217a:	f000 815b 	beq.w	2434 <juggle(LEDStruct&)+0x820>
    217e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2182:	443b      	add	r3, r7
    2184:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2186:	f8d9 1000 	ldr.w	r1, [r9]
    218a:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    218c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    218e:	990e      	ldr	r1, [sp, #56]	; 0x38
    2190:	bf9c      	itt	ls
    2192:	021b      	lslls	r3, r3, #8
    2194:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2196:	fb0a f101 	mul.w	r1, sl, r1
    219a:	fb03 f301 	mul.w	r3, r3, r1
    219e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    21a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    21a6:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    21a8:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    21aa:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    21ae:	d59a      	bpl.n	20e6 <juggle(LEDStruct&)+0x4d2>
    21b0:	e795      	b.n	20de <juggle(LEDStruct&)+0x4ca>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    21b2:	2b00      	cmp	r3, #0
    21b4:	f000 80d0 	beq.w	2358 <juggle(LEDStruct&)+0x744>
    21b8:	4b69      	ldr	r3, [pc, #420]	; (2360 <juggle(LEDStruct&)+0x74c>)
    21ba:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    21be:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2364 <juggle(LEDStruct&)+0x750>
    21c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2368 <juggle(LEDStruct&)+0x754>
    21c6:	9302      	str	r3, [sp, #8]
    21c8:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    21cc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    21d0:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    21d4:	9503      	str	r5, [sp, #12]
    21d6:	e05a      	b.n	228e <juggle(LEDStruct&)+0x67a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21d8:	f8d9 3000 	ldr.w	r3, [r9]
    21dc:	9306      	str	r3, [sp, #24]
	return ret;
    21de:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    21e0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    21e4:	f44f 708c 	mov.w	r0, #280	; 0x118
    21e8:	fb00 f303 	mul.w	r3, r0, r3
    21ec:	0209      	lsls	r1, r1, #8
    21ee:	fb03 f301 	mul.w	r3, r3, r1
    21f2:	0379      	lsls	r1, r7, #13
    21f4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    21f8:	b299      	uxth	r1, r3
    21fa:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    21fc:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2200:	d503      	bpl.n	220a <juggle(LEDStruct&)+0x5f6>
    2202:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2206:	3307      	adds	r3, #7
    2208:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    220a:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    220c:	9d02      	ldr	r5, [sp, #8]
    220e:	f818 6000 	ldrb.w	r6, [r8, r0]
    2212:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2216:	f3c3 0346 	ubfx	r3, r3, #1, #7
    221a:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    221e:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2220:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2222:	bf48      	it	mi
    2224:	425b      	negmi	r3, r3
    2226:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    222a:	b21e      	sxth	r6, r3
    222c:	4650      	mov	r0, sl
    222e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2232:	9100      	str	r1, [sp, #0]
    2234:	4659      	mov	r1, fp
    2236:	f002 fea7 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    223a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    223e:	2296      	movs	r2, #150	; 0x96
    2240:	b29b      	uxth	r3, r3
    2242:	fb02 f303 	mul.w	r3, r2, r3
    2246:	0c1b      	lsrs	r3, r3, #16
    2248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    224c:	18e1      	adds	r1, r4, r3
    224e:	5ce2      	ldrb	r2, [r4, r3]
    2250:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2254:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2258:	54e2      	strb	r2, [r4, r3]
    225a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    225e:	784a      	ldrb	r2, [r1, #1]
    2260:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2264:	704a      	strb	r2, [r1, #1]
    2266:	788b      	ldrb	r3, [r1, #2]
    2268:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    226c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2270:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2272:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2276:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    227a:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    227e:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2280:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2282:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2284:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2286:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2288:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    228c:	d964      	bls.n	2358 <juggle(LEDStruct&)+0x744>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    228e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2292:	2b00      	cmp	r3, #0
    2294:	d1a0      	bne.n	21d8 <juggle(LEDStruct&)+0x5c4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2296:	f8d9 3000 	ldr.w	r3, [r9]
    229a:	9307      	str	r3, [sp, #28]
	return ret;
    229c:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    229e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    22a2:	f44f 708c 	mov.w	r0, #280	; 0x118
    22a6:	0209      	lsls	r1, r1, #8
    22a8:	fb00 f303 	mul.w	r3, r0, r3
    22ac:	fb03 f301 	mul.w	r3, r3, r1
    22b0:	0379      	lsls	r1, r7, #13
    22b2:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    22b6:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    22b8:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    22ba:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    22be:	d503      	bpl.n	22c8 <juggle(LEDStruct&)+0x6b4>
    22c0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    22c4:	3307      	adds	r3, #7
    22c6:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22c8:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    22ca:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    22d0:	f818 6000 	ldrb.w	r6, [r8, r0]
    22d4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    22d8:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    22dc:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22de:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    22e0:	bf48      	it	mi
    22e2:	425b      	negmi	r3, r3
    22e4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    22e8:	b21e      	sxth	r6, r3
    22ea:	4650      	mov	r0, sl
    22ec:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    22f0:	9100      	str	r1, [sp, #0]
    22f2:	4659      	mov	r1, fp
    22f4:	f002 fe48 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    22f8:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    22fc:	b29b      	uxth	r3, r3
    22fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2302:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2306:	0c1b      	lsrs	r3, r3, #16
    2308:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    230c:	18e1      	adds	r1, r4, r3
    230e:	5ce2      	ldrb	r2, [r4, r3]
    2310:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2314:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2318:	54e2      	strb	r2, [r4, r3]
    231a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    231e:	784a      	ldrb	r2, [r1, #1]
    2320:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2324:	704a      	strb	r2, [r1, #1]
    2326:	788b      	ldrb	r3, [r1, #2]
    2328:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    232c:	fa83 f352 	uqadd8	r3, r3, r2
    2330:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2332:	708b      	strb	r3, [r1, #2]
    2334:	4622      	mov	r2, r4
    2336:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2338:	7819      	ldrb	r1, [r3, #0]
    233a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    233e:	7859      	ldrb	r1, [r3, #1]
    2340:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2344:	7899      	ldrb	r1, [r3, #2]
    2346:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    234a:	3303      	adds	r3, #3
    234c:	42ab      	cmp	r3, r5
    234e:	f1a2 0203 	sub.w	r2, r2, #3
    2352:	d1f1      	bne.n	2338 <juggle(LEDStruct&)+0x724>
    2354:	9503      	str	r5, [sp, #12]
    2356:	e78c      	b.n	2272 <juggle(LEDStruct&)+0x65e>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    2358:	b011      	add	sp, #68	; 0x44
    235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    235e:	bf00      	nop
    2360:	00007eb8 	.word	0x00007eb8
    2364:	1fff94e8 	.word	0x1fff94e8
    2368:	00008724 	.word	0x00008724
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    236c:	f8d9 3000 	ldr.w	r3, [r9]
    2370:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    2372:	990b      	ldr	r1, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2374:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    2378:	f44f 708c 	mov.w	r0, #280	; 0x118
    237c:	fb00 f101 	mul.w	r1, r0, r1
    2380:	021b      	lsls	r3, r3, #8
    2382:	fb03 f301 	mul.w	r3, r3, r1
    2386:	f3c3 430e 	ubfx	r3, r3, #16, #15
    238a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    238e:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    2392:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2394:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2396:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    239a:	d503      	bpl.n	23a4 <juggle(LEDStruct&)+0x790>
    239c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    23a0:	3107      	adds	r1, #7
    23a2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    23a4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    23a6:	9d02      	ldr	r5, [sp, #8]
    23a8:	f818 6000 	ldrb.w	r6, [r8, r0]
    23ac:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    23b0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    23b4:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    23b8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    23ba:	b2b6      	uxth	r6, r6
    23bc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    23c0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    23c4:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    23c6:	bf48      	it	mi
    23c8:	4276      	negmi	r6, r6
    23ca:	4659      	mov	r1, fp
    23cc:	4650      	mov	r0, sl
    23ce:	b236      	sxth	r6, r6
    23d0:	f002 fdda 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    23d4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    23d8:	b29b      	uxth	r3, r3
    23da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    23de:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    23e2:	0c1b      	lsrs	r3, r3, #16
    23e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    23e8:	18e1      	adds	r1, r4, r3
    23ea:	5ce2      	ldrb	r2, [r4, r3]
    23ec:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    23f0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    23f4:	54e2      	strb	r2, [r4, r3]
    23f6:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    23fa:	784a      	ldrb	r2, [r1, #1]
    23fc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2400:	704a      	strb	r2, [r1, #1]
    2402:	788b      	ldrb	r3, [r1, #2]
    2404:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2408:	fa83 f352 	uqadd8	r3, r3, r2
    240c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    240e:	708b      	strb	r3, [r1, #2]
    2410:	4622      	mov	r2, r4
    2412:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2414:	7819      	ldrb	r1, [r3, #0]
    2416:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    241a:	7859      	ldrb	r1, [r3, #1]
    241c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2420:	7899      	ldrb	r1, [r3, #2]
    2422:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2426:	3303      	adds	r3, #3
    2428:	42ab      	cmp	r3, r5
    242a:	f1a2 0203 	sub.w	r2, r2, #3
    242e:	d1f1      	bne.n	2414 <juggle(LEDStruct&)+0x800>
    2430:	9503      	str	r5, [sp, #12]
    2432:	e5fa      	b.n	202a <juggle(LEDStruct&)+0x416>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2434:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2438:	443b      	add	r3, r7
    243a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    243c:	f8d9 1000 	ldr.w	r1, [r9]
    2440:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2442:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2444:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2446:	bf9c      	itt	ls
    2448:	021b      	lslls	r3, r3, #8
    244a:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    244c:	fb0a f101 	mul.w	r1, sl, r1
    2450:	fb03 f301 	mul.w	r3, r3, r1
    2454:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2458:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    245c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    245e:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2460:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2464:	d503      	bpl.n	246e <juggle(LEDStruct&)+0x85a>
    2466:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    246a:	3107      	adds	r1, #7
    246c:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    246e:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2470:	9d02      	ldr	r5, [sp, #8]
    2472:	f818 6000 	ldrb.w	r6, [r8, r0]
    2476:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    247a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    247e:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2482:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2484:	b2b6      	uxth	r6, r6
    2486:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    248a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    248e:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2490:	bf48      	it	mi
    2492:	4276      	negmi	r6, r6
    2494:	4659      	mov	r1, fp
    2496:	a80b      	add	r0, sp, #44	; 0x2c
    2498:	b236      	sxth	r6, r6
    249a:	f002 fd75 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    249e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    24a2:	b29b      	uxth	r3, r3
    24a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    24a8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    24ac:	0c1b      	lsrs	r3, r3, #16
    24ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    24b2:	18e1      	adds	r1, r4, r3
    24b4:	5ce2      	ldrb	r2, [r4, r3]
    24b6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    24ba:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    24be:	54e2      	strb	r2, [r4, r3]
    24c0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    24c4:	784a      	ldrb	r2, [r1, #1]
    24c6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    24ca:	704a      	strb	r2, [r1, #1]
    24cc:	788b      	ldrb	r3, [r1, #2]
    24ce:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    24d2:	fa83 f352 	uqadd8	r3, r3, r2
    24d6:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    24d8:	708b      	strb	r3, [r1, #2]
    24da:	4622      	mov	r2, r4
    24dc:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    24de:	7819      	ldrb	r1, [r3, #0]
    24e0:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    24e4:	7859      	ldrb	r1, [r3, #1]
    24e6:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    24ea:	7899      	ldrb	r1, [r3, #2]
    24ec:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    24f0:	3303      	adds	r3, #3
    24f2:	42ab      	cmp	r3, r5
    24f4:	f1a2 0203 	sub.w	r2, r2, #3
    24f8:	d1f1      	bne.n	24de <juggle(LEDStruct&)+0x8ca>
    24fa:	9503      	str	r5, [sp, #12]
    24fc:	e627      	b.n	214e <juggle(LEDStruct&)+0x53a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24fe:	f8d9 3000 	ldr.w	r3, [r9]
    2502:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2504:	9b09      	ldr	r3, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2506:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    250a:	f44f 708c 	mov.w	r0, #280	; 0x118
    250e:	fb00 f303 	mul.w	r3, r0, r3
    2512:	0209      	lsls	r1, r1, #8
    2514:	fb03 f301 	mul.w	r3, r3, r1
    2518:	f3c3 430e 	ubfx	r3, r3, #16, #15
    251c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2520:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    2524:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2526:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2528:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    252c:	d503      	bpl.n	2536 <juggle(LEDStruct&)+0x922>
    252e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2532:	3107      	adds	r1, #7
    2534:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2536:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2538:	9d02      	ldr	r5, [sp, #8]
    253a:	f818 6000 	ldrb.w	r6, [r8, r0]
    253e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2542:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2546:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    254a:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    254c:	b2b6      	uxth	r6, r6
    254e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2552:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2556:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2558:	bf48      	it	mi
    255a:	4276      	negmi	r6, r6
    255c:	4659      	mov	r1, fp
    255e:	4650      	mov	r0, sl
    2560:	b236      	sxth	r6, r6
    2562:	f002 fd11 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2566:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    256a:	b29b      	uxth	r3, r3
    256c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2570:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2574:	0c1b      	lsrs	r3, r3, #16
    2576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    257a:	18e1      	adds	r1, r4, r3
    257c:	5ce2      	ldrb	r2, [r4, r3]
    257e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2582:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2586:	54e2      	strb	r2, [r4, r3]
    2588:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    258c:	784a      	ldrb	r2, [r1, #1]
    258e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2592:	704a      	strb	r2, [r1, #1]
    2594:	788b      	ldrb	r3, [r1, #2]
    2596:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    259a:	fa83 f352 	uqadd8	r3, r3, r2
    259e:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    25a0:	708b      	strb	r3, [r1, #2]
    25a2:	4622      	mov	r2, r4
    25a4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    25a6:	7819      	ldrb	r1, [r3, #0]
    25a8:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    25ac:	7859      	ldrb	r1, [r3, #1]
    25ae:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    25b2:	7899      	ldrb	r1, [r3, #2]
    25b4:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    25b8:	3303      	adds	r3, #3
    25ba:	429d      	cmp	r5, r3
    25bc:	f1a2 0203 	sub.w	r2, r2, #3
    25c0:	d1f1      	bne.n	25a6 <juggle(LEDStruct&)+0x992>
    25c2:	9503      	str	r5, [sp, #12]
    25c4:	e531      	b.n	202a <juggle(LEDStruct&)+0x416>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    25c6:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    25ca:	443b      	add	r3, r7
    25cc:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25ce:	f8d9 1000 	ldr.w	r1, [r9]
    25d2:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    25d4:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    25d6:	990d      	ldr	r1, [sp, #52]	; 0x34
    25d8:	bf9c      	itt	ls
    25da:	021b      	lslls	r3, r3, #8
    25dc:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    25de:	fb0a f101 	mul.w	r1, sl, r1
    25e2:	fb03 f301 	mul.w	r3, r3, r1
    25e6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    25ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    25ee:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    25f0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    25f4:	d503      	bpl.n	25fe <juggle(LEDStruct&)+0x9ea>
    25f6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    25fa:	3107      	adds	r1, #7
    25fc:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    25fe:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2600:	9d02      	ldr	r5, [sp, #8]
    2602:	f818 6000 	ldrb.w	r6, [r8, r0]
    2606:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    260a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    260e:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2612:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2614:	b2b6      	uxth	r6, r6
    2616:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    261a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    261e:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2620:	bf48      	it	mi
    2622:	4276      	negmi	r6, r6
    2624:	4659      	mov	r1, fp
    2626:	a80b      	add	r0, sp, #44	; 0x2c
    2628:	b236      	sxth	r6, r6
    262a:	f002 fcad 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    262e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2632:	b29b      	uxth	r3, r3
    2634:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2638:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    263c:	0c1b      	lsrs	r3, r3, #16
    263e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2642:	18e1      	adds	r1, r4, r3
    2644:	5ce2      	ldrb	r2, [r4, r3]
    2646:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    264a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    264e:	54e2      	strb	r2, [r4, r3]
    2650:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2654:	784a      	ldrb	r2, [r1, #1]
    2656:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    265a:	704a      	strb	r2, [r1, #1]
    265c:	788b      	ldrb	r3, [r1, #2]
    265e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2662:	fa83 f352 	uqadd8	r3, r3, r2
    2666:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2668:	708b      	strb	r3, [r1, #2]
    266a:	4622      	mov	r2, r4
    266c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    266e:	7819      	ldrb	r1, [r3, #0]
    2670:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2674:	7859      	ldrb	r1, [r3, #1]
    2676:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    267a:	7899      	ldrb	r1, [r3, #2]
    267c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2680:	3303      	adds	r3, #3
    2682:	42ab      	cmp	r3, r5
    2684:	f1a2 0203 	sub.w	r2, r2, #3
    2688:	d1f1      	bne.n	266e <juggle(LEDStruct&)+0xa5a>
    268a:	9503      	str	r5, [sp, #12]
    268c:	e55f      	b.n	214e <juggle(LEDStruct&)+0x53a>
    268e:	bf00      	nop

00002690 <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2690:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    2694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2698:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    269a:	2b00      	cmp	r3, #0
    269c:	d06b      	beq.n	2776 <rainbow_march(LEDStruct&)+0xe6>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    269e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    26a2:	bb43      	cbnz	r3, 26f6 <rainbow_march(LEDStruct&)+0x66>
    26a4:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    26a8:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    26ac:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    26ae:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    26b2:	b2d2      	uxtb	r2, r2
    26b4:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    26b8:	bb4b      	cbnz	r3, 270e <rainbow_march(LEDStruct&)+0x7e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    26ba:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    26be:	2b00      	cmp	r3, #0
    26c0:	d151      	bne.n	2766 <rainbow_march(LEDStruct&)+0xd6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    26c2:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    26c6:	214b      	movs	r1, #75	; 0x4b
    26c8:	4620      	mov	r0, r4
    26ca:	f002 fb4b 	bl	4d64 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    26ce:	4620      	mov	r0, r4
    26d0:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    26d4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    26d6:	7802      	ldrb	r2, [r0, #0]
    26d8:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    26dc:	7842      	ldrb	r2, [r0, #1]
    26de:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    26e2:	7882      	ldrb	r2, [r0, #2]
    26e4:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    26e8:	3003      	adds	r0, #3
    26ea:	4288      	cmp	r0, r1
    26ec:	f1a3 0303 	sub.w	r3, r3, #3
    26f0:	d1f1      	bne.n	26d6 <rainbow_march(LEDStruct&)+0x46>
    26f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    26f6:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    26fa:	f894 2236 	ldrb.w	r2, [r4, #566]	; 0x236
    26fe:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2700:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2704:	b2d2      	uxtb	r2, r2
    2706:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    270a:	2b00      	cmp	r3, #0
    270c:	d0d5      	beq.n	26ba <rainbow_march(LEDStruct&)+0x2a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    270e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2712:	2125      	movs	r1, #37	; 0x25
    2714:	4620      	mov	r0, r4
    2716:	f002 fb25 	bl	4d64 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    271a:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    271e:	4623      	mov	r3, r4
    2720:	4621      	mov	r1, r4
    2722:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2724:	7810      	ldrb	r0, [r2, #0]
    2726:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    272a:	7850      	ldrb	r0, [r2, #1]
    272c:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    2730:	7890      	ldrb	r0, [r2, #2]
    2732:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    2736:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    2738:	42aa      	cmp	r2, r5
    273a:	f1a1 0103 	sub.w	r1, r1, #3
    273e:	d1f1      	bne.n	2724 <rainbow_march(LEDStruct&)+0x94>
    2740:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2744:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2746:	7802      	ldrb	r2, [r0, #0]
    2748:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    274c:	7842      	ldrb	r2, [r0, #1]
    274e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    2752:	7882      	ldrb	r2, [r0, #2]
    2754:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2758:	3003      	adds	r0, #3
    275a:	4288      	cmp	r0, r1
    275c:	f1a3 0303 	sub.w	r3, r3, #3
    2760:	d1f1      	bne.n	2746 <rainbow_march(LEDStruct&)+0xb6>
    2762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2766:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    276a:	4620      	mov	r0, r4
    276c:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    276e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2772:	f002 baf7 	b.w	4d64 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2776:	4927      	ldr	r1, [pc, #156]	; (2814 <rainbow_march(LEDStruct&)+0x184>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2778:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    277c:	880b      	ldrh	r3, [r1, #0]
    277e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2782:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2786:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    278a:	3319      	adds	r3, #25
    278c:	b29b      	uxth	r3, r3
    278e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2792:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2796:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    279a:	3219      	adds	r2, #25
    279c:	b292      	uxth	r2, r2
    279e:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    27a2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    27a6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    27aa:	3519      	adds	r5, #25
    27ac:	b2ad      	uxth	r5, r5
    27ae:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    27b2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    27b6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    27ba:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    27be:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    27c2:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    27c4:	b2d2      	uxtb	r2, r2
    27c6:	3619      	adds	r6, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    27c8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    27cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    27d0:	b2b6      	uxth	r6, r6

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    27d2:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    27d4:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    27d6:	eb06 2716 	add.w	r7, r6, r6, lsr #8

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    27da:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    27dc:	3201      	adds	r2, #1
    27de:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    27e2:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.this_dir = td;
    27e6:	f3c5 15c0 	ubfx	r5, r5, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    27ea:	f880 3237 	strb.w	r3, [r0, #567]	; 0x237
    leds.rainbow_rot    = rr;
    27ee:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    27f2:	2301      	movs	r3, #1
	leds.mode_type = RAINBOW_MARCH;
    27f4:	2205      	movs	r2, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    27f6:	f880 71c4 	strb.w	r7, [r0, #452]	; 0x1c4
	leds.this_dir = td;
    27fa:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    27fe:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    2802:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    2806:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    280a:	800e      	strh	r6, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    280c:	f7fe ff18 	bl	1640 <LEDDebug(LEDStruct&)>
    2810:	e745      	b.n	269e <rainbow_march(LEDStruct&)+0xe>
    2812:	bf00      	nop
    2814:	1fff8734 	.word	0x1fff8734

00002818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2818:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    281a:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    281e:	f89d 6014 	ldrb.w	r6, [sp, #20]
    2822:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    2826:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2828:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    282a:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    282c:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    282e:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    2832:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2836:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    283a:	d940      	bls.n	28be <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa6>
	else { leds.use_palette = 0; }
    283c:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    283e:	f880 623a 	strb.w	r6, [r0, #570]	; 0x23a
	leds.fire_cooling		= fc;
    2842:	f880 523c 	strb.w	r5, [r0, #572]	; 0x23c
	leds.fire_sync			= fy;
    2846:	f880 12d6 	strb.w	r1, [r0, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    284a:	f880 22d7 	strb.w	r2, [r0, #727]	; 0x2d7
	leds.torch_diff			= td;
    284e:	f880 e2d9 	strb.w	lr, [r0, #729]	; 0x2d9

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    2852:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2856:	2a00      	cmp	r2, #0
    2858:	d13f      	bne.n	28da <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    285a:	234b      	movs	r3, #75	; 0x4b
    285c:	f880 22d5 	strb.w	r2, [r0, #725]	; 0x2d5
    2860:	f880 32d4 	strb.w	r3, [r0, #724]	; 0x2d4

	if (!leds.fire_sync) {
    2864:	bb51      	cbnz	r1, 28bc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    2866:	4c20      	ldr	r4, [pc, #128]	; (28e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    2868:	8823      	ldrh	r3, [r4, #0]
    286a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    286e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2872:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2876:	3319      	adds	r3, #25
    2878:	b29b      	uxth	r3, r3
    287a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    287e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2882:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2886:	3219      	adds	r2, #25
    2888:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    288a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    288e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
		leds.fire_sparking2 = fs - 10 + random8(21);
    2892:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
    2894:	b2c9      	uxtb	r1, r1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
    289a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    289e:	3e0a      	subs	r6, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
    28a0:	3d0a      	subs	r5, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    28a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
    28a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    28aa:	eb06 2323 	add.w	r3, r6, r3, asr #8
		leds.fire_cooling2	= fc - 10 + random8(21);
    28ae:	eb05 2121 	add.w	r1, r5, r1, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    28b2:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    28b6:	8022      	strh	r2, [r4, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
    28b8:	f880 123d 	strb.w	r1, [r0, #573]	; 0x23d
    28bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    28be:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    28c2:	f880 623a 	strb.w	r6, [r0, #570]	; 0x23a
	leds.fire_cooling		= fc;
    28c6:	f880 523c 	strb.w	r5, [r0, #572]	; 0x23c
	leds.fire_sync			= fy;
    28ca:	f880 12d6 	strb.w	r1, [r0, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    28ce:	f880 22d7 	strb.w	r2, [r0, #727]	; 0x2d7
	leds.torch_diff			= td;
    28d2:	f880 e2d9 	strb.w	lr, [r0, #729]	; 0x2d9
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    28d6:	2a00      	cmp	r2, #0
    28d8:	d0c2      	beq.n	2860 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    28da:	2325      	movs	r3, #37	; 0x25
    28dc:	f880 32d4 	strb.w	r3, [r0, #724]	; 0x2d4
    28e0:	f880 32d5 	strb.w	r3, [r0, #725]	; 0x2d5
    28e4:	e7be      	b.n	2864 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    28e6:	bf00      	nop
    28e8:	1fff8734 	.word	0x1fff8734

000028ec <fire(LEDStruct&)>:
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    28ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    28f0:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    28f4:	4dcf      	ldr	r5, [pc, #828]	; (2c34 <fire(LEDStruct&)+0x348>)
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    28f6:	b086      	sub	sp, #24
    28f8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    28fa:	2b00      	cmp	r3, #0
    28fc:	f000 8221 	beq.w	2d42 <fire(LEDStruct&)+0x456>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2900:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2904:	2b00      	cmp	r3, #0
    2906:	f000 82ce 	beq.w	2ea6 <fire(LEDStruct&)+0x5ba>
    290a:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    290e:	882a      	ldrh	r2, [r5, #0]
    2910:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2914:	004f      	lsls	r7, r1, #1
    2916:	f203 2e3d 	addw	lr, r3, #573	; 0x23d
    291a:	fb97 f7f3 	sdiv	r7, r7, r3
    291e:	3702      	adds	r7, #2
    2920:	b2ff      	uxtb	r7, r7
    2922:	44a6      	add	lr, r4
    2924:	f204 263d 	addw	r6, r4, #573	; 0x23d
    2928:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    292c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2930:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2934:	3219      	adds	r2, #25
    2936:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2938:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    293c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    2940:	b2c9      	uxtb	r1, r1
    2942:	fb11 f107 	smulbb	r1, r1, r7
    2946:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    294a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    294e:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2950:	7031      	strb	r1, [r6, #0]
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2952:	d1e9      	bne.n	2928 <fire(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    2954:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    2958:	802a      	strh	r2, [r5, #0]
    295a:	2e00      	cmp	r6, #0
    295c:	f000 8111 	beq.w	2b82 <fire(LEDStruct&)+0x296>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2960:	f1a3 0e03 	sub.w	lr, r3, #3
    2964:	f1be 0f01 	cmp.w	lr, #1
    2968:	f04f 0c01 	mov.w	ip, #1
    296c:	dd1a      	ble.n	29a4 <fire(LEDStruct&)+0xb8>
    296e:	f203 203a 	addw	r0, r3, #570	; 0x23a
    2972:	f503 770f 	add.w	r7, r3, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2976:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 2c38 <fire(LEDStruct&)+0x34c>
    297a:	4420      	add	r0, r4
    297c:	4427      	add	r7, r4
    297e:	f204 283e 	addw	r8, r4, #574	; 0x23e
    2982:	7801      	ldrb	r1, [r0, #0]
    2984:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    2988:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    298c:	fb89 a601 	smull	sl, r6, r9, r1
    2990:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2994:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2996:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    299a:	d1f2      	bne.n	2982 <fire(LEDStruct&)+0x96>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    299c:	f1bc 0f00 	cmp.w	ip, #0
    29a0:	f000 80d6 	beq.w	2b50 <fire(LEDStruct&)+0x264>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    29a4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    29a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    29ac:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    29b0:	3219      	adds	r2, #25
    29b2:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    29b4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    29b8:	f894 623a 	ldrb.w	r6, [r4, #570]	; 0x23a
    29bc:	802a      	strh	r2, [r5, #0]
    29be:	b2c9      	uxtb	r1, r1
    29c0:	428e      	cmp	r6, r1
    29c2:	489c      	ldr	r0, [pc, #624]	; (2c34 <fire(LEDStruct&)+0x348>)
    29c4:	d926      	bls.n	2a14 <fire(LEDStruct&)+0x128>
    29c6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    29ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    29ce:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    29d2:	3219      	adds	r2, #25
    29d4:	b292      	uxth	r2, r2
    29d6:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    29da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    29de:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    29e2:	3619      	adds	r6, #25
    29e4:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    29e6:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    29ea:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    29ee:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    29f0:	b2d2      	uxtb	r2, r2
    29f2:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    29f6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    29fa:	eb04 2222 	add.w	r2, r4, r2, asr #8
    29fe:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    2a02:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a04:	8006      	strh	r6, [r0, #0]
    2a06:	3960      	subs	r1, #96	; 0x60
    2a08:	f892 023e 	ldrb.w	r0, [r2, #574]	; 0x23e
    2a0c:	fa80 f051 	uqadd8	r0, r0, r1
    2a10:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}

	if (!leds.fire_sync) {
    2a14:	f1bc 0f00 	cmp.w	ip, #0
    2a18:	d112      	bne.n	2a40 <fire(LEDStruct&)+0x154>
    2a1a:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    2a1c:	f894 623b 	ldrb.w	r6, [r4, #571]	; 0x23b
    2a20:	4984      	ldr	r1, [pc, #528]	; (2c34 <fire(LEDStruct&)+0x348>)
    2a22:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2a26:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2a2a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2a2e:	3219      	adds	r2, #25
    2a30:	b292      	uxth	r2, r2
    2a32:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    2a36:	b2c0      	uxtb	r0, r0
    2a38:	4286      	cmp	r6, r0
    2a3a:	802a      	strh	r2, [r5, #0]
    2a3c:	f200 80d0 	bhi.w	2be0 <fire(LEDStruct&)+0x2f4>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    2a40:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2a44:	2a00      	cmp	r2, #0
    2a46:	d162      	bne.n	2b0e <fire(LEDStruct&)+0x222>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    2a48:	2b00      	cmp	r3, #0
    2a4a:	f000 814a 	beq.w	2ce2 <fire(LEDStruct&)+0x3f6>
    2a4e:	f204 273d 	addw	r7, r4, #573	; 0x23d
    2a52:	4690      	mov	r8, r2
    2a54:	46b9      	mov	r9, r7
    2a56:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
    2a58:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    2a5c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2a60:	1b5d      	subs	r5, r3, r5
    2a62:	3d01      	subs	r5, #1
    2a64:	ebc8 0505 	rsb	r5, r8, r5
    2a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2a6c:	4630      	mov	r0, r6
    2a6e:	f002 fa69 	bl	4f44 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2a72:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2a76:	5563      	strb	r3, [r4, r5]
    2a78:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2a7a:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2a7e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    2a82:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2a84:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    2a86:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2a8a:	f108 0801 	add.w	r8, r8, #1
    2a8e:	4543      	cmp	r3, r8
    2a90:	dce2      	bgt.n	2a58 <fire(LEDStruct&)+0x16c>
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2a92:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    2a96:	b30a      	cbz	r2, 2adc <fire(LEDStruct&)+0x1f0>
		if (leds.this_dir) {
    2a98:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2a9c:	2a00      	cmp	r2, #0
    2a9e:	f040 81b9 	bne.w	2e14 <fire(LEDStruct&)+0x528>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2aa2:	4690      	mov	r8, r2
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	f000 81f8 	beq.w	2e9a <fire(LEDStruct&)+0x5ae>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
    2aaa:	eb08 0553 	add.w	r5, r8, r3, lsr #1
    2aae:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2ab2:	4630      	mov	r0, r6
    2ab4:	f002 fa46 	bl	4f44 <HeatColor(unsigned char)>
    2ab8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2abc:	f89d 2014 	ldrb.w	r2, [sp, #20]
    2ac0:	54e2      	strb	r2, [r4, r3]
    2ac2:	4423      	add	r3, r4
        g = rhs.g;
    2ac4:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    2ac8:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2acc:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    2ace:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2ad0:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2ad4:	f108 0801 	add.w	r8, r8, #1
    2ad8:	4543      	cmp	r3, r8
    2ada:	dce6      	bgt.n	2aaa <fire(LEDStruct&)+0x1be>
    2adc:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2ae0:	2a00      	cmp	r2, #0
    2ae2:	f000 80ab 	beq.w	2c3c <fire(LEDStruct&)+0x350>
    2ae6:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2aea:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2aec:	781a      	ldrb	r2, [r3, #0]
    2aee:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    2af2:	785a      	ldrb	r2, [r3, #1]
    2af4:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    2af8:	789a      	ldrb	r2, [r3, #2]
    2afa:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    2afe:	3303      	adds	r3, #3
    2b00:	4299      	cmp	r1, r3
    2b02:	f1a4 0403 	sub.w	r4, r4, #3
    2b06:	d1f1      	bne.n	2aec <fire(LEDStruct&)+0x200>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    2b08:	b006      	add	sp, #24
    2b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2b0e:	2b00      	cmp	r3, #0
    2b10:	f000 81c0 	beq.w	2e94 <fire(LEDStruct&)+0x5a8>
    2b14:	f204 273d 	addw	r7, r4, #573	; 0x23d
    2b18:	46b9      	mov	r9, r7
    2b1a:	4625      	mov	r5, r4
    2b1c:	f04f 0800 	mov.w	r8, #0
    2b20:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    2b22:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2b26:	4630      	mov	r0, r6
    2b28:	f002 fa0c 	bl	4f44 <HeatColor(unsigned char)>
    2b2c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2b30:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2b34:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2b38:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    2b3a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2b3c:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2b3e:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2b42:	f108 0801 	add.w	r8, r8, #1
    2b46:	4543      	cmp	r3, r8
    2b48:	f105 0503 	add.w	r5, r5, #3
    2b4c:	dce9      	bgt.n	2b22 <fire(LEDStruct&)+0x236>
    2b4e:	e7a0      	b.n	2a92 <fire(LEDStruct&)+0x1a6>
    2b50:	f203 2685 	addw	r6, r3, #645	; 0x285
    2b54:	f203 2787 	addw	r7, r3, #647	; 0x287
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    2b58:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2c38 <fire(LEDStruct&)+0x34c>
    2b5c:	4426      	add	r6, r4
    2b5e:	4427      	add	r7, r4
    2b60:	7831      	ldrb	r1, [r6, #0]
    2b62:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    2b66:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2b6a:	fb88 9001 	smull	r9, r0, r8, r1
    2b6e:	f10e 3eff 	add.w	lr, lr, #4294967295
    2b72:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2b76:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    2b7a:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2b7e:	d1ef      	bne.n	2b60 <fire(LEDStruct&)+0x274>
    2b80:	e710      	b.n	29a4 <fire(LEDStruct&)+0xb8>
    2b82:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    2b86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2b8a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    2b8e:	fb9e fef3 	sdiv	lr, lr, r3
    2b92:	f10e 0e02 	add.w	lr, lr, #2
    2b96:	fa5f fe8e 	uxtb.w	lr, lr
    2b9a:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2b9e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2ba2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2ba6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2baa:	3219      	adds	r2, #25
    2bac:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2bae:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2bb2:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    2bb6:	b2c9      	uxtb	r1, r1
    2bb8:	fb11 f10e 	smulbb	r1, r1, lr
    2bbc:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2bc0:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    2bc2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2bc6:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    2bc8:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2bca:	dbe8      	blt.n	2b9e <fire(LEDStruct&)+0x2b2>
    2bcc:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2bce:	f1a3 0e03 	sub.w	lr, r3, #3
    2bd2:	f1be 0f01 	cmp.w	lr, #1
    2bd6:	f04f 0c00 	mov.w	ip, #0
    2bda:	f73f aec8 	bgt.w	296e <fire(LEDStruct&)+0x82>
    2bde:	e6e1      	b.n	29a4 <fire(LEDStruct&)+0xb8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2be0:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2be4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2be8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2bec:	3219      	adds	r2, #25
    2bee:	b292      	uxth	r2, r2
    2bf0:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2bf4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2bf8:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2bfc:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2bfe:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c02:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2c04:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c06:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2c0a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2c0e:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    2c10:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2c14:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    2c18:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    2c1c:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c20:	800d      	strh	r5, [r1, #0]
    2c22:	1201      	asrs	r1, r0, #8
    2c24:	3960      	subs	r1, #96	; 0x60
    2c26:	4630      	mov	r0, r6
    2c28:	fa80 f051 	uqadd8	r0, r0, r1
    2c2c:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
    2c30:	e706      	b.n	2a40 <fire(LEDStruct&)+0x154>
    2c32:	bf00      	nop
    2c34:	1fff8734 	.word	0x1fff8734
    2c38:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    2c3c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2c40:	2a00      	cmp	r2, #0
    2c42:	d059      	beq.n	2cf8 <fire(LEDStruct&)+0x40c>
			for (int j = 0; j < leds.heat_length; j++) {
    2c44:	2b00      	cmp	r3, #0
    2c46:	f43f af5f 	beq.w	2b08 <fire(LEDStruct&)+0x21c>
    2c4a:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2c4e:	46b9      	mov	r9, r7
    2c50:	4625      	mov	r5, r4
    2c52:	f04f 0800 	mov.w	r8, #0
    2c56:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    2c58:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2c5c:	4630      	mov	r0, r6
    2c5e:	f002 f971 	bl	4f44 <HeatColor(unsigned char)>
    2c62:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2c66:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2c6a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2c6e:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    2c72:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    2c76:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2c7a:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2c7e:	f108 0801 	add.w	r8, r8, #1
    2c82:	4543      	cmp	r3, r8
    2c84:	f1a5 0503 	sub.w	r5, r5, #3
    2c88:	dce6      	bgt.n	2c58 <fire(LEDStruct&)+0x36c>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    2c8a:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    2c8e:	2a00      	cmp	r2, #0
    2c90:	f43f af3a 	beq.w	2b08 <fire(LEDStruct&)+0x21c>
			if (leds.this_dir) {
    2c94:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2c98:	2a00      	cmp	r2, #0
    2c9a:	f000 80da 	beq.w	2e52 <fire(LEDStruct&)+0x566>
				for (int j = 0; j < leds.heat_length; j++) {
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	f43f af32 	beq.w	2b08 <fire(LEDStruct&)+0x21c>
    2ca4:	4625      	mov	r5, r4
    2ca6:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    2caa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2cae:	4630      	mov	r0, r6
    2cb0:	f002 f948 	bl	4f44 <HeatColor(unsigned char)>
    2cb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2cb8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2cbc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2cc0:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    2cc4:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    2cc8:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    2ccc:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2cd0:	f108 0801 	add.w	r8, r8, #1
    2cd4:	4543      	cmp	r3, r8
    2cd6:	f105 0503 	add.w	r5, r5, #3
    2cda:	dce6      	bgt.n	2caa <fire(LEDStruct&)+0x3be>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    2cdc:	b006      	add	sp, #24
    2cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2ce2:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	f040 80d7 	bne.w	2e9a <fire(LEDStruct&)+0x5ae>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2cec:	f1bc 0f00 	cmp.w	ip, #0
    2cf0:	f47f aef9 	bne.w	2ae6 <fire(LEDStruct&)+0x1fa>
    2cf4:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	f43f af05 	beq.w	2b08 <fire(LEDStruct&)+0x21c>
    2cfe:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2d02:	46b9      	mov	r9, r7
    2d04:	f04f 0800 	mov.w	r8, #0
    2d08:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    2d0a:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    2d0e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2d12:	354b      	adds	r5, #75	; 0x4b
    2d14:	4445      	add	r5, r8
    2d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2d1a:	4630      	mov	r0, r6
    2d1c:	f002 f912 	bl	4f44 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d20:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2d24:	5563      	strb	r3, [r4, r5]
    2d26:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2d28:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2d2c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    2d30:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2d32:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2d34:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2d38:	f108 0801 	add.w	r8, r8, #1
    2d3c:	4543      	cmp	r3, r8
    2d3e:	dce4      	bgt.n	2d0a <fire(LEDStruct&)+0x41e>
    2d40:	e7a3      	b.n	2c8a <fire(LEDStruct&)+0x39e>
    2d42:	882b      	ldrh	r3, [r5, #0]
    2d44:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2d48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2d4c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2d50:	3119      	adds	r1, #25
    2d52:	b289      	uxth	r1, r1
    2d54:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2d58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2d5c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2d60:	3219      	adds	r2, #25
    2d62:	b292      	uxth	r2, r2
    2d64:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2d68:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2d6c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2d70:	f10e 0e19 	add.w	lr, lr, #25
    2d74:	fa1f fe8e 	uxth.w	lr, lr
    2d78:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    2d7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    2d80:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2d84:	3619      	adds	r6, #25
    2d86:	b2b6      	uxth	r6, r6
    2d88:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    2d8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2d90:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d94:	3319      	adds	r3, #25
    2d96:	b29b      	uxth	r3, r3
    2d98:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2d9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2da0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    2da4:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2da8:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2dac:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
}


void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    2db0:	b2f6      	uxtb	r6, r6
    2db2:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2db6:	3719      	adds	r7, #25
    2db8:	b2db      	uxtb	r3, r3
    2dba:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    2dbe:	b2bf      	uxth	r7, r7
    2dc0:	11b6      	asrs	r6, r6, #6
    2dc2:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    2dc6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2dca:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    2dce:	119b      	asrs	r3, r3, #6
    2dd0:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2dd4:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    2dd8:	333c      	adds	r3, #60	; 0x3c
    2dda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    2dde:	f3c6 1681 	ubfx	r6, r6, #6, #2
    2de2:	fa5f f883 	uxtb.w	r8, r3
    2de6:	fa5f fc8c 	uxtb.w	ip, ip
    2dea:	3601      	adds	r6, #1
    2dec:	f10e 0314 	add.w	r3, lr, #20
    2df0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    2df4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2df8:	f8cd c000 	str.w	ip, [sp]
    2dfc:	f8cd 8004 	str.w	r8, [sp, #4]
    2e00:	9602      	str	r6, [sp, #8]
    2e02:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    2e06:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    2e0a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e0c:	802f      	strh	r7, [r5, #0]
    2e0e:	f7ff fd03 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    2e12:	e575      	b.n	2900 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2e14:	2b00      	cmp	r3, #0
    2e16:	d040      	beq.n	2e9a <fire(LEDStruct&)+0x5ae>
    2e18:	4625      	mov	r5, r4
    2e1a:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    2e1e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2e22:	4630      	mov	r0, r6
    2e24:	f002 f88e 	bl	4f44 <HeatColor(unsigned char)>
    2e28:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e2c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2e30:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e34:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    2e38:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    2e3c:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2e40:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2e44:	f108 0801 	add.w	r8, r8, #1
    2e48:	4543      	cmp	r3, r8
    2e4a:	f1a5 0503 	sub.w	r5, r5, #3
    2e4e:	dce6      	bgt.n	2e1e <fire(LEDStruct&)+0x532>
    2e50:	e644      	b.n	2adc <fire(LEDStruct&)+0x1f0>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    2e52:	4690      	mov	r8, r2
    2e54:	2b00      	cmp	r3, #0
    2e56:	f43f ae57 	beq.w	2b08 <fire(LEDStruct&)+0x21c>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    2e5a:	334b      	adds	r3, #75	; 0x4b
    2e5c:	ebc8 0503 	rsb	r5, r8, r3
    2e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2e64:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2e68:	4630      	mov	r0, r6
    2e6a:	f002 f86b 	bl	4f44 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2e72:	5563      	strb	r3, [r4, r5]
    2e74:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2e76:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2e7a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    2e7e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2e80:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    2e82:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2e86:	f108 0801 	add.w	r8, r8, #1
    2e8a:	4543      	cmp	r3, r8
    2e8c:	dce5      	bgt.n	2e5a <fire(LEDStruct&)+0x56e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    2e8e:	b006      	add	sp, #24
    2e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2e94:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    2e98:	b153      	cbz	r3, 2eb0 <fire(LEDStruct&)+0x5c4>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2e9a:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	f47f ae21 	bne.w	2ae6 <fire(LEDStruct&)+0x1fa>
    2ea4:	e630      	b.n	2b08 <fire(LEDStruct&)+0x21c>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    2ea6:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
    2eaa:	b142      	cbz	r2, 2ebe <fire(LEDStruct&)+0x5d2>
    2eac:	882a      	ldrh	r2, [r5, #0]
    2eae:	e557      	b.n	2960 <fire(LEDStruct&)+0x74>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2eb0:	f1bc 0f00 	cmp.w	ip, #0
    2eb4:	f47f ae17 	bne.w	2ae6 <fire(LEDStruct&)+0x1fa>
    2eb8:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2ebc:	e6c2      	b.n	2c44 <fire(LEDStruct&)+0x358>
    2ebe:	882a      	ldrh	r2, [r5, #0]
    2ec0:	e685      	b.n	2bce <fire(LEDStruct&)+0x2e2>
    2ec2:	bf00      	nop

00002ec4 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    2ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    2ec8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    2ecc:	4dcd      	ldr	r5, [pc, #820]	; (3204 <torch(LEDStruct&)+0x340>)





void torch(LEDStruct& leds) {
    2ece:	b087      	sub	sp, #28
    2ed0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	f000 81d2 	beq.w	327c <torch(LEDStruct&)+0x3b8>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    2ed8:	f894 c2d4 	ldrb.w	ip, [r4, #724]	; 0x2d4
    2edc:	4663      	mov	r3, ip
    2ede:	f1bc 0f00 	cmp.w	ip, #0
    2ee2:	f000 8234 	beq.w	334e <torch(LEDStruct&)+0x48a>
    2ee6:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    2eea:	882a      	ldrh	r2, [r5, #0]
    2eec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2ef0:	004f      	lsls	r7, r1, #1
    2ef2:	f20c 2e3d 	addw	lr, ip, #573	; 0x23d
    2ef6:	fb97 f7fc 	sdiv	r7, r7, ip
    2efa:	3702      	adds	r7, #2
    2efc:	b2ff      	uxtb	r7, r7
    2efe:	44a6      	add	lr, r4
    2f00:	f204 263d 	addw	r6, r4, #573	; 0x23d
    2f04:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2f08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2f0c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f10:	3219      	adds	r2, #25
    2f12:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f14:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2f18:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    2f1c:	b2c9      	uxtb	r1, r1
    2f1e:	fb11 f107 	smulbb	r1, r1, r7
    2f22:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2f26:	ea21 71e1 	bic.w	r1, r1, r1, asr #31


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    2f2a:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2f2c:	7031      	strb	r1, [r6, #0]


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    2f2e:	d1e9      	bne.n	2f04 <torch(LEDStruct&)+0x40>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    2f30:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    2f34:	802a      	strh	r2, [r5, #0]
    2f36:	2e00      	cmp	r6, #0
    2f38:	f000 8168 	beq.w	320c <torch(LEDStruct&)+0x348>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2f3c:	f1ac 0703 	sub.w	r7, ip, #3
    2f40:	2f01      	cmp	r7, #1
    2f42:	f04f 0901 	mov.w	r9, #1
    2f46:	dd1a      	ble.n	2f7e <torch(LEDStruct&)+0xba>
    2f48:	f20c 203a 	addw	r0, ip, #570	; 0x23a
    2f4c:	f50c 760f 	add.w	r6, ip, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2f50:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 3208 <torch(LEDStruct&)+0x344>
    2f54:	4420      	add	r0, r4
    2f56:	4426      	add	r6, r4
    2f58:	f204 2e3e 	addw	lr, r4, #574	; 0x23e
    2f5c:	7801      	ldrb	r1, [r0, #0]
    2f5e:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    2f62:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    2f66:	fb88 ba01 	smull	fp, sl, r8, r1
    2f6a:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2f6e:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2f70:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2f74:	d1f2      	bne.n	2f5c <torch(LEDStruct&)+0x98>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    2f76:	f1b9 0f00 	cmp.w	r9, #0
    2f7a:	f000 812c 	beq.w	31d6 <torch(LEDStruct&)+0x312>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f7e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2f82:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2f86:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f8a:	3219      	adds	r2, #25
    2f8c:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    2f8e:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    2f92:	f894 623a 	ldrb.w	r6, [r4, #570]	; 0x23a
    2f96:	802a      	strh	r2, [r5, #0]
    2f98:	b2c0      	uxtb	r0, r0
    2f9a:	4286      	cmp	r6, r0
    2f9c:	4999      	ldr	r1, [pc, #612]	; (3204 <torch(LEDStruct&)+0x340>)
    2f9e:	d928      	bls.n	2ff2 <torch(LEDStruct&)+0x12e>
    2fa0:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2fa4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2fa8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2fac:	3219      	adds	r2, #25
    2fae:	b292      	uxth	r2, r2
    2fb0:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2fb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2fb8:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2fbc:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2fbe:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2fc2:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2fc4:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2fc6:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2fca:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2fce:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    2fd0:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2fd4:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2fd8:	800e      	strh	r6, [r1, #0]
    2fda:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    2fde:	f892 623e 	ldrb.w	r6, [r2, #574]	; 0x23e
    2fe2:	1200      	asrs	r0, r0, #8
    2fe4:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    2fe8:	4630      	mov	r0, r6
    2fea:	fa80 f051 	uqadd8	r0, r0, r1
    2fee:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}
	if (!leds.fire_sync) {
    2ff2:	f1b9 0f00 	cmp.w	r9, #0
    2ff6:	d112      	bne.n	301e <torch(LEDStruct&)+0x15a>
    2ff8:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    2ffa:	f894 623b 	ldrb.w	r6, [r4, #571]	; 0x23b
    2ffe:	4981      	ldr	r1, [pc, #516]	; (3204 <torch(LEDStruct&)+0x340>)
    3000:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3004:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3008:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    300c:	3219      	adds	r2, #25
    300e:	b292      	uxth	r2, r2
    3010:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3014:	b2c0      	uxtb	r0, r0
    3016:	4286      	cmp	r6, r0
    3018:	802a      	strh	r2, [r5, #0]
    301a:	f200 80af 	bhi.w	317c <torch(LEDStruct&)+0x2b8>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    301e:	f1bc 0f00 	cmp.w	ip, #0
    3022:	f000 8199 	beq.w	3358 <torch(LEDStruct&)+0x494>
    3026:	f204 273d 	addw	r7, r4, #573	; 0x23d
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    302a:	2600      	movs	r6, #0
    302c:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    3030:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    3034:	199d      	adds	r5, r3, r6
    3036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    303a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    303e:	4648      	mov	r0, r9
    3040:	f001 ff80 	bl	4f44 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3044:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3048:	5563      	strb	r3, [r4, r5]
    304a:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    304c:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3050:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3054:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3056:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3058:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    305c:	3601      	adds	r6, #1
    305e:	42b3      	cmp	r3, r6
    3060:	dce6      	bgt.n	3030 <torch(LEDStruct&)+0x16c>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3062:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    3066:	2e00      	cmp	r6, #0
    3068:	d175      	bne.n	3156 <torch(LEDStruct&)+0x292>
    306a:	f504 7722 	add.w	r7, r4, #648	; 0x288
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    306e:	2b00      	cmp	r3, #0
    3070:	f000 8178 	beq.w	3364 <torch(LEDStruct&)+0x4a0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    3074:	334a      	adds	r3, #74	; 0x4a
    3076:	1b9d      	subs	r5, r3, r6
    3078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    307c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3080:	4648      	mov	r0, r9
    3082:	f001 ff5f 	bl	4f44 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3086:	f89d 3014 	ldrb.w	r3, [sp, #20]
    308a:	5563      	strb	r3, [r4, r5]
    308c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    308e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3092:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3096:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3098:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    309a:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    309e:	3601      	adds	r6, #1
    30a0:	42b3      	cmp	r3, r6
    30a2:	dce7      	bgt.n	3074 <torch(LEDStruct&)+0x1b0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    30a4:	2b4b      	cmp	r3, #75	; 0x4b
    30a6:	d047      	beq.n	3138 <torch(LEDStruct&)+0x274>
    30a8:	f10d 0914 	add.w	r9, sp, #20
    30ac:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    30b0:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    30b2:	4626      	mov	r6, r4
    30b4:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    30b6:	f04f 0a01 	mov.w	sl, #1
    30ba:	f894 22d8 	ldrb.w	r2, [r4, #728]	; 0x2d8
    30be:	f8cd a000 	str.w	sl, [sp]
    30c2:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    30c6:	fb98 f3f3 	sdiv	r3, r8, r3
    30ca:	441a      	add	r2, r3
    30cc:	b2d2      	uxtb	r2, r2
    30ce:	23ff      	movs	r3, #255	; 0xff
    30d0:	4659      	mov	r1, fp
    30d2:	4648      	mov	r0, r9
    30d4:	f001 ff58 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30d8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    30dc:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    30e0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30e4:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    30e6:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    30e8:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    30ea:	f894 32d8 	ldrb.w	r3, [r4, #728]	; 0x2d8
    30ee:	f894 22d4 	ldrb.w	r2, [r4, #724]	; 0x2d4
    30f2:	fb98 f8f2 	sdiv	r8, r8, r2
    30f6:	eb08 0203 	add.w	r2, r8, r3
    30fa:	b2d2      	uxtb	r2, r2
    30fc:	23ff      	movs	r3, #255	; 0xff
    30fe:	4659      	mov	r1, fp
    3100:	f8cd a000 	str.w	sl, [sp]
    3104:	4648      	mov	r0, r9
    3106:	f001 ff3f 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    310a:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    310e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3112:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3116:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    311a:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    311e:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3122:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3126:	3501      	adds	r5, #1
    3128:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    312c:	42aa      	cmp	r2, r5
    312e:	f106 0603 	add.w	r6, r6, #3
    3132:	f1a7 0703 	sub.w	r7, r7, #3
    3136:	dcc0      	bgt.n	30ba <torch(LEDStruct&)+0x1f6>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3138:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    313c:	2b00      	cmp	r3, #0
    313e:	f040 8093 	bne.w	3268 <torch(LEDStruct&)+0x3a4>
	else			   { leds.torch_index -= leds.torch_diff; }
    3142:	f894 32d8 	ldrb.w	r3, [r4, #728]	; 0x2d8
    3146:	f894 22d9 	ldrb.w	r2, [r4, #729]	; 0x2d9
    314a:	1a9b      	subs	r3, r3, r2
    314c:	f884 32d8 	strb.w	r3, [r4, #728]	; 0x2d8
}
    3150:	b007      	add	sp, #28
    3152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3156:	4621      	mov	r1, r4
    3158:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    315c:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    315e:	7810      	ldrb	r0, [r2, #0]
    3160:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    3164:	7850      	ldrb	r0, [r2, #1]
    3166:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    316a:	7890      	ldrb	r0, [r2, #2]
    316c:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    3170:	3203      	adds	r2, #3
    3172:	4295      	cmp	r5, r2
    3174:	f1a1 0103 	sub.w	r1, r1, #3
    3178:	d1f1      	bne.n	315e <torch(LEDStruct&)+0x29a>
    317a:	e793      	b.n	30a4 <torch(LEDStruct&)+0x1e0>
    317c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3180:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3184:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3188:	3219      	adds	r2, #25
    318a:	b292      	uxth	r2, r2
    318c:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3190:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3194:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3198:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    319a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    319e:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31a0:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31a2:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31a6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    31aa:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    31ac:	eb04 2222 	add.w	r2, r4, r2, asr #8
    31b0:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    31b4:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    31b8:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31bc:	800d      	strh	r5, [r1, #0]
    31be:	1201      	asrs	r1, r0, #8
    31c0:	3960      	subs	r1, #96	; 0x60
    31c2:	4630      	mov	r0, r6
    31c4:	fa80 f051 	uqadd8	r0, r0, r1
    31c8:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    31cc:	f1bc 0f00 	cmp.w	ip, #0
    31d0:	f47f af29 	bne.w	3026 <torch(LEDStruct&)+0x162>
    31d4:	e0c4      	b.n	3360 <torch(LEDStruct&)+0x49c>
    31d6:	f20c 2685 	addw	r6, ip, #645	; 0x285
    31da:	f20c 2e87 	addw	lr, ip, #647	; 0x287
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    31de:	f8df 8028 	ldr.w	r8, [pc, #40]	; 3208 <torch(LEDStruct&)+0x344>
    31e2:	4426      	add	r6, r4
    31e4:	44a6      	add	lr, r4
    31e6:	7831      	ldrb	r1, [r6, #0]
    31e8:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    31ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    31f0:	fb88 a001 	smull	sl, r0, r8, r1
    31f4:	3f01      	subs	r7, #1
    31f6:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    31fa:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    31fc:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3200:	d1f1      	bne.n	31e6 <torch(LEDStruct&)+0x322>
    3202:	e6bc      	b.n	2f7e <torch(LEDStruct&)+0xba>
    3204:	1fff8734 	.word	0x1fff8734
    3208:	55555556 	.word	0x55555556
    320c:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    3210:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3214:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3218:	fb9e fefc 	sdiv	lr, lr, ip
    321c:	f10e 0e02 	add.w	lr, lr, #2
    3220:	fa5f fe8e 	uxtb.w	lr, lr
    3224:	f504 7722 	add.w	r7, r4, #648	; 0x288
    3228:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    322c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3230:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3234:	3219      	adds	r2, #25
    3236:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3238:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    323c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3240:	b2c9      	uxtb	r1, r1
    3242:	fb11 f10e 	smulbb	r1, r1, lr
    3246:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    324a:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    324c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3250:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3252:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3254:	dbe8      	blt.n	3228 <torch(LEDStruct&)+0x364>
    3256:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3258:	f1ac 0703 	sub.w	r7, ip, #3
    325c:	2f01      	cmp	r7, #1
    325e:	f04f 0900 	mov.w	r9, #0
    3262:	f73f ae71 	bgt.w	2f48 <torch(LEDStruct&)+0x84>
    3266:	e68a      	b.n	2f7e <torch(LEDStruct&)+0xba>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3268:	f894 22d8 	ldrb.w	r2, [r4, #728]	; 0x2d8
    326c:	f894 32d9 	ldrb.w	r3, [r4, #729]	; 0x2d9
    3270:	4413      	add	r3, r2
    3272:	f884 32d8 	strb.w	r3, [r4, #728]	; 0x2d8
	else			   { leds.torch_index -= leds.torch_diff; }
}
    3276:	b007      	add	sp, #28
    3278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    327c:	882b      	ldrh	r3, [r5, #0]
    327e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3282:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3286:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    328a:	3119      	adds	r1, #25
    328c:	b289      	uxth	r1, r1
    328e:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3292:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3296:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    329a:	3219      	adds	r2, #25
    329c:	b292      	uxth	r2, r2
    329e:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    32a2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    32a6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    32aa:	f10e 0e19 	add.w	lr, lr, #25
    32ae:	fa1f fe8e 	uxth.w	lr, lr
    32b2:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    32b6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    32ba:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    32be:	3619      	adds	r6, #25
    32c0:	b2b6      	uxth	r6, r6
    32c2:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    32c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    32ca:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    32ce:	3319      	adds	r3, #25
    32d0:	b29b      	uxth	r3, r3
    32d2:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    32d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    32da:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    32de:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    32e2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    32e6:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    32ea:	b2f6      	uxtb	r6, r6
    32ec:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    32f0:	3719      	adds	r7, #25
    32f2:	b2db      	uxtb	r3, r3
    32f4:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    32f8:	b2bf      	uxth	r7, r7
    32fa:	11b6      	asrs	r6, r6, #6
    32fc:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3300:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3304:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3308:	119b      	asrs	r3, r3, #6
    330a:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    330e:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3312:	333c      	adds	r3, #60	; 0x3c
    3314:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3318:	f3c6 1681 	ubfx	r6, r6, #6, #2
    331c:	fa5f f883 	uxtb.w	r8, r3
    3320:	fa5f fc8c 	uxtb.w	ip, ip
    3324:	3601      	adds	r6, #1
    3326:	f10e 0314 	add.w	r3, lr, #20
    332a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    332e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3332:	f8cd c000 	str.w	ip, [sp]
    3336:	f8cd 8004 	str.w	r8, [sp, #4]
    333a:	9602      	str	r6, [sp, #8]
    333c:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3340:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3344:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3346:	802f      	strh	r7, [r5, #0]
    3348:	f7ff fa66 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    334c:	e5c4      	b.n	2ed8 <torch(LEDStruct&)+0x14>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    334e:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
    3352:	b14a      	cbz	r2, 3368 <torch(LEDStruct&)+0x4a4>
    3354:	882a      	ldrh	r2, [r5, #0]
    3356:	e5f1      	b.n	2f3c <torch(LEDStruct&)+0x78>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3358:	f1b9 0f00 	cmp.w	r9, #0
    335c:	f47f aefb 	bne.w	3156 <torch(LEDStruct&)+0x292>
    3360:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3364:	2300      	movs	r3, #0
    3366:	e6a1      	b.n	30ac <torch(LEDStruct&)+0x1e8>
    3368:	882a      	ldrh	r2, [r5, #0]
    336a:	e775      	b.n	3258 <torch(LEDStruct&)+0x394>

0000336c <colorwave(LEDStruct&)>:
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    3370:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    3374:	b08b      	sub	sp, #44	; 0x2c
    3376:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    3378:	2b00      	cmp	r3, #0
    337a:	f000 81b3 	beq.w	36e4 <colorwave(LEDStruct&)+0x378>
    337e:	f8b0 52fa 	ldrh.w	r5, [r0, #762]	; 0x2fa
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3382:	4ad3      	ldr	r2, [pc, #844]	; (36d0 <colorwave(LEDStruct&)+0x364>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3384:	4bd3      	ldr	r3, [pc, #844]	; (36d4 <colorwave(LEDStruct&)+0x368>)
    3386:	6811      	ldr	r1, [r2, #0]
    3388:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    338a:	9809      	ldr	r0, [sp, #36]	; 0x24
    338c:	fb03 f000 	mul.w	r0, r3, r0
    3390:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3392:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3394:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3398:	d503      	bpl.n	33a2 <colorwave(LEDStruct&)+0x36>
    339a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    339e:	3307      	adds	r3, #7
    33a0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33a2:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    33a4:	f8df 8338 	ldr.w	r8, [pc, #824]	; 36e0 <colorwave(LEDStruct&)+0x374>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33a8:	4fcb      	ldr	r7, [pc, #812]	; (36d8 <colorwave(LEDStruct&)+0x36c>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33aa:	f818 e001 	ldrb.w	lr, [r8, r1]
    33ae:	f837 6011 	ldrh.w	r6, [r7, r1, lsl #1]
    33b2:	f3c3 0146 	ubfx	r1, r3, #1, #7
    33b6:	fb0e 6301 	mla	r3, lr, r1, r6

    if( theta & 0x8000 ) y = -y;
    33ba:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33bc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    33be:	bf48      	it	mi
    33c0:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    33c2:	6811      	ldr	r1, [r2, #0]
    33c4:	9108      	str	r1, [sp, #32]
    33c6:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    33c8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    33cc:	b29b      	uxth	r3, r3
	return ret;
    33ce:	9e08      	ldr	r6, [sp, #32]
    33d0:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    33d4:	f64d 6308 	movw	r3, #56840	; 0xde08
    33d8:	fb03 f606 	mul.w	r6, r3, r6
    33dc:	0c00      	lsrs	r0, r0, #16
    33de:	0c36      	lsrs	r6, r6, #16
    33e0:	3060      	adds	r0, #96	; 0x60
    33e2:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33e4:	0471      	lsls	r1, r6, #17
    33e6:	f884 02e0 	strb.w	r0, [r4, #736]	; 0x2e0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33ea:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33ee:	d503      	bpl.n	33f8 <colorwave(LEDStruct&)+0x8c>
    33f0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    33f4:	3307      	adds	r3, #7
    33f6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33f8:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33fc:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3400:	f818 c00e 	ldrb.w	ip, [r8, lr]
    3404:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    3408:	fb0c 3301 	mla	r3, ip, r1, r3
    340c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    340e:	0431      	lsls	r1, r6, #16
    3410:	bf48      	it	mi
    3412:	425b      	negmi	r3, r3
    3414:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3416:	6811      	ldr	r1, [r2, #0]
    3418:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    341a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    341e:	b29b      	uxth	r3, r3
    3420:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    3424:	9e07      	ldr	r6, [sp, #28]
    3426:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    342a:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    342e:	fb03 fe06 	mul.w	lr, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3432:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3434:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3438:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    343c:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    343e:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    3442:	f8a4 12e6 	strh.w	r1, [r4, #742]	; 0x2e6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3446:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    344a:	d003      	beq.n	3454 <colorwave(LEDStruct&)+0xe8>
    344c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3450:	3307      	adds	r3, #7
    3452:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3454:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3458:	f3c3 0646 	ubfx	r6, r3, #1, #7
    345c:	f818 900c 	ldrb.w	r9, [r8, ip]
    3460:	f837 301c 	ldrh.w	r3, [r7, ip, lsl #1]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    3464:	f8b4 c2de 	ldrh.w	ip, [r4, #734]	; 0x2de
    3468:	f8a4 c2e8 	strh.w	ip, [r4, #744]	; 0x2e8
    346c:	fb09 3306 	mla	r3, r9, r6, r3

    if( theta & 0x8000 ) y = -y;
    3470:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3474:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3476:	bf18      	it	ne
    3478:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    347a:	6816      	ldr	r6, [r2, #0]
    347c:	9606      	str	r6, [sp, #24]
    347e:	b21b      	sxth	r3, r3
    3480:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3484:	b29b      	uxth	r3, r3
    3486:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    348a:	9e06      	ldr	r6, [sp, #24]
    348c:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3490:	f647 3398 	movw	r3, #31640	; 0x7b98
    3494:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3498:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    349c:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    349e:	f10e 0e17 	add.w	lr, lr, #23
    34a2:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    34a6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
	if (!leds.mode_initialized) { colorwave_init(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    34aa:	f884 e2e1 	strb.w	lr, [r4, #737]	; 0x2e1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    34ae:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    34b2:	d003      	beq.n	34bc <colorwave(LEDStruct&)+0x150>
    34b4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    34b8:	3307      	adds	r3, #7
    34ba:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    34bc:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    34c0:	f3c3 0346 	ubfx	r3, r3, #1, #7
    34c4:	f818 b00a 	ldrb.w	fp, [r8, sl]
    34c8:	f837 901a 	ldrh.w	r9, [r7, sl, lsl #1]
    34cc:	fb0b 9903 	mla	r9, fp, r3, r9
    34d0:	fa1f f989 	uxth.w	r9, r9

    if( theta & 0x8000 ) y = -y;
    34d4:	0433      	lsls	r3, r6, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34d6:	6813      	ldr	r3, [r2, #0]
    34d8:	9304      	str	r3, [sp, #16]
    34da:	bf48      	it	mi
    34dc:	f1c9 0900 	rsbmi	r9, r9, #0
	return ret;
    34e0:	9b04      	ldr	r3, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34e2:	6812      	ldr	r2, [r2, #0]
    34e4:	9205      	str	r2, [sp, #20]
    34e6:	fa0f f989 	sxth.w	r9, r9
    34ea:	f5a9 4200 	sub.w	r2, r9, #32768	; 0x8000

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    34ee:	f8b4 62dc 	ldrh.w	r6, [r4, #732]	; 0x2dc
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    34f2:	f8b4 b2da 	ldrh.w	fp, [r4, #730]	; 0x2da
    34f6:	b292      	uxth	r2, r2
    34f8:	f240 49b1 	movw	r9, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    34fc:	fa1f fa83 	uxth.w	sl, r3
    3500:	fb09 f302 	mul.w	r3, r9, r2
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3504:	4a75      	ldr	r2, [pc, #468]	; (36dc <colorwave(LEDStruct&)+0x370>)
	return ret;
    3506:	f8dd 9014 	ldr.w	r9, [sp, #20]
    350a:	f8a4 a2ec 	strh.w	sl, [r4, #748]	; 0x2ec
	leds.deltams = leds.ms - leds.sLastMillis;
    350e:	ebc6 060a 	rsb	r6, r6, sl
    3512:	b2b6      	uxth	r6, r6
    3514:	fb02 f909 	mul.w	r9, r2, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3518:	0c1b      	lsrs	r3, r3, #16
    351a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    351e:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3522:	fb16 be0e 	smlabb	lr, r6, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3526:	b29a      	uxth	r2, r3
    3528:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    352c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    3530:	f8a4 22ea 	strh.w	r2, [r4, #746]	; 0x2ea

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3534:	f8a4 62ee 	strh.w	r6, [r4, #750]	; 0x2ee
	leds.sLastMillis = leds.ms;
    3538:	f8a4 a2dc 	strh.w	sl, [r4, #732]	; 0x2dc
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    353c:	f8a4 e2da 	strh.w	lr, [r4, #730]	; 0x2da
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3540:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3544:	d003      	beq.n	354e <colorwave(LEDStruct&)+0x1e2>
    3546:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    354a:	3307      	adds	r3, #7
    354c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    354e:	ea4f 2b13 	mov.w	fp, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3552:	f3c3 0a46 	ubfx	sl, r3, #1, #7
    3556:	f818 300b 	ldrb.w	r3, [r8, fp]
    355a:	f837 b01b 	ldrh.w	fp, [r7, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    355e:	f8a4 e2f0 	strh.w	lr, [r4, #752]	; 0x2f0
    3562:	fb03 b30a 	mla	r3, r3, sl, fp
    3566:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3568:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    356c:	bf18      	it	ne
    356e:	425b      	negne	r3, r3
    3570:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    3572:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3576:	b29b      	uxth	r3, r3
    3578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    357c:	0c1b      	lsrs	r3, r3, #16
    357e:	3305      	adds	r3, #5
    3580:	b29b      	uxth	r3, r3
    3582:	fb06 c303 	mla	r3, r6, r3, ip
    3586:	f8a4 32de 	strh.w	r3, [r4, #734]	; 0x2de
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    358a:	2d00      	cmp	r5, #0
    358c:	f000 8089 	beq.w	36a2 <colorwave(LEDStruct&)+0x336>
    3590:	4613      	mov	r3, r2
    3592:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    3596:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3598:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    359c:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    359e:	4463      	add	r3, ip
    35a0:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    35a2:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    35a6:	448e      	add	lr, r1
    35a8:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    35ac:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    35b0:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    35b4:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    35b6:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    35ba:	bf08      	it	eq
    35bc:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    35be:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    35c2:	f884 b2e2 	strb.w	fp, [r4, #738]	; 0x2e2
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    35c6:	f8a4 32e8 	strh.w	r3, [r4, #744]	; 0x2e8
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    35ca:	f8a4 c2f2 	strh.w	ip, [r4, #754]	; 0x2f2
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    35ce:	f884 22e2 	strb.w	r2, [r4, #738]	; 0x2e2
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    35d2:	f8a4 e2f0 	strh.w	lr, [r4, #752]	; 0x2f0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    35d6:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    35da:	d003      	beq.n	35e4 <colorwave(LEDStruct&)+0x278>
    35dc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    35e0:	3107      	adds	r1, #7
    35e2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    35e4:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35e8:	f3c1 0346 	ubfx	r3, r1, #1, #7
    35ec:	f818 b00c 	ldrb.w	fp, [r8, ip]
    35f0:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    35f4:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    35f8:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35fc:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    35fe:	bf18      	it	ne
    3600:	4249      	negne	r1, r1
    3602:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3604:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    3608:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    360a:	fb01 fe01 	mul.w	lr, r1, r1
    360e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3612:	fb0e f300 	mul.w	r3, lr, r0
    3616:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    361a:	43c0      	mvns	r0, r0
    361c:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    3620:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    3624:	b2db      	uxtb	r3, r3
    3626:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    362a:	f8a4 12f4 	strh.w	r1, [r4, #756]	; 0x2f4

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    362e:	f8a4 e2f6 	strh.w	lr, [r4, #758]	; 0x2f6
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3632:	f884 32e3 	strb.w	r3, [r4, #739]	; 0x2e3

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3636:	4651      	mov	r1, sl
    3638:	f8cd 9000 	str.w	r9, [sp]
    363c:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    363e:	f884 22e4 	strb.w	r2, [r4, #740]	; 0x2e4

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3642:	f001 fca1 	bl	4f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    3646:	f8b4 32fa 	ldrh.w	r3, [r4, #762]	; 0x2fa
    364a:	3b01      	subs	r3, #1
    364c:	1b9b      	subs	r3, r3, r6
    364e:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    3650:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    3654:	f8a4 32f8 	strh.w	r3, [r4, #760]	; 0x2f8

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    3658:	4420      	add	r0, r4
    365a:	2280      	movs	r2, #128	; 0x80
    365c:	a903      	add	r1, sp, #12
    365e:	3d01      	subs	r5, #1
    3660:	f001 fc34 	bl	4ecc <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    3664:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3668:	d00a      	beq.n	3680 <colorwave(LEDStruct&)+0x314>
    366a:	f8b4 c2e8 	ldrh.w	ip, [r4, #744]	; 0x2e8
    366e:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
    3672:	f8b4 e2f0 	ldrh.w	lr, [r4, #752]	; 0x2f0
    3676:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
    367a:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    367e:	e78e      	b.n	359e <colorwave(LEDStruct&)+0x232>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3680:	3601      	adds	r6, #1
    3682:	f8b4 32fa 	ldrh.w	r3, [r4, #762]	; 0x2fa
    3686:	b2b6      	uxth	r6, r6
    3688:	42b3      	cmp	r3, r6
    368a:	d90a      	bls.n	36a2 <colorwave(LEDStruct&)+0x336>
    368c:	f8b4 c2e8 	ldrh.w	ip, [r4, #744]	; 0x2e8
    3690:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
    3694:	f8b4 e2f0 	ldrh.w	lr, [r4, #752]	; 0x2f0
    3698:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
    369c:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    36a0:	e77c      	b.n	359c <colorwave(LEDStruct&)+0x230>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    36a2:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    36a6:	b983      	cbnz	r3, 36ca <colorwave(LEDStruct&)+0x35e>
    36a8:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    36ac:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36ae:	781a      	ldrb	r2, [r3, #0]
    36b0:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    36b4:	785a      	ldrb	r2, [r3, #1]
    36b6:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    36ba:	789a      	ldrb	r2, [r3, #2]
    36bc:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    36c0:	3303      	adds	r3, #3
    36c2:	4299      	cmp	r1, r3
    36c4:	f1a4 0403 	sub.w	r4, r4, #3
    36c8:	d1f1      	bne.n	36ae <colorwave(LEDStruct&)+0x342>
}
    36ca:	b00b      	add	sp, #44	; 0x2c
    36cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36d0:	1fff94e8 	.word	0x1fff94e8
    36d4:	000174f8 	.word	0x000174f8
    36d8:	00007eb8 	.word	0x00007eb8
    36dc:	0001b580 	.word	0x0001b580
    36e0:	00008724 	.word	0x00008724
    36e4:	4810      	ldr	r0, [pc, #64]	; (3728 <colorwave(LEDStruct&)+0x3bc>)
    36e6:	8803      	ldrh	r3, [r0, #0]
    36e8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    36ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    36f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    36f4:	3319      	adds	r3, #25
    36f6:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    36f8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    36fc:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    36fe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    3702:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3704:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    3706:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    370a:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    370e:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
	leds.mode_type = COLORWAVE;
    3712:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3716:	b11a      	cbz	r2, 3720 <colorwave(LEDStruct&)+0x3b4>
    3718:	2596      	movs	r5, #150	; 0x96
    371a:	f8a4 52fa 	strh.w	r5, [r4, #762]	; 0x2fa
    371e:	e630      	b.n	3382 <colorwave(LEDStruct&)+0x16>
	else					 { leds.strip_range = ONE_SIDE; }
    3720:	254b      	movs	r5, #75	; 0x4b
    3722:	f8a4 52fa 	strh.w	r5, [r4, #762]	; 0x2fa
    3726:	e62c      	b.n	3382 <colorwave(LEDStruct&)+0x16>
    3728:	1fff8734 	.word	0x1fff8734

0000372c <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    372c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    372e:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    3732:	b085      	sub	sp, #20
    3734:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    3736:	2b0f      	cmp	r3, #15
    3738:	f200 8428 	bhi.w	3f8c <switch_mode(LEDStruct&)+0x860>
    373c:	e8df f013 	tbh	[pc, r3, lsl #1]
    3740:	01eb016a 	.word	0x01eb016a
    3744:	0063026f 	.word	0x0063026f
    3748:	03d200e0 	.word	0x03d200e0
    374c:	013800e6 	.word	0x013800e6
    3750:	033602ee 	.word	0x033602ee
    3754:	00100384 	.word	0x00100384
    3758:	013e005d 	.word	0x013e005d
    375c:	026a0149 	.word	0x026a0149
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    3760:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3764:	2b00      	cmp	r3, #0
    3766:	d148      	bne.n	37fa <switch_mode(LEDStruct&)+0xce>
    3768:	4da9      	ldr	r5, [pc, #676]	; (3a10 <switch_mode(LEDStruct&)+0x2e4>)
    376a:	882b      	ldrh	r3, [r5, #0]
    376c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3770:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3774:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3778:	3319      	adds	r3, #25
    377a:	b29b      	uxth	r3, r3
    377c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3780:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3784:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3788:	3119      	adds	r1, #25
    378a:	b289      	uxth	r1, r1
    378c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3790:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3794:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3798:	3219      	adds	r2, #25
    379a:	b292      	uxth	r2, r2
    379c:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    37a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37a4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    37a8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37ac:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37b0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    37b4:	b2db      	uxtb	r3, r3
    37b6:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37b8:	3619      	adds	r6, #25
    37ba:	b2d2      	uxtb	r2, r2
    37bc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    37c0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    37c4:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    37c8:	b2b6      	uxth	r6, r6
    37ca:	1188      	asrs	r0, r1, #6
    37cc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    37d0:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37d2:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    37d6:	3032      	adds	r0, #50	; 0x32
    37d8:	f3c7 1781 	ubfx	r7, r7, #6, #2
    37dc:	313c      	adds	r1, #60	; 0x3c
    37de:	121b      	asrs	r3, r3, #8
    37e0:	b2c0      	uxtb	r0, r0
    37e2:	3701      	adds	r7, #1
    37e4:	b2c9      	uxtb	r1, r1
    37e6:	3314      	adds	r3, #20
    37e8:	2201      	movs	r2, #1
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    37ea:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    37ee:	b2db      	uxtb	r3, r3
    37f0:	4611      	mov	r1, r2
    37f2:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37f4:	802e      	strh	r6, [r5, #0]
    37f6:	f7ff f80f 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    37fa:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    37fc:	b005      	add	sp, #20
    37fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    3802:	f7ff b873 	b.w	28ec <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    3806:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    380a:	2b00      	cmp	r3, #0
    380c:	d178      	bne.n	3900 <switch_mode(LEDStruct&)+0x1d4>
    380e:	4980      	ldr	r1, [pc, #512]	; (3a10 <switch_mode(LEDStruct&)+0x2e4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3810:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    3814:	880b      	ldrh	r3, [r1, #0]
    3816:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    381a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    381e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3822:	3319      	adds	r3, #25
    3824:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3828:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    382c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3830:	3319      	adds	r3, #25
    3832:	b29b      	uxth	r3, r3
    3834:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    383c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3840:	3019      	adds	r0, #25
    3842:	b280      	uxth	r0, r0
    3844:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    3848:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    384c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3850:	3219      	adds	r2, #25
    3852:	b292      	uxth	r2, r2
    3854:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    3858:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    385c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3860:	3719      	adds	r7, #25
    3862:	b2bf      	uxth	r7, r7
    3864:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    3868:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    386c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3870:	3519      	adds	r5, #25
    3872:	b2ad      	uxth	r5, r5
    3874:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3878:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    387c:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3880:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3884:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3888:	b2db      	uxtb	r3, r3
    388a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    388e:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3890:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3894:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3896:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3898:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    389c:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    38a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    38a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    38a8:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    38ac:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    38ae:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    38b0:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    38b4:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    38b6:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    38ba:	f100 0208 	add.w	r2, r0, #8
    38be:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    38c2:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    38c6:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    38ca:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    38cc:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    38ce:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    38d2:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    38d6:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    38da:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    38dc:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    38e0:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38e4:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    38e8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    38ec:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    38f0:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    38f4:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    38f8:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    38fc:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    3900:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3902:	b005      	add	sp, #20
    3904:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    3908:	f7fe b984 	b.w	1c14 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    390c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3910:	2b00      	cmp	r3, #0
    3912:	d14d      	bne.n	39b0 <switch_mode(LEDStruct&)+0x284>
    3914:	493e      	ldr	r1, [pc, #248]	; (3a10 <switch_mode(LEDStruct&)+0x2e4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    3916:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    391a:	880b      	ldrh	r3, [r1, #0]
    391c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3920:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3924:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3928:	3319      	adds	r3, #25
    392a:	b29b      	uxth	r3, r3
    392c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3930:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3934:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3938:	3219      	adds	r2, #25
    393a:	b292      	uxth	r2, r2
    393c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3940:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3944:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3948:	3019      	adds	r0, #25
    394a:	b280      	uxth	r0, r0
    394c:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3950:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3954:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3958:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    395c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3960:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    3962:	b2d2      	uxtb	r2, r2
    3964:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3966:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    396a:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    396c:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3970:	121b      	asrs	r3, r3, #8
    3972:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    3974:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3976:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    397a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    397e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3982:	2701      	movs	r7, #1
	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3984:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3986:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    398a:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    398e:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    3990:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3994:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3998:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    399c:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    39a0:	f884 7239 	strb.w	r7, [r4, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    39a4:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    39a8:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39aa:	800d      	strh	r5, [r1, #0]
    39ac:	f7fd fe48 	bl	1640 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    39b0:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    39b2:	b005      	add	sp, #20
    39b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    39b8:	f7fe be6a 	b.w	2690 <rainbow_march(LEDStruct&)>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
    39bc:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    39c0:	2a00      	cmp	r2, #0
    39c2:	f000 82e5 	beq.w	3f90 <switch_mode(LEDStruct&)+0x864>
			torch(leds);
    39c6:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    39c8:	b005      	add	sp, #20
    39ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
    39ce:	f7ff ba79 	b.w	2ec4 <torch(LEDStruct&)>
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0, 20, 100, 90); }		// sync on  | mirror must be off
    39d2:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    39d6:	2a00      	cmp	r2, #0
    39d8:	d1f5      	bne.n	39c6 <switch_mode(LEDStruct&)+0x29a>
    39da:	4e0d      	ldr	r6, [pc, #52]	; (3a10 <switch_mode(LEDStruct&)+0x2e4>)
    39dc:	8833      	ldrh	r3, [r6, #0]
    39de:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    39e2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    39e6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    39ea:	3519      	adds	r5, #25
    39ec:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    39ee:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    39f2:	f3c3 1381 	ubfx	r3, r3, #6, #2
    39f6:	3301      	adds	r3, #1
    39f8:	205a      	movs	r0, #90	; 0x5a
    39fa:	2164      	movs	r1, #100	; 0x64
    39fc:	9302      	str	r3, [sp, #8]
    39fe:	9001      	str	r0, [sp, #4]
    3a00:	9100      	str	r1, [sp, #0]
    3a02:	2314      	movs	r3, #20
    3a04:	2101      	movs	r1, #1
    3a06:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a08:	8035      	strh	r5, [r6, #0]
    3a0a:	f7fe ff05 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3a0e:	e7da      	b.n	39c6 <switch_mode(LEDStruct&)+0x29a>
    3a10:	1fff8734 	.word	0x1fff8734
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    3a14:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    3a18:	2900      	cmp	r1, #0
    3a1a:	f47f af71 	bne.w	3900 <switch_mode(LEDStruct&)+0x1d4>
    3a1e:	48e2      	ldr	r0, [pc, #904]	; (3da8 <switch_mode(LEDStruct&)+0x67c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3a20:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    3a24:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    3a26:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    3a2a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3a2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a32:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a36:	3319      	adds	r3, #25
    3a38:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3a3c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a40:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a44:	3319      	adds	r3, #25
    3a46:	b29b      	uxth	r3, r3
    3a48:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    3a4c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3a50:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3a54:	3519      	adds	r5, #25
    3a56:	b2ad      	uxth	r5, r5
    3a58:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    3a5c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    3a60:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a64:	3219      	adds	r2, #25
    3a66:	b292      	uxth	r2, r2
    3a68:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    3a6c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    3a70:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3a74:	3719      	adds	r7, #25
    3a76:	b2bf      	uxth	r7, r7
    3a78:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    3a7c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    3a80:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3a84:	3619      	adds	r6, #25
    3a86:	b2b6      	uxth	r6, r6
    3a88:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    3a8c:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a90:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3a94:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3a98:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a9c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a9e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3aa2:	b2ed      	uxtb	r5, r5
    3aa4:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3aa8:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3aaa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3ab2:	fa1f fc8e 	uxth.w	ip, lr
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ab6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3aba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3abe:	11ad      	asrs	r5, r5, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ac0:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ac4:	ea4f 1ee3 	mov.w	lr, r3, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3ac8:	f3c7 1742 	ubfx	r7, r7, #5, #3

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3acc:	1193      	asrs	r3, r2, #6
    3ace:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3ad2:	f105 0208 	add.w	r2, r5, #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3ad6:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    3ada:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    3ade:	f10e 0e01 	add.w	lr, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3ae2:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    3ae4:	1c7d      	adds	r5, r7, #1
	leds.juggle_index_reset  = jir;
    3ae6:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3aea:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3aee:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3af2:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3af4:	f884 e22f 	strb.w	lr, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3af8:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    3afc:	f884 5232 	strb.w	r5, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b00:	f8a0 c000 	strh.w	ip, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3b04:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3b08:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3b0c:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3b10:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
    3b14:	e6f4      	b.n	3900 <switch_mode(LEDStruct&)+0x1d4>
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    3b16:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3b1a:	2a00      	cmp	r2, #0
    3b1c:	f47f aef0 	bne.w	3900 <switch_mode(LEDStruct&)+0x1d4>
    3b20:	49a1      	ldr	r1, [pc, #644]	; (3da8 <switch_mode(LEDStruct&)+0x67c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3b22:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    3b26:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3b28:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    3b2c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3b30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b34:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b38:	3319      	adds	r3, #25
    3b3a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3b3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b42:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3b46:	3319      	adds	r3, #25
    3b48:	b29b      	uxth	r3, r3
    3b4a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3b4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3b52:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3b56:	3019      	adds	r0, #25
    3b58:	b280      	uxth	r0, r0
    3b5a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    3b5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3b62:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b66:	3219      	adds	r2, #25
    3b68:	b292      	uxth	r2, r2
    3b6a:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    3b6e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    3b72:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3b76:	3719      	adds	r7, #25
    3b78:	b2bf      	uxth	r7, r7
    3b7a:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    3b7e:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    3b82:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3b86:	3519      	adds	r5, #25
    3b88:	b2ad      	uxth	r5, r5
    3b8a:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b8e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b92:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b96:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3b9a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_numdots 	 = jn;
    3b9e:	b2db      	uxtb	r3, r3
    3ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3ba4:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ba6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3baa:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3bac:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3bae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3bb2:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    3bba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3bbe:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bc2:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3bc4:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bc6:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3bca:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    3bcc:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bd0:	f100 0208 	add.w	r2, r0, #8
    3bd4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3bd8:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    3bdc:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3be0:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    3be2:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    3be4:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3be8:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bec:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3bf0:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3bf2:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    3bf6:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bfa:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3bfe:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3c02:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3c06:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3c0a:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    3c0e:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    3c12:	e675      	b.n	3900 <switch_mode(LEDStruct&)+0x1d4>
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3c14:	b005      	add	sp, #20
    3c16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			torch(leds);
			break;

		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
    3c1a:	f7ff bba7 	b.w	336c <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    3c1e:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3c22:	2a00      	cmp	r2, #0
    3c24:	f47f ae6c 	bne.w	3900 <switch_mode(LEDStruct&)+0x1d4>
    3c28:	495f      	ldr	r1, [pc, #380]	; (3da8 <switch_mode(LEDStruct&)+0x67c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3c2a:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    3c2e:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    3c30:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    3c34:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3c38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3c3c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c40:	3319      	adds	r3, #25
    3c42:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3c46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3c4a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c4e:	3319      	adds	r3, #25
    3c50:	b29b      	uxth	r3, r3
    3c52:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3c56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3c5a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3c5e:	3019      	adds	r0, #25
    3c60:	b280      	uxth	r0, r0
    3c62:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    3c66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3c6a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c6e:	3219      	adds	r2, #25
    3c70:	b292      	uxth	r2, r2
    3c72:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    3c76:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    3c7a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3c7e:	3719      	adds	r7, #25
    3c80:	b2bf      	uxth	r7, r7
    3c82:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    3c86:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    3c8a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3c8e:	3519      	adds	r5, #25
    3c90:	b2ad      	uxth	r5, r5
    3c92:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c96:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c9a:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c9e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3ca2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ca6:	b2db      	uxtb	r3, r3
    3ca8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cac:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cae:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cb2:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3cb4:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cb6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3cba:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    3cc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3cc6:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cca:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ccc:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cce:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cd2:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    3cd4:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cd8:	f100 0208 	add.w	r2, r0, #8
    3cdc:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ce0:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    3ce4:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3ce8:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    3cea:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    3cec:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3cf0:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cf4:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3cf8:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cfa:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    3cfe:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d02:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3d06:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3d0a:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3d0e:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3d12:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3d16:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    3d1a:	e5f1      	b.n	3900 <switch_mode(LEDStruct&)+0x1d4>
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    3d1c:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3d20:	2a00      	cmp	r2, #0
    3d22:	f47f ad6a 	bne.w	37fa <switch_mode(LEDStruct&)+0xce>
    3d26:	4d20      	ldr	r5, [pc, #128]	; (3da8 <switch_mode(LEDStruct&)+0x67c>)
    3d28:	882b      	ldrh	r3, [r5, #0]
    3d2a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3d2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3d32:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3d36:	3019      	adds	r0, #25
    3d38:	b280      	uxth	r0, r0
    3d3a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    3d3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3d42:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3d46:	3119      	adds	r1, #25
    3d48:	b289      	uxth	r1, r1
    3d4a:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    3d4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3d52:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d56:	3319      	adds	r3, #25
    3d58:	b29b      	uxth	r3, r3
    3d5a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    3d5e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d62:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3d66:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d6a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d6e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3d72:	b2c7      	uxtb	r7, r0
    3d74:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d76:	3619      	adds	r6, #25
    3d78:	b2db      	uxtb	r3, r3
    3d7a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    3d7e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3d82:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    3d86:	b2b6      	uxth	r6, r6
    3d88:	1188      	asrs	r0, r1, #6
    3d8a:	1199      	asrs	r1, r3, #6
    3d8c:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d90:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    3d94:	3032      	adds	r0, #50	; 0x32
    3d96:	f3c7 1781 	ubfx	r7, r7, #6, #2
    3d9a:	313c      	adds	r1, #60	; 0x3c
    3d9c:	121b      	asrs	r3, r3, #8
    3d9e:	b2c0      	uxtb	r0, r0
    3da0:	3701      	adds	r7, #1
    3da2:	b2c9      	uxtb	r1, r1
    3da4:	3314      	adds	r3, #20
    3da6:	e520      	b.n	37ea <switch_mode(LEDStruct&)+0xbe>
    3da8:	1fff8734 	.word	0x1fff8734
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    3dac:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3db0:	2a00      	cmp	r2, #0
    3db2:	f47f ad22 	bne.w	37fa <switch_mode(LEDStruct&)+0xce>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3db6:	4d84      	ldr	r5, [pc, #528]	; (3fc8 <switch_mode(LEDStruct&)+0x89c>)
    3db8:	882b      	ldrh	r3, [r5, #0]
    3dba:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3dbe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3dc2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3dc6:	3019      	adds	r0, #25
    3dc8:	b280      	uxth	r0, r0
    3dca:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    3dce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3dd2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3dd6:	3119      	adds	r1, #25
    3dd8:	b289      	uxth	r1, r1
    3dda:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    3dde:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    3de2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3de6:	3319      	adds	r3, #25
    3de8:	b29b      	uxth	r3, r3
    3dea:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    3dee:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3df2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3df6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3dfa:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3dfe:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3e02:	b2c7      	uxtb	r7, r0
    3e04:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e06:	3619      	adds	r6, #25
    3e08:	b2db      	uxtb	r3, r3
    3e0a:	b2b6      	uxth	r6, r6
    3e0c:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    3e10:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    3e14:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3e18:	1188      	asrs	r0, r1, #6
    3e1a:	1199      	asrs	r1, r3, #6
    3e1c:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e20:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    3e24:	3032      	adds	r0, #50	; 0x32
    3e26:	f3c7 1781 	ubfx	r7, r7, #6, #2
    3e2a:	313c      	adds	r1, #60	; 0x3c
    3e2c:	121b      	asrs	r3, r3, #8
    3e2e:	b2c0      	uxtb	r0, r0
    3e30:	3701      	adds	r7, #1
    3e32:	b2c9      	uxtb	r1, r1
    3e34:	3314      	adds	r3, #20
    3e36:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    3e3a:	b2db      	uxtb	r3, r3
    3e3c:	2101      	movs	r1, #1
    3e3e:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e40:	802e      	strh	r6, [r5, #0]
    3e42:	f7fe fce9 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3e46:	e4d8      	b.n	37fa <switch_mode(LEDStruct&)+0xce>
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    3e48:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    3e4c:	2900      	cmp	r1, #0
    3e4e:	f47f acd4 	bne.w	37fa <switch_mode(LEDStruct&)+0xce>
    3e52:	4d5d      	ldr	r5, [pc, #372]	; (3fc8 <switch_mode(LEDStruct&)+0x89c>)
    3e54:	882b      	ldrh	r3, [r5, #0]
    3e56:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3e5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e5e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3e62:	3019      	adds	r0, #25
    3e64:	b280      	uxth	r0, r0
    3e66:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    3e6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3e6e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3e72:	3219      	adds	r2, #25
    3e74:	b292      	uxth	r2, r2
    3e76:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    3e7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3e7e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3e82:	3319      	adds	r3, #25
    3e84:	b29b      	uxth	r3, r3
    3e86:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    3e8a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e8e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3e92:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e96:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e9a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3e9e:	b2c7      	uxtb	r7, r0
    3ea0:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ea2:	3619      	adds	r6, #25
    3ea4:	b2db      	uxtb	r3, r3
    3ea6:	b2b6      	uxth	r6, r6
    3ea8:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    3eac:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    3eb0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3eb4:	1190      	asrs	r0, r2, #6
    3eb6:	119a      	asrs	r2, r3, #6
    3eb8:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ebc:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    3ec0:	3032      	adds	r0, #50	; 0x32
    3ec2:	f3c7 1781 	ubfx	r7, r7, #6, #2
    3ec6:	323c      	adds	r2, #60	; 0x3c
    3ec8:	121b      	asrs	r3, r3, #8
    3eca:	b2c0      	uxtb	r0, r0
    3ecc:	3701      	adds	r7, #1
    3ece:	b2d2      	uxtb	r2, r2
    3ed0:	3314      	adds	r3, #20
    3ed2:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    3ed6:	b2db      	uxtb	r3, r3
    3ed8:	2201      	movs	r2, #1
    3eda:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3edc:	802e      	strh	r6, [r5, #0]
    3ede:	f7fe fc9b 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3ee2:	e48a      	b.n	37fa <switch_mode(LEDStruct&)+0xce>
			break;


		// Rainbow March Functions
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    3ee4:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3ee8:	2a00      	cmp	r2, #0
    3eea:	f47f ad61 	bne.w	39b0 <switch_mode(LEDStruct&)+0x284>
    3eee:	4936      	ldr	r1, [pc, #216]	; (3fc8 <switch_mode(LEDStruct&)+0x89c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    3ef0:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    3ef4:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    3ef6:	f880 2239 	strb.w	r2, [r0, #569]	; 0x239
    3efa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3efe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f02:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f06:	3319      	adds	r3, #25
    3f08:	b29b      	uxth	r3, r3
    3f0a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f0e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3f12:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f16:	3219      	adds	r2, #25
    3f18:	b292      	uxth	r2, r2
    3f1a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3f1e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3f22:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3f26:	3019      	adds	r0, #25
    3f28:	b280      	uxth	r0, r0
    3f2a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3f2e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f32:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3f36:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f3a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    leds.rainbow_diff   = rd;
    3f3e:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    3f40:	b2d2      	uxtb	r2, r2
    3f42:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f44:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3f48:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    3f4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f4e:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f50:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    3f54:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    3f56:	1212      	asrs	r2, r2, #8
    3f58:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3f5c:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3f5e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;
    3f62:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3f66:	2701      	movs	r7, #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f68:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    3f6c:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    3f6e:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3f72:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3f76:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3f7a:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    3f7e:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    3f82:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f84:	800d      	strh	r5, [r1, #0]
    3f86:	f7fd fb5b 	bl	1640 <LEDDebug(LEDStruct&)>
    3f8a:	e511      	b.n	39b0 <switch_mode(LEDStruct&)+0x284>
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3f8c:	b005      	add	sp, #20
    3f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f90:	4e0d      	ldr	r6, [pc, #52]	; (3fc8 <switch_mode(LEDStruct&)+0x89c>)
    3f92:	8833      	ldrh	r3, [r6, #0]
    3f94:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    3f98:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3f9c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3fa0:	3519      	adds	r5, #25
    3fa2:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3fa4:	eb05 2315 	add.w	r3, r5, r5, lsr #8
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
    3fa8:	f3c3 1381 	ubfx	r3, r3, #6, #2
    3fac:	3301      	adds	r3, #1
    3fae:	205a      	movs	r0, #90	; 0x5a
    3fb0:	2146      	movs	r1, #70	; 0x46
    3fb2:	9302      	str	r3, [sp, #8]
    3fb4:	9001      	str	r0, [sp, #4]
    3fb6:	9100      	str	r1, [sp, #0]
    3fb8:	2314      	movs	r3, #20
    3fba:	4611      	mov	r1, r2
    3fbc:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fbe:	8035      	strh	r5, [r6, #0]
    3fc0:	f7fe fc2a 	bl	2818 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3fc4:	e4ff      	b.n	39c6 <switch_mode(LEDStruct&)+0x29a>
    3fc6:	bf00      	nop
    3fc8:	1fff8734 	.word	0x1fff8734

00003fcc <setup>:

Mode start_mode = JUGGLE_PHASED;

// ================ SETUP ================

void setup() {
    3fcc:	b570      	push	{r4, r5, r6, lr}
    3fce:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3fd2:	b082      	sub	sp, #8
    3fd4:	4863      	ldr	r0, [pc, #396]	; (4164 <setup+0x198>)
    3fd6:	f001 fb59 	bl	568c <VisualMicroDebug::init(unsigned long)>
    3fda:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    3fde:	4861      	ldr	r0, [pc, #388]	; (4164 <setup+0x198>)
    3fe0:	f001 fb50 	bl	5684 <VisualMicroDebug::begin(unsigned long)>
    3fe4:	2101      	movs	r1, #1
    3fe6:	485f      	ldr	r0, [pc, #380]	; (4164 <setup+0x198>)
    3fe8:	f001 fb26 	bl	5638 <VisualMicroDebug::outPacketStart(bool)>
    3fec:	b150      	cbz	r0, 4004 <setup+0x38>
    3fee:	2110      	movs	r1, #16
    3ff0:	485d      	ldr	r0, [pc, #372]	; (4168 <setup+0x19c>)
    3ff2:	f002 fe7d 	bl	6cf0 <usb_serial_write>
    3ff6:	485b      	ldr	r0, [pc, #364]	; (4164 <setup+0x198>)
    3ff8:	210a      	movs	r1, #10
    3ffa:	f001 fb0b 	bl	5614 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    3ffe:	4859      	ldr	r0, [pc, #356]	; (4164 <setup+0x198>)
    4000:	f001 fb3e 	bl	5680 <VisualMicroDebug::outPacketEnd()>
    4004:	2201      	movs	r2, #1
    4006:	2100      	movs	r1, #0
    4008:	4856      	ldr	r0, [pc, #344]	; (4164 <setup+0x198>)
    400a:	f001 fbeb 	bl	57e4 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    400e:	f240 51dc 	movw	r1, #1500	; 0x5dc
    4012:	4856      	ldr	r0, [pc, #344]	; (416c <setup+0x1a0>)
    4014:	f003 f8c8 	bl	71a8 <Stream::setTimeout(unsigned long)>
    4018:	2108      	movs	r1, #8
    401a:	4855      	ldr	r0, [pc, #340]	; (4170 <setup+0x1a4>)
    401c:	f002 fe68 	bl	6cf0 <usb_serial_write>
    4020:	4852      	ldr	r0, [pc, #328]	; (416c <setup+0x1a0>)
    4022:	f003 f869 	bl	70f8 <Print::println()>

	delay(1000);
    4026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    402a:	f001 fe49 	bl	5cc0 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    402e:	4851      	ldr	r0, [pc, #324]	; (4174 <setup+0x1a8>)
    4030:	6803      	ldr	r3, [r0, #0]
    4032:	f013 0401 	ands.w	r4, r3, #1
    4036:	d071      	beq.n	411c <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4038:	4c4f      	ldr	r4, [pc, #316]	; (4178 <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    403a:	4950      	ldr	r1, [pc, #320]	; (417c <setup+0x1b0>)
    403c:	4850      	ldr	r0, [pc, #320]	; (4180 <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    403e:	4d51      	ldr	r5, [pc, #324]	; (4184 <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4040:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4042:	2300      	movs	r3, #0
    4044:	2296      	movs	r2, #150	; 0x96
    4046:	f001 f827 	bl	5098 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    404a:	22b0      	movs	r2, #176	; 0xb0
    404c:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    404e:	4620      	mov	r0, r4
    4050:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4052:	7026      	strb	r6, [r4, #0]
    4054:	f88d 2005 	strb.w	r2, [sp, #5]
    4058:	f88d 3006 	strb.w	r3, [sp, #6]
    405c:	f88d 6004 	strb.w	r6, [sp, #4]
    4060:	f001 f85a 	bl	5118 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    4064:	f640 31b8 	movw	r1, #3000	; 0xbb8
    4068:	2005      	movs	r0, #5
    406a:	f001 fac7 	bl	55fc <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    406e:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    4072:	2002      	movs	r0, #2
    4074:	802b      	strh	r3, [r5, #0]
    4076:	f001 fcf5 	bl	5a64 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    407a:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    407c:	2100      	movs	r1, #0
    407e:	4403      	add	r3, r0
    4080:	4620      	mov	r0, r4
    4082:	802b      	strh	r3, [r5, #0]
    4084:	f001 f95a 	bl	533c <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    4088:	7821      	ldrb	r1, [r4, #0]
    408a:	4620      	mov	r0, r4
    408c:	f001 f87c 	bl	5188 <CFastLED::show(unsigned char)>
    4090:	4620      	mov	r0, r4
    4092:	2132      	movs	r1, #50	; 0x32
    4094:	f001 f8da 	bl	524c <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4098:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    409a:	aa01      	add	r2, sp, #4
    409c:	2196      	movs	r1, #150	; 0x96
    409e:	4837      	ldr	r0, [pc, #220]	; (417c <setup+0x1b0>)
    40a0:	f88d 6004 	strb.w	r6, [sp, #4]
    40a4:	f88d 5005 	strb.w	r5, [sp, #5]
    40a8:	f88d 5006 	strb.w	r5, [sp, #6]
    40ac:	f000 fe4a 	bl	4d44 <fill_solid(CRGB*, int, CRGB const&)>
    40b0:	4620      	mov	r0, r4
    40b2:	21fa      	movs	r1, #250	; 0xfa
    40b4:	f001 f8ca 	bl	524c <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    40b8:	aa01      	add	r2, sp, #4
    40ba:	2196      	movs	r1, #150	; 0x96
    40bc:	482f      	ldr	r0, [pc, #188]	; (417c <setup+0x1b0>)
    40be:	f88d 6006 	strb.w	r6, [sp, #6]
    40c2:	f88d 5004 	strb.w	r5, [sp, #4]
    40c6:	f88d 5005 	strb.w	r5, [sp, #5]
    40ca:	f000 fe3b 	bl	4d44 <fill_solid(CRGB*, int, CRGB const&)>
    40ce:	4620      	mov	r0, r4
    40d0:	21fa      	movs	r1, #250	; 0xfa
    40d2:	f001 f8bb 	bl	524c <CFastLED::delay(unsigned long)>
    40d6:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    40d8:	aa01      	add	r2, sp, #4
    40da:	2196      	movs	r1, #150	; 0x96
    40dc:	4827      	ldr	r0, [pc, #156]	; (417c <setup+0x1b0>)
    40de:	f88d 3005 	strb.w	r3, [sp, #5]
    40e2:	f88d 5004 	strb.w	r5, [sp, #4]
    40e6:	f88d 5006 	strb.w	r5, [sp, #6]
    40ea:	f000 fe2b 	bl	4d44 <fill_solid(CRGB*, int, CRGB const&)>
    40ee:	4620      	mov	r0, r4
    40f0:	21fa      	movs	r1, #250	; 0xfa
    40f2:	f001 f8ab 	bl	524c <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    40f6:	4629      	mov	r1, r5
    40f8:	4620      	mov	r0, r4
    40fa:	f001 f91f 	bl	533c <CFastLED::clear(bool)>
    40fe:	4620      	mov	r0, r4
    4100:	21fa      	movs	r1, #250	; 0xfa
    4102:	f001 f8a3 	bl	524c <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    4106:	f7fc fbcd 	bl	8a4 <initialize()>
    410a:	210e      	movs	r1, #14
    410c:	481e      	ldr	r0, [pc, #120]	; (4188 <setup+0x1bc>)
    410e:	f002 fdef 	bl	6cf0 <usb_serial_write>
    4112:	4816      	ldr	r0, [pc, #88]	; (416c <setup+0x1a0>)
    4114:	f002 fff0 	bl	70f8 <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    4118:	b002      	add	sp, #8
    411a:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    411c:	f001 fd50 	bl	5bc0 <__cxa_guard_acquire>
    4120:	2800      	cmp	r0, #0
    4122:	d089      	beq.n	4038 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4124:	4919      	ldr	r1, [pc, #100]	; (418c <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4126:	4b16      	ldr	r3, [pc, #88]	; (4180 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4128:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    412a:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    412c:	22ff      	movs	r2, #255	; 0xff
    412e:	2501      	movs	r5, #1
    4130:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    4132:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4134:	749d      	strb	r5, [r3, #18]
    4136:	731a      	strb	r2, [r3, #12]
    4138:	735a      	strb	r2, [r3, #13]
    413a:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    413c:	73da      	strb	r2, [r3, #15]
    413e:	741a      	strb	r2, [r3, #16]
    4140:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4142:	b160      	cbz	r0, 415e <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    4144:	4a12      	ldr	r2, [pc, #72]	; (4190 <setup+0x1c4>)
    4146:	6811      	ldr	r1, [r2, #0]
    4148:	b101      	cbz	r1, 414c <setup+0x180>
    414a:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    414c:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    414e:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    4150:	4910      	ldr	r1, [pc, #64]	; (4194 <setup+0x1c8>)
    4152:	4808      	ldr	r0, [pc, #32]	; (4174 <setup+0x1a8>)
    4154:	619a      	str	r2, [r3, #24]
    4156:	6019      	str	r1, [r3, #0]
    4158:	f001 fd38 	bl	5bcc <__cxa_guard_release>
    415c:	e76c      	b.n	4038 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    415e:	600b      	str	r3, [r1, #0]
    4160:	e7f0      	b.n	4144 <setup+0x178>
    4162:	bf00      	nop
    4164:	1fff9498 	.word	0x1fff9498
    4168:	00009094 	.word	0x00009094
    416c:	1fff873c 	.word	0x1fff873c
    4170:	000090a8 	.word	0x000090a8
    4174:	1fff8c3c 	.word	0x1fff8c3c
    4178:	1fff9470 	.word	0x1fff9470
    417c:	1fff8fa8 	.word	0x1fff8fa8
    4180:	1fff8c40 	.word	0x1fff8c40
    4184:	1fff8734 	.word	0x1fff8734
    4188:	000090b4 	.word	0x000090b4
    418c:	1fff9480 	.word	0x1fff9480
    4190:	1fff9490 	.word	0x1fff9490
    4194:	00007920 	.word	0x00007920

00004198 <loop>:



// ================ LOOP ================

void loop() {
    4198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    419c:	b093      	sub	sp, #76	; 0x4c
	// Add entropy to randomness
	random16_add_entropy(random());
    419e:	f003 faf5 	bl	778c <random>

	// Change patterns
	EVERY_N_SECONDS(20){
    41a2:	4da2      	ldr	r5, [pc, #648]	; (442c <loop+0x294>)
    41a4:	4aa2      	ldr	r2, [pc, #648]	; (4430 <loop+0x298>)
    41a6:	6829      	ldr	r1, [r5, #0]
    41a8:	8813      	ldrh	r3, [r2, #0]
    41aa:	07ce      	lsls	r6, r1, #31
    41ac:	4418      	add	r0, r3
    41ae:	8010      	strh	r0, [r2, #0]
    41b0:	f140 816c 	bpl.w	448c <loop+0x2f4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41b4:	4e9f      	ldr	r6, [pc, #636]	; (4434 <loop+0x29c>)
    41b6:	4ca0      	ldr	r4, [pc, #640]	; (4438 <loop+0x2a0>)
    41b8:	6833      	ldr	r3, [r6, #0]
    41ba:	9302      	str	r3, [sp, #8]
	return ret;
    41bc:	9a02      	ldr	r2, [sp, #8]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    41be:	489f      	ldr	r0, [pc, #636]	; (443c <loop+0x2a4>)
    41c0:	8823      	ldrh	r3, [r4, #0]
    41c2:	8861      	ldrh	r1, [r4, #2]
    41c4:	fba0 0202 	umull	r0, r2, r0, r2
    41c8:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    41cc:	b29b      	uxth	r3, r3
    41ce:	4299      	cmp	r1, r3
    41d0:	d809      	bhi.n	41e6 <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41d2:	6833      	ldr	r3, [r6, #0]
    41d4:	9301      	str	r3, [sp, #4]
	return ret;
    41d6:	9b01      	ldr	r3, [sp, #4]
    41d8:	4a98      	ldr	r2, [pc, #608]	; (443c <loop+0x2a4>)
    41da:	fba2 2303 	umull	r2, r3, r2, r3
    41de:	099b      	lsrs	r3, r3, #6
    41e0:	8023      	strh	r3, [r4, #0]
		change_pattern();
    41e2:	f7fc fd07 	bl	bf4 <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    41e6:	4d96      	ldr	r5, [pc, #600]	; (4440 <loop+0x2a8>)
    41e8:	682b      	ldr	r3, [r5, #0]
    41ea:	07dc      	lsls	r4, r3, #31
    41ec:	f140 8115 	bpl.w	441a <loop+0x282>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41f0:	6833      	ldr	r3, [r6, #0]
    41f2:	4c94      	ldr	r4, [pc, #592]	; (4444 <loop+0x2ac>)
    41f4:	9305      	str	r3, [sp, #20]
	return ret;
    41f6:	9a05      	ldr	r2, [sp, #20]
    41f8:	4890      	ldr	r0, [pc, #576]	; (443c <loop+0x2a4>)
    41fa:	8823      	ldrh	r3, [r4, #0]
    41fc:	8861      	ldrh	r1, [r4, #2]
    41fe:	fba0 0202 	umull	r0, r2, r0, r2
    4202:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    4206:	b29b      	uxth	r3, r3
    4208:	4299      	cmp	r1, r3
    420a:	f240 80e5 	bls.w	43d8 <loop+0x240>
    420e:	4f8e      	ldr	r7, [pc, #568]	; (4448 <loop+0x2b0>)
    4210:	f8df 9268 	ldr.w	r9, [pc, #616]	; 447c <loop+0x2e4>
    4214:	f8df a248 	ldr.w	sl, [pc, #584]	; 4460 <loop+0x2c8>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    4218:	4d8c      	ldr	r5, [pc, #560]	; (444c <loop+0x2b4>)
    421a:	682b      	ldr	r3, [r5, #0]
    421c:	07d8      	lsls	r0, r3, #31
    421e:	f140 809c 	bpl.w	435a <loop+0x1c2>
    4222:	4c8b      	ldr	r4, [pc, #556]	; (4450 <loop+0x2b8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4224:	6833      	ldr	r3, [r6, #0]
    4226:	9308      	str	r3, [sp, #32]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4228:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    422c:	9b08      	ldr	r3, [sp, #32]
    422e:	1a5b      	subs	r3, r3, r1
    4230:	429a      	cmp	r2, r3
    4232:	f240 80a2 	bls.w	437a <loop+0x1e2>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4236:	f8df 8248 	ldr.w	r8, [pc, #584]	; 4480 <loop+0x2e8>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    423a:	4d86      	ldr	r5, [pc, #536]	; (4454 <loop+0x2bc>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    423c:	f8d8 3000 	ldr.w	r3, [r8]
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    4240:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    4244:	f8df b23c 	ldr.w	fp, [pc, #572]	; 4484 <loop+0x2ec>
    4248:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    424c:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    424e:	07d9      	lsls	r1, r3, #31
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    4250:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4254:	d559      	bpl.n	430a <loop+0x172>
    4256:	4c80      	ldr	r4, [pc, #512]	; (4458 <loop+0x2c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4258:	6833      	ldr	r3, [r6, #0]
    425a:	930b      	str	r3, [sp, #44]	; 0x2c
    425c:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    4260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4262:	1a1b      	subs	r3, r3, r0
    4264:	428b      	cmp	r3, r1
    4266:	d261      	bcs.n	432c <loop+0x194>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4268:	f8df 821c 	ldr.w	r8, [pc, #540]	; 4488 <loop+0x2f0>
    426c:	f8d8 3000 	ldr.w	r3, [r8]
    4270:	07da      	lsls	r2, r3, #31
    4272:	d569      	bpl.n	4348 <loop+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4274:	6833      	ldr	r3, [r6, #0]
    4276:	4c79      	ldr	r4, [pc, #484]	; (445c <loop+0x2c4>)
    4278:	930e      	str	r3, [sp, #56]	; 0x38
    427a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    427e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4280:	1a5b      	subs	r3, r3, r1
    4282:	4293      	cmp	r3, r2
    4284:	f0c0 8093 	bcc.w	43ae <loop+0x216>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4288:	6833      	ldr	r3, [r6, #0]
    428a:	930d      	str	r3, [sp, #52]	; 0x34
		if(in_transition){
    428c:	783b      	ldrb	r3, [r7, #0]
	return ret;
    428e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4290:	6022      	str	r2, [r4, #0]
    4292:	4a72      	ldr	r2, [pc, #456]	; (445c <loop+0x2c4>)
    4294:	2b00      	cmp	r3, #0
    4296:	f040 8085 	bne.w	43a4 <loop+0x20c>
    429a:	4b71      	ldr	r3, [pc, #452]	; (4460 <loop+0x2c8>)
    429c:	4a71      	ldr	r2, [pc, #452]	; (4464 <loop+0x2cc>)
    429e:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42a2:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    42a4:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    42a6:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42a8:	7014      	strb	r4, [r2, #0]
    42aa:	3303      	adds	r3, #3
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    42ac:	42ab      	cmp	r3, r5
        g = rhs.g;
    42ae:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    42b0:	7091      	strb	r1, [r2, #2]
    42b2:	f102 0203 	add.w	r2, r2, #3
    42b6:	d1f4      	bne.n	42a2 <loop+0x10a>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    42b8:	4d6b      	ldr	r5, [pc, #428]	; (4468 <loop+0x2d0>)
    42ba:	682b      	ldr	r3, [r5, #0]
    42bc:	07db      	lsls	r3, r3, #31
    42be:	f140 8081 	bpl.w	43c4 <loop+0x22c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42c2:	6833      	ldr	r3, [r6, #0]
    42c4:	4c69      	ldr	r4, [pc, #420]	; (446c <loop+0x2d4>)
    42c6:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    42c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    42ca:	485c      	ldr	r0, [pc, #368]	; (443c <loop+0x2a4>)
    42cc:	8823      	ldrh	r3, [r4, #0]
    42ce:	8861      	ldrh	r1, [r4, #2]
    42d0:	fba0 0202 	umull	r0, r2, r0, r2
    42d4:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    42d8:	b29b      	uxth	r3, r3
    42da:	4299      	cmp	r1, r3
    42dc:	d80e      	bhi.n	42fc <loop+0x164>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42de:	6833      	ldr	r3, [r6, #0]
    42e0:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    42e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    42e4:	4a55      	ldr	r2, [pc, #340]	; (443c <loop+0x2a4>)
			LEDDebug(curr_leds);
    42e6:	485e      	ldr	r0, [pc, #376]	; (4460 <loop+0x2c8>)
    42e8:	fba2 2303 	umull	r2, r3, r2, r3
    42ec:	099b      	lsrs	r3, r3, #6
    42ee:	8023      	strh	r3, [r4, #0]
    42f0:	f7fd f9a6 	bl	1640 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    42f4:	783b      	ldrb	r3, [r7, #0]
    42f6:	2b00      	cmp	r3, #0
    42f8:	f040 80de 	bne.w	44b8 <loop+0x320>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    42fc:	485c      	ldr	r0, [pc, #368]	; (4470 <loop+0x2d8>)
    42fe:	7801      	ldrb	r1, [r0, #0]
    4300:	f000 ff42 	bl	5188 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    4304:	b013      	add	sp, #76	; 0x4c
    4306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    430a:	4640      	mov	r0, r8
    430c:	f001 fc58 	bl	5bc0 <__cxa_guard_acquire>
    4310:	2800      	cmp	r0, #0
    4312:	f040 80d9 	bne.w	44c8 <loop+0x330>
    4316:	4c50      	ldr	r4, [pc, #320]	; (4458 <loop+0x2c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4318:	6833      	ldr	r3, [r6, #0]
    431a:	930b      	str	r3, [sp, #44]	; 0x2c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    431c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4322:	1a5b      	subs	r3, r3, r1
    4324:	4293      	cmp	r3, r2
    4326:	d39f      	bcc.n	4268 <loop+0xd0>
    4328:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    432c:	6833      	ldr	r3, [r6, #0]
    432e:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    4330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4332:	f8df 8154 	ldr.w	r8, [pc, #340]	; 4488 <loop+0x2f0>
    4336:	6062      	str	r2, [r4, #4]
    4338:	6023      	str	r3, [r4, #0]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    433a:	4849      	ldr	r0, [pc, #292]	; (4460 <loop+0x2c8>)
    433c:	f7ff f9f6 	bl	372c <switch_mode(LEDStruct&)>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4340:	f8d8 3000 	ldr.w	r3, [r8]
    4344:	07da      	lsls	r2, r3, #31
    4346:	d495      	bmi.n	4274 <loop+0xdc>
    4348:	4640      	mov	r0, r8
    434a:	f001 fc39 	bl	5bc0 <__cxa_guard_acquire>
    434e:	2800      	cmp	r0, #0
    4350:	f040 80d5 	bne.w	44fe <loop+0x366>
    4354:	4c41      	ldr	r4, [pc, #260]	; (445c <loop+0x2c4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4356:	6833      	ldr	r3, [r6, #0]
    4358:	e78e      	b.n	4278 <loop+0xe0>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    435a:	4628      	mov	r0, r5
    435c:	f001 fc30 	bl	5bc0 <__cxa_guard_acquire>
    4360:	2800      	cmp	r0, #0
    4362:	f040 80e6 	bne.w	4532 <loop+0x39a>
    4366:	4c3a      	ldr	r4, [pc, #232]	; (4450 <loop+0x2b8>)
    4368:	6833      	ldr	r3, [r6, #0]
    436a:	9308      	str	r3, [sp, #32]
    436c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4370:	9b08      	ldr	r3, [sp, #32]
    4372:	1a5b      	subs	r3, r3, r1
    4374:	4293      	cmp	r3, r2
    4376:	f4ff af5e 	bcc.w	4236 <loop+0x9e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    437a:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    437c:	493d      	ldr	r1, [pc, #244]	; (4474 <loop+0x2dc>)
    437e:	9307      	str	r3, [sp, #28]
	return ret;
    4380:	9b07      	ldr	r3, [sp, #28]
    4382:	6023      	str	r3, [r4, #0]
    4384:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    4388:	2218      	movs	r2, #24
    438a:	f000 fe5d 	bl	5048 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    438e:	783b      	ldrb	r3, [r7, #0]
    4390:	2b00      	cmp	r3, #0
    4392:	f43f af50 	beq.w	4236 <loop+0x9e>
    4396:	4938      	ldr	r1, [pc, #224]	; (4478 <loop+0x2e0>)
    4398:	2218      	movs	r2, #24
    439a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    439e:	f000 fe53 	bl	5048 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    43a2:	e748      	b.n	4236 <loop+0x9e>
    43a4:	782b      	ldrb	r3, [r5, #0]

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    43a6:	4835      	ldr	r0, [pc, #212]	; (447c <loop+0x2e4>)
    43a8:	6053      	str	r3, [r2, #4]
    43aa:	f7ff f9bf 	bl	372c <switch_mode(LEDStruct&)>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    43ae:	783b      	ldrb	r3, [r7, #0]
    43b0:	2b00      	cmp	r3, #0
    43b2:	f43f af72 	beq.w	429a <loop+0x102>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    43b6:	4d2c      	ldr	r5, [pc, #176]	; (4468 <loop+0x2d0>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    43b8:	f7fc fc7a 	bl	cb0 <blending()>
    43bc:	682b      	ldr	r3, [r5, #0]
    43be:	07db      	lsls	r3, r3, #31
    43c0:	f53f af7f 	bmi.w	42c2 <loop+0x12a>
    43c4:	4628      	mov	r0, r5
    43c6:	f001 fbfb 	bl	5bc0 <__cxa_guard_acquire>
    43ca:	2800      	cmp	r0, #0
    43cc:	f040 8088 	bne.w	44e0 <loop+0x348>
    43d0:	4c26      	ldr	r4, [pc, #152]	; (446c <loop+0x2d4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43d2:	6833      	ldr	r3, [r6, #0]
    43d4:	9311      	str	r3, [sp, #68]	; 0x44
    43d6:	e777      	b.n	42c8 <loop+0x130>
    43d8:	6833      	ldr	r3, [r6, #0]
    43da:	9304      	str	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    43dc:	4a17      	ldr	r2, [pc, #92]	; (443c <loop+0x2a4>)
	return ret;
    43de:	9b04      	ldr	r3, [sp, #16]
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (in_transition) { change_palette(next_leds); }
    43e0:	4f19      	ldr	r7, [pc, #100]	; (4448 <loop+0x2b0>)
    43e2:	fba2 2303 	umull	r2, r3, r2, r3
    43e6:	783a      	ldrb	r2, [r7, #0]
    43e8:	099b      	lsrs	r3, r3, #6
    43ea:	8023      	strh	r3, [r4, #0]
    43ec:	b162      	cbz	r2, 4408 <loop+0x270>
	
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    43ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 447c <loop+0x2e4>
    43f2:	f899 3229 	ldrb.w	r3, [r9, #553]	; 0x229
    43f6:	2b00      	cmp	r3, #0
    43f8:	f43f af0c 	beq.w	4214 <loop+0x7c>
    43fc:	4648      	mov	r0, r9
    43fe:	f7fd fb79 	bl	1af4 <change_palette(LEDStruct&) [clone .part.9]>
    4402:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4460 <loop+0x2c8>
    4406:	e707      	b.n	4218 <loop+0x80>
    4408:	f8df a054 	ldr.w	sl, [pc, #84]	; 4460 <loop+0x2c8>
    440c:	f89a 3229 	ldrb.w	r3, [sl, #553]	; 0x229
    4410:	2b00      	cmp	r3, #0
    4412:	d155      	bne.n	44c0 <loop+0x328>
    4414:	f8df 9064 	ldr.w	r9, [pc, #100]	; 447c <loop+0x2e4>
    4418:	e6fe      	b.n	4218 <loop+0x80>
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    441a:	4628      	mov	r0, r5
    441c:	f001 fbd0 	bl	5bc0 <__cxa_guard_acquire>
    4420:	2800      	cmp	r0, #0
    4422:	d177      	bne.n	4514 <loop+0x37c>
    4424:	4c07      	ldr	r4, [pc, #28]	; (4444 <loop+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4426:	6833      	ldr	r3, [r6, #0]
    4428:	9305      	str	r3, [sp, #20]
    442a:	e6e4      	b.n	41f6 <loop+0x5e>
    442c:	1fff8f90 	.word	0x1fff8f90
    4430:	1fff8734 	.word	0x1fff8734
    4434:	1fff94e8 	.word	0x1fff94e8
    4438:	1fff8f80 	.word	0x1fff8f80
    443c:	10624dd3 	.word	0x10624dd3
    4440:	1fff8f94 	.word	0x1fff8f94
    4444:	1fff8c60 	.word	0x1fff8c60
    4448:	1fff8f70 	.word	0x1fff8f70
    444c:	1fff8f98 	.word	0x1fff8f98
    4450:	1fff8f84 	.word	0x1fff8f84
    4454:	1fff8fa0 	.word	0x1fff8fa0
    4458:	1fff8f68 	.word	0x1fff8f68
    445c:	1fff8f60 	.word	0x1fff8f60
    4460:	1fff9174 	.word	0x1fff9174
    4464:	1fff8fa8 	.word	0x1fff8fa8
    4468:	1fff8f9c 	.word	0x1fff8f9c
    446c:	1fff8f8c 	.word	0x1fff8f8c
    4470:	1fff9470 	.word	0x1fff9470
    4474:	1fff936b 	.word	0x1fff936b
    4478:	1fff8e5b 	.word	0x1fff8e5b
    447c:	1fff8c64 	.word	0x1fff8c64
    4480:	1fff9170 	.word	0x1fff9170
    4484:	1fff8fa1 	.word	0x1fff8fa1
    4488:	1fff916c 	.word	0x1fff916c
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    448c:	4628      	mov	r0, r5
    448e:	f001 fb97 	bl	5bc0 <__cxa_guard_acquire>
    4492:	4e2d      	ldr	r6, [pc, #180]	; (4548 <loop+0x3b0>)
    4494:	2800      	cmp	r0, #0
    4496:	f43f ae8e 	beq.w	41b6 <loop+0x1e>
    449a:	6833      	ldr	r3, [r6, #0]
    449c:	9300      	str	r3, [sp, #0]
    449e:	4a2b      	ldr	r2, [pc, #172]	; (454c <loop+0x3b4>)
	return ret;
    44a0:	9b00      	ldr	r3, [sp, #0]
    44a2:	4c2b      	ldr	r4, [pc, #172]	; (4550 <loop+0x3b8>)
    44a4:	fba2 2303 	umull	r2, r3, r2, r3
    44a8:	099b      	lsrs	r3, r3, #6
    44aa:	2214      	movs	r2, #20
    44ac:	4628      	mov	r0, r5
    44ae:	8023      	strh	r3, [r4, #0]
    44b0:	8062      	strh	r2, [r4, #2]
    44b2:	f001 fb8b 	bl	5bcc <__cxa_guard_release>
    44b6:	e67f      	b.n	41b8 <loop+0x20>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    44b8:	4826      	ldr	r0, [pc, #152]	; (4554 <loop+0x3bc>)
    44ba:	f7fd f8c1 	bl	1640 <LEDDebug(LEDStruct&)>
    44be:	e71d      	b.n	42fc <loop+0x164>
    44c0:	4650      	mov	r0, sl
    44c2:	f7fd fb17 	bl	1af4 <change_palette(LEDStruct&) [clone .part.9]>
    44c6:	e7a5      	b.n	4414 <loop+0x27c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44c8:	6833      	ldr	r3, [r6, #0]
    44ca:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    44cc:	4c22      	ldr	r4, [pc, #136]	; (4558 <loop+0x3c0>)
	return ret;
    44ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    44d0:	f89b 3000 	ldrb.w	r3, [fp]
    44d4:	6022      	str	r2, [r4, #0]
    44d6:	4640      	mov	r0, r8
    44d8:	6063      	str	r3, [r4, #4]
    44da:	f001 fb77 	bl	5bcc <__cxa_guard_release>
    44de:	e71b      	b.n	4318 <loop+0x180>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44e0:	6833      	ldr	r3, [r6, #0]
    44e2:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    44e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    44e6:	4a19      	ldr	r2, [pc, #100]	; (454c <loop+0x3b4>)
    44e8:	4c1c      	ldr	r4, [pc, #112]	; (455c <loop+0x3c4>)
    44ea:	fba2 2303 	umull	r2, r3, r2, r3
    44ee:	099b      	lsrs	r3, r3, #6
    44f0:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    44f2:	4628      	mov	r0, r5
    44f4:	8023      	strh	r3, [r4, #0]
    44f6:	8062      	strh	r2, [r4, #2]
    44f8:	f001 fb68 	bl	5bcc <__cxa_guard_release>
    44fc:	e769      	b.n	43d2 <loop+0x23a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44fe:	6833      	ldr	r3, [r6, #0]
    4500:	930c      	str	r3, [sp, #48]	; 0x30
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4502:	4c17      	ldr	r4, [pc, #92]	; (4560 <loop+0x3c8>)
	return ret;
    4504:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4506:	782b      	ldrb	r3, [r5, #0]
    4508:	6022      	str	r2, [r4, #0]
    450a:	4640      	mov	r0, r8
    450c:	6063      	str	r3, [r4, #4]
    450e:	f001 fb5d 	bl	5bcc <__cxa_guard_release>
    4512:	e720      	b.n	4356 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4514:	6833      	ldr	r3, [r6, #0]
    4516:	9303      	str	r3, [sp, #12]
	return ret;
    4518:	9b03      	ldr	r3, [sp, #12]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    451a:	4a0c      	ldr	r2, [pc, #48]	; (454c <loop+0x3b4>)
    451c:	4c11      	ldr	r4, [pc, #68]	; (4564 <loop+0x3cc>)
    451e:	fba2 2303 	umull	r2, r3, r2, r3
    4522:	099b      	lsrs	r3, r3, #6
    4524:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    4526:	4628      	mov	r0, r5
    4528:	8023      	strh	r3, [r4, #0]
    452a:	8062      	strh	r2, [r4, #2]
    452c:	f001 fb4e 	bl	5bcc <__cxa_guard_release>
    4530:	e779      	b.n	4426 <loop+0x28e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4532:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4534:	4c0c      	ldr	r4, [pc, #48]	; (4568 <loop+0x3d0>)
    4536:	9306      	str	r3, [sp, #24]
	return ret;
    4538:	9b06      	ldr	r3, [sp, #24]
    453a:	6023      	str	r3, [r4, #0]
    453c:	2332      	movs	r3, #50	; 0x32
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    453e:	4628      	mov	r0, r5
    4540:	6063      	str	r3, [r4, #4]
    4542:	f001 fb43 	bl	5bcc <__cxa_guard_release>
    4546:	e70f      	b.n	4368 <loop+0x1d0>
    4548:	1fff94e8 	.word	0x1fff94e8
    454c:	10624dd3 	.word	0x10624dd3
    4550:	1fff8f80 	.word	0x1fff8f80
    4554:	1fff8c64 	.word	0x1fff8c64
    4558:	1fff8f68 	.word	0x1fff8f68
    455c:	1fff8f8c 	.word	0x1fff8f8c
    4560:	1fff8f60 	.word	0x1fff8f60
    4564:	1fff8c60 	.word	0x1fff8c60
    4568:	1fff8f84 	.word	0x1fff8f84

0000456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    456c:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    456e:	0604      	lsls	r4, r0, #24
    4570:	f100 8119 	bmi.w	47a6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4574:	4b48      	ldr	r3, [pc, #288]	; (4698 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4576:	4949      	ldr	r1, [pc, #292]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4578:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    457a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    457c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    457e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4580:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4582:	bf00      	nop
    4584:	bf00      	nop
    4586:	bf00      	nop
    4588:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    458a:	601a      	str	r2, [r3, #0]
    458c:	bf00      	nop
    458e:	bf00      	nop
    4590:	bf00      	nop
    4592:	bf00      	nop
    4594:	0641      	lsls	r1, r0, #25
    4596:	f140 8083 	bpl.w	46a0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    459a:	4a40      	ldr	r2, [pc, #256]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    459c:	2102      	movs	r1, #2
    459e:	2304      	movs	r3, #4
    45a0:	6011      	str	r1, [r2, #0]
    45a2:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    45a4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    45a6:	bf00      	nop
    45a8:	bf00      	nop
    45aa:	bf00      	nop
    45ac:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    45ae:	6053      	str	r3, [r2, #4]
    45b0:	bf00      	nop
    45b2:	bf00      	nop
    45b4:	bf00      	nop
    45b6:	bf00      	nop
    45b8:	0682      	lsls	r2, r0, #26
    45ba:	f140 8084 	bpl.w	46c6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    45be:	4a37      	ldr	r2, [pc, #220]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    45c0:	2102      	movs	r1, #2
    45c2:	2304      	movs	r3, #4
    45c4:	6011      	str	r1, [r2, #0]
    45c6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    45c8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    45ca:	bf00      	nop
    45cc:	bf00      	nop
    45ce:	bf00      	nop
    45d0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    45d2:	6053      	str	r3, [r2, #4]
    45d4:	bf00      	nop
    45d6:	bf00      	nop
    45d8:	bf00      	nop
    45da:	bf00      	nop
    45dc:	06c3      	lsls	r3, r0, #27
    45de:	f140 8085 	bpl.w	46ec <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    45e2:	4a2e      	ldr	r2, [pc, #184]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    45e4:	2102      	movs	r1, #2
    45e6:	2304      	movs	r3, #4
    45e8:	6011      	str	r1, [r2, #0]
    45ea:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    45ec:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    45ee:	bf00      	nop
    45f0:	bf00      	nop
    45f2:	bf00      	nop
    45f4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    45f6:	6053      	str	r3, [r2, #4]
    45f8:	bf00      	nop
    45fa:	bf00      	nop
    45fc:	bf00      	nop
    45fe:	bf00      	nop
    4600:	0704      	lsls	r4, r0, #28
    4602:	f140 8086 	bpl.w	4712 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4606:	4a25      	ldr	r2, [pc, #148]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    4608:	2102      	movs	r1, #2
    460a:	2304      	movs	r3, #4
    460c:	6011      	str	r1, [r2, #0]
    460e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4610:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4612:	bf00      	nop
    4614:	bf00      	nop
    4616:	bf00      	nop
    4618:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    461a:	6053      	str	r3, [r2, #4]
    461c:	bf00      	nop
    461e:	bf00      	nop
    4620:	bf00      	nop
    4622:	bf00      	nop
    4624:	0741      	lsls	r1, r0, #29
    4626:	f140 8087 	bpl.w	4738 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    462a:	4a1c      	ldr	r2, [pc, #112]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    462c:	2102      	movs	r1, #2
    462e:	2304      	movs	r3, #4
    4630:	6011      	str	r1, [r2, #0]
    4632:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4634:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4636:	bf00      	nop
    4638:	bf00      	nop
    463a:	bf00      	nop
    463c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    463e:	6053      	str	r3, [r2, #4]
    4640:	bf00      	nop
    4642:	bf00      	nop
    4644:	bf00      	nop
    4646:	bf00      	nop
    4648:	0782      	lsls	r2, r0, #30
    464a:	f140 8088 	bpl.w	475e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    464e:	4a13      	ldr	r2, [pc, #76]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    4650:	2102      	movs	r1, #2
    4652:	2304      	movs	r3, #4
    4654:	6011      	str	r1, [r2, #0]
    4656:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4658:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    465a:	bf00      	nop
    465c:	bf00      	nop
    465e:	bf00      	nop
    4660:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4662:	6053      	str	r3, [r2, #4]
    4664:	bf00      	nop
    4666:	bf00      	nop
    4668:	bf00      	nop
    466a:	bf00      	nop
    466c:	07c3      	lsls	r3, r0, #31
    466e:	f100 8089 	bmi.w	4784 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    4672:	4b09      	ldr	r3, [pc, #36]	; (4698 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4674:	4909      	ldr	r1, [pc, #36]	; (469c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4676:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4678:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    467a:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    467c:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    467e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4680:	bf00      	nop
    4682:	bf00      	nop
    4684:	bf00      	nop
    4686:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4688:	601a      	str	r2, [r3, #0]
    468a:	bf00      	nop
    468c:	bf00      	nop
    468e:	bf00      	nop
    4690:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    4692:	bc10      	pop	{r4}
    4694:	4770      	bx	lr
    4696:	bf00      	nop
    4698:	400ff0c8 	.word	0x400ff0c8
    469c:	400ff0c4 	.word	0x400ff0c4
    46a0:	4b49      	ldr	r3, [pc, #292]	; (47c8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46a2:	494a      	ldr	r1, [pc, #296]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46a4:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46a6:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46a8:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46aa:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    46ac:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    46ae:	bf00      	nop
    46b0:	bf00      	nop
    46b2:	bf00      	nop
    46b4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46b6:	601a      	str	r2, [r3, #0]
    46b8:	bf00      	nop
    46ba:	bf00      	nop
    46bc:	bf00      	nop
    46be:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    46c0:	0682      	lsls	r2, r0, #26
    46c2:	f53f af7c 	bmi.w	45be <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    46c6:	4b40      	ldr	r3, [pc, #256]	; (47c8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46c8:	4940      	ldr	r1, [pc, #256]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46ca:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46cc:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46ce:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46d0:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    46d2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    46d4:	bf00      	nop
    46d6:	bf00      	nop
    46d8:	bf00      	nop
    46da:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46dc:	601a      	str	r2, [r3, #0]
    46de:	bf00      	nop
    46e0:	bf00      	nop
    46e2:	bf00      	nop
    46e4:	bf00      	nop
    46e6:	06c3      	lsls	r3, r0, #27
    46e8:	f53f af7b 	bmi.w	45e2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    46ec:	4b36      	ldr	r3, [pc, #216]	; (47c8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46ee:	4937      	ldr	r1, [pc, #220]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46f0:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46f2:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    46f4:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    46f6:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    46f8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    46fa:	bf00      	nop
    46fc:	bf00      	nop
    46fe:	bf00      	nop
    4700:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4702:	601a      	str	r2, [r3, #0]
    4704:	bf00      	nop
    4706:	bf00      	nop
    4708:	bf00      	nop
    470a:	bf00      	nop
    470c:	0704      	lsls	r4, r0, #28
    470e:	f53f af7a 	bmi.w	4606 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    4712:	4b2d      	ldr	r3, [pc, #180]	; (47c8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4714:	492d      	ldr	r1, [pc, #180]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4716:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4718:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    471a:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    471c:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    471e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4720:	bf00      	nop
    4722:	bf00      	nop
    4724:	bf00      	nop
    4726:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4728:	601a      	str	r2, [r3, #0]
    472a:	bf00      	nop
    472c:	bf00      	nop
    472e:	bf00      	nop
    4730:	bf00      	nop
    4732:	0741      	lsls	r1, r0, #29
    4734:	f53f af79 	bmi.w	462a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    4738:	4b23      	ldr	r3, [pc, #140]	; (47c8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    473a:	4924      	ldr	r1, [pc, #144]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    473c:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    473e:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4740:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4742:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4744:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4746:	bf00      	nop
    4748:	bf00      	nop
    474a:	bf00      	nop
    474c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    474e:	601a      	str	r2, [r3, #0]
    4750:	bf00      	nop
    4752:	bf00      	nop
    4754:	bf00      	nop
    4756:	bf00      	nop
    4758:	0782      	lsls	r2, r0, #30
    475a:	f53f af78 	bmi.w	464e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    475e:	4b1a      	ldr	r3, [pc, #104]	; (47c8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4760:	491a      	ldr	r1, [pc, #104]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4762:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4764:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4766:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4768:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    476a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    476c:	bf00      	nop
    476e:	bf00      	nop
    4770:	bf00      	nop
    4772:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4774:	601a      	str	r2, [r3, #0]
    4776:	bf00      	nop
    4778:	bf00      	nop
    477a:	bf00      	nop
    477c:	bf00      	nop
    477e:	07c3      	lsls	r3, r0, #31
    4780:	f57f af77 	bpl.w	4672 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4784:	4a11      	ldr	r2, [pc, #68]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    4786:	2102      	movs	r1, #2
    4788:	2304      	movs	r3, #4
    478a:	6011      	str	r1, [r2, #0]
    478c:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    478e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4790:	bf00      	nop
    4792:	bf00      	nop
    4794:	bf00      	nop
    4796:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4798:	6053      	str	r3, [r2, #4]
    479a:	bf00      	nop
    479c:	bf00      	nop
    479e:	bf00      	nop
    47a0:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    47a2:	bc10      	pop	{r4}
    47a4:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    47a6:	4a09      	ldr	r2, [pc, #36]	; (47cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    47a8:	2102      	movs	r1, #2
    47aa:	2304      	movs	r3, #4
    47ac:	6011      	str	r1, [r2, #0]
    47ae:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    47b0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    47b2:	bf00      	nop
    47b4:	bf00      	nop
    47b6:	bf00      	nop
    47b8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    47ba:	6053      	str	r3, [r2, #4]
    47bc:	bf00      	nop
    47be:	bf00      	nop
    47c0:	bf00      	nop
    47c2:	bf00      	nop
    47c4:	e6e6      	b.n	4594 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    47c6:	bf00      	nop
    47c8:	400ff0c8 	.word	0x400ff0c8
    47cc:	400ff0c4 	.word	0x400ff0c4

000047d0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    47d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47d4:	b085      	sub	sp, #20
    47d6:	460e      	mov	r6, r1
    47d8:	9003      	str	r0, [sp, #12]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    47da:	6980      	ldr	r0, [r0, #24]
    47dc:	b150      	cbz	r0, 47f4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    47de:	6803      	ldr	r3, [r0, #0]
    47e0:	4a71      	ldr	r2, [pc, #452]	; (49a8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d8>)
    47e2:	681b      	ldr	r3, [r3, #0]
    47e4:	4293      	cmp	r3, r2
    47e6:	f040 827e 	bne.w	4ce6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x516>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    47ea:	6842      	ldr	r2, [r0, #4]
    47ec:	7b01      	ldrb	r1, [r0, #12]
    47ee:	7813      	ldrb	r3, [r2, #0]
    47f0:	430b      	orrs	r3, r1
    47f2:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    47f4:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    47f6:	7d34      	ldrb	r4, [r6, #20]
    47f8:	f896 8013 	ldrb.w	r8, [r6, #19]
    47fc:	f896 9012 	ldrb.w	r9, [r6, #18]
    4800:	f7ff feb4 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    4804:	2000      	movs	r0, #0
    4806:	f7ff feb1 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    480a:	2000      	movs	r0, #0
    480c:	f7ff feae 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    4810:	2000      	movs	r0, #0
    4812:	f7ff feab 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    4816:	68b3      	ldr	r3, [r6, #8]
    4818:	2b00      	cmp	r3, #0
    481a:	f340 80ba 	ble.w	4992 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c2>
    481e:	f108 0201 	add.w	r2, r8, #1
    4822:	9202      	str	r2, [sp, #8]
    4824:	6833      	ldr	r3, [r6, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4826:	4d61      	ldr	r5, [pc, #388]	; (49ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1dc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4828:	f8df a184 	ldr.w	sl, [pc, #388]	; 49b0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e0>
    482c:	1c62      	adds	r2, r4, #1
    482e:	f109 0901 	add.w	r9, r9, #1
    4832:	9201      	str	r2, [sp, #4]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4834:	2702      	movs	r7, #2
    4836:	2404      	movs	r4, #4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    4838:	69b1      	ldr	r1, [r6, #24]
    483a:	185a      	adds	r2, r3, r1
    483c:	f813 b001 	ldrb.w	fp, [r3, r1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    4840:	7890      	ldrb	r0, [r2, #2]
    4842:	7853      	ldrb	r3, [r2, #1]
    4844:	9a01      	ldr	r2, [sp, #4]
    4846:	602f      	str	r7, [r5, #0]
    4848:	fb02 f000 	mul.w	r0, r2, r0
    484c:	9a02      	ldr	r2, [sp, #8]
    484e:	602c      	str	r4, [r5, #0]
    4850:	fb09 fb0b 	mul.w	fp, r9, fp
    4854:	fb02 f303 	mul.w	r3, r2, r3
    4858:	1200      	asrs	r0, r0, #8
    485a:	ea4f 2b2b 	mov.w	fp, fp, asr #8
    485e:	f060 00ff 	orn	r0, r0, #255	; 0xff
    4862:	ea4f 2823 	mov.w	r8, r3, asr #8
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4866:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4868:	bf00      	nop
    486a:	bf00      	nop
    486c:	bf00      	nop
    486e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4870:	f8ca 4000 	str.w	r4, [sl]
    4874:	bf00      	nop
    4876:	bf00      	nop
    4878:	bf00      	nop
    487a:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    487c:	602f      	str	r7, [r5, #0]
    487e:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4880:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4882:	bf00      	nop
    4884:	bf00      	nop
    4886:	bf00      	nop
    4888:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    488a:	f8ca 4000 	str.w	r4, [sl]
    488e:	bf00      	nop
    4890:	bf00      	nop
    4892:	bf00      	nop
    4894:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4896:	602f      	str	r7, [r5, #0]
    4898:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    489a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    489c:	bf00      	nop
    489e:	bf00      	nop
    48a0:	bf00      	nop
    48a2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    48a4:	f8ca 4000 	str.w	r4, [sl]
    48a8:	bf00      	nop
    48aa:	bf00      	nop
    48ac:	bf00      	nop
    48ae:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    48b0:	602f      	str	r7, [r5, #0]
    48b2:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    48b4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    48b6:	bf00      	nop
    48b8:	bf00      	nop
    48ba:	bf00      	nop
    48bc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    48be:	f8ca 4000 	str.w	r4, [sl]
    48c2:	bf00      	nop
    48c4:	bf00      	nop
    48c6:	bf00      	nop
    48c8:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    48ca:	602f      	str	r7, [r5, #0]
    48cc:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    48ce:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    48d0:	bf00      	nop
    48d2:	bf00      	nop
    48d4:	bf00      	nop
    48d6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    48d8:	f8ca 4000 	str.w	r4, [sl]
    48dc:	bf00      	nop
    48de:	bf00      	nop
    48e0:	bf00      	nop
    48e2:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    48e4:	602f      	str	r7, [r5, #0]
    48e6:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    48e8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    48ea:	bf00      	nop
    48ec:	bf00      	nop
    48ee:	bf00      	nop
    48f0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    48f2:	f8ca 4000 	str.w	r4, [sl]
    48f6:	bf00      	nop
    48f8:	bf00      	nop
    48fa:	bf00      	nop
    48fc:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    48fe:	602f      	str	r7, [r5, #0]
    4900:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4902:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4904:	bf00      	nop
    4906:	bf00      	nop
    4908:	bf00      	nop
    490a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    490c:	f8ca 4000 	str.w	r4, [sl]
    4910:	bf00      	nop
    4912:	bf00      	nop
    4914:	bf00      	nop
    4916:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4918:	602f      	str	r7, [r5, #0]
    491a:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    491c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    491e:	bf00      	nop
    4920:	bf00      	nop
    4922:	bf00      	nop
    4924:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4926:	f8ca 4000 	str.w	r4, [sl]
    492a:	bf00      	nop
    492c:	bf00      	nop
    492e:	bf00      	nop
    4930:	bf00      	nop
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    4932:	b2c0      	uxtb	r0, r0
    4934:	f7ff fe1a 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    4938:	ea4f 2308 	mov.w	r3, r8, lsl #8
    493c:	b29b      	uxth	r3, r3
		w |= b2;
    493e:	ea43 0b0b 	orr.w	fp, r3, fp
    4942:	fa1f fb8b 	uxth.w	fp, fp
    4946:	ea4f 201b 	mov.w	r0, fp, lsr #8
    494a:	f7ff fe0f 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    494e:	fa5f f08b 	uxtb.w	r0, fp
    4952:	f7ff fe0b 	bl	456c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    4956:	7bb2      	ldrb	r2, [r6, #14]
    4958:	f896 c011 	ldrb.w	ip, [r6, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    495c:	7c31      	ldrb	r1, [r6, #16]
    495e:	7b70      	ldrb	r0, [r6, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    4960:	f896 e00c 	ldrb.w	lr, [r6, #12]
    4964:	f896 b00f 	ldrb.w	fp, [r6, #15]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    4968:	f996 3015 	ldrsb.w	r3, [r6, #21]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    496c:	ebc2 0c0c 	rsb	ip, r2, ip

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    4970:	68b2      	ldr	r2, [r6, #8]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    4972:	f886 c00e 	strb.w	ip, [r6, #14]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    4976:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    4978:	6831      	ldr	r1, [r6, #0]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    497a:	7370      	strb	r0, [r6, #13]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    497c:	3a01      	subs	r2, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    497e:	ebce 0e0b 	rsb	lr, lr, fp

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    4982:	440b      	add	r3, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    4984:	2a00      	cmp	r2, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    4986:	f886 e00c 	strb.w	lr, [r6, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    498a:	6033      	str	r3, [r6, #0]
    498c:	60b2      	str	r2, [r6, #8]
    498e:	f73f af53 	bgt.w	4838 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x68>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    4992:	6874      	ldr	r4, [r6, #4]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4994:	4905      	ldr	r1, [pc, #20]	; (49ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1dc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4996:	4a06      	ldr	r2, [pc, #24]	; (49b0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e0>)
    4998:	2c00      	cmp	r4, #0
    499a:	bfb8      	it	lt
    499c:	341f      	addlt	r4, #31
    499e:	1164      	asrs	r4, r4, #5
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    49a0:	2002      	movs	r0, #2
    49a2:	2304      	movs	r3, #4
    49a4:	e006      	b.n	49b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e4>
    49a6:	bf00      	nop
    49a8:	00000475 	.word	0x00000475
    49ac:	400ff0c4 	.word	0x400ff0c4
    49b0:	400ff0c8 	.word	0x400ff0c8
    49b4:	6008      	str	r0, [r1, #0]
    49b6:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    49b8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    49ba:	bf00      	nop
    49bc:	bf00      	nop
    49be:	bf00      	nop
    49c0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    49c2:	6013      	str	r3, [r2, #0]
    49c4:	bf00      	nop
    49c6:	bf00      	nop
    49c8:	bf00      	nop
    49ca:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    49cc:	6008      	str	r0, [r1, #0]
    49ce:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    49d0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    49d2:	bf00      	nop
    49d4:	bf00      	nop
    49d6:	bf00      	nop
    49d8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    49da:	6013      	str	r3, [r2, #0]
    49dc:	bf00      	nop
    49de:	bf00      	nop
    49e0:	bf00      	nop
    49e2:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    49e4:	6008      	str	r0, [r1, #0]
    49e6:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    49e8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    49ea:	bf00      	nop
    49ec:	bf00      	nop
    49ee:	bf00      	nop
    49f0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    49f2:	6013      	str	r3, [r2, #0]
    49f4:	bf00      	nop
    49f6:	bf00      	nop
    49f8:	bf00      	nop
    49fa:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    49fc:	6008      	str	r0, [r1, #0]
    49fe:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a00:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a02:	bf00      	nop
    4a04:	bf00      	nop
    4a06:	bf00      	nop
    4a08:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a0a:	6013      	str	r3, [r2, #0]
    4a0c:	bf00      	nop
    4a0e:	bf00      	nop
    4a10:	bf00      	nop
    4a12:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4a14:	6008      	str	r0, [r1, #0]
    4a16:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a18:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a1a:	bf00      	nop
    4a1c:	bf00      	nop
    4a1e:	bf00      	nop
    4a20:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a22:	6013      	str	r3, [r2, #0]
    4a24:	bf00      	nop
    4a26:	bf00      	nop
    4a28:	bf00      	nop
    4a2a:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4a2c:	6008      	str	r0, [r1, #0]
    4a2e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a30:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a32:	bf00      	nop
    4a34:	bf00      	nop
    4a36:	bf00      	nop
    4a38:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a3a:	6013      	str	r3, [r2, #0]
    4a3c:	bf00      	nop
    4a3e:	bf00      	nop
    4a40:	bf00      	nop
    4a42:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4a44:	6008      	str	r0, [r1, #0]
    4a46:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a48:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a4a:	bf00      	nop
    4a4c:	bf00      	nop
    4a4e:	bf00      	nop
    4a50:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a52:	6013      	str	r3, [r2, #0]
    4a54:	bf00      	nop
    4a56:	bf00      	nop
    4a58:	bf00      	nop
    4a5a:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4a5c:	6008      	str	r0, [r1, #0]
    4a5e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a60:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a62:	bf00      	nop
    4a64:	bf00      	nop
    4a66:	bf00      	nop
    4a68:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a6a:	6013      	str	r3, [r2, #0]
    4a6c:	bf00      	nop
    4a6e:	bf00      	nop
    4a70:	bf00      	nop
    4a72:	bf00      	nop
    4a74:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4a76:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a78:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a7a:	bf00      	nop
    4a7c:	bf00      	nop
    4a7e:	bf00      	nop
    4a80:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a82:	6013      	str	r3, [r2, #0]
    4a84:	bf00      	nop
    4a86:	bf00      	nop
    4a88:	bf00      	nop
    4a8a:	bf00      	nop
    4a8c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4a8e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4a90:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4a92:	bf00      	nop
    4a94:	bf00      	nop
    4a96:	bf00      	nop
    4a98:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4a9a:	6013      	str	r3, [r2, #0]
    4a9c:	bf00      	nop
    4a9e:	bf00      	nop
    4aa0:	bf00      	nop
    4aa2:	bf00      	nop
    4aa4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4aa6:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4aa8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4aaa:	bf00      	nop
    4aac:	bf00      	nop
    4aae:	bf00      	nop
    4ab0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4ab2:	6013      	str	r3, [r2, #0]
    4ab4:	bf00      	nop
    4ab6:	bf00      	nop
    4ab8:	bf00      	nop
    4aba:	bf00      	nop
    4abc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4abe:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4ac0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4ac2:	bf00      	nop
    4ac4:	bf00      	nop
    4ac6:	bf00      	nop
    4ac8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4aca:	6013      	str	r3, [r2, #0]
    4acc:	bf00      	nop
    4ace:	bf00      	nop
    4ad0:	bf00      	nop
    4ad2:	bf00      	nop
    4ad4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4ad6:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4ad8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4ada:	bf00      	nop
    4adc:	bf00      	nop
    4ade:	bf00      	nop
    4ae0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4ae2:	6013      	str	r3, [r2, #0]
    4ae4:	bf00      	nop
    4ae6:	bf00      	nop
    4ae8:	bf00      	nop
    4aea:	bf00      	nop
    4aec:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4aee:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4af0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4af2:	bf00      	nop
    4af4:	bf00      	nop
    4af6:	bf00      	nop
    4af8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4afa:	6013      	str	r3, [r2, #0]
    4afc:	bf00      	nop
    4afe:	bf00      	nop
    4b00:	bf00      	nop
    4b02:	bf00      	nop
    4b04:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b06:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b08:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b0a:	bf00      	nop
    4b0c:	bf00      	nop
    4b0e:	bf00      	nop
    4b10:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4b12:	6013      	str	r3, [r2, #0]
    4b14:	bf00      	nop
    4b16:	bf00      	nop
    4b18:	bf00      	nop
    4b1a:	bf00      	nop
    4b1c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b1e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b20:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b22:	bf00      	nop
    4b24:	bf00      	nop
    4b26:	bf00      	nop
    4b28:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4b2a:	6013      	str	r3, [r2, #0]
    4b2c:	bf00      	nop
    4b2e:	bf00      	nop
    4b30:	bf00      	nop
    4b32:	bf00      	nop
    4b34:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b36:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b38:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b3a:	bf00      	nop
    4b3c:	bf00      	nop
    4b3e:	bf00      	nop
    4b40:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4b42:	6013      	str	r3, [r2, #0]
    4b44:	bf00      	nop
    4b46:	bf00      	nop
    4b48:	bf00      	nop
    4b4a:	bf00      	nop
    4b4c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b4e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b50:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b52:	bf00      	nop
    4b54:	bf00      	nop
    4b56:	bf00      	nop
    4b58:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4b5a:	6013      	str	r3, [r2, #0]
    4b5c:	bf00      	nop
    4b5e:	bf00      	nop
    4b60:	bf00      	nop
    4b62:	bf00      	nop
    4b64:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b66:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b68:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b6a:	bf00      	nop
    4b6c:	bf00      	nop
    4b6e:	bf00      	nop
    4b70:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4b72:	6013      	str	r3, [r2, #0]
    4b74:	bf00      	nop
    4b76:	bf00      	nop
    4b78:	bf00      	nop
    4b7a:	bf00      	nop
    4b7c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b7e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b80:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b82:	bf00      	nop
    4b84:	bf00      	nop
    4b86:	bf00      	nop
    4b88:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4b8a:	6013      	str	r3, [r2, #0]
    4b8c:	bf00      	nop
    4b8e:	bf00      	nop
    4b90:	bf00      	nop
    4b92:	bf00      	nop
    4b94:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4b96:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4b98:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4b9a:	bf00      	nop
    4b9c:	bf00      	nop
    4b9e:	bf00      	nop
    4ba0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4ba2:	6013      	str	r3, [r2, #0]
    4ba4:	bf00      	nop
    4ba6:	bf00      	nop
    4ba8:	bf00      	nop
    4baa:	bf00      	nop
    4bac:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4bae:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4bb0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4bb2:	bf00      	nop
    4bb4:	bf00      	nop
    4bb6:	bf00      	nop
    4bb8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4bba:	6013      	str	r3, [r2, #0]
    4bbc:	bf00      	nop
    4bbe:	bf00      	nop
    4bc0:	bf00      	nop
    4bc2:	bf00      	nop
    4bc4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4bc6:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4bc8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4bca:	bf00      	nop
    4bcc:	bf00      	nop
    4bce:	bf00      	nop
    4bd0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4bd2:	6013      	str	r3, [r2, #0]
    4bd4:	bf00      	nop
    4bd6:	bf00      	nop
    4bd8:	bf00      	nop
    4bda:	bf00      	nop
    4bdc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4bde:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4be0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4be2:	bf00      	nop
    4be4:	bf00      	nop
    4be6:	bf00      	nop
    4be8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4bea:	6013      	str	r3, [r2, #0]
    4bec:	bf00      	nop
    4bee:	bf00      	nop
    4bf0:	bf00      	nop
    4bf2:	bf00      	nop
    4bf4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4bf6:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4bf8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4bfa:	bf00      	nop
    4bfc:	bf00      	nop
    4bfe:	bf00      	nop
    4c00:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c02:	6013      	str	r3, [r2, #0]
    4c04:	bf00      	nop
    4c06:	bf00      	nop
    4c08:	bf00      	nop
    4c0a:	bf00      	nop
    4c0c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c0e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4c10:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4c12:	bf00      	nop
    4c14:	bf00      	nop
    4c16:	bf00      	nop
    4c18:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c1a:	6013      	str	r3, [r2, #0]
    4c1c:	bf00      	nop
    4c1e:	bf00      	nop
    4c20:	bf00      	nop
    4c22:	bf00      	nop
    4c24:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c26:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4c28:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4c2a:	bf00      	nop
    4c2c:	bf00      	nop
    4c2e:	bf00      	nop
    4c30:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c32:	6013      	str	r3, [r2, #0]
    4c34:	bf00      	nop
    4c36:	bf00      	nop
    4c38:	bf00      	nop
    4c3a:	bf00      	nop
    4c3c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c3e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4c40:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4c42:	bf00      	nop
    4c44:	bf00      	nop
    4c46:	bf00      	nop
    4c48:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c4a:	6013      	str	r3, [r2, #0]
    4c4c:	bf00      	nop
    4c4e:	bf00      	nop
    4c50:	bf00      	nop
    4c52:	bf00      	nop
    4c54:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c56:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4c58:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4c5a:	bf00      	nop
    4c5c:	bf00      	nop
    4c5e:	bf00      	nop
    4c60:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c62:	6013      	str	r3, [r2, #0]
    4c64:	bf00      	nop
    4c66:	bf00      	nop
    4c68:	bf00      	nop
    4c6a:	bf00      	nop
    4c6c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c6e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4c70:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4c72:	bf00      	nop
    4c74:	bf00      	nop
    4c76:	bf00      	nop
    4c78:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c7a:	6013      	str	r3, [r2, #0]
    4c7c:	bf00      	nop
    4c7e:	bf00      	nop
    4c80:	bf00      	nop
    4c82:	bf00      	nop
    4c84:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c86:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4c88:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4c8a:	bf00      	nop
    4c8c:	bf00      	nop
    4c8e:	bf00      	nop
    4c90:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4c92:	6013      	str	r3, [r2, #0]
    4c94:	bf00      	nop
    4c96:	bf00      	nop
    4c98:	bf00      	nop
    4c9a:	bf00      	nop
    4c9c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    4c9e:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    4ca0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    4ca2:	bf00      	nop
    4ca4:	bf00      	nop
    4ca6:	bf00      	nop
    4ca8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    4caa:	6013      	str	r3, [r2, #0]
    4cac:	bf00      	nop
    4cae:	bf00      	nop
    4cb0:	bf00      	nop
    4cb2:	bf00      	nop
    4cb4:	f114 34ff 	adds.w	r4, r4, #4294967295
    4cb8:	f4bf ae7c 	bcs.w	49b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e4>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    4cbc:	9b03      	ldr	r3, [sp, #12]
    4cbe:	6998      	ldr	r0, [r3, #24]
    4cc0:	b150      	cbz	r0, 4cd8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x508>
    4cc2:	6803      	ldr	r3, [r0, #0]
    4cc4:	4a09      	ldr	r2, [pc, #36]	; (4cec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x51c>)
    4cc6:	685b      	ldr	r3, [r3, #4]
    4cc8:	4293      	cmp	r3, r2
    4cca:	d108      	bne.n	4cde <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x50e>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    4ccc:	6842      	ldr	r2, [r0, #4]
    4cce:	7b01      	ldrb	r1, [r0, #12]
    4cd0:	7813      	ldrb	r3, [r2, #0]
    4cd2:	ea23 0301 	bic.w	r3, r3, r1
    4cd6:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    4cd8:	b005      	add	sp, #20
    4cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cde:	b005      	add	sp, #20
    4ce0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ce4:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    4ce6:	4798      	blx	r3
    4ce8:	e584      	b.n	47f4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    4cea:	bf00      	nop
    4cec:	00000481 	.word	0x00000481

00004cf0 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    4cf0:	b430      	push	{r4, r5}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    4cf2:	4912      	ldr	r1, [pc, #72]	; (4d3c <_GLOBAL__sub_I_ib_jul01_gp+0x4c>)
    4cf4:	4a12      	ldr	r2, [pc, #72]	; (4d40 <_GLOBAL__sub_I_ib_jul01_gp+0x50>)
    4cf6:	25ff      	movs	r5, #255	; 0xff
    4cf8:	240f      	movs	r4, #15
    4cfa:	2301      	movs	r3, #1
    4cfc:	2000      	movs	r0, #0
    4cfe:	f881 51c2 	strb.w	r5, [r1, #450]	; 0x1c2
    4d02:	f882 51c2 	strb.w	r5, [r2, #450]	; 0x1c2
    4d06:	f881 41c3 	strb.w	r4, [r1, #451]	; 0x1c3
    4d0a:	f882 41c3 	strb.w	r4, [r2, #451]	; 0x1c3
    4d0e:	f881 31c4 	strb.w	r3, [r1, #452]	; 0x1c4
    4d12:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5
    4d16:	f881 3228 	strb.w	r3, [r1, #552]	; 0x228
    4d1a:	f881 3229 	strb.w	r3, [r1, #553]	; 0x229
    4d1e:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
    4d22:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
    4d26:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    4d2a:	f882 3229 	strb.w	r3, [r2, #553]	; 0x229
    4d2e:	f881 022d 	strb.w	r0, [r1, #557]	; 0x22d
    4d32:	f882 022d 	strb.w	r0, [r2, #557]	; 0x22d
    4d36:	bc30      	pop	{r4, r5}
    4d38:	4770      	bx	lr
    4d3a:	bf00      	nop
    4d3c:	1fff9174 	.word	0x1fff9174
    4d40:	1fff8c64 	.word	0x1fff8c64

00004d44 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    4d44:	2900      	cmp	r1, #0
    4d46:	dd0b      	ble.n	4d60 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    4d48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4d4c:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d4e:	7813      	ldrb	r3, [r2, #0]
    4d50:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    4d52:	7853      	ldrb	r3, [r2, #1]
    4d54:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    4d56:	7893      	ldrb	r3, [r2, #2]
    4d58:	7083      	strb	r3, [r0, #2]
    4d5a:	3003      	adds	r0, #3
    4d5c:	4288      	cmp	r0, r1
    4d5e:	d1f6      	bne.n	4d4e <fill_solid(CRGB*, int, CRGB const&)+0xa>
    4d60:	4770      	bx	lr
    4d62:	bf00      	nop

00004d64 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    4d68:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    4d6a:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    4d6c:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    4d6e:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    4d72:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    4d76:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    4d7a:	dd10      	ble.n	4d9e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    4d7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4d80:	461e      	mov	r6, r3
    4d82:	4604      	mov	r4, r0
    4d84:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4d86:	4621      	mov	r1, r4
    4d88:	a801      	add	r0, sp, #4
    4d8a:	f000 faf9 	bl	5380 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    4d8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4d92:	3403      	adds	r4, #3
    4d94:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    4d96:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    4d98:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    4d9c:	d1f3      	bne.n	4d86 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    4d9e:	b002      	add	sp, #8
    4da0:	bd70      	pop	{r4, r5, r6, pc}
    4da2:	bf00      	nop

00004da4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    4da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    4da8:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    4daa:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    4dac:	d352      	bcc.n	4e54 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    4dae:	f896 e000 	ldrb.w	lr, [r6]
    4db2:	7815      	ldrb	r5, [r2, #0]
    4db4:	7877      	ldrb	r7, [r6, #1]
    4db6:	f896 8002 	ldrb.w	r8, [r6, #2]
    4dba:	7854      	ldrb	r4, [r2, #1]
    4dbc:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    4dc0:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    4dc4:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    4dc8:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    4dcc:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    4dd0:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    4dd4:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    4dd8:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    4ddc:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    4dde:	b3b2      	cbz	r2, 4e4e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    4de0:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    4de4:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    4de8:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    4dec:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    4df0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    4df4:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4df8:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    4dfa:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    4dfe:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    4e02:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    4e06:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    4e0a:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    4e0e:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    4e12:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    4e16:	d818      	bhi.n	4e4a <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    4e18:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4e1c:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    4e1e:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4e20:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e22:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    4e26:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    4e2a:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    4e2e:	4475      	add	r5, lr
        g88 += gdelta87;
    4e30:	4454      	add	r4, sl
        b88 += bdelta87;
    4e32:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4e34:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e36:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    4e3a:	b2ad      	uxth	r5, r5
        g = rhs.g;
    4e3c:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    4e40:	b2a4      	uxth	r4, r4
        b = rhs.b;
    4e42:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    4e46:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4e48:	d2e6      	bcs.n	4e18 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    4e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e4e:	f04f 0b01 	mov.w	fp, #1
    4e52:	e7c7      	b.n	4de4 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    4e54:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e56:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e58:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4e5c:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4e5e:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4e60:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4e64:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e68:	7015      	strb	r5, [r2, #0]
    4e6a:	4619      	mov	r1, r3
    4e6c:	f886 e000 	strb.w	lr, [r6]
    4e70:	464b      	mov	r3, r9
        g = rhs.g;
    4e72:	7054      	strb	r4, [r2, #1]
    4e74:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    4e76:	f882 c002 	strb.w	ip, [r2, #2]
    4e7a:	f886 8002 	strb.w	r8, [r6, #2]
    4e7e:	e79f      	b.n	4dc0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00004e80 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    4e80:	b309      	cbz	r1, 4ec6 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    4e82:	b430      	push	{r4, r5}
    4e84:	1e4d      	subs	r5, r1, #1
    4e86:	b2ad      	uxth	r5, r5
    4e88:	43d2      	mvns	r2, r2
    4e8a:	3501      	adds	r5, #1
    4e8c:	b2d2      	uxtb	r2, r2
    4e8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4e92:	4405      	add	r5, r0
    4e94:	3201      	adds	r2, #1
    4e96:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e98:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    4e9c:	fb02 f303 	mul.w	r3, r2, r3
    4ea0:	121b      	asrs	r3, r3, #8
    4ea2:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4ea6:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4ea8:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4eaa:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4eae:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4eb2:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4eb4:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4eb6:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4eb8:	7083      	strb	r3, [r0, #2]
    4eba:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    4ebc:	4285      	cmp	r5, r0
    4ebe:	f104 0403 	add.w	r4, r4, #3
    4ec2:	d1e9      	bne.n	4e98 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    4ec4:	bc30      	pop	{r4, r5}
    4ec6:	4770      	bx	lr

00004ec8 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    4ec8:	f7ff bfda 	b.w	4e80 <fade_raw(CRGB*, unsigned short, unsigned char)>

00004ecc <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    4ecc:	b322      	cbz	r2, 4f18 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    4ece:	2aff      	cmp	r2, #255	; 0xff
    4ed0:	d023      	beq.n	4f1a <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    4ed2:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4ed4:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4ed6:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4ed8:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4eda:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    4edc:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4ede:	43d2      	mvns	r2, r2
    4ee0:	fb06 7605 	mla	r6, r6, r5, r7
    4ee4:	b2d2      	uxtb	r2, r2
    4ee6:	fb04 6402 	mla	r4, r4, r2, r6
    4eea:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4eee:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4ef0:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4ef2:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    4ef4:	191f      	adds	r7, r3, r4
    4ef6:	fb04 7405 	mla	r4, r4, r5, r7
    4efa:	fb03 4302 	mla	r3, r3, r2, r4
    4efe:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4f02:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4f04:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4f06:	18f1      	adds	r1, r6, r3
    4f08:	fb03 1505 	mla	r5, r3, r5, r1
    4f0c:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    4f10:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4f12:	f3c2 2207 	ubfx	r2, r2, #8, #8
    4f16:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    4f18:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f1a:	780b      	ldrb	r3, [r1, #0]
    4f1c:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    4f1e:	784b      	ldrb	r3, [r1, #1]
    4f20:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    4f22:	788b      	ldrb	r3, [r1, #2]
    4f24:	7083      	strb	r3, [r0, #2]
    4f26:	4770      	bx	lr

00004f28 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    4f28:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f2a:	780d      	ldrb	r5, [r1, #0]
    4f2c:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    4f2e:	784d      	ldrb	r5, [r1, #1]
    4f30:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    4f32:	7889      	ldrb	r1, [r1, #2]
    4f34:	7081      	strb	r1, [r0, #2]
    4f36:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    4f38:	4611      	mov	r1, r2
    4f3a:	461a      	mov	r2, r3
    4f3c:	f7ff ffc6 	bl	4ecc <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    4f40:	4620      	mov	r0, r4
    4f42:	bd38      	pop	{r3, r4, r5, pc}

00004f44 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    4f44:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    4f48:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    4f4c:	3100      	adds	r1, #0
    4f4e:	bf18      	it	ne
    4f50:	2101      	movne	r1, #1
    4f52:	eb01 2123 	add.w	r1, r1, r3, asr #8
    4f56:	b2c9      	uxtb	r1, r1
    4f58:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    4f5a:	060a      	lsls	r2, r1, #24
    4f5c:	b2db      	uxtb	r3, r3
    4f5e:	d40e      	bmi.n	4f7e <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    4f60:	f001 0140 	and.w	r1, r1, #64	; 0x40
    4f64:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4f68:	b919      	cbnz	r1, 4f72 <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    4f6a:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    4f6c:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    4f6e:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    4f70:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    4f72:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    4f74:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    4f76:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    4f78:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    4f7a:	7082      	strb	r2, [r0, #2]
    4f7c:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    4f7e:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    4f80:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    4f82:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    4f84:	7042      	strb	r2, [r0, #1]
    4f86:	4770      	bx	lr

00004f88 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    4f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    4f8c:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    4f8e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4f92:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    4f96:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    4f98:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4f9c:	d000      	beq.n	4fa0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    4f9e:	b9e6      	cbnz	r6, 4fda <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    4fa0:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    4fa2:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    4fa4:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    4fa6:	2bff      	cmp	r3, #255	; 0xff
    4fa8:	d012      	beq.n	4fd0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    4faa:	2b00      	cmp	r3, #0
    4fac:	d043      	beq.n	5036 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    4fae:	3301      	adds	r3, #1
    4fb0:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    4fb2:	b11c      	cbz	r4, 4fbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4fb4:	fb03 4404 	mla	r4, r3, r4, r4
    4fb8:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    4fbc:	b119      	cbz	r1, 4fc6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    4fbe:	fb03 1101 	mla	r1, r3, r1, r1
    4fc2:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    4fc6:	b11a      	cbz	r2, 4fd0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    4fc8:	fb03 2202 	mla	r2, r3, r2, r2
    4fcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4fd0:	7004      	strb	r4, [r0, #0]
    4fd2:	7041      	strb	r1, [r0, #1]
    4fd4:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    4fda:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    4fdc:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    4fde:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    4fe2:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    4fe4:	d000      	beq.n	4fe8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    4fe6:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    4fe8:	0112      	lsls	r2, r2, #4
    4fea:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    4fee:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4ff0:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4ff4:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4ff8:	f891 8002 	ldrb.w	r8, [r1, #2]
    4ffc:	fb04 f606 	mul.w	r6, r4, r6
    5000:	1c51      	adds	r1, r2, #1
    5002:	fb04 f509 	mul.w	r5, r4, r9
    5006:	fb04 f407 	mul.w	r4, r4, r7
    500a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    500e:	f3c6 2707 	ubfx	r7, r6, #8, #8
    5012:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5016:	fb01 f60c 	mul.w	r6, r1, ip
    501a:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    501e:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5022:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5026:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    502a:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    502e:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5030:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5032:	b2d2      	uxtb	r2, r2
    5034:	e7b7      	b.n	4fa6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    5036:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    5038:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    503a:	461c      	mov	r4, r3
    503c:	7004      	strb	r4, [r0, #0]
    503e:	7041      	strb	r1, [r0, #1]
    5040:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    5042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5046:	bf00      	nop

00005048 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    5048:	b5f0      	push	{r4, r5, r6, r7, lr}
    504a:	3901      	subs	r1, #1
    504c:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    504e:	2500      	movs	r5, #0
    5050:	302f      	adds	r0, #47	; 0x2f
    5052:	e001      	b.n	5058 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    5054:	4284      	cmp	r4, r0
    5056:	d01e      	beq.n	5096 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    5058:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    505c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    5060:	42b3      	cmp	r3, r6
    5062:	d0f7      	beq.n	5054 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    5064:	f103 0701 	add.w	r7, r3, #1
    5068:	d204      	bcs.n	5074 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    506a:	b2fb      	uxtb	r3, r7
    506c:	7023      	strb	r3, [r4, #0]
    506e:	3501      	adds	r5, #1
    5070:	780e      	ldrb	r6, [r1, #0]
    5072:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5074:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    5076:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    5078:	b2ff      	uxtb	r7, r7
    507a:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    507e:	d208      	bcs.n	5092 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    5080:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    5082:	780e      	ldrb	r6, [r1, #0]
    5084:	42be      	cmp	r6, r7
    5086:	bf38      	it	cc
    5088:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    508a:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    508e:	bf38      	it	cc
    5090:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    5092:	4295      	cmp	r5, r2
    5094:	d3de      	bcc.n	5054 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    5096:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005098 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    5098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    509a:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    509c:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    509e:	4604      	mov	r4, r0
    50a0:	bfcc      	ite	gt
    50a2:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    50a6:	2500      	movle	r5, #0
    50a8:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    50aa:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    50ac:	bfd8      	it	le
    50ae:	4616      	movle	r6, r2

	pLed->init();
    50b0:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    50b2:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    50b4:	6823      	ldr	r3, [r4, #0]
    50b6:	6062      	str	r2, [r4, #4]
    50b8:	695b      	ldr	r3, [r3, #20]
    50ba:	4a0a      	ldr	r2, [pc, #40]	; (50e4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    50bc:	6166      	str	r6, [r4, #20]
    50be:	4293      	cmp	r3, r2
    50c0:	d101      	bne.n	50c6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    50c2:	4620      	mov	r0, r4
    50c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    50c6:	4620      	mov	r0, r4
    50c8:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    50ca:	2800      	cmp	r0, #0
    50cc:	d0f9      	beq.n	50c2 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    50ce:	4a06      	ldr	r2, [pc, #24]	; (50e8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    50d0:	4b06      	ldr	r3, [pc, #24]	; (50ec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    50d2:	6851      	ldr	r1, [r2, #4]
    50d4:	fb93 f0f0 	sdiv	r0, r3, r0
    50d8:	4288      	cmp	r0, r1
    50da:	bf38      	it	cc
    50dc:	4608      	movcc	r0, r1
    50de:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    50e0:	4620      	mov	r0, r4
    50e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50e4:	00000471 	.word	0x00000471
    50e8:	1fff9470 	.word	0x1fff9470
    50ec:	000f4240 	.word	0x000f4240

000050f0 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    50f0:	4b08      	ldr	r3, [pc, #32]	; (5114 <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    50f2:	b510      	push	{r4, lr}
    50f4:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    50f6:	b15c      	cbz	r4, 5110 <CFastLED::clearData()+0x20>
    50f8:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    50fa:	2100      	movs	r1, #0
    50fc:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    50fe:	b123      	cbz	r3, 510a <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    5100:	6962      	ldr	r2, [r4, #20]
    5102:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5106:	f002 faf3 	bl	76f0 <memset>
    510a:	68a4      	ldr	r4, [r4, #8]
    510c:	2c00      	cmp	r4, #0
    510e:	d1f3      	bne.n	50f8 <CFastLED::clearData()+0x8>
    5110:	bd10      	pop	{r4, pc}
    5112:	bf00      	nop
    5114:	1fff9480 	.word	0x1fff9480

00005118 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5118:	4b07      	ldr	r3, [pc, #28]	; (5138 <CFastLED::setCorrection(CRGB const&)+0x20>)
    511a:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    511c:	b153      	cbz	r3, 5134 <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    511e:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5120:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    5122:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    5124:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    5126:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5128:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    512a:	735a      	strb	r2, [r3, #13]
    512c:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    512e:	2b00      	cmp	r3, #0
    5130:	d1f6      	bne.n	5120 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    5132:	bc10      	pop	{r4}
    5134:	4770      	bx	lr
    5136:	bf00      	nop
    5138:	1fff9480 	.word	0x1fff9480

0000513c <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    513c:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    513e:	4c0f      	ldr	r4, [pc, #60]	; (517c <CFastLED::countFPS(int)+0x40>)
    5140:	6822      	ldr	r2, [r4, #0]
    5142:	1c53      	adds	r3, r2, #1
    5144:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    5146:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5148:	6023      	str	r3, [r4, #0]
    514a:	db13      	blt.n	5174 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    514c:	4d0c      	ldr	r5, [pc, #48]	; (5180 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    514e:	4a0d      	ldr	r2, [pc, #52]	; (5184 <CFastLED::countFPS(int)+0x48>)
    5150:	6829      	ldr	r1, [r5, #0]
    5152:	9101      	str	r1, [sp, #4]
	return ret;
    5154:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5156:	682d      	ldr	r5, [r5, #0]
    5158:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    515a:	6816      	ldr	r6, [r2, #0]
	return ret;
    515c:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    515e:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    5164:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5166:	1b89      	subs	r1, r1, r6
    5168:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    516c:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    516e:	fbb3 f3f1 	udiv	r3, r3, r1
    5172:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    5174:	b003      	add	sp, #12
    5176:	bc70      	pop	{r4, r5, r6}
    5178:	4770      	bx	lr
    517a:	bf00      	nop
    517c:	1fff9484 	.word	0x1fff9484
    5180:	1fff94e8 	.word	0x1fff94e8
    5184:	1fff948c 	.word	0x1fff948c

00005188 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    5188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    518c:	6843      	ldr	r3, [r0, #4]
    518e:	4c2d      	ldr	r4, [pc, #180]	; (5244 <CFastLED::show(unsigned char)+0xbc>)
    5190:	b083      	sub	sp, #12
    5192:	4606      	mov	r6, r0
    5194:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5196:	2b00      	cmp	r3, #0
    5198:	d14b      	bne.n	5232 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    519a:	f000 fd6f 	bl	5c7c <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    519e:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    51a0:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    51a2:	b11b      	cbz	r3, 51ac <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    51a4:	4648      	mov	r0, r9
    51a6:	68b1      	ldr	r1, [r6, #8]
    51a8:	4798      	blx	r3
    51aa:	4681      	mov	r9, r0
    51ac:	4b26      	ldr	r3, [pc, #152]	; (5248 <CFastLED::show(unsigned char)+0xc0>)
    51ae:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    51b0:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    51b2:	2c00      	cmp	r4, #0
    51b4:	d036      	beq.n	5224 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    51b6:	8873      	ldrh	r3, [r6, #2]
    51b8:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    51ba:	6861      	ldr	r1, [r4, #4]
    51bc:	6962      	ldr	r2, [r4, #20]
    51be:	2b63      	cmp	r3, #99	; 0x63
    51c0:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    51c2:	bf98      	it	ls
    51c4:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    51c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    51ca:	f88d 5004 	strb.w	r5, [sp, #4]
    51ce:	f88d 5005 	strb.w	r5, [sp, #5]
    51d2:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    51d6:	f1b9 0f00 	cmp.w	r9, #0
    51da:	d01c      	beq.n	5216 <CFastLED::show(unsigned char)+0x8e>
    51dc:	f104 030b 	add.w	r3, r4, #11
    51e0:	f10d 0e04 	add.w	lr, sp, #4
    51e4:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    51e8:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    51ec:	f1bb 0f00 	cmp.w	fp, #0
    51f0:	d00d      	beq.n	520e <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    51f2:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    51f6:	f10a 0001 	add.w	r0, sl, #1
    51fa:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    51fe:	f1ba 0f00 	cmp.w	sl, #0
    5202:	d004      	beq.n	520e <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5204:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5208:	0c00      	lsrs	r0, r0, #16
    520a:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    520e:	4563      	cmp	r3, ip
    5210:	f10e 0e01 	add.w	lr, lr, #1
    5214:	d1e8      	bne.n	51e8 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5216:	4620      	mov	r0, r4
    5218:	ab01      	add	r3, sp, #4
    521a:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    521c:	74a7      	strb	r7, [r4, #18]
    521e:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5220:	2c00      	cmp	r4, #0
    5222:	d1c8      	bne.n	51b6 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    5224:	4630      	mov	r0, r6
    5226:	2119      	movs	r1, #25
    5228:	f7ff ff88 	bl	513c <CFastLED::countFPS(int)>
}
    522c:	b003      	add	sp, #12
    522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5232:	f000 fd23 	bl	5c7c <micros>
    5236:	6822      	ldr	r2, [r4, #0]
    5238:	6873      	ldr	r3, [r6, #4]
    523a:	1a80      	subs	r0, r0, r2
    523c:	4298      	cmp	r0, r3
    523e:	d3aa      	bcc.n	5196 <CFastLED::show(unsigned char)+0xe>
    5240:	e7ab      	b.n	519a <CFastLED::show(unsigned char)+0x12>
    5242:	bf00      	nop
    5244:	1fff9488 	.word	0x1fff9488
    5248:	1fff9480 	.word	0x1fff9480

0000524c <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    524c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    524e:	4d0a      	ldr	r5, [pc, #40]	; (5278 <CFastLED::delay(unsigned long)+0x2c>)
    5250:	b083      	sub	sp, #12
    5252:	682b      	ldr	r3, [r5, #0]
    5254:	9300      	str	r3, [sp, #0]
	return ret;
    5256:	9f00      	ldr	r7, [sp, #0]
    5258:	4604      	mov	r4, r0
    525a:	460e      	mov	r6, r1
    525c:	7821      	ldrb	r1, [r4, #0]
    525e:	4620      	mov	r0, r4
    5260:	f7ff ff92 	bl	5188 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    5264:	f001 ffb8 	bl	71d8 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5268:	682b      	ldr	r3, [r5, #0]
    526a:	9301      	str	r3, [sp, #4]
	return ret;
    526c:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    526e:	1bdb      	subs	r3, r3, r7
    5270:	42b3      	cmp	r3, r6
    5272:	d3f3      	bcc.n	525c <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    5274:	b003      	add	sp, #12
    5276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5278:	1fff94e8 	.word	0x1fff94e8

0000527c <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5280:	6843      	ldr	r3, [r0, #4]
    5282:	4c2c      	ldr	r4, [pc, #176]	; (5334 <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    5284:	b083      	sub	sp, #12
    5286:	4606      	mov	r6, r0
    5288:	468a      	mov	sl, r1
    528a:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    528c:	2b00      	cmp	r3, #0
    528e:	d149      	bne.n	5324 <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    5290:	f000 fcf4 	bl	5c7c <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5294:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    5296:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5298:	b11b      	cbz	r3, 52a2 <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    529a:	4648      	mov	r0, r9
    529c:	68b1      	ldr	r1, [r6, #8]
    529e:	4798      	blx	r3
    52a0:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    52a2:	4b25      	ldr	r3, [pc, #148]	; (5338 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    52a4:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    52a6:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    52a8:	2c00      	cmp	r4, #0
    52aa:	d034      	beq.n	5316 <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    52ac:	8873      	ldrh	r3, [r6, #2]
    52ae:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    52b0:	6962      	ldr	r2, [r4, #20]
    52b2:	2b63      	cmp	r3, #99	; 0x63
    52b4:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    52b6:	bf98      	it	ls
    52b8:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    52ba:	f8d3 8000 	ldr.w	r8, [r3]
    52be:	f88d 5004 	strb.w	r5, [sp, #4]
    52c2:	f88d 5005 	strb.w	r5, [sp, #5]
    52c6:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    52ca:	f1b9 0f00 	cmp.w	r9, #0
    52ce:	d01a      	beq.n	5306 <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    52d0:	f104 030b 	add.w	r3, r4, #11
    52d4:	a801      	add	r0, sp, #4
    52d6:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    52da:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    52de:	f1bb 0f00 	cmp.w	fp, #0
    52e2:	d00c      	beq.n	52fe <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    52e4:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    52e8:	f10c 0101 	add.w	r1, ip, #1
    52ec:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    52f0:	f1bc 0f00 	cmp.w	ip, #0
    52f4:	d003      	beq.n	52fe <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    52f6:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    52fa:	0c09      	lsrs	r1, r1, #16
    52fc:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    52fe:	4573      	cmp	r3, lr
    5300:	f100 0001 	add.w	r0, r0, #1
    5304:	d1e9      	bne.n	52da <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    5306:	4620      	mov	r0, r4
    5308:	ab01      	add	r3, sp, #4
    530a:	4651      	mov	r1, sl
    530c:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    530e:	74a7      	strb	r7, [r4, #18]
    5310:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5312:	2c00      	cmp	r4, #0
    5314:	d1ca      	bne.n	52ac <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    5316:	4630      	mov	r0, r6
    5318:	2119      	movs	r1, #25
    531a:	f7ff ff0f 	bl	513c <CFastLED::countFPS(int)>
}
    531e:	b003      	add	sp, #12
    5320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5324:	f000 fcaa 	bl	5c7c <micros>
    5328:	6822      	ldr	r2, [r4, #0]
    532a:	6873      	ldr	r3, [r6, #4]
    532c:	1a80      	subs	r0, r0, r2
    532e:	4298      	cmp	r0, r3
    5330:	d3ac      	bcc.n	528c <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    5332:	e7ad      	b.n	5290 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    5334:	1fff9488 	.word	0x1fff9488
    5338:	1fff9480 	.word	0x1fff9480

0000533c <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    533c:	b510      	push	{r4, lr}
    533e:	4604      	mov	r4, r0
    5340:	b082      	sub	sp, #8
	if(writeData) {
    5342:	b151      	cbz	r1, 535a <CFastLED::clear(bool)+0x1e>
    5344:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    5346:	461a      	mov	r2, r3
    5348:	a901      	add	r1, sp, #4
    534a:	f88d 3004 	strb.w	r3, [sp, #4]
    534e:	f88d 3005 	strb.w	r3, [sp, #5]
    5352:	f88d 3006 	strb.w	r3, [sp, #6]
    5356:	f7ff ff91 	bl	527c <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    535a:	4620      	mov	r0, r4
    535c:	f7ff fec8 	bl	50f0 <CFastLED::clearData()>
}
    5360:	b002      	add	sp, #8
    5362:	bd10      	pop	{r4, pc}

00005364 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    5364:	2000      	movs	r0, #0
    5366:	4770      	bx	lr

00005368 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5368:	4b04      	ldr	r3, [pc, #16]	; (537c <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    536a:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    536c:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    536e:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5372:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    5374:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    5376:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    5378:	60da      	str	r2, [r3, #12]
    537a:	4770      	bx	lr
    537c:	1fff9470 	.word	0x1fff9470

00005380 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    5380:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    5382:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    5384:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    5386:	7882      	ldrb	r2, [r0, #2]
    5388:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    538a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    538e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5392:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    5396:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    5398:	0625      	lsls	r5, r4, #24
    539a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    539e:	d45f      	bmi.n	5460 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    53a0:	f004 0540 	and.w	r5, r4, #64	; 0x40
    53a4:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    53a8:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    53ac:	2d00      	cmp	r5, #0
    53ae:	d146      	bne.n	543e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    53b0:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    53b4:	2c00      	cmp	r4, #0
    53b6:	d06c      	beq.n	5492 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    53b8:	3355      	adds	r3, #85	; 0x55
    53ba:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    53bc:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    53be:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    53c0:	2eff      	cmp	r6, #255	; 0xff
    53c2:	d01c      	beq.n	53fe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    53c4:	2e00      	cmp	r6, #0
    53c6:	d079      	beq.n	54bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    53c8:	b11c      	cbz	r4, 53d2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    53ca:	fb06 4404 	mla	r4, r6, r4, r4
    53ce:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    53d2:	b11d      	cbz	r5, 53dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    53d4:	fb06 5505 	mla	r5, r6, r5, r5
    53d8:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    53dc:	b11b      	cbz	r3, 53e6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    53de:	fb06 3303 	mla	r3, r6, r3, r3
    53e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    53e6:	43f0      	mvns	r0, r6
    53e8:	b2c0      	uxtb	r0, r0
    53ea:	fb00 0000 	mla	r0, r0, r0, r0
    53ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    53f2:	4404      	add	r4, r0
            g += brightness_floor;
    53f4:	4405      	add	r5, r0
            b += brightness_floor;
    53f6:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    53f8:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    53fa:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    53fc:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    53fe:	2aff      	cmp	r2, #255	; 0xff
    5400:	d018      	beq.n	5434 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5402:	fb12 f002 	smulbb	r0, r2, r2
    5406:	3200      	adds	r2, #0
    5408:	bf18      	it	ne
    540a:	2201      	movne	r2, #1
    540c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    5410:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5414:	d056      	beq.n	54c4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    5416:	b11c      	cbz	r4, 5420 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5418:	fb02 4404 	mla	r4, r2, r4, r4
    541c:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    5420:	b11d      	cbz	r5, 542a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    5422:	fb02 5505 	mla	r5, r2, r5, r5
    5426:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    542a:	b11b      	cbz	r3, 5434 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    542c:	fb02 3303 	mla	r3, r2, r3, r3
    5430:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5434:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    5436:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    5438:	708b      	strb	r3, [r1, #2]
}
    543a:	bcf0      	pop	{r4, r5, r6, r7}
    543c:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    543e:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    5442:	bb5c      	cbnz	r4, 549c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5444:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    5448:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    544c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5450:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    5452:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5454:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    5458:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    545a:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    545c:	463b      	mov	r3, r7
    545e:	e7af      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    5460:	f004 0740 	and.w	r7, r4, #64	; 0x40
    5464:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    5468:	b9e7      	cbnz	r7, 54a4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    546a:	f004 0720 	and.w	r7, r4, #32
    546e:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    5472:	2f00      	cmp	r7, #0
    5474:	d136      	bne.n	54e4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5476:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    547a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    547e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5482:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    5486:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    548a:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    548c:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    548e:	b2c3      	uxtb	r3, r0
    5490:	e796      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    5492:	43dc      	mvns	r4, r3
    5494:	b2e4      	uxtb	r4, r4
                g = third;
    5496:	461d      	mov	r5, r3
                b = 0;
    5498:	4603      	mov	r3, r0
    549a:	e791      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    549c:	2400      	movs	r4, #0
                g = K255 - third;
    549e:	43dd      	mvns	r5, r3
    54a0:	b2ed      	uxtb	r5, r5
    54a2:	e78d      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    54a4:	f004 0420 	and.w	r4, r4, #32
    54a8:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    54ac:	b994      	cbnz	r4, 54d4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    54ae:	f103 0455 	add.w	r4, r3, #85	; 0x55
    54b2:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    54b4:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    54b8:	b2db      	uxtb	r3, r3
    54ba:	e781      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    54bc:	23ff      	movs	r3, #255	; 0xff
    54be:	461d      	mov	r5, r3
    54c0:	461c      	mov	r4, r3
    54c2:	e79c      	b.n	53fe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    54c4:	4615      	mov	r5, r2
    54c6:	4614      	mov	r4, r2
    54c8:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    54ca:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    54cc:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    54ce:	708b      	strb	r3, [r1, #2]
}
    54d0:	bcf0      	pop	{r4, r5, r6, r7}
    54d2:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    54d4:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    54d8:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    54da:	2500      	movs	r5, #0
                b = K85 - third;
    54dc:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    54e0:	b2db      	uxtb	r3, r3
    54e2:	e76d      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    54e4:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    54e6:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    54e8:	b2c3      	uxtb	r3, r0
    54ea:	e769      	b.n	53c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000054ec <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    54ee:	b361      	cbz	r1, 554a <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    54f0:	f101 3eff 	add.w	lr, r1, #4294967295
    54f4:	fa1f fe8e 	uxth.w	lr, lr
    54f8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    54fc:	2200      	movs	r2, #0
    54fe:	f10e 0e06 	add.w	lr, lr, #6
    5502:	4486      	add	lr, r0
    5504:	1cc3      	adds	r3, r0, #3
    5506:	4615      	mov	r5, r2
    5508:	4614      	mov	r4, r2
        red32   += *p++;
    550a:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    550e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    5512:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    5516:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5518:	4573      	cmp	r3, lr
        red32   += *p++;
    551a:	443c      	add	r4, r7
        green32 += *p++;
    551c:	4405      	add	r5, r0
        blue32  += *p++;
    551e:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5520:	d1f3      	bne.n	550a <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    5522:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5526:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    552a:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    552e:	f3c4 1317 	ubfx	r3, r4, #4, #24
    5532:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    5536:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    553a:	0a12      	lsrs	r2, r2, #8
    553c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    5540:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5544:	1910      	adds	r0, r2, r4
}
    5546:	4408      	add	r0, r1
    5548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    554a:	460c      	mov	r4, r1
    554c:	460a      	mov	r2, r1
    554e:	e7f7      	b.n	5540 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

00005550 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    5550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5554:	4b25      	ldr	r3, [pc, #148]	; (55ec <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    5556:	681c      	ldr	r4, [r3, #0]
    5558:	b085      	sub	sp, #20
    555a:	4607      	mov	r7, r0
    555c:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    555e:	b19c      	cbz	r4, 5588 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    5560:	f8df 9094 	ldr.w	r9, [pc, #148]	; 55f8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    5564:	257d      	movs	r5, #125	; 0x7d
    5566:	e007      	b.n	5578 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    5568:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    556a:	b281      	uxth	r1, r0
    556c:	4630      	mov	r0, r6
    556e:	f7ff ffbd 	bl	54ec <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    5572:	68a4      	ldr	r4, [r4, #8]
    5574:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5576:	b144      	cbz	r4, 558a <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    5578:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    557c:	691b      	ldr	r3, [r3, #16]
    557e:	454b      	cmp	r3, r9
    5580:	d0f2      	beq.n	5568 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    5582:	4620      	mov	r0, r4
    5584:	4798      	blx	r3
    5586:	e7f0      	b.n	556a <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    5588:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    558a:	fb05 f507 	mul.w	r5, r5, r7
    558e:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5590:	4b17      	ldr	r3, [pc, #92]	; (55f0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    5592:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5594:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    5596:	d210      	bcs.n	55ba <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    5598:	b323      	cbz	r3, 55e4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    559a:	4a16      	ldr	r2, [pc, #88]	; (55f4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    559c:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    559e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    55a2:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    55a6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    55aa:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    55ac:	4638      	mov	r0, r7
    55ae:	ea23 0301 	bic.w	r3, r3, r1
    55b2:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    55b4:	b005      	add	sp, #20
    55b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    55ba:	fb08 f707 	mul.w	r7, r8, r7
    55be:	fbb7 f0f5 	udiv	r0, r7, r5
    55c2:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    55c4:	b173      	cbz	r3, 55e4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    55c6:	4a0b      	ldr	r2, [pc, #44]	; (55f4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    55c8:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    55ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    55ce:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    55d2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    55d6:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    55d8:	4638      	mov	r0, r7
    55da:	430b      	orrs	r3, r1
    55dc:	7013      	strb	r3, [r2, #0]
}
    55de:	b005      	add	sp, #20
    55e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    55e4:	4638      	mov	r0, r7
}
    55e6:	b005      	add	sp, #20
    55e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    55ec:	1fff9480 	.word	0x1fff9480
    55f0:	1fff9494 	.word	0x1fff9494
    55f4:	00009e10 	.word	0x00009e10
    55f8:	0000046d 	.word	0x0000046d

000055fc <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    55fc:	4b03      	ldr	r3, [pc, #12]	; (560c <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    55fe:	4a04      	ldr	r2, [pc, #16]	; (5610 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    5600:	60da      	str	r2, [r3, #12]
    5602:	fb01 f100 	mul.w	r1, r1, r0
    5606:	6099      	str	r1, [r3, #8]
    5608:	4770      	bx	lr
    560a:	bf00      	nop
    560c:	1fff9470 	.word	0x1fff9470
    5610:	00005551 	.word	0x00005551

00005614 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5614:	4807      	ldr	r0, [pc, #28]	; (5634 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    5616:	b082      	sub	sp, #8
    5618:	6803      	ldr	r3, [r0, #0]
    561a:	9301      	str	r3, [sp, #4]
	return ret;
    561c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    561e:	4411      	add	r1, r2
    5620:	e001      	b.n	5626 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    5622:	4299      	cmp	r1, r3
    5624:	d304      	bcc.n	5630 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5626:	6803      	ldr	r3, [r0, #0]
    5628:	9300      	str	r3, [sp, #0]
	return ret;
    562a:	9b00      	ldr	r3, [sp, #0]
    562c:	429a      	cmp	r2, r3
    562e:	d9f8      	bls.n	5622 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    5630:	b002      	add	sp, #8
    5632:	4770      	bx	lr
    5634:	1fff94e8 	.word	0x1fff94e8

00005638 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    5638:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    563a:	4a10      	ldr	r2, [pc, #64]	; (567c <VisualMicroDebug::outPacketStart(bool)+0x44>)
    563c:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    563e:	b9a1      	cbnz	r1, 566a <VisualMicroDebug::outPacketStart(bool)+0x32>
    5640:	6813      	ldr	r3, [r2, #0]
    5642:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    5644:	6841      	ldr	r1, [r0, #4]
	return ret;
    5646:	9b00      	ldr	r3, [sp, #0]
    5648:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    564a:	2931      	cmp	r1, #49	; 0x31
    564c:	d80d      	bhi.n	566a <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    564e:	6813      	ldr	r3, [r2, #0]
    5650:	9302      	str	r3, [sp, #8]
	return ret;
    5652:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    5654:	f104 0332 	add.w	r3, r4, #50	; 0x32
    5658:	1a59      	subs	r1, r3, r1
    565a:	e001      	b.n	5660 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    565c:	4299      	cmp	r1, r3
    565e:	d304      	bcc.n	566a <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5660:	6813      	ldr	r3, [r2, #0]
    5662:	9301      	str	r3, [sp, #4]
	return ret;
    5664:	9b01      	ldr	r3, [sp, #4]
    5666:	429c      	cmp	r4, r3
    5668:	d9f8      	bls.n	565c <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    566a:	6813      	ldr	r3, [r2, #0]
    566c:	9303      	str	r3, [sp, #12]
	return ret;
    566e:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    5670:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    5672:	2001      	movs	r0, #1
    5674:	b005      	add	sp, #20
    5676:	bc10      	pop	{r4}
    5678:	4770      	bx	lr
    567a:	bf00      	nop
    567c:	1fff94e8 	.word	0x1fff94e8

00005680 <VisualMicroDebug::outPacketEnd()>:
    5680:	4770      	bx	lr
    5682:	bf00      	nop

00005684 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    5684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5688:	f000 bb1a 	b.w	5cc0 <delay>

0000568c <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    568c:	2300      	movs	r3, #0
    568e:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    5690:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    5692:	b171      	cbz	r1, 56b2 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5694:	4807      	ldr	r0, [pc, #28]	; (56b4 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    5696:	b082      	sub	sp, #8
    5698:	6803      	ldr	r3, [r0, #0]
    569a:	9301      	str	r3, [sp, #4]
	return ret;
    569c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    569e:	4411      	add	r1, r2
    56a0:	e001      	b.n	56a6 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    56a2:	4299      	cmp	r1, r3
    56a4:	d304      	bcc.n	56b0 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56a6:	6803      	ldr	r3, [r0, #0]
    56a8:	9300      	str	r3, [sp, #0]
	return ret;
    56aa:	9b00      	ldr	r3, [sp, #0]
    56ac:	429a      	cmp	r2, r3
    56ae:	d9f8      	bls.n	56a2 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    56b0:	b002      	add	sp, #8
    56b2:	4770      	bx	lr
    56b4:	1fff94e8 	.word	0x1fff94e8

000056b8 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    56b8:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56ba:	4c13      	ldr	r4, [pc, #76]	; (5708 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    56bc:	b085      	sub	sp, #20
    56be:	6823      	ldr	r3, [r4, #0]
    56c0:	9303      	str	r3, [sp, #12]
	return ret;
    56c2:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    56c4:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    56c6:	460d      	mov	r5, r1
    56c8:	4810      	ldr	r0, [pc, #64]	; (570c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    56ca:	2106      	movs	r1, #6
    56cc:	f001 fb10 	bl	6cf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    56d0:	2300      	movs	r3, #0
    56d2:	220a      	movs	r2, #10
    56d4:	4629      	mov	r1, r5
    56d6:	480e      	ldr	r0, [pc, #56]	; (5710 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    56d8:	f001 fd1e 	bl	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    56dc:	2106      	movs	r1, #6
    56de:	480d      	ldr	r0, [pc, #52]	; (5714 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    56e0:	f001 fb06 	bl	6cf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    56e4:	480a      	ldr	r0, [pc, #40]	; (5710 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    56e6:	f001 fd07 	bl	70f8 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56ea:	6823      	ldr	r3, [r4, #0]
    56ec:	9302      	str	r3, [sp, #8]
	return ret;
    56ee:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    56f0:	f102 0132 	add.w	r1, r2, #50	; 0x32
    56f4:	e001      	b.n	56fa <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    56f6:	4299      	cmp	r1, r3
    56f8:	d304      	bcc.n	5704 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56fa:	6823      	ldr	r3, [r4, #0]
    56fc:	9301      	str	r3, [sp, #4]
	return ret;
    56fe:	9b01      	ldr	r3, [sp, #4]
    5700:	429a      	cmp	r2, r3
    5702:	d9f8      	bls.n	56f6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    5704:	b005      	add	sp, #20
    5706:	bd30      	pop	{r4, r5, pc}
    5708:	1fff94e8 	.word	0x1fff94e8
    570c:	00009d8c 	.word	0x00009d8c
    5710:	1fff873c 	.word	0x1fff873c
    5714:	00009d94 	.word	0x00009d94

00005718 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    5718:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    571a:	7e03      	ldrb	r3, [r0, #24]
    571c:	b90b      	cbnz	r3, 5722 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    571e:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    5720:	bd38      	pop	{r3, r4, r5, pc}
    5722:	460d      	mov	r5, r1
    5724:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5726:	f001 fab9 	bl	6c9c <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    572a:	f010 0fff 	tst.w	r0, #255	; 0xff
    572e:	d101      	bne.n	5734 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    5730:	2065      	movs	r0, #101	; 0x65
    5732:	bd38      	pop	{r3, r4, r5, pc}
    5734:	f001 fab2 	bl	6c9c <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    5738:	f010 0fff 	tst.w	r0, #255	; 0xff
    573c:	d0f8      	beq.n	5730 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    573e:	f001 fa71 	bl	6c24 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    5742:	b2c0      	uxtb	r0, r0
    5744:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    5748:	2b1e      	cmp	r3, #30
    574a:	d8f3      	bhi.n	5734 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    574c:	a201      	add	r2, pc, #4	; (adr r2, 5754 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5752:	bf00      	nop
    5754:	000057dd 	.word	0x000057dd
    5758:	00005735 	.word	0x00005735
    575c:	00005735 	.word	0x00005735
    5760:	00005735 	.word	0x00005735
    5764:	00005735 	.word	0x00005735
    5768:	00005735 	.word	0x00005735
    576c:	00005735 	.word	0x00005735
    5770:	00005735 	.word	0x00005735
    5774:	00005735 	.word	0x00005735
    5778:	00005735 	.word	0x00005735
    577c:	00005735 	.word	0x00005735
    5780:	000057d1 	.word	0x000057d1
    5784:	00005735 	.word	0x00005735
    5788:	00005735 	.word	0x00005735
    578c:	00005735 	.word	0x00005735
    5790:	00005735 	.word	0x00005735
    5794:	0000571f 	.word	0x0000571f
    5798:	00005735 	.word	0x00005735
    579c:	00005735 	.word	0x00005735
    57a0:	00005735 	.word	0x00005735
    57a4:	00005735 	.word	0x00005735
    57a8:	00005735 	.word	0x00005735
    57ac:	00005735 	.word	0x00005735
    57b0:	00005735 	.word	0x00005735
    57b4:	00005735 	.word	0x00005735
    57b8:	0000571f 	.word	0x0000571f
    57bc:	00005735 	.word	0x00005735
    57c0:	00005735 	.word	0x00005735
    57c4:	00005735 	.word	0x00005735
    57c8:	00005735 	.word	0x00005735
    57cc:	00005721 	.word	0x00005721
		{

		case 'c':
			sendContinuedACK(breakPointId);
    57d0:	4620      	mov	r0, r4
    57d2:	4629      	mov	r1, r5
    57d4:	f7ff ff70 	bl	56b8 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    57d8:	2063      	movs	r0, #99	; 0x63
    57da:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    57dc:	2300      	movs	r3, #0
    57de:	7623      	strb	r3, [r4, #24]
			return 'c';
    57e0:	2063      	movs	r0, #99	; 0x63
    57e2:	bd38      	pop	{r3, r4, r5, pc}

000057e4 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    57e4:	b570      	push	{r4, r5, r6, lr}
    57e6:	4605      	mov	r5, r0
    57e8:	b082      	sub	sp, #8
    57ea:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    57ec:	b1c9      	cbz	r1, 5822 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    57ee:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    57f0:	4c0d      	ldr	r4, [pc, #52]	; (5828 <VisualMicroDebug::start(bool, bool)+0x44>)
    57f2:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    57f4:	2100      	movs	r1, #0
    57f6:	4628      	mov	r0, r5
    57f8:	f7ff ff8e 	bl	5718 <VisualMicroDebug::breakWait(unsigned char)>
    57fc:	2863      	cmp	r0, #99	; 0x63
    57fe:	d010      	beq.n	5822 <VisualMicroDebug::start(bool, bool)+0x3e>
    5800:	6823      	ldr	r3, [r4, #0]
    5802:	9301      	str	r3, [sp, #4]
	return ret;
    5804:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    5806:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5808:	6823      	ldr	r3, [r4, #0]
    580a:	9300      	str	r3, [sp, #0]
	return ret;
    580c:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    580e:	429a      	cmp	r2, r3
    5810:	d8f0      	bhi.n	57f4 <VisualMicroDebug::start(bool, bool)+0x10>
    5812:	4299      	cmp	r1, r3
    5814:	d2f8      	bcs.n	5808 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    5816:	2100      	movs	r1, #0
    5818:	4628      	mov	r0, r5
    581a:	f7ff ff7d 	bl	5718 <VisualMicroDebug::breakWait(unsigned char)>
    581e:	2863      	cmp	r0, #99	; 0x63
    5820:	d1ee      	bne.n	5800 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    5822:	762e      	strb	r6, [r5, #24]
#endif

}
    5824:	b002      	add	sp, #8
    5826:	bd70      	pop	{r4, r5, r6, pc}
    5828:	1fff94e8 	.word	0x1fff94e8

0000582c <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    582c:	4b03      	ldr	r3, [pc, #12]	; (583c <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    582e:	2200      	movs	r2, #0
    5830:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    5832:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    5834:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    5836:	615a      	str	r2, [r3, #20]
    5838:	4770      	bx	lr
    583a:	bf00      	nop
    583c:	1fff9498 	.word	0x1fff9498

00005840 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    5840:	4a37      	ldr	r2, [pc, #220]	; (5920 <wait_for_cal+0xe0>)
    5842:	4938      	ldr	r1, [pc, #224]	; (5924 <wait_for_cal+0xe4>)
    5844:	6813      	ldr	r3, [r2, #0]
    5846:	061b      	lsls	r3, r3, #24
    5848:	d4fc      	bmi.n	5844 <wait_for_cal+0x4>
    584a:	680b      	ldr	r3, [r1, #0]
    584c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    5850:	d1f8      	bne.n	5844 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    5852:	b672      	cpsid	i
	if (calibrating) {
    5854:	4934      	ldr	r1, [pc, #208]	; (5928 <wait_for_cal+0xe8>)
    5856:	780a      	ldrb	r2, [r1, #0]
    5858:	2a00      	cmp	r2, #0
    585a:	d05f      	beq.n	591c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    585c:	4a33      	ldr	r2, [pc, #204]	; (592c <wait_for_cal+0xec>)
    585e:	4834      	ldr	r0, [pc, #208]	; (5930 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    5860:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    5862:	4c34      	ldr	r4, [pc, #208]	; (5934 <wait_for_cal+0xf4>)
    5864:	6817      	ldr	r7, [r2, #0]
    5866:	6806      	ldr	r6, [r0, #0]
    5868:	6825      	ldr	r5, [r4, #0]
    586a:	68d4      	ldr	r4, [r2, #12]
    586c:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    586e:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    5870:	3214      	adds	r2, #20
    5872:	6800      	ldr	r0, [r0, #0]
    5874:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    5876:	4f30      	ldr	r7, [pc, #192]	; (5938 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    5878:	4435      	add	r5, r6
    587a:	442c      	add	r4, r5
    587c:	4420      	add	r0, r4
    587e:	4402      	add	r2, r0
    5880:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    5884:	4e2d      	ldr	r6, [pc, #180]	; (593c <wait_for_cal+0xfc>)
    5886:	482e      	ldr	r0, [pc, #184]	; (5940 <wait_for_cal+0x100>)
    5888:	4d2e      	ldr	r5, [pc, #184]	; (5944 <wait_for_cal+0x104>)
    588a:	4c2f      	ldr	r4, [pc, #188]	; (5948 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    588c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5890:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    5892:	6837      	ldr	r7, [r6, #0]
    5894:	6806      	ldr	r6, [r0, #0]
    5896:	682d      	ldr	r5, [r5, #0]
    5898:	4a2c      	ldr	r2, [pc, #176]	; (594c <wait_for_cal+0x10c>)
    589a:	6824      	ldr	r4, [r4, #0]
    589c:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    589e:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    58a0:	6800      	ldr	r0, [r0, #0]
    58a2:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    58a4:	4f2a      	ldr	r7, [pc, #168]	; (5950 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    58a6:	4435      	add	r5, r6
    58a8:	442c      	add	r4, r5
    58aa:	4420      	add	r0, r4
    58ac:	4402      	add	r2, r0
    58ae:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    58b2:	4e28      	ldr	r6, [pc, #160]	; (5954 <wait_for_cal+0x114>)
    58b4:	4828      	ldr	r0, [pc, #160]	; (5958 <wait_for_cal+0x118>)
    58b6:	4d29      	ldr	r5, [pc, #164]	; (595c <wait_for_cal+0x11c>)
    58b8:	4c29      	ldr	r4, [pc, #164]	; (5960 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    58ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    58be:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    58c0:	6837      	ldr	r7, [r6, #0]
    58c2:	6806      	ldr	r6, [r0, #0]
    58c4:	682d      	ldr	r5, [r5, #0]
    58c6:	4a27      	ldr	r2, [pc, #156]	; (5964 <wait_for_cal+0x124>)
    58c8:	6824      	ldr	r4, [r4, #0]
    58ca:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    58cc:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    58ce:	6800      	ldr	r0, [r0, #0]
    58d0:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    58d2:	4f25      	ldr	r7, [pc, #148]	; (5968 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    58d4:	4435      	add	r5, r6
    58d6:	442c      	add	r4, r5
    58d8:	4420      	add	r0, r4
    58da:	4402      	add	r2, r0
    58dc:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    58e0:	4e22      	ldr	r6, [pc, #136]	; (596c <wait_for_cal+0x12c>)
    58e2:	4823      	ldr	r0, [pc, #140]	; (5970 <wait_for_cal+0x130>)
    58e4:	4d23      	ldr	r5, [pc, #140]	; (5974 <wait_for_cal+0x134>)
    58e6:	4c24      	ldr	r4, [pc, #144]	; (5978 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    58e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    58ec:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    58ee:	6837      	ldr	r7, [r6, #0]
    58f0:	6806      	ldr	r6, [r0, #0]
    58f2:	682d      	ldr	r5, [r5, #0]
    58f4:	4a21      	ldr	r2, [pc, #132]	; (597c <wait_for_cal+0x13c>)
    58f6:	6824      	ldr	r4, [r4, #0]
    58f8:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    58fa:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    58fc:	6800      	ldr	r0, [r0, #0]
    58fe:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    5900:	4435      	add	r5, r6
    5902:	442c      	add	r4, r5
    5904:	4420      	add	r0, r4
    5906:	4402      	add	r2, r0
    5908:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    590c:	481c      	ldr	r0, [pc, #112]	; (5980 <wait_for_cal+0x140>)
    590e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5912:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    5914:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    5916:	b662      	cpsie	i
}
    5918:	bcf0      	pop	{r4, r5, r6, r7}
    591a:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    591c:	b662      	cpsie	i
    591e:	4770      	bx	lr
    5920:	4003b024 	.word	0x4003b024
    5924:	400bb024 	.word	0x400bb024
    5928:	1fff94e1 	.word	0x1fff94e1
    592c:	4003b038 	.word	0x4003b038
    5930:	4003b03c 	.word	0x4003b03c
    5934:	4003b040 	.word	0x4003b040
    5938:	4003b02c 	.word	0x4003b02c
    593c:	4003b058 	.word	0x4003b058
    5940:	4003b05c 	.word	0x4003b05c
    5944:	4003b060 	.word	0x4003b060
    5948:	4003b064 	.word	0x4003b064
    594c:	4003b06c 	.word	0x4003b06c
    5950:	4003b030 	.word	0x4003b030
    5954:	400bb038 	.word	0x400bb038
    5958:	400bb03c 	.word	0x400bb03c
    595c:	400bb040 	.word	0x400bb040
    5960:	400bb044 	.word	0x400bb044
    5964:	400bb04c 	.word	0x400bb04c
    5968:	400bb02c 	.word	0x400bb02c
    596c:	400bb058 	.word	0x400bb058
    5970:	400bb05c 	.word	0x400bb05c
    5974:	400bb060 	.word	0x400bb060
    5978:	400bb064 	.word	0x400bb064
    597c:	400bb06c 	.word	0x400bb06c
    5980:	400bb030 	.word	0x400bb030

00005984 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    5984:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5986:	4829      	ldr	r0, [pc, #164]	; (5a2c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5988:	4a29      	ldr	r2, [pc, #164]	; (5a30 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    598a:	4b2a      	ldr	r3, [pc, #168]	; (5a34 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    598c:	4d2a      	ldr	r5, [pc, #168]	; (5a38 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    598e:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5990:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5992:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5994:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    5996:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5998:	4c28      	ldr	r4, [pc, #160]	; (5a3c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    599a:	2b08      	cmp	r3, #8
    599c:	d030      	beq.n	5a00 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    599e:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    59a0:	4827      	ldr	r0, [pc, #156]	; (5a40 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    59a2:	4928      	ldr	r1, [pc, #160]	; (5a44 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    59a4:	d037      	beq.n	5a16 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    59a6:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    59a8:	bf0c      	ite	eq
    59aa:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    59ac:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    59ae:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    59b0:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    59b2:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    59b4:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    59b6:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    59b8:	4b23      	ldr	r3, [pc, #140]	; (5a48 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    59ba:	4924      	ldr	r1, [pc, #144]	; (5a4c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    59bc:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    59be:	4a24      	ldr	r2, [pc, #144]	; (5a50 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    59c0:	b1bb      	cbz	r3, 59f2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    59c2:	2301      	movs	r3, #1
    59c4:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    59c6:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    59c8:	4b22      	ldr	r3, [pc, #136]	; (5a54 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    59ca:	4923      	ldr	r1, [pc, #140]	; (5a58 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    59cc:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    59ce:	4a23      	ldr	r2, [pc, #140]	; (5a5c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    59d0:	2b01      	cmp	r3, #1
    59d2:	d926      	bls.n	5a22 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    59d4:	2b04      	cmp	r3, #4
    59d6:	d90f      	bls.n	59f8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    59d8:	2b08      	cmp	r3, #8
    59da:	d91e      	bls.n	5a1a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    59dc:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    59de:	bf94      	ite	ls
    59e0:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    59e2:	2387      	movhi	r3, #135	; 0x87
    59e4:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    59e6:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    59e8:	4b1d      	ldr	r3, [pc, #116]	; (5a60 <analog_init+0xdc>)
    59ea:	2201      	movs	r2, #1
    59ec:	701a      	strb	r2, [r3, #0]
}
    59ee:	bc30      	pop	{r4, r5}
    59f0:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    59f2:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    59f4:	6013      	str	r3, [r2, #0]
    59f6:	e7e7      	b.n	59c8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    59f8:	2384      	movs	r3, #132	; 0x84
    59fa:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    59fc:	6013      	str	r3, [r2, #0]
    59fe:	e7f3      	b.n	59e8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5a00:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5a04:	490f      	ldr	r1, [pc, #60]	; (5a44 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5a06:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5a08:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5a0a:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5a0c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5a0e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5a10:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5a12:	600b      	str	r3, [r1, #0]
    5a14:	e7d0      	b.n	59b8 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5a16:	2239      	movs	r2, #57	; 0x39
    5a18:	e7f7      	b.n	5a0a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5a1a:	2385      	movs	r3, #133	; 0x85
    5a1c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5a1e:	6013      	str	r3, [r2, #0]
    5a20:	e7e2      	b.n	59e8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5a22:	2380      	movs	r3, #128	; 0x80
    5a24:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5a26:	6013      	str	r3, [r2, #0]
    5a28:	e7de      	b.n	59e8 <analog_init+0x64>
    5a2a:	bf00      	nop
    5a2c:	40074000 	.word	0x40074000
    5a30:	40074001 	.word	0x40074001
    5a34:	1fff8736 	.word	0x1fff8736
    5a38:	4003b008 	.word	0x4003b008
    5a3c:	4003b00c 	.word	0x4003b00c
    5a40:	400bb008 	.word	0x400bb008
    5a44:	400bb00c 	.word	0x400bb00c
    5a48:	1fff94e4 	.word	0x1fff94e4
    5a4c:	4003b020 	.word	0x4003b020
    5a50:	400bb020 	.word	0x400bb020
    5a54:	1fff8737 	.word	0x1fff8737
    5a58:	4003b024 	.word	0x4003b024
    5a5c:	400bb024 	.word	0x400bb024
    5a60:	1fff94e1 	.word	0x1fff94e1

00005a64 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    5a64:	2828      	cmp	r0, #40	; 0x28
    5a66:	d82f      	bhi.n	5ac8 <analogRead+0x64>
	channel = pin2sc1a[pin];
    5a68:	4b33      	ldr	r3, [pc, #204]	; (5b38 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    5a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    5a6e:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    5a70:	2eff      	cmp	r6, #255	; 0xff
    5a72:	d02b      	beq.n	5acc <analogRead+0x68>

	if (calibrating) wait_for_cal();
    5a74:	4b31      	ldr	r3, [pc, #196]	; (5b3c <analogRead+0xd8>)
    5a76:	781b      	ldrb	r3, [r3, #0]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d12a      	bne.n	5ad2 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    5a7c:	0632      	lsls	r2, r6, #24
    5a7e:	d42c      	bmi.n	5ada <analogRead+0x76>
#endif

	__disable_irq();
    5a80:	b672      	cpsid	i
    5a82:	4d2f      	ldr	r5, [pc, #188]	; (5b40 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    5a84:	4c2f      	ldr	r4, [pc, #188]	; (5b44 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    5a86:	462f      	mov	r7, r5
    5a88:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    5a8a:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    5a8c:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    5a8e:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    5a90:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    5a92:	6823      	ldr	r3, [r4, #0]
    5a94:	061b      	lsls	r3, r3, #24
    5a96:	d40c      	bmi.n	5ab2 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    5a98:	783b      	ldrb	r3, [r7, #0]
    5a9a:	b91b      	cbnz	r3, 5aa4 <analogRead+0x40>
    5a9c:	e7f4      	b.n	5a88 <analogRead+0x24>
    5a9e:	782b      	ldrb	r3, [r5, #0]
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d0f1      	beq.n	5a88 <analogRead+0x24>
		__enable_irq();
    5aa4:	b662      	cpsie	i
		yield();
    5aa6:	f001 fb97 	bl	71d8 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    5aaa:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    5aac:	6823      	ldr	r3, [r4, #0]
    5aae:	0618      	lsls	r0, r3, #24
    5ab0:	d5f5      	bpl.n	5a9e <analogRead+0x3a>
			result = ADC0_RA;
    5ab2:	4b25      	ldr	r3, [pc, #148]	; (5b48 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    5ab4:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    5ab6:	2200      	movs	r2, #0
    5ab8:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    5aba:	b662      	cpsie	i
			result >>= analog_right_shift;
    5abc:	4a23      	ldr	r2, [pc, #140]	; (5b4c <analogRead+0xe8>)
    5abe:	7810      	ldrb	r0, [r2, #0]
    5ac0:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    5ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    5ac8:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    5aca:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    5acc:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    5ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    5ad2:	f7ff feb5 	bl	5840 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    5ad6:	0632      	lsls	r2, r6, #24
    5ad8:	d5d2      	bpl.n	5a80 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    5ada:	b672      	cpsid	i
    5adc:	4d1c      	ldr	r5, [pc, #112]	; (5b50 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    5ade:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5b5c <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    5ae2:	4c1c      	ldr	r4, [pc, #112]	; (5b54 <analogRead+0xf0>)
    5ae4:	f006 0740 	and.w	r7, r6, #64	; 0x40
    5ae8:	b2ff      	uxtb	r7, r7
    5aea:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    5aee:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    5af2:	b1df      	cbz	r7, 5b2c <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    5af4:	f023 0310 	bic.w	r3, r3, #16
    5af8:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    5afc:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    5afe:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    5b00:	4a13      	ldr	r2, [pc, #76]	; (5b50 <analogRead+0xec>)
    5b02:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    5b04:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    5b06:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    5b08:	6823      	ldr	r3, [r4, #0]
    5b0a:	0619      	lsls	r1, r3, #24
    5b0c:	d40c      	bmi.n	5b28 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    5b0e:	7813      	ldrb	r3, [r2, #0]
    5b10:	b91b      	cbnz	r3, 5b1a <analogRead+0xb6>
    5b12:	e7ec      	b.n	5aee <analogRead+0x8a>
    5b14:	782b      	ldrb	r3, [r5, #0]
    5b16:	2b00      	cmp	r3, #0
    5b18:	d0e9      	beq.n	5aee <analogRead+0x8a>
		__enable_irq();
    5b1a:	b662      	cpsie	i
		yield();
    5b1c:	f001 fb5c 	bl	71d8 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    5b20:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    5b22:	6823      	ldr	r3, [r4, #0]
    5b24:	061b      	lsls	r3, r3, #24
    5b26:	d5f5      	bpl.n	5b14 <analogRead+0xb0>
			result = ADC1_RA;
    5b28:	4b0b      	ldr	r3, [pc, #44]	; (5b58 <analogRead+0xf4>)
    5b2a:	e7c3      	b.n	5ab4 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    5b2c:	f043 0310 	orr.w	r3, r3, #16
    5b30:	f8c8 3000 	str.w	r3, [r8]
    5b34:	e7e2      	b.n	5afc <analogRead+0x98>
    5b36:	bf00      	nop
    5b38:	00009de4 	.word	0x00009de4
    5b3c:	1fff94e1 	.word	0x1fff94e1
    5b40:	1fff94e3 	.word	0x1fff94e3
    5b44:	4003b000 	.word	0x4003b000
    5b48:	4003b010 	.word	0x4003b010
    5b4c:	1fff94e0 	.word	0x1fff94e0
    5b50:	1fff94e2 	.word	0x1fff94e2
    5b54:	400bb000 	.word	0x400bb000
    5b58:	400bb010 	.word	0x400bb010
    5b5c:	400bb00c 	.word	0x400bb00c

00005b60 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    5b60:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    5b62:	4c10      	ldr	r4, [pc, #64]	; (5ba4 <fault_isr+0x44>)
    5b64:	e008      	b.n	5b78 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    5b66:	6823      	ldr	r3, [r4, #0]
    5b68:	0559      	lsls	r1, r3, #21
    5b6a:	d40d      	bmi.n	5b88 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    5b6c:	6823      	ldr	r3, [r4, #0]
    5b6e:	051a      	lsls	r2, r3, #20
    5b70:	d40f      	bmi.n	5b92 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    5b72:	6823      	ldr	r3, [r4, #0]
    5b74:	04db      	lsls	r3, r3, #19
    5b76:	d411      	bmi.n	5b9c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    5b78:	6823      	ldr	r3, [r4, #0]
    5b7a:	0358      	lsls	r0, r3, #13
    5b7c:	d5f3      	bpl.n	5b66 <fault_isr+0x6>
    5b7e:	f000 fa37 	bl	5ff0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    5b82:	6823      	ldr	r3, [r4, #0]
    5b84:	0559      	lsls	r1, r3, #21
    5b86:	d5f1      	bpl.n	5b6c <fault_isr+0xc>
    5b88:	f001 fbaa 	bl	72e0 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    5b8c:	6823      	ldr	r3, [r4, #0]
    5b8e:	051a      	lsls	r2, r3, #20
    5b90:	d5ef      	bpl.n	5b72 <fault_isr+0x12>
    5b92:	f001 fc3b 	bl	740c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    5b96:	6823      	ldr	r3, [r4, #0]
    5b98:	04db      	lsls	r3, r3, #19
    5b9a:	d5ed      	bpl.n	5b78 <fault_isr+0x18>
    5b9c:	f001 fccc 	bl	7538 <uart2_status_isr>
    5ba0:	e7ea      	b.n	5b78 <fault_isr+0x18>
    5ba2:	bf00      	nop
    5ba4:	40048034 	.word	0x40048034

00005ba8 <unused_isr>:
	}
}

void unused_isr(void)
{
    5ba8:	b508      	push	{r3, lr}
	fault_isr();
    5baa:	f7ff ffd9 	bl	5b60 <fault_isr>
    5bae:	bf00      	nop

00005bb0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    5bb0:	4b01      	ldr	r3, [pc, #4]	; (5bb8 <startup_early_hook+0x8>)
    5bb2:	2210      	movs	r2, #16
    5bb4:	801a      	strh	r2, [r3, #0]
    5bb6:	4770      	bx	lr
    5bb8:	40052000 	.word	0x40052000

00005bbc <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    5bbc:	4770      	bx	lr
    5bbe:	bf00      	nop

00005bc0 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    5bc0:	7800      	ldrb	r0, [r0, #0]
}
    5bc2:	fab0 f080 	clz	r0, r0
    5bc6:	0940      	lsrs	r0, r0, #5
    5bc8:	4770      	bx	lr
    5bca:	bf00      	nop

00005bcc <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    5bcc:	2301      	movs	r3, #1
    5bce:	7003      	strb	r3, [r0, #0]
    5bd0:	4770      	bx	lr
    5bd2:	bf00      	nop

00005bd4 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    5bd4:	4a1c      	ldr	r2, [pc, #112]	; (5c48 <pinMode.part.2+0x74>)
    5bd6:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5bda:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    5bdc:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5bde:	d011      	beq.n	5c04 <pinMode.part.2+0x30>
    5be0:	2904      	cmp	r1, #4
    5be2:	d01b      	beq.n	5c1c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    5be4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    5be8:	2200      	movs	r2, #0
    5bea:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    5bee:	b129      	cbz	r1, 5bfc <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    5bf0:	2902      	cmp	r1, #2
    5bf2:	d020      	beq.n	5c36 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    5bf4:	2903      	cmp	r1, #3
    5bf6:	d022      	beq.n	5c3e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    5bf8:	601a      	str	r2, [r3, #0]
    5bfa:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    5bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c00:	601a      	str	r2, [r3, #0]
    5c02:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5c04:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5c08:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5c0c:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5c10:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    5c12:	681a      	ldr	r2, [r3, #0]
    5c14:	f022 0220 	bic.w	r2, r2, #32
    5c18:	601a      	str	r2, [r3, #0]
    5c1a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5c1c:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5c20:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5c24:	2001      	movs	r0, #1
    5c26:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5c2a:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    5c2c:	681a      	ldr	r2, [r3, #0]
    5c2e:	f042 0220 	orr.w	r2, r2, #32
    5c32:	601a      	str	r2, [r3, #0]
    5c34:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    5c36:	f240 1203 	movw	r2, #259	; 0x103
    5c3a:	601a      	str	r2, [r3, #0]
    5c3c:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    5c3e:	f44f 7281 	mov.w	r2, #258	; 0x102
    5c42:	601a      	str	r2, [r3, #0]
    5c44:	4770      	bx	lr
    5c46:	bf00      	nop
    5c48:	00009e10 	.word	0x00009e10

00005c4c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    5c4c:	b430      	push	{r4, r5}
	RTC_SR = 0;
    5c4e:	4b05      	ldr	r3, [pc, #20]	; (5c64 <rtc_set+0x18>)
	RTC_TPR = 0;
    5c50:	4d05      	ldr	r5, [pc, #20]	; (5c68 <rtc_set+0x1c>)
	RTC_TSR = t;
    5c52:	4c06      	ldr	r4, [pc, #24]	; (5c6c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    5c54:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    5c56:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    5c58:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    5c5a:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    5c5c:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    5c5e:	6019      	str	r1, [r3, #0]
}
    5c60:	bc30      	pop	{r4, r5}
    5c62:	4770      	bx	lr
    5c64:	4003d014 	.word	0x4003d014
    5c68:	4003d004 	.word	0x4003d004
    5c6c:	4003d000 	.word	0x4003d000

00005c70 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    5c70:	2821      	cmp	r0, #33	; 0x21
    5c72:	d801      	bhi.n	5c78 <pinMode+0x8>
    5c74:	f7ff bfae 	b.w	5bd4 <pinMode.part.2>
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop

00005c7c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    5c7c:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    5c7e:	490c      	ldr	r1, [pc, #48]	; (5cb0 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5c80:	4b0c      	ldr	r3, [pc, #48]	; (5cb4 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5c82:	4a0d      	ldr	r2, [pc, #52]	; (5cb8 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5c84:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    5c86:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5c88:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    5c8a:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5c8c:	0152      	lsls	r2, r2, #5
    5c8e:	d502      	bpl.n	5c96 <micros+0x1a>
    5c90:	2b32      	cmp	r3, #50	; 0x32
    5c92:	bf88      	it	hi
    5c94:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5c96:	4909      	ldr	r1, [pc, #36]	; (5cbc <micros+0x40>)
    5c98:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    5c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5ca0:	33ff      	adds	r3, #255	; 0xff
    5ca2:	fba1 1303 	umull	r1, r3, r1, r3
    5ca6:	fb02 f000 	mul.w	r0, r2, r0
}
    5caa:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    5cae:	4770      	bx	lr
    5cb0:	1fff94e8 	.word	0x1fff94e8
    5cb4:	e000e018 	.word	0xe000e018
    5cb8:	e000ed04 	.word	0xe000ed04
    5cbc:	aaaaaaab 	.word	0xaaaaaaab

00005cc0 <delay>:

void delay(uint32_t ms)
{
    5cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5cc4:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    5cc6:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    5cc8:	4f20      	ldr	r7, [pc, #128]	; (5d4c <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5cca:	4b21      	ldr	r3, [pc, #132]	; (5d50 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5ccc:	4a21      	ldr	r2, [pc, #132]	; (5d54 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5cce:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    5cd0:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5cd2:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    5cd4:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5cd6:	0152      	lsls	r2, r2, #5
    5cd8:	d502      	bpl.n	5ce0 <delay+0x20>
    5cda:	2b32      	cmp	r3, #50	; 0x32
    5cdc:	bf88      	it	hi
    5cde:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    5ce0:	b395      	cbz	r5, 5d48 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5ce2:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    5ce6:	4e1c      	ldr	r6, [pc, #112]	; (5d58 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5ce8:	f8df 9064 	ldr.w	r9, [pc, #100]	; 5d50 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5cec:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5d54 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5cf0:	33ff      	adds	r3, #255	; 0xff
    5cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5cf6:	fba6 1303 	umull	r1, r3, r6, r3
    5cfa:	fb02 f404 	mul.w	r4, r2, r4
    5cfe:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    5d02:	b672      	cpsid	i
	current = SYST_CVR;
    5d04:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    5d08:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5d0a:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    5d0e:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    5d10:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    5d14:	33ff      	adds	r3, #255	; 0xff
    5d16:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5d1a:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    5d1e:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    5d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5d26:	d002      	beq.n	5d2e <delay+0x6e>
    5d28:	2932      	cmp	r1, #50	; 0x32
    5d2a:	bf88      	it	hi
    5d2c:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    5d2e:	fb00 3302 	mla	r3, r0, r2, r3
    5d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    5d36:	d304      	bcc.n	5d42 <delay+0x82>
				ms--;
				if (ms == 0) return;
    5d38:	3d01      	subs	r5, #1
    5d3a:	d005      	beq.n	5d48 <delay+0x88>
				start += 1000;
    5d3c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    5d40:	e7df      	b.n	5d02 <delay+0x42>
			}
			yield();
    5d42:	f001 fa49 	bl	71d8 <yield>
		}
    5d46:	e7dc      	b.n	5d02 <delay+0x42>
    5d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d4c:	1fff94e8 	.word	0x1fff94e8
    5d50:	e000e018 	.word	0xe000e018
    5d54:	e000ed04 	.word	0xe000ed04
    5d58:	aaaaaaab 	.word	0xaaaaaaab

00005d5c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    5d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    5d5e:	4b2d      	ldr	r3, [pc, #180]	; (5e14 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    5d60:	492d      	ldr	r1, [pc, #180]	; (5e18 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5d62:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 5e34 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    5d66:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 5e38 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    5d6a:	4e2c      	ldr	r6, [pc, #176]	; (5e1c <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    5d6c:	4d2c      	ldr	r5, [pc, #176]	; (5e20 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    5d6e:	4c2d      	ldr	r4, [pc, #180]	; (5e24 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    5d70:	4a2d      	ldr	r2, [pc, #180]	; (5e28 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    5d72:	4f2e      	ldr	r7, [pc, #184]	; (5e2c <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    5d74:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    5d78:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    5d7a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    5d7e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    5d80:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    5d84:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    5d86:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    5d8a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    5d8c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    5d90:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    5d92:	2000      	movs	r0, #0
    5d94:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5d96:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    5d98:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    5d9c:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5da0:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    5da4:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    5da6:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    5da8:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    5daa:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    5dac:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    5dae:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    5db0:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5db2:	2209      	movs	r2, #9
    5db4:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    5db8:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    5dbc:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    5dc0:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    5dc4:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    5dc8:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    5dcc:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    5dd0:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    5dd2:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5dd6:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    5dda:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    5dde:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    5de2:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    5de4:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5de8:	4811      	ldr	r0, [pc, #68]	; (5e30 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    5dea:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    5dec:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    5df0:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    5df4:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    5df6:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5df8:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    5dfa:	f7ff fdc3 	bl	5984 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    5dfe:	2019      	movs	r0, #25
    5e00:	f7ff ff5e 	bl	5cc0 <delay>
	usb_init();
    5e04:	f000 fe5c 	bl	6ac0 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    5e08:	f240 1013 	movw	r0, #275	; 0x113
}
    5e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    5e10:	f7ff bf56 	b.w	5cc0 <delay>
    5e14:	e000e108 	.word	0xe000e108
    5e18:	40038004 	.word	0x40038004
    5e1c:	40038014 	.word	0x40038014
    5e20:	40038024 	.word	0x40038024
    5e24:	4003802c 	.word	0x4003802c
    5e28:	4003801c 	.word	0x4003801c
    5e2c:	40038034 	.word	0x40038034
    5e30:	400b8000 	.word	0x400b8000
    5e34:	4003800c 	.word	0x4003800c
    5e38:	40038008 	.word	0x40038008

00005e3c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    5e3c:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    5e3e:	2b03      	cmp	r3, #3
    5e40:	d814      	bhi.n	5e6c <usb_rx+0x30>
	__disable_irq();
    5e42:	b672      	cpsid	i
	ret = rx_first[endpoint];
    5e44:	490a      	ldr	r1, [pc, #40]	; (5e70 <usb_rx+0x34>)
    5e46:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    5e4a:	b168      	cbz	r0, 5e68 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    5e4c:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    5e4e:	4c09      	ldr	r4, [pc, #36]	; (5e74 <usb_rx+0x38>)
    5e50:	8805      	ldrh	r5, [r0, #0]
    5e52:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    5e56:	6846      	ldr	r6, [r0, #4]
    5e58:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    5e5c:	1b52      	subs	r2, r2, r5
    5e5e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    5e62:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    5e64:	bc70      	pop	{r4, r5, r6}
    5e66:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    5e68:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    5e6a:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    5e6c:	2000      	movs	r0, #0
    5e6e:	4770      	bx	lr
    5e70:	1fff9544 	.word	0x1fff9544
    5e74:	1fff9794 	.word	0x1fff9794

00005e78 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    5e78:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5e7a:	2803      	cmp	r0, #3
    5e7c:	d80b      	bhi.n	5e96 <usb_tx_packet_count+0x1e>
	__disable_irq();
    5e7e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    5e80:	4b07      	ldr	r3, [pc, #28]	; (5ea0 <usb_tx_packet_count+0x28>)
    5e82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e86:	b143      	cbz	r3, 5e9a <usb_tx_packet_count+0x22>
    5e88:	2000      	movs	r0, #0
    5e8a:	685b      	ldr	r3, [r3, #4]
    5e8c:	3001      	adds	r0, #1
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d1fb      	bne.n	5e8a <usb_tx_packet_count+0x12>
	__enable_irq();
    5e92:	b662      	cpsie	i
	return count;
    5e94:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5e96:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    5e98:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    5e9a:	4618      	mov	r0, r3
    5e9c:	e7f9      	b.n	5e92 <usb_tx_packet_count+0x1a>
    5e9e:	bf00      	nop
    5ea0:	1fff9598 	.word	0x1fff9598

00005ea4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    5ea4:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    5ea6:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5ea8:	4a2b      	ldr	r2, [pc, #172]	; (5f58 <usb_rx_memory+0xb4>)
    5eaa:	7813      	ldrb	r3, [r2, #0]
    5eac:	071d      	lsls	r5, r3, #28
    5eae:	d506      	bpl.n	5ebe <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5eb0:	4b2a      	ldr	r3, [pc, #168]	; (5f5c <usb_rx_memory+0xb8>)
    5eb2:	6a19      	ldr	r1, [r3, #32]
    5eb4:	2900      	cmp	r1, #0
    5eb6:	d036      	beq.n	5f26 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5eb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5eba:	2900      	cmp	r1, #0
    5ebc:	d041      	beq.n	5f42 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5ebe:	7853      	ldrb	r3, [r2, #1]
    5ec0:	071c      	lsls	r4, r3, #28
    5ec2:	d506      	bpl.n	5ed2 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5ec4:	4b25      	ldr	r3, [pc, #148]	; (5f5c <usb_rx_memory+0xb8>)
    5ec6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    5ec8:	2900      	cmp	r1, #0
    5eca:	d03e      	beq.n	5f4a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5ecc:	6c99      	ldr	r1, [r3, #72]	; 0x48
    5ece:	2900      	cmp	r1, #0
    5ed0:	d039      	beq.n	5f46 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5ed2:	7893      	ldrb	r3, [r2, #2]
    5ed4:	0719      	lsls	r1, r3, #28
    5ed6:	d505      	bpl.n	5ee4 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5ed8:	4b20      	ldr	r3, [pc, #128]	; (5f5c <usb_rx_memory+0xb8>)
    5eda:	6e19      	ldr	r1, [r3, #96]	; 0x60
    5edc:	2900      	cmp	r1, #0
    5ede:	d036      	beq.n	5f4e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5ee0:	6e99      	ldr	r1, [r3, #104]	; 0x68
    5ee2:	b189      	cbz	r1, 5f08 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5ee4:	78d3      	ldrb	r3, [r2, #3]
    5ee6:	071b      	lsls	r3, r3, #28
    5ee8:	d507      	bpl.n	5efa <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5eea:	4b1c      	ldr	r3, [pc, #112]	; (5f5c <usb_rx_memory+0xb8>)
    5eec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5ef0:	b37a      	cbz	r2, 5f52 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5ef2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5ef6:	2111      	movs	r1, #17
    5ef8:	b13a      	cbz	r2, 5f0a <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    5efa:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    5efc:	4b18      	ldr	r3, [pc, #96]	; (5f60 <usb_rx_memory+0xbc>)
    5efe:	2200      	movs	r2, #0
    5f00:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    5f02:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    5f04:	f000 be68 	b.w	6bd8 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5f08:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    5f0a:	4c15      	ldr	r4, [pc, #84]	; (5f60 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5f0c:	4d15      	ldr	r5, [pc, #84]	; (5f64 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    5f0e:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5f10:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    5f14:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5f18:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    5f1a:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    5f1c:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    5f1e:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    5f20:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    5f22:	bc30      	pop	{r4, r5}
    5f24:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    5f26:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5f28:	4c0d      	ldr	r4, [pc, #52]	; (5f60 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5f2a:	4d0f      	ldr	r5, [pc, #60]	; (5f68 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    5f2c:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5f2e:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    5f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5f36:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5f38:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    5f3a:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5f3c:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    5f3e:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    5f40:	e7ef      	b.n	5f22 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5f42:	2105      	movs	r1, #5
    5f44:	e7e1      	b.n	5f0a <usb_rx_memory+0x66>
    5f46:	2109      	movs	r1, #9
    5f48:	e7df      	b.n	5f0a <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    5f4a:	2208      	movs	r2, #8
    5f4c:	e7ec      	b.n	5f28 <usb_rx_memory+0x84>
    5f4e:	220c      	movs	r2, #12
    5f50:	e7ea      	b.n	5f28 <usb_rx_memory+0x84>
    5f52:	2210      	movs	r2, #16
    5f54:	e7e8      	b.n	5f28 <usb_rx_memory+0x84>
    5f56:	bf00      	nop
    5f58:	00009f4c 	.word	0x00009f4c
    5f5c:	1fff8000 	.word	0x1fff8000
    5f60:	1fff95c1 	.word	0x1fff95c1
    5f64:	004000c8 	.word	0x004000c8
    5f68:	00400088 	.word	0x00400088

00005f6c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    5f6c:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    5f6e:	2b03      	cmp	r3, #3
    5f70:	d81d      	bhi.n	5fae <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5f72:	4a1b      	ldr	r2, [pc, #108]	; (5fe0 <usb_tx+0x74>)
    5f74:	0140      	lsls	r0, r0, #5
    5f76:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    5f7a:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5f7c:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    5f7e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    5f80:	4c18      	ldr	r4, [pc, #96]	; (5fe4 <usb_tx+0x78>)
    5f82:	5ce2      	ldrb	r2, [r4, r3]
    5f84:	2a03      	cmp	r2, #3
    5f86:	d81b      	bhi.n	5fc0 <usb_tx+0x54>
    5f88:	e8df f002 	tbb	[pc, r2]
    5f8c:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    5f90:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5f92:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    5f94:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5f96:	f010 0f08 	tst.w	r0, #8
    5f9a:	bf14      	ite	ne
    5f9c:	23c8      	movne	r3, #200	; 0xc8
    5f9e:	2388      	moveq	r3, #136	; 0x88
    5fa0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5fa4:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5fa6:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5fa8:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    5faa:	b662      	cpsie	i
}
    5fac:	bc30      	pop	{r4, r5}
    5fae:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    5fb0:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    5fb2:	2202      	movs	r2, #2
		break;
    5fb4:	e7ed      	b.n	5f92 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    5fb6:	2205      	movs	r2, #5
    5fb8:	e7eb      	b.n	5f92 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    5fba:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    5fbc:	2204      	movs	r2, #4
		break;
    5fbe:	e7e8      	b.n	5f92 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    5fc0:	4a09      	ldr	r2, [pc, #36]	; (5fe8 <usb_tx+0x7c>)
    5fc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5fc6:	b138      	cbz	r0, 5fd8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    5fc8:	4a08      	ldr	r2, [pc, #32]	; (5fec <usb_tx+0x80>)
    5fca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5fce:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    5fd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    5fd4:	b662      	cpsie	i
		return;
    5fd6:	e7e9      	b.n	5fac <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    5fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    5fdc:	4a03      	ldr	r2, [pc, #12]	; (5fec <usb_tx+0x80>)
    5fde:	e7f7      	b.n	5fd0 <usb_tx+0x64>
    5fe0:	1fff8000 	.word	0x1fff8000
    5fe4:	1fff95d0 	.word	0x1fff95d0
    5fe8:	1fff9598 	.word	0x1fff9598
    5fec:	1fff95a8 	.word	0x1fff95a8

00005ff0 <usb_isr>:
}



void usb_isr(void)
{
    5ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    5ff4:	f8df b30c 	ldr.w	fp, [pc, #780]	; 6304 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    5ff8:	f8df a30c 	ldr.w	sl, [pc, #780]	; 6308 <usb_isr+0x318>
}



void usb_isr(void)
{
    5ffc:	b087      	sub	sp, #28
    5ffe:	e044      	b.n	608a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    6000:	4fab      	ldr	r7, [pc, #684]	; (62b0 <usb_isr+0x2c0>)
    6002:	ea4f 0893 	mov.w	r8, r3, lsr #2
    6006:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    600a:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    600c:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    6010:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    6014:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6016:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    601a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    601e:	2b00      	cmp	r3, #0
    6020:	f040 8102 	bne.w	6228 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    6024:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    6028:	0c1b      	lsrs	r3, r3, #16
    602a:	b299      	uxth	r1, r3
    602c:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    6030:	2b00      	cmp	r3, #0
    6032:	f000 80f0 	beq.w	6216 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    6036:	4b9f      	ldr	r3, [pc, #636]	; (62b4 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    6038:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    603c:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    6040:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    6044:	2a00      	cmp	r2, #0
    6046:	f000 82c5 	beq.w	65d4 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    604a:	4d9b      	ldr	r5, [pc, #620]	; (62b8 <usb_isr+0x2c8>)
    604c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    6050:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    6052:	4c9a      	ldr	r4, [pc, #616]	; (62bc <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    6054:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    6058:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    605c:	4419      	add	r1, r3
    605e:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    6062:	f000 fd99 	bl	6b98 <usb_malloc>
					if (packet) {
    6066:	2800      	cmp	r0, #0
    6068:	f000 82ad 	beq.w	65c6 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    606c:	4a94      	ldr	r2, [pc, #592]	; (62c0 <usb_isr+0x2d0>)
    606e:	4b95      	ldr	r3, [pc, #596]	; (62c4 <usb_isr+0x2d4>)
    6070:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    6074:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    6078:	bf18      	it	ne
    607a:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    607c:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    6080:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    6084:	2308      	movs	r3, #8
    6086:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    608a:	f89b 4000 	ldrb.w	r4, [fp]
    608e:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    6090:	0761      	lsls	r1, r4, #29
    6092:	d51a      	bpl.n	60ca <usb_isr+0xda>
		if (usb_configuration) {
    6094:	4b8c      	ldr	r3, [pc, #560]	; (62c8 <usb_isr+0x2d8>)
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	b1a3      	cbz	r3, 60c4 <usb_isr+0xd4>
			t = usb_reboot_timer;
    609a:	498c      	ldr	r1, [pc, #560]	; (62cc <usb_isr+0x2dc>)
    609c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    609e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    60a2:	b122      	cbz	r2, 60ae <usb_isr+0xbe>
				usb_reboot_timer = --t;
    60a4:	3b01      	subs	r3, #1
    60a6:	b2db      	uxtb	r3, r3
    60a8:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    60aa:	b903      	cbnz	r3, 60ae <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    60ac:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    60ae:	4988      	ldr	r1, [pc, #544]	; (62d0 <usb_isr+0x2e0>)
    60b0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    60b2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    60b6:	b12a      	cbz	r2, 60c4 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    60b8:	3b01      	subs	r3, #1
    60ba:	b2db      	uxtb	r3, r3
    60bc:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    60be:	2b00      	cmp	r3, #0
    60c0:	f000 8257 	beq.w	6572 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    60c4:	2304      	movs	r3, #4
    60c6:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    60ca:	f004 0308 	and.w	r3, r4, #8
    60ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    60d2:	2b00      	cmp	r3, #0
    60d4:	f000 80cc 	beq.w	6270 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    60d8:	f89a 3000 	ldrb.w	r3, [sl]
    60dc:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    60de:	091e      	lsrs	r6, r3, #4
    60e0:	d18e      	bne.n	6000 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    60e2:	089c      	lsrs	r4, r3, #2
    60e4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 62b0 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    60e8:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    60ec:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    60f0:	f3c2 0283 	ubfx	r2, r2, #2, #4
    60f4:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    60f6:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    60f8:	2a0c      	cmp	r2, #12
    60fa:	f200 8088 	bhi.w	620e <usb_isr+0x21e>
    60fe:	e8df f002 	tbb	[pc, r2]
    6102:	7c7c      	.short	0x7c7c
    6104:	86868686 	.word	0x86868686
    6108:	86478686 	.word	0x86478686
    610c:	8686      	.short	0x8686
    610e:	07          	.byte	0x07
    610f:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    6110:	6808      	ldr	r0, [r1, #0]
    6112:	4d70      	ldr	r5, [pc, #448]	; (62d4 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    6114:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6116:	4f70      	ldr	r7, [pc, #448]	; (62d8 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6118:	4e70      	ldr	r6, [pc, #448]	; (62dc <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    611a:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    611c:	b281      	uxth	r1, r0
    611e:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    6122:	4b67      	ldr	r3, [pc, #412]	; (62c0 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    6124:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6126:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    612a:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    612c:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    612e:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6132:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    6134:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    6138:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    613c:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    6140:	4c5b      	ldr	r4, [pc, #364]	; (62b0 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6142:	f200 80e3 	bhi.w	630c <usb_isr+0x31c>
    6146:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    614a:	f080 8346 	bcs.w	67da <usb_isr+0x7ea>
    614e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    6152:	f000 82fc 	beq.w	674e <usb_isr+0x75e>
    6156:	f200 828d 	bhi.w	6674 <usb_isr+0x684>
    615a:	2980      	cmp	r1, #128	; 0x80
    615c:	f000 8377 	beq.w	684e <usb_isr+0x85e>
    6160:	2982      	cmp	r1, #130	; 0x82
    6162:	f040 82fa 	bne.w	675a <usb_isr+0x76a>
    6166:	88a9      	ldrh	r1, [r5, #4]
    6168:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    616c:	2904      	cmp	r1, #4
    616e:	f200 82f4 	bhi.w	675a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    6172:	485b      	ldr	r0, [pc, #364]	; (62e0 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    6174:	4c5b      	ldr	r4, [pc, #364]	; (62e4 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    6176:	0089      	lsls	r1, r1, #2
    6178:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    617a:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    617c:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    617e:	7802      	ldrb	r2, [r0, #0]
    6180:	0793      	lsls	r3, r2, #30
    6182:	f140 8458 	bpl.w	6a36 <usb_isr+0xa46>
    6186:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    618a:	f04f 0e02 	mov.w	lr, #2
    618e:	e342      	b.n	6816 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    6190:	4f51      	ldr	r7, [pc, #324]	; (62d8 <usb_isr+0x2e8>)
    6192:	683a      	ldr	r2, [r7, #0]
		if (data) {
    6194:	b332      	cbz	r2, 61e4 <usb_isr+0x1f4>
			size = ep0_tx_len;
    6196:	4b54      	ldr	r3, [pc, #336]	; (62e8 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6198:	4e50      	ldr	r6, [pc, #320]	; (62dc <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    619a:	4954      	ldr	r1, [pc, #336]	; (62ec <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    619c:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    619e:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    61a0:	780d      	ldrb	r5, [r1, #0]
    61a2:	2840      	cmp	r0, #64	; 0x40
    61a4:	4686      	mov	lr, r0
    61a6:	f045 0802 	orr.w	r8, r5, #2
    61aa:	bf28      	it	cs
    61ac:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    61b0:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    61b2:	f084 0401 	eor.w	r4, r4, #1
    61b6:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    61b8:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    61bc:	bf0c      	ite	eq
    61be:	2488      	moveq	r4, #136	; 0x88
    61c0:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    61c2:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    61c6:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    61c8:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    61cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    61d0:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    61d2:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    61d4:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    61d8:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    61da:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    61dc:	2800      	cmp	r0, #0
    61de:	f000 8145 	beq.w	646c <usb_isr+0x47c>
    61e2:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    61e4:	4b3b      	ldr	r3, [pc, #236]	; (62d4 <usb_isr+0x2e4>)
    61e6:	881a      	ldrh	r2, [r3, #0]
    61e8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    61ec:	d10f      	bne.n	620e <usb_isr+0x21e>
			setup.bRequest = 0;
    61ee:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    61f0:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    61f2:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    61f4:	4b3e      	ldr	r3, [pc, #248]	; (62f0 <usb_isr+0x300>)
    61f6:	701a      	strb	r2, [r3, #0]
    61f8:	e009      	b.n	620e <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    61fa:	4a36      	ldr	r2, [pc, #216]	; (62d4 <usb_isr+0x2e4>)
    61fc:	8810      	ldrh	r0, [r2, #0]
    61fe:	f242 0221 	movw	r2, #8225	; 0x2021
    6202:	4290      	cmp	r0, r2
    6204:	f000 8137 	beq.w	6476 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    6208:	4a2d      	ldr	r2, [pc, #180]	; (62c0 <usb_isr+0x2d0>)
    620a:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    620e:	4a39      	ldr	r2, [pc, #228]	; (62f4 <usb_isr+0x304>)
    6210:	2301      	movs	r3, #1
    6212:	7013      	strb	r3, [r2, #0]
    6214:	e736      	b.n	6084 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    6216:	4a2a      	ldr	r2, [pc, #168]	; (62c0 <usb_isr+0x2d0>)
    6218:	4b2a      	ldr	r3, [pc, #168]	; (62c4 <usb_isr+0x2d4>)
    621a:	f019 0f08 	tst.w	r9, #8
    621e:	bf18      	it	ne
    6220:	4613      	movne	r3, r2
    6222:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    6226:	e72d      	b.n	6084 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    6228:	f000 fcd6 	bl	6bd8 <usb_free>
				packet = tx_first[endpoint];
    622c:	4a32      	ldr	r2, [pc, #200]	; (62f8 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    622e:	4933      	ldr	r1, [pc, #204]	; (62fc <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    6230:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    6234:	2b00      	cmp	r3, #0
    6236:	f000 81d1 	beq.w	65dc <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    623a:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    623c:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    623e:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    6242:	f103 0208 	add.w	r2, r3, #8
    6246:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    624a:	2c03      	cmp	r4, #3
    624c:	d805      	bhi.n	625a <usb_isr+0x26a>
    624e:	e8df f004 	tbb	[pc, r4]
    6252:	022c      	.short	0x022c
    6254:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    6256:	2202      	movs	r2, #2
    6258:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    625a:	881a      	ldrh	r2, [r3, #0]
    625c:	f019 0f08 	tst.w	r9, #8
    6260:	bf0c      	ite	eq
    6262:	2388      	moveq	r3, #136	; 0x88
    6264:	23c8      	movne	r3, #200	; 0xc8
    6266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    626a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    626e:	e709      	b.n	6084 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    6270:	07e0      	lsls	r0, r4, #31
    6272:	f100 8181 	bmi.w	6578 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    6276:	0621      	lsls	r1, r4, #24
    6278:	f100 81f2 	bmi.w	6660 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    627c:	07a2      	lsls	r2, r4, #30
    627e:	d506      	bpl.n	628e <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    6280:	4a1f      	ldr	r2, [pc, #124]	; (6300 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    6282:	4920      	ldr	r1, [pc, #128]	; (6304 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    6284:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    6286:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    6288:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    628a:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    628c:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    628e:	06e3      	lsls	r3, r4, #27
    6290:	d502      	bpl.n	6298 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    6292:	4b1c      	ldr	r3, [pc, #112]	; (6304 <usb_isr+0x314>)
    6294:	2210      	movs	r2, #16
    6296:	701a      	strb	r2, [r3, #0]
	}

}
    6298:	b007      	add	sp, #28
    629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    629e:	2204      	movs	r2, #4
    62a0:	558a      	strb	r2, [r1, r6]
						break;
    62a2:	e7da      	b.n	625a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    62a4:	2205      	movs	r2, #5
    62a6:	558a      	strb	r2, [r1, r6]
						break;
    62a8:	e7d7      	b.n	625a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    62aa:	2203      	movs	r2, #3
    62ac:	558a      	strb	r2, [r1, r6]
						break;
    62ae:	e7d4      	b.n	625a <usb_isr+0x26a>
    62b0:	1fff8000 	.word	0x1fff8000
    62b4:	1fff9544 	.word	0x1fff9544
    62b8:	1fff94f0 	.word	0x1fff94f0
    62bc:	1fff9794 	.word	0x1fff9794
    62c0:	004000c8 	.word	0x004000c8
    62c4:	00400088 	.word	0x00400088
    62c8:	1fff95cc 	.word	0x1fff95cc
    62cc:	1fff9555 	.word	0x1fff9555
    62d0:	1fff95d4 	.word	0x1fff95d4
    62d4:	1fff95b8 	.word	0x1fff95b8
    62d8:	1fff94ec 	.word	0x1fff94ec
    62dc:	1fff9554 	.word	0x1fff9554
    62e0:	400720c0 	.word	0x400720c0
    62e4:	1fff95c4 	.word	0x1fff95c4
    62e8:	1fff9500 	.word	0x1fff9500
    62ec:	1fff95c0 	.word	0x1fff95c0
    62f0:	40072098 	.word	0x40072098
    62f4:	40072094 	.word	0x40072094
    62f8:	1fff9598 	.word	0x1fff9598
    62fc:	1fff95d0 	.word	0x1fff95d0
    6300:	40072088 	.word	0x40072088
    6304:	40072080 	.word	0x40072080
    6308:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    630c:	f242 0021 	movw	r0, #8225	; 0x2021
    6310:	4281      	cmp	r1, r0
    6312:	f000 812a 	beq.w	656a <usb_isr+0x57a>
    6316:	f200 80d8 	bhi.w	64ca <usb_isr+0x4da>
    631a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    631e:	f000 8276 	beq.w	680e <usb_isr+0x81e>
    6322:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    6326:	f040 8218 	bne.w	675a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    632a:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    632c:	49b3      	ldr	r1, [pc, #716]	; (65fc <usb_isr+0x60c>)
    632e:	78a8      	ldrb	r0, [r5, #2]
    6330:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    6332:	0612      	lsls	r2, r2, #24
    6334:	f100 833a 	bmi.w	69ac <usb_isr+0x9bc>
    6338:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    633c:	49b0      	ldr	r1, [pc, #704]	; (6600 <usb_isr+0x610>)
    633e:	0613      	lsls	r3, r2, #24
    6340:	f100 830c 	bmi.w	695c <usb_isr+0x96c>
    6344:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    6348:	49ad      	ldr	r1, [pc, #692]	; (6600 <usb_isr+0x610>)
    634a:	0615      	lsls	r5, r2, #24
    634c:	f100 8301 	bmi.w	6952 <usb_isr+0x962>
    6350:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    6354:	49aa      	ldr	r1, [pc, #680]	; (6600 <usb_isr+0x610>)
    6356:	0614      	lsls	r4, r2, #24
    6358:	f100 82f6 	bmi.w	6948 <usb_isr+0x958>
    635c:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    6360:	49a7      	ldr	r1, [pc, #668]	; (6600 <usb_isr+0x610>)
    6362:	0610      	lsls	r0, r2, #24
    6364:	f100 834a 	bmi.w	69fc <usb_isr+0xa0c>
    6368:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    636c:	49a4      	ldr	r1, [pc, #656]	; (6600 <usb_isr+0x610>)
    636e:	0612      	lsls	r2, r2, #24
    6370:	f100 833f 	bmi.w	69f2 <usb_isr+0xa02>
    6374:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    6378:	49a1      	ldr	r1, [pc, #644]	; (6600 <usb_isr+0x610>)
    637a:	0613      	lsls	r3, r2, #24
    637c:	f100 8334 	bmi.w	69e8 <usb_isr+0x9f8>
    6380:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    6384:	499e      	ldr	r1, [pc, #632]	; (6600 <usb_isr+0x610>)
    6386:	0615      	lsls	r5, r2, #24
    6388:	f100 8329 	bmi.w	69de <usb_isr+0x9ee>
    638c:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    6390:	499b      	ldr	r1, [pc, #620]	; (6600 <usb_isr+0x610>)
    6392:	0614      	lsls	r4, r2, #24
    6394:	f100 831e 	bmi.w	69d4 <usb_isr+0x9e4>
    6398:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    639c:	4998      	ldr	r1, [pc, #608]	; (6600 <usb_isr+0x610>)
    639e:	0610      	lsls	r0, r2, #24
    63a0:	f100 8313 	bmi.w	69ca <usb_isr+0x9da>
    63a4:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    63a8:	4995      	ldr	r1, [pc, #596]	; (6600 <usb_isr+0x610>)
    63aa:	0612      	lsls	r2, r2, #24
    63ac:	f100 8308 	bmi.w	69c0 <usb_isr+0x9d0>
    63b0:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    63b4:	4992      	ldr	r1, [pc, #584]	; (6600 <usb_isr+0x610>)
    63b6:	0613      	lsls	r3, r2, #24
    63b8:	f100 82fd 	bmi.w	69b6 <usb_isr+0x9c6>
    63bc:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    63c0:	498f      	ldr	r1, [pc, #572]	; (6600 <usb_isr+0x610>)
    63c2:	0615      	lsls	r5, r2, #24
    63c4:	f100 8331 	bmi.w	6a2a <usb_isr+0xa3a>
    63c8:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    63cc:	498c      	ldr	r1, [pc, #560]	; (6600 <usb_isr+0x610>)
    63ce:	0614      	lsls	r4, r2, #24
    63d0:	f100 8325 	bmi.w	6a1e <usb_isr+0xa2e>
    63d4:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    63d8:	4989      	ldr	r1, [pc, #548]	; (6600 <usb_isr+0x610>)
    63da:	0610      	lsls	r0, r2, #24
    63dc:	f100 8319 	bmi.w	6a12 <usb_isr+0xa22>
    63e0:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    63e4:	4986      	ldr	r1, [pc, #536]	; (6600 <usb_isr+0x610>)
    63e6:	0612      	lsls	r2, r2, #24
    63e8:	f100 830d 	bmi.w	6a06 <usb_isr+0xa16>
    63ec:	4885      	ldr	r0, [pc, #532]	; (6604 <usb_isr+0x614>)
    63ee:	4a86      	ldr	r2, [pc, #536]	; (6608 <usb_isr+0x618>)
    63f0:	4986      	ldr	r1, [pc, #536]	; (660c <usb_isr+0x61c>)
    63f2:	9001      	str	r0, [sp, #4]
    63f4:	4886      	ldr	r0, [pc, #536]	; (6610 <usb_isr+0x620>)
    63f6:	4d87      	ldr	r5, [pc, #540]	; (6614 <usb_isr+0x624>)
    63f8:	4c87      	ldr	r4, [pc, #540]	; (6618 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    63fa:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    63fc:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    63fe:	9605      	str	r6, [sp, #20]
    6400:	9502      	str	r5, [sp, #8]
    6402:	4680      	mov	r8, r0
    6404:	460f      	mov	r7, r1
    6406:	4616      	mov	r6, r2
    6408:	461d      	mov	r5, r3
    640a:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    640c:	6830      	ldr	r0, [r6, #0]
			while (p) {
    640e:	b128      	cbz	r0, 641c <usb_isr+0x42c>
				n = p->next;
    6410:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    6412:	f000 fbe1 	bl	6bd8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    6416:	4620      	mov	r0, r4
    6418:	2c00      	cmp	r4, #0
    641a:	d1f9      	bne.n	6410 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    641c:	2300      	movs	r3, #0
    641e:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    6420:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    6422:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    6424:	461a      	mov	r2, r3
    6426:	2300      	movs	r3, #0
    6428:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    642c:	b128      	cbz	r0, 643a <usb_isr+0x44a>
				n = p->next;
    642e:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    6430:	f000 fbd2 	bl	6bd8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    6434:	4620      	mov	r0, r4
    6436:	2c00      	cmp	r4, #0
    6438:	d1f9      	bne.n	642e <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    643a:	2200      	movs	r2, #0
    643c:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    643e:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    6440:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    6444:	4611      	mov	r1, r2
    6446:	2200      	movs	r2, #0
    6448:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    644c:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    644e:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    6450:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    6452:	f04f 0100 	mov.w	r1, #0
    6456:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    645a:	2b03      	cmp	r3, #3
    645c:	f200 812b 	bhi.w	66b6 <usb_isr+0x6c6>
    6460:	e8df f013 	tbh	[pc, r3, lsl #1]
    6464:	01250170 	.word	0x01250170
    6468:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    646c:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    6470:	bf18      	it	ne
    6472:	2200      	movne	r2, #0
    6474:	e6b5      	b.n	61e2 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    6476:	4a69      	ldr	r2, [pc, #420]	; (661c <usb_isr+0x62c>)
    6478:	780d      	ldrb	r5, [r1, #0]
    647a:	7848      	ldrb	r0, [r1, #1]
    647c:	7015      	strb	r5, [r2, #0]
    647e:	7050      	strb	r0, [r2, #1]
    6480:	788d      	ldrb	r5, [r1, #2]
    6482:	78c8      	ldrb	r0, [r1, #3]
    6484:	7095      	strb	r5, [r2, #2]
    6486:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    6488:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    648a:	790d      	ldrb	r5, [r1, #4]
    648c:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    648e:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    6490:	794d      	ldrb	r5, [r1, #5]
    6492:	7989      	ldrb	r1, [r1, #6]
    6494:	7155      	strb	r5, [r2, #5]
    6496:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    6498:	f000 819b 	beq.w	67d2 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    649c:	4960      	ldr	r1, [pc, #384]	; (6620 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    649e:	4e61      	ldr	r6, [pc, #388]	; (6624 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    64a0:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    64a2:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    64a4:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    64a8:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    64aa:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    64ae:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    64b0:	bf0c      	ite	eq
    64b2:	2188      	moveq	r1, #136	; 0x88
    64b4:	21c8      	movne	r1, #200	; 0xc8
    64b6:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    64ba:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    64be:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    64c2:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    64c4:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    64c6:	6051      	str	r1, [r2, #4]
    64c8:	e69e      	b.n	6208 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    64ca:	f242 2021 	movw	r0, #8737	; 0x2221
    64ce:	4281      	cmp	r1, r0
    64d0:	f040 81cb 	bne.w	686a <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    64d4:	4b54      	ldr	r3, [pc, #336]	; (6628 <usb_isr+0x638>)
    64d6:	4c55      	ldr	r4, [pc, #340]	; (662c <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    64d8:	4955      	ldr	r1, [pc, #340]	; (6630 <usb_isr+0x640>)
    64da:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    64dc:	681d      	ldr	r5, [r3, #0]
    64de:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    64e0:	f8cd e004 	str.w	lr, [sp, #4]
    64e4:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    64e6:	2000      	movs	r0, #0
    64e8:	9002      	str	r0, [sp, #8]
    64ea:	4680      	mov	r8, r0
    64ec:	4684      	mov	ip, r0
    64ee:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    64f0:	494b      	ldr	r1, [pc, #300]	; (6620 <usb_isr+0x630>)
    64f2:	780d      	ldrb	r5, [r1, #0]
    64f4:	f045 0e02 	orr.w	lr, r5, #2
    64f8:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    64fc:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6502:	9b03      	ldr	r3, [sp, #12]
    6504:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6506:	bf0c      	ite	eq
    6508:	2488      	moveq	r4, #136	; 0x88
    650a:	24c8      	movne	r4, #200	; 0xc8
    650c:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6510:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6514:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    6518:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    651a:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    651c:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 6600 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    6520:	4b40      	ldr	r3, [pc, #256]	; (6624 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    6522:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 6620 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    6526:	2800      	cmp	r0, #0
    6528:	f040 811e 	bne.w	6768 <usb_isr+0x778>
    652c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    6530:	d11b      	bne.n	656a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6532:	f044 0c02 	orr.w	ip, r4, #2
    6536:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    653a:	9c02      	ldr	r4, [sp, #8]
    653c:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 6600 <usb_isr+0x610>
    6540:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6542:	2a00      	cmp	r2, #0
    6544:	f040 8126 	bne.w	6794 <usb_isr+0x7a4>
    6548:	0402      	lsls	r2, r0, #16
    654a:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    654e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6552:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6556:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    6558:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    655a:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    655c:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    655e:	2840      	cmp	r0, #64	; 0x40
    6560:	d103      	bne.n	656a <usb_isr+0x57a>
    6562:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    6564:	4a33      	ldr	r2, [pc, #204]	; (6634 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    6566:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    6568:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    656a:	4a33      	ldr	r2, [pc, #204]	; (6638 <usb_isr+0x648>)
    656c:	2301      	movs	r3, #1
    656e:	7013      	strb	r3, [r2, #0]
    6570:	e64d      	b.n	620e <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    6572:	f000 fc9d 	bl	6eb0 <usb_serial_flush_callback>
    6576:	e5a5      	b.n	60c4 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    6578:	4b21      	ldr	r3, [pc, #132]	; (6600 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    657a:	482f      	ldr	r0, [pc, #188]	; (6638 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    657c:	4928      	ldr	r1, [pc, #160]	; (6620 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    657e:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6580:	f04f 0e02 	mov.w	lr, #2
    6584:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6588:	4f2c      	ldr	r7, [pc, #176]	; (663c <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    658a:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    658c:	492c      	ldr	r1, [pc, #176]	; (6640 <usb_isr+0x650>)
    658e:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    6590:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    6592:	4e2c      	ldr	r6, [pc, #176]	; (6644 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    6594:	4d2c      	ldr	r5, [pc, #176]	; (6648 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    6596:	4c2d      	ldr	r4, [pc, #180]	; (664c <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    6598:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    659a:	210d      	movs	r1, #13
    659c:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    659e:	21ff      	movs	r1, #255	; 0xff
    65a0:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    65a2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 665c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    65a6:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    65a8:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    65aa:	4d29      	ldr	r5, [pc, #164]	; (6650 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    65ac:	4a29      	ldr	r2, [pc, #164]	; (6654 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    65ae:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    65b2:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    65b4:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    65b6:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    65ba:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    65bc:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    65be:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    65c0:	b007      	add	sp, #28
    65c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    65c6:	4a24      	ldr	r2, [pc, #144]	; (6658 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    65c8:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    65cc:	7813      	ldrb	r3, [r2, #0]
    65ce:	3301      	adds	r3, #1
    65d0:	7013      	strb	r3, [r2, #0]
    65d2:	e557      	b.n	6084 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    65d4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    65d8:	4d0e      	ldr	r5, [pc, #56]	; (6614 <usb_isr+0x624>)
    65da:	e53a      	b.n	6052 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    65dc:	5d8b      	ldrb	r3, [r1, r6]
    65de:	2b03      	cmp	r3, #3
    65e0:	f200 80f0 	bhi.w	67c4 <usb_isr+0x7d4>
    65e4:	a201      	add	r2, pc, #4	; (adr r2, 65ec <usb_isr+0x5fc>)
    65e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    65ea:	bf00      	nop
    65ec:	00006085 	.word	0x00006085
    65f0:	00006085 	.word	0x00006085
    65f4:	000066a9 	.word	0x000066a9
    65f8:	000066a3 	.word	0x000066a3
    65fc:	1fff95cc 	.word	0x1fff95cc
    6600:	1fff8000 	.word	0x1fff8000
    6604:	1fff95a8 	.word	0x1fff95a8
    6608:	1fff9544 	.word	0x1fff9544
    660c:	1fff9598 	.word	0x1fff9598
    6610:	1fff95d0 	.word	0x1fff95d0
    6614:	1fff94f0 	.word	0x1fff94f0
    6618:	1fff9794 	.word	0x1fff9794
    661c:	1fff979c 	.word	0x1fff979c
    6620:	1fff95c0 	.word	0x1fff95c0
    6624:	1fff9554 	.word	0x1fff9554
    6628:	1fff94e8 	.word	0x1fff94e8
    662c:	1fff97a4 	.word	0x1fff97a4
    6630:	1fff95e4 	.word	0x1fff95e4
    6634:	1fff9500 	.word	0x1fff9500
    6638:	40072094 	.word	0x40072094
    663c:	400720c0 	.word	0x400720c0
    6640:	00400088 	.word	0x00400088
    6644:	40072088 	.word	0x40072088
    6648:	40072080 	.word	0x40072080
    664c:	40072098 	.word	0x40072098
    6650:	1fff9504 	.word	0x1fff9504
    6654:	1fff9558 	.word	0x1fff9558
    6658:	1fff95c1 	.word	0x1fff95c1
    665c:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6660:	49c1      	ldr	r1, [pc, #772]	; (6968 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    6662:	4bc2      	ldr	r3, [pc, #776]	; (696c <usb_isr+0x97c>)
    6664:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6666:	200d      	movs	r0, #13
    6668:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    666a:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    666c:	07a2      	lsls	r2, r4, #30
    666e:	f57f ae0e 	bpl.w	628e <usb_isr+0x29e>
    6672:	e605      	b.n	6280 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6674:	f240 3202 	movw	r2, #770	; 0x302
    6678:	4291      	cmp	r1, r2
    667a:	f040 80ee 	bne.w	685a <usb_isr+0x86a>
    667e:	88a9      	ldrh	r1, [r5, #4]
    6680:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    6684:	2904      	cmp	r1, #4
    6686:	d868      	bhi.n	675a <usb_isr+0x76a>
    6688:	886a      	ldrh	r2, [r5, #2]
    668a:	2a00      	cmp	r2, #0
    668c:	d165      	bne.n	675a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    668e:	48b6      	ldr	r0, [pc, #728]	; (6968 <usb_isr+0x978>)
    6690:	f8cd e004 	str.w	lr, [sp, #4]
    6694:	0089      	lsls	r1, r1, #2
    6696:	4408      	add	r0, r1
    6698:	7801      	ldrb	r1, [r0, #0]
    669a:	f041 0102 	orr.w	r1, r1, #2
    669e:	7001      	strb	r1, [r0, #0]
    66a0:	e721      	b.n	64e6 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    66a2:	2301      	movs	r3, #1
    66a4:	558b      	strb	r3, [r1, r6]
						break;
    66a6:	e4ed      	b.n	6084 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    66a8:	2300      	movs	r3, #0
    66aa:	558b      	strb	r3, [r1, r6]
						break;
    66ac:	e4ea      	b.n	6084 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    66ae:	f04f 0301 	mov.w	r3, #1
    66b2:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    66b6:	3501      	adds	r5, #1
    66b8:	2d04      	cmp	r5, #4
    66ba:	f106 0604 	add.w	r6, r6, #4
    66be:	f107 0704 	add.w	r7, r7, #4
    66c2:	f108 0801 	add.w	r8, r8, #1
    66c6:	f47f aea1 	bne.w	640c <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    66ca:	4ca9      	ldr	r4, [pc, #676]	; (6970 <usb_isr+0x980>)
			*reg = epconf;
    66cc:	4ba9      	ldr	r3, [pc, #676]	; (6974 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    66ce:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    66d0:	4da9      	ldr	r5, [pc, #676]	; (6978 <usb_isr+0x988>)
    66d2:	9f04      	ldr	r7, [sp, #16]
    66d4:	9e05      	ldr	r6, [sp, #20]
    66d6:	2100      	movs	r1, #0
    66d8:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    66da:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    66dc:	0713      	lsls	r3, r2, #28
    66de:	f100 8105 	bmi.w	68ec <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    66e2:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    66e4:	49a5      	ldr	r1, [pc, #660]	; (697c <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    66e6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 6988 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    66ea:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    66ec:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    66ee:	f04f 0100 	mov.w	r1, #0
    66f2:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    66f6:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    66fa:	f100 80e0 	bmi.w	68be <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    66fe:	49a0      	ldr	r1, [pc, #640]	; (6980 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6700:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    6702:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6704:	2100      	movs	r1, #0
    6706:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    670a:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    670e:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6710:	f8df 8274 	ldr.w	r8, [pc, #628]	; 6988 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6714:	f100 8101 	bmi.w	691a <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6718:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    671a:	499a      	ldr	r1, [pc, #616]	; (6984 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    671c:	4c9a      	ldr	r4, [pc, #616]	; (6988 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    671e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6720:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6722:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6724:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    6728:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    672c:	f100 80b0 	bmi.w	6890 <usb_isr+0x8a0>
    6730:	7833      	ldrb	r3, [r6, #0]
    6732:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6734:	2100      	movs	r1, #0
    6736:	f083 0201 	eor.w	r2, r3, #1
    673a:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    673e:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    6742:	e6d0      	b.n	64e6 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    6744:	f04f 0300 	mov.w	r3, #0
    6748:	f888 3000 	strb.w	r3, [r8]
    674c:	e7b3      	b.n	66b6 <usb_isr+0x6c6>
    674e:	88a9      	ldrh	r1, [r5, #4]
    6750:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    6754:	2904      	cmp	r1, #4
    6756:	f240 808d 	bls.w	6874 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    675a:	4a83      	ldr	r2, [pc, #524]	; (6968 <usb_isr+0x978>)
    675c:	230f      	movs	r3, #15
    675e:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6760:	4a8a      	ldr	r2, [pc, #552]	; (698c <usb_isr+0x99c>)
    6762:	2301      	movs	r3, #1
    6764:	7013      	strb	r3, [r2, #0]
    6766:	e552      	b.n	620e <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    6768:	2840      	cmp	r0, #64	; 0x40
    676a:	f67f aee2 	bls.w	6532 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    676e:	f044 0402 	orr.w	r4, r4, #2
    6772:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    6776:	9e02      	ldr	r6, [sp, #8]
    6778:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    677a:	b1ba      	cbz	r2, 67ac <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    677c:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6780:	4a83      	ldr	r2, [pc, #524]	; (6990 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    6782:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6784:	4633      	mov	r3, r6
    6786:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6788:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    678c:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    678e:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    6792:	e6e7      	b.n	6564 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    6794:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6798:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    679a:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    679c:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    679e:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67a0:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    67a4:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67a6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    67aa:	e6d8      	b.n	655e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    67ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
    67b0:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    67b2:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67b4:	4a77      	ldr	r2, [pc, #476]	; (6994 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    67b6:	f888 5000 	strb.w	r5, [r8]
    67ba:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    67bc:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    67be:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    67c2:	e6cf      	b.n	6564 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    67c4:	f019 0f08 	tst.w	r9, #8
    67c8:	bf0c      	ite	eq
    67ca:	2302      	moveq	r3, #2
    67cc:	2303      	movne	r3, #3
    67ce:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    67d0:	e458      	b.n	6084 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    67d2:	4a71      	ldr	r2, [pc, #452]	; (6998 <usb_isr+0x9a8>)
    67d4:	210f      	movs	r1, #15
    67d6:	7011      	strb	r1, [r2, #0]
    67d8:	e660      	b.n	649c <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    67da:	4a70      	ldr	r2, [pc, #448]	; (699c <usb_isr+0x9ac>)
    67dc:	6854      	ldr	r4, [r2, #4]
    67de:	2c00      	cmp	r4, #0
    67e0:	d0bb      	beq.n	675a <usb_isr+0x76a>
    67e2:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    67e4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    67e8:	e003      	b.n	67f2 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    67ea:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    67ec:	6854      	ldr	r4, [r2, #4]
    67ee:	2c00      	cmp	r4, #0
    67f0:	d0b3      	beq.n	675a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    67f2:	8813      	ldrh	r3, [r2, #0]
    67f4:	4283      	cmp	r3, r0
    67f6:	d1f8      	bne.n	67ea <usb_isr+0x7fa>
    67f8:	8853      	ldrh	r3, [r2, #2]
    67fa:	4573      	cmp	r3, lr
    67fc:	d1f5      	bne.n	67ea <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    67fe:	0a00      	lsrs	r0, r0, #8
    6800:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    6802:	bf0c      	ite	eq
    6804:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    6808:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    680c:	e003      	b.n	6816 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    680e:	4a64      	ldr	r2, [pc, #400]	; (69a0 <usb_isr+0x9b0>)
    6810:	4c64      	ldr	r4, [pc, #400]	; (69a4 <usb_isr+0x9b4>)
    6812:	7812      	ldrb	r2, [r2, #0]
    6814:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    6816:	88e8      	ldrh	r0, [r5, #6]
    6818:	4570      	cmp	r0, lr
    681a:	f080 813f 	bcs.w	6a9c <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    681e:	4962      	ldr	r1, [pc, #392]	; (69a8 <usb_isr+0x9b8>)
    6820:	780d      	ldrb	r5, [r1, #0]
    6822:	2840      	cmp	r0, #64	; 0x40
    6824:	4684      	mov	ip, r0
    6826:	f045 0e02 	orr.w	lr, r5, #2
    682a:	bf28      	it	cs
    682c:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    6830:	eb04 030c 	add.w	r3, r4, ip
    6834:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    6838:	9302      	str	r3, [sp, #8]
    683a:	2301      	movs	r3, #1
    683c:	6054      	str	r4, [r2, #4]
    683e:	ebcc 0000 	rsb	r0, ip, r0
    6842:	ea4f 480c 	mov.w	r8, ip, lsl #16
    6846:	2200      	movs	r2, #0
    6848:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    684a:	24c8      	movs	r4, #200	; 0xc8
    684c:	e65e      	b.n	650c <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    684e:	4c55      	ldr	r4, [pc, #340]	; (69a4 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    6850:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    6854:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    6856:	7062      	strb	r2, [r4, #1]
    6858:	e7dd      	b.n	6816 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    685a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    685e:	f47f af7c 	bne.w	675a <usb_isr+0x76a>
    6862:	2301      	movs	r3, #1
    6864:	2200      	movs	r2, #0
    6866:	9301      	str	r3, [sp, #4]
    6868:	e63d      	b.n	64e6 <usb_isr+0x4f6>
    686a:	f242 3221 	movw	r2, #8993	; 0x2321
    686e:	4291      	cmp	r1, r2
    6870:	d0f7      	beq.n	6862 <usb_isr+0x872>
    6872:	e772      	b.n	675a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    6874:	886a      	ldrh	r2, [r5, #2]
    6876:	2a00      	cmp	r2, #0
    6878:	f47f af6f 	bne.w	675a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    687c:	483a      	ldr	r0, [pc, #232]	; (6968 <usb_isr+0x978>)
    687e:	f8cd e004 	str.w	lr, [sp, #4]
    6882:	0089      	lsls	r1, r1, #2
    6884:	4408      	add	r0, r1
    6886:	7801      	ldrb	r1, [r0, #0]
    6888:	f021 0102 	bic.w	r1, r1, #2
    688c:	7001      	strb	r1, [r0, #0]
    688e:	e62a      	b.n	64e6 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    6890:	f000 f982 	bl	6b98 <usb_malloc>
				if (p) {
    6894:	2800      	cmp	r0, #0
    6896:	f000 80ef 	beq.w	6a78 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    689a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    689c:	4a3d      	ldr	r2, [pc, #244]	; (6994 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    689e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    68a2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    68a6:	f000 f977 	bl	6b98 <usb_malloc>
				if (p) {
    68aa:	2800      	cmp	r0, #0
    68ac:	f000 80de 	beq.w	6a6c <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    68b0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    68b2:	4a37      	ldr	r2, [pc, #220]	; (6990 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    68b4:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    68b8:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    68bc:	e738      	b.n	6730 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    68be:	f000 f96b 	bl	6b98 <usb_malloc>
				if (p) {
    68c2:	2800      	cmp	r0, #0
    68c4:	f000 80c0 	beq.w	6a48 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    68c8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    68ca:	4a32      	ldr	r2, [pc, #200]	; (6994 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    68cc:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    68d0:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    68d4:	f000 f960 	bl	6b98 <usb_malloc>
				if (p) {
    68d8:	2800      	cmp	r0, #0
    68da:	f000 80af 	beq.w	6a3c <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    68de:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    68e0:	4a2b      	ldr	r2, [pc, #172]	; (6990 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    68e2:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    68e6:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    68ea:	e708      	b.n	66fe <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    68ec:	f000 f954 	bl	6b98 <usb_malloc>
				if (p) {
    68f0:	2800      	cmp	r0, #0
    68f2:	f000 80cd 	beq.w	6a90 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    68f6:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    68f8:	4a26      	ldr	r2, [pc, #152]	; (6994 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    68fa:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    68fe:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    6902:	f000 f949 	bl	6b98 <usb_malloc>
				if (p) {
    6906:	2800      	cmp	r0, #0
    6908:	f000 80bc 	beq.w	6a84 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    690c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    690e:	4a20      	ldr	r2, [pc, #128]	; (6990 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    6910:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6914:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    6918:	e6e3      	b.n	66e2 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    691a:	f000 f93d 	bl	6b98 <usb_malloc>
				if (p) {
    691e:	2800      	cmp	r0, #0
    6920:	f000 809e 	beq.w	6a60 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    6924:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6926:	4a1b      	ldr	r2, [pc, #108]	; (6994 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    6928:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    692c:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    6930:	f000 f932 	bl	6b98 <usb_malloc>
				if (p) {
    6934:	2800      	cmp	r0, #0
    6936:	f000 808d 	beq.w	6a54 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    693a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    693c:	4a14      	ldr	r2, [pc, #80]	; (6990 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    693e:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6942:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    6946:	e6e7      	b.n	6718 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    6948:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    694a:	3808      	subs	r0, #8
    694c:	f000 f944 	bl	6bd8 <usb_free>
    6950:	e504      	b.n	635c <usb_isr+0x36c>
    6952:	6b48      	ldr	r0, [r1, #52]	; 0x34
    6954:	3808      	subs	r0, #8
    6956:	f000 f93f 	bl	6bd8 <usb_free>
    695a:	e4f9      	b.n	6350 <usb_isr+0x360>
    695c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    695e:	3808      	subs	r0, #8
    6960:	f000 f93a 	bl	6bd8 <usb_free>
    6964:	e4ee      	b.n	6344 <usb_isr+0x354>
    6966:	bf00      	nop
    6968:	400720c0 	.word	0x400720c0
    696c:	40072080 	.word	0x40072080
    6970:	00009f4c 	.word	0x00009f4c
    6974:	400720c4 	.word	0x400720c4
    6978:	1fff95c1 	.word	0x1fff95c1
    697c:	400720c8 	.word	0x400720c8
    6980:	400720cc 	.word	0x400720cc
    6984:	400720d0 	.word	0x400720d0
    6988:	1fff8000 	.word	0x1fff8000
    698c:	40072094 	.word	0x40072094
    6990:	004000c8 	.word	0x004000c8
    6994:	00400088 	.word	0x00400088
    6998:	1fff9555 	.word	0x1fff9555
    699c:	00009f50 	.word	0x00009f50
    69a0:	1fff95cc 	.word	0x1fff95cc
    69a4:	1fff95c4 	.word	0x1fff95c4
    69a8:	1fff95c0 	.word	0x1fff95c0
    69ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    69ae:	3808      	subs	r0, #8
    69b0:	f000 f912 	bl	6bd8 <usb_free>
    69b4:	e4c0      	b.n	6338 <usb_isr+0x348>
    69b6:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    69b8:	3808      	subs	r0, #8
    69ba:	f000 f90d 	bl	6bd8 <usb_free>
    69be:	e4fd      	b.n	63bc <usb_isr+0x3cc>
    69c0:	6f48      	ldr	r0, [r1, #116]	; 0x74
    69c2:	3808      	subs	r0, #8
    69c4:	f000 f908 	bl	6bd8 <usb_free>
    69c8:	e4f2      	b.n	63b0 <usb_isr+0x3c0>
    69ca:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    69cc:	3808      	subs	r0, #8
    69ce:	f000 f903 	bl	6bd8 <usb_free>
    69d2:	e4e7      	b.n	63a4 <usb_isr+0x3b4>
    69d4:	6e48      	ldr	r0, [r1, #100]	; 0x64
    69d6:	3808      	subs	r0, #8
    69d8:	f000 f8fe 	bl	6bd8 <usb_free>
    69dc:	e4dc      	b.n	6398 <usb_isr+0x3a8>
    69de:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    69e0:	3808      	subs	r0, #8
    69e2:	f000 f8f9 	bl	6bd8 <usb_free>
    69e6:	e4d1      	b.n	638c <usb_isr+0x39c>
    69e8:	6d48      	ldr	r0, [r1, #84]	; 0x54
    69ea:	3808      	subs	r0, #8
    69ec:	f000 f8f4 	bl	6bd8 <usb_free>
    69f0:	e4c6      	b.n	6380 <usb_isr+0x390>
    69f2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    69f4:	3808      	subs	r0, #8
    69f6:	f000 f8ef 	bl	6bd8 <usb_free>
    69fa:	e4bb      	b.n	6374 <usb_isr+0x384>
    69fc:	6c48      	ldr	r0, [r1, #68]	; 0x44
    69fe:	3808      	subs	r0, #8
    6a00:	f000 f8ea 	bl	6bd8 <usb_free>
    6a04:	e4b0      	b.n	6368 <usb_isr+0x378>
    6a06:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    6a0a:	3808      	subs	r0, #8
    6a0c:	f000 f8e4 	bl	6bd8 <usb_free>
    6a10:	e4ec      	b.n	63ec <usb_isr+0x3fc>
    6a12:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    6a16:	3808      	subs	r0, #8
    6a18:	f000 f8de 	bl	6bd8 <usb_free>
    6a1c:	e4e0      	b.n	63e0 <usb_isr+0x3f0>
    6a1e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6a22:	3808      	subs	r0, #8
    6a24:	f000 f8d8 	bl	6bd8 <usb_free>
    6a28:	e4d4      	b.n	63d4 <usb_isr+0x3e4>
    6a2a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    6a2e:	3808      	subs	r0, #8
    6a30:	f000 f8d2 	bl	6bd8 <usb_free>
    6a34:	e4c8      	b.n	63c8 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    6a36:	f04f 0e02 	mov.w	lr, #2
    6a3a:	e6ec      	b.n	6816 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    6a3c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    6a3e:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    6a42:	3201      	adds	r2, #1
    6a44:	702a      	strb	r2, [r5, #0]
    6a46:	e65a      	b.n	66fe <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    6a48:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    6a4a:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    6a4e:	3201      	adds	r2, #1
    6a50:	702a      	strb	r2, [r5, #0]
    6a52:	e73f      	b.n	68d4 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    6a54:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    6a56:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    6a5a:	3201      	adds	r2, #1
    6a5c:	702a      	strb	r2, [r5, #0]
    6a5e:	e65b      	b.n	6718 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    6a60:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    6a62:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    6a66:	3201      	adds	r2, #1
    6a68:	702a      	strb	r2, [r5, #0]
    6a6a:	e761      	b.n	6930 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    6a6c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    6a6e:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    6a72:	3201      	adds	r2, #1
    6a74:	702a      	strb	r2, [r5, #0]
    6a76:	e65b      	b.n	6730 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    6a78:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    6a7a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    6a7e:	3201      	adds	r2, #1
    6a80:	702a      	strb	r2, [r5, #0]
    6a82:	e710      	b.n	68a6 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    6a84:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    6a86:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    6a8a:	3201      	adds	r2, #1
    6a8c:	702a      	strb	r2, [r5, #0]
    6a8e:	e628      	b.n	66e2 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    6a90:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    6a92:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    6a96:	3201      	adds	r2, #1
    6a98:	702a      	strb	r2, [r5, #0]
    6a9a:	e732      	b.n	6902 <usb_isr+0x912>
    6a9c:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    6aa0:	46f4      	mov	ip, lr
    6aa2:	bf28      	it	cs
    6aa4:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    6aa8:	eb04 030c 	add.w	r3, r4, ip
    6aac:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    6aae:	2301      	movs	r3, #1
    6ab0:	ebcc 000e 	rsb	r0, ip, lr
    6ab4:	ea4f 480c 	mov.w	r8, ip, lsl #16
    6ab8:	2200      	movs	r2, #0
    6aba:	9301      	str	r3, [sp, #4]
    6abc:	e518      	b.n	64f0 <usb_isr+0x500>
    6abe:	bf00      	nop

00006ac0 <usb_init>:
}



void usb_init(void)
{
    6ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    6ac2:	f000 fda5 	bl	7610 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6ac6:	4b29      	ldr	r3, [pc, #164]	; (6b6c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    6ac8:	4829      	ldr	r0, [pc, #164]	; (6b70 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    6aca:	4c2a      	ldr	r4, [pc, #168]	; (6b74 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6acc:	4f2a      	ldr	r7, [pc, #168]	; (6b78 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6ace:	4d2b      	ldr	r5, [pc, #172]	; (6b7c <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    6ad0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 6b90 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    6ad4:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 6b94 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6ad8:	4e29      	ldr	r6, [pc, #164]	; (6b80 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6ada:	2200      	movs	r2, #0
    6adc:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    6ade:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6ae0:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    6ae2:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6ae4:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    6ae6:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6ae8:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    6aea:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6aec:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    6aee:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6af0:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    6af2:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6af4:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    6af6:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6af8:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    6afa:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6afc:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    6afe:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b00:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    6b02:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b04:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    6b06:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b08:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    6b0a:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b0c:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    6b0e:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b10:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    6b12:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b14:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    6b16:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b18:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    6b1a:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    6b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    6b20:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    6b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    6b26:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    6b2a:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    6b2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    6b30:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6b32:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    6b36:	4913      	ldr	r1, [pc, #76]	; (6b84 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6b38:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6b3a:	0e1b      	lsrs	r3, r3, #24
    6b3c:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    6b3e:	23ff      	movs	r3, #255	; 0xff
    6b40:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    6b44:	4d10      	ldr	r5, [pc, #64]	; (6b88 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    6b46:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    6b4a:	4810      	ldr	r0, [pc, #64]	; (6b8c <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    6b4c:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6b4e:	2301      	movs	r3, #1
    6b50:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    6b52:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    6b56:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    6b58:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    6b5c:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    6b5e:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    6b62:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    6b64:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    6b66:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    6b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b6c:	1fff8000 	.word	0x1fff8000
    6b70:	40048034 	.word	0x40048034
    6b74:	4007209c 	.word	0x4007209c
    6b78:	400720b0 	.word	0x400720b0
    6b7c:	400720b4 	.word	0x400720b4
    6b80:	40072094 	.word	0x40072094
    6b84:	40072010 	.word	0x40072010
    6b88:	e000e449 	.word	0xe000e449
    6b8c:	e000e108 	.word	0xe000e108
    6b90:	40072080 	.word	0x40072080
    6b94:	40072088 	.word	0x40072088

00006b98 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    6b98:	b672      	cpsid	i
	avail = usb_buffer_available;
    6b9a:	480d      	ldr	r0, [pc, #52]	; (6bd0 <usb_malloc+0x38>)
    6b9c:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    6b9e:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    6ba2:	2b0b      	cmp	r3, #11
    6ba4:	dc10      	bgt.n	6bc8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    6ba6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6baa:	40d9      	lsrs	r1, r3
    6bac:	ea22 0201 	bic.w	r2, r2, r1
    6bb0:	6002      	str	r2, [r0, #0]
	__enable_irq();
    6bb2:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    6bb4:	4807      	ldr	r0, [pc, #28]	; (6bd4 <usb_malloc+0x3c>)
    6bb6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    6bba:	00db      	lsls	r3, r3, #3
    6bbc:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    6bbe:	2100      	movs	r1, #0
    6bc0:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    6bc2:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    6bc4:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    6bc6:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    6bc8:	b662      	cpsie	i
		return NULL;
    6bca:	2000      	movs	r0, #0
    6bcc:	4770      	bx	lr
    6bce:	bf00      	nop
    6bd0:	1fff8738 	.word	0x1fff8738
    6bd4:	1fff83bc 	.word	0x1fff83bc

00006bd8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    6bd8:	4b0d      	ldr	r3, [pc, #52]	; (6c10 <usb_free+0x38>)
    6bda:	4a0e      	ldr	r2, [pc, #56]	; (6c14 <usb_free+0x3c>)
    6bdc:	1ac3      	subs	r3, r0, r3
    6bde:	fba2 2303 	umull	r2, r3, r2, r3
    6be2:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    6be4:	2b0b      	cmp	r3, #11
    6be6:	d80c      	bhi.n	6c02 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    6be8:	4a0b      	ldr	r2, [pc, #44]	; (6c18 <usb_free+0x40>)
    6bea:	7812      	ldrb	r2, [r2, #0]
    6bec:	b952      	cbnz	r2, 6c04 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    6bee:	b672      	cpsid	i
	usb_buffer_available |= mask;
    6bf0:	480a      	ldr	r0, [pc, #40]	; (6c1c <usb_free+0x44>)
    6bf2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    6bf6:	6802      	ldr	r2, [r0, #0]
    6bf8:	fa21 f303 	lsr.w	r3, r1, r3
    6bfc:	431a      	orrs	r2, r3
    6bfe:	6002      	str	r2, [r0, #0]
	__enable_irq();
    6c00:	b662      	cpsie	i
    6c02:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    6c04:	4a06      	ldr	r2, [pc, #24]	; (6c20 <usb_free+0x48>)
    6c06:	7812      	ldrb	r2, [r2, #0]
    6c08:	2a00      	cmp	r2, #0
    6c0a:	d0f0      	beq.n	6bee <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    6c0c:	f7ff b94a 	b.w	5ea4 <usb_rx_memory>
    6c10:	1fff83bc 	.word	0x1fff83bc
    6c14:	38e38e39 	.word	0x38e38e39
    6c18:	1fff95c1 	.word	0x1fff95c1
    6c1c:	1fff8738 	.word	0x1fff8738
    6c20:	1fff95cc 	.word	0x1fff95cc

00006c24 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    6c24:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    6c26:	4d0f      	ldr	r5, [pc, #60]	; (6c64 <usb_serial_getchar+0x40>)
    6c28:	6828      	ldr	r0, [r5, #0]
    6c2a:	b178      	cbz	r0, 6c4c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    6c2c:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    6c2e:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    6c30:	18c1      	adds	r1, r0, r3
    6c32:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    6c34:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    6c36:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    6c38:	d202      	bcs.n	6c40 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    6c3a:	8043      	strh	r3, [r0, #2]
	}
	return c;
    6c3c:	4620      	mov	r0, r4
}
    6c3e:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    6c40:	f7ff ffca 	bl	6bd8 <usb_free>
		rx_packet = NULL;
    6c44:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    6c46:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    6c48:	602b      	str	r3, [r5, #0]
    6c4a:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    6c4c:	4b06      	ldr	r3, [pc, #24]	; (6c68 <usb_serial_getchar+0x44>)
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	b12b      	cbz	r3, 6c5e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    6c52:	2003      	movs	r0, #3
    6c54:	f7ff f8f2 	bl	5e3c <usb_rx>
    6c58:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    6c5a:	2800      	cmp	r0, #0
    6c5c:	d1e6      	bne.n	6c2c <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    6c5e:	f04f 30ff 	mov.w	r0, #4294967295
    6c62:	bd38      	pop	{r3, r4, r5, pc}
    6c64:	1fff95e0 	.word	0x1fff95e0
    6c68:	1fff95cc 	.word	0x1fff95cc

00006c6c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    6c6c:	b510      	push	{r4, lr}
	if (!rx_packet) {
    6c6e:	4c09      	ldr	r4, [pc, #36]	; (6c94 <usb_serial_peekchar+0x28>)
    6c70:	6820      	ldr	r0, [r4, #0]
    6c72:	b118      	cbz	r0, 6c7c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    6c74:	8843      	ldrh	r3, [r0, #2]
    6c76:	4418      	add	r0, r3
    6c78:	7a00      	ldrb	r0, [r0, #8]
}
    6c7a:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    6c7c:	4b06      	ldr	r3, [pc, #24]	; (6c98 <usb_serial_peekchar+0x2c>)
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	b12b      	cbz	r3, 6c8e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    6c82:	2003      	movs	r0, #3
    6c84:	f7ff f8da 	bl	5e3c <usb_rx>
    6c88:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    6c8a:	2800      	cmp	r0, #0
    6c8c:	d1f2      	bne.n	6c74 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    6c8e:	f04f 30ff 	mov.w	r0, #4294967295
    6c92:	bd10      	pop	{r4, pc}
    6c94:	1fff95e0 	.word	0x1fff95e0
    6c98:	1fff95cc 	.word	0x1fff95cc

00006c9c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    6c9c:	4b04      	ldr	r3, [pc, #16]	; (6cb0 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    6c9e:	4a05      	ldr	r2, [pc, #20]	; (6cb4 <usb_serial_available+0x18>)
    6ca0:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    6ca2:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    6ca4:	b11b      	cbz	r3, 6cae <usb_serial_available+0x12>
    6ca6:	881a      	ldrh	r2, [r3, #0]
    6ca8:	885b      	ldrh	r3, [r3, #2]
    6caa:	1ad3      	subs	r3, r2, r3
    6cac:	4418      	add	r0, r3
	return count;
}
    6cae:	4770      	bx	lr
    6cb0:	1fff95e0 	.word	0x1fff95e0
    6cb4:	1fff9794 	.word	0x1fff9794

00006cb8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    6cb8:	4b0b      	ldr	r3, [pc, #44]	; (6ce8 <usb_serial_flush_input+0x30>)
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	b19b      	cbz	r3, 6ce6 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    6cbe:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    6cc0:	4c0a      	ldr	r4, [pc, #40]	; (6cec <usb_serial_flush_input+0x34>)
    6cc2:	6820      	ldr	r0, [r4, #0]
    6cc4:	b148      	cbz	r0, 6cda <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    6cc6:	f7ff ff87 	bl	6bd8 <usb_free>
		rx_packet = NULL;
    6cca:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    6ccc:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    6cce:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    6cd0:	f7ff f8b4 	bl	5e3c <usb_rx>
		if (!rx) break;
    6cd4:	b130      	cbz	r0, 6ce4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    6cd6:	f7ff ff7f 	bl	6bd8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    6cda:	2003      	movs	r0, #3
    6cdc:	f7ff f8ae 	bl	5e3c <usb_rx>
		if (!rx) break;
    6ce0:	2800      	cmp	r0, #0
    6ce2:	d1f8      	bne.n	6cd6 <usb_serial_flush_input+0x1e>
    6ce4:	bd10      	pop	{r4, pc}
    6ce6:	4770      	bx	lr
    6ce8:	1fff95cc 	.word	0x1fff95cc
    6cec:	1fff95e0 	.word	0x1fff95e0

00006cf0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    6cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    6cf4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 6df0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    6cf8:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    6cfa:	2201      	movs	r2, #1
    6cfc:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    6d00:	9101      	str	r1, [sp, #4]
    6d02:	b369      	cbz	r1, 6d60 <usb_serial_write+0x70>
    6d04:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 6df4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    6d08:	4f36      	ldr	r7, [pc, #216]	; (6de4 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    6d0a:	9e01      	ldr	r6, [sp, #4]
    6d0c:	4683      	mov	fp, r0
		if (!tx_packet) {
    6d0e:	f8d8 0000 	ldr.w	r0, [r8]
    6d12:	b3b0      	cbz	r0, 6d82 <usb_serial_write+0x92>
    6d14:	4d34      	ldr	r5, [pc, #208]	; (6de8 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    6d16:	8844      	ldrh	r4, [r0, #2]
    6d18:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    6d1c:	42b1      	cmp	r1, r6
    6d1e:	bf28      	it	cs
    6d20:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    6d22:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    6d26:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    6d28:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    6d2c:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    6d2e:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    6d30:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    6d34:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    6d38:	b151      	cbz	r1, 6d50 <usb_serial_write+0x60>
    6d3a:	3c01      	subs	r4, #1
    6d3c:	4422      	add	r2, r4
    6d3e:	4459      	add	r1, fp
    6d40:	f81b 4b01 	ldrb.w	r4, [fp], #1
    6d44:	f802 4f01 	strb.w	r4, [r2, #1]!
    6d48:	458b      	cmp	fp, r1
    6d4a:	d1f9      	bne.n	6d40 <usb_serial_write+0x50>
    6d4c:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    6d50:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    6d54:	d80b      	bhi.n	6d6e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    6d56:	4a25      	ldr	r2, [pc, #148]	; (6dec <usb_serial_write+0xfc>)
    6d58:	2105      	movs	r1, #5
    6d5a:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    6d5c:	2e00      	cmp	r6, #0
    6d5e:	d1d6      	bne.n	6d0e <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    6d60:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    6d62:	2300      	movs	r3, #0
    6d64:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    6d68:	b003      	add	sp, #12
    6d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    6d6e:	2240      	movs	r2, #64	; 0x40
    6d70:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6d72:	4601      	mov	r1, r0
    6d74:	2004      	movs	r0, #4
    6d76:	f7ff f8f9 	bl	5f6c <usb_tx>
			tx_packet = NULL;
    6d7a:	2200      	movs	r2, #0
    6d7c:	f8c8 2000 	str.w	r2, [r8]
    6d80:	e7e9      	b.n	6d56 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    6d82:	783a      	ldrb	r2, [r7, #0]
    6d84:	b32a      	cbz	r2, 6dd2 <usb_serial_write+0xe2>
    6d86:	4d18      	ldr	r5, [pc, #96]	; (6de8 <usb_serial_write+0xf8>)
    6d88:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    6d8c:	f04f 0a01 	mov.w	sl, #1
    6d90:	e007      	b.n	6da2 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    6d92:	3c01      	subs	r4, #1
    6d94:	d016      	beq.n	6dc4 <usb_serial_write+0xd4>
    6d96:	782a      	ldrb	r2, [r5, #0]
    6d98:	b9a2      	cbnz	r2, 6dc4 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    6d9a:	f000 fa1d 	bl	71d8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    6d9e:	783a      	ldrb	r2, [r7, #0]
    6da0:	b1ba      	cbz	r2, 6dd2 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    6da2:	2004      	movs	r0, #4
    6da4:	f7ff f868 	bl	5e78 <usb_tx_packet_count>
    6da8:	2807      	cmp	r0, #7
    6daa:	d8f2      	bhi.n	6d92 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    6dac:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    6db0:	f7ff fef2 	bl	6b98 <usb_malloc>
    6db4:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    6db8:	2800      	cmp	r0, #0
    6dba:	d1ac      	bne.n	6d16 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    6dbc:	4b0c      	ldr	r3, [pc, #48]	; (6df0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    6dbe:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    6dc0:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    6dc2:	d1e8      	bne.n	6d96 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    6dc4:	2301      	movs	r3, #1
					return -1;
    6dc6:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    6dca:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    6dcc:	b003      	add	sp, #12
    6dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    6dd2:	2300      	movs	r3, #0
					return -1;
    6dd4:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    6dd8:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    6ddc:	b003      	add	sp, #12
    6dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6de2:	bf00      	nop
    6de4:	1fff95cc 	.word	0x1fff95cc
    6de8:	1fff95dc 	.word	0x1fff95dc
    6dec:	1fff95d4 	.word	0x1fff95d4
    6df0:	1fff95d5 	.word	0x1fff95d5
    6df4:	1fff95d8 	.word	0x1fff95d8

00006df8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    6df8:	b500      	push	{lr}
    6dfa:	b083      	sub	sp, #12
    6dfc:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    6dfe:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    6e00:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    6e04:	4618      	mov	r0, r3
    6e06:	f7ff ff73 	bl	6cf0 <usb_serial_write>
}
    6e0a:	b003      	add	sp, #12
    6e0c:	f85d fb04 	ldr.w	pc, [sp], #4

00006e10 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    6e10:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    6e12:	4d0e      	ldr	r5, [pc, #56]	; (6e4c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    6e14:	4c0e      	ldr	r4, [pc, #56]	; (6e50 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    6e16:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    6e18:	2301      	movs	r3, #1
    6e1a:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    6e1c:	b128      	cbz	r0, 6e2a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    6e1e:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    6e20:	2300      	movs	r3, #0
    6e22:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    6e24:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    6e28:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    6e2a:	4b0a      	ldr	r3, [pc, #40]	; (6e54 <usb_serial_write_buffer_free+0x44>)
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	b913      	cbnz	r3, 6e36 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    6e30:	2000      	movs	r0, #0
    6e32:	7020      	strb	r0, [r4, #0]
			return 0;
    6e34:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    6e36:	2004      	movs	r0, #4
    6e38:	f7ff f81e 	bl	5e78 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    6e3c:	2807      	cmp	r0, #7
    6e3e:	d8f7      	bhi.n	6e30 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    6e40:	f7ff feaa 	bl	6b98 <usb_malloc>
    6e44:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    6e46:	2800      	cmp	r0, #0
    6e48:	d1e9      	bne.n	6e1e <usb_serial_write_buffer_free+0xe>
    6e4a:	e7f1      	b.n	6e30 <usb_serial_write_buffer_free+0x20>
    6e4c:	1fff95d8 	.word	0x1fff95d8
    6e50:	1fff95d5 	.word	0x1fff95d5
    6e54:	1fff95cc 	.word	0x1fff95cc

00006e58 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    6e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    6e5a:	4b11      	ldr	r3, [pc, #68]	; (6ea0 <usb_serial_flush_output+0x48>)
    6e5c:	781b      	ldrb	r3, [r3, #0]
    6e5e:	b18b      	cbz	r3, 6e84 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    6e60:	4e10      	ldr	r6, [pc, #64]	; (6ea4 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    6e62:	4d11      	ldr	r5, [pc, #68]	; (6ea8 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    6e64:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    6e66:	2701      	movs	r7, #1
    6e68:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    6e6a:	b164      	cbz	r4, 6e86 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    6e6c:	4a0f      	ldr	r2, [pc, #60]	; (6eac <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    6e6e:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    6e70:	2700      	movs	r7, #0
    6e72:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6e74:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    6e76:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6e78:	2004      	movs	r0, #4
    6e7a:	f7ff f877 	bl	5f6c <usb_tx>
		tx_packet = NULL;
    6e7e:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    6e80:	2300      	movs	r3, #0
    6e82:	702b      	strb	r3, [r5, #0]
    6e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    6e86:	f7ff fe87 	bl	6b98 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    6e8a:	4b08      	ldr	r3, [pc, #32]	; (6eac <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    6e8c:	b128      	cbz	r0, 6e9a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    6e8e:	4601      	mov	r1, r0
    6e90:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    6e92:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    6e94:	f7ff f86a 	bl	5f6c <usb_tx>
    6e98:	e7f2      	b.n	6e80 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    6e9a:	701f      	strb	r7, [r3, #0]
    6e9c:	e7f0      	b.n	6e80 <usb_serial_flush_output+0x28>
    6e9e:	bf00      	nop
    6ea0:	1fff95cc 	.word	0x1fff95cc
    6ea4:	1fff95d8 	.word	0x1fff95d8
    6ea8:	1fff95d5 	.word	0x1fff95d5
    6eac:	1fff95d4 	.word	0x1fff95d4

00006eb0 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    6eb0:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    6eb2:	4b0e      	ldr	r3, [pc, #56]	; (6eec <usb_serial_flush_callback+0x3c>)
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	b973      	cbnz	r3, 6ed6 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    6eb8:	4c0d      	ldr	r4, [pc, #52]	; (6ef0 <usb_serial_flush_callback+0x40>)
    6eba:	6821      	ldr	r1, [r4, #0]
    6ebc:	b161      	cbz	r1, 6ed8 <usb_serial_flush_callback+0x28>
    6ebe:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    6ec2:	884b      	ldrh	r3, [r1, #2]
    6ec4:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    6ec6:	2004      	movs	r0, #4
    6ec8:	f7ff f850 	bl	5f6c <usb_tx>
		tx_packet = NULL;
    6ecc:	6025      	str	r5, [r4, #0]
    6ece:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    6ed0:	4b08      	ldr	r3, [pc, #32]	; (6ef4 <usb_serial_flush_callback+0x44>)
    6ed2:	2201      	movs	r2, #1
    6ed4:	701a      	strb	r2, [r3, #0]
    6ed6:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    6ed8:	f7ff fe5e 	bl	6b98 <usb_malloc>
		if (tx) {
    6edc:	2800      	cmp	r0, #0
    6ede:	d0f7      	beq.n	6ed0 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    6ee0:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    6ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    6ee6:	2004      	movs	r0, #4
    6ee8:	f7ff b840 	b.w	5f6c <usb_tx>
    6eec:	1fff95d5 	.word	0x1fff95d5
    6ef0:	1fff95d8 	.word	0x1fff95d8
    6ef4:	1fff95d4 	.word	0x1fff95d4

00006ef8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    6ef8:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6efa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6efe:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    6f00:	7f43      	ldrb	r3, [r0, #29]
    6f02:	b933      	cbnz	r3, 6f12 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    6f04:	7f01      	ldrb	r1, [r0, #28]
    6f06:	2901      	cmp	r1, #1
    6f08:	d007      	beq.n	6f1a <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    6f0a:	2903      	cmp	r1, #3
    6f0c:	d00f      	beq.n	6f2e <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    6f0e:	2301      	movs	r3, #1
    6f10:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6f12:	b902      	cbnz	r2, 6f16 <EventResponder::triggerEventNotImmediate()+0x1e>
    6f14:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    6f16:	bc10      	pop	{r4}
    6f18:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    6f1a:	4c12      	ldr	r4, [pc, #72]	; (6f64 <EventResponder::triggerEventNotImmediate()+0x6c>)
    6f1c:	6821      	ldr	r1, [r4, #0]
    6f1e:	b1a1      	cbz	r1, 6f4a <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    6f20:	4911      	ldr	r1, [pc, #68]	; (6f68 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    6f22:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    6f24:	680b      	ldr	r3, [r1, #0]
    6f26:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    6f28:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    6f2a:	6158      	str	r0, [r3, #20]
    6f2c:	e7ef      	b.n	6f0e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    6f2e:	4c0f      	ldr	r4, [pc, #60]	; (6f6c <EventResponder::triggerEventNotImmediate()+0x74>)
    6f30:	6821      	ldr	r1, [r4, #0]
    6f32:	b181      	cbz	r1, 6f56 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    6f34:	490e      	ldr	r1, [pc, #56]	; (6f70 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    6f36:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    6f38:	680b      	ldr	r3, [r1, #0]
    6f3a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    6f3c:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    6f3e:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    6f40:	4b0c      	ldr	r3, [pc, #48]	; (6f74 <EventResponder::triggerEventNotImmediate()+0x7c>)
    6f42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    6f46:	6019      	str	r1, [r3, #0]
    6f48:	e7e1      	b.n	6f0e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    6f4a:	4b07      	ldr	r3, [pc, #28]	; (6f68 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    6f4c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    6f4e:	6181      	str	r1, [r0, #24]
				firstYield = this;
    6f50:	6020      	str	r0, [r4, #0]
				lastYield = this;
    6f52:	6018      	str	r0, [r3, #0]
    6f54:	e7db      	b.n	6f0e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    6f56:	4b06      	ldr	r3, [pc, #24]	; (6f70 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    6f58:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    6f5a:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    6f5c:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    6f5e:	6018      	str	r0, [r3, #0]
    6f60:	e7ee      	b.n	6f40 <EventResponder::triggerEventNotImmediate()+0x48>
    6f62:	bf00      	nop
    6f64:	1fff95f8 	.word	0x1fff95f8
    6f68:	1fff95f4 	.word	0x1fff95f4
    6f6c:	1fff95e8 	.word	0x1fff95e8
    6f70:	1fff95ec 	.word	0x1fff95ec
    6f74:	e000ed04 	.word	0xe000ed04

00006f78 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    6f78:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6f7a:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6f7c:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6f7e:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6f80:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6f82:	d002      	beq.n	6f8a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    6f84:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6f86:	f7ff bfb7 	b.w	6ef8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6f8a:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    6f8c:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6f8e:	4718      	bx	r3

00006f90 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    6f90:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6f92:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6f96:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6f98:	4c0c      	ldr	r4, [pc, #48]	; (6fcc <EventResponder::runFromInterrupt()+0x3c>)
    6f9a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    6f9c:	b180      	cbz	r0, 6fc0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    6f9e:	4e0c      	ldr	r6, [pc, #48]	; (6fd0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    6fa0:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    6fa2:	6943      	ldr	r3, [r0, #20]
    6fa4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    6fa6:	b173      	cbz	r3, 6fc6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    6fa8:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6faa:	b902      	cbnz	r2, 6fae <EventResponder::runFromInterrupt()+0x1e>
    6fac:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    6fae:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    6fb0:	6883      	ldr	r3, [r0, #8]
    6fb2:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6fb4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6fb8:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6fba:	6820      	ldr	r0, [r4, #0]
		if (first) {
    6fbc:	2800      	cmp	r0, #0
    6fbe:	d1f0      	bne.n	6fa2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6fc0:	b902      	cbnz	r2, 6fc4 <EventResponder::runFromInterrupt()+0x34>
    6fc2:	b662      	cpsie	i
    6fc4:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    6fc6:	6033      	str	r3, [r6, #0]
    6fc8:	e7ef      	b.n	6faa <EventResponder::runFromInterrupt()+0x1a>
    6fca:	bf00      	nop
    6fcc:	1fff95e8 	.word	0x1fff95e8
    6fd0:	1fff95ec 	.word	0x1fff95ec

00006fd4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    6fd4:	f7ff bfdc 	b.w	6f90 <EventResponder::runFromInterrupt()>

00006fd8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    6fd8:	4a18      	ldr	r2, [pc, #96]	; (703c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    6fda:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    6fdc:	6814      	ldr	r4, [r2, #0]
    6fde:	2c00      	cmp	r4, #0
    6fe0:	d027      	beq.n	7032 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    6fe2:	6803      	ldr	r3, [r0, #0]
    6fe4:	6821      	ldr	r1, [r4, #0]
    6fe6:	428b      	cmp	r3, r1
    6fe8:	d20e      	bcs.n	7008 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    6fea:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    6fec:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    6fee:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    6ff0:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    6ff2:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    6ff4:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    6ff6:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    6ff8:	2302      	movs	r3, #2
    6ffa:	7503      	strb	r3, [r0, #20]
}
    6ffc:	bc30      	pop	{r4, r5}
    6ffe:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    7000:	6811      	ldr	r1, [r2, #0]
    7002:	428b      	cmp	r3, r1
    7004:	4614      	mov	r4, r2
    7006:	d308      	bcc.n	701a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    7008:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    700a:	1a5b      	subs	r3, r3, r1
    700c:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    700e:	2a00      	cmp	r2, #0
    7010:	d1f6      	bne.n	7000 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    7012:	6082      	str	r2, [r0, #8]
		_prev = timer;
    7014:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    7016:	60a0      	str	r0, [r4, #8]
    7018:	e7ee      	b.n	6ff8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    701a:	68d2      	ldr	r2, [r2, #12]
    701c:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    701e:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    7020:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    7022:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    7024:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    7026:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    7028:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    702a:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    702c:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    702e:	bc30      	pop	{r4, r5}
    7030:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    7032:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    7034:	60c4      	str	r4, [r0, #12]
		listActive = this;
    7036:	6010      	str	r0, [r2, #0]
    7038:	e7de      	b.n	6ff8 <MillisTimer::addToActiveList()+0x20>
    703a:	bf00      	nop
    703c:	1fff95f0 	.word	0x1fff95f0

00007040 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    7040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    7042:	4e22      	ldr	r6, [pc, #136]	; (70cc <MillisTimer::runFromTimer()+0x8c>)
    7044:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    7046:	b32c      	cbz	r4, 7094 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    7048:	6823      	ldr	r3, [r4, #0]
    704a:	2b00      	cmp	r3, #0
    704c:	d13a      	bne.n	70c4 <MillisTimer::runFromTimer()+0x84>
    704e:	4f20      	ldr	r7, [pc, #128]	; (70d0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    7050:	461d      	mov	r5, r3
    7052:	e004      	b.n	705e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    7054:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    7056:	b1ec      	cbz	r4, 7094 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    7058:	6823      	ldr	r3, [r4, #0]
    705a:	2b00      	cmp	r3, #0
    705c:	d132      	bne.n	70c4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    705e:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    7060:	b103      	cbz	r3, 7064 <MillisTimer::runFromTimer()+0x24>
    7062:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    7064:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    7066:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    7068:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    706a:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    706c:	681b      	ldr	r3, [r3, #0]
    706e:	42bb      	cmp	r3, r7
    7070:	d121      	bne.n	70b6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7072:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7074:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7076:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7078:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    707a:	d020      	beq.n	70be <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    707c:	f7ff ff3c 	bl	6ef8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    7080:	6863      	ldr	r3, [r4, #4]
    7082:	2b00      	cmp	r3, #0
    7084:	d0e6      	beq.n	7054 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    7086:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    7088:	4620      	mov	r0, r4
    708a:	f7ff ffa5 	bl	6fd8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    708e:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    7090:	2c00      	cmp	r4, #0
    7092:	d1e1      	bne.n	7058 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7094:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    7098:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    709a:	4a0e      	ldr	r2, [pc, #56]	; (70d4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    709c:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    709e:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    70a0:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    70a2:	b903      	cbnz	r3, 70a6 <MillisTimer::runFromTimer()+0x66>
    70a4:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    70a6:	b128      	cbz	r0, 70b4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    70a8:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    70aa:	f7ff ff95 	bl	6fd8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    70ae:	4620      	mov	r0, r4
    70b0:	2800      	cmp	r0, #0
    70b2:	d1f9      	bne.n	70a8 <MillisTimer::runFromTimer()+0x68>
    70b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    70b6:	4622      	mov	r2, r4
    70b8:	2100      	movs	r1, #0
    70ba:	4798      	blx	r3
    70bc:	e7e0      	b.n	7080 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    70be:	6883      	ldr	r3, [r0, #8]
    70c0:	4798      	blx	r3
    70c2:	e7dd      	b.n	7080 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    70c4:	3b01      	subs	r3, #1
    70c6:	6023      	str	r3, [r4, #0]
			break;
    70c8:	e7e4      	b.n	7094 <MillisTimer::runFromTimer()+0x54>
    70ca:	bf00      	nop
    70cc:	1fff95f0 	.word	0x1fff95f0
    70d0:	00006f79 	.word	0x00006f79
    70d4:	1fff9600 	.word	0x1fff9600

000070d8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    70d8:	4a02      	ldr	r2, [pc, #8]	; (70e4 <systick_isr+0xc>)
    70da:	6813      	ldr	r3, [r2, #0]
    70dc:	3301      	adds	r3, #1
    70de:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    70e0:	f7ff bfae 	b.w	7040 <MillisTimer::runFromTimer()>
    70e4:	1fff94e8 	.word	0x1fff94e8

000070e8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    70e8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    70ea:	f7fc ff6f 	bl	3fcc <setup>
	while (1) {
		loop();
    70ee:	f7fd f853 	bl	4198 <loop>
		yield();
    70f2:	f000 f871 	bl	71d8 <yield>
    70f6:	e7fa      	b.n	70ee <main+0x6>

000070f8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    70f8:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    70fa:	4a06      	ldr	r2, [pc, #24]	; (7114 <Print::println()+0x1c>)
	return write(buf, 2);
    70fc:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    70fe:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    7100:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    7102:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    7104:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    7106:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    710a:	2202      	movs	r2, #2
    710c:	4798      	blx	r3
}
    710e:	b003      	add	sp, #12
    7110:	f85d fb04 	ldr.w	pc, [sp], #4
    7114:	00009f20 	.word	0x00009f20

00007118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    7118:	b5f0      	push	{r4, r5, r6, r7, lr}
    711a:	4607      	mov	r7, r0
    711c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    711e:	2a00      	cmp	r2, #0
    7120:	d033      	beq.n	718a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    7122:	2a01      	cmp	r2, #1
    7124:	bf08      	it	eq
    7126:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    7128:	b351      	cbz	r1, 7180 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    712a:	2421      	movs	r4, #33	; 0x21
    712c:	e000      	b.n	7130 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    712e:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    7130:	fbb1 f5f2 	udiv	r5, r1, r2
    7134:	fb02 1115 	mls	r1, r2, r5, r1
    7138:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    713a:	2909      	cmp	r1, #9
    713c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    7140:	bf98      	it	ls
    7142:	b2c8      	uxtbls	r0, r1
    7144:	a90a      	add	r1, sp, #40	; 0x28
    7146:	bf88      	it	hi
    7148:	3037      	addhi	r0, #55	; 0x37
    714a:	4421      	add	r1, r4
    714c:	bf88      	it	hi
    714e:	b2c0      	uxtbhi	r0, r0
    7150:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    7154:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    7156:	4629      	mov	r1, r5
    7158:	2d00      	cmp	r5, #0
    715a:	d1e8      	bne.n	712e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    715c:	b133      	cbz	r3, 716c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    715e:	3c01      	subs	r4, #1
    7160:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    7162:	ab0a      	add	r3, sp, #40	; 0x28
    7164:	4423      	add	r3, r4
    7166:	222d      	movs	r2, #45	; 0x2d
    7168:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	aa01      	add	r2, sp, #4
    7170:	1911      	adds	r1, r2, r4
    7172:	685b      	ldr	r3, [r3, #4]
    7174:	4638      	mov	r0, r7
    7176:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    717a:	4798      	blx	r3
}
    717c:	b00b      	add	sp, #44	; 0x2c
    717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    7180:	2230      	movs	r2, #48	; 0x30
    7182:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    7186:	2421      	movs	r4, #33	; 0x21
    7188:	e7e8      	b.n	715c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    718a:	6803      	ldr	r3, [r0, #0]
    718c:	b2c9      	uxtb	r1, r1
    718e:	681b      	ldr	r3, [r3, #0]
    7190:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    7192:	b00b      	add	sp, #44	; 0x2c
    7194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7196:	bf00      	nop

00007198 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    7198:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    719a:	bfba      	itte	lt
    719c:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    719e:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    71a0:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    71a2:	220a      	movs	r2, #10
    71a4:	f7ff bfb8 	b.w	7118 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000071a8 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    71a8:	6081      	str	r1, [r0, #8]
    71aa:	4770      	bx	lr

000071ac <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    71ac:	f7ff bd84 	b.w	6cb8 <usb_serial_flush_input>

000071b0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    71b0:	f7ff bd5c 	b.w	6c6c <usb_serial_peekchar>

000071b4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    71b4:	f7ff bd36 	b.w	6c24 <usb_serial_getchar>

000071b8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    71b8:	f7ff bd70 	b.w	6c9c <usb_serial_available>

000071bc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    71bc:	f7ff be4c 	b.w	6e58 <usb_serial_flush_output>

000071c0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    71c0:	f7ff be26 	b.w	6e10 <usb_serial_write_buffer_free>

000071c4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    71c4:	4608      	mov	r0, r1
    71c6:	4611      	mov	r1, r2
    71c8:	f7ff bd92 	b.w	6cf0 <usb_serial_write>

000071cc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    71cc:	4608      	mov	r0, r1
    71ce:	f7ff be13 	b.w	6df8 <usb_serial_putchar>
    71d2:	bf00      	nop

000071d4 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    71d4:	4770      	bx	lr
    71d6:	bf00      	nop

000071d8 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    71d8:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    71da:	4c22      	ldr	r4, [pc, #136]	; (7264 <yield+0x8c>)
    71dc:	7823      	ldrb	r3, [r4, #0]
    71de:	b103      	cbz	r3, 71e2 <yield+0xa>
    71e0:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    71e2:	2301      	movs	r3, #1
    71e4:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    71e6:	f7ff fd59 	bl	6c9c <usb_serial_available>
	if (Serial.available()) serialEvent();
    71ea:	bb70      	cbnz	r0, 724a <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    71ec:	f000 f868 	bl	72c0 <serial_available>
	if (Serial1.available()) serialEvent1();
    71f0:	bb40      	cbnz	r0, 7244 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    71f2:	f000 f8fb 	bl	73ec <serial2_available>
	if (Serial2.available()) serialEvent2();
    71f6:	bb10      	cbnz	r0, 723e <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    71f8:	f000 f98e 	bl	7518 <serial3_available>
	if (Serial3.available()) serialEvent3();
    71fc:	b9e0      	cbnz	r0, 7238 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    71fe:	2300      	movs	r3, #0
    7200:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    7202:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    7206:	2b00      	cmp	r3, #0
    7208:	d1ea      	bne.n	71e0 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    720a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    720e:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    7210:	4b15      	ldr	r3, [pc, #84]	; (7268 <yield+0x90>)
    7212:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    7214:	b1e0      	cbz	r0, 7250 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    7216:	4c15      	ldr	r4, [pc, #84]	; (726c <yield+0x94>)
    7218:	7822      	ldrb	r2, [r4, #0]
    721a:	b9ca      	cbnz	r2, 7250 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    721c:	6945      	ldr	r5, [r0, #20]
    721e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    7220:	2301      	movs	r3, #1
    7222:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    7224:	b1c5      	cbz	r5, 7258 <yield+0x80>
			firstYield->_prev = nullptr;
    7226:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7228:	b901      	cbnz	r1, 722c <yield+0x54>
    722a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    722c:	2500      	movs	r5, #0
    722e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    7230:	6883      	ldr	r3, [r0, #8]
    7232:	4798      	blx	r3
		runningFromYield = false;
    7234:	7025      	strb	r5, [r4, #0]
    7236:	e7d3      	b.n	71e0 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    7238:	f000 fa30 	bl	769c <serialEvent3()>
    723c:	e7df      	b.n	71fe <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    723e:	f000 fa2b 	bl	7698 <serialEvent2()>
    7242:	e7d9      	b.n	71f8 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    7244:	f000 fa26 	bl	7694 <serialEvent1()>
    7248:	e7d3      	b.n	71f2 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    724a:	f7ff ffc3 	bl	71d4 <serialEvent()>
    724e:	e7cd      	b.n	71ec <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7250:	2900      	cmp	r1, #0
    7252:	d1c5      	bne.n	71e0 <yield+0x8>
    7254:	b662      	cpsie	i
    7256:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    7258:	4b05      	ldr	r3, [pc, #20]	; (7270 <yield+0x98>)
    725a:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    725c:	2900      	cmp	r1, #0
    725e:	d1e5      	bne.n	722c <yield+0x54>
    7260:	e7e3      	b.n	722a <yield+0x52>
    7262:	bf00      	nop
    7264:	1fff9604 	.word	0x1fff9604
    7268:	1fff95f8 	.word	0x1fff95f8
    726c:	1fff95fc 	.word	0x1fff95fc
    7270:	1fff95f4 	.word	0x1fff95f4

00007274 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    7274:	b4f0      	push	{r4, r5, r6, r7}
    7276:	1e4d      	subs	r5, r1, #1
    7278:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    727a:	2400      	movs	r4, #0
    727c:	e000      	b.n	7280 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    727e:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    7280:	fbb0 f3f2 	udiv	r3, r0, r2
    7284:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7288:	2809      	cmp	r0, #9
    728a:	f100 0730 	add.w	r7, r0, #48	; 0x30
    728e:	bf8a      	itet	hi
    7290:	3037      	addhi	r0, #55	; 0x37
    7292:	b2f8      	uxtbls	r0, r7
    7294:	b2c0      	uxtbhi	r0, r0
    7296:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    729a:	4618      	mov	r0, r3
    729c:	2b00      	cmp	r3, #0
    729e:	d1ee      	bne.n	727e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    72a0:	190a      	adds	r2, r1, r4
    72a2:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    72a4:	b14c      	cbz	r4, 72ba <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    72a6:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    72a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    72ac:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    72ae:	3301      	adds	r3, #1
    72b0:	1ae0      	subs	r0, r4, r3
    72b2:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    72b4:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    72b8:	dbf5      	blt.n	72a6 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    72ba:	4608      	mov	r0, r1
    72bc:	bcf0      	pop	{r4, r5, r6, r7}
    72be:	4770      	bx	lr

000072c0 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    72c0:	4a05      	ldr	r2, [pc, #20]	; (72d8 <serial_available+0x18>)
	tail = rx_buffer_tail;
    72c2:	4b06      	ldr	r3, [pc, #24]	; (72dc <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    72c4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    72c6:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    72c8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    72ca:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    72cc:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    72ce:	bf38      	it	cc
    72d0:	3040      	addcc	r0, #64	; 0x40
    72d2:	1ac0      	subs	r0, r0, r3
}
    72d4:	4770      	bx	lr
    72d6:	bf00      	nop
    72d8:	1fff960c 	.word	0x1fff960c
    72dc:	1fff960d 	.word	0x1fff960d

000072e0 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    72e0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    72e2:	4b38      	ldr	r3, [pc, #224]	; (73c4 <uart0_status_isr+0xe4>)
    72e4:	791a      	ldrb	r2, [r3, #4]
    72e6:	f012 0f30 	tst.w	r2, #48	; 0x30
    72ea:	d02c      	beq.n	7346 <uart0_status_isr+0x66>
		__disable_irq();
    72ec:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    72ee:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    72f0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    72f4:	2900      	cmp	r1, #0
    72f6:	d03d      	beq.n	7374 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    72f8:	b662      	cpsie	i
			head = rx_buffer_head;
    72fa:	4f33      	ldr	r7, [pc, #204]	; (73c8 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    72fc:	4933      	ldr	r1, [pc, #204]	; (73cc <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    72fe:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    7300:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    7302:	4e33      	ldr	r6, [pc, #204]	; (73d0 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    7304:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    7306:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    7308:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    730a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    730c:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    730e:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    7310:	bf28      	it	cs
    7312:	2300      	movcs	r3, #0
				if (newhead != tail) {
    7314:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    7316:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    731a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    731c:	bf1c      	itt	ne
    731e:	54f1      	strbne	r1, [r6, r3]
    7320:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    7322:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7326:	d1f0      	bne.n	730a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    7328:	4b2a      	ldr	r3, [pc, #168]	; (73d4 <uart0_status_isr+0xf4>)
    732a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    732c:	b2c2      	uxtb	r2, r0
    732e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    7330:	b14b      	cbz	r3, 7346 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    7332:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    7334:	bf36      	itet	cc
    7336:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    733a:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    733c:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    733e:	2827      	cmp	r0, #39	; 0x27
    7340:	bfc4      	itt	gt
    7342:	2201      	movgt	r2, #1
    7344:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    7346:	491f      	ldr	r1, [pc, #124]	; (73c4 <uart0_status_isr+0xe4>)
    7348:	78ca      	ldrb	r2, [r1, #3]
    734a:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    734c:	0615      	lsls	r5, r2, #24
    734e:	d416      	bmi.n	737e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    7350:	0652      	lsls	r2, r2, #25
    7352:	d50d      	bpl.n	7370 <uart0_status_isr+0x90>
    7354:	4b1b      	ldr	r3, [pc, #108]	; (73c4 <uart0_status_isr+0xe4>)
    7356:	791b      	ldrb	r3, [r3, #4]
    7358:	065b      	lsls	r3, r3, #25
    735a:	d509      	bpl.n	7370 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    735c:	4b1e      	ldr	r3, [pc, #120]	; (73d8 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    735e:	491f      	ldr	r1, [pc, #124]	; (73dc <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    7360:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    7362:	2200      	movs	r2, #0
    7364:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7366:	b103      	cbz	r3, 736a <uart0_status_isr+0x8a>
    7368:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    736a:	4b16      	ldr	r3, [pc, #88]	; (73c4 <uart0_status_isr+0xe4>)
    736c:	223c      	movs	r2, #60	; 0x3c
    736e:	70da      	strb	r2, [r3, #3]
	}
}
    7370:	bcf0      	pop	{r4, r5, r6, r7}
    7372:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7374:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    7376:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    7378:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    737a:	b662      	cpsie	i
    737c:	e7e3      	b.n	7346 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    737e:	790b      	ldrb	r3, [r1, #4]
    7380:	061c      	lsls	r4, r3, #24
    7382:	d5e5      	bpl.n	7350 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    7384:	4b16      	ldr	r3, [pc, #88]	; (73e0 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    7386:	4e17      	ldr	r6, [pc, #92]	; (73e4 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    7388:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    738a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    738c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    738e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    7390:	429c      	cmp	r4, r3
    7392:	d00e      	beq.n	73b2 <uart0_status_isr+0xd2>
    7394:	4d14      	ldr	r5, [pc, #80]	; (73e8 <uart0_status_isr+0x108>)
    7396:	e001      	b.n	739c <uart0_status_isr+0xbc>
    7398:	42a3      	cmp	r3, r4
    739a:	d00a      	beq.n	73b2 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    739c:	3301      	adds	r3, #1
    739e:	2b40      	cmp	r3, #64	; 0x40
    73a0:	bf28      	it	cs
    73a2:	2300      	movcs	r3, #0
			avail = UART0_S1;
    73a4:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    73a6:	5ce8      	ldrb	r0, [r5, r3]
    73a8:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    73aa:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    73ac:	7d08      	ldrb	r0, [r1, #20]
    73ae:	2807      	cmp	r0, #7
    73b0:	d9f2      	bls.n	7398 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    73b2:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    73b4:	4903      	ldr	r1, [pc, #12]	; (73c4 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    73b6:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    73b8:	790b      	ldrb	r3, [r1, #4]
    73ba:	0618      	lsls	r0, r3, #24
    73bc:	bf44      	itt	mi
    73be:	237c      	movmi	r3, #124	; 0x7c
    73c0:	70cb      	strbmi	r3, [r1, #3]
    73c2:	e7c5      	b.n	7350 <uart0_status_isr+0x70>
    73c4:	4006a000 	.word	0x4006a000
    73c8:	1fff960c 	.word	0x1fff960c
    73cc:	1fff960d 	.word	0x1fff960d
    73d0:	1fff9650 	.word	0x1fff9650
    73d4:	1fff9608 	.word	0x1fff9608
    73d8:	1fff9694 	.word	0x1fff9694
    73dc:	1fff9690 	.word	0x1fff9690
    73e0:	1fff9698 	.word	0x1fff9698
    73e4:	1fff9691 	.word	0x1fff9691
    73e8:	1fff9610 	.word	0x1fff9610

000073ec <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    73ec:	4a05      	ldr	r2, [pc, #20]	; (7404 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    73ee:	4b06      	ldr	r3, [pc, #24]	; (7408 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    73f0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    73f2:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    73f4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    73f6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    73f8:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    73fa:	bf38      	it	cc
    73fc:	3040      	addcc	r0, #64	; 0x40
    73fe:	1ac0      	subs	r0, r0, r3
}
    7400:	4770      	bx	lr
    7402:	bf00      	nop
    7404:	1fff970c 	.word	0x1fff970c
    7408:	1fff96a1 	.word	0x1fff96a1

0000740c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    740c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    740e:	4b38      	ldr	r3, [pc, #224]	; (74f0 <uart1_status_isr+0xe4>)
    7410:	791a      	ldrb	r2, [r3, #4]
    7412:	f012 0f30 	tst.w	r2, #48	; 0x30
    7416:	d02c      	beq.n	7472 <uart1_status_isr+0x66>
		__disable_irq();
    7418:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    741a:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    741c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    7420:	2900      	cmp	r1, #0
    7422:	d03d      	beq.n	74a0 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    7424:	b662      	cpsie	i
			head = rx_buffer_head;
    7426:	4f33      	ldr	r7, [pc, #204]	; (74f4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    7428:	4933      	ldr	r1, [pc, #204]	; (74f8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    742a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    742c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    742e:	4e33      	ldr	r6, [pc, #204]	; (74fc <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    7430:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    7432:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    7434:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    7436:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    7438:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    743a:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    743c:	bf28      	it	cs
    743e:	2300      	movcs	r3, #0
				if (newhead != tail) {
    7440:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    7442:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    7446:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    7448:	bf1c      	itt	ne
    744a:	54f1      	strbne	r1, [r6, r3]
    744c:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    744e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7452:	d1f0      	bne.n	7436 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    7454:	4b2a      	ldr	r3, [pc, #168]	; (7500 <uart1_status_isr+0xf4>)
    7456:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    7458:	b2c2      	uxtb	r2, r0
    745a:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    745c:	b14b      	cbz	r3, 7472 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    745e:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7460:	bf36      	itet	cc
    7462:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    7466:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    7468:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    746a:	2827      	cmp	r0, #39	; 0x27
    746c:	bfc4      	itt	gt
    746e:	2201      	movgt	r2, #1
    7470:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    7472:	491f      	ldr	r1, [pc, #124]	; (74f0 <uart1_status_isr+0xe4>)
    7474:	78ca      	ldrb	r2, [r1, #3]
    7476:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    7478:	0615      	lsls	r5, r2, #24
    747a:	d416      	bmi.n	74aa <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    747c:	0652      	lsls	r2, r2, #25
    747e:	d50d      	bpl.n	749c <uart1_status_isr+0x90>
    7480:	4b1b      	ldr	r3, [pc, #108]	; (74f0 <uart1_status_isr+0xe4>)
    7482:	791b      	ldrb	r3, [r3, #4]
    7484:	065b      	lsls	r3, r3, #25
    7486:	d509      	bpl.n	749c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7488:	4b1e      	ldr	r3, [pc, #120]	; (7504 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    748a:	491f      	ldr	r1, [pc, #124]	; (7508 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    748c:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    748e:	2200      	movs	r2, #0
    7490:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    7492:	b103      	cbz	r3, 7496 <uart1_status_isr+0x8a>
    7494:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    7496:	4b16      	ldr	r3, [pc, #88]	; (74f0 <uart1_status_isr+0xe4>)
    7498:	223c      	movs	r2, #60	; 0x3c
    749a:	70da      	strb	r2, [r3, #3]
	}
}
    749c:	bcf0      	pop	{r4, r5, r6, r7}
    749e:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    74a0:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    74a2:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    74a4:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    74a6:	b662      	cpsie	i
    74a8:	e7e3      	b.n	7472 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    74aa:	790b      	ldrb	r3, [r1, #4]
    74ac:	061c      	lsls	r4, r3, #24
    74ae:	d5e5      	bpl.n	747c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    74b0:	4b16      	ldr	r3, [pc, #88]	; (750c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    74b2:	4e17      	ldr	r6, [pc, #92]	; (7510 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    74b4:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    74b6:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    74b8:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    74ba:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    74bc:	429c      	cmp	r4, r3
    74be:	d00e      	beq.n	74de <uart1_status_isr+0xd2>
    74c0:	4d14      	ldr	r5, [pc, #80]	; (7514 <uart1_status_isr+0x108>)
    74c2:	e001      	b.n	74c8 <uart1_status_isr+0xbc>
    74c4:	42a3      	cmp	r3, r4
    74c6:	d00a      	beq.n	74de <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    74c8:	3301      	adds	r3, #1
    74ca:	2b28      	cmp	r3, #40	; 0x28
    74cc:	bf28      	it	cs
    74ce:	2300      	movcs	r3, #0
			avail = UART1_S1;
    74d0:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    74d2:	5ce8      	ldrb	r0, [r5, r3]
    74d4:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    74d6:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    74d8:	7d08      	ldrb	r0, [r1, #20]
    74da:	2807      	cmp	r0, #7
    74dc:	d9f2      	bls.n	74c4 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    74de:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    74e0:	4903      	ldr	r1, [pc, #12]	; (74f0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    74e2:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    74e4:	790b      	ldrb	r3, [r1, #4]
    74e6:	0618      	lsls	r0, r3, #24
    74e8:	bf44      	itt	mi
    74ea:	237c      	movmi	r3, #124	; 0x7c
    74ec:	70cb      	strbmi	r3, [r1, #3]
    74ee:	e7c5      	b.n	747c <uart1_status_isr+0x70>
    74f0:	4006b000 	.word	0x4006b000
    74f4:	1fff970c 	.word	0x1fff970c
    74f8:	1fff96a1 	.word	0x1fff96a1
    74fc:	1fff96cc 	.word	0x1fff96cc
    7500:	1fff969c 	.word	0x1fff969c
    7504:	1fff9710 	.word	0x1fff9710
    7508:	1fff96a0 	.word	0x1fff96a0
    750c:	1fff9714 	.word	0x1fff9714
    7510:	1fff970d 	.word	0x1fff970d
    7514:	1fff96a4 	.word	0x1fff96a4

00007518 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7518:	4a05      	ldr	r2, [pc, #20]	; (7530 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    751a:	4b06      	ldr	r3, [pc, #24]	; (7534 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    751c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    751e:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    7520:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    7522:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    7524:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    7526:	bf38      	it	cc
    7528:	3040      	addcc	r0, #64	; 0x40
    752a:	1ac0      	subs	r0, r0, r3
}
    752c:	4770      	bx	lr
    752e:	bf00      	nop
    7530:	1fff971c 	.word	0x1fff971c
    7534:	1fff971d 	.word	0x1fff971d

00007538 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    7538:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    753a:	4b2b      	ldr	r3, [pc, #172]	; (75e8 <uart2_status_isr+0xb0>)
    753c:	791a      	ldrb	r2, [r3, #4]
    753e:	0694      	lsls	r4, r2, #26
    7540:	d51f      	bpl.n	7582 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    7542:	482a      	ldr	r0, [pc, #168]	; (75ec <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    7544:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    7546:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7548:	4929      	ldr	r1, [pc, #164]	; (75f0 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    754a:	3301      	adds	r3, #1
    754c:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    754e:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    7550:	bfc8      	it	gt
    7552:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7554:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    7556:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    7558:	d003      	beq.n	7562 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    755a:	4c26      	ldr	r4, [pc, #152]	; (75f4 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    755c:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    755e:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    7560:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    7562:	4a25      	ldr	r2, [pc, #148]	; (75f8 <uart2_status_isr+0xc0>)
    7564:	6811      	ldr	r1, [r2, #0]
    7566:	b161      	cbz	r1, 7582 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    7568:	4a24      	ldr	r2, [pc, #144]	; (75fc <uart2_status_isr+0xc4>)
    756a:	7812      	ldrb	r2, [r2, #0]
    756c:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    756e:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    7570:	bf36      	itet	cc
    7572:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    7576:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    7578:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    757a:	2b27      	cmp	r3, #39	; 0x27
    757c:	bfc4      	itt	gt
    757e:	2301      	movgt	r3, #1
    7580:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    7582:	4a19      	ldr	r2, [pc, #100]	; (75e8 <uart2_status_isr+0xb0>)
    7584:	78d3      	ldrb	r3, [r2, #3]
    7586:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    7588:	0618      	lsls	r0, r3, #24
    758a:	d411      	bmi.n	75b0 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    758c:	065a      	lsls	r2, r3, #25
    758e:	d50d      	bpl.n	75ac <uart2_status_isr+0x74>
    7590:	4b15      	ldr	r3, [pc, #84]	; (75e8 <uart2_status_isr+0xb0>)
    7592:	791b      	ldrb	r3, [r3, #4]
    7594:	065b      	lsls	r3, r3, #25
    7596:	d509      	bpl.n	75ac <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    7598:	4b19      	ldr	r3, [pc, #100]	; (7600 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    759a:	491a      	ldr	r1, [pc, #104]	; (7604 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    759c:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    759e:	2200      	movs	r2, #0
    75a0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    75a2:	b103      	cbz	r3, 75a6 <uart2_status_isr+0x6e>
    75a4:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    75a6:	4b10      	ldr	r3, [pc, #64]	; (75e8 <uart2_status_isr+0xb0>)
    75a8:	222c      	movs	r2, #44	; 0x2c
    75aa:	70da      	strb	r2, [r3, #3]
	}
}
    75ac:	bc30      	pop	{r4, r5}
    75ae:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    75b0:	7911      	ldrb	r1, [r2, #4]
    75b2:	0609      	lsls	r1, r1, #24
    75b4:	d5ea      	bpl.n	758c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    75b6:	4914      	ldr	r1, [pc, #80]	; (7608 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    75b8:	4810      	ldr	r0, [pc, #64]	; (75fc <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    75ba:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    75bc:	7801      	ldrb	r1, [r0, #0]
    75be:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    75c0:	428c      	cmp	r4, r1
    75c2:	d00d      	beq.n	75e0 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    75c4:	1c4a      	adds	r2, r1, #1
    75c6:	2a27      	cmp	r2, #39	; 0x27
    75c8:	bf84      	itt	hi
    75ca:	2100      	movhi	r1, #0
    75cc:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    75ce:	4d0f      	ldr	r5, [pc, #60]	; (760c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    75d0:	4c05      	ldr	r4, [pc, #20]	; (75e8 <uart2_status_isr+0xb0>)
    75d2:	bf98      	it	ls
    75d4:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    75d6:	5caa      	ldrb	r2, [r5, r2]
    75d8:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    75da:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    75dc:	7001      	strb	r1, [r0, #0]
    75de:	e7d5      	b.n	758c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    75e0:	216c      	movs	r1, #108	; 0x6c
    75e2:	70d1      	strb	r1, [r2, #3]
    75e4:	e7d2      	b.n	758c <uart2_status_isr+0x54>
    75e6:	bf00      	nop
    75e8:	4006c000 	.word	0x4006c000
    75ec:	1fff971c 	.word	0x1fff971c
    75f0:	1fff971d 	.word	0x1fff971d
    75f4:	1fff9748 	.word	0x1fff9748
    75f8:	1fff9718 	.word	0x1fff9718
    75fc:	1fff9789 	.word	0x1fff9789
    7600:	1fff978c 	.word	0x1fff978c
    7604:	1fff9788 	.word	0x1fff9788
    7608:	1fff9790 	.word	0x1fff9790
    760c:	1fff9720 	.word	0x1fff9720

00007610 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    7614:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    7616:	4b19      	ldr	r3, [pc, #100]	; (767c <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    7618:	4d19      	ldr	r5, [pc, #100]	; (7680 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    761a:	481a      	ldr	r0, [pc, #104]	; (7684 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    761c:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    761e:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    7620:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    7622:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    7624:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    7626:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    7628:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    762a:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    762c:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    762e:	7813      	ldrb	r3, [r2, #0]
    7630:	061b      	lsls	r3, r3, #24
    7632:	d5fc      	bpl.n	762e <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    7634:	4b14      	ldr	r3, [pc, #80]	; (7688 <usb_init_serialnumber+0x78>)
    7636:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    7638:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    763a:	4b14      	ldr	r3, [pc, #80]	; (768c <usb_init_serialnumber+0x7c>)
    763c:	4c14      	ldr	r4, [pc, #80]	; (7690 <usb_init_serialnumber+0x80>)
    763e:	4298      	cmp	r0, r3
    7640:	bf98      	it	ls
    7642:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    7646:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    7648:	bf98      	it	ls
    764a:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    764c:	220a      	movs	r2, #10
    764e:	f7ff fe11 	bl	7274 <ultoa>
    7652:	a901      	add	r1, sp, #4
    7654:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    7656:	2300      	movs	r3, #0
		char c = buf[i];
    7658:	f811 2b01 	ldrb.w	r2, [r1], #1
    765c:	3301      	adds	r3, #1
		if (!c) break;
    765e:	b13a      	cbz	r2, 7670 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    7660:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    7662:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    7666:	d1f7      	bne.n	7658 <usb_init_serialnumber+0x48>
    7668:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    766a:	7023      	strb	r3, [r4, #0]
}
    766c:	b004      	add	sp, #16
    766e:	bd70      	pop	{r4, r5, r6, pc}
    7670:	005b      	lsls	r3, r3, #1
    7672:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    7674:	7023      	strb	r3, [r4, #0]
}
    7676:	b004      	add	sp, #16
    7678:	bd70      	pop	{r4, r5, r6, pc}
    767a:	bf00      	nop
    767c:	40020000 	.word	0x40020000
    7680:	40020007 	.word	0x40020007
    7684:	40020006 	.word	0x40020006
    7688:	40020008 	.word	0x40020008
    768c:	0098967f 	.word	0x0098967f
    7690:	1fff87d8 	.word	0x1fff87d8

00007694 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    7694:	4770      	bx	lr
    7696:	bf00      	nop

00007698 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
