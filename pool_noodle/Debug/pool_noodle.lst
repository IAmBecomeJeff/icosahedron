
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 e1 5a 00 00 99 5a 00 00     ... .....Z...Z..
      10:	99 5a 00 00 99 5a 00 00 99 5a 00 00 99 5a 00 00     .Z...Z...Z...Z..
      20:	99 5a 00 00 99 5a 00 00 99 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      30:	e1 5a 00 00 99 5a 00 00 0d 6f 00 00 11 70 00 00     .Z...Z...o...p..
      40:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      50:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      60:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      70:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      80:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      90:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      a0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      b0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      c0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      d0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      e0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
      f0:	e1 5a 00 00 19 72 00 00 e1 5a 00 00 45 73 00 00     .Z...r...Z..Es..
     100:	e1 5a 00 00 71 74 00 00 e1 5a 00 00 e1 5a 00 00     .Z..qt...Z...Z..
     110:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     120:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     130:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     140:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     150:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     160:	e1 5a 00 00 29 5f 00 00 e1 5a 00 00 e1 5a 00 00     .Z..)_...Z...Z..
     170:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     180:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     190:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     1a0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00 e1 5a 00 00     .Z...Z...Z...Z..
     1b0:	e1 5a 00 00 e1 5a 00 00 e1 5a 00 00                 .Z...Z...Z..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f005 fc8a 	bl	5ae8 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f005 fcde 	bl	5c94 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f005 fc4f 	bl	5b84 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f005 fc40 	bl	5b84 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f007 f966 	bl	75d8 <__libc_init_array>

	startup_late_hook();
     30c:	f005 fbf2 	bl	5af4 <startup_late_hook>
	main();
     310:	f006 fe86 	bl	7020 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c1c 	.word	0x1fff8c1c
     33c:	00009ed0 	.word	0x00009ed0
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c1c 	.word	0x1fff8c1c
     348:	1fff97a8 	.word	0x1fff97a8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e29c664 	.word	0x5e29c664
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c1c 	.word	0x1fff8c1c
     42c:	00000000 	.word	0x00000000
     430:	00009ed4 	.word	0x00009ed4

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c20 	.word	0x1fff8c20
     460:	00009ed4 	.word	0x00009ed4
     464:	1fff8c1c 	.word	0x1fff8c1c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char) [clone .part.10]>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
     490:	b470      	push	{r4, r5, r6}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     492:	4e15      	ldr	r6, [pc, #84]	; (4e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char) [clone .part.10]+0x58>)
     494:	8833      	ldrh	r3, [r6, #0]
     496:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     49a:	f243 6519 	movw	r5, #13849	; 0x3619
     49e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     4a2:	442b      	add	r3, r5
     4a4:	b29b      	uxth	r3, r3
     4a6:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     4aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     4ae:	442c      	add	r4, r5
     4b0:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4b2:	eb04 2514 	add.w	r5, r4, r4, lsr #8
     4b6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4ba:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
     4bc:	b2ed      	uxtb	r5, r5
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
     4c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4c6:	390a      	subs	r1, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
     4c8:	3a0a      	subs	r2, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
     4ce:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
     4d2:	eb02 2525 	add.w	r5, r2, r5, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4d6:	eb01 2323 	add.w	r3, r1, r3, asr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4da:	8034      	strh	r4, [r6, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
     4dc:	f880 523d 	strb.w	r5, [r0, #573]	; 0x23d
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4e0:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}
     4e4:	bc70      	pop	{r4, r5, r6}
     4e6:	4770      	bx	lr
     4e8:	1fff8734 	.word	0x1fff8734

000004ec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     4ec:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     4ee:	2101      	movs	r1, #1
     4f0:	4604      	mov	r4, r0
     4f2:	200e      	movs	r0, #14
     4f4:	f005 fb58 	bl	5ba8 <pinMode>
     4f8:	2007      	movs	r0, #7
     4fa:	2101      	movs	r1, #1
     4fc:	f005 fb54 	bl	5ba8 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     500:	69a0      	ldr	r0, [r4, #24]
     502:	b158      	cbz	r0, 51c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x30>
     504:	6803      	ldr	r3, [r0, #0]
     506:	4a07      	ldr	r2, [pc, #28]	; (524 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x38>)
     508:	685b      	ldr	r3, [r3, #4]
     50a:	4293      	cmp	r3, r2
     50c:	d107      	bne.n	51e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x32>
     50e:	6842      	ldr	r2, [r0, #4]
     510:	7b01      	ldrb	r1, [r0, #12]
     512:	7813      	ldrb	r3, [r2, #0]
     514:	ea23 0301 	bic.w	r3, r3, r1
     518:	7013      	strb	r3, [r2, #0]
     51a:	bd10      	pop	{r4, pc}
     51c:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     522:	4718      	bx	r3
     524:	00000481 	.word	0x00000481

00000528 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     528:	b5f0      	push	{r4, r5, r6, r7, lr}
     52a:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     52c:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     52e:	6805      	ldr	r5, [r0, #0]
     530:	f88d 3004 	strb.w	r3, [sp, #4]
     534:	f88d 3005 	strb.w	r3, [sp, #5]
     538:	f88d 3006 	strb.w	r3, [sp, #6]
     53c:	682e      	ldr	r6, [r5, #0]
     53e:	4a37      	ldr	r2, [pc, #220]	; (61c <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     540:	f88d 3008 	strb.w	r3, [sp, #8]
     544:	4296      	cmp	r6, r2
     546:	f88d 3009 	strb.w	r3, [sp, #9]
     54a:	f88d 300a 	strb.w	r3, [sp, #10]
     54e:	d15f      	bne.n	610 <CLEDController::clearLeds(int)+0xe8>
     550:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     552:	9104      	str	r1, [sp, #16]
     554:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     556:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     558:	a801      	add	r0, sp, #4
     55a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     55c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     560:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     564:	f88d 3020 	strb.w	r3, [sp, #32]
     568:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     56a:	d015      	beq.n	598 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     56c:	f88d 301d 	strb.w	r3, [sp, #29]
     570:	f88d 301c 	strb.w	r3, [sp, #28]
     574:	f88d 301b 	strb.w	r3, [sp, #27]
     578:	f88d 301a 	strb.w	r3, [sp, #26]
     57c:	f88d 3019 	strb.w	r3, [sp, #25]
     580:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     584:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     586:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     588:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     58c:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     58e:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     590:	a903      	add	r1, sp, #12
     592:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     594:	b00b      	add	sp, #44	; 0x2c
     596:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     598:	4a21      	ldr	r2, [pc, #132]	; (620 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     59a:	7813      	ldrb	r3, [r2, #0]
     59c:	3301      	adds	r3, #1
     59e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     5a2:	f013 0f01 	tst.w	r3, #1
     5a6:	bf14      	ite	ne
     5a8:	2180      	movne	r1, #128	; 0x80
     5aa:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5ac:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     5ae:	079a      	lsls	r2, r3, #30
     5b0:	bf44      	itt	mi
     5b2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     5b6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     5b8:	075b      	lsls	r3, r3, #29
     5ba:	bf48      	it	mi
     5bc:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     5c0:	3110      	adds	r1, #16
     5c2:	2200      	movs	r2, #0
     5c4:	b2c9      	uxtb	r1, r1
     5c6:	f10d 031b 	add.w	r3, sp, #27
     5ca:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5ce:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5d2:	b1aa      	cbz	r2, 600 <CLEDController::clearLeds(int)+0xd8>
     5d4:	fb9e f2f2 	sdiv	r2, lr, r2
     5d8:	b2d2      	uxtb	r2, r2
     5da:	1c50      	adds	r0, r2, #1
     5dc:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5de:	fb00 1501 	mla	r5, r0, r1, r1
     5e2:	122d      	asrs	r5, r5, #8
     5e4:	7018      	strb	r0, [r3, #0]
     5e6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5e8:	b105      	cbz	r5, 5ec <CLEDController::clearLeds(int)+0xc4>
     5ea:	3e01      	subs	r6, #1
     5ec:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     5f0:	b100      	cbz	r0, 5f4 <CLEDController::clearLeds(int)+0xcc>
     5f2:	701a      	strb	r2, [r3, #0]
     5f4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5f6:	429f      	cmp	r7, r3
     5f8:	d008      	beq.n	60c <CLEDController::clearLeds(int)+0xe4>
     5fa:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5fc:	2a00      	cmp	r2, #0
     5fe:	d1e9      	bne.n	5d4 <CLEDController::clearLeds(int)+0xac>
     600:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     602:	f803 2c03 	strb.w	r2, [r3, #-3]
     606:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     608:	429f      	cmp	r7, r3
     60a:	d1f6      	bne.n	5fa <CLEDController::clearLeds(int)+0xd2>
     60c:	6825      	ldr	r5, [r4, #0]
     60e:	e7b9      	b.n	584 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     610:	460a      	mov	r2, r1
     612:	ab02      	add	r3, sp, #8
     614:	a901      	add	r1, sp, #4
     616:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     618:	b00b      	add	sp, #44	; 0x2c
     61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     61c:	000006e9 	.word	0x000006e9
     620:	1fff8c38 	.word	0x1fff8c38

00000624 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     628:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     62a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     62c:	789b      	ldrb	r3, [r3, #2]
     62e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     630:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     632:	9101      	str	r1, [sp, #4]
     634:	9202      	str	r2, [sp, #8]
     636:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     638:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     63c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     640:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     644:	d017      	beq.n	676 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     646:	2300      	movs	r3, #0
     648:	f88d 3015 	strb.w	r3, [sp, #21]
     64c:	f88d 3014 	strb.w	r3, [sp, #20]
     650:	f88d 3013 	strb.w	r3, [sp, #19]
     654:	f88d 3012 	strb.w	r3, [sp, #18]
     658:	f88d 3011 	strb.w	r3, [sp, #17]
     65c:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     660:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     662:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     664:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     666:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     668:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     66c:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     66e:	a901      	add	r1, sp, #4
     670:	4798      	blx	r3
  }
     672:	b009      	add	sp, #36	; 0x24
     674:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     676:	4a1b      	ldr	r2, [pc, #108]	; (6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     678:	7813      	ldrb	r3, [r2, #0]
     67a:	3301      	adds	r3, #1
     67c:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     680:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     684:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     686:	bf14      	ite	ne
     688:	2280      	movne	r2, #128	; 0x80
     68a:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     68c:	0799      	lsls	r1, r3, #30
     68e:	bf44      	itt	mi
     690:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     694:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     696:	075b      	lsls	r3, r3, #29
     698:	bf48      	it	mi
     69a:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     69e:	3210      	adds	r2, #16
     6a0:	b2d2      	uxtb	r2, r2
     6a2:	f10d 0313 	add.w	r3, sp, #19
     6a6:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6aa:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6ae:	b1ac      	cbz	r4, 6dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     6b0:	fb9e f4f4 	sdiv	r4, lr, r4
     6b4:	b2e4      	uxtb	r4, r4
     6b6:	1c61      	adds	r1, r4, #1
     6b8:	b2c9      	uxtb	r1, r1
     6ba:	fb01 2502 	mla	r5, r1, r2, r2
     6be:	122d      	asrs	r5, r5, #8
     6c0:	7019      	strb	r1, [r3, #0]
     6c2:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6c4:	b105      	cbz	r5, 6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     6c6:	3e01      	subs	r6, #1
     6c8:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6cc:	b101      	cbz	r1, 6d0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6ce:	701c      	strb	r4, [r3, #0]
     6d0:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6d2:	42bb      	cmp	r3, r7
     6d4:	d0c4      	beq.n	660 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     6d6:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6d8:	2c00      	cmp	r4, #0
     6da:	d1e9      	bne.n	6b0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     6dc:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6de:	f803 4c03 	strb.w	r4, [r3, #-3]
     6e2:	e7f5      	b.n	6d0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6e4:	1fff8c38 	.word	0x1fff8c38

000006e8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ea:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6ec:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     6ee:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     6f0:	789b      	ldrb	r3, [r3, #2]
     6f2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6f4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     6f6:	9101      	str	r1, [sp, #4]
     6f8:	9202      	str	r2, [sp, #8]
     6fa:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6fc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     700:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     704:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     708:	d016      	beq.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     70a:	2300      	movs	r3, #0
     70c:	f88d 3015 	strb.w	r3, [sp, #21]
     710:	f88d 3014 	strb.w	r3, [sp, #20]
     714:	f88d 3013 	strb.w	r3, [sp, #19]
     718:	f88d 3012 	strb.w	r3, [sp, #18]
     71c:	f88d 3011 	strb.w	r3, [sp, #17]
     720:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     724:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     726:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     728:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     72a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     72e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     730:	a901      	add	r1, sp, #4
     732:	4790      	blx	r2
  }
     734:	b009      	add	sp, #36	; 0x24
     736:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     738:	4a1b      	ldr	r2, [pc, #108]	; (7a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     73a:	7813      	ldrb	r3, [r2, #0]
     73c:	3301      	adds	r3, #1
     73e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     742:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     746:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     748:	bf14      	ite	ne
     74a:	2280      	movne	r2, #128	; 0x80
     74c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     74e:	0799      	lsls	r1, r3, #30
     750:	bf44      	itt	mi
     752:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     756:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     758:	075b      	lsls	r3, r3, #29
     75a:	bf48      	it	mi
     75c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     760:	3210      	adds	r2, #16
     762:	b2d2      	uxtb	r2, r2
     764:	f10d 0313 	add.w	r3, sp, #19
     768:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     76c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     770:	b1ac      	cbz	r4, 79e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     772:	fb9e f4f4 	sdiv	r4, lr, r4
     776:	b2e4      	uxtb	r4, r4
     778:	1c61      	adds	r1, r4, #1
     77a:	b2c9      	uxtb	r1, r1
     77c:	fb01 2502 	mla	r5, r1, r2, r2
     780:	122d      	asrs	r5, r5, #8
     782:	7019      	strb	r1, [r3, #0]
     784:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     786:	b105      	cbz	r5, 78a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     788:	3e01      	subs	r6, #1
     78a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     78e:	b101      	cbz	r1, 792 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     790:	701c      	strb	r4, [r3, #0]
     792:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     794:	42bb      	cmp	r3, r7
     796:	d0c5      	beq.n	724 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     798:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     79a:	2c00      	cmp	r4, #0
     79c:	d1e9      	bne.n	772 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     79e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7a0:	f803 4c03 	strb.w	r4, [r3, #-3]
     7a4:	e7f5      	b.n	792 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a6:	bf00      	nop
     7a8:	1fff8c38 	.word	0x1fff8c38

000007ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b0:	b089      	sub	sp, #36	; 0x24
     7b2:	9007      	str	r0, [sp, #28]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     7b4:	6980      	ldr	r0, [r0, #24]
     7b6:	b150      	cbz	r0, 7ce <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22>
     7b8:	6803      	ldr	r3, [r0, #0]
     7ba:	4a57      	ldr	r2, [pc, #348]	; (918 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x16c>)
     7bc:	681b      	ldr	r3, [r3, #0]
     7be:	4293      	cmp	r3, r2
     7c0:	f040 827e 	bne.w	cc0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x514>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     7c4:	6842      	ldr	r2, [r0, #4]
     7c6:	7b00      	ldrb	r0, [r0, #12]
     7c8:	7813      	ldrb	r3, [r2, #0]
     7ca:	4303      	orrs	r3, r0
     7cc:	7013      	strb	r3, [r2, #0]
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7ce:	4853      	ldr	r0, [pc, #332]	; (91c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x170>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7d0:	4a53      	ldr	r2, [pc, #332]	; (920 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x174>)
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     7d2:	7d0d      	ldrb	r5, [r1, #20]
     7d4:	7ccf      	ldrb	r7, [r1, #19]
     7d6:	f891 e012 	ldrb.w	lr, [r1, #18]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7da:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7dc:	2304      	movs	r3, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7de:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7e0:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
     7e2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7e4:	6003      	str	r3, [r0, #0]
     7e6:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7e8:	6013      	str	r3, [r2, #0]
     7ea:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7ec:	6003      	str	r3, [r0, #0]
     7ee:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7f0:	6013      	str	r3, [r2, #0]
     7f2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7f4:	6003      	str	r3, [r0, #0]
     7f6:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7f8:	6013      	str	r3, [r2, #0]
     7fa:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7fc:	6003      	str	r3, [r0, #0]
     7fe:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     800:	6013      	str	r3, [r2, #0]
     802:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     804:	6003      	str	r3, [r0, #0]
     806:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     808:	6013      	str	r3, [r2, #0]
     80a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     80c:	6003      	str	r3, [r0, #0]
     80e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     810:	6013      	str	r3, [r2, #0]
     812:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     814:	6003      	str	r3, [r0, #0]
     816:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     818:	6013      	str	r3, [r2, #0]
     81a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     81c:	6003      	str	r3, [r0, #0]
     81e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     820:	6013      	str	r3, [r2, #0]
     822:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     824:	6003      	str	r3, [r0, #0]
     826:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     828:	6013      	str	r3, [r2, #0]
     82a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     82c:	6003      	str	r3, [r0, #0]
     82e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     830:	6013      	str	r3, [r2, #0]
     832:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     834:	6003      	str	r3, [r0, #0]
     836:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     838:	6013      	str	r3, [r2, #0]
     83a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     83c:	6003      	str	r3, [r0, #0]
     83e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     840:	6013      	str	r3, [r2, #0]
     842:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     844:	6003      	str	r3, [r0, #0]
     846:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     848:	6013      	str	r3, [r2, #0]
     84a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     84c:	6003      	str	r3, [r0, #0]
     84e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     850:	6013      	str	r3, [r2, #0]
     852:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     854:	6003      	str	r3, [r0, #0]
     856:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     858:	6013      	str	r3, [r2, #0]
     85a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     85c:	6003      	str	r3, [r0, #0]
     85e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     860:	6013      	str	r3, [r2, #0]
     862:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     864:	6003      	str	r3, [r0, #0]
     866:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     868:	6013      	str	r3, [r2, #0]
     86a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     86c:	6003      	str	r3, [r0, #0]
     86e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     870:	6013      	str	r3, [r2, #0]
     872:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     874:	6003      	str	r3, [r0, #0]
     876:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     878:	6013      	str	r3, [r2, #0]
     87a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     87c:	6003      	str	r3, [r0, #0]
     87e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     880:	6013      	str	r3, [r2, #0]
     882:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     884:	6003      	str	r3, [r0, #0]
     886:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     888:	6013      	str	r3, [r2, #0]
     88a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     88c:	6003      	str	r3, [r0, #0]
     88e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     890:	6013      	str	r3, [r2, #0]
     892:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     894:	6003      	str	r3, [r0, #0]
     896:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     898:	6013      	str	r3, [r2, #0]
     89a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     89c:	6003      	str	r3, [r0, #0]
     89e:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8a0:	6013      	str	r3, [r2, #0]
     8a2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8a4:	6003      	str	r3, [r0, #0]
     8a6:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8a8:	6013      	str	r3, [r2, #0]
     8aa:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8ac:	6003      	str	r3, [r0, #0]
     8ae:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8b0:	6013      	str	r3, [r2, #0]
     8b2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8b4:	6003      	str	r3, [r0, #0]
     8b6:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8b8:	6013      	str	r3, [r2, #0]
     8ba:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8bc:	6003      	str	r3, [r0, #0]
     8be:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8c0:	6013      	str	r3, [r2, #0]
     8c2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8c4:	6003      	str	r3, [r0, #0]
     8c6:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8c8:	6013      	str	r3, [r2, #0]
     8ca:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8cc:	6003      	str	r3, [r0, #0]
     8ce:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8d0:	6013      	str	r3, [r2, #0]
     8d2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8d4:	6003      	str	r3, [r0, #0]
     8d6:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8d8:	6013      	str	r3, [r2, #0]
     8da:	bf00      	nop
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     8dc:	f8d1 a008 	ldr.w	sl, [r1, #8]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8e0:	6003      	str	r3, [r0, #0]
     8e2:	f1ba 0f00 	cmp.w	sl, #0
     8e6:	f340 8149 	ble.w	b7c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3d0>
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     8ea:	f8d1 b018 	ldr.w	fp, [r1, #24]
     8ee:	f8d1 c000 	ldr.w	ip, [r1]
     8f2:	f8cd a004 	str.w	sl, [sp, #4]
     8f6:	f10e 0601 	add.w	r6, lr, #1
     8fa:	9606      	str	r6, [sp, #24]
     8fc:	1c7e      	adds	r6, r7, #1
     8fe:	9605      	str	r6, [sp, #20]
     900:	f10b 0602 	add.w	r6, fp, #2
     904:	3501      	adds	r5, #1
     906:	9603      	str	r6, [sp, #12]
     908:	f10b 0601 	add.w	r6, fp, #1
     90c:	9504      	str	r5, [sp, #16]
     90e:	9602      	str	r6, [sp, #8]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     910:	4625      	mov	r5, r4
     912:	4666      	mov	r6, ip
     914:	e006      	b.n	924 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x178>
     916:	bf00      	nop
     918:	00000475 	.word	0x00000475
     91c:	400ff0c8 	.word	0x400ff0c8
     920:	400ff0c4 	.word	0x400ff0c4
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     924:	9f03      	ldr	r7, [sp, #12]
     926:	f816 e00b 	ldrb.w	lr, [r6, fp]
     92a:	f816 8007 	ldrb.w	r8, [r6, r7]
     92e:	9f02      	ldr	r7, [sp, #8]
     930:	f816 c007 	ldrb.w	ip, [r6, r7]
     934:	9f04      	ldr	r7, [sp, #16]
     936:	6015      	str	r5, [r2, #0]
     938:	fb07 f808 	mul.w	r8, r7, r8
     93c:	9f05      	ldr	r7, [sp, #20]
     93e:	fb07 fc0c 	mul.w	ip, r7, ip
     942:	9f06      	ldr	r7, [sp, #24]
     944:	6013      	str	r3, [r2, #0]
     946:	fb07 fe0e 	mul.w	lr, r7, lr
     94a:	ea4f 2828 	mov.w	r8, r8, asr #8
     94e:	f068 08ff 	orn	r8, r8, #255	; 0xff
     952:	ea4f 2c2c 	mov.w	ip, ip, asr #8
     956:	ea4f 2e2e 	mov.w	lr, lr, asr #8
     95a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     95c:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     95e:	6015      	str	r5, [r2, #0]
     960:	6013      	str	r3, [r2, #0]
     962:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     964:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     966:	6015      	str	r5, [r2, #0]
     968:	6013      	str	r3, [r2, #0]
     96a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     96c:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     96e:	6015      	str	r5, [r2, #0]
     970:	6013      	str	r3, [r2, #0]
     972:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     974:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     976:	6015      	str	r5, [r2, #0]
     978:	6013      	str	r3, [r2, #0]
     97a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     97c:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     97e:	6015      	str	r5, [r2, #0]
     980:	6013      	str	r3, [r2, #0]
     982:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     984:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     986:	6015      	str	r5, [r2, #0]
     988:	6013      	str	r3, [r2, #0]
     98a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     98c:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     98e:	6015      	str	r5, [r2, #0]
     990:	6013      	str	r3, [r2, #0]
     992:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     994:	f018 0f80 	tst.w	r8, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     998:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     99a:	fa5f f988 	uxtb.w	r9, r8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     99e:	bf14      	ite	ne
     9a0:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9a2:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9a4:	6013      	str	r3, [r2, #0]
     9a6:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     9a8:	f019 0f40 	tst.w	r9, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9ac:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9ae:	bf14      	ite	ne
     9b0:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9b2:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9b4:	6013      	str	r3, [r2, #0]
     9b6:	bf00      	nop
     9b8:	f019 0f20 	tst.w	r9, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9bc:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9be:	bf14      	ite	ne
     9c0:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9c2:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9c4:	6013      	str	r3, [r2, #0]
     9c6:	bf00      	nop
     9c8:	f019 0f10 	tst.w	r9, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9cc:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9ce:	bf14      	ite	ne
     9d0:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9d2:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9d4:	6013      	str	r3, [r2, #0]
     9d6:	bf00      	nop
     9d8:	f019 0f08 	tst.w	r9, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9dc:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9de:	bf14      	ite	ne
     9e0:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9e2:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9e4:	6013      	str	r3, [r2, #0]
     9e6:	bf00      	nop
     9e8:	f019 0f04 	tst.w	r9, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9ec:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9ee:	bf14      	ite	ne
     9f0:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9f2:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9f4:	6013      	str	r3, [r2, #0]
     9f6:	bf00      	nop
     9f8:	f019 0f02 	tst.w	r9, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9fc:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9fe:	bf14      	ite	ne
     a00:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a02:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a04:	6013      	str	r3, [r2, #0]
     a06:	bf00      	nop
     a08:	f019 0f01 	tst.w	r9, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a0c:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a0e:	bf14      	ite	ne
     a10:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a12:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a14:	6013      	str	r3, [r2, #0]
     a16:	bf00      	nop
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
     a18:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
     a1c:	fa1f fc8c 	uxth.w	ip, ip
		w |= b2;
     a20:	ea4c 0e0e 	orr.w	lr, ip, lr
     a24:	fa1f fe8e 	uxth.w	lr, lr
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     a28:	ea4f 282e 	mov.w	r8, lr, asr #8
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     a2c:	f018 0f80 	tst.w	r8, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a30:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     a32:	fa5f fc88 	uxtb.w	ip, r8
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a36:	bf14      	ite	ne
     a38:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a3a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a3c:	6013      	str	r3, [r2, #0]
     a3e:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     a40:	f01c 0f40 	tst.w	ip, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a44:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a46:	bf14      	ite	ne
     a48:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a4a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a4c:	6013      	str	r3, [r2, #0]
     a4e:	bf00      	nop
     a50:	f01c 0f20 	tst.w	ip, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a54:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a56:	bf14      	ite	ne
     a58:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a5a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a5c:	6013      	str	r3, [r2, #0]
     a5e:	bf00      	nop
     a60:	f01c 0f10 	tst.w	ip, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a64:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a66:	bf14      	ite	ne
     a68:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a6a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a6c:	6013      	str	r3, [r2, #0]
     a6e:	bf00      	nop
     a70:	f01c 0f08 	tst.w	ip, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a74:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a76:	bf14      	ite	ne
     a78:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a7a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a7c:	6013      	str	r3, [r2, #0]
     a7e:	bf00      	nop
     a80:	f01c 0f04 	tst.w	ip, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a84:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a86:	bf14      	ite	ne
     a88:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a8a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a8c:	6013      	str	r3, [r2, #0]
     a8e:	bf00      	nop
     a90:	f01c 0f02 	tst.w	ip, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a94:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a96:	bf14      	ite	ne
     a98:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a9a:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a9c:	6013      	str	r3, [r2, #0]
     a9e:	bf00      	nop
     aa0:	f01c 0f01 	tst.w	ip, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aa4:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aa6:	bf14      	ite	ne
     aa8:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aaa:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aac:	6013      	str	r3, [r2, #0]
     aae:	bf00      	nop
     ab0:	f01e 0f80 	tst.w	lr, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ab4:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     ab6:	fa5f fc8e 	uxtb.w	ip, lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aba:	bf14      	ite	ne
     abc:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     abe:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ac0:	6013      	str	r3, [r2, #0]
     ac2:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     ac4:	f01c 0f40 	tst.w	ip, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ac8:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aca:	bf14      	ite	ne
     acc:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ace:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ad0:	6013      	str	r3, [r2, #0]
     ad2:	bf00      	nop
     ad4:	f01c 0f20 	tst.w	ip, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ad8:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ada:	bf14      	ite	ne
     adc:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ade:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ae0:	6013      	str	r3, [r2, #0]
     ae2:	bf00      	nop
     ae4:	f01c 0f10 	tst.w	ip, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ae8:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aea:	bf14      	ite	ne
     aec:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aee:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     af0:	6013      	str	r3, [r2, #0]
     af2:	bf00      	nop
     af4:	f01c 0f08 	tst.w	ip, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     af8:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     afa:	bf14      	ite	ne
     afc:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     afe:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b00:	6013      	str	r3, [r2, #0]
     b02:	bf00      	nop
     b04:	f01c 0f04 	tst.w	ip, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b08:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b0a:	bf14      	ite	ne
     b0c:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b0e:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b10:	6013      	str	r3, [r2, #0]
     b12:	bf00      	nop
     b14:	f01c 0f02 	tst.w	ip, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b18:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b1a:	bf14      	ite	ne
     b1c:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b1e:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b20:	6013      	str	r3, [r2, #0]
     b22:	bf00      	nop
     b24:	f01c 0f01 	tst.w	ip, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b28:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b2a:	bf14      	ite	ne
     b2c:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b2e:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b30:	6013      	str	r3, [r2, #0]
     b32:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b34:	6003      	str	r3, [r0, #0]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     b36:	f891 9010 	ldrb.w	r9, [r1, #16]
     b3a:	f891 e00d 	ldrb.w	lr, [r1, #13]
                d[2] = e[2] - d[2];
     b3e:	f891 8011 	ldrb.w	r8, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b42:	9f01      	ldr	r7, [sp, #4]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b44:	f891 c00c 	ldrb.w	ip, [r1, #12]
     b48:	f891 a00f 	ldrb.w	sl, [r1, #15]
                d[1] = e[1] - d[1];
     b4c:	ebce 0e09 	rsb	lr, lr, r9
                d[2] = e[2] - d[2];
     b50:	f891 900e 	ldrb.w	r9, [r1, #14]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
     b54:	f881 e00d 	strb.w	lr, [r1, #13]
                d[2] = e[2] - d[2];
     b58:	ebc9 0808 	rsb	r8, r9, r8

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b5c:	f991 9015 	ldrsb.w	r9, [r1, #21]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     b60:	f881 800e 	strb.w	r8, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b64:	3f01      	subs	r7, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b66:	ebcc 0c0a 	rsb	ip, ip, sl

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b6a:	444e      	add	r6, r9
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     b6c:	2f00      	cmp	r7, #0
     b6e:	9701      	str	r7, [sp, #4]
     b70:	608f      	str	r7, [r1, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b72:	f881 c00c 	strb.w	ip, [r1, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b76:	600e      	str	r6, [r1, #0]
     b78:	f73f aed4 	bgt.w	924 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x178>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     b7c:	684c      	ldr	r4, [r1, #4]
     b7e:	4a52      	ldr	r2, [pc, #328]	; (cc8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x51c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b80:	4952      	ldr	r1, [pc, #328]	; (ccc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x520>)
     b82:	2c00      	cmp	r4, #0
     b84:	bfb8      	it	lt
     b86:	341f      	addlt	r4, #31
     b88:	1164      	asrs	r4, r4, #5
     b8a:	2002      	movs	r0, #2
     b8c:	2304      	movs	r3, #4
     b8e:	6008      	str	r0, [r1, #0]
     b90:	600b      	str	r3, [r1, #0]
     b92:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b94:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b96:	6008      	str	r0, [r1, #0]
     b98:	600b      	str	r3, [r1, #0]
     b9a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b9c:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b9e:	6008      	str	r0, [r1, #0]
     ba0:	600b      	str	r3, [r1, #0]
     ba2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ba4:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ba6:	6008      	str	r0, [r1, #0]
     ba8:	600b      	str	r3, [r1, #0]
     baa:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bac:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bae:	6008      	str	r0, [r1, #0]
     bb0:	600b      	str	r3, [r1, #0]
     bb2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bb4:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bb6:	6008      	str	r0, [r1, #0]
     bb8:	600b      	str	r3, [r1, #0]
     bba:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bbc:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bbe:	6008      	str	r0, [r1, #0]
     bc0:	600b      	str	r3, [r1, #0]
     bc2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bc4:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bc6:	6008      	str	r0, [r1, #0]
     bc8:	600b      	str	r3, [r1, #0]
     bca:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bcc:	6013      	str	r3, [r2, #0]
     bce:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bd0:	600b      	str	r3, [r1, #0]
     bd2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bd4:	6013      	str	r3, [r2, #0]
     bd6:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bd8:	600b      	str	r3, [r1, #0]
     bda:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bdc:	6013      	str	r3, [r2, #0]
     bde:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     be0:	600b      	str	r3, [r1, #0]
     be2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     be4:	6013      	str	r3, [r2, #0]
     be6:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     be8:	600b      	str	r3, [r1, #0]
     bea:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bec:	6013      	str	r3, [r2, #0]
     bee:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bf0:	600b      	str	r3, [r1, #0]
     bf2:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bf4:	6013      	str	r3, [r2, #0]
     bf6:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bf8:	600b      	str	r3, [r1, #0]
     bfa:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bfc:	6013      	str	r3, [r2, #0]
     bfe:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c00:	600b      	str	r3, [r1, #0]
     c02:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c04:	6013      	str	r3, [r2, #0]
     c06:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c08:	600b      	str	r3, [r1, #0]
     c0a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c0c:	6013      	str	r3, [r2, #0]
     c0e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c10:	600b      	str	r3, [r1, #0]
     c12:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c14:	6013      	str	r3, [r2, #0]
     c16:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c18:	600b      	str	r3, [r1, #0]
     c1a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c1c:	6013      	str	r3, [r2, #0]
     c1e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c20:	600b      	str	r3, [r1, #0]
     c22:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c24:	6013      	str	r3, [r2, #0]
     c26:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c28:	600b      	str	r3, [r1, #0]
     c2a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c2c:	6013      	str	r3, [r2, #0]
     c2e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c30:	600b      	str	r3, [r1, #0]
     c32:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c34:	6013      	str	r3, [r2, #0]
     c36:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c38:	600b      	str	r3, [r1, #0]
     c3a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c3c:	6013      	str	r3, [r2, #0]
     c3e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c40:	600b      	str	r3, [r1, #0]
     c42:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c44:	6013      	str	r3, [r2, #0]
     c46:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c48:	600b      	str	r3, [r1, #0]
     c4a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c4c:	6013      	str	r3, [r2, #0]
     c4e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c50:	600b      	str	r3, [r1, #0]
     c52:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c54:	6013      	str	r3, [r2, #0]
     c56:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c58:	600b      	str	r3, [r1, #0]
     c5a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c5c:	6013      	str	r3, [r2, #0]
     c5e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c60:	600b      	str	r3, [r1, #0]
     c62:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c64:	6013      	str	r3, [r2, #0]
     c66:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c68:	600b      	str	r3, [r1, #0]
     c6a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c6c:	6013      	str	r3, [r2, #0]
     c6e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c70:	600b      	str	r3, [r1, #0]
     c72:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c74:	6013      	str	r3, [r2, #0]
     c76:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c78:	600b      	str	r3, [r1, #0]
     c7a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c7c:	6013      	str	r3, [r2, #0]
     c7e:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c80:	600b      	str	r3, [r1, #0]
     c82:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c84:	6013      	str	r3, [r2, #0]
     c86:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c88:	600b      	str	r3, [r1, #0]
     c8a:	bf00      	nop
     c8c:	3c01      	subs	r4, #1
     c8e:	1c65      	adds	r5, r4, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c90:	6013      	str	r3, [r2, #0]
     c92:	f47f af7c 	bne.w	b8e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e2>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     c96:	9b07      	ldr	r3, [sp, #28]
     c98:	6998      	ldr	r0, [r3, #24]
     c9a:	b150      	cbz	r0, cb2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x506>
     c9c:	6803      	ldr	r3, [r0, #0]
     c9e:	4a0c      	ldr	r2, [pc, #48]	; (cd0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x524>)
     ca0:	685b      	ldr	r3, [r3, #4]
     ca2:	4293      	cmp	r3, r2
     ca4:	d108      	bne.n	cb8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x50c>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     ca6:	6842      	ldr	r2, [r0, #4]
     ca8:	7b01      	ldrb	r1, [r0, #12]
     caa:	7813      	ldrb	r3, [r2, #0]
     cac:	ea23 0301 	bic.w	r3, r3, r1
     cb0:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
     cb2:	b009      	add	sp, #36	; 0x24
     cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cb8:	b009      	add	sp, #36	; 0x24
     cba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cbe:	4718      	bx	r3
     cc0:	9101      	str	r1, [sp, #4]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     cc2:	4798      	blx	r3
     cc4:	9901      	ldr	r1, [sp, #4]
     cc6:	e582      	b.n	7ce <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22>
     cc8:	400ff0c8 	.word	0x400ff0c8
     ccc:	400ff0c4 	.word	0x400ff0c4
     cd0:	00000481 	.word	0x00000481

00000cd4 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     cd4:	b538      	push	{r3, r4, r5, lr}
     cd6:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     cd8:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     cda:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     cdc:	f006 fd30 	bl	7740 <strlen>
     ce0:	6823      	ldr	r3, [r4, #0]
     ce2:	4602      	mov	r2, r0
     ce4:	4629      	mov	r1, r5
     ce6:	685b      	ldr	r3, [r3, #4]
     ce8:	4620      	mov	r0, r4
     cea:	4798      	blx	r3
     cec:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     cee:	4620      	mov	r0, r4
     cf0:	f006 f99e 	bl	7030 <Print::println()>
     cf4:	4428      	add	r0, r5
     cf6:	bd38      	pop	{r3, r4, r5, pc}

00000cf8 <LEDDebug(LEDStruct&)>:
}



// Debugging function
void LEDDebug(LEDStruct& leds) {
     cf8:	b538      	push	{r3, r4, r5, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     cfa:	2100      	movs	r1, #0
     cfc:	4604      	mov	r4, r0
     cfe:	4894      	ldr	r0, [pc, #592]	; (f50 <LEDDebug(LEDStruct&)+0x258>)
     d00:	f005 ff92 	bl	6c28 <usb_serial_write>
     d04:	4893      	ldr	r0, [pc, #588]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d06:	f006 f993 	bl	7030 <Print::println()>
     d0a:	2119      	movs	r1, #25
     d0c:	4892      	ldr	r0, [pc, #584]	; (f58 <LEDDebug(LEDStruct&)+0x260>)
     d0e:	f005 ff8b 	bl	6c28 <usb_serial_write>
     d12:	4890      	ldr	r0, [pc, #576]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d14:	f006 f98c 	bl	7030 <Print::println()>
     d18:	2112      	movs	r1, #18
     d1a:	4890      	ldr	r0, [pc, #576]	; (f5c <LEDDebug(LEDStruct&)+0x264>)
     d1c:	f005 ff84 	bl	6c28 <usb_serial_write>
	Serial.println("");
	Serial.println("=========================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
     d20:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
     d24:	2b00      	cmp	r3, #0
     d26:	f000 81c7 	beq.w	10b8 <LEDDebug(LEDStruct&)+0x3c0>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
     d2a:	2b01      	cmp	r3, #1
     d2c:	f000 81fb 	beq.w	1126 <LEDDebug(LEDStruct&)+0x42e>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
     d30:	2b02      	cmp	r3, #2
     d32:	f000 8200 	beq.w	1136 <LEDDebug(LEDStruct&)+0x43e>
     d36:	2112      	movs	r1, #18
     d38:	4889      	ldr	r0, [pc, #548]	; (f60 <LEDDebug(LEDStruct&)+0x268>)
     d3a:	f005 ff75 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d3e:	2300      	movs	r3, #0
     d40:	220a      	movs	r2, #10
     d42:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
     d46:	4883      	ldr	r0, [pc, #524]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d48:	f006 f982 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     d4c:	4881      	ldr	r0, [pc, #516]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d4e:	f006 f96f 	bl	7030 <Print::println()>
     d52:	2112      	movs	r1, #18
     d54:	4883      	ldr	r0, [pc, #524]	; (f64 <LEDDebug(LEDStruct&)+0x26c>)
     d56:	f005 ff67 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d5a:	2300      	movs	r3, #0
     d5c:	220a      	movs	r2, #10
     d5e:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
     d62:	487c      	ldr	r0, [pc, #496]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d64:	f006 f974 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     d68:	487a      	ldr	r0, [pc, #488]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d6a:	f006 f961 	bl	7030 <Print::println()>
     d6e:	2112      	movs	r1, #18
     d70:	487d      	ldr	r0, [pc, #500]	; (f68 <LEDDebug(LEDStruct&)+0x270>)
     d72:	f005 ff59 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d76:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
     d7a:	4876      	ldr	r0, [pc, #472]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d7c:	f006 f9a8 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d80:	4874      	ldr	r0, [pc, #464]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d82:	f006 f955 	bl	7030 <Print::println()>
     d86:	2112      	movs	r1, #18
     d88:	4878      	ldr	r0, [pc, #480]	; (f6c <LEDDebug(LEDStruct&)+0x274>)
     d8a:	f005 ff4d 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d8e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
     d92:	4870      	ldr	r0, [pc, #448]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d94:	f006 f99c 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d98:	486e      	ldr	r0, [pc, #440]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     d9a:	f006 f949 	bl	7030 <Print::println()>
     d9e:	2112      	movs	r1, #18
     da0:	4873      	ldr	r0, [pc, #460]	; (f70 <LEDDebug(LEDStruct&)+0x278>)
     da2:	f005 ff41 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     da6:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
     daa:	486a      	ldr	r0, [pc, #424]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     dac:	f006 f990 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     db0:	4868      	ldr	r0, [pc, #416]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     db2:	f006 f93d 	bl	7030 <Print::println()>
     db6:	2112      	movs	r1, #18
     db8:	486e      	ldr	r0, [pc, #440]	; (f74 <LEDDebug(LEDStruct&)+0x27c>)
     dba:	f005 ff35 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     dbe:	2300      	movs	r3, #0
     dc0:	220a      	movs	r2, #10
     dc2:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
     dc6:	4863      	ldr	r0, [pc, #396]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     dc8:	f006 f942 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     dcc:	4861      	ldr	r0, [pc, #388]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     dce:	f006 f92f 	bl	7030 <Print::println()>
     dd2:	2112      	movs	r1, #18
     dd4:	4868      	ldr	r0, [pc, #416]	; (f78 <LEDDebug(LEDStruct&)+0x280>)
     dd6:	f005 ff27 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     dda:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
     dde:	485d      	ldr	r0, [pc, #372]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     de0:	f006 f976 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     de4:	485b      	ldr	r0, [pc, #364]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     de6:	f006 f923 	bl	7030 <Print::println()>
     dea:	2119      	movs	r1, #25
     dec:	485a      	ldr	r0, [pc, #360]	; (f58 <LEDDebug(LEDStruct&)+0x260>)
     dee:	f005 ff1b 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     df2:	4858      	ldr	r0, [pc, #352]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     df4:	f006 f91c 	bl	7030 <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
     df8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
     dfc:	2b0f      	cmp	r3, #15
     dfe:	f200 8145 	bhi.w	108c <LEDDebug(LEDStruct&)+0x394>
     e02:	e8df f013 	tbh	[pc, r3, lsl #1]
     e06:	00d1      	.short	0x00d1
     e08:	01430143 	.word	0x01430143
     e0c:	01430143 	.word	0x01430143
     e10:	0143006d 	.word	0x0143006d
     e14:	00270143 	.word	0x00270143
     e18:	01430143 	.word	0x01430143
     e1c:	01430143 	.word	0x01430143
     e20:	01430143 	.word	0x01430143
     e24:	0010      	.short	0x0010
     e26:	2113      	movs	r1, #19
     e28:	4854      	ldr	r0, [pc, #336]	; (f7c <LEDDebug(LEDStruct&)+0x284>)
     e2a:	f005 fefd 	bl	6c28 <usb_serial_write>
     e2e:	4849      	ldr	r0, [pc, #292]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     e30:	f006 f8fe 	bl	7030 <Print::println()>
     e34:	2119      	movs	r1, #25
     e36:	4848      	ldr	r0, [pc, #288]	; (f58 <LEDDebug(LEDStruct&)+0x260>)
     e38:	f005 fef6 	bl	6c28 <usb_serial_write>
     e3c:	4845      	ldr	r0, [pc, #276]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     e3e:	f006 f8f7 	bl	7030 <Print::println()>
     e42:	2100      	movs	r1, #0
     e44:	4842      	ldr	r0, [pc, #264]	; (f50 <LEDDebug(LEDStruct&)+0x258>)
     e46:	f005 feef 	bl	6c28 <usb_serial_write>
     e4a:	4842      	ldr	r0, [pc, #264]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
     e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     e50:	f006 b8ee 	b.w	7030 <Print::println()>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
			break;

		case FIRE:
			if (leds.mode_name == TORCH) { Serial.print("=====TORCH"); }
     e54:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
     e58:	2b0d      	cmp	r3, #13
     e5a:	bf07      	ittee	eq
     e5c:	210a      	moveq	r1, #10
     e5e:	4848      	ldreq	r0, [pc, #288]	; (f80 <LEDDebug(LEDStruct&)+0x288>)
     e60:	4848      	ldrne	r0, [pc, #288]	; (f84 <LEDDebug(LEDStruct&)+0x28c>)
     e62:	2109      	movne	r1, #9
     e64:	f005 fee0 	bl	6c28 <usb_serial_write>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
     e68:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
     e6c:	2b00      	cmp	r3, #0
     e6e:	f040 8133 	bne.w	10d8 <LEDDebug(LEDStruct&)+0x3e0>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
     e72:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
     e76:	2b00      	cmp	r3, #0
     e78:	f040 8150 	bne.w	111c <LEDDebug(LEDStruct&)+0x424>
     e7c:	2105      	movs	r1, #5
     e7e:	4842      	ldr	r0, [pc, #264]	; (f88 <LEDDebug(LEDStruct&)+0x290>)
     e80:	f005 fed2 	bl	6c28 <usb_serial_write>
     e84:	4833      	ldr	r0, [pc, #204]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     e86:	f006 f8d3 	bl	7030 <Print::println()>
     e8a:	210d      	movs	r1, #13
     e8c:	483f      	ldr	r0, [pc, #252]	; (f8c <LEDDebug(LEDStruct&)+0x294>)
     e8e:	f005 fecb 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e92:	2300      	movs	r3, #0
     e94:	220a      	movs	r2, #10
     e96:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
     e9a:	482e      	ldr	r0, [pc, #184]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     e9c:	f006 f8d8 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     ea0:	482c      	ldr	r0, [pc, #176]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     ea2:	f006 f8c5 	bl	7030 <Print::println()>
     ea6:	210d      	movs	r1, #13
     ea8:	4839      	ldr	r0, [pc, #228]	; (f90 <LEDDebug(LEDStruct&)+0x298>)
     eaa:	f005 febd 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     eae:	2300      	movs	r3, #0
     eb0:	220a      	movs	r2, #10
     eb2:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
     eb6:	4827      	ldr	r0, [pc, #156]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     eb8:	f006 f8ca 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     ebc:	4825      	ldr	r0, [pc, #148]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     ebe:	f006 f8b7 	bl	7030 <Print::println()>
			Serial.println("=====");
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
     ec2:	f894 52d6 	ldrb.w	r5, [r4, #726]	; 0x2d6
     ec6:	2d00      	cmp	r5, #0
     ec8:	f000 810b 	beq.w	10e2 <LEDDebug(LEDStruct&)+0x3ea>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH) {
     ecc:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
     ed0:	290d      	cmp	r1, #13
     ed2:	d1af      	bne.n	e34 <LEDDebug(LEDStruct&)+0x13c>
     ed4:	482f      	ldr	r0, [pc, #188]	; (f94 <LEDDebug(LEDStruct&)+0x29c>)
     ed6:	f005 fea7 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     eda:	f894 12d9 	ldrb.w	r1, [r4, #729]	; 0x2d9
     ede:	e02d      	b.n	f3c <LEDDebug(LEDStruct&)+0x244>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
     ee0:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
     ee4:	2b00      	cmp	r3, #0
     ee6:	f000 80ef 	beq.w	10c8 <LEDDebug(LEDStruct&)+0x3d0>
     eea:	2119      	movs	r1, #25
     eec:	482a      	ldr	r0, [pc, #168]	; (f98 <LEDDebug(LEDStruct&)+0x2a0>)
     eee:	f005 fe9b 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ef2:	4818      	ldr	r0, [pc, #96]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     ef4:	f006 f89c 	bl	7030 <Print::println()>
     ef8:	210b      	movs	r1, #11
     efa:	4828      	ldr	r0, [pc, #160]	; (f9c <LEDDebug(LEDStruct&)+0x2a4>)
     efc:	f005 fe94 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f00:	2300      	movs	r3, #0
     f02:	220a      	movs	r2, #10
     f04:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
     f08:	4812      	ldr	r0, [pc, #72]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     f0a:	f006 f8a1 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     f0e:	4811      	ldr	r0, [pc, #68]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     f10:	f006 f88e 	bl	7030 <Print::println()>
     f14:	210b      	movs	r1, #11
     f16:	4822      	ldr	r0, [pc, #136]	; (fa0 <LEDDebug(LEDStruct&)+0x2a8>)
     f18:	f005 fe86 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f1c:	2300      	movs	r3, #0
     f1e:	220a      	movs	r2, #10
     f20:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
     f24:	480b      	ldr	r0, [pc, #44]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     f26:	f006 f893 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     f2a:	480a      	ldr	r0, [pc, #40]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     f2c:	f006 f880 	bl	7030 <Print::println()>
     f30:	210b      	movs	r1, #11
     f32:	481c      	ldr	r0, [pc, #112]	; (fa4 <LEDDebug(LEDStruct&)+0x2ac>)
     f34:	f005 fe78 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f38:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
     f3c:	4805      	ldr	r0, [pc, #20]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     f3e:	2300      	movs	r3, #0
     f40:	220a      	movs	r2, #10
     f42:	f006 f885 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     f46:	4803      	ldr	r0, [pc, #12]	; (f54 <LEDDebug(LEDStruct&)+0x25c>)
     f48:	f006 f872 	bl	7030 <Print::println()>
     f4c:	e772      	b.n	e34 <LEDDebug(LEDStruct&)+0x13c>
     f4e:	bf00      	nop
     f50:	00008fb0 	.word	0x00008fb0
     f54:	1fff873c 	.word	0x1fff873c
     f58:	0000872c 	.word	0x0000872c
     f5c:	00008748 	.word	0x00008748
     f60:	00008774 	.word	0x00008774
     f64:	00008788 	.word	0x00008788
     f68:	0000879c 	.word	0x0000879c
     f6c:	000087b0 	.word	0x000087b0
     f70:	000087c4 	.word	0x000087c4
     f74:	000087d8 	.word	0x000087d8
     f78:	000087ec 	.word	0x000087ec
     f7c:	00008964 	.word	0x00008964
     f80:	000088ec 	.word	0x000088ec
     f84:	000088f8 	.word	0x000088f8
     f88:	00008740 	.word	0x00008740
     f8c:	00008914 	.word	0x00008914
     f90:	00008924 	.word	0x00008924
     f94:	00008954 	.word	0x00008954
     f98:	000088ac 	.word	0x000088ac
     f9c:	000088c8 	.word	0x000088c8
     fa0:	000088d4 	.word	0x000088d4
     fa4:	000088e0 	.word	0x000088e0
     fa8:	2116      	movs	r1, #22
     faa:	4867      	ldr	r0, [pc, #412]	; (1148 <LEDDebug(LEDStruct&)+0x450>)
     fac:	f005 fe3c 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     fb0:	4866      	ldr	r0, [pc, #408]	; (114c <LEDDebug(LEDStruct&)+0x454>)
     fb2:	f006 f83d 	bl	7030 <Print::println()>
     fb6:	210f      	movs	r1, #15
     fb8:	4865      	ldr	r0, [pc, #404]	; (1150 <LEDDebug(LEDStruct&)+0x458>)
     fba:	f005 fe35 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     fbe:	2300      	movs	r3, #0
     fc0:	220a      	movs	r2, #10
     fc2:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
     fc6:	4861      	ldr	r0, [pc, #388]	; (114c <LEDDebug(LEDStruct&)+0x454>)
     fc8:	f006 f842 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     fcc:	485f      	ldr	r0, [pc, #380]	; (114c <LEDDebug(LEDStruct&)+0x454>)
     fce:	f006 f82f 	bl	7030 <Print::println()>
     fd2:	210f      	movs	r1, #15
     fd4:	485f      	ldr	r0, [pc, #380]	; (1154 <LEDDebug(LEDStruct&)+0x45c>)
     fd6:	f005 fe27 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     fda:	2300      	movs	r3, #0
     fdc:	220a      	movs	r2, #10
     fde:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
     fe2:	485a      	ldr	r0, [pc, #360]	; (114c <LEDDebug(LEDStruct&)+0x454>)
     fe4:	f006 f834 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     fe8:	4858      	ldr	r0, [pc, #352]	; (114c <LEDDebug(LEDStruct&)+0x454>)
     fea:	f006 f821 	bl	7030 <Print::println()>
     fee:	210f      	movs	r1, #15
     ff0:	4859      	ldr	r0, [pc, #356]	; (1158 <LEDDebug(LEDStruct&)+0x460>)
     ff2:	f005 fe19 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     ff6:	2300      	movs	r3, #0
     ff8:	220a      	movs	r2, #10
     ffa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
     ffe:	4853      	ldr	r0, [pc, #332]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1000:	f006 f826 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1004:	4851      	ldr	r0, [pc, #324]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1006:	f006 f813 	bl	7030 <Print::println()>
    100a:	210f      	movs	r1, #15
    100c:	4853      	ldr	r0, [pc, #332]	; (115c <LEDDebug(LEDStruct&)+0x464>)
    100e:	f005 fe0b 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1012:	2300      	movs	r3, #0
    1014:	220a      	movs	r2, #10
    1016:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    101a:	484c      	ldr	r0, [pc, #304]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    101c:	f006 f818 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1020:	484a      	ldr	r0, [pc, #296]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1022:	f006 f805 	bl	7030 <Print::println()>
    1026:	210f      	movs	r1, #15
    1028:	484d      	ldr	r0, [pc, #308]	; (1160 <LEDDebug(LEDStruct&)+0x468>)
    102a:	f005 fdfd 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    102e:	2300      	movs	r3, #0
    1030:	220a      	movs	r2, #10
    1032:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    1036:	4845      	ldr	r0, [pc, #276]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1038:	f006 f80a 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    103c:	4843      	ldr	r0, [pc, #268]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    103e:	f005 fff7 	bl	7030 <Print::println()>
    1042:	210f      	movs	r1, #15
    1044:	4847      	ldr	r0, [pc, #284]	; (1164 <LEDDebug(LEDStruct&)+0x46c>)
    1046:	f005 fdef 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    104a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    104e:	483f      	ldr	r0, [pc, #252]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1050:	f006 f83e 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1054:	483d      	ldr	r0, [pc, #244]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1056:	f005 ffeb 	bl	7030 <Print::println()>
    105a:	210f      	movs	r1, #15
    105c:	4842      	ldr	r0, [pc, #264]	; (1168 <LEDDebug(LEDStruct&)+0x470>)
    105e:	f005 fde3 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1062:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    1066:	4839      	ldr	r0, [pc, #228]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1068:	f006 f832 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    106c:	4837      	ldr	r0, [pc, #220]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    106e:	f005 ffdf 	bl	7030 <Print::println()>
    1072:	210f      	movs	r1, #15
    1074:	483d      	ldr	r0, [pc, #244]	; (116c <LEDDebug(LEDStruct&)+0x474>)
    1076:	f005 fdd7 	bl	6c28 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    107a:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    107e:	4833      	ldr	r0, [pc, #204]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1080:	f006 f826 	bl	70d0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1084:	4831      	ldr	r0, [pc, #196]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1086:	f005 ffd3 	bl	7030 <Print::println()>
    108a:	e6d3      	b.n	e34 <LEDDebug(LEDStruct&)+0x13c>
    108c:	2100      	movs	r1, #0
    108e:	4838      	ldr	r0, [pc, #224]	; (1170 <LEDDebug(LEDStruct&)+0x478>)
    1090:	f005 fdca 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1094:	482d      	ldr	r0, [pc, #180]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1096:	f005 ffcb 	bl	7030 <Print::println()>
    109a:	2115      	movs	r1, #21
    109c:	4835      	ldr	r0, [pc, #212]	; (1174 <LEDDebug(LEDStruct&)+0x47c>)
    109e:	f005 fdc3 	bl	6c28 <usb_serial_write>
    10a2:	482a      	ldr	r0, [pc, #168]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    10a4:	f005 ffc4 	bl	7030 <Print::println()>
    10a8:	2100      	movs	r1, #0
    10aa:	4831      	ldr	r0, [pc, #196]	; (1170 <LEDDebug(LEDStruct&)+0x478>)
    10ac:	f005 fdbc 	bl	6c28 <usb_serial_write>
    10b0:	4826      	ldr	r0, [pc, #152]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    10b2:	f005 ffbd 	bl	7030 <Print::println()>
    10b6:	e6bd      	b.n	e34 <LEDDebug(LEDStruct&)+0x13c>
    10b8:	2107      	movs	r1, #7
    10ba:	482f      	ldr	r0, [pc, #188]	; (1178 <LEDDebug(LEDStruct&)+0x480>)
    10bc:	f005 fdb4 	bl	6c28 <usb_serial_write>
    10c0:	4822      	ldr	r0, [pc, #136]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    10c2:	f005 ffb5 	bl	7030 <Print::println()>
    10c6:	e636      	b.n	d36 <LEDDebug(LEDStruct&)+0x3e>
    10c8:	2113      	movs	r1, #19
    10ca:	482c      	ldr	r0, [pc, #176]	; (117c <LEDDebug(LEDStruct&)+0x484>)
    10cc:	f005 fdac 	bl	6c28 <usb_serial_write>
    10d0:	481e      	ldr	r0, [pc, #120]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    10d2:	f005 ffad 	bl	7030 <Print::println()>
    10d6:	e70f      	b.n	ef8 <LEDDebug(LEDStruct&)+0x200>
    10d8:	2107      	movs	r1, #7
    10da:	4829      	ldr	r0, [pc, #164]	; (1180 <LEDDebug(LEDStruct&)+0x488>)
    10dc:	f005 fda4 	bl	6c28 <usb_serial_write>
    10e0:	e6c7      	b.n	e72 <LEDDebug(LEDStruct&)+0x17a>
    10e2:	210d      	movs	r1, #13
    10e4:	4827      	ldr	r0, [pc, #156]	; (1184 <LEDDebug(LEDStruct&)+0x48c>)
    10e6:	f005 fd9f 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    10ea:	462b      	mov	r3, r5
    10ec:	220a      	movs	r2, #10
    10ee:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
    10f2:	4816      	ldr	r0, [pc, #88]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    10f4:	f005 ffac 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    10f8:	4814      	ldr	r0, [pc, #80]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    10fa:	f005 ff99 	bl	7030 <Print::println()>
    10fe:	210d      	movs	r1, #13
    1100:	4821      	ldr	r0, [pc, #132]	; (1188 <LEDDebug(LEDStruct&)+0x490>)
    1102:	f005 fd91 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1106:	462b      	mov	r3, r5
    1108:	220a      	movs	r2, #10
    110a:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    110e:	480f      	ldr	r0, [pc, #60]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1110:	f005 ff9e 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1114:	480d      	ldr	r0, [pc, #52]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1116:	f005 ff8b 	bl	7030 <Print::println()>
    111a:	e6d7      	b.n	ecc <LEDDebug(LEDStruct&)+0x1d4>
    111c:	2105      	movs	r1, #5
    111e:	481b      	ldr	r0, [pc, #108]	; (118c <LEDDebug(LEDStruct&)+0x494>)
    1120:	f005 fd82 	bl	6c28 <usb_serial_write>
    1124:	e6aa      	b.n	e7c <LEDDebug(LEDStruct&)+0x184>
    1126:	2104      	movs	r1, #4
    1128:	4819      	ldr	r0, [pc, #100]	; (1190 <LEDDebug(LEDStruct&)+0x498>)
    112a:	f005 fd7d 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    112e:	4807      	ldr	r0, [pc, #28]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1130:	f005 ff7e 	bl	7030 <Print::println()>
    1134:	e5ff      	b.n	d36 <LEDDebug(LEDStruct&)+0x3e>
    1136:	2107      	movs	r1, #7
    1138:	4816      	ldr	r0, [pc, #88]	; (1194 <LEDDebug(LEDStruct&)+0x49c>)
    113a:	f005 fd75 	bl	6c28 <usb_serial_write>
    113e:	4803      	ldr	r0, [pc, #12]	; (114c <LEDDebug(LEDStruct&)+0x454>)
    1140:	f005 ff76 	bl	7030 <Print::println()>
    1144:	e5f7      	b.n	d36 <LEDDebug(LEDStruct&)+0x3e>
    1146:	bf00      	nop
    1148:	00008800 	.word	0x00008800
    114c:	1fff873c 	.word	0x1fff873c
    1150:	00008818 	.word	0x00008818
    1154:	00008828 	.word	0x00008828
    1158:	00008838 	.word	0x00008838
    115c:	00008848 	.word	0x00008848
    1160:	00008858 	.word	0x00008858
    1164:	00008868 	.word	0x00008868
    1168:	00008878 	.word	0x00008878
    116c:	00008888 	.word	0x00008888
    1170:	00008fb0 	.word	0x00008fb0
    1174:	00008978 	.word	0x00008978
    1178:	0000875c 	.word	0x0000875c
    117c:	00008898 	.word	0x00008898
    1180:	00008904 	.word	0x00008904
    1184:	00008934 	.word	0x00008934
    1188:	00008944 	.word	0x00008944
    118c:	0000890c 	.word	0x0000890c
    1190:	00008764 	.word	0x00008764
    1194:	0000876c 	.word	0x0000876c

00001198 <updatePaletteIndex(LEDStruct&)>:
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
    1198:	4b48      	ldr	r3, [pc, #288]	; (12bc <updatePaletteIndex(LEDStruct&)+0x124>)
    119a:	781b      	ldrb	r3, [r3, #0]
    119c:	2b00      	cmp	r3, #0
    119e:	f000 808b 	beq.w	12b8 <updatePaletteIndex(LEDStruct&)+0x120>
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
    11a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11a6:	b09b      	sub	sp, #108	; 0x6c
    11a8:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
    11ac:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
    11ae:	2300      	movs	r3, #0
    11b0:	4a43      	ldr	r2, [pc, #268]	; (12c0 <updatePaletteIndex(LEDStruct&)+0x128>)
    11b2:	9307      	str	r3, [sp, #28]
    11b4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 12c4 <updatePaletteIndex(LEDStruct&)+0x12c>
    11b8:	9009      	str	r0, [sp, #36]	; 0x24
    11ba:	f200 2326 	addw	r3, r0, #550	; 0x226
    11be:	9208      	str	r2, [sp, #32]
    11c0:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    11c2:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    11c4:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    11c8:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    11ca:	3701      	adds	r7, #1
        } while ( u.index != 255);
    11cc:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    11ce:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    11d0:	d1f8      	bne.n	11c4 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    11d2:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    11d6:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    11d8:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    11dc:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    11e0:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    11e2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    11e6:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
    11ea:	2400      	movs	r4, #0
    11ec:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    11ee:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    11f2:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
    11f6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    11fa:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    11fe:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    1200:	b2f1      	uxtb	r1, r6
    1202:	f3c5 6507 	ubfx	r5, r5, #24, #8
    1206:	9103      	str	r1, [sp, #12]
    1208:	b2e9      	uxtb	r1, r5
    120a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
    120c:	fa5f f18c 	uxtb.w	r1, ip
    1210:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    1212:	9906      	ldr	r1, [sp, #24]
    1214:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1216:	aa0d      	add	r2, sp, #52	; 0x34
    1218:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    121a:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    121e:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1222:	d80c      	bhi.n	123e <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1224:	9905      	ldr	r1, [sp, #20]
    1226:	458c      	cmp	ip, r1
    1228:	dc07      	bgt.n	123a <updatePaletteIndex(LEDStruct&)+0xa2>
    122a:	290f      	cmp	r1, #15
    122c:	d005      	beq.n	123a <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
    122e:	3101      	adds	r1, #1
    1230:	b2c9      	uxtb	r1, r1
    1232:	428b      	cmp	r3, r1
    1234:	9102      	str	r1, [sp, #8]
    1236:	bf38      	it	cc
    1238:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    123a:	b259      	sxtb	r1, r3
    123c:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    123e:	a90c      	add	r1, sp, #48	; 0x30
    1240:	9100      	str	r1, [sp, #0]
    1242:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1244:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
    1248:	f88d e035 	strb.w	lr, [sp, #53]	; 0x35
        b = rhs.b;
    124c:	f88d 8036 	strb.w	r8, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1250:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
    1254:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
    1258:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    125c:	f003 fd3e 	bl	4cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1260:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1262:	46d3      	mov	fp, sl
        g = rhs.g;
    1264:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
    1268:	f8dd 8010 	ldr.w	r8, [sp, #16]
    126c:	d1bf      	bne.n	11ee <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
    126e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1270:	aa0e      	add	r2, sp, #56	; 0x38
    1272:	4293      	cmp	r3, r2
    1274:	d018      	beq.n	12a8 <updatePaletteIndex(LEDStruct&)+0x110>
    1276:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1278:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    127a:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
    127e:	e001      	b.n	1284 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
    1280:	42a3      	cmp	r3, r4
    1282:	d011      	beq.n	12a8 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
    1284:	f812 1b01 	ldrb.w	r1, [r2], #1
    1288:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    128c:	4288      	cmp	r0, r1
    128e:	d0f7      	beq.n	1280 <updatePaletteIndex(LEDStruct&)+0xe8>
    1290:	4b0a      	ldr	r3, [pc, #40]	; (12bc <updatePaletteIndex(LEDStruct&)+0x124>)
    1292:	9a07      	ldr	r2, [sp, #28]
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	3201      	adds	r2, #1
    1298:	4293      	cmp	r3, r2
    129a:	9207      	str	r2, [sp, #28]
    129c:	dd09      	ble.n	12b2 <updatePaletteIndex(LEDStruct&)+0x11a>
    129e:	9b08      	ldr	r3, [sp, #32]
    12a0:	f853 9f04 	ldr.w	r9, [r3, #4]!
    12a4:	9308      	str	r3, [sp, #32]
    12a6:	e78c      	b.n	11c2 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
    12a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    12aa:	f89d 201c 	ldrb.w	r2, [sp, #28]
    12ae:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
			break;
		}
	}
}
    12b2:	b01b      	add	sp, #108	; 0x6c
    12b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12b8:	4770      	bx	lr
    12ba:	bf00      	nop
    12bc:	1fff8732 	.word	0x1fff8732
    12c0:	000084e0 	.word	0x000084e0
    12c4:	000086dc 	.word	0x000086dc

000012c8 <initialize()>:

// Initialization function
void initialize() {
    12c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    12cc:	4cb8      	ldr	r4, [pc, #736]	; (15b0 <initialize()+0x2e8>)
		}
	}
}

// Initialization function
void initialize() {
    12ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12d0:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    12d2:	2196      	movs	r1, #150	; 0x96
    12d4:	4620      	mov	r0, r4
    12d6:	aa09      	add	r2, sp, #36	; 0x24
    12d8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    12dc:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    12e0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
    12e4:	f003 fcca 	bl	4c7c <fill_solid(CRGB*, int, CRGB const&)>
    12e8:	49b2      	ldr	r1, [pc, #712]	; (15b4 <initialize()+0x2ec>)
	curr_leds.array_type		= CURRENT;
    12ea:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    12ee:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    12f2:	4ab0      	ldr	r2, [pc, #704]	; (15b4 <initialize()+0x2ec>)
            count++;;
        } while ( u.index != 255);
    12f4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    12f6:	3701      	adds	r7, #1
        } while ( u.index != 255);
    12f8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    12fa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    12fc:	d1f7      	bne.n	12ee <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    12fe:	6813      	ldr	r3, [r2, #0]
    1300:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
    1302:	ea4f 6813 	mov.w	r8, r3, lsr #24
    1306:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    130a:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    130e:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    1312:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1314:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1316:	2400      	movs	r4, #0
    1318:	46c6      	mov	lr, r8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    131a:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    131e:	48a6      	ldr	r0, [pc, #664]	; (15b8 <initialize()+0x2f0>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1320:	f3c5 2707 	ubfx	r7, r5, #8, #8
    1324:	f3c5 4607 	ubfx	r6, r5, #16, #8
    1328:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    132a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    132e:	9104      	str	r1, [sp, #16]
    1330:	b2f1      	uxtb	r1, r6
    1332:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1334:	fa5f f18c 	uxtb.w	r1, ip
    1338:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    133a:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    133c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    133e:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1340:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1344:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1346:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    134a:	fa5f f885 	uxtb.w	r8, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    134e:	d80c      	bhi.n	136a <initialize()+0xa2>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1350:	9906      	ldr	r1, [sp, #24]
    1352:	458c      	cmp	ip, r1
    1354:	dc07      	bgt.n	1366 <initialize()+0x9e>
    1356:	290f      	cmp	r1, #15
    1358:	d005      	beq.n	1366 <initialize()+0x9e>
                    istart8 = lastSlotUsed + 1;
    135a:	3101      	adds	r1, #1
    135c:	b2c9      	uxtb	r1, r1
    135e:	428b      	cmp	r3, r1
    1360:	9103      	str	r1, [sp, #12]
    1362:	bf38      	it	cc
    1364:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1366:	b259      	sxtb	r1, r3
    1368:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    136a:	a908      	add	r1, sp, #32
    136c:	9100      	str	r1, [sp, #0]
    136e:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1370:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1374:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
    1378:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    137c:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1380:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1384:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    1388:	f003 fca8 	bl	4cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    138c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    138e:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1392:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
    1396:	46c6      	mov	lr, r8
    1398:	d1bf      	bne.n	131a <initialize()+0x52>
    139a:	4988      	ldr	r1, [pc, #544]	; (15bc <initialize()+0x2f4>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    139c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    139e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    13a2:	4a86      	ldr	r2, [pc, #536]	; (15bc <initialize()+0x2f4>)
            count++;;
        } while ( u.index != 255);
    13a4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    13a6:	3701      	adds	r7, #1
        } while ( u.index != 255);
    13a8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    13aa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    13ac:	d1f7      	bne.n	139e <initialize()+0xd6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    13ae:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    13b0:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    13b2:	ea4f 6813 	mov.w	r8, r3, lsr #24
    13b6:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    13ba:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    13be:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    13c2:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    13c4:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    13c6:	2400      	movs	r4, #0
    13c8:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    13ca:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    13ce:	4b78      	ldr	r3, [pc, #480]	; (15b0 <initialize()+0x2e8>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    13d0:	f3c5 2707 	ubfx	r7, r5, #8, #8
    13d4:	f3c5 4607 	ubfx	r6, r5, #16, #8
    13d8:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    13da:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    13de:	9104      	str	r1, [sp, #16]
    13e0:	b2f1      	uxtb	r1, r6
    13e2:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    13e4:	fa5f f18c 	uxtb.w	r1, ip
    13e8:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    13ea:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    13ec:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    13ee:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    13f0:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    13f4:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
    13f8:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    13fa:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    13fe:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1402:	d80c      	bhi.n	141e <initialize()+0x156>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1404:	9906      	ldr	r1, [sp, #24]
    1406:	458c      	cmp	ip, r1
    1408:	dc07      	bgt.n	141a <initialize()+0x152>
    140a:	290f      	cmp	r1, #15
    140c:	d005      	beq.n	141a <initialize()+0x152>
                    istart8 = lastSlotUsed + 1;
    140e:	3101      	adds	r1, #1
    1410:	b2c9      	uxtb	r1, r1
    1412:	428b      	cmp	r3, r1
    1414:	9103      	str	r1, [sp, #12]
    1416:	bf38      	it	cc
    1418:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    141a:	b259      	sxtb	r1, r3
    141c:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    141e:	a908      	add	r1, sp, #32
    1420:	9100      	str	r1, [sp, #0]
    1422:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1424:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1428:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
    142c:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1430:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1434:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1438:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    143c:	f003 fc4e 	bl	4cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1440:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1442:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1446:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
    144a:	46d6      	mov	lr, sl
    144c:	d1bd      	bne.n	13ca <initialize()+0x102>
	curr_leds.current_palette	= Colorfull_gp;
	curr_leds.target_palette	= Magenta_Evening_gp;
	updatePaletteIndex(curr_leds);
    144e:	4858      	ldr	r0, [pc, #352]	; (15b0 <initialize()+0x2e8>)
	curr_leds.mode_name			= start_mode;

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1450:	4c5b      	ldr	r4, [pc, #364]	; (15c0 <initialize()+0x2f8>)
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= Colorfull_gp;
	curr_leds.target_palette	= Magenta_Evening_gp;
	updatePaletteIndex(curr_leds);
    1452:	f7ff fea1 	bl	1198 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
    1456:	4b5b      	ldr	r3, [pc, #364]	; (15c4 <initialize()+0x2fc>)
    1458:	4a55      	ldr	r2, [pc, #340]	; (15b0 <initialize()+0x2e8>)
    145a:	781b      	ldrb	r3, [r3, #0]
    145c:	f882 322b 	strb.w	r3, [r2, #555]	; 0x22b
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1460:	2700      	movs	r7, #0

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1462:	2196      	movs	r1, #150	; 0x96
    1464:	4620      	mov	r0, r4
    1466:	aa09      	add	r2, sp, #36	; 0x24
    1468:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    146c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    1470:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
    1474:	f003 fc02 	bl	4c7c <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
    1478:	2301      	movs	r3, #1
    147a:	4953      	ldr	r1, [pc, #332]	; (15c8 <initialize()+0x300>)
    147c:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1480:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    1484:	4a50      	ldr	r2, [pc, #320]	; (15c8 <initialize()+0x300>)
            count++;;
        } while ( u.index != 255);
    1486:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1488:	3701      	adds	r7, #1
        } while ( u.index != 255);
    148a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    148c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    148e:	d1f7      	bne.n	1480 <initialize()+0x1b8>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1490:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1492:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1494:	f3c3 4907 	ubfx	r9, r3, #16, #8
    1498:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    149c:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    14a0:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    14a4:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    14a6:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    14a8:	2400      	movs	r4, #0
    14aa:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    14ac:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    14b0:	4846      	ldr	r0, [pc, #280]	; (15cc <initialize()+0x304>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    14b2:	f3c5 2707 	ubfx	r7, r5, #8, #8
    14b6:	f3c5 4607 	ubfx	r6, r5, #16, #8
    14ba:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    14bc:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    14c0:	9104      	str	r1, [sp, #16]
    14c2:	b2f1      	uxtb	r1, r6
    14c4:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    14c6:	fa5f f18c 	uxtb.w	r1, ip
    14ca:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    14cc:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    14ce:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    14d0:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    14d2:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    14d6:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    14d8:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    14dc:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    14e0:	d80c      	bhi.n	14fc <initialize()+0x234>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    14e2:	9906      	ldr	r1, [sp, #24]
    14e4:	458c      	cmp	ip, r1
    14e6:	dc07      	bgt.n	14f8 <initialize()+0x230>
    14e8:	290f      	cmp	r1, #15
    14ea:	d005      	beq.n	14f8 <initialize()+0x230>
                    istart8 = lastSlotUsed + 1;
    14ec:	3101      	adds	r1, #1
    14ee:	b2c9      	uxtb	r1, r1
    14f0:	428b      	cmp	r3, r1
    14f2:	9103      	str	r1, [sp, #12]
    14f4:	bf38      	it	cc
    14f6:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    14f8:	b259      	sxtb	r1, r3
    14fa:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    14fc:	a908      	add	r1, sp, #32
    14fe:	9100      	str	r1, [sp, #0]
    1500:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1502:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1506:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    150a:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    150e:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1512:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1516:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    151a:	f003 fbdf 	bl	4cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    151e:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1520:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1524:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
    1528:	46c8      	mov	r8, r9
    152a:	d1bf      	bne.n	14ac <initialize()+0x1e4>
    152c:	4928      	ldr	r1, [pc, #160]	; (15d0 <initialize()+0x308>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    152e:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1530:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    1534:	4a26      	ldr	r2, [pc, #152]	; (15d0 <initialize()+0x308>)
            count++;;
        } while ( u.index != 255);
    1536:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1538:	3701      	adds	r7, #1
        } while ( u.index != 255);
    153a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    153c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    153e:	d1f7      	bne.n	1530 <initialize()+0x268>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1540:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1542:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1544:	f3c3 4907 	ubfx	r9, r3, #16, #8
    1548:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    154c:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1550:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    1554:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1556:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1558:	2400      	movs	r4, #0
    155a:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    155c:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1560:	481c      	ldr	r0, [pc, #112]	; (15d4 <initialize()+0x30c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1562:	f3c5 2707 	ubfx	r7, r5, #8, #8
    1566:	f3c5 4607 	ubfx	r6, r5, #16, #8
    156a:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    156c:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1570:	9104      	str	r1, [sp, #16]
    1572:	b2f1      	uxtb	r1, r6
    1574:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1576:	fa5f f18c 	uxtb.w	r1, ip
    157a:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    157c:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    157e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1580:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1582:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1586:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1588:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    158c:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1590:	d822      	bhi.n	15d8 <initialize()+0x310>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1592:	9906      	ldr	r1, [sp, #24]
    1594:	458c      	cmp	ip, r1
    1596:	dc07      	bgt.n	15a8 <initialize()+0x2e0>
    1598:	290f      	cmp	r1, #15
    159a:	d005      	beq.n	15a8 <initialize()+0x2e0>
                    istart8 = lastSlotUsed + 1;
    159c:	3101      	adds	r1, #1
    159e:	b2c9      	uxtb	r1, r1
    15a0:	428b      	cmp	r3, r1
    15a2:	9103      	str	r1, [sp, #12]
    15a4:	bf38      	it	cc
    15a6:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    15a8:	b259      	sxtb	r1, r3
    15aa:	9106      	str	r1, [sp, #24]
    15ac:	e014      	b.n	15d8 <initialize()+0x310>
    15ae:	bf00      	nop
    15b0:	1fff9174 	.word	0x1fff9174
    15b4:	00009930 	.word	0x00009930
    15b8:	1fff933b 	.word	0x1fff933b
    15bc:	000099b8 	.word	0x000099b8
    15c0:	1fff8c64 	.word	0x1fff8c64
    15c4:	1fff8730 	.word	0x1fff8730
    15c8:	0000912c 	.word	0x0000912c
    15cc:	1fff8e2b 	.word	0x1fff8e2b
    15d0:	0000920c 	.word	0x0000920c
    15d4:	1fff8e5b 	.word	0x1fff8e5b
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    15d8:	a908      	add	r1, sp, #32
    15da:	9100      	str	r1, [sp, #0]
    15dc:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15de:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    15e2:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    15e6:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15ea:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    15ee:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    15f2:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    15f6:	f003 fb71 	bl	4cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    15fa:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15fc:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1600:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
    1604:	46c8      	mov	r8, r9
    1606:	d1a9      	bne.n	155c <initialize()+0x294>
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	updatePaletteIndex(next_leds);
    1608:	4802      	ldr	r0, [pc, #8]	; (1614 <initialize()+0x34c>)
    160a:	f7ff fdc5 	bl	1198 <updatePaletteIndex(LEDStruct&)>
}
    160e:	b00b      	add	sp, #44	; 0x2c
    1610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1614:	1fff8c64 	.word	0x1fff8c64

00001618 <change_pattern()>:



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
    1618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161a:	2120      	movs	r1, #32
    161c:	4823      	ldr	r0, [pc, #140]	; (16ac <change_pattern()+0x94>)
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    161e:	4f24      	ldr	r7, [pc, #144]	; (16b0 <change_pattern()+0x98>)
	transition_type  = BLENDING;
    1620:	4e24      	ldr	r6, [pc, #144]	; (16b4 <change_pattern()+0x9c>)
	transition_speed = random8(3,7);
	transition_ratio = 0;
    1622:	4d25      	ldr	r5, [pc, #148]	; (16b8 <change_pattern()+0xa0>)
    1624:	f005 fb00 	bl	6c28 <usb_serial_write>
    1628:	4824      	ldr	r0, [pc, #144]	; (16bc <change_pattern()+0xa4>)
    162a:	f005 fd01 	bl	7030 <Print::println()>
    162e:	4824      	ldr	r0, [pc, #144]	; (16c0 <change_pattern()+0xa8>)

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    1630:	4a24      	ldr	r2, [pc, #144]	; (16c4 <change_pattern()+0xac>)
    1632:	8803      	ldrh	r3, [r0, #0]
    1634:	7814      	ldrb	r4, [r2, #0]
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
    1636:	4924      	ldr	r1, [pc, #144]	; (16c8 <change_pattern()+0xb0>)
    1638:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    163c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1640:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1644:	3319      	adds	r3, #25
    1646:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1648:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    164c:	f3c2 1281 	ubfx	r2, r2, #6, #2
    1650:	3203      	adds	r2, #3
    1652:	700a      	strb	r2, [r1, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    1654:	2201      	movs	r2, #1
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    1656:	491d      	ldr	r1, [pc, #116]	; (16cc <change_pattern()+0xb4>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    1658:	703a      	strb	r2, [r7, #0]
	transition_type  = BLENDING;
    165a:	2200      	movs	r2, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    165c:	8003      	strh	r3, [r0, #0]
    165e:	7032      	strb	r2, [r6, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;
    1660:	702a      	strb	r2, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    1662:	f881 222d 	strb.w	r2, [r1, #557]	; 0x22d
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    1666:	b95c      	cbnz	r4, 1680 <change_pattern()+0x68>
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
    1668:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
    166c:	4a18      	ldr	r2, [pc, #96]	; (16d0 <change_pattern()+0xb8>)
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
    166e:	3301      	adds	r3, #1
    1670:	f003 030f 	and.w	r3, r3, #15
    1674:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
    1678:	5cd3      	ldrb	r3, [r2, r3]
    167a:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
    167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1680:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1684:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1688:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    168c:	3319      	adds	r3, #25
    168e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1690:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1694:	f3c2 1203 	ubfx	r2, r2, #4, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1698:	8003      	strh	r3, [r0, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    169a:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    169e:	4613      	mov	r3, r2
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
    16a0:	4a0b      	ldr	r2, [pc, #44]	; (16d0 <change_pattern()+0xb8>)
    16a2:	5cd3      	ldrb	r3, [r2, r3]
    16a4:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
    16a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16aa:	bf00      	nop
    16ac:	00008990 	.word	0x00008990
    16b0:	1fff8f70 	.word	0x1fff8f70
    16b4:	1fff8f7c 	.word	0x1fff8f7c
    16b8:	1fff8c5c 	.word	0x1fff8c5c
    16bc:	1fff873c 	.word	0x1fff873c
    16c0:	1fff8734 	.word	0x1fff8734
    16c4:	1fff8731 	.word	0x1fff8731
    16c8:	1fff916a 	.word	0x1fff916a
    16cc:	1fff8c64 	.word	0x1fff8c64
    16d0:	1fff8720 	.word	0x1fff8720

000016d4 <blending()>:
}



// Transition functions
void blending() {
    16d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16d8:	f8df b344 	ldr.w	fp, [pc, #836]	; 1a20 <blending()+0x34c>
    16dc:	f8df a348 	ldr.w	sl, [pc, #840]	; 1a28 <blending()+0x354>
    16e0:	4cc0      	ldr	r4, [pc, #768]	; (19e4 <blending()+0x310>)
    16e2:	4fc1      	ldr	r7, [pc, #772]	; (19e8 <blending()+0x314>)
    16e4:	b085      	sub	sp, #20
    16e6:	465d      	mov	r5, fp
    16e8:	f50b 78e1 	add.w	r8, fp, #450	; 0x1c2
    16ec:	4656      	mov	r6, sl
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    16ee:	4632      	mov	r2, r6
    16f0:	4629      	mov	r1, r5
    16f2:	783b      	ldrb	r3, [r7, #0]
    16f4:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 19e8 <blending()+0x314>
    16f8:	a803      	add	r0, sp, #12
    16fa:	3503      	adds	r5, #3
    16fc:	f003 fbb0 	bl	4e60 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1700:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1704:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1708:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    170c:	7021      	strb	r1, [r4, #0]
    170e:	4545      	cmp	r5, r8
        g = rhs.g;
    1710:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1712:	70a3      	strb	r3, [r4, #2]
    1714:	f106 0603 	add.w	r6, r6, #3
    1718:	f104 0403 	add.w	r4, r4, #3
    171c:	d1e7      	bne.n	16ee <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    171e:	4eb3      	ldr	r6, [pc, #716]	; (19ec <blending()+0x318>)
    1720:	6833      	ldr	r3, [r6, #0]
    1722:	07db      	lsls	r3, r3, #31
    1724:	f140 813f 	bpl.w	19a6 <blending()+0x2d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1728:	4db1      	ldr	r5, [pc, #708]	; (19f0 <blending()+0x31c>)
    172a:	4cb2      	ldr	r4, [pc, #712]	; (19f4 <blending()+0x320>)
    172c:	682b      	ldr	r3, [r5, #0]
    172e:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1730:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1734:	9b03      	ldr	r3, [sp, #12]
    1736:	1a5b      	subs	r3, r3, r1
    1738:	4293      	cmp	r3, r2
    173a:	d30c      	bcc.n	1756 <blending()+0x82>
    173c:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    173e:	682a      	ldr	r2, [r5, #0]
    1740:	9202      	str	r2, [sp, #8]
    1742:	3301      	adds	r3, #1
	return ret;
    1744:	9a02      	ldr	r2, [sp, #8]
    1746:	6022      	str	r2, [r4, #0]
    1748:	b2db      	uxtb	r3, r3
    174a:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    174c:	2bff      	cmp	r3, #255	; 0xff
    174e:	d006      	beq.n	175e <blending()+0x8a>
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
	}
}
    1750:	b005      	add	sp, #20
    1752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1756:	f899 3000 	ldrb.w	r3, [r9]

// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    175a:	2bff      	cmp	r3, #255	; 0xff
    175c:	d1f8      	bne.n	1750 <blending()+0x7c>
		in_transition = 0;
    175e:	49a6      	ldr	r1, [pc, #664]	; (19f8 <blending()+0x324>)
    1760:	4ba6      	ldr	r3, [pc, #664]	; (19fc <blending()+0x328>)
    1762:	4aa7      	ldr	r2, [pc, #668]	; (1a00 <blending()+0x32c>)
    1764:	2000      	movs	r0, #0
    1766:	7008      	strb	r0, [r1, #0]
    1768:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    176c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    1770:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    1774:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1778:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    177c:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1780:	f803 1c01 	strb.w	r1, [r3, #-1]
    1784:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    1786:	429d      	cmp	r5, r3
    1788:	f102 0203 	add.w	r2, r2, #3
    178c:	d1ee      	bne.n	176c <blending()+0x98>
    178e:	f89a 21c2 	ldrb.w	r2, [sl, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1792:	4b9c      	ldr	r3, [pc, #624]	; (1a04 <blending()+0x330>)
    1794:	f89a 41c3 	ldrb.w	r4, [sl, #451]	; 0x1c3
    1798:	f89a 01c4 	ldrb.w	r0, [sl, #452]	; 0x1c4
    179c:	f89a 11c5 	ldrb.w	r1, [sl, #453]	; 0x1c5
    17a0:	f88b 21c2 	strb.w	r2, [fp, #450]	; 0x1c2
    17a4:	4a98      	ldr	r2, [pc, #608]	; (1a08 <blending()+0x334>)
    17a6:	f88b 41c3 	strb.w	r4, [fp, #451]	; 0x1c3
    17aa:	f88b 01c4 	strb.w	r0, [fp, #452]	; 0x1c4
    17ae:	f103 0430 	add.w	r4, r3, #48	; 0x30
    17b2:	f88b 11c5 	strb.w	r1, [fp, #453]	; 0x1c5
    17b6:	6819      	ldr	r1, [r3, #0]
    17b8:	685d      	ldr	r5, [r3, #4]
    17ba:	6898      	ldr	r0, [r3, #8]
    17bc:	6011      	str	r1, [r2, #0]
    17be:	68d9      	ldr	r1, [r3, #12]
    17c0:	60d1      	str	r1, [r2, #12]
    17c2:	3310      	adds	r3, #16
    17c4:	42a3      	cmp	r3, r4
    17c6:	6055      	str	r5, [r2, #4]
    17c8:	6090      	str	r0, [r2, #8]
    17ca:	f102 0210 	add.w	r2, r2, #16
    17ce:	d1f2      	bne.n	17b6 <blending()+0xe2>
    17d0:	4b8e      	ldr	r3, [pc, #568]	; (1a0c <blending()+0x338>)
    17d2:	4a8f      	ldr	r2, [pc, #572]	; (1a10 <blending()+0x33c>)
    17d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
    17d8:	6818      	ldr	r0, [r3, #0]
    17da:	685d      	ldr	r5, [r3, #4]
    17dc:	689c      	ldr	r4, [r3, #8]
    17de:	6010      	str	r0, [r2, #0]
    17e0:	68d8      	ldr	r0, [r3, #12]
    17e2:	60d0      	str	r0, [r2, #12]
    17e4:	3310      	adds	r3, #16
    17e6:	428b      	cmp	r3, r1
    17e8:	6055      	str	r5, [r2, #4]
    17ea:	6094      	str	r4, [r2, #8]
    17ec:	f102 0210 	add.w	r2, r2, #16
    17f0:	d1f2      	bne.n	17d8 <blending()+0x104>
    17f2:	f89a 4227 	ldrb.w	r4, [sl, #551]	; 0x227
    17f6:	f89a 0228 	ldrb.w	r0, [sl, #552]	; 0x228
    17fa:	f89a 1229 	ldrb.w	r1, [sl, #553]	; 0x229
    17fe:	f89a 222a 	ldrb.w	r2, [sl, #554]	; 0x22a
    1802:	f89a 322b 	ldrb.w	r3, [sl, #555]	; 0x22b
    1806:	f89a 522c 	ldrb.w	r5, [sl, #556]	; 0x22c
    180a:	f88b 4227 	strb.w	r4, [fp, #551]	; 0x227
    180e:	f88b 0228 	strb.w	r0, [fp, #552]	; 0x228
    1812:	f89a 422d 	ldrb.w	r4, [sl, #557]	; 0x22d
    1816:	f89a 022e 	ldrb.w	r0, [sl, #558]	; 0x22e
    181a:	f88b 1229 	strb.w	r1, [fp, #553]	; 0x229
    181e:	f88b 222a 	strb.w	r2, [fp, #554]	; 0x22a
    1822:	f89a 122f 	ldrb.w	r1, [sl, #559]	; 0x22f
    1826:	f89a 2230 	ldrb.w	r2, [sl, #560]	; 0x230
    182a:	f88b 322b 	strb.w	r3, [fp, #555]	; 0x22b
    182e:	f88b 522c 	strb.w	r5, [fp, #556]	; 0x22c
    1832:	f89a 3231 	ldrb.w	r3, [sl, #561]	; 0x231
    1836:	f89a 5232 	ldrb.w	r5, [sl, #562]	; 0x232
    183a:	f88b 422d 	strb.w	r4, [fp, #557]	; 0x22d
    183e:	f88b 022e 	strb.w	r0, [fp, #558]	; 0x22e
    1842:	f89a 4233 	ldrb.w	r4, [sl, #563]	; 0x233
    1846:	f89a 0234 	ldrb.w	r0, [sl, #564]	; 0x234
    184a:	f88b 122f 	strb.w	r1, [fp, #559]	; 0x22f
    184e:	f88b 2230 	strb.w	r2, [fp, #560]	; 0x230
    1852:	f89a 1235 	ldrb.w	r1, [sl, #565]	; 0x235
    1856:	f89a 2236 	ldrb.w	r2, [sl, #566]	; 0x236
    185a:	f88b 3231 	strb.w	r3, [fp, #561]	; 0x231
    185e:	f88b 5232 	strb.w	r5, [fp, #562]	; 0x232
    1862:	f88b 4233 	strb.w	r4, [fp, #563]	; 0x233
    1866:	f88b 1235 	strb.w	r1, [fp, #565]	; 0x235
    186a:	f88b 2236 	strb.w	r2, [fp, #566]	; 0x236
    186e:	4b69      	ldr	r3, [pc, #420]	; (1a14 <blending()+0x340>)
    1870:	f88b 0234 	strb.w	r0, [fp, #564]	; 0x234
    1874:	f89a 0237 	ldrb.w	r0, [sl, #567]	; 0x237
    1878:	f89a 5238 	ldrb.w	r5, [sl, #568]	; 0x238
    187c:	f89a 4239 	ldrb.w	r4, [sl, #569]	; 0x239
    1880:	f89a 123a 	ldrb.w	r1, [sl, #570]	; 0x23a
    1884:	f88b 5238 	strb.w	r5, [fp, #568]	; 0x238
    1888:	f88b 4239 	strb.w	r4, [fp, #569]	; 0x239
    188c:	f89a 523b 	ldrb.w	r5, [sl, #571]	; 0x23b
    1890:	f89a 423c 	ldrb.w	r4, [sl, #572]	; 0x23c
    1894:	f88b 123a 	strb.w	r1, [fp, #570]	; 0x23a
    1898:	4a5f      	ldr	r2, [pc, #380]	; (1a18 <blending()+0x344>)
    189a:	f89a 123d 	ldrb.w	r1, [sl, #573]	; 0x23d
    189e:	f88b 0237 	strb.w	r0, [fp, #567]	; 0x237
    18a2:	f88b 523b 	strb.w	r5, [fp, #571]	; 0x23b
    18a6:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    18aa:	f88b 423c 	strb.w	r4, [fp, #572]	; 0x23c
    18ae:	f88b 123d 	strb.w	r1, [fp, #573]	; 0x23d
    18b2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    18b6:	f803 1b01 	strb.w	r1, [r3], #1
    18ba:	4283      	cmp	r3, r0
    18bc:	d1f9      	bne.n	18b2 <blending()+0x1de>
    18be:	4a57      	ldr	r2, [pc, #348]	; (1a1c <blending()+0x348>)
    18c0:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    18c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    18c8:	f803 1b01 	strb.w	r1, [r3], #1
    18cc:	4283      	cmp	r3, r0
    18ce:	4954      	ldr	r1, [pc, #336]	; (1a20 <blending()+0x34c>)
    18d0:	d1f8      	bne.n	18c4 <blending()+0x1f0>
    18d2:	f89a 42d4 	ldrb.w	r4, [sl, #724]	; 0x2d4
    18d6:	f89a 02d5 	ldrb.w	r0, [sl, #725]	; 0x2d5
    18da:	f89a 22d6 	ldrb.w	r2, [sl, #726]	; 0x2d6
    18de:	f89a 32d7 	ldrb.w	r3, [sl, #727]	; 0x2d7
    18e2:	f89a 62d8 	ldrb.w	r6, [sl, #728]	; 0x2d8
    18e6:	f89a 52d9 	ldrb.w	r5, [sl, #729]	; 0x2d9
    18ea:	f881 42d4 	strb.w	r4, [r1, #724]	; 0x2d4
    18ee:	f881 02d5 	strb.w	r0, [r1, #725]	; 0x2d5
    18f2:	f8ba 42da 	ldrh.w	r4, [sl, #730]	; 0x2da
    18f6:	f8ba 02dc 	ldrh.w	r0, [sl, #732]	; 0x2dc
    18fa:	f881 22d6 	strb.w	r2, [r1, #726]	; 0x2d6
    18fe:	f881 32d7 	strb.w	r3, [r1, #727]	; 0x2d7
    1902:	f8ba 22de 	ldrh.w	r2, [sl, #734]	; 0x2de
    1906:	f89a 32e0 	ldrb.w	r3, [sl, #736]	; 0x2e0
    190a:	f881 62d8 	strb.w	r6, [r1, #728]	; 0x2d8
    190e:	f881 52d9 	strb.w	r5, [r1, #729]	; 0x2d9
    1912:	f89a 62e1 	ldrb.w	r6, [sl, #737]	; 0x2e1
    1916:	f89a 52e2 	ldrb.w	r5, [sl, #738]	; 0x2e2
    191a:	f8a1 42da 	strh.w	r4, [r1, #730]	; 0x2da
    191e:	f8a1 02dc 	strh.w	r0, [r1, #732]	; 0x2dc
    1922:	f89a 42e3 	ldrb.w	r4, [sl, #739]	; 0x2e3
    1926:	f89a 02e4 	ldrb.w	r0, [sl, #740]	; 0x2e4
    192a:	f8a1 22de 	strh.w	r2, [r1, #734]	; 0x2de
    192e:	f881 32e0 	strb.w	r3, [r1, #736]	; 0x2e0
    1932:	f8ba 22e6 	ldrh.w	r2, [sl, #742]	; 0x2e6
    1936:	f8ba 32e8 	ldrh.w	r3, [sl, #744]	; 0x2e8
    193a:	f881 62e1 	strb.w	r6, [r1, #737]	; 0x2e1
    193e:	f881 52e2 	strb.w	r5, [r1, #738]	; 0x2e2
    1942:	f881 02e4 	strb.w	r0, [r1, #740]	; 0x2e4
    1946:	f8a1 22e6 	strh.w	r2, [r1, #742]	; 0x2e6
    194a:	f8a1 32e8 	strh.w	r3, [r1, #744]	; 0x2e8
    194e:	f881 42e3 	strb.w	r4, [r1, #739]	; 0x2e3
    1952:	f8ba 42ea 	ldrh.w	r4, [sl, #746]	; 0x2ea
    1956:	f8ba 02ec 	ldrh.w	r0, [sl, #748]	; 0x2ec
    195a:	f8ba 22ee 	ldrh.w	r2, [sl, #750]	; 0x2ee
    195e:	f8ba 72f0 	ldrh.w	r7, [sl, #752]	; 0x2f0
    1962:	f8ba 62f2 	ldrh.w	r6, [sl, #754]	; 0x2f2
    1966:	f8a1 42ea 	strh.w	r4, [r1, #746]	; 0x2ea
    196a:	f8ba 52f4 	ldrh.w	r5, [sl, #756]	; 0x2f4
    196e:	f8a1 02ec 	strh.w	r0, [r1, #748]	; 0x2ec
    1972:	f8ba 42f6 	ldrh.w	r4, [sl, #758]	; 0x2f6
    1976:	f8a1 22ee 	strh.w	r2, [r1, #750]	; 0x2ee
    197a:	f8ba 02f8 	ldrh.w	r0, [sl, #760]	; 0x2f8
    197e:	f8ba 22fa 	ldrh.w	r2, [sl, #762]	; 0x2fa
    1982:	f8a1 72f0 	strh.w	r7, [r1, #752]	; 0x2f0
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
    1986:	2300      	movs	r3, #0
    1988:	f8a1 62f2 	strh.w	r6, [r1, #754]	; 0x2f2
    198c:	f8a1 52f4 	strh.w	r5, [r1, #756]	; 0x2f4
    1990:	f8a1 42f6 	strh.w	r4, [r1, #758]	; 0x2f6
    1994:	f8a1 02f8 	strh.w	r0, [r1, #760]	; 0x2f8
    1998:	f8a1 22fa 	strh.w	r2, [r1, #762]	; 0x2fa
    199c:	f881 31c6 	strb.w	r3, [r1, #454]	; 0x1c6
	}
}
    19a0:	b005      	add	sp, #20
    19a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    19a6:	4630      	mov	r0, r6
    19a8:	f004 f8a6 	bl	5af8 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19ac:	4d10      	ldr	r5, [pc, #64]	; (19f0 <blending()+0x31c>)
    19ae:	b958      	cbnz	r0, 19c8 <blending()+0x2f4>
    19b0:	4c10      	ldr	r4, [pc, #64]	; (19f4 <blending()+0x320>)
    19b2:	682b      	ldr	r3, [r5, #0]
    19b4:	9303      	str	r3, [sp, #12]
    19b6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    19ba:	9b03      	ldr	r3, [sp, #12]
    19bc:	1a5b      	subs	r3, r3, r1
    19be:	4293      	cmp	r3, r2
    19c0:	f4bf aebc 	bcs.w	173c <blending()+0x68>
    19c4:	783b      	ldrb	r3, [r7, #0]
    19c6:	e6c1      	b.n	174c <blending()+0x78>
    19c8:	4b16      	ldr	r3, [pc, #88]	; (1a24 <blending()+0x350>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19ca:	682a      	ldr	r2, [r5, #0]
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	4c09      	ldr	r4, [pc, #36]	; (19f4 <blending()+0x320>)
    19d0:	9201      	str	r2, [sp, #4]
	return ret;
    19d2:	9a01      	ldr	r2, [sp, #4]
    19d4:	6022      	str	r2, [r4, #0]
    19d6:	009b      	lsls	r3, r3, #2
    19d8:	4630      	mov	r0, r6
    19da:	6063      	str	r3, [r4, #4]
    19dc:	f004 f892 	bl	5b04 <__cxa_guard_release>
    19e0:	e7e7      	b.n	19b2 <blending()+0x2de>
    19e2:	bf00      	nop
    19e4:	1fff8fa8 	.word	0x1fff8fa8
    19e8:	1fff8c5c 	.word	0x1fff8c5c
    19ec:	1fff8fa4 	.word	0x1fff8fa4
    19f0:	1fff94e8 	.word	0x1fff94e8
    19f4:	1fff8f74 	.word	0x1fff8f74
    19f8:	1fff8f70 	.word	0x1fff8f70
    19fc:	1fff9177 	.word	0x1fff9177
    1a00:	1fff8c67 	.word	0x1fff8c67
    1a04:	1fff8e2b 	.word	0x1fff8e2b
    1a08:	1fff933b 	.word	0x1fff933b
    1a0c:	1fff8e5b 	.word	0x1fff8e5b
    1a10:	1fff936b 	.word	0x1fff936b
    1a14:	1fff93b2 	.word	0x1fff93b2
    1a18:	1fff8ea1 	.word	0x1fff8ea1
    1a1c:	1fff8eec 	.word	0x1fff8eec
    1a20:	1fff9174 	.word	0x1fff9174
    1a24:	1fff916a 	.word	0x1fff916a
    1a28:	1fff8c64 	.word	0x1fff8c64

00001a2c <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1a2c:	b510      	push	{r4, lr}
    1a2e:	2101      	movs	r1, #1
    1a30:	4604      	mov	r4, r0
    1a32:	4893      	ldr	r0, [pc, #588]	; (1c80 <print_palette(unsigned char)+0x254>)
    1a34:	f005 f8f8 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a38:	4621      	mov	r1, r4
    1a3a:	2300      	movs	r3, #0
    1a3c:	220a      	movs	r2, #10
    1a3e:	4891      	ldr	r0, [pc, #580]	; (1c84 <print_palette(unsigned char)+0x258>)
    1a40:	f005 fb06 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a44:	2102      	movs	r1, #2
    1a46:	4890      	ldr	r0, [pc, #576]	; (1c88 <print_palette(unsigned char)+0x25c>)
    1a48:	f005 f8ee 	bl	6c28 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1a4c:	2c5c      	cmp	r4, #92	; 0x5c
    1a4e:	f200 835f 	bhi.w	2110 <print_palette(unsigned char)+0x6e4>
    1a52:	e8df f014 	tbh	[pc, r4, lsl #1]
    1a56:	0358      	.short	0x0358
    1a58:	034a0353 	.word	0x034a0353
    1a5c:	02cf0345 	.word	0x02cf0345
    1a60:	02c102ca 	.word	0x02c102ca
    1a64:	02af02b8 	.word	0x02af02b8
    1a68:	029d02a6 	.word	0x029d02a6
    1a6c:	028b0294 	.word	0x028b0294
    1a70:	02790282 	.word	0x02790282
    1a74:	02670270 	.word	0x02670270
    1a78:	0255025e 	.word	0x0255025e
    1a7c:	0243024c 	.word	0x0243024c
    1a80:	0231023a 	.word	0x0231023a
    1a84:	021f0228 	.word	0x021f0228
    1a88:	020d0216 	.word	0x020d0216
    1a8c:	01fb0204 	.word	0x01fb0204
    1a90:	01e901f2 	.word	0x01e901f2
    1a94:	01db01e0 	.word	0x01db01e0
    1a98:	01d101d6 	.word	0x01d101d6
    1a9c:	01c701cc 	.word	0x01c701cc
    1aa0:	01bd01c2 	.word	0x01bd01c2
    1aa4:	01b301b8 	.word	0x01b301b8
    1aa8:	01a901ae 	.word	0x01a901ae
    1aac:	019f01a4 	.word	0x019f01a4
    1ab0:	0195019a 	.word	0x0195019a
    1ab4:	018b0190 	.word	0x018b0190
    1ab8:	01810186 	.word	0x01810186
    1abc:	0177017c 	.word	0x0177017c
    1ac0:	016d0172 	.word	0x016d0172
    1ac4:	01630168 	.word	0x01630168
    1ac8:	010b0110 	.word	0x010b0110
    1acc:	01010106 	.word	0x01010106
    1ad0:	00f700fc 	.word	0x00f700fc
    1ad4:	00ed00f2 	.word	0x00ed00f2
    1ad8:	00e300e8 	.word	0x00e300e8
    1adc:	00d900de 	.word	0x00d900de
    1ae0:	00cf00d4 	.word	0x00cf00d4
    1ae4:	00c500ca 	.word	0x00c500ca
    1ae8:	00bb00c0 	.word	0x00bb00c0
    1aec:	00b100b6 	.word	0x00b100b6
    1af0:	00a700ac 	.word	0x00a700ac
    1af4:	009d00a2 	.word	0x009d00a2
    1af8:	00930098 	.word	0x00930098
    1afc:	0089008e 	.word	0x0089008e
    1b00:	007f0084 	.word	0x007f0084
    1b04:	0075007a 	.word	0x0075007a
    1b08:	006b0070 	.word	0x006b0070
    1b0c:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    1b10:	495e      	ldr	r1, [pc, #376]	; (1c8c <print_palette(unsigned char)+0x260>)
    1b12:	485c      	ldr	r0, [pc, #368]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b14:	f7ff f8de 	bl	cd4 <Print::println(char const*)>
		break;
    1b18:	bd10      	pop	{r4, pc}
    1b1a:	210b      	movs	r1, #11
    1b1c:	485c      	ldr	r0, [pc, #368]	; (1c90 <print_palette(unsigned char)+0x264>)
    1b1e:	f005 f883 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1b22:	4858      	ldr	r0, [pc, #352]	; (1c84 <print_palette(unsigned char)+0x258>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    1b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b28:	f005 ba82 	b.w	7030 <Print::println()>
	case 89:
		Serial.println("blue_fire_gp");
		break;

	case 90:
		Serial.println("purplefly_gp");
    1b2c:	4959      	ldr	r1, [pc, #356]	; (1c94 <print_palette(unsigned char)+0x268>)
    1b2e:	4855      	ldr	r0, [pc, #340]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b30:	f7ff f8d0 	bl	cd4 <Print::println(char const*)>
		break;
    1b34:	bd10      	pop	{r4, pc}
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    1b36:	4958      	ldr	r1, [pc, #352]	; (1c98 <print_palette(unsigned char)+0x26c>)
    1b38:	4852      	ldr	r0, [pc, #328]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b3a:	f7ff f8cb 	bl	cd4 <Print::println(char const*)>
		break;
    1b3e:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    1b40:	4956      	ldr	r1, [pc, #344]	; (1c9c <print_palette(unsigned char)+0x270>)
    1b42:	4850      	ldr	r0, [pc, #320]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b44:	f7ff f8c6 	bl	cd4 <Print::println(char const*)>
		break;
    1b48:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    1b4a:	4955      	ldr	r1, [pc, #340]	; (1ca0 <print_palette(unsigned char)+0x274>)
    1b4c:	484d      	ldr	r0, [pc, #308]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b4e:	f7ff f8c1 	bl	cd4 <Print::println(char const*)>
		break;
    1b52:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    1b54:	4953      	ldr	r1, [pc, #332]	; (1ca4 <print_palette(unsigned char)+0x278>)
    1b56:	484b      	ldr	r0, [pc, #300]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b58:	f7ff f8bc 	bl	cd4 <Print::println(char const*)>
		break;
    1b5c:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    1b5e:	4952      	ldr	r1, [pc, #328]	; (1ca8 <print_palette(unsigned char)+0x27c>)
    1b60:	4848      	ldr	r0, [pc, #288]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b62:	f7ff f8b7 	bl	cd4 <Print::println(char const*)>
		break;
    1b66:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    1b68:	4950      	ldr	r1, [pc, #320]	; (1cac <print_palette(unsigned char)+0x280>)
    1b6a:	4846      	ldr	r0, [pc, #280]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b6c:	f7ff f8b2 	bl	cd4 <Print::println(char const*)>
		break;
    1b70:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    1b72:	494f      	ldr	r1, [pc, #316]	; (1cb0 <print_palette(unsigned char)+0x284>)
    1b74:	4843      	ldr	r0, [pc, #268]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b76:	f7ff f8ad 	bl	cd4 <Print::println(char const*)>
		break;
    1b7a:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    1b7c:	494d      	ldr	r1, [pc, #308]	; (1cb4 <print_palette(unsigned char)+0x288>)
    1b7e:	4841      	ldr	r0, [pc, #260]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b80:	f7ff f8a8 	bl	cd4 <Print::println(char const*)>
		break;
    1b84:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    1b86:	494c      	ldr	r1, [pc, #304]	; (1cb8 <print_palette(unsigned char)+0x28c>)
    1b88:	483e      	ldr	r0, [pc, #248]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b8a:	f7ff f8a3 	bl	cd4 <Print::println(char const*)>
		break;
    1b8e:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    1b90:	494a      	ldr	r1, [pc, #296]	; (1cbc <print_palette(unsigned char)+0x290>)
    1b92:	483c      	ldr	r0, [pc, #240]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b94:	f7ff f89e 	bl	cd4 <Print::println(char const*)>
		break;
    1b98:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    1b9a:	4949      	ldr	r1, [pc, #292]	; (1cc0 <print_palette(unsigned char)+0x294>)
    1b9c:	4839      	ldr	r0, [pc, #228]	; (1c84 <print_palette(unsigned char)+0x258>)
    1b9e:	f7ff f899 	bl	cd4 <Print::println(char const*)>
		break;
    1ba2:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    1ba4:	4947      	ldr	r1, [pc, #284]	; (1cc4 <print_palette(unsigned char)+0x298>)
    1ba6:	4837      	ldr	r0, [pc, #220]	; (1c84 <print_palette(unsigned char)+0x258>)
    1ba8:	f7ff f894 	bl	cd4 <Print::println(char const*)>
		break;
    1bac:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    1bae:	4946      	ldr	r1, [pc, #280]	; (1cc8 <print_palette(unsigned char)+0x29c>)
    1bb0:	4834      	ldr	r0, [pc, #208]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bb2:	f7ff f88f 	bl	cd4 <Print::println(char const*)>
		break;
    1bb6:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    1bb8:	4944      	ldr	r1, [pc, #272]	; (1ccc <print_palette(unsigned char)+0x2a0>)
    1bba:	4832      	ldr	r0, [pc, #200]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bbc:	f7ff f88a 	bl	cd4 <Print::println(char const*)>
		break;
    1bc0:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    1bc2:	4943      	ldr	r1, [pc, #268]	; (1cd0 <print_palette(unsigned char)+0x2a4>)
    1bc4:	482f      	ldr	r0, [pc, #188]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bc6:	f7ff f885 	bl	cd4 <Print::println(char const*)>
		break;
    1bca:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    1bcc:	4941      	ldr	r1, [pc, #260]	; (1cd4 <print_palette(unsigned char)+0x2a8>)
    1bce:	482d      	ldr	r0, [pc, #180]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bd0:	f7ff f880 	bl	cd4 <Print::println(char const*)>
		break;
    1bd4:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    1bd6:	4940      	ldr	r1, [pc, #256]	; (1cd8 <print_palette(unsigned char)+0x2ac>)
    1bd8:	482a      	ldr	r0, [pc, #168]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bda:	f7ff f87b 	bl	cd4 <Print::println(char const*)>
		break;
    1bde:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    1be0:	493e      	ldr	r1, [pc, #248]	; (1cdc <print_palette(unsigned char)+0x2b0>)
    1be2:	4828      	ldr	r0, [pc, #160]	; (1c84 <print_palette(unsigned char)+0x258>)
    1be4:	f7ff f876 	bl	cd4 <Print::println(char const*)>
		break;
    1be8:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    1bea:	493d      	ldr	r1, [pc, #244]	; (1ce0 <print_palette(unsigned char)+0x2b4>)
    1bec:	4825      	ldr	r0, [pc, #148]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bee:	f7ff f871 	bl	cd4 <Print::println(char const*)>
		break;
    1bf2:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    1bf4:	493b      	ldr	r1, [pc, #236]	; (1ce4 <print_palette(unsigned char)+0x2b8>)
    1bf6:	4823      	ldr	r0, [pc, #140]	; (1c84 <print_palette(unsigned char)+0x258>)
    1bf8:	f7ff f86c 	bl	cd4 <Print::println(char const*)>
		break;
    1bfc:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    1bfe:	493a      	ldr	r1, [pc, #232]	; (1ce8 <print_palette(unsigned char)+0x2bc>)
    1c00:	4820      	ldr	r0, [pc, #128]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c02:	f7ff f867 	bl	cd4 <Print::println(char const*)>
		break;
    1c06:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    1c08:	4938      	ldr	r1, [pc, #224]	; (1cec <print_palette(unsigned char)+0x2c0>)
    1c0a:	481e      	ldr	r0, [pc, #120]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c0c:	f7ff f862 	bl	cd4 <Print::println(char const*)>
		break;
    1c10:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    1c12:	4937      	ldr	r1, [pc, #220]	; (1cf0 <print_palette(unsigned char)+0x2c4>)
    1c14:	481b      	ldr	r0, [pc, #108]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c16:	f7ff f85d 	bl	cd4 <Print::println(char const*)>
		break;
    1c1a:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    1c1c:	4935      	ldr	r1, [pc, #212]	; (1cf4 <print_palette(unsigned char)+0x2c8>)
    1c1e:	4819      	ldr	r0, [pc, #100]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c20:	f7ff f858 	bl	cd4 <Print::println(char const*)>
		break;
    1c24:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    1c26:	4934      	ldr	r1, [pc, #208]	; (1cf8 <print_palette(unsigned char)+0x2cc>)
    1c28:	4816      	ldr	r0, [pc, #88]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c2a:	f7ff f853 	bl	cd4 <Print::println(char const*)>
		break;
    1c2e:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    1c30:	4932      	ldr	r1, [pc, #200]	; (1cfc <print_palette(unsigned char)+0x2d0>)
    1c32:	4814      	ldr	r0, [pc, #80]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c34:	f7ff f84e 	bl	cd4 <Print::println(char const*)>
		break;
    1c38:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    1c3a:	4931      	ldr	r1, [pc, #196]	; (1d00 <print_palette(unsigned char)+0x2d4>)
    1c3c:	4811      	ldr	r0, [pc, #68]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c3e:	f7ff f849 	bl	cd4 <Print::println(char const*)>
		break;
    1c42:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    1c44:	492f      	ldr	r1, [pc, #188]	; (1d04 <print_palette(unsigned char)+0x2d8>)
    1c46:	480f      	ldr	r0, [pc, #60]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c48:	f7ff f844 	bl	cd4 <Print::println(char const*)>
		break;
    1c4c:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    1c4e:	492e      	ldr	r1, [pc, #184]	; (1d08 <print_palette(unsigned char)+0x2dc>)
    1c50:	480c      	ldr	r0, [pc, #48]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c52:	f7ff f83f 	bl	cd4 <Print::println(char const*)>
		break;
    1c56:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    1c58:	492c      	ldr	r1, [pc, #176]	; (1d0c <print_palette(unsigned char)+0x2e0>)
    1c5a:	480a      	ldr	r0, [pc, #40]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c5c:	f7ff f83a 	bl	cd4 <Print::println(char const*)>
		break;
    1c60:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    1c62:	492b      	ldr	r1, [pc, #172]	; (1d10 <print_palette(unsigned char)+0x2e4>)
    1c64:	4807      	ldr	r0, [pc, #28]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c66:	f7ff f835 	bl	cd4 <Print::println(char const*)>
		break;
    1c6a:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    1c6c:	4929      	ldr	r1, [pc, #164]	; (1d14 <print_palette(unsigned char)+0x2e8>)
    1c6e:	4805      	ldr	r0, [pc, #20]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c70:	f7ff f830 	bl	cd4 <Print::println(char const*)>
		break;
    1c74:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    1c76:	4928      	ldr	r1, [pc, #160]	; (1d18 <print_palette(unsigned char)+0x2ec>)
    1c78:	4802      	ldr	r0, [pc, #8]	; (1c84 <print_palette(unsigned char)+0x258>)
    1c7a:	f7ff f82b 	bl	cd4 <Print::println(char const*)>
		break;
    1c7e:	bd10      	pop	{r4, pc}
    1c80:	000089b4 	.word	0x000089b4
    1c84:	1fff873c 	.word	0x1fff873c
    1c88:	000089b8 	.word	0x000089b8
    1c8c:	00008f4c 	.word	0x00008f4c
    1c90:	00008f40 	.word	0x00008f40
    1c94:	00008f30 	.word	0x00008f30
    1c98:	00008f20 	.word	0x00008f20
    1c9c:	00008f0c 	.word	0x00008f0c
    1ca0:	00008ef4 	.word	0x00008ef4
    1ca4:	00008edc 	.word	0x00008edc
    1ca8:	00008ecc 	.word	0x00008ecc
    1cac:	00008eb4 	.word	0x00008eb4
    1cb0:	00008ea8 	.word	0x00008ea8
    1cb4:	00008e9c 	.word	0x00008e9c
    1cb8:	00008e84 	.word	0x00008e84
    1cbc:	00008e78 	.word	0x00008e78
    1cc0:	00008e6c 	.word	0x00008e6c
    1cc4:	00008e60 	.word	0x00008e60
    1cc8:	00008e54 	.word	0x00008e54
    1ccc:	00008e44 	.word	0x00008e44
    1cd0:	00008e38 	.word	0x00008e38
    1cd4:	00008e24 	.word	0x00008e24
    1cd8:	00008e18 	.word	0x00008e18
    1cdc:	00008e08 	.word	0x00008e08
    1ce0:	00008dfc 	.word	0x00008dfc
    1ce4:	00008df0 	.word	0x00008df0
    1ce8:	00008de8 	.word	0x00008de8
    1cec:	00008dd4 	.word	0x00008dd4
    1cf0:	00008dc4 	.word	0x00008dc4
    1cf4:	00008db0 	.word	0x00008db0
    1cf8:	00008da4 	.word	0x00008da4
    1cfc:	00008d98 	.word	0x00008d98
    1d00:	00008d8c 	.word	0x00008d8c
    1d04:	00008d7c 	.word	0x00008d7c
    1d08:	00008d68 	.word	0x00008d68
    1d0c:	00008d5c 	.word	0x00008d5c
    1d10:	00008d4c 	.word	0x00008d4c
    1d14:	00008d40 	.word	0x00008d40
    1d18:	00008d30 	.word	0x00008d30
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    1d1c:	49ba      	ldr	r1, [pc, #744]	; (2008 <print_palette(unsigned char)+0x5dc>)
    1d1e:	48bb      	ldr	r0, [pc, #748]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d20:	f7fe ffd8 	bl	cd4 <Print::println(char const*)>
		break;
    1d24:	bd10      	pop	{r4, pc}
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    1d26:	49ba      	ldr	r1, [pc, #744]	; (2010 <print_palette(unsigned char)+0x5e4>)
    1d28:	48b8      	ldr	r0, [pc, #736]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d2a:	f7fe ffd3 	bl	cd4 <Print::println(char const*)>
		break;
    1d2e:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    1d30:	49b8      	ldr	r1, [pc, #736]	; (2014 <print_palette(unsigned char)+0x5e8>)
    1d32:	48b6      	ldr	r0, [pc, #728]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d34:	f7fe ffce 	bl	cd4 <Print::println(char const*)>
		break;
    1d38:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1d3a:	49b7      	ldr	r1, [pc, #732]	; (2018 <print_palette(unsigned char)+0x5ec>)
    1d3c:	48b3      	ldr	r0, [pc, #716]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d3e:	f7fe ffc9 	bl	cd4 <Print::println(char const*)>
		break;
    1d42:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    1d44:	49b5      	ldr	r1, [pc, #724]	; (201c <print_palette(unsigned char)+0x5f0>)
    1d46:	48b1      	ldr	r0, [pc, #708]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d48:	f7fe ffc4 	bl	cd4 <Print::println(char const*)>
		break;
    1d4c:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    1d4e:	49b4      	ldr	r1, [pc, #720]	; (2020 <print_palette(unsigned char)+0x5f4>)
    1d50:	48ae      	ldr	r0, [pc, #696]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d52:	f7fe ffbf 	bl	cd4 <Print::println(char const*)>
		break;
    1d56:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    1d58:	49b2      	ldr	r1, [pc, #712]	; (2024 <print_palette(unsigned char)+0x5f8>)
    1d5a:	48ac      	ldr	r0, [pc, #688]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d5c:	f7fe ffba 	bl	cd4 <Print::println(char const*)>
		break;
    1d60:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    1d62:	49b1      	ldr	r1, [pc, #708]	; (2028 <print_palette(unsigned char)+0x5fc>)
    1d64:	48a9      	ldr	r0, [pc, #676]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d66:	f7fe ffb5 	bl	cd4 <Print::println(char const*)>
		break;
    1d6a:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    1d6c:	49af      	ldr	r1, [pc, #700]	; (202c <print_palette(unsigned char)+0x600>)
    1d6e:	48a7      	ldr	r0, [pc, #668]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d70:	f7fe ffb0 	bl	cd4 <Print::println(char const*)>
		break;
    1d74:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    1d76:	49ae      	ldr	r1, [pc, #696]	; (2030 <print_palette(unsigned char)+0x604>)
    1d78:	48a4      	ldr	r0, [pc, #656]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d7a:	f7fe ffab 	bl	cd4 <Print::println(char const*)>
		break;
    1d7e:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    1d80:	49ac      	ldr	r1, [pc, #688]	; (2034 <print_palette(unsigned char)+0x608>)
    1d82:	48a2      	ldr	r0, [pc, #648]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d84:	f7fe ffa6 	bl	cd4 <Print::println(char const*)>
		break;
    1d88:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    1d8a:	49ab      	ldr	r1, [pc, #684]	; (2038 <print_palette(unsigned char)+0x60c>)
    1d8c:	489f      	ldr	r0, [pc, #636]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d8e:	f7fe ffa1 	bl	cd4 <Print::println(char const*)>
		break;
    1d92:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    1d94:	49a9      	ldr	r1, [pc, #676]	; (203c <print_palette(unsigned char)+0x610>)
    1d96:	489d      	ldr	r0, [pc, #628]	; (200c <print_palette(unsigned char)+0x5e0>)
    1d98:	f7fe ff9c 	bl	cd4 <Print::println(char const*)>
		break;
    1d9c:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    1d9e:	49a8      	ldr	r1, [pc, #672]	; (2040 <print_palette(unsigned char)+0x614>)
    1da0:	489a      	ldr	r0, [pc, #616]	; (200c <print_palette(unsigned char)+0x5e0>)
    1da2:	f7fe ff97 	bl	cd4 <Print::println(char const*)>
		break;
    1da6:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    1da8:	49a6      	ldr	r1, [pc, #664]	; (2044 <print_palette(unsigned char)+0x618>)
    1daa:	4898      	ldr	r0, [pc, #608]	; (200c <print_palette(unsigned char)+0x5e0>)
    1dac:	f7fe ff92 	bl	cd4 <Print::println(char const*)>
		break;
    1db0:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    1db2:	49a5      	ldr	r1, [pc, #660]	; (2048 <print_palette(unsigned char)+0x61c>)
    1db4:	4895      	ldr	r0, [pc, #596]	; (200c <print_palette(unsigned char)+0x5e0>)
    1db6:	f7fe ff8d 	bl	cd4 <Print::println(char const*)>
		break;
    1dba:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    1dbc:	49a3      	ldr	r1, [pc, #652]	; (204c <print_palette(unsigned char)+0x620>)
    1dbe:	4893      	ldr	r0, [pc, #588]	; (200c <print_palette(unsigned char)+0x5e0>)
    1dc0:	f7fe ff88 	bl	cd4 <Print::println(char const*)>
		break;
    1dc4:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    1dc6:	49a2      	ldr	r1, [pc, #648]	; (2050 <print_palette(unsigned char)+0x624>)
    1dc8:	4890      	ldr	r0, [pc, #576]	; (200c <print_palette(unsigned char)+0x5e0>)
    1dca:	f7fe ff83 	bl	cd4 <Print::println(char const*)>
		break;
    1dce:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    1dd0:	49a0      	ldr	r1, [pc, #640]	; (2054 <print_palette(unsigned char)+0x628>)
    1dd2:	488e      	ldr	r0, [pc, #568]	; (200c <print_palette(unsigned char)+0x5e0>)
    1dd4:	f7fe ff7e 	bl	cd4 <Print::println(char const*)>
		break;
    1dd8:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    1dda:	499f      	ldr	r1, [pc, #636]	; (2058 <print_palette(unsigned char)+0x62c>)
    1ddc:	488b      	ldr	r0, [pc, #556]	; (200c <print_palette(unsigned char)+0x5e0>)
    1dde:	f7fe ff79 	bl	cd4 <Print::println(char const*)>
		break;
    1de2:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    1de4:	499d      	ldr	r1, [pc, #628]	; (205c <print_palette(unsigned char)+0x630>)
    1de6:	4889      	ldr	r0, [pc, #548]	; (200c <print_palette(unsigned char)+0x5e0>)
    1de8:	f7fe ff74 	bl	cd4 <Print::println(char const*)>
		break;
    1dec:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    1dee:	499c      	ldr	r1, [pc, #624]	; (2060 <print_palette(unsigned char)+0x634>)
    1df0:	4886      	ldr	r0, [pc, #536]	; (200c <print_palette(unsigned char)+0x5e0>)
    1df2:	f7fe ff6f 	bl	cd4 <Print::println(char const*)>
		break;
    1df6:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    1df8:	499a      	ldr	r1, [pc, #616]	; (2064 <print_palette(unsigned char)+0x638>)
    1dfa:	4884      	ldr	r0, [pc, #528]	; (200c <print_palette(unsigned char)+0x5e0>)
    1dfc:	f7fe ff6a 	bl	cd4 <Print::println(char const*)>
		break;
    1e00:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    1e02:	4999      	ldr	r1, [pc, #612]	; (2068 <print_palette(unsigned char)+0x63c>)
    1e04:	4881      	ldr	r0, [pc, #516]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e06:	f7fe ff65 	bl	cd4 <Print::println(char const*)>
		break;
    1e0a:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    1e0c:	4997      	ldr	r1, [pc, #604]	; (206c <print_palette(unsigned char)+0x640>)
    1e0e:	487f      	ldr	r0, [pc, #508]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e10:	f7fe ff60 	bl	cd4 <Print::println(char const*)>
		break;
    1e14:	bd10      	pop	{r4, pc}
    1e16:	210a      	movs	r1, #10
    1e18:	4895      	ldr	r0, [pc, #596]	; (2070 <print_palette(unsigned char)+0x644>)
    1e1a:	f004 ff05 	bl	6c28 <usb_serial_write>
    1e1e:	487b      	ldr	r0, [pc, #492]	; (200c <print_palette(unsigned char)+0x5e0>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    1e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e24:	f005 b904 	b.w	7030 <Print::println()>
    1e28:	210a      	movs	r1, #10
    1e2a:	4892      	ldr	r0, [pc, #584]	; (2074 <print_palette(unsigned char)+0x648>)
    1e2c:	f004 fefc 	bl	6c28 <usb_serial_write>
    1e30:	4876      	ldr	r0, [pc, #472]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e36:	f005 b8fb 	b.w	7030 <Print::println()>
    1e3a:	210a      	movs	r1, #10
    1e3c:	488e      	ldr	r0, [pc, #568]	; (2078 <print_palette(unsigned char)+0x64c>)
    1e3e:	f004 fef3 	bl	6c28 <usb_serial_write>
    1e42:	4872      	ldr	r0, [pc, #456]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e48:	f005 b8f2 	b.w	7030 <Print::println()>
    1e4c:	210a      	movs	r1, #10
    1e4e:	488b      	ldr	r0, [pc, #556]	; (207c <print_palette(unsigned char)+0x650>)
    1e50:	f004 feea 	bl	6c28 <usb_serial_write>
    1e54:	486d      	ldr	r0, [pc, #436]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e5a:	f005 b8e9 	b.w	7030 <Print::println()>
    1e5e:	210e      	movs	r1, #14
    1e60:	4887      	ldr	r0, [pc, #540]	; (2080 <print_palette(unsigned char)+0x654>)
    1e62:	f004 fee1 	bl	6c28 <usb_serial_write>
    1e66:	4869      	ldr	r0, [pc, #420]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e6c:	f005 b8e0 	b.w	7030 <Print::println()>
    1e70:	2113      	movs	r1, #19
    1e72:	4884      	ldr	r0, [pc, #528]	; (2084 <print_palette(unsigned char)+0x658>)
    1e74:	f004 fed8 	bl	6c28 <usb_serial_write>
    1e78:	4864      	ldr	r0, [pc, #400]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e7e:	f005 b8d7 	b.w	7030 <Print::println()>
    1e82:	211b      	movs	r1, #27
    1e84:	4880      	ldr	r0, [pc, #512]	; (2088 <print_palette(unsigned char)+0x65c>)
    1e86:	f004 fecf 	bl	6c28 <usb_serial_write>
    1e8a:	4860      	ldr	r0, [pc, #384]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e90:	f005 b8ce 	b.w	7030 <Print::println()>
    1e94:	2114      	movs	r1, #20
    1e96:	487d      	ldr	r0, [pc, #500]	; (208c <print_palette(unsigned char)+0x660>)
    1e98:	f004 fec6 	bl	6c28 <usb_serial_write>
    1e9c:	485b      	ldr	r0, [pc, #364]	; (200c <print_palette(unsigned char)+0x5e0>)
    1e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ea2:	f005 b8c5 	b.w	7030 <Print::println()>
    1ea6:	211b      	movs	r1, #27
    1ea8:	4879      	ldr	r0, [pc, #484]	; (2090 <print_palette(unsigned char)+0x664>)
    1eaa:	f004 febd 	bl	6c28 <usb_serial_write>
    1eae:	4857      	ldr	r0, [pc, #348]	; (200c <print_palette(unsigned char)+0x5e0>)
    1eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1eb4:	f005 b8bc 	b.w	7030 <Print::println()>
    1eb8:	210f      	movs	r1, #15
    1eba:	4876      	ldr	r0, [pc, #472]	; (2094 <print_palette(unsigned char)+0x668>)
    1ebc:	f004 feb4 	bl	6c28 <usb_serial_write>
    1ec0:	4852      	ldr	r0, [pc, #328]	; (200c <print_palette(unsigned char)+0x5e0>)
    1ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ec6:	f005 b8b3 	b.w	7030 <Print::println()>
    1eca:	210e      	movs	r1, #14
    1ecc:	4872      	ldr	r0, [pc, #456]	; (2098 <print_palette(unsigned char)+0x66c>)
    1ece:	f004 feab 	bl	6c28 <usb_serial_write>
    1ed2:	484e      	ldr	r0, [pc, #312]	; (200c <print_palette(unsigned char)+0x5e0>)
    1ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ed8:	f005 b8aa 	b.w	7030 <Print::println()>
    1edc:	2112      	movs	r1, #18
    1ede:	486f      	ldr	r0, [pc, #444]	; (209c <print_palette(unsigned char)+0x670>)
    1ee0:	f004 fea2 	bl	6c28 <usb_serial_write>
    1ee4:	4849      	ldr	r0, [pc, #292]	; (200c <print_palette(unsigned char)+0x5e0>)
    1ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1eea:	f005 b8a1 	b.w	7030 <Print::println()>
    1eee:	210c      	movs	r1, #12
    1ef0:	486b      	ldr	r0, [pc, #428]	; (20a0 <print_palette(unsigned char)+0x674>)
    1ef2:	f004 fe99 	bl	6c28 <usb_serial_write>
    1ef6:	4845      	ldr	r0, [pc, #276]	; (200c <print_palette(unsigned char)+0x5e0>)
    1ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1efc:	f005 b898 	b.w	7030 <Print::println()>
    1f00:	2107      	movs	r1, #7
    1f02:	4868      	ldr	r0, [pc, #416]	; (20a4 <print_palette(unsigned char)+0x678>)
    1f04:	f004 fe90 	bl	6c28 <usb_serial_write>
    1f08:	4840      	ldr	r0, [pc, #256]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f0e:	f005 b88f 	b.w	7030 <Print::println()>
    1f12:	2107      	movs	r1, #7
    1f14:	4864      	ldr	r0, [pc, #400]	; (20a8 <print_palette(unsigned char)+0x67c>)
    1f16:	f004 fe87 	bl	6c28 <usb_serial_write>
    1f1a:	483c      	ldr	r0, [pc, #240]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f20:	f005 b886 	b.w	7030 <Print::println()>
    1f24:	2117      	movs	r1, #23
    1f26:	4861      	ldr	r0, [pc, #388]	; (20ac <print_palette(unsigned char)+0x680>)
    1f28:	f004 fe7e 	bl	6c28 <usb_serial_write>
    1f2c:	4837      	ldr	r0, [pc, #220]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f32:	f005 b87d 	b.w	7030 <Print::println()>
    1f36:	210c      	movs	r1, #12
    1f38:	485d      	ldr	r0, [pc, #372]	; (20b0 <print_palette(unsigned char)+0x684>)
    1f3a:	f004 fe75 	bl	6c28 <usb_serial_write>
    1f3e:	4833      	ldr	r0, [pc, #204]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f44:	f005 b874 	b.w	7030 <Print::println()>
    1f48:	2107      	movs	r1, #7
    1f4a:	485a      	ldr	r0, [pc, #360]	; (20b4 <print_palette(unsigned char)+0x688>)
    1f4c:	f004 fe6c 	bl	6c28 <usb_serial_write>
    1f50:	482e      	ldr	r0, [pc, #184]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f56:	f005 b86b 	b.w	7030 <Print::println()>
    1f5a:	210d      	movs	r1, #13
    1f5c:	4856      	ldr	r0, [pc, #344]	; (20b8 <print_palette(unsigned char)+0x68c>)
    1f5e:	f004 fe63 	bl	6c28 <usb_serial_write>
    1f62:	482a      	ldr	r0, [pc, #168]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f68:	f005 b862 	b.w	7030 <Print::println()>
    1f6c:	210c      	movs	r1, #12
    1f6e:	4853      	ldr	r0, [pc, #332]	; (20bc <print_palette(unsigned char)+0x690>)
    1f70:	f004 fe5a 	bl	6c28 <usb_serial_write>
    1f74:	4825      	ldr	r0, [pc, #148]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f7a:	f005 b859 	b.w	7030 <Print::println()>
    1f7e:	210c      	movs	r1, #12
    1f80:	484f      	ldr	r0, [pc, #316]	; (20c0 <print_palette(unsigned char)+0x694>)
    1f82:	f004 fe51 	bl	6c28 <usb_serial_write>
    1f86:	4821      	ldr	r0, [pc, #132]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f8c:	f005 b850 	b.w	7030 <Print::println()>
    1f90:	2111      	movs	r1, #17
    1f92:	484c      	ldr	r0, [pc, #304]	; (20c4 <print_palette(unsigned char)+0x698>)
    1f94:	f004 fe48 	bl	6c28 <usb_serial_write>
    1f98:	481c      	ldr	r0, [pc, #112]	; (200c <print_palette(unsigned char)+0x5e0>)
    1f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f9e:	f005 b847 	b.w	7030 <Print::println()>
    1fa2:	2112      	movs	r1, #18
    1fa4:	4848      	ldr	r0, [pc, #288]	; (20c8 <print_palette(unsigned char)+0x69c>)
    1fa6:	f004 fe3f 	bl	6c28 <usb_serial_write>
    1faa:	4818      	ldr	r0, [pc, #96]	; (200c <print_palette(unsigned char)+0x5e0>)
    1fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fb0:	f005 b83e 	b.w	7030 <Print::println()>
    1fb4:	2112      	movs	r1, #18
    1fb6:	4845      	ldr	r0, [pc, #276]	; (20cc <print_palette(unsigned char)+0x6a0>)
    1fb8:	f004 fe36 	bl	6c28 <usb_serial_write>
    1fbc:	4813      	ldr	r0, [pc, #76]	; (200c <print_palette(unsigned char)+0x5e0>)
    1fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fc2:	f005 b835 	b.w	7030 <Print::println()>
    1fc6:	2116      	movs	r1, #22
    1fc8:	4841      	ldr	r0, [pc, #260]	; (20d0 <print_palette(unsigned char)+0x6a4>)
    1fca:	f004 fe2d 	bl	6c28 <usb_serial_write>
    1fce:	480f      	ldr	r0, [pc, #60]	; (200c <print_palette(unsigned char)+0x5e0>)
    1fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fd4:	f005 b82c 	b.w	7030 <Print::println()>
    1fd8:	2116      	movs	r1, #22
    1fda:	483e      	ldr	r0, [pc, #248]	; (20d4 <print_palette(unsigned char)+0x6a8>)
    1fdc:	f004 fe24 	bl	6c28 <usb_serial_write>
    1fe0:	480a      	ldr	r0, [pc, #40]	; (200c <print_palette(unsigned char)+0x5e0>)
    1fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fe6:	f005 b823 	b.w	7030 <Print::println()>
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    1fea:	493b      	ldr	r1, [pc, #236]	; (20d8 <print_palette(unsigned char)+0x6ac>)
    1fec:	4807      	ldr	r0, [pc, #28]	; (200c <print_palette(unsigned char)+0x5e0>)
    1fee:	f7fe fe71 	bl	cd4 <Print::println(char const*)>
		break;
    1ff2:	bd10      	pop	{r4, pc}
    1ff4:	2113      	movs	r1, #19
    1ff6:	4839      	ldr	r0, [pc, #228]	; (20dc <print_palette(unsigned char)+0x6b0>)
    1ff8:	f004 fe16 	bl	6c28 <usb_serial_write>
    1ffc:	4803      	ldr	r0, [pc, #12]	; (200c <print_palette(unsigned char)+0x5e0>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    1ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2002:	f005 b815 	b.w	7030 <Print::println()>
    2006:	bf00      	nop
    2008:	00008d24 	.word	0x00008d24
    200c:	1fff873c 	.word	0x1fff873c
    2010:	00008d10 	.word	0x00008d10
    2014:	00008d00 	.word	0x00008d00
    2018:	00008cf4 	.word	0x00008cf4
    201c:	00008ce8 	.word	0x00008ce8
    2020:	00008cdc 	.word	0x00008cdc
    2024:	00008cc8 	.word	0x00008cc8
    2028:	00008cbc 	.word	0x00008cbc
    202c:	00008cb0 	.word	0x00008cb0
    2030:	00008ca4 	.word	0x00008ca4
    2034:	00008c8c 	.word	0x00008c8c
    2038:	00008c84 	.word	0x00008c84
    203c:	00008d1c 	.word	0x00008d1c
    2040:	00008c78 	.word	0x00008c78
    2044:	00008c6c 	.word	0x00008c6c
    2048:	00008c58 	.word	0x00008c58
    204c:	00008c44 	.word	0x00008c44
    2050:	00008c34 	.word	0x00008c34
    2054:	00008c28 	.word	0x00008c28
    2058:	00008c1c 	.word	0x00008c1c
    205c:	00008c10 	.word	0x00008c10
    2060:	00008c04 	.word	0x00008c04
    2064:	00008bf8 	.word	0x00008bf8
    2068:	00008bec 	.word	0x00008bec
    206c:	00008be0 	.word	0x00008be0
    2070:	00008bd4 	.word	0x00008bd4
    2074:	00008bc8 	.word	0x00008bc8
    2078:	00008bbc 	.word	0x00008bbc
    207c:	00008bb0 	.word	0x00008bb0
    2080:	00008ba0 	.word	0x00008ba0
    2084:	00008b8c 	.word	0x00008b8c
    2088:	00008b70 	.word	0x00008b70
    208c:	00008b58 	.word	0x00008b58
    2090:	00008b3c 	.word	0x00008b3c
    2094:	00008b2c 	.word	0x00008b2c
    2098:	00008b1c 	.word	0x00008b1c
    209c:	00008b08 	.word	0x00008b08
    20a0:	00008af8 	.word	0x00008af8
    20a4:	00008af0 	.word	0x00008af0
    20a8:	00008ae8 	.word	0x00008ae8
    20ac:	00008ad0 	.word	0x00008ad0
    20b0:	00008ac0 	.word	0x00008ac0
    20b4:	00008ab8 	.word	0x00008ab8
    20b8:	00008aa8 	.word	0x00008aa8
    20bc:	00008a98 	.word	0x00008a98
    20c0:	00008a88 	.word	0x00008a88
    20c4:	00008a74 	.word	0x00008a74
    20c8:	00008a60 	.word	0x00008a60
    20cc:	00008a4c 	.word	0x00008a4c
    20d0:	00008a34 	.word	0x00008a34
    20d4:	00008a1c 	.word	0x00008a1c
    20d8:	00008a0c 	.word	0x00008a0c
    20dc:	000089f8 	.word	0x000089f8
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    20e0:	490e      	ldr	r1, [pc, #56]	; (211c <print_palette(unsigned char)+0x6f0>)
    20e2:	480f      	ldr	r0, [pc, #60]	; (2120 <print_palette(unsigned char)+0x6f4>)
    20e4:	f7fe fdf6 	bl	cd4 <Print::println(char const*)>
		break;
    20e8:	bd10      	pop	{r4, pc}
    20ea:	210e      	movs	r1, #14
    20ec:	480d      	ldr	r0, [pc, #52]	; (2124 <print_palette(unsigned char)+0x6f8>)
    20ee:	f004 fd9b 	bl	6c28 <usb_serial_write>
    20f2:	480b      	ldr	r0, [pc, #44]	; (2120 <print_palette(unsigned char)+0x6f4>)

	default:
		Serial.println("Not a gradient palette");
		break;
	}
    20f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20f8:	f004 bf9a 	b.w	7030 <Print::println()>
	case 0:
		Serial.println("ib_jul01_gp");
		break;

	case 1:
		Serial.println("rgi_15_gp");
    20fc:	490a      	ldr	r1, [pc, #40]	; (2128 <print_palette(unsigned char)+0x6fc>)
    20fe:	4808      	ldr	r0, [pc, #32]	; (2120 <print_palette(unsigned char)+0x6f4>)
    2100:	f7fe fde8 	bl	cd4 <Print::println(char const*)>
		break;
    2104:	bd10      	pop	{r4, pc}
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    2106:	4909      	ldr	r1, [pc, #36]	; (212c <print_palette(unsigned char)+0x700>)
    2108:	4805      	ldr	r0, [pc, #20]	; (2120 <print_palette(unsigned char)+0x6f4>)
    210a:	f7fe fde3 	bl	cd4 <Print::println(char const*)>
		break;
    210e:	bd10      	pop	{r4, pc}
	case 92:
		Serial.println("blade_runner_2049_gp");
		break;

	default:
		Serial.println("Not a gradient palette");
    2110:	4907      	ldr	r1, [pc, #28]	; (2130 <print_palette(unsigned char)+0x704>)
    2112:	4803      	ldr	r0, [pc, #12]	; (2120 <print_palette(unsigned char)+0x6f4>)
    2114:	f7fe fdde 	bl	cd4 <Print::println(char const*)>
    2118:	bd10      	pop	{r4, pc}
    211a:	bf00      	nop
    211c:	000089e4 	.word	0x000089e4
    2120:	1fff873c 	.word	0x1fff873c
    2124:	000089d4 	.word	0x000089d4
    2128:	000089c8 	.word	0x000089c8
    212c:	000089bc 	.word	0x000089bc
    2130:	00008f64 	.word	0x00008f64

00002134 <change_palette(LEDStruct&) [clone .part.9]>:
}

// Change palette
void print_palette(uint8_t pn); // Forward declaration

void change_palette(LEDStruct& leds) {
    2134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2138:	b08d      	sub	sp, #52	; 0x34
    213a:	2120      	movs	r1, #32
    213c:	4605      	mov	r5, r0
    213e:	9009      	str	r0, [sp, #36]	; 0x24
    2140:	483f      	ldr	r0, [pc, #252]	; (2240 <change_palette(LEDStruct&) [clone .part.9]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    2142:	4c40      	ldr	r4, [pc, #256]	; (2244 <change_palette(LEDStruct&) [clone .part.9]+0x110>)
    2144:	f004 fd70 	bl	6c28 <usb_serial_write>
    2148:	483f      	ldr	r0, [pc, #252]	; (2248 <change_palette(LEDStruct&) [clone .part.9]+0x114>)
    214a:	f004 ff71 	bl	7030 <Print::println()>
    214e:	483f      	ldr	r0, [pc, #252]	; (224c <change_palette(LEDStruct&) [clone .part.9]+0x118>)
void print_palette(uint8_t pn); // Forward declaration

void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    2150:	4a3f      	ldr	r2, [pc, #252]	; (2250 <change_palette(LEDStruct&) [clone .part.9]+0x11c>)
    2152:	8803      	ldrh	r3, [r0, #0]
    2154:	7811      	ldrb	r1, [r2, #0]
    2156:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    215a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    215e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2162:	3319      	adds	r3, #25
    2164:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2166:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    216a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    216c:	fb12 f201 	smulbb	r2, r2, r1
    2170:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2172:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    2174:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
void print_palette(uint8_t pn); // Forward declaration

void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    2178:	f885 2227 	strb.w	r2, [r5, #551]	; 0x227
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    217c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    217e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2182:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2184:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2186:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2188:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    218a:	d1f8      	bne.n	217e <change_palette(LEDStruct&) [clone .part.9]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    218c:	f8d8 3000 	ldr.w	r3, [r8]
    2190:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2192:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    2194:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2198:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    219c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    21a0:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    21a4:	f04f 33ff 	mov.w	r3, #4294967295
    21a8:	9207      	str	r2, [sp, #28]
    21aa:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    21ac:	2400      	movs	r4, #0
    21ae:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    21b0:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    21b4:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    21b6:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    21ba:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    21be:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    21c2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    21c4:	b2f9      	uxtb	r1, r7
    21c6:	f3c5 6507 	ubfx	r5, r5, #24, #8
    21ca:	9104      	str	r1, [sp, #16]
    21cc:	b2e9      	uxtb	r1, r5
    21ce:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    21d0:	fa5f f18c 	uxtb.w	r1, ip
    21d4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    21d6:	9908      	ldr	r1, [sp, #32]
    21d8:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    21da:	aa0b      	add	r2, sp, #44	; 0x2c
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    21dc:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    21e0:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    21e4:	d80c      	bhi.n	2200 <change_palette(LEDStruct&) [clone .part.9]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    21e6:	9906      	ldr	r1, [sp, #24]
    21e8:	458c      	cmp	ip, r1
    21ea:	dc07      	bgt.n	21fc <change_palette(LEDStruct&) [clone .part.9]+0xc8>
    21ec:	290f      	cmp	r1, #15
    21ee:	d005      	beq.n	21fc <change_palette(LEDStruct&) [clone .part.9]+0xc8>
                    istart8 = lastSlotUsed + 1;
    21f0:	3101      	adds	r1, #1
    21f2:	b2c9      	uxtb	r1, r1
    21f4:	428b      	cmp	r3, r1
    21f6:	9103      	str	r1, [sp, #12]
    21f8:	bf38      	it	cc
    21fa:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    21fc:	b259      	sxtb	r1, r3
    21fe:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2200:	a90a      	add	r1, sp, #40	; 0x28
    2202:	9100      	str	r1, [sp, #0]
    2204:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2206:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
        g = rhs.g;
    220a:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
        b = rhs.b;
    220e:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2212:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    2216:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    221a:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    221e:	f002 fd5d 	bl	4cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    2222:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2224:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    2228:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    222c:	46ca      	mov	sl, r9
    222e:	d1bf      	bne.n	21b0 <change_palette(LEDStruct&) [clone .part.9]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2230:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2232:	f893 0227 	ldrb.w	r0, [r3, #551]	; 0x227
    2236:	f7ff fbf9 	bl	1a2c <print_palette(unsigned char)>
	}
}
    223a:	b00d      	add	sp, #52	; 0x34
    223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2240:	00008f7c 	.word	0x00008f7c
    2244:	000084e0 	.word	0x000084e0
    2248:	1fff873c 	.word	0x1fff873c
    224c:	1fff8734 	.word	0x1fff8734
    2250:	1fff8732 	.word	0x1fff8732

00002254 <juggle(LEDStruct&)>:
	*/
}



void juggle(LEDStruct& leds) {
    2254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2258:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	*/
}



void juggle(LEDStruct& leds) {
    225c:	b091      	sub	sp, #68	; 0x44
    225e:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2260:	2b00      	cmp	r3, #0
    2262:	f000 80f3 	beq.w	244c <juggle(LEDStruct&)+0x1f8>
    2266:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    226a:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    226e:	b113      	cbz	r3, 2276 <juggle(LEDStruct&)+0x22>
    2270:	2300      	movs	r3, #0
    2272:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    2276:	2196      	movs	r1, #150	; 0x96
    2278:	4620      	mov	r0, r4
    227a:	f002 fdc1 	bl	4e00 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    227e:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    2282:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2286:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    228a:	2900      	cmp	r1, #0
    228c:	f040 8178 	bne.w	2580 <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    2290:	2f00      	cmp	r7, #0
    2292:	f000 82ae 	beq.w	27f2 <juggle(LEDStruct&)+0x59e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2296:	2b00      	cmp	r3, #0
    2298:	f000 837e 	beq.w	2998 <juggle(LEDStruct&)+0x744>
    229c:	48c4      	ldr	r0, [pc, #784]	; (25b0 <juggle(LEDStruct&)+0x35c>)
    229e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    22a2:	f8df 9314 	ldr.w	r9, [pc, #788]	; 25b8 <juggle(LEDStruct&)+0x364>
    22a6:	f8df 8314 	ldr.w	r8, [pc, #788]	; 25bc <juggle(LEDStruct&)+0x368>
    22aa:	9002      	str	r0, [sp, #8]
    22ac:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    22b0:	460f      	mov	r7, r1
    22b2:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    22b6:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    22ba:	9503      	str	r5, [sp, #12]
    22bc:	e05e      	b.n	237c <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    22be:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    22c2:	443b      	add	r3, r7
    22c4:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22c6:	f8d9 1000 	ldr.w	r1, [r9]
    22ca:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    22cc:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    22ce:	9904      	ldr	r1, [sp, #16]
    22d0:	bf98      	it	ls
    22d2:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    22d4:	f44f 708c 	mov.w	r0, #280	; 0x118
    22d8:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    22dc:	bf98      	it	ls
    22de:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    22e0:	fb03 f301 	mul.w	r3, r3, r1
    22e4:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    22e6:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    22e8:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    22ec:	d503      	bpl.n	22f6 <juggle(LEDStruct&)+0xa2>
    22ee:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    22f2:	3107      	adds	r1, #7
    22f4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    22f6:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22f8:	9d02      	ldr	r5, [sp, #8]
    22fa:	f818 6000 	ldrb.w	r6, [r8, r0]
    22fe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2302:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2306:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    230a:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    230c:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    230e:	bf48      	it	mi
    2310:	4249      	negmi	r1, r1
    2312:	b20e      	sxth	r6, r1
    2314:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2318:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    231c:	9100      	str	r1, [sp, #0]
    231e:	4650      	mov	r0, sl
    2320:	4659      	mov	r1, fp
    2322:	f002 fdcd 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2326:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    232a:	2296      	movs	r2, #150	; 0x96
    232c:	b29b      	uxth	r3, r3
    232e:	fb02 f303 	mul.w	r3, r2, r3
    2332:	0c1b      	lsrs	r3, r3, #16
    2334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2338:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    233a:	5ce2      	ldrb	r2, [r4, r3]
    233c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2340:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2344:	54e2      	strb	r2, [r4, r3]
    2346:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    234a:	784a      	ldrb	r2, [r1, #1]
    234c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2350:	704a      	strb	r2, [r1, #1]
    2352:	788b      	ldrb	r3, [r1, #2]
    2354:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2358:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    235c:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    235e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2362:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2366:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    236a:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    236c:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    236e:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2370:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2372:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2374:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2378:	f240 830e 	bls.w	2998 <juggle(LEDStruct&)+0x744>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    237c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2380:	2900      	cmp	r1, #0
    2382:	d19c      	bne.n	22be <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2384:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2388:	443b      	add	r3, r7
    238a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    238c:	f8d9 1000 	ldr.w	r1, [r9]
    2390:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2392:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2394:	9905      	ldr	r1, [sp, #20]
    2396:	bf98      	it	ls
    2398:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    239a:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    239e:	bf98      	it	ls
    23a0:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    23a2:	fb00 f101 	mul.w	r1, r0, r1
    23a6:	fb03 f301 	mul.w	r3, r3, r1
    23aa:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    23ac:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    23ae:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    23b2:	d503      	bpl.n	23bc <juggle(LEDStruct&)+0x168>
    23b4:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    23b8:	3107      	adds	r1, #7
    23ba:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    23bc:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    23be:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    23c0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    23c4:	f818 6000 	ldrb.w	r6, [r8, r0]
    23c8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    23cc:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    23d0:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    23d2:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    23d4:	bf48      	it	mi
    23d6:	4249      	negmi	r1, r1
    23d8:	b20e      	sxth	r6, r1
    23da:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    23de:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    23e2:	9100      	str	r1, [sp, #0]
    23e4:	4650      	mov	r0, sl
    23e6:	4659      	mov	r1, fp
    23e8:	f002 fd6a 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    23ec:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    23f0:	b29b      	uxth	r3, r3
    23f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    23f6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    23fa:	0c1b      	lsrs	r3, r3, #16
    23fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2400:	18e1      	adds	r1, r4, r3
    2402:	5ce2      	ldrb	r2, [r4, r3]
    2404:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2408:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    240c:	54e2      	strb	r2, [r4, r3]
    240e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2412:	784a      	ldrb	r2, [r1, #1]
    2414:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2418:	704a      	strb	r2, [r1, #1]
    241a:	788b      	ldrb	r3, [r1, #2]
    241c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2420:	fa83 f352 	uqadd8	r3, r3, r2
    2424:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2426:	708b      	strb	r3, [r1, #2]
    2428:	4622      	mov	r2, r4
    242a:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    242c:	7819      	ldrb	r1, [r3, #0]
    242e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2432:	7859      	ldrb	r1, [r3, #1]
    2434:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2438:	7899      	ldrb	r1, [r3, #2]
    243a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    243e:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    2440:	429d      	cmp	r5, r3
    2442:	f1a2 0203 	sub.w	r2, r2, #3
    2446:	d1f1      	bne.n	242c <juggle(LEDStruct&)+0x1d8>
    2448:	9503      	str	r5, [sp, #12]
    244a:	e788      	b.n	235e <juggle(LEDStruct&)+0x10a>
    244c:	4d59      	ldr	r5, [pc, #356]	; (25b4 <juggle(LEDStruct&)+0x360>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    244e:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    2452:	882b      	ldrh	r3, [r5, #0]
    2454:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2458:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    245c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2460:	3119      	adds	r1, #25
    2462:	b289      	uxth	r1, r1
    2464:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    2468:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    246c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2470:	3019      	adds	r0, #25
    2472:	b280      	uxth	r0, r0
    2474:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    2478:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    247c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2480:	3319      	adds	r3, #25
    2482:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2486:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    248a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    248e:	3219      	adds	r2, #25
    2490:	b292      	uxth	r2, r2
    2492:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2496:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    249a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    249e:	3619      	adds	r6, #25
    24a0:	b2b6      	uxth	r6, r6
    24a2:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    24a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    24aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    24ae:	3319      	adds	r3, #25
    24b0:	b29b      	uxth	r3, r3
    24b2:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    24b6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    24ba:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    24be:	f10e 0e19 	add.w	lr, lr, #25
    24c2:	fa1f fe8e 	uxth.w	lr, lr
    24c6:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    24ca:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    24ce:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    24d2:	3719      	adds	r7, #25
    24d4:	b2bf      	uxth	r7, r7
    24d6:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    24da:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    24de:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    24e2:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    24e6:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    24e8:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    24ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    24f0:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    24f4:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    24f8:	b2f2      	uxtb	r2, r6
    24fa:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    24fe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2502:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2506:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    250a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    250e:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2510:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2514:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2518:	ea4f 18ec 	mov.w	r8, ip, asr #7
    251c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    2520:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2524:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2528:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    252c:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2530:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2534:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2538:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    253c:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2540:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    2544:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2548:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    254c:	b2d2      	uxtb	r2, r2



void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    254e:	f3c7 13c0 	ubfx	r3, r7, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2552:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2556:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    255a:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    255c:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    2560:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2564:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2568:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    256c:	802e      	strh	r6, [r5, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    256e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2572:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2576:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    257a:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    257e:	e676      	b.n	226e <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    2580:	2f00      	cmp	r7, #0
    2582:	f000 809c 	beq.w	26be <juggle(LEDStruct&)+0x46a>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2586:	2b00      	cmp	r3, #0
    2588:	f000 8206 	beq.w	2998 <juggle(LEDStruct&)+0x744>
    258c:	4b08      	ldr	r3, [pc, #32]	; (25b0 <juggle(LEDStruct&)+0x35c>)
    258e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2592:	f8df 9024 	ldr.w	r9, [pc, #36]	; 25b8 <juggle(LEDStruct&)+0x364>
    2596:	f8df 8024 	ldr.w	r8, [pc, #36]	; 25bc <juggle(LEDStruct&)+0x368>
    259a:	9302      	str	r3, [sp, #8]
    259c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    25a0:	2700      	movs	r7, #0
    25a2:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    25a6:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    25aa:	9503      	str	r5, [sp, #12]
    25ac:	e06c      	b.n	2688 <juggle(LEDStruct&)+0x434>
    25ae:	bf00      	nop
    25b0:	00007df8 	.word	0x00007df8
    25b4:	1fff8734 	.word	0x1fff8734
    25b8:	1fff94e8 	.word	0x1fff94e8
    25bc:	00008664 	.word	0x00008664
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    25c0:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    25c4:	2b00      	cmp	r3, #0
    25c6:	f000 82ba 	beq.w	2b3e <juggle(LEDStruct&)+0x8ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25ca:	f8d9 3000 	ldr.w	r3, [r9]
    25ce:	9308      	str	r3, [sp, #32]
	return ret;
    25d0:	9b08      	ldr	r3, [sp, #32]
    25d2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    25d6:	f44f 708c 	mov.w	r0, #280	; 0x118
    25da:	fb00 f303 	mul.w	r3, r0, r3
    25de:	0209      	lsls	r1, r1, #8
    25e0:	fb03 f301 	mul.w	r3, r3, r1
    25e4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    25e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    25ec:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    25f0:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    25f2:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    25f4:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    25f8:	d503      	bpl.n	2602 <juggle(LEDStruct&)+0x3ae>
    25fa:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    25fe:	3107      	adds	r1, #7
    2600:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2602:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2604:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2606:	f3c1 0146 	ubfx	r1, r1, #1, #7
    260a:	f818 6000 	ldrb.w	r6, [r8, r0]
    260e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2612:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2616:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2618:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    261a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    261e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2622:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2624:	bf48      	it	mi
    2626:	4276      	negmi	r6, r6
    2628:	4659      	mov	r1, fp
    262a:	4650      	mov	r0, sl
    262c:	b236      	sxth	r6, r6
    262e:	f002 fc47 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2632:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2636:	2296      	movs	r2, #150	; 0x96
    2638:	b29b      	uxth	r3, r3
    263a:	fb02 f303 	mul.w	r3, r2, r3
    263e:	0c1b      	lsrs	r3, r3, #16
    2640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2644:	18e1      	adds	r1, r4, r3
    2646:	5ce2      	ldrb	r2, [r4, r3]
    2648:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    264c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2650:	54e2      	strb	r2, [r4, r3]
    2652:	784a      	ldrb	r2, [r1, #1]
    2654:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2658:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    265c:	704a      	strb	r2, [r1, #1]
    265e:	788b      	ldrb	r3, [r1, #2]
    2660:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2664:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2668:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    266a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    266e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2672:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2676:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2678:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    267a:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    267c:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    267e:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2680:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2684:	f240 8188 	bls.w	2998 <juggle(LEDStruct&)+0x744>
				if (leds.this_dir) {
    2688:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    268c:	2b00      	cmp	r3, #0
    268e:	d197      	bne.n	25c0 <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2690:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2694:	2b00      	cmp	r3, #0
    2696:	f000 8189 	beq.w	29ac <juggle(LEDStruct&)+0x758>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    269a:	f8d9 3000 	ldr.w	r3, [r9]
    269e:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    26a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    26a2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    26a6:	f44f 708c 	mov.w	r0, #280	; 0x118
    26aa:	fb00 f303 	mul.w	r3, r0, r3
    26ae:	0209      	lsls	r1, r1, #8
    26b0:	fb03 f301 	mul.w	r3, r3, r1
    26b4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    26b8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    26bc:	e796      	b.n	25ec <juggle(LEDStruct&)+0x398>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    26be:	2b00      	cmp	r3, #0
    26c0:	f000 816a 	beq.w	2998 <juggle(LEDStruct&)+0x744>
    26c4:	49b6      	ldr	r1, [pc, #728]	; (29a0 <juggle(LEDStruct&)+0x74c>)
    26c6:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    26ca:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 29a4 <juggle(LEDStruct&)+0x750>
    26ce:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 29a8 <juggle(LEDStruct&)+0x754>
    26d2:	9102      	str	r1, [sp, #8]
    26d4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    26d8:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    26dc:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    26e0:	9503      	str	r5, [sp, #12]
    26e2:	e063      	b.n	27ac <juggle(LEDStruct&)+0x558>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    26e4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26e8:	2900      	cmp	r1, #0
    26ea:	f000 828c 	beq.w	2c06 <juggle(LEDStruct&)+0x9b2>
    26ee:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    26f2:	443b      	add	r3, r7
    26f4:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26f6:	f8d9 1000 	ldr.w	r1, [r9]
    26fa:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    26fc:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    26fe:	990c      	ldr	r1, [sp, #48]	; 0x30
    2700:	bf9c      	itt	ls
    2702:	021b      	lslls	r3, r3, #8
    2704:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2706:	fb0a f101 	mul.w	r1, sl, r1
    270a:	fb03 f301 	mul.w	r3, r3, r1
    270e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2712:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2716:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2718:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    271c:	d503      	bpl.n	2726 <juggle(LEDStruct&)+0x4d2>
    271e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2722:	3107      	adds	r1, #7
    2724:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2726:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2728:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    272a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    272e:	f818 6000 	ldrb.w	r6, [r8, r0]
    2732:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2736:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    273a:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    273c:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    273e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2742:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2746:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2748:	bf48      	it	mi
    274a:	4276      	negmi	r6, r6
    274c:	4659      	mov	r1, fp
    274e:	a80b      	add	r0, sp, #44	; 0x2c
    2750:	b236      	sxth	r6, r6
    2752:	f002 fbb5 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2756:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    275a:	2296      	movs	r2, #150	; 0x96
    275c:	b29b      	uxth	r3, r3
    275e:	fb02 f303 	mul.w	r3, r2, r3
    2762:	0c1b      	lsrs	r3, r3, #16
    2764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2768:	18e1      	adds	r1, r4, r3
    276a:	5ce2      	ldrb	r2, [r4, r3]
    276c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2770:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2774:	54e2      	strb	r2, [r4, r3]
    2776:	784a      	ldrb	r2, [r1, #1]
    2778:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    277c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2780:	704a      	strb	r2, [r1, #1]
    2782:	788b      	ldrb	r3, [r1, #2]
    2784:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2788:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    278c:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    278e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2792:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2796:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    279a:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    279c:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    279e:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    27a0:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    27a2:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    27a4:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    27a8:	f240 80f6 	bls.w	2998 <juggle(LEDStruct&)+0x744>
				if (leds.this_dir) {
    27ac:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    27b0:	2900      	cmp	r1, #0
    27b2:	d197      	bne.n	26e4 <juggle(LEDStruct&)+0x490>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    27b4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27b8:	2900      	cmp	r1, #0
    27ba:	f000 815b 	beq.w	2a74 <juggle(LEDStruct&)+0x820>
    27be:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    27c2:	443b      	add	r3, r7
    27c4:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27c6:	f8d9 1000 	ldr.w	r1, [r9]
    27ca:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    27cc:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    27ce:	990e      	ldr	r1, [sp, #56]	; 0x38
    27d0:	bf9c      	itt	ls
    27d2:	021b      	lslls	r3, r3, #8
    27d4:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    27d6:	fb0a f101 	mul.w	r1, sl, r1
    27da:	fb03 f301 	mul.w	r3, r3, r1
    27de:	f3c3 430e 	ubfx	r3, r3, #16, #15
    27e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    27e6:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    27e8:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    27ea:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    27ee:	d59a      	bpl.n	2726 <juggle(LEDStruct&)+0x4d2>
    27f0:	e795      	b.n	271e <juggle(LEDStruct&)+0x4ca>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    27f2:	2b00      	cmp	r3, #0
    27f4:	f000 80d0 	beq.w	2998 <juggle(LEDStruct&)+0x744>
    27f8:	4b69      	ldr	r3, [pc, #420]	; (29a0 <juggle(LEDStruct&)+0x74c>)
    27fa:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    27fe:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 29a4 <juggle(LEDStruct&)+0x750>
    2802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 29a8 <juggle(LEDStruct&)+0x754>
    2806:	9302      	str	r3, [sp, #8]
    2808:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    280c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2810:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2814:	9503      	str	r5, [sp, #12]
    2816:	e05a      	b.n	28ce <juggle(LEDStruct&)+0x67a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2818:	f8d9 3000 	ldr.w	r3, [r9]
    281c:	9306      	str	r3, [sp, #24]
	return ret;
    281e:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2820:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    2824:	f44f 708c 	mov.w	r0, #280	; 0x118
    2828:	fb00 f303 	mul.w	r3, r0, r3
    282c:	0209      	lsls	r1, r1, #8
    282e:	fb03 f301 	mul.w	r3, r3, r1
    2832:	0379      	lsls	r1, r7, #13
    2834:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2838:	b299      	uxth	r1, r3
    283a:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    283c:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2840:	d503      	bpl.n	284a <juggle(LEDStruct&)+0x5f6>
    2842:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2846:	3307      	adds	r3, #7
    2848:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    284a:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    284c:	9d02      	ldr	r5, [sp, #8]
    284e:	f818 6000 	ldrb.w	r6, [r8, r0]
    2852:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2856:	f3c3 0346 	ubfx	r3, r3, #1, #7
    285a:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    285e:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2860:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2862:	bf48      	it	mi
    2864:	425b      	negmi	r3, r3
    2866:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    286a:	b21e      	sxth	r6, r3
    286c:	4650      	mov	r0, sl
    286e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2872:	9100      	str	r1, [sp, #0]
    2874:	4659      	mov	r1, fp
    2876:	f002 fb23 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    287a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    287e:	2296      	movs	r2, #150	; 0x96
    2880:	b29b      	uxth	r3, r3
    2882:	fb02 f303 	mul.w	r3, r2, r3
    2886:	0c1b      	lsrs	r3, r3, #16
    2888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    288c:	18e1      	adds	r1, r4, r3
    288e:	5ce2      	ldrb	r2, [r4, r3]
    2890:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2894:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2898:	54e2      	strb	r2, [r4, r3]
    289a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    289e:	784a      	ldrb	r2, [r1, #1]
    28a0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    28a4:	704a      	strb	r2, [r1, #1]
    28a6:	788b      	ldrb	r3, [r1, #2]
    28a8:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    28ac:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    28b0:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    28b2:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    28b6:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    28ba:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    28be:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    28c0:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    28c2:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    28c4:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    28c6:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    28c8:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    28cc:	d964      	bls.n	2998 <juggle(LEDStruct&)+0x744>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    28ce:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    28d2:	2b00      	cmp	r3, #0
    28d4:	d1a0      	bne.n	2818 <juggle(LEDStruct&)+0x5c4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28d6:	f8d9 3000 	ldr.w	r3, [r9]
    28da:	9307      	str	r3, [sp, #28]
	return ret;
    28dc:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    28de:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    28e2:	f44f 708c 	mov.w	r0, #280	; 0x118
    28e6:	0209      	lsls	r1, r1, #8
    28e8:	fb00 f303 	mul.w	r3, r0, r3
    28ec:	fb03 f301 	mul.w	r3, r3, r1
    28f0:	0379      	lsls	r1, r7, #13
    28f2:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    28f6:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    28f8:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    28fa:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    28fe:	d503      	bpl.n	2908 <juggle(LEDStruct&)+0x6b4>
    2900:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2904:	3307      	adds	r3, #7
    2906:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2908:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    290a:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    290c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2910:	f818 6000 	ldrb.w	r6, [r8, r0]
    2914:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2918:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    291c:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    291e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2920:	bf48      	it	mi
    2922:	425b      	negmi	r3, r3
    2924:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2928:	b21e      	sxth	r6, r3
    292a:	4650      	mov	r0, sl
    292c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2930:	9100      	str	r1, [sp, #0]
    2932:	4659      	mov	r1, fp
    2934:	f002 fac4 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2938:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    293c:	b29b      	uxth	r3, r3
    293e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2942:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2946:	0c1b      	lsrs	r3, r3, #16
    2948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    294c:	18e1      	adds	r1, r4, r3
    294e:	5ce2      	ldrb	r2, [r4, r3]
    2950:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2954:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2958:	54e2      	strb	r2, [r4, r3]
    295a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    295e:	784a      	ldrb	r2, [r1, #1]
    2960:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2964:	704a      	strb	r2, [r1, #1]
    2966:	788b      	ldrb	r3, [r1, #2]
    2968:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    296c:	fa83 f352 	uqadd8	r3, r3, r2
    2970:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2972:	708b      	strb	r3, [r1, #2]
    2974:	4622      	mov	r2, r4
    2976:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2978:	7819      	ldrb	r1, [r3, #0]
    297a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    297e:	7859      	ldrb	r1, [r3, #1]
    2980:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2984:	7899      	ldrb	r1, [r3, #2]
    2986:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    298a:	3303      	adds	r3, #3
    298c:	42ab      	cmp	r3, r5
    298e:	f1a2 0203 	sub.w	r2, r2, #3
    2992:	d1f1      	bne.n	2978 <juggle(LEDStruct&)+0x724>
    2994:	9503      	str	r5, [sp, #12]
    2996:	e78c      	b.n	28b2 <juggle(LEDStruct&)+0x65e>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    2998:	b011      	add	sp, #68	; 0x44
    299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    299e:	bf00      	nop
    29a0:	00007df8 	.word	0x00007df8
    29a4:	1fff94e8 	.word	0x1fff94e8
    29a8:	00008664 	.word	0x00008664
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29ac:	f8d9 3000 	ldr.w	r3, [r9]
    29b0:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    29b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    29b4:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    29b8:	f44f 708c 	mov.w	r0, #280	; 0x118
    29bc:	fb00 f101 	mul.w	r1, r0, r1
    29c0:	021b      	lsls	r3, r3, #8
    29c2:	fb03 f301 	mul.w	r3, r3, r1
    29c6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    29ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    29ce:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    29d2:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    29d4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    29d6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    29da:	d503      	bpl.n	29e4 <juggle(LEDStruct&)+0x790>
    29dc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    29e0:	3107      	adds	r1, #7
    29e2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    29e4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    29e6:	9d02      	ldr	r5, [sp, #8]
    29e8:	f818 6000 	ldrb.w	r6, [r8, r0]
    29ec:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    29f0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    29f4:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    29f8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    29fa:	b2b6      	uxth	r6, r6
    29fc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2a00:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2a04:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2a06:	bf48      	it	mi
    2a08:	4276      	negmi	r6, r6
    2a0a:	4659      	mov	r1, fp
    2a0c:	4650      	mov	r0, sl
    2a0e:	b236      	sxth	r6, r6
    2a10:	f002 fa56 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2a14:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2a18:	b29b      	uxth	r3, r3
    2a1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2a1e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2a22:	0c1b      	lsrs	r3, r3, #16
    2a24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2a28:	18e1      	adds	r1, r4, r3
    2a2a:	5ce2      	ldrb	r2, [r4, r3]
    2a2c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2a30:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2a34:	54e2      	strb	r2, [r4, r3]
    2a36:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2a3a:	784a      	ldrb	r2, [r1, #1]
    2a3c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2a40:	704a      	strb	r2, [r1, #1]
    2a42:	788b      	ldrb	r3, [r1, #2]
    2a44:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2a48:	fa83 f352 	uqadd8	r3, r3, r2
    2a4c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2a4e:	708b      	strb	r3, [r1, #2]
    2a50:	4622      	mov	r2, r4
    2a52:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2a54:	7819      	ldrb	r1, [r3, #0]
    2a56:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2a5a:	7859      	ldrb	r1, [r3, #1]
    2a5c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2a60:	7899      	ldrb	r1, [r3, #2]
    2a62:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2a66:	3303      	adds	r3, #3
    2a68:	42ab      	cmp	r3, r5
    2a6a:	f1a2 0203 	sub.w	r2, r2, #3
    2a6e:	d1f1      	bne.n	2a54 <juggle(LEDStruct&)+0x800>
    2a70:	9503      	str	r5, [sp, #12]
    2a72:	e5fa      	b.n	266a <juggle(LEDStruct&)+0x416>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2a74:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2a78:	443b      	add	r3, r7
    2a7a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a7c:	f8d9 1000 	ldr.w	r1, [r9]
    2a80:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2a82:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2a84:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2a86:	bf9c      	itt	ls
    2a88:	021b      	lslls	r3, r3, #8
    2a8a:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2a8c:	fb0a f101 	mul.w	r1, sl, r1
    2a90:	fb03 f301 	mul.w	r3, r3, r1
    2a94:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2a98:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2a9c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2a9e:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2aa0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2aa4:	d503      	bpl.n	2aae <juggle(LEDStruct&)+0x85a>
    2aa6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2aaa:	3107      	adds	r1, #7
    2aac:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2aae:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ab0:	9d02      	ldr	r5, [sp, #8]
    2ab2:	f818 6000 	ldrb.w	r6, [r8, r0]
    2ab6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2aba:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2abe:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2ac2:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ac4:	b2b6      	uxth	r6, r6
    2ac6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2aca:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2ace:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2ad0:	bf48      	it	mi
    2ad2:	4276      	negmi	r6, r6
    2ad4:	4659      	mov	r1, fp
    2ad6:	a80b      	add	r0, sp, #44	; 0x2c
    2ad8:	b236      	sxth	r6, r6
    2ada:	f002 f9f1 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2ade:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2ae2:	b29b      	uxth	r3, r3
    2ae4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2ae8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2aec:	0c1b      	lsrs	r3, r3, #16
    2aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2af2:	18e1      	adds	r1, r4, r3
    2af4:	5ce2      	ldrb	r2, [r4, r3]
    2af6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2afa:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2afe:	54e2      	strb	r2, [r4, r3]
    2b00:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2b04:	784a      	ldrb	r2, [r1, #1]
    2b06:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2b0a:	704a      	strb	r2, [r1, #1]
    2b0c:	788b      	ldrb	r3, [r1, #2]
    2b0e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2b12:	fa83 f352 	uqadd8	r3, r3, r2
    2b16:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2b18:	708b      	strb	r3, [r1, #2]
    2b1a:	4622      	mov	r2, r4
    2b1c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2b1e:	7819      	ldrb	r1, [r3, #0]
    2b20:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2b24:	7859      	ldrb	r1, [r3, #1]
    2b26:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2b2a:	7899      	ldrb	r1, [r3, #2]
    2b2c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2b30:	3303      	adds	r3, #3
    2b32:	42ab      	cmp	r3, r5
    2b34:	f1a2 0203 	sub.w	r2, r2, #3
    2b38:	d1f1      	bne.n	2b1e <juggle(LEDStruct&)+0x8ca>
    2b3a:	9503      	str	r5, [sp, #12]
    2b3c:	e627      	b.n	278e <juggle(LEDStruct&)+0x53a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b3e:	f8d9 3000 	ldr.w	r3, [r9]
    2b42:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2b46:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    2b4a:	f44f 708c 	mov.w	r0, #280	; 0x118
    2b4e:	fb00 f303 	mul.w	r3, r0, r3
    2b52:	0209      	lsls	r1, r1, #8
    2b54:	fb03 f301 	mul.w	r3, r3, r1
    2b58:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2b5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2b60:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    2b64:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b66:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b68:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b6c:	d503      	bpl.n	2b76 <juggle(LEDStruct&)+0x922>
    2b6e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2b72:	3107      	adds	r1, #7
    2b74:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b76:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b78:	9d02      	ldr	r5, [sp, #8]
    2b7a:	f818 6000 	ldrb.w	r6, [r8, r0]
    2b7e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2b82:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2b86:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2b8a:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b8c:	b2b6      	uxth	r6, r6
    2b8e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2b92:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2b96:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2b98:	bf48      	it	mi
    2b9a:	4276      	negmi	r6, r6
    2b9c:	4659      	mov	r1, fp
    2b9e:	4650      	mov	r0, sl
    2ba0:	b236      	sxth	r6, r6
    2ba2:	f002 f98d 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2ba6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2baa:	b29b      	uxth	r3, r3
    2bac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2bb0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2bb4:	0c1b      	lsrs	r3, r3, #16
    2bb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2bba:	18e1      	adds	r1, r4, r3
    2bbc:	5ce2      	ldrb	r2, [r4, r3]
    2bbe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2bc2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2bc6:	54e2      	strb	r2, [r4, r3]
    2bc8:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2bcc:	784a      	ldrb	r2, [r1, #1]
    2bce:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2bd2:	704a      	strb	r2, [r1, #1]
    2bd4:	788b      	ldrb	r3, [r1, #2]
    2bd6:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2bda:	fa83 f352 	uqadd8	r3, r3, r2
    2bde:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2be0:	708b      	strb	r3, [r1, #2]
    2be2:	4622      	mov	r2, r4
    2be4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2be6:	7819      	ldrb	r1, [r3, #0]
    2be8:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2bec:	7859      	ldrb	r1, [r3, #1]
    2bee:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2bf2:	7899      	ldrb	r1, [r3, #2]
    2bf4:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2bf8:	3303      	adds	r3, #3
    2bfa:	429d      	cmp	r5, r3
    2bfc:	f1a2 0203 	sub.w	r2, r2, #3
    2c00:	d1f1      	bne.n	2be6 <juggle(LEDStruct&)+0x992>
    2c02:	9503      	str	r5, [sp, #12]
    2c04:	e531      	b.n	266a <juggle(LEDStruct&)+0x416>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2c06:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2c0a:	443b      	add	r3, r7
    2c0c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c0e:	f8d9 1000 	ldr.w	r1, [r9]
    2c12:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2c14:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2c16:	990d      	ldr	r1, [sp, #52]	; 0x34
    2c18:	bf9c      	itt	ls
    2c1a:	021b      	lslls	r3, r3, #8
    2c1c:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2c1e:	fb0a f101 	mul.w	r1, sl, r1
    2c22:	fb03 f301 	mul.w	r3, r3, r1
    2c26:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2c2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c2e:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2c30:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c34:	d503      	bpl.n	2c3e <juggle(LEDStruct&)+0x9ea>
    2c36:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2c3a:	3107      	adds	r1, #7
    2c3c:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2c3e:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2c40:	9d02      	ldr	r5, [sp, #8]
    2c42:	f818 6000 	ldrb.w	r6, [r8, r0]
    2c46:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2c4a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2c4e:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2c52:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2c54:	b2b6      	uxth	r6, r6
    2c56:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    2c5a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2c5e:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2c60:	bf48      	it	mi
    2c62:	4276      	negmi	r6, r6
    2c64:	4659      	mov	r1, fp
    2c66:	a80b      	add	r0, sp, #44	; 0x2c
    2c68:	b236      	sxth	r6, r6
    2c6a:	f002 f929 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2c6e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2c72:	b29b      	uxth	r3, r3
    2c74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c78:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2c7c:	0c1b      	lsrs	r3, r3, #16
    2c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c82:	18e1      	adds	r1, r4, r3
    2c84:	5ce2      	ldrb	r2, [r4, r3]
    2c86:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2c8a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2c8e:	54e2      	strb	r2, [r4, r3]
    2c90:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2c94:	784a      	ldrb	r2, [r1, #1]
    2c96:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2c9a:	704a      	strb	r2, [r1, #1]
    2c9c:	788b      	ldrb	r3, [r1, #2]
    2c9e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2ca2:	fa83 f352 	uqadd8	r3, r3, r2
    2ca6:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2ca8:	708b      	strb	r3, [r1, #2]
    2caa:	4622      	mov	r2, r4
    2cac:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2cae:	7819      	ldrb	r1, [r3, #0]
    2cb0:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2cb4:	7859      	ldrb	r1, [r3, #1]
    2cb6:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2cba:	7899      	ldrb	r1, [r3, #2]
    2cbc:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2cc0:	3303      	adds	r3, #3
    2cc2:	42ab      	cmp	r3, r5
    2cc4:	f1a2 0203 	sub.w	r2, r2, #3
    2cc8:	d1f1      	bne.n	2cae <juggle(LEDStruct&)+0xa5a>
    2cca:	9503      	str	r5, [sp, #12]
    2ccc:	e55f      	b.n	278e <juggle(LEDStruct&)+0x53a>
    2cce:	bf00      	nop

00002cd0 <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2cd0:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    2cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cd8:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d06b      	beq.n	2db6 <rainbow_march(LEDStruct&)+0xe6>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2cde:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    2ce2:	bb43      	cbnz	r3, 2d36 <rainbow_march(LEDStruct&)+0x66>
    2ce4:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    2ce8:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    2cec:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2cee:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2cf2:	b2d2      	uxtb	r2, r2
    2cf4:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2cf8:	bb4b      	cbnz	r3, 2d4e <rainbow_march(LEDStruct&)+0x7e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2cfa:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d151      	bne.n	2da6 <rainbow_march(LEDStruct&)+0xd6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    2d02:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2d06:	214b      	movs	r1, #75	; 0x4b
    2d08:	4620      	mov	r0, r4
    2d0a:	f001 ffc7 	bl	4c9c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2d0e:	4620      	mov	r0, r4
    2d10:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2d14:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d16:	7802      	ldrb	r2, [r0, #0]
    2d18:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    2d1c:	7842      	ldrb	r2, [r0, #1]
    2d1e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    2d22:	7882      	ldrb	r2, [r0, #2]
    2d24:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2d28:	3003      	adds	r0, #3
    2d2a:	4288      	cmp	r0, r1
    2d2c:	f1a3 0303 	sub.w	r3, r3, #3
    2d30:	d1f1      	bne.n	2d16 <rainbow_march(LEDStruct&)+0x46>
    2d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2d36:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    2d3a:	f894 2236 	ldrb.w	r2, [r4, #566]	; 0x236
    2d3e:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2d40:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2d44:	b2d2      	uxtb	r2, r2
    2d46:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d0d5      	beq.n	2cfa <rainbow_march(LEDStruct&)+0x2a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    2d4e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2d52:	2125      	movs	r1, #37	; 0x25
    2d54:	4620      	mov	r0, r4
    2d56:	f001 ffa1 	bl	4c9c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2d5a:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    2d5e:	4623      	mov	r3, r4
    2d60:	4621      	mov	r1, r4
    2d62:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d64:	7810      	ldrb	r0, [r2, #0]
    2d66:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    2d6a:	7850      	ldrb	r0, [r2, #1]
    2d6c:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    2d70:	7890      	ldrb	r0, [r2, #2]
    2d72:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    2d76:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    2d78:	42aa      	cmp	r2, r5
    2d7a:	f1a1 0103 	sub.w	r1, r1, #3
    2d7e:	d1f1      	bne.n	2d64 <rainbow_march(LEDStruct&)+0x94>
    2d80:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2d84:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d86:	7802      	ldrb	r2, [r0, #0]
    2d88:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    2d8c:	7842      	ldrb	r2, [r0, #1]
    2d8e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    2d92:	7882      	ldrb	r2, [r0, #2]
    2d94:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2d98:	3003      	adds	r0, #3
    2d9a:	4288      	cmp	r0, r1
    2d9c:	f1a3 0303 	sub.w	r3, r3, #3
    2da0:	d1f1      	bne.n	2d86 <rainbow_march(LEDStruct&)+0xb6>
    2da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2da6:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2daa:	4620      	mov	r0, r4
    2dac:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    2dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2db2:	f001 bf73 	b.w	4c9c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2db6:	4927      	ldr	r1, [pc, #156]	; (2e54 <rainbow_march(LEDStruct&)+0x184>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2db8:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    2dbc:	880b      	ldrh	r3, [r1, #0]
    2dbe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2dc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2dc6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2dca:	3319      	adds	r3, #25
    2dcc:	b29b      	uxth	r3, r3
    2dce:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2dd2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2dd6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2dda:	3219      	adds	r2, #25
    2ddc:	b292      	uxth	r2, r2
    2dde:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2de2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2de6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2dea:	3519      	adds	r5, #25
    2dec:	b2ad      	uxth	r5, r5
    2dee:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    2df2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2df6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2dfa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2dfe:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2e02:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    2e04:	b2d2      	uxtb	r2, r2
    2e06:	3619      	adds	r6, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2e08:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    2e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2e10:	b2b6      	uxth	r6, r6

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2e12:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    2e14:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e16:	eb06 2716 	add.w	r7, r6, r6, lsr #8

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2e1a:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    2e1c:	3201      	adds	r2, #1
    2e1e:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2e22:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.this_dir = td;
    2e26:	f3c5 15c0 	ubfx	r5, r5, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2e2a:	f880 3237 	strb.w	r3, [r0, #567]	; 0x237
    leds.rainbow_rot    = rr;
    2e2e:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2e32:	2301      	movs	r3, #1
	leds.mode_type = RAINBOW_MARCH;
    2e34:	2205      	movs	r2, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2e36:	f880 71c4 	strb.w	r7, [r0, #452]	; 0x1c4
	leds.this_dir = td;
    2e3a:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2e3e:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    2e42:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    2e46:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e4a:	800e      	strh	r6, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    2e4c:	f7fd ff54 	bl	cf8 <LEDDebug(LEDStruct&)>
    2e50:	e745      	b.n	2cde <rainbow_march(LEDStruct&)+0xe>
    2e52:	bf00      	nop
    2e54:	1fff8734 	.word	0x1fff8734

00002e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
    2e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
    2e5a:	f890 e22b 	ldrb.w	lr, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
    2e5e:	f89d 5018 	ldrb.w	r5, [sp, #24]
    2e62:	f89d 701c 	ldrb.w	r7, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2e66:	2408      	movs	r4, #8
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
    2e68:	2601      	movs	r6, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
    2e6a:	f1be 0f0d 	cmp.w	lr, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2e6e:	f880 422c 	strb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
    2e72:	f880 622d 	strb.w	r6, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
    2e76:	f89d 4014 	ldrb.w	r4, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
    2e7a:	d019      	beq.n	2eb0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
	else { leds.use_palette = 0; }
    2e7c:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    2e7e:	f880 423a 	strb.w	r4, [r0, #570]	; 0x23a
	leds.fire_cooling		= fc;
    2e82:	f880 523c 	strb.w	r5, [r0, #572]	; 0x23c
	leds.fire_sync			= fy;
    2e86:	f880 12d6 	strb.w	r1, [r0, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    2e8a:	f880 22d7 	strb.w	r2, [r0, #727]	; 0x2d7
	leds.torch_diff			= td;
    2e8e:	f880 72d9 	strb.w	r7, [r0, #729]	; 0x2d9

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    2e92:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2e96:	b9ca      	cbnz	r2, 2ecc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x74>
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2e98:	234b      	movs	r3, #75	; 0x4b
    2e9a:	f880 22d5 	strb.w	r2, [r0, #725]	; 0x2d5
    2e9e:	f880 32d4 	strb.w	r3, [r0, #724]	; 0x2d4

	if (!leds.fire_sync) {
    2ea2:	b9d1      	cbnz	r1, 2eda <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x82>
    2ea4:	462a      	mov	r2, r5
    2ea6:	4621      	mov	r1, r4
		leds.fire_sparking2 = fs - 10 + random8(21);
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}
    2ea8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2eac:	f7fd baf0 	b.w	490 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char) [clone .part.10]>
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
    2eb0:	f880 6229 	strb.w	r6, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    2eb4:	f880 423a 	strb.w	r4, [r0, #570]	; 0x23a
	leds.fire_cooling		= fc;
    2eb8:	f880 523c 	strb.w	r5, [r0, #572]	; 0x23c
	leds.fire_sync			= fy;
    2ebc:	f880 12d6 	strb.w	r1, [r0, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    2ec0:	f880 22d7 	strb.w	r2, [r0, #727]	; 0x2d7
	leds.torch_diff			= td;
    2ec4:	f880 72d9 	strb.w	r7, [r0, #729]	; 0x2d9
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2ec8:	2a00      	cmp	r2, #0
    2eca:	d0e8      	beq.n	2e9e <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x46>
    2ecc:	2325      	movs	r3, #37	; 0x25
    2ece:	f880 32d4 	strb.w	r3, [r0, #724]	; 0x2d4
    2ed2:	f880 32d5 	strb.w	r3, [r0, #725]	; 0x2d5
	else if (leds.mode_name == TORCH) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
    2ed6:	2900      	cmp	r1, #0
    2ed8:	d0e4      	beq.n	2ea4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    2eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002edc <fire(LEDStruct&)>:
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    2edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    2ee0:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    2ee4:	4dcf      	ldr	r5, [pc, #828]	; (3224 <fire(LEDStruct&)+0x348>)
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    2ee6:	b086      	sub	sp, #24
    2ee8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    2eea:	2b00      	cmp	r3, #0
    2eec:	f000 8221 	beq.w	3332 <fire(LEDStruct&)+0x456>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2ef0:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	f000 82d6 	beq.w	34a6 <fire(LEDStruct&)+0x5ca>
    2efa:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    2efe:	882a      	ldrh	r2, [r5, #0]
    2f00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2f04:	004f      	lsls	r7, r1, #1
    2f06:	f203 2e3d 	addw	lr, r3, #573	; 0x23d
    2f0a:	fb97 f7f3 	sdiv	r7, r7, r3
    2f0e:	3702      	adds	r7, #2
    2f10:	b2ff      	uxtb	r7, r7
    2f12:	44a6      	add	lr, r4
    2f14:	f204 263d 	addw	r6, r4, #573	; 0x23d
    2f18:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2f1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2f20:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f24:	3219      	adds	r2, #25
    2f26:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f28:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2f2c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    2f30:	b2c9      	uxtb	r1, r1
    2f32:	fb11 f107 	smulbb	r1, r1, r7
    2f36:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2f3a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2f3e:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2f40:	7031      	strb	r1, [r6, #0]
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2f42:	d1e9      	bne.n	2f18 <fire(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    2f44:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    2f48:	802a      	strh	r2, [r5, #0]
    2f4a:	2e00      	cmp	r6, #0
    2f4c:	f000 8111 	beq.w	3172 <fire(LEDStruct&)+0x296>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2f50:	f1a3 0e03 	sub.w	lr, r3, #3
    2f54:	f1be 0f01 	cmp.w	lr, #1
    2f58:	f04f 0c01 	mov.w	ip, #1
    2f5c:	dd1a      	ble.n	2f94 <fire(LEDStruct&)+0xb8>
    2f5e:	f203 203a 	addw	r0, r3, #570	; 0x23a
    2f62:	f503 770f 	add.w	r7, r3, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2f66:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 3228 <fire(LEDStruct&)+0x34c>
    2f6a:	4420      	add	r0, r4
    2f6c:	4427      	add	r7, r4
    2f6e:	f204 283e 	addw	r8, r4, #574	; 0x23e
    2f72:	7801      	ldrb	r1, [r0, #0]
    2f74:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    2f78:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    2f7c:	fb89 a601 	smull	sl, r6, r9, r1
    2f80:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2f84:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2f86:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2f8a:	d1f2      	bne.n	2f72 <fire(LEDStruct&)+0x96>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    2f8c:	f1bc 0f00 	cmp.w	ip, #0
    2f90:	f000 80d6 	beq.w	3140 <fire(LEDStruct&)+0x264>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f94:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2f98:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2f9c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2fa0:	3219      	adds	r2, #25
    2fa2:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    2fa4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    2fa8:	f894 623a 	ldrb.w	r6, [r4, #570]	; 0x23a
    2fac:	802a      	strh	r2, [r5, #0]
    2fae:	b2c9      	uxtb	r1, r1
    2fb0:	428e      	cmp	r6, r1
    2fb2:	489c      	ldr	r0, [pc, #624]	; (3224 <fire(LEDStruct&)+0x348>)
    2fb4:	d926      	bls.n	3004 <fire(LEDStruct&)+0x128>
    2fb6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2fba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2fbe:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2fc2:	3219      	adds	r2, #25
    2fc4:	b292      	uxth	r2, r2
    2fc6:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2fca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2fce:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2fd2:	3619      	adds	r6, #25
    2fd4:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2fd6:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    2fda:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2fde:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2fe0:	b2d2      	uxtb	r2, r2
    2fe2:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    2fe6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    2fea:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2fee:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    2ff2:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2ff4:	8006      	strh	r6, [r0, #0]
    2ff6:	3960      	subs	r1, #96	; 0x60
    2ff8:	f892 023e 	ldrb.w	r0, [r2, #574]	; 0x23e
    2ffc:	fa80 f051 	uqadd8	r0, r0, r1
    3000:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}

	if (!leds.fire_sync) {
    3004:	f1bc 0f00 	cmp.w	ip, #0
    3008:	d112      	bne.n	3030 <fire(LEDStruct&)+0x154>
    300a:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    300c:	f894 623b 	ldrb.w	r6, [r4, #571]	; 0x23b
    3010:	4984      	ldr	r1, [pc, #528]	; (3224 <fire(LEDStruct&)+0x348>)
    3012:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3016:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    301a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    301e:	3219      	adds	r2, #25
    3020:	b292      	uxth	r2, r2
    3022:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3026:	b2c0      	uxtb	r0, r0
    3028:	4286      	cmp	r6, r0
    302a:	802a      	strh	r2, [r5, #0]
    302c:	f200 80d0 	bhi.w	31d0 <fire(LEDStruct&)+0x2f4>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    3030:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3034:	2a00      	cmp	r2, #0
    3036:	d162      	bne.n	30fe <fire(LEDStruct&)+0x222>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3038:	2b00      	cmp	r3, #0
    303a:	f000 814a 	beq.w	32d2 <fire(LEDStruct&)+0x3f6>
    303e:	f204 273d 	addw	r7, r4, #573	; 0x23d
    3042:	4690      	mov	r8, r2
    3044:	46b9      	mov	r9, r7
    3046:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
    3048:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    304c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3050:	1b5d      	subs	r5, r3, r5
    3052:	3d01      	subs	r5, #1
    3054:	ebc8 0505 	rsb	r5, r8, r5
    3058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    305c:	4630      	mov	r0, r6
    305e:	f001 ff0d 	bl	4e7c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3062:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3066:	5563      	strb	r3, [r4, r5]
    3068:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    306a:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    306e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3072:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3074:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3076:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    307a:	f108 0801 	add.w	r8, r8, #1
    307e:	4543      	cmp	r3, r8
    3080:	dce2      	bgt.n	3048 <fire(LEDStruct&)+0x16c>
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3082:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    3086:	b30a      	cbz	r2, 30cc <fire(LEDStruct&)+0x1f0>
		if (leds.this_dir) {
    3088:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    308c:	2a00      	cmp	r2, #0
    308e:	f040 81c1 	bne.w	3414 <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3092:	4690      	mov	r8, r2
    3094:	2b00      	cmp	r3, #0
    3096:	f000 8200 	beq.w	349a <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
    309a:	eb08 0553 	add.w	r5, r8, r3, lsr #1
    309e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    30a2:	4630      	mov	r0, r6
    30a4:	f001 feea 	bl	4e7c <HeatColor(unsigned char)>
    30a8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
    30b0:	54e2      	strb	r2, [r4, r3]
    30b2:	4423      	add	r3, r4
        g = rhs.g;
    30b4:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    30b8:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    30bc:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    30be:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    30c0:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    30c4:	f108 0801 	add.w	r8, r8, #1
    30c8:	4543      	cmp	r3, r8
    30ca:	dce6      	bgt.n	309a <fire(LEDStruct&)+0x1be>
    30cc:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    30d0:	2a00      	cmp	r2, #0
    30d2:	f000 80ab 	beq.w	322c <fire(LEDStruct&)+0x350>
    30d6:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    30da:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30dc:	781a      	ldrb	r2, [r3, #0]
    30de:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    30e2:	785a      	ldrb	r2, [r3, #1]
    30e4:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    30e8:	789a      	ldrb	r2, [r3, #2]
    30ea:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    30ee:	3303      	adds	r3, #3
    30f0:	4299      	cmp	r1, r3
    30f2:	f1a4 0403 	sub.w	r4, r4, #3
    30f6:	d1f1      	bne.n	30dc <fire(LEDStruct&)+0x200>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    30f8:	b006      	add	sp, #24
    30fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    30fe:	2b00      	cmp	r3, #0
    3100:	f000 81c8 	beq.w	3494 <fire(LEDStruct&)+0x5b8>
    3104:	f204 273d 	addw	r7, r4, #573	; 0x23d
    3108:	46b9      	mov	r9, r7
    310a:	4625      	mov	r5, r4
    310c:	f04f 0800 	mov.w	r8, #0
    3110:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    3112:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3116:	4630      	mov	r0, r6
    3118:	f001 feb0 	bl	4e7c <HeatColor(unsigned char)>
    311c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3120:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3124:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3128:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    312a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    312c:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    312e:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3132:	f108 0801 	add.w	r8, r8, #1
    3136:	4543      	cmp	r3, r8
    3138:	f105 0503 	add.w	r5, r5, #3
    313c:	dce9      	bgt.n	3112 <fire(LEDStruct&)+0x236>
    313e:	e7a0      	b.n	3082 <fire(LEDStruct&)+0x1a6>
    3140:	f203 2685 	addw	r6, r3, #645	; 0x285
    3144:	f203 2787 	addw	r7, r3, #647	; 0x287
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3148:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3228 <fire(LEDStruct&)+0x34c>
    314c:	4426      	add	r6, r4
    314e:	4427      	add	r7, r4
    3150:	7831      	ldrb	r1, [r6, #0]
    3152:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3156:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    315a:	fb88 9001 	smull	r9, r0, r8, r1
    315e:	f10e 3eff 	add.w	lr, lr, #4294967295
    3162:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3166:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    316a:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    316e:	d1ef      	bne.n	3150 <fire(LEDStruct&)+0x274>
    3170:	e710      	b.n	2f94 <fire(LEDStruct&)+0xb8>
    3172:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    3176:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    317a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    317e:	fb9e fef3 	sdiv	lr, lr, r3
    3182:	f10e 0e02 	add.w	lr, lr, #2
    3186:	fa5f fe8e 	uxtb.w	lr, lr
    318a:	f504 7722 	add.w	r7, r4, #648	; 0x288
    318e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3192:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3196:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    319a:	3219      	adds	r2, #25
    319c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    319e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    31a2:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    31a6:	b2c9      	uxtb	r1, r1
    31a8:	fb11 f10e 	smulbb	r1, r1, lr
    31ac:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    31b0:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    31b2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    31b6:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    31b8:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    31ba:	dbe8      	blt.n	318e <fire(LEDStruct&)+0x2b2>
    31bc:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    31be:	f1a3 0e03 	sub.w	lr, r3, #3
    31c2:	f1be 0f01 	cmp.w	lr, #1
    31c6:	f04f 0c00 	mov.w	ip, #0
    31ca:	f73f aec8 	bgt.w	2f5e <fire(LEDStruct&)+0x82>
    31ce:	e6e1      	b.n	2f94 <fire(LEDStruct&)+0xb8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31d0:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    31d4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    31d8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    31dc:	3219      	adds	r2, #25
    31de:	b292      	uxth	r2, r2
    31e0:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    31e4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    31e8:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    31ec:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31ee:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31f2:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31f4:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31f6:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31fa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    31fe:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3200:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3204:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3208:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    320c:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3210:	800d      	strh	r5, [r1, #0]
    3212:	1201      	asrs	r1, r0, #8
    3214:	3960      	subs	r1, #96	; 0x60
    3216:	4630      	mov	r0, r6
    3218:	fa80 f051 	uqadd8	r0, r0, r1
    321c:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
    3220:	e706      	b.n	3030 <fire(LEDStruct&)+0x154>
    3222:	bf00      	nop
    3224:	1fff8734 	.word	0x1fff8734
    3228:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    322c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3230:	2a00      	cmp	r2, #0
    3232:	d059      	beq.n	32e8 <fire(LEDStruct&)+0x40c>
			for (int j = 0; j < leds.heat_length; j++) {
    3234:	2b00      	cmp	r3, #0
    3236:	f43f af5f 	beq.w	30f8 <fire(LEDStruct&)+0x21c>
    323a:	f504 7722 	add.w	r7, r4, #648	; 0x288
    323e:	46b9      	mov	r9, r7
    3240:	4625      	mov	r5, r4
    3242:	f04f 0800 	mov.w	r8, #0
    3246:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    3248:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    324c:	4630      	mov	r0, r6
    324e:	f001 fe15 	bl	4e7c <HeatColor(unsigned char)>
    3252:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3256:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    325a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    325e:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    3262:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    3266:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    326a:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    326e:	f108 0801 	add.w	r8, r8, #1
    3272:	4543      	cmp	r3, r8
    3274:	f1a5 0503 	sub.w	r5, r5, #3
    3278:	dce6      	bgt.n	3248 <fire(LEDStruct&)+0x36c>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    327a:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    327e:	2a00      	cmp	r2, #0
    3280:	f43f af3a 	beq.w	30f8 <fire(LEDStruct&)+0x21c>
			if (leds.this_dir) {
    3284:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3288:	2a00      	cmp	r2, #0
    328a:	f000 80e2 	beq.w	3452 <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    328e:	2b00      	cmp	r3, #0
    3290:	f43f af32 	beq.w	30f8 <fire(LEDStruct&)+0x21c>
    3294:	4625      	mov	r5, r4
    3296:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    329a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    329e:	4630      	mov	r0, r6
    32a0:	f001 fdec 	bl	4e7c <HeatColor(unsigned char)>
    32a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32a8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    32ac:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32b0:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    32b4:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    32b8:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    32bc:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    32c0:	f108 0801 	add.w	r8, r8, #1
    32c4:	4543      	cmp	r3, r8
    32c6:	f105 0503 	add.w	r5, r5, #3
    32ca:	dce6      	bgt.n	329a <fire(LEDStruct&)+0x3be>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    32cc:	b006      	add	sp, #24
    32ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    32d2:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    32d6:	2b00      	cmp	r3, #0
    32d8:	f040 80df 	bne.w	349a <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    32dc:	f1bc 0f00 	cmp.w	ip, #0
    32e0:	f47f aef9 	bne.w	30d6 <fire(LEDStruct&)+0x1fa>
    32e4:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    32e8:	2b00      	cmp	r3, #0
    32ea:	f43f af05 	beq.w	30f8 <fire(LEDStruct&)+0x21c>
    32ee:	f504 7722 	add.w	r7, r4, #648	; 0x288
    32f2:	46b9      	mov	r9, r7
    32f4:	f04f 0800 	mov.w	r8, #0
    32f8:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    32fa:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    32fe:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3302:	354b      	adds	r5, #75	; 0x4b
    3304:	4445      	add	r5, r8
    3306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    330a:	4630      	mov	r0, r6
    330c:	f001 fdb6 	bl	4e7c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3310:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3314:	5563      	strb	r3, [r4, r5]
    3316:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3318:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    331c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3320:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3322:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3324:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3328:	f108 0801 	add.w	r8, r8, #1
    332c:	4543      	cmp	r3, r8
    332e:	dce4      	bgt.n	32fa <fire(LEDStruct&)+0x41e>
    3330:	e7a3      	b.n	327a <fire(LEDStruct&)+0x39e>
    3332:	882b      	ldrh	r3, [r5, #0]
    3334:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3338:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    333c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3340:	3119      	adds	r1, #25
    3342:	b289      	uxth	r1, r1
    3344:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3348:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    334c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3350:	3219      	adds	r2, #25
    3352:	b292      	uxth	r2, r2
    3354:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    3358:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    335c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3360:	3319      	adds	r3, #25
    3362:	b29b      	uxth	r3, r3
    3364:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3368:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    336c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3370:	f10e 0e19 	add.w	lr, lr, #25
    3374:	fa1f fe8e 	uxth.w	lr, lr
    3378:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    337c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3380:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3384:	3619      	adds	r6, #25
    3386:	b2b6      	uxth	r6, r6
    3388:	eb06 2746 	add.w	r7, r6, r6, lsl #9
    338c:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    3390:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3394:	3719      	adds	r7, #25
    3396:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3398:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    339c:	eb0e 2c1e 	add.w	ip, lr, lr, lsr #8
    33a0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    33a4:	eb07 2817 	add.w	r8, r7, r7, lsr #8
	}
}


void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    33a8:	fa5f fe83 	uxtb.w	lr, r3
    33ac:	fa5f fc8c 	uxtb.w	ip, ip
    33b0:	b2f3      	uxtb	r3, r6
    33b2:	fa5f f888 	uxtb.w	r8, r8
    33b6:	eb0e 064e 	add.w	r6, lr, lr, lsl #1
    33ba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    33be:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
    33c2:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    33c6:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
    33ca:	ea4f 1cac 	mov.w	ip, ip, asr #6
    33ce:	119e      	asrs	r6, r3, #6
    33d0:	ea4f 2328 	mov.w	r3, r8, asr #8
    33d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    33d8:	f10c 0c32 	add.w	ip, ip, #50	; 0x32
    33dc:	363c      	adds	r6, #60	; 0x3c
    33de:	3301      	adds	r3, #1
    33e0:	f10e 080a 	add.w	r8, lr, #10
    33e4:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    33e8:	fa5f fe8c 	uxtb.w	lr, ip
    33ec:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    33f0:	fa5f fc86 	uxtb.w	ip, r6
    33f4:	b2de      	uxtb	r6, r3
    33f6:	f8cd e000 	str.w	lr, [sp]
    33fa:	f8cd c004 	str.w	ip, [sp, #4]
    33fe:	9602      	str	r6, [sp, #8]
    3400:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3404:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3408:	fa5f f388 	uxtb.w	r3, r8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    340c:	802f      	strh	r7, [r5, #0]
    340e:	f7ff fd23 	bl	2e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3412:	e56d      	b.n	2ef0 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3414:	2b00      	cmp	r3, #0
    3416:	d040      	beq.n	349a <fire(LEDStruct&)+0x5be>
    3418:	4625      	mov	r5, r4
    341a:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    341e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3422:	4630      	mov	r0, r6
    3424:	f001 fd2a 	bl	4e7c <HeatColor(unsigned char)>
    3428:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    342c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3430:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3434:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    3438:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    343c:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3440:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3444:	f108 0801 	add.w	r8, r8, #1
    3448:	4543      	cmp	r3, r8
    344a:	f1a5 0503 	sub.w	r5, r5, #3
    344e:	dce6      	bgt.n	341e <fire(LEDStruct&)+0x542>
    3450:	e63c      	b.n	30cc <fire(LEDStruct&)+0x1f0>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3452:	4690      	mov	r8, r2
    3454:	2b00      	cmp	r3, #0
    3456:	f43f ae4f 	beq.w	30f8 <fire(LEDStruct&)+0x21c>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    345a:	334b      	adds	r3, #75	; 0x4b
    345c:	ebc8 0503 	rsb	r5, r8, r3
    3460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3464:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3468:	4630      	mov	r0, r6
    346a:	f001 fd07 	bl	4e7c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    346e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3472:	5563      	strb	r3, [r4, r5]
    3474:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3476:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    347a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    347e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3480:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3482:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3486:	f108 0801 	add.w	r8, r8, #1
    348a:	4543      	cmp	r3, r8
    348c:	dce5      	bgt.n	345a <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    348e:	b006      	add	sp, #24
    3490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3494:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    3498:	b153      	cbz	r3, 34b0 <fire(LEDStruct&)+0x5d4>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    349a:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    349e:	2b00      	cmp	r3, #0
    34a0:	f47f ae19 	bne.w	30d6 <fire(LEDStruct&)+0x1fa>
    34a4:	e628      	b.n	30f8 <fire(LEDStruct&)+0x21c>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    34a6:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
    34aa:	b142      	cbz	r2, 34be <fire(LEDStruct&)+0x5e2>
    34ac:	882a      	ldrh	r2, [r5, #0]
    34ae:	e54f      	b.n	2f50 <fire(LEDStruct&)+0x74>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    34b0:	f1bc 0f00 	cmp.w	ip, #0
    34b4:	f47f ae0f 	bne.w	30d6 <fire(LEDStruct&)+0x1fa>
    34b8:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    34bc:	e6ba      	b.n	3234 <fire(LEDStruct&)+0x358>
    34be:	882a      	ldrh	r2, [r5, #0]
    34c0:	e67d      	b.n	31be <fire(LEDStruct&)+0x2e2>
    34c2:	bf00      	nop

000034c4 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    34c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    34c8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    34cc:	4ccb      	ldr	r4, [pc, #812]	; (37fc <torch(LEDStruct&)+0x338>)





void torch(LEDStruct& leds) {
    34ce:	b087      	sub	sp, #28
    34d0:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    34d2:	2b00      	cmp	r3, #0
    34d4:	f000 81c4 	beq.w	3860 <torch(LEDStruct&)+0x39c>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    34d8:	f895 c2d4 	ldrb.w	ip, [r5, #724]	; 0x2d4
    34dc:	4663      	mov	r3, ip
    34de:	f1bc 0f00 	cmp.w	ip, #0
    34e2:	f000 822e 	beq.w	3942 <torch(LEDStruct&)+0x47e>
    34e6:	f895 123c 	ldrb.w	r1, [r5, #572]	; 0x23c
    34ea:	8822      	ldrh	r2, [r4, #0]
    34ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    34f0:	004f      	lsls	r7, r1, #1
    34f2:	f20c 2e3d 	addw	lr, ip, #573	; 0x23d
    34f6:	fb97 f7fc 	sdiv	r7, r7, ip
    34fa:	3702      	adds	r7, #2
    34fc:	b2ff      	uxtb	r7, r7
    34fe:	44ae      	add	lr, r5
    3500:	f205 263d 	addw	r6, r5, #573	; 0x23d
    3504:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3508:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    350c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3510:	3219      	adds	r2, #25
    3512:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3514:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3518:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    351c:	b2c9      	uxtb	r1, r1
    351e:	fb11 f107 	smulbb	r1, r1, r7
    3522:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3526:	ea21 71e1 	bic.w	r1, r1, r1, asr #31


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    352a:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    352c:	7031      	strb	r1, [r6, #0]


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    352e:	d1e9      	bne.n	3504 <torch(LEDStruct&)+0x40>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3530:	f895 62d6 	ldrb.w	r6, [r5, #726]	; 0x2d6
    3534:	8022      	strh	r2, [r4, #0]
    3536:	2e00      	cmp	r6, #0
    3538:	f000 8164 	beq.w	3804 <torch(LEDStruct&)+0x340>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    353c:	f1ac 0703 	sub.w	r7, ip, #3
    3540:	2f01      	cmp	r7, #1
    3542:	f04f 0901 	mov.w	r9, #1
    3546:	dd1a      	ble.n	357e <torch(LEDStruct&)+0xba>
    3548:	f20c 203a 	addw	r0, ip, #570	; 0x23a
    354c:	f50c 760f 	add.w	r6, ip, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3550:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 3800 <torch(LEDStruct&)+0x33c>
    3554:	4428      	add	r0, r5
    3556:	442e      	add	r6, r5
    3558:	f205 2e3e 	addw	lr, r5, #574	; 0x23e
    355c:	7801      	ldrb	r1, [r0, #0]
    355e:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    3562:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    3566:	fb88 ba01 	smull	fp, sl, r8, r1
    356a:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    356e:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3570:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3574:	d1f2      	bne.n	355c <torch(LEDStruct&)+0x98>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    3576:	f1b9 0f00 	cmp.w	r9, #0
    357a:	f000 8128 	beq.w	37ce <torch(LEDStruct&)+0x30a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    357e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3582:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3586:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    358a:	3219      	adds	r2, #25
    358c:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    358e:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3592:	f895 623a 	ldrb.w	r6, [r5, #570]	; 0x23a
    3596:	8022      	strh	r2, [r4, #0]
    3598:	b2c0      	uxtb	r0, r0
    359a:	4286      	cmp	r6, r0
    359c:	4997      	ldr	r1, [pc, #604]	; (37fc <torch(LEDStruct&)+0x338>)
    359e:	d928      	bls.n	35f2 <torch(LEDStruct&)+0x12e>
    35a0:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    35a4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    35a8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    35ac:	3219      	adds	r2, #25
    35ae:	b292      	uxth	r2, r2
    35b0:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    35b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    35b8:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    35bc:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    35be:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    35c2:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    35c4:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    35c6:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    35ca:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    35ce:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    35d0:	eb05 2222 	add.w	r2, r5, r2, asr #8
    35d4:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    35d8:	800e      	strh	r6, [r1, #0]
    35da:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    35de:	f892 623e 	ldrb.w	r6, [r2, #574]	; 0x23e
    35e2:	1200      	asrs	r0, r0, #8
    35e4:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    35e8:	4630      	mov	r0, r6
    35ea:	fa80 f051 	uqadd8	r0, r0, r1
    35ee:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}
	if (!leds.fire_sync) {
    35f2:	f1b9 0f00 	cmp.w	r9, #0
    35f6:	d112      	bne.n	361e <torch(LEDStruct&)+0x15a>
    35f8:	8822      	ldrh	r2, [r4, #0]
		if (random8() < leds.fire_sparking2) {
    35fa:	f895 623b 	ldrb.w	r6, [r5, #571]	; 0x23b
    35fe:	497f      	ldr	r1, [pc, #508]	; (37fc <torch(LEDStruct&)+0x338>)
    3600:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3604:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3608:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    360c:	3219      	adds	r2, #25
    360e:	b292      	uxth	r2, r2
    3610:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3614:	b2c0      	uxtb	r0, r0
    3616:	4286      	cmp	r6, r0
    3618:	8022      	strh	r2, [r4, #0]
    361a:	f200 80ab 	bhi.w	3774 <torch(LEDStruct&)+0x2b0>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    361e:	f1bc 0f00 	cmp.w	ip, #0
    3622:	f000 8091 	beq.w	3748 <torch(LEDStruct&)+0x284>
    3626:	f205 283d 	addw	r8, r5, #573	; 0x23d
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    362a:	2700      	movs	r7, #0
    362c:	ae05      	add	r6, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    362e:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    3632:	19dc      	adds	r4, r3, r7
    3634:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3638:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    363c:	4630      	mov	r0, r6
    363e:	f001 fc1d 	bl	4e7c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3642:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3646:	552b      	strb	r3, [r5, r4]
    3648:	442c      	add	r4, r5
        g = rhs.g;
        b = rhs.b;
    364a:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    364e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3652:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    3654:	70a3      	strb	r3, [r4, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3656:	f895 32d4 	ldrb.w	r3, [r5, #724]	; 0x2d4
    365a:	3701      	adds	r7, #1
    365c:	42bb      	cmp	r3, r7
    365e:	dce6      	bgt.n	362e <torch(LEDStruct&)+0x16a>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3660:	f895 72d6 	ldrb.w	r7, [r5, #726]	; 0x2d6
    3664:	2f00      	cmp	r7, #0
    3666:	d172      	bne.n	374e <torch(LEDStruct&)+0x28a>
    3668:	f505 7822 	add.w	r8, r5, #648	; 0x288
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    366c:	b1d3      	cbz	r3, 36a4 <torch(LEDStruct&)+0x1e0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    366e:	334a      	adds	r3, #74	; 0x4a
    3670:	1bdc      	subs	r4, r3, r7
    3672:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3676:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    367a:	4630      	mov	r0, r6
    367c:	f001 fbfe 	bl	4e7c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3680:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3684:	552b      	strb	r3, [r5, r4]
    3686:	442c      	add	r4, r5
        g = rhs.g;
        b = rhs.b;
    3688:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    368c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3690:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    3692:	70a3      	strb	r3, [r4, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3694:	f895 32d4 	ldrb.w	r3, [r5, #724]	; 0x2d4
    3698:	3701      	adds	r7, #1
    369a:	42bb      	cmp	r3, r7
    369c:	dce7      	bgt.n	366e <torch(LEDStruct&)+0x1aa>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    369e:	2b4b      	cmp	r3, #75	; 0x4b
    36a0:	d04f      	beq.n	3742 <torch(LEDStruct&)+0x27e>
    36a2:	ae05      	add	r6, sp, #20
    36a4:	f205 1ac7 	addw	sl, r5, #455	; 0x1c7
    36a8:	462f      	mov	r7, r5
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    36aa:	462c      	mov	r4, r5
    36ac:	f04f 0800 	mov.w	r8, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index);
    36b0:	f04f 0901 	mov.w	r9, #1
    36b4:	e012      	b.n	36dc <torch(LEDStruct&)+0x218>
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index);
		if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    36b6:	f895 22d8 	ldrb.w	r2, [r5, #728]	; 0x2d8
    36ba:	f895 32d9 	ldrb.w	r3, [r5, #729]	; 0x2d9
    36be:	4413      	add	r3, r2
    36c0:	f885 32d8 	strb.w	r3, [r5, #728]	; 0x2d8
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    36c4:	f895 32d4 	ldrb.w	r3, [r5, #724]	; 0x2d4
    36c8:	f108 0801 	add.w	r8, r8, #1
    36cc:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    36d0:	4543      	cmp	r3, r8
    36d2:	f104 0403 	add.w	r4, r4, #3
    36d6:	f1a7 0703 	sub.w	r7, r7, #3
    36da:	dd32      	ble.n	3742 <torch(LEDStruct&)+0x27e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index);
    36dc:	f895 22d8 	ldrb.w	r2, [r5, #728]	; 0x2d8
    36e0:	f8cd 9000 	str.w	r9, [sp]
    36e4:	23ff      	movs	r3, #255	; 0xff
    36e6:	4651      	mov	r1, sl
    36e8:	4630      	mov	r0, r6
    36ea:	f001 fbe9 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36ee:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    36f2:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    36f6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36fa:	7021      	strb	r1, [r4, #0]
        g = rhs.g;
        b = rhs.b;
    36fc:	70a3      	strb	r3, [r4, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    36fe:	7062      	strb	r2, [r4, #1]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index);
    3700:	f895 22d8 	ldrb.w	r2, [r5, #728]	; 0x2d8
    3704:	f8cd 9000 	str.w	r9, [sp]
    3708:	23ff      	movs	r3, #255	; 0xff
    370a:	4651      	mov	r1, sl
    370c:	4630      	mov	r0, r6
    370e:	f001 fbd7 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
        b = rhs.b;
    3712:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3716:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    371a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    371e:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
    3722:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
        b = rhs.b;
    3726:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
		if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    372a:	f895 31c5 	ldrb.w	r3, [r5, #453]	; 0x1c5
    372e:	2b00      	cmp	r3, #0
    3730:	d1c1      	bne.n	36b6 <torch(LEDStruct&)+0x1f2>
		else { leds.torch_index -= leds.torch_diff; }
    3732:	f895 32d8 	ldrb.w	r3, [r5, #728]	; 0x2d8
    3736:	f895 22d9 	ldrb.w	r2, [r5, #729]	; 0x2d9
    373a:	1a9b      	subs	r3, r3, r2
    373c:	f885 32d8 	strb.w	r3, [r5, #728]	; 0x2d8
    3740:	e7c0      	b.n	36c4 <torch(LEDStruct&)+0x200>
	}
}
    3742:	b007      	add	sp, #28
    3744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3748:	f1b9 0f00 	cmp.w	r9, #0
    374c:	d0a9      	beq.n	36a2 <torch(LEDStruct&)+0x1de>
    374e:	462a      	mov	r2, r5
    3750:	f105 04e1 	add.w	r4, r5, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3754:	4629      	mov	r1, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3756:	7810      	ldrb	r0, [r2, #0]
    3758:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    375c:	7850      	ldrb	r0, [r2, #1]
    375e:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    3762:	7890      	ldrb	r0, [r2, #2]
    3764:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    3768:	3203      	adds	r2, #3
    376a:	4294      	cmp	r4, r2
    376c:	f1a1 0103 	sub.w	r1, r1, #3
    3770:	d1f1      	bne.n	3756 <torch(LEDStruct&)+0x292>
    3772:	e794      	b.n	369e <torch(LEDStruct&)+0x1da>
    3774:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3778:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    377c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3780:	3219      	adds	r2, #25
    3782:	b292      	uxth	r2, r2
    3784:	eb02 2442 	add.w	r4, r2, r2, lsl #9
    3788:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    378c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    3790:	3419      	adds	r4, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3792:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3796:	b2a4      	uxth	r4, r4
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3798:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    379a:	eb04 2014 	add.w	r0, r4, r4, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    379e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    37a2:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    37a4:	eb05 2222 	add.w	r2, r5, r2, asr #8
    37a8:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    37ac:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    37b0:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37b4:	800c      	strh	r4, [r1, #0]
    37b6:	1201      	asrs	r1, r0, #8
    37b8:	3960      	subs	r1, #96	; 0x60
    37ba:	4630      	mov	r0, r6
    37bc:	fa80 f051 	uqadd8	r0, r0, r1
    37c0:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    37c4:	f1bc 0f00 	cmp.w	ip, #0
    37c8:	f47f af2d 	bne.w	3626 <torch(LEDStruct&)+0x162>
    37cc:	e769      	b.n	36a2 <torch(LEDStruct&)+0x1de>
    37ce:	f20c 2685 	addw	r6, ip, #645	; 0x285
    37d2:	f20c 2e87 	addw	lr, ip, #647	; 0x287
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    37d6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 3800 <torch(LEDStruct&)+0x33c>
    37da:	442e      	add	r6, r5
    37dc:	44ae      	add	lr, r5
    37de:	7831      	ldrb	r1, [r6, #0]
    37e0:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    37e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    37e8:	fb88 a001 	smull	sl, r0, r8, r1
    37ec:	3f01      	subs	r7, #1
    37ee:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    37f2:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    37f4:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    37f8:	d1f1      	bne.n	37de <torch(LEDStruct&)+0x31a>
    37fa:	e6c0      	b.n	357e <torch(LEDStruct&)+0xba>
    37fc:	1fff8734 	.word	0x1fff8734
    3800:	55555556 	.word	0x55555556
    3804:	f895 123d 	ldrb.w	r1, [r5, #573]	; 0x23d
    3808:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    380c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3810:	fb9e fefc 	sdiv	lr, lr, ip
    3814:	f10e 0e02 	add.w	lr, lr, #2
    3818:	fa5f fe8e 	uxtb.w	lr, lr
    381c:	f505 7722 	add.w	r7, r5, #648	; 0x288
    3820:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3824:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3828:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    382c:	3219      	adds	r2, #25
    382e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3830:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3834:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3838:	b2c9      	uxtb	r1, r1
    383a:	fb11 f10e 	smulbb	r1, r1, lr
    383e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3842:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3844:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3848:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    384a:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    384c:	dbe8      	blt.n	3820 <torch(LEDStruct&)+0x35c>
    384e:	8022      	strh	r2, [r4, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3850:	f1ac 0703 	sub.w	r7, ip, #3
    3854:	2f01      	cmp	r7, #1
    3856:	f04f 0900 	mov.w	r9, #0
    385a:	f73f ae75 	bgt.w	3548 <torch(LEDStruct&)+0x84>
    385e:	e68e      	b.n	357e <torch(LEDStruct&)+0xba>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3860:	8823      	ldrh	r3, [r4, #0]
    3862:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3866:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    386a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    386e:	3119      	adds	r1, #25
    3870:	b289      	uxth	r1, r1
    3872:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3876:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    387a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    387e:	3219      	adds	r2, #25
    3880:	b292      	uxth	r2, r2
    3882:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    3886:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    388a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    388e:	3319      	adds	r3, #25
    3890:	b29b      	uxth	r3, r3
    3892:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3896:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    389a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    389e:	f10e 0e19 	add.w	lr, lr, #25
    38a2:	fa1f fe8e 	uxth.w	lr, lr
    38a6:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    38aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    38ae:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    38b2:	3619      	adds	r6, #25
    38b4:	b2b6      	uxth	r6, r6
    38b6:	eb06 2746 	add.w	r7, r6, r6, lsl #9
    38ba:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    38be:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    38c2:	3719      	adds	r7, #25
    38c4:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    38c6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    38ca:	eb0e 2c1e 	add.w	ip, lr, lr, lsr #8
    38ce:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    38d2:	eb07 2817 	add.w	r8, r7, r7, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    38d6:	fa5f fe83 	uxtb.w	lr, r3
    38da:	fa5f fc8c 	uxtb.w	ip, ip
    38de:	b2f3      	uxtb	r3, r6
    38e0:	fa5f f888 	uxtb.w	r8, r8
    38e4:	eb0e 064e 	add.w	r6, lr, lr, lsl #1
    38e8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    38ec:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
    38f0:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
    38f4:	ebc6 0ec6 	rsb	lr, r6, r6, lsl #3
    38f8:	ea4f 1cac 	mov.w	ip, ip, asr #6
    38fc:	119e      	asrs	r6, r3, #6
    38fe:	ea4f 2328 	mov.w	r3, r8, asr #8
    3902:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3906:	f10c 0c32 	add.w	ip, ip, #50	; 0x32
    390a:	363c      	adds	r6, #60	; 0x3c
    390c:	3301      	adds	r3, #1
    390e:	f10e 080a 	add.w	r8, lr, #10
    3912:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3916:	fa5f fe8c 	uxtb.w	lr, ip
    391a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    391e:	fa5f fc86 	uxtb.w	ip, r6
    3922:	b2de      	uxtb	r6, r3
    3924:	f8cd e000 	str.w	lr, [sp]
    3928:	f8cd c004 	str.w	ip, [sp, #4]
    392c:	9602      	str	r6, [sp, #8]
    392e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3932:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3936:	fa5f f388 	uxtb.w	r3, r8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    393a:	8027      	strh	r7, [r4, #0]
    393c:	f7ff fa8c 	bl	2e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3940:	e5ca      	b.n	34d8 <torch(LEDStruct&)+0x14>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3942:	f895 22d6 	ldrb.w	r2, [r5, #726]	; 0x2d6
    3946:	b10a      	cbz	r2, 394c <torch(LEDStruct&)+0x488>
    3948:	8822      	ldrh	r2, [r4, #0]
    394a:	e5f7      	b.n	353c <torch(LEDStruct&)+0x78>
    394c:	8822      	ldrh	r2, [r4, #0]
    394e:	e77f      	b.n	3850 <torch(LEDStruct&)+0x38c>

00003950 <colorwave(LEDStruct&)>:
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    3950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    3954:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    3958:	b08b      	sub	sp, #44	; 0x2c
    395a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    395c:	2b00      	cmp	r3, #0
    395e:	f000 81b3 	beq.w	3cc8 <colorwave(LEDStruct&)+0x378>
    3962:	f8b0 52fa 	ldrh.w	r5, [r0, #762]	; 0x2fa
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3966:	4ad3      	ldr	r2, [pc, #844]	; (3cb4 <colorwave(LEDStruct&)+0x364>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3968:	4bd3      	ldr	r3, [pc, #844]	; (3cb8 <colorwave(LEDStruct&)+0x368>)
    396a:	6811      	ldr	r1, [r2, #0]
    396c:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    396e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3970:	fb03 f000 	mul.w	r0, r3, r0
    3974:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3976:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3978:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    397c:	d503      	bpl.n	3986 <colorwave(LEDStruct&)+0x36>
    397e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3982:	3307      	adds	r3, #7
    3984:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3986:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    3988:	f8df 8338 	ldr.w	r8, [pc, #824]	; 3cc4 <colorwave(LEDStruct&)+0x374>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    398c:	4fcb      	ldr	r7, [pc, #812]	; (3cbc <colorwave(LEDStruct&)+0x36c>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    398e:	f818 e001 	ldrb.w	lr, [r8, r1]
    3992:	f837 6011 	ldrh.w	r6, [r7, r1, lsl #1]
    3996:	f3c3 0146 	ubfx	r1, r3, #1, #7
    399a:	fb0e 6301 	mla	r3, lr, r1, r6

    if( theta & 0x8000 ) y = -y;
    399e:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39a0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    39a2:	bf48      	it	mi
    39a4:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39a6:	6811      	ldr	r1, [r2, #0]
    39a8:	9108      	str	r1, [sp, #32]
    39aa:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    39ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    39b0:	b29b      	uxth	r3, r3
	return ret;
    39b2:	9e08      	ldr	r6, [sp, #32]
    39b4:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    39b8:	f64d 6308 	movw	r3, #56840	; 0xde08
    39bc:	fb03 f606 	mul.w	r6, r3, r6
    39c0:	0c00      	lsrs	r0, r0, #16
    39c2:	0c36      	lsrs	r6, r6, #16
    39c4:	3060      	adds	r0, #96	; 0x60
    39c6:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    39c8:	0471      	lsls	r1, r6, #17
    39ca:	f884 02e0 	strb.w	r0, [r4, #736]	; 0x2e0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    39ce:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    39d2:	d503      	bpl.n	39dc <colorwave(LEDStruct&)+0x8c>
    39d4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    39d8:	3307      	adds	r3, #7
    39da:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    39dc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39e0:	f3c3 0146 	ubfx	r1, r3, #1, #7
    39e4:	f818 c00e 	ldrb.w	ip, [r8, lr]
    39e8:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    39ec:	fb0c 3301 	mla	r3, ip, r1, r3
    39f0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    39f2:	0431      	lsls	r1, r6, #16
    39f4:	bf48      	it	mi
    39f6:	425b      	negmi	r3, r3
    39f8:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39fa:	6811      	ldr	r1, [r2, #0]
    39fc:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    39fe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3a02:	b29b      	uxth	r3, r3
    3a04:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    3a08:	9e07      	ldr	r6, [sp, #28]
    3a0a:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3a0e:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    3a12:	fb03 fe06 	mul.w	lr, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3a16:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3a18:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3a1c:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    3a20:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a22:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    3a26:	f8a4 12e6 	strh.w	r1, [r4, #742]	; 0x2e6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3a2a:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a2e:	d003      	beq.n	3a38 <colorwave(LEDStruct&)+0xe8>
    3a30:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3a34:	3307      	adds	r3, #7
    3a36:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3a38:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a3c:	f3c3 0646 	ubfx	r6, r3, #1, #7
    3a40:	f818 900c 	ldrb.w	r9, [r8, ip]
    3a44:	f837 301c 	ldrh.w	r3, [r7, ip, lsl #1]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    3a48:	f8b4 c2de 	ldrh.w	ip, [r4, #734]	; 0x2de
    3a4c:	f8a4 c2e8 	strh.w	ip, [r4, #744]	; 0x2e8
    3a50:	fb09 3306 	mla	r3, r9, r6, r3

    if( theta & 0x8000 ) y = -y;
    3a54:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a58:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3a5a:	bf18      	it	ne
    3a5c:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a5e:	6816      	ldr	r6, [r2, #0]
    3a60:	9606      	str	r6, [sp, #24]
    3a62:	b21b      	sxth	r3, r3
    3a64:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3a68:	b29b      	uxth	r3, r3
    3a6a:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    3a6e:	9e06      	ldr	r6, [sp, #24]
    3a70:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3a74:	f647 3398 	movw	r3, #31640	; 0x7b98
    3a78:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3a7c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3a80:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3a82:	f10e 0e17 	add.w	lr, lr, #23
    3a86:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a8a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
	if (!leds.mode_initialized) { colorwave_init(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    3a8e:	f884 e2e1 	strb.w	lr, [r4, #737]	; 0x2e1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3a92:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a96:	d003      	beq.n	3aa0 <colorwave(LEDStruct&)+0x150>
    3a98:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3a9c:	3307      	adds	r3, #7
    3a9e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3aa0:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3aa4:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3aa8:	f818 b00a 	ldrb.w	fp, [r8, sl]
    3aac:	f837 901a 	ldrh.w	r9, [r7, sl, lsl #1]
    3ab0:	fb0b 9903 	mla	r9, fp, r3, r9
    3ab4:	fa1f f989 	uxth.w	r9, r9

    if( theta & 0x8000 ) y = -y;
    3ab8:	0433      	lsls	r3, r6, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3aba:	6813      	ldr	r3, [r2, #0]
    3abc:	9304      	str	r3, [sp, #16]
    3abe:	bf48      	it	mi
    3ac0:	f1c9 0900 	rsbmi	r9, r9, #0
	return ret;
    3ac4:	9b04      	ldr	r3, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ac6:	6812      	ldr	r2, [r2, #0]
    3ac8:	9205      	str	r2, [sp, #20]
    3aca:	fa0f f989 	sxth.w	r9, r9
    3ace:	f5a9 4200 	sub.w	r2, r9, #32768	; 0x8000

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3ad2:	f8b4 62dc 	ldrh.w	r6, [r4, #732]	; 0x2dc
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3ad6:	f8b4 b2da 	ldrh.w	fp, [r4, #730]	; 0x2da
    3ada:	b292      	uxth	r2, r2
    3adc:	f240 49b1 	movw	r9, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    3ae0:	fa1f fa83 	uxth.w	sl, r3
    3ae4:	fb09 f302 	mul.w	r3, r9, r2
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3ae8:	4a75      	ldr	r2, [pc, #468]	; (3cc0 <colorwave(LEDStruct&)+0x370>)
	return ret;
    3aea:	f8dd 9014 	ldr.w	r9, [sp, #20]
    3aee:	f8a4 a2ec 	strh.w	sl, [r4, #748]	; 0x2ec
	leds.deltams = leds.ms - leds.sLastMillis;
    3af2:	ebc6 060a 	rsb	r6, r6, sl
    3af6:	b2b6      	uxth	r6, r6
    3af8:	fb02 f909 	mul.w	r9, r2, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3afc:	0c1b      	lsrs	r3, r3, #16
    3afe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3b02:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3b06:	fb16 be0e 	smlabb	lr, r6, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3b0a:	b29a      	uxth	r2, r3
    3b0c:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b10:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    3b14:	f8a4 22ea 	strh.w	r2, [r4, #746]	; 0x2ea

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3b18:	f8a4 62ee 	strh.w	r6, [r4, #750]	; 0x2ee
	leds.sLastMillis = leds.ms;
    3b1c:	f8a4 a2dc 	strh.w	sl, [r4, #732]	; 0x2dc
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3b20:	f8a4 e2da 	strh.w	lr, [r4, #730]	; 0x2da
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b24:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b28:	d003      	beq.n	3b32 <colorwave(LEDStruct&)+0x1e2>
    3b2a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3b2e:	3307      	adds	r3, #7
    3b30:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b32:	ea4f 2b13 	mov.w	fp, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b36:	f3c3 0a46 	ubfx	sl, r3, #1, #7
    3b3a:	f818 300b 	ldrb.w	r3, [r8, fp]
    3b3e:	f837 b01b 	ldrh.w	fp, [r7, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    3b42:	f8a4 e2f0 	strh.w	lr, [r4, #752]	; 0x2f0
    3b46:	fb03 b30a 	mla	r3, r3, sl, fp
    3b4a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3b4c:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    3b50:	bf18      	it	ne
    3b52:	425b      	negne	r3, r3
    3b54:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    3b56:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3b5a:	b29b      	uxth	r3, r3
    3b5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b60:	0c1b      	lsrs	r3, r3, #16
    3b62:	3305      	adds	r3, #5
    3b64:	b29b      	uxth	r3, r3
    3b66:	fb06 c303 	mla	r3, r6, r3, ip
    3b6a:	f8a4 32de 	strh.w	r3, [r4, #734]	; 0x2de
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3b6e:	2d00      	cmp	r5, #0
    3b70:	f000 8089 	beq.w	3c86 <colorwave(LEDStruct&)+0x336>
    3b74:	4613      	mov	r3, r2
    3b76:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    3b7a:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3b7c:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3b80:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    3b82:	4463      	add	r3, ip
    3b84:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    3b86:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    3b8a:	448e      	add	lr, r1
    3b8c:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    3b90:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    3b94:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    3b98:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    3b9a:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    3b9e:	bf08      	it	eq
    3ba0:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ba2:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    3ba6:	f884 b2e2 	strb.w	fp, [r4, #738]	; 0x2e2
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    3baa:	f8a4 32e8 	strh.w	r3, [r4, #744]	; 0x2e8
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    3bae:	f8a4 c2f2 	strh.w	ip, [r4, #754]	; 0x2f2
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    3bb2:	f884 22e2 	strb.w	r2, [r4, #738]	; 0x2e2
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    3bb6:	f8a4 e2f0 	strh.w	lr, [r4, #752]	; 0x2f0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3bba:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bbe:	d003      	beq.n	3bc8 <colorwave(LEDStruct&)+0x278>
    3bc0:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3bc4:	3107      	adds	r1, #7
    3bc6:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3bc8:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bcc:	f3c1 0346 	ubfx	r3, r1, #1, #7
    3bd0:	f818 b00c 	ldrb.w	fp, [r8, ip]
    3bd4:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    3bd8:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    3bdc:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3be0:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3be2:	bf18      	it	ne
    3be4:	4249      	negne	r1, r1
    3be6:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3be8:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    3bec:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3bee:	fb01 fe01 	mul.w	lr, r1, r1
    3bf2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3bf6:	fb0e f300 	mul.w	r3, lr, r0
    3bfa:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    3bfe:	43c0      	mvns	r0, r0
    3c00:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    3c04:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    3c08:	b2db      	uxtb	r3, r3
    3c0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3c0e:	f8a4 12f4 	strh.w	r1, [r4, #756]	; 0x2f4

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3c12:	f8a4 e2f6 	strh.w	lr, [r4, #758]	; 0x2f6
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3c16:	f884 32e3 	strb.w	r3, [r4, #739]	; 0x2e3

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3c1a:	4651      	mov	r1, sl
    3c1c:	f8cd 9000 	str.w	r9, [sp]
    3c20:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    3c22:	f884 22e4 	strb.w	r2, [r4, #740]	; 0x2e4

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3c26:	f001 f94b 	bl	4ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    3c2a:	f8b4 32fa 	ldrh.w	r3, [r4, #762]	; 0x2fa
    3c2e:	3b01      	subs	r3, #1
    3c30:	1b9b      	subs	r3, r3, r6
    3c32:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    3c34:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    3c38:	f8a4 32f8 	strh.w	r3, [r4, #760]	; 0x2f8

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    3c3c:	4420      	add	r0, r4
    3c3e:	2280      	movs	r2, #128	; 0x80
    3c40:	a903      	add	r1, sp, #12
    3c42:	3d01      	subs	r5, #1
    3c44:	f001 f8de 	bl	4e04 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    3c48:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3c4c:	d00a      	beq.n	3c64 <colorwave(LEDStruct&)+0x314>
    3c4e:	f8b4 c2e8 	ldrh.w	ip, [r4, #744]	; 0x2e8
    3c52:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
    3c56:	f8b4 e2f0 	ldrh.w	lr, [r4, #752]	; 0x2f0
    3c5a:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
    3c5e:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    3c62:	e78e      	b.n	3b82 <colorwave(LEDStruct&)+0x232>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3c64:	3601      	adds	r6, #1
    3c66:	f8b4 32fa 	ldrh.w	r3, [r4, #762]	; 0x2fa
    3c6a:	b2b6      	uxth	r6, r6
    3c6c:	42b3      	cmp	r3, r6
    3c6e:	d90a      	bls.n	3c86 <colorwave(LEDStruct&)+0x336>
    3c70:	f8b4 c2e8 	ldrh.w	ip, [r4, #744]	; 0x2e8
    3c74:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
    3c78:	f8b4 e2f0 	ldrh.w	lr, [r4, #752]	; 0x2f0
    3c7c:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
    3c80:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    3c84:	e77c      	b.n	3b80 <colorwave(LEDStruct&)+0x230>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    3c86:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3c8a:	b983      	cbnz	r3, 3cae <colorwave(LEDStruct&)+0x35e>
    3c8c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3c90:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c92:	781a      	ldrb	r2, [r3, #0]
    3c94:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    3c98:	785a      	ldrb	r2, [r3, #1]
    3c9a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    3c9e:	789a      	ldrb	r2, [r3, #2]
    3ca0:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    3ca4:	3303      	adds	r3, #3
    3ca6:	4299      	cmp	r1, r3
    3ca8:	f1a4 0403 	sub.w	r4, r4, #3
    3cac:	d1f1      	bne.n	3c92 <colorwave(LEDStruct&)+0x342>
}
    3cae:	b00b      	add	sp, #44	; 0x2c
    3cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cb4:	1fff94e8 	.word	0x1fff94e8
    3cb8:	000174f8 	.word	0x000174f8
    3cbc:	00007df8 	.word	0x00007df8
    3cc0:	0001b580 	.word	0x0001b580
    3cc4:	00008664 	.word	0x00008664
    3cc8:	4810      	ldr	r0, [pc, #64]	; (3d0c <colorwave(LEDStruct&)+0x3bc>)
    3cca:	8803      	ldrh	r3, [r0, #0]
    3ccc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3cd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3cd4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3cd8:	3319      	adds	r3, #25
    3cda:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cdc:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3ce0:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3ce2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    3ce6:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ce8:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    3cea:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3cee:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    3cf2:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
	leds.mode_type = COLORWAVE;
    3cf6:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3cfa:	b11a      	cbz	r2, 3d04 <colorwave(LEDStruct&)+0x3b4>
    3cfc:	2596      	movs	r5, #150	; 0x96
    3cfe:	f8a4 52fa 	strh.w	r5, [r4, #762]	; 0x2fa
    3d02:	e630      	b.n	3966 <colorwave(LEDStruct&)+0x16>
	else					 { leds.strip_range = ONE_SIDE; }
    3d04:	254b      	movs	r5, #75	; 0x4b
    3d06:	f8a4 52fa 	strh.w	r5, [r4, #762]	; 0x2fa
    3d0a:	e62c      	b.n	3966 <colorwave(LEDStruct&)+0x16>
    3d0c:	1fff8734 	.word	0x1fff8734

00003d10 <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    3d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    3d12:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    3d16:	b085      	sub	sp, #20
    3d18:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    3d1a:	2b0f      	cmp	r3, #15
    3d1c:	f200 8477 	bhi.w	460e <switch_mode(LEDStruct&)+0x8fe>
    3d20:	e8df f013 	tbh	[pc, r3, lsl #1]
    3d24:	022101a0 	.word	0x022101a0
    3d28:	006802a5 	.word	0x006802a5
    3d2c:	042100e5 	.word	0x042100e5
    3d30:	013d00eb 	.word	0x013d00eb
    3d34:	03770326 	.word	0x03770326
    3d38:	001003c8 	.word	0x001003c8
    3d3c:	01430062 	.word	0x01430062
    3d40:	02a0014e 	.word	0x02a0014e
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    3d44:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d14d      	bne.n	3de8 <switch_mode(LEDStruct&)+0xd8>
    3d4c:	49c4      	ldr	r1, [pc, #784]	; (4060 <switch_mode(LEDStruct&)+0x350>)

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    3d4e:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    3d52:	880b      	ldrh	r3, [r1, #0]
    3d54:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3d58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3d5c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d60:	3319      	adds	r3, #25
    3d62:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3d66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3d6a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3d6e:	3319      	adds	r3, #25
    3d70:	b29b      	uxth	r3, r3
    3d72:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3d76:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3d7a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3d7e:	3219      	adds	r2, #25
    3d80:	b292      	uxth	r2, r2
    3d82:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3d86:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3d8a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3d8e:	3019      	adds	r0, #25
    3d90:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d92:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3d96:	eb00 2510 	add.w	r5, r0, r0, lsr #8
    3d9a:	eb02 2212 	add.w	r2, r2, r2, lsr #8

	leds.fire_sparking		= fs;
    3d9e:	b2db      	uxtb	r3, r3
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    3da0:	b2ed      	uxtb	r5, r5
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    3da2:	b2d2      	uxtb	r2, r2
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    3da4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    3da8:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    3dac:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    3db0:	119b      	asrs	r3, r3, #6
    3db2:	3332      	adds	r3, #50	; 0x32
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    3db4:	122d      	asrs	r5, r5, #8
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    3db6:	1192      	asrs	r2, r2, #6
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
    3db8:	2601      	movs	r6, #1

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    3dba:	3501      	adds	r5, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    3dbc:	323c      	adds	r2, #60	; 0x3c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    3dbe:	2708      	movs	r7, #8
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    3dc0:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    3dc4:	2325      	movs	r3, #37	; 0x25
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3dc6:	8008      	strh	r0, [r1, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    3dc8:	f884 52d9 	strb.w	r5, [r4, #729]	; 0x2d9
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    3dcc:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
    3dd0:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    3dd4:	f884 62d6 	strb.w	r6, [r4, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    3dd8:	f884 62d7 	strb.w	r6, [r4, #727]	; 0x2d7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    3ddc:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    3de0:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
    3de4:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    3de8:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3dea:	b005      	add	sp, #20
    3dec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    3df0:	f7ff b874 	b.w	2edc <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    3df4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d178      	bne.n	3eee <switch_mode(LEDStruct&)+0x1de>
    3dfc:	4998      	ldr	r1, [pc, #608]	; (4060 <switch_mode(LEDStruct&)+0x350>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3dfe:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    3e02:	880b      	ldrh	r3, [r1, #0]
    3e04:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3e08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e0c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3e10:	3319      	adds	r3, #25
    3e12:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3e16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e1a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3e1e:	3319      	adds	r3, #25
    3e20:	b29b      	uxth	r3, r3
    3e22:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e2a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3e2e:	3019      	adds	r0, #25
    3e30:	b280      	uxth	r0, r0
    3e32:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    3e36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    3e3a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3e3e:	3219      	adds	r2, #25
    3e40:	b292      	uxth	r2, r2
    3e42:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    3e46:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    3e4a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3e4e:	3719      	adds	r7, #25
    3e50:	b2bf      	uxth	r7, r7
    3e52:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    3e56:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    3e5a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3e5e:	3519      	adds	r5, #25
    3e60:	b2ad      	uxth	r5, r5
    3e62:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e66:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e6a:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e6e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3e72:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3e76:	b2db      	uxtb	r3, r3
    3e78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3e7c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e7e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3e82:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3e84:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3e86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3e8a:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3e8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    3e92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3e96:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3e9a:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3e9c:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e9e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3ea2:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    3ea4:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3ea8:	f100 0208 	add.w	r2, r0, #8
    3eac:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3eb0:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    3eb4:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3eb8:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    3eba:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    3ebc:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3ec0:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3ec4:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3ec8:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3eca:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    3ece:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ed2:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3ed6:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3eda:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    3ede:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3ee2:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    3ee6:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    3eea:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    3eee:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3ef0:	b005      	add	sp, #20
    3ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    3ef6:	f7fe b9ad 	b.w	2254 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    3efa:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3efe:	2b00      	cmp	r3, #0
    3f00:	d14d      	bne.n	3f9e <switch_mode(LEDStruct&)+0x28e>
    3f02:	4957      	ldr	r1, [pc, #348]	; (4060 <switch_mode(LEDStruct&)+0x350>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    3f04:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    3f08:	880b      	ldrh	r3, [r1, #0]
    3f0a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f12:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f16:	3319      	adds	r3, #25
    3f18:	b29b      	uxth	r3, r3
    3f1a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f1e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3f22:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f26:	3219      	adds	r2, #25
    3f28:	b292      	uxth	r2, r2
    3f2a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3f2e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3f32:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3f36:	3019      	adds	r0, #25
    3f38:	b280      	uxth	r0, r0
    3f3a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3f3e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f42:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3f46:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f4a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f4e:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    3f50:	b2d2      	uxtb	r2, r2
    3f52:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f54:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3f58:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    3f5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f5e:	121b      	asrs	r3, r3, #8
    3f60:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    3f62:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f64:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    3f68:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    3f6c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3f70:	2701      	movs	r7, #1
	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3f72:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3f74:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3f78:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    3f7c:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    3f7e:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3f82:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3f86:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3f8a:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    3f8e:	f884 7239 	strb.w	r7, [r4, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    3f92:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    3f96:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f98:	800d      	strh	r5, [r1, #0]
    3f9a:	f7fc fead 	bl	cf8 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    3f9e:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3fa0:	b005      	add	sp, #20
    3fa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    3fa6:	f7fe be93 	b.w	2cd0 <rainbow_march(LEDStruct&)>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
    3faa:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3fae:	2a00      	cmp	r2, #0
    3fb0:	f000 832f 	beq.w	4612 <switch_mode(LEDStruct&)+0x902>
			torch(leds);
    3fb4:	4620      	mov	r0, r4
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    3fb6:	b005      	add	sp, #20
    3fb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
			torch(leds);
    3fbc:	f7ff ba82 	b.w	34c4 <torch(LEDStruct&)>
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror must be off
    3fc0:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    3fc4:	2a00      	cmp	r2, #0
    3fc6:	d1f5      	bne.n	3fb4 <switch_mode(LEDStruct&)+0x2a4>
    3fc8:	4d25      	ldr	r5, [pc, #148]	; (4060 <switch_mode(LEDStruct&)+0x350>)
    3fca:	882b      	ldrh	r3, [r5, #0]
    3fcc:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3fd0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3fd4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fd8:	3319      	adds	r3, #25
    3fda:	b29b      	uxth	r3, r3
    3fdc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3fe0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3fe4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3fe8:	3019      	adds	r0, #25
    3fea:	b280      	uxth	r0, r0
    3fec:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    3ff0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    3ff4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3ff8:	3119      	adds	r1, #25
    3ffa:	b289      	uxth	r1, r1
    3ffc:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4000:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    4004:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4008:	3619      	adds	r6, #25
    400a:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    400c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    4010:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4014:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4018:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    401c:	b2db      	uxtb	r3, r3
    401e:	b2c0      	uxtb	r0, r0
    4020:	b2ff      	uxtb	r7, r7
    4022:	b2c9      	uxtb	r1, r1
    4024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4028:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    402c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    4030:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4034:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4038:	1180      	asrs	r0, r0, #6
    403a:	123f      	asrs	r7, r7, #8
    403c:	1189      	asrs	r1, r1, #6
    403e:	121b      	asrs	r3, r3, #8
    4040:	3032      	adds	r0, #50	; 0x32
    4042:	3701      	adds	r7, #1
    4044:	313c      	adds	r1, #60	; 0x3c
    4046:	b2c0      	uxtb	r0, r0
    4048:	b2ff      	uxtb	r7, r7
    404a:	b2c9      	uxtb	r1, r1
    404c:	330a      	adds	r3, #10
    404e:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    4052:	b2db      	uxtb	r3, r3
    4054:	2101      	movs	r1, #1
    4056:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4058:	802e      	strh	r6, [r5, #0]
    405a:	f7fe fefd 	bl	2e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    405e:	e7a9      	b.n	3fb4 <switch_mode(LEDStruct&)+0x2a4>
    4060:	1fff8734 	.word	0x1fff8734
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    4064:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    4068:	2900      	cmp	r1, #0
    406a:	f47f af40 	bne.w	3eee <switch_mode(LEDStruct&)+0x1de>
    406e:	48bf      	ldr	r0, [pc, #764]	; (436c <switch_mode(LEDStruct&)+0x65c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4070:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    4074:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4076:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    407a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    407e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4082:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4086:	3319      	adds	r3, #25
    4088:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    408c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4090:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4094:	3319      	adds	r3, #25
    4096:	b29b      	uxth	r3, r3
    4098:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    409c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    40a0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    40a4:	3519      	adds	r5, #25
    40a6:	b2ad      	uxth	r5, r5
    40a8:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    40ac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    40b0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    40b4:	3219      	adds	r2, #25
    40b6:	b292      	uxth	r2, r2
    40b8:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    40bc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    40c0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    40c4:	3719      	adds	r7, #25
    40c6:	b2bf      	uxth	r7, r7
    40c8:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    40cc:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    40d0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    40d4:	3619      	adds	r6, #25
    40d6:	b2b6      	uxth	r6, r6
    40d8:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    40dc:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40e0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    40e4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    40e8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    40ec:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40ee:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    40f2:	b2ed      	uxtb	r5, r5
    40f4:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    40f8:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    40fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    40fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4102:	fa1f fc8e 	uxth.w	ip, lr
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    410a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    410e:	11ad      	asrs	r5, r5, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4110:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4114:	ea4f 1ee3 	mov.w	lr, r3, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    4118:	f3c7 1742 	ubfx	r7, r7, #5, #3

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    411c:	1193      	asrs	r3, r2, #6
    411e:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4122:	f105 0208 	add.w	r2, r5, #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4126:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    412a:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    412e:	f10e 0e01 	add.w	lr, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4132:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4134:	1c7d      	adds	r5, r7, #1
	leds.juggle_index_reset  = jir;
    4136:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    413a:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    413e:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4142:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4144:	f884 e22f 	strb.w	lr, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4148:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    414c:	f884 5232 	strb.w	r5, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4150:	f8a0 c000 	strh.w	ip, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4154:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4158:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    415c:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4160:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
    4164:	e6c3      	b.n	3eee <switch_mode(LEDStruct&)+0x1de>
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    4166:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    416a:	2a00      	cmp	r2, #0
    416c:	f47f aebf 	bne.w	3eee <switch_mode(LEDStruct&)+0x1de>
    4170:	497e      	ldr	r1, [pc, #504]	; (436c <switch_mode(LEDStruct&)+0x65c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4172:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    4176:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4178:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    417c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4180:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4184:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4188:	3319      	adds	r3, #25
    418a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    418e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4192:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4196:	3319      	adds	r3, #25
    4198:	b29b      	uxth	r3, r3
    419a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    419e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    41a2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    41a6:	3019      	adds	r0, #25
    41a8:	b280      	uxth	r0, r0
    41aa:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    41ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    41b2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    41b6:	3219      	adds	r2, #25
    41b8:	b292      	uxth	r2, r2
    41ba:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    41be:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    41c2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    41c6:	3719      	adds	r7, #25
    41c8:	b2bf      	uxth	r7, r7
    41ca:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    41ce:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    41d2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    41d6:	3519      	adds	r5, #25
    41d8:	b2ad      	uxth	r5, r5
    41da:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41de:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41e2:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41e6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    41ea:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_numdots 	 = jn;
    41ee:	b2db      	uxtb	r3, r3
    41f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    41f4:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41f6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    41fa:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    41fc:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    41fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4202:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4206:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    420a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    420e:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4212:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4214:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4216:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    421a:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    421c:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4220:	f100 0208 	add.w	r2, r0, #8
    4224:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4228:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    422c:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4230:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4232:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    4234:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4238:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    423c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4240:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4242:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    4246:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    424a:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    424e:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4252:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4256:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    425a:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    425e:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    4262:	e644      	b.n	3eee <switch_mode(LEDStruct&)+0x1de>
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    4264:	b005      	add	sp, #20
    4266:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			torch(leds);
			break;

		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
    426a:	f7ff bb71 	b.w	3950 <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    426e:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4272:	2a00      	cmp	r2, #0
    4274:	f47f ae3b 	bne.w	3eee <switch_mode(LEDStruct&)+0x1de>
    4278:	493c      	ldr	r1, [pc, #240]	; (436c <switch_mode(LEDStruct&)+0x65c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    427a:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    427e:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4280:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    4284:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4288:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    428c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4290:	3319      	adds	r3, #25
    4292:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4296:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    429a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    429e:	3319      	adds	r3, #25
    42a0:	b29b      	uxth	r3, r3
    42a2:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    42a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    42aa:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    42ae:	3019      	adds	r0, #25
    42b0:	b280      	uxth	r0, r0
    42b2:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    42b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    42ba:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    42be:	3219      	adds	r2, #25
    42c0:	b292      	uxth	r2, r2
    42c2:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    42c6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    42ca:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    42ce:	3719      	adds	r7, #25
    42d0:	b2bf      	uxth	r7, r7
    42d2:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    42d6:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    42da:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    42de:	3519      	adds	r5, #25
    42e0:	b2ad      	uxth	r5, r5
    42e2:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42e6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42ea:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42ee:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    42f2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    42f6:	b2db      	uxtb	r3, r3
    42f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    42fc:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42fe:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4302:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4304:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4306:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    430a:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    430e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    4312:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4316:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    431a:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    431c:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    431e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4322:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    4324:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4328:	f100 0208 	add.w	r2, r0, #8
    432c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4330:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    4334:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4338:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    433a:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    433c:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4340:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4344:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4348:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    434a:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    434e:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4352:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4356:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    435a:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    435e:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4362:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4366:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    436a:	e5c0      	b.n	3eee <switch_mode(LEDStruct&)+0x1de>
    436c:	1fff8734 	.word	0x1fff8734
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    4370:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4374:	2a00      	cmp	r2, #0
    4376:	f47f ad37 	bne.w	3de8 <switch_mode(LEDStruct&)+0xd8>
    437a:	4dcc      	ldr	r5, [pc, #816]	; (46ac <switch_mode(LEDStruct&)+0x99c>)
    437c:	882b      	ldrh	r3, [r5, #0]
    437e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4382:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4386:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    438a:	3319      	adds	r3, #25
    438c:	b29b      	uxth	r3, r3
    438e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4392:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4396:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    439a:	3019      	adds	r0, #25
    439c:	b280      	uxth	r0, r0
    439e:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    43a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    43a6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    43aa:	3119      	adds	r1, #25
    43ac:	b289      	uxth	r1, r1
    43ae:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    43b2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    43b6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    43ba:	3619      	adds	r6, #25
    43bc:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43be:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    43c2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    43c6:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    43ca:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    43ce:	b2db      	uxtb	r3, r3
    43d0:	b2c0      	uxtb	r0, r0
    43d2:	b2ff      	uxtb	r7, r7
    43d4:	b2c9      	uxtb	r1, r1
    43d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    43da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    43de:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    43e2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    43e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    43ea:	1180      	asrs	r0, r0, #6
    43ec:	123f      	asrs	r7, r7, #8
    43ee:	1189      	asrs	r1, r1, #6
    43f0:	121b      	asrs	r3, r3, #8
    43f2:	3032      	adds	r0, #50	; 0x32
    43f4:	3701      	adds	r7, #1
    43f6:	313c      	adds	r1, #60	; 0x3c
    43f8:	b2c0      	uxtb	r0, r0
    43fa:	b2ff      	uxtb	r7, r7
    43fc:	b2c9      	uxtb	r1, r1
    43fe:	330a      	adds	r3, #10
    4400:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    4404:	b2db      	uxtb	r3, r3
    4406:	4611      	mov	r1, r2
    4408:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    440a:	802e      	strh	r6, [r5, #0]
    440c:	f7fe fd24 	bl	2e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4410:	e4ea      	b.n	3de8 <switch_mode(LEDStruct&)+0xd8>
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    4412:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4416:	2a00      	cmp	r2, #0
    4418:	f47f ace6 	bne.w	3de8 <switch_mode(LEDStruct&)+0xd8>
    441c:	4da3      	ldr	r5, [pc, #652]	; (46ac <switch_mode(LEDStruct&)+0x99c>)
    441e:	882b      	ldrh	r3, [r5, #0]
    4420:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4424:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4428:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    442c:	3319      	adds	r3, #25
    442e:	b29b      	uxth	r3, r3
    4430:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4438:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    443c:	3019      	adds	r0, #25
    443e:	b280      	uxth	r0, r0
    4440:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    4444:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4448:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    444c:	3119      	adds	r1, #25
    444e:	b289      	uxth	r1, r1
    4450:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4454:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    4458:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    445c:	3619      	adds	r6, #25
    445e:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4460:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    4464:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4468:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    446c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4470:	b2db      	uxtb	r3, r3
    4472:	b2c0      	uxtb	r0, r0
    4474:	b2ff      	uxtb	r7, r7
    4476:	b2c9      	uxtb	r1, r1
    4478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    447c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    4480:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    4484:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4488:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    448c:	1180      	asrs	r0, r0, #6
    448e:	123f      	asrs	r7, r7, #8
    4490:	1189      	asrs	r1, r1, #6
    4492:	121b      	asrs	r3, r3, #8
    4494:	3032      	adds	r0, #50	; 0x32
    4496:	3701      	adds	r7, #1
    4498:	313c      	adds	r1, #60	; 0x3c
    449a:	b2c0      	uxtb	r0, r0
    449c:	b2ff      	uxtb	r7, r7
    449e:	b2c9      	uxtb	r1, r1
    44a0:	330a      	adds	r3, #10
    44a2:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    44a6:	b2db      	uxtb	r3, r3
    44a8:	2101      	movs	r1, #1
    44aa:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44ac:	802e      	strh	r6, [r5, #0]
    44ae:	f7fe fcd3 	bl	2e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    44b2:	e499      	b.n	3de8 <switch_mode(LEDStruct&)+0xd8>
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    44b4:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    44b8:	2a00      	cmp	r2, #0
    44ba:	f47f ac95 	bne.w	3de8 <switch_mode(LEDStruct&)+0xd8>
    44be:	4d7b      	ldr	r5, [pc, #492]	; (46ac <switch_mode(LEDStruct&)+0x99c>)

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    44c0:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    44c4:	882b      	ldrh	r3, [r5, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    44c6:	f880 22d6 	strb.w	r2, [r0, #726]	; 0x2d6
    44ca:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    44ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    44d2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44d6:	3319      	adds	r3, #25
    44d8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    44dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    44e0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44e4:	3319      	adds	r3, #25
    44e6:	b29b      	uxth	r3, r3
    44e8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    44ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    44f0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    44f4:	3219      	adds	r2, #25
    44f6:	b292      	uxth	r2, r2
    44f8:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    44fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4500:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4504:	3619      	adds	r6, #25
    4506:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4508:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    450c:	eb06 2016 	add.w	r0, r6, r6, lsr #8
    4510:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4514:	b2db      	uxtb	r3, r3
    4516:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    451a:	b2c0      	uxtb	r0, r0
    451c:	b2d2      	uxtb	r2, r2
    451e:	1199      	asrs	r1, r3, #6
    4520:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4524:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    4528:	1192      	asrs	r2, r2, #6
    452a:	121b      	asrs	r3, r3, #8
    452c:	3301      	adds	r3, #1
    452e:	3132      	adds	r1, #50	; 0x32
    4530:	323c      	adds	r2, #60	; 0x3c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
    4532:	2001      	movs	r0, #1
    4534:	b2c9      	uxtb	r1, r1
    4536:	b2d2      	uxtb	r2, r2
	leds.mode_type			= FIRE;
    4538:	2708      	movs	r7, #8

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
    453a:	f884 32d9 	strb.w	r3, [r4, #729]	; 0x2d9
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    453e:	2325      	movs	r3, #37	; 0x25
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
    4540:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
    4544:	f884 02d7 	strb.w	r0, [r4, #727]	; 0x2d7
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4548:	f884 123a 	strb.w	r1, [r4, #570]	; 0x23a
	leds.fire_cooling		= fc;
    454c:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(10, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    4550:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    4554:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
    4558:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
    455c:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    455e:	802e      	strh	r6, [r5, #0]
    4560:	f7fb ff96 	bl	490 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char) [clone .part.10]>
    4564:	e440      	b.n	3de8 <switch_mode(LEDStruct&)+0xd8>
			break;


		// Rainbow March Functions
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    4566:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    456a:	2a00      	cmp	r2, #0
    456c:	f47f ad17 	bne.w	3f9e <switch_mode(LEDStruct&)+0x28e>
    4570:	494e      	ldr	r1, [pc, #312]	; (46ac <switch_mode(LEDStruct&)+0x99c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    4572:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    4576:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    4578:	f880 2239 	strb.w	r2, [r0, #569]	; 0x239
    457c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4580:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4584:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4588:	3319      	adds	r3, #25
    458a:	b29b      	uxth	r3, r3
    458c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4590:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4594:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4598:	3219      	adds	r2, #25
    459a:	b292      	uxth	r2, r2
    459c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    45a0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    45a4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    45a8:	3019      	adds	r0, #25
    45aa:	b280      	uxth	r0, r0
    45ac:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    45b0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45b4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    45b8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45bc:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    leds.rainbow_diff   = rd;
    45c0:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    45c2:	b2d2      	uxtb	r2, r2
    45c4:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    45c6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    45ca:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    45cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    45d0:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45d2:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    45d6:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    45d8:	1212      	asrs	r2, r2, #8
    45da:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    45de:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    45e0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;
    45e4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    45e8:	2701      	movs	r7, #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    45ea:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    45ee:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    45f0:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    45f4:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    45f8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    45fc:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    4600:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    4604:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4606:	800d      	strh	r5, [r1, #0]
    4608:	f7fc fb76 	bl	cf8 <LEDDebug(LEDStruct&)>
    460c:	e4c7      	b.n	3f9e <switch_mode(LEDStruct&)+0x28e>
		// Colorwave Functions
		case COLORWAVE:
			colorwave(leds);
			break;
	}
}
    460e:	b005      	add	sp, #20
    4610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4612:	4d26      	ldr	r5, [pc, #152]	; (46ac <switch_mode(LEDStruct&)+0x99c>)
    4614:	882b      	ldrh	r3, [r5, #0]
    4616:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    461a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    461e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4622:	3319      	adds	r3, #25
    4624:	b29b      	uxth	r3, r3
    4626:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    462a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    462e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4632:	3019      	adds	r0, #25
    4634:	b280      	uxth	r0, r0
    4636:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    463a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    463e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4642:	3119      	adds	r1, #25
    4644:	b289      	uxth	r1, r1
    4646:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    464a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    464e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4652:	3619      	adds	r6, #25
    4654:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4656:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    465a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    465e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4662:	eb01 2111 	add.w	r1, r1, r1, lsr #8
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
    4666:	b2db      	uxtb	r3, r3
    4668:	b2c0      	uxtb	r0, r0
    466a:	b2ff      	uxtb	r7, r7
    466c:	b2c9      	uxtb	r1, r1
    466e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4672:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    4676:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    467a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    467e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4682:	1180      	asrs	r0, r0, #6
    4684:	123f      	asrs	r7, r7, #8
    4686:	1189      	asrs	r1, r1, #6
    4688:	121b      	asrs	r3, r3, #8
    468a:	3032      	adds	r0, #50	; 0x32
    468c:	3701      	adds	r7, #1
    468e:	313c      	adds	r1, #60	; 0x3c
    4690:	b2c0      	uxtb	r0, r0
    4692:	b2ff      	uxtb	r7, r7
    4694:	b2c9      	uxtb	r1, r1
    4696:	330a      	adds	r3, #10
    4698:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    469c:	b2db      	uxtb	r3, r3
    469e:	4611      	mov	r1, r2
    46a0:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46a2:	802e      	strh	r6, [r5, #0]
    46a4:	f7fe fbd8 	bl	2e58 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    46a8:	e484      	b.n	3fb4 <switch_mode(LEDStruct&)+0x2a4>
    46aa:	bf00      	nop
    46ac:	1fff8734 	.word	0x1fff8734

000046b0 <setup>:

Mode start_mode = FIRE;

// ================ SETUP ================

void setup() {
    46b0:	b570      	push	{r4, r5, r6, lr}
    46b2:	f640 31b8 	movw	r1, #3000	; 0xbb8
    46b6:	b082      	sub	sp, #8
    46b8:	4863      	ldr	r0, [pc, #396]	; (4848 <setup+0x198>)
    46ba:	f000 ff83 	bl	55c4 <VisualMicroDebug::init(unsigned long)>
    46be:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    46c2:	4861      	ldr	r0, [pc, #388]	; (4848 <setup+0x198>)
    46c4:	f000 ff7a 	bl	55bc <VisualMicroDebug::begin(unsigned long)>
    46c8:	2101      	movs	r1, #1
    46ca:	485f      	ldr	r0, [pc, #380]	; (4848 <setup+0x198>)
    46cc:	f000 ff50 	bl	5570 <VisualMicroDebug::outPacketStart(bool)>
    46d0:	b150      	cbz	r0, 46e8 <setup+0x38>
    46d2:	2110      	movs	r1, #16
    46d4:	485d      	ldr	r0, [pc, #372]	; (484c <setup+0x19c>)
    46d6:	f002 faa7 	bl	6c28 <usb_serial_write>
    46da:	485b      	ldr	r0, [pc, #364]	; (4848 <setup+0x198>)
    46dc:	210a      	movs	r1, #10
    46de:	f000 ff35 	bl	554c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    46e2:	4859      	ldr	r0, [pc, #356]	; (4848 <setup+0x198>)
    46e4:	f000 ff68 	bl	55b8 <VisualMicroDebug::outPacketEnd()>
    46e8:	2201      	movs	r2, #1
    46ea:	2100      	movs	r1, #0
    46ec:	4856      	ldr	r0, [pc, #344]	; (4848 <setup+0x198>)
    46ee:	f001 f815 	bl	571c <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    46f2:	f240 51dc 	movw	r1, #1500	; 0x5dc
    46f6:	4856      	ldr	r0, [pc, #344]	; (4850 <setup+0x1a0>)
    46f8:	f002 fcf2 	bl	70e0 <Stream::setTimeout(unsigned long)>
    46fc:	2108      	movs	r1, #8
    46fe:	4855      	ldr	r0, [pc, #340]	; (4854 <setup+0x1a4>)
    4700:	f002 fa92 	bl	6c28 <usb_serial_write>
    4704:	4852      	ldr	r0, [pc, #328]	; (4850 <setup+0x1a0>)
    4706:	f002 fc93 	bl	7030 <Print::println()>

	delay(1000);
    470a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    470e:	f001 fa73 	bl	5bf8 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4712:	4851      	ldr	r0, [pc, #324]	; (4858 <setup+0x1a8>)
    4714:	6803      	ldr	r3, [r0, #0]
    4716:	f013 0401 	ands.w	r4, r3, #1
    471a:	d071      	beq.n	4800 <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    471c:	4c4f      	ldr	r4, [pc, #316]	; (485c <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    471e:	4950      	ldr	r1, [pc, #320]	; (4860 <setup+0x1b0>)
    4720:	4850      	ldr	r0, [pc, #320]	; (4864 <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    4722:	4d51      	ldr	r5, [pc, #324]	; (4868 <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4724:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4726:	2300      	movs	r3, #0
    4728:	2296      	movs	r2, #150	; 0x96
    472a:	f000 fc51 	bl	4fd0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    472e:	22b0      	movs	r2, #176	; 0xb0
    4730:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    4732:	4620      	mov	r0, r4
    4734:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4736:	7026      	strb	r6, [r4, #0]
    4738:	f88d 2005 	strb.w	r2, [sp, #5]
    473c:	f88d 3006 	strb.w	r3, [sp, #6]
    4740:	f88d 6004 	strb.w	r6, [sp, #4]
    4744:	f000 fc84 	bl	5050 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    4748:	f640 31b8 	movw	r1, #3000	; 0xbb8
    474c:	2005      	movs	r0, #5
    474e:	f000 fef1 	bl	5534 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    4752:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    4756:	2002      	movs	r0, #2
    4758:	802b      	strh	r3, [r5, #0]
    475a:	f001 f91f 	bl	599c <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    475e:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    4760:	2100      	movs	r1, #0
    4762:	4403      	add	r3, r0
    4764:	4620      	mov	r0, r4
    4766:	802b      	strh	r3, [r5, #0]
    4768:	f000 fd84 	bl	5274 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    476c:	7821      	ldrb	r1, [r4, #0]
    476e:	4620      	mov	r0, r4
    4770:	f000 fca6 	bl	50c0 <CFastLED::show(unsigned char)>
    4774:	4620      	mov	r0, r4
    4776:	2132      	movs	r1, #50	; 0x32
    4778:	f000 fd04 	bl	5184 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    477c:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    477e:	aa01      	add	r2, sp, #4
    4780:	2196      	movs	r1, #150	; 0x96
    4782:	4837      	ldr	r0, [pc, #220]	; (4860 <setup+0x1b0>)
    4784:	f88d 6004 	strb.w	r6, [sp, #4]
    4788:	f88d 5005 	strb.w	r5, [sp, #5]
    478c:	f88d 5006 	strb.w	r5, [sp, #6]
    4790:	f000 fa74 	bl	4c7c <fill_solid(CRGB*, int, CRGB const&)>
    4794:	4620      	mov	r0, r4
    4796:	21fa      	movs	r1, #250	; 0xfa
    4798:	f000 fcf4 	bl	5184 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    479c:	aa01      	add	r2, sp, #4
    479e:	2196      	movs	r1, #150	; 0x96
    47a0:	482f      	ldr	r0, [pc, #188]	; (4860 <setup+0x1b0>)
    47a2:	f88d 6006 	strb.w	r6, [sp, #6]
    47a6:	f88d 5004 	strb.w	r5, [sp, #4]
    47aa:	f88d 5005 	strb.w	r5, [sp, #5]
    47ae:	f000 fa65 	bl	4c7c <fill_solid(CRGB*, int, CRGB const&)>
    47b2:	4620      	mov	r0, r4
    47b4:	21fa      	movs	r1, #250	; 0xfa
    47b6:	f000 fce5 	bl	5184 <CFastLED::delay(unsigned long)>
    47ba:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    47bc:	aa01      	add	r2, sp, #4
    47be:	2196      	movs	r1, #150	; 0x96
    47c0:	4827      	ldr	r0, [pc, #156]	; (4860 <setup+0x1b0>)
    47c2:	f88d 3005 	strb.w	r3, [sp, #5]
    47c6:	f88d 5004 	strb.w	r5, [sp, #4]
    47ca:	f88d 5006 	strb.w	r5, [sp, #6]
    47ce:	f000 fa55 	bl	4c7c <fill_solid(CRGB*, int, CRGB const&)>
    47d2:	4620      	mov	r0, r4
    47d4:	21fa      	movs	r1, #250	; 0xfa
    47d6:	f000 fcd5 	bl	5184 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    47da:	4629      	mov	r1, r5
    47dc:	4620      	mov	r0, r4
    47de:	f000 fd49 	bl	5274 <CFastLED::clear(bool)>
    47e2:	4620      	mov	r0, r4
    47e4:	21fa      	movs	r1, #250	; 0xfa
    47e6:	f000 fccd 	bl	5184 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    47ea:	f7fc fd6d 	bl	12c8 <initialize()>
    47ee:	210e      	movs	r1, #14
    47f0:	481e      	ldr	r0, [pc, #120]	; (486c <setup+0x1bc>)
    47f2:	f002 fa19 	bl	6c28 <usb_serial_write>
    47f6:	4816      	ldr	r0, [pc, #88]	; (4850 <setup+0x1a0>)
    47f8:	f002 fc1a 	bl	7030 <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    47fc:	b002      	add	sp, #8
    47fe:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4800:	f001 f97a 	bl	5af8 <__cxa_guard_acquire>
    4804:	2800      	cmp	r0, #0
    4806:	d089      	beq.n	471c <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4808:	4919      	ldr	r1, [pc, #100]	; (4870 <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    480a:	4b16      	ldr	r3, [pc, #88]	; (4864 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    480c:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    480e:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4810:	22ff      	movs	r2, #255	; 0xff
    4812:	2501      	movs	r5, #1
    4814:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    4816:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4818:	749d      	strb	r5, [r3, #18]
    481a:	731a      	strb	r2, [r3, #12]
    481c:	735a      	strb	r2, [r3, #13]
    481e:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4820:	73da      	strb	r2, [r3, #15]
    4822:	741a      	strb	r2, [r3, #16]
    4824:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4826:	b160      	cbz	r0, 4842 <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    4828:	4a12      	ldr	r2, [pc, #72]	; (4874 <setup+0x1c4>)
    482a:	6811      	ldr	r1, [r2, #0]
    482c:	b101      	cbz	r1, 4830 <setup+0x180>
    482e:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    4830:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    4832:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    4834:	4910      	ldr	r1, [pc, #64]	; (4878 <setup+0x1c8>)
    4836:	4808      	ldr	r0, [pc, #32]	; (4858 <setup+0x1a8>)
    4838:	619a      	str	r2, [r3, #24]
    483a:	6019      	str	r1, [r3, #0]
    483c:	f001 f962 	bl	5b04 <__cxa_guard_release>
    4840:	e76c      	b.n	471c <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4842:	600b      	str	r3, [r1, #0]
    4844:	e7f0      	b.n	4828 <setup+0x178>
    4846:	bf00      	nop
    4848:	1fff9498 	.word	0x1fff9498
    484c:	00008fa0 	.word	0x00008fa0
    4850:	1fff873c 	.word	0x1fff873c
    4854:	00008fb4 	.word	0x00008fb4
    4858:	1fff8c3c 	.word	0x1fff8c3c
    485c:	1fff9470 	.word	0x1fff9470
    4860:	1fff8fa8 	.word	0x1fff8fa8
    4864:	1fff8c40 	.word	0x1fff8c40
    4868:	1fff8734 	.word	0x1fff8734
    486c:	00008fc0 	.word	0x00008fc0
    4870:	1fff9480 	.word	0x1fff9480
    4874:	1fff9490 	.word	0x1fff9490
    4878:	00007860 	.word	0x00007860

0000487c <loop>:



// ================ LOOP ================

void loop() {
    487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4880:	b093      	sub	sp, #76	; 0x4c
	// Add entropy to randomness
	random16_add_entropy(random());
    4882:	f002 ff1f 	bl	76c4 <random>

	// Change patterns
	EVERY_N_SECONDS(20){
    4886:	4da9      	ldr	r5, [pc, #676]	; (4b2c <loop+0x2b0>)
    4888:	4aa9      	ldr	r2, [pc, #676]	; (4b30 <loop+0x2b4>)
    488a:	6829      	ldr	r1, [r5, #0]
    488c:	8813      	ldrh	r3, [r2, #0]
    488e:	07ce      	lsls	r6, r1, #31
    4890:	4418      	add	r0, r3
    4892:	8010      	strh	r0, [r2, #0]
    4894:	f140 812f 	bpl.w	4af6 <loop+0x27a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4898:	4ea6      	ldr	r6, [pc, #664]	; (4b34 <loop+0x2b8>)
    489a:	4ca7      	ldr	r4, [pc, #668]	; (4b38 <loop+0x2bc>)
    489c:	6833      	ldr	r3, [r6, #0]
    489e:	9302      	str	r3, [sp, #8]
	return ret;
    48a0:	9a02      	ldr	r2, [sp, #8]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    48a2:	48a6      	ldr	r0, [pc, #664]	; (4b3c <loop+0x2c0>)
    48a4:	8823      	ldrh	r3, [r4, #0]
    48a6:	8861      	ldrh	r1, [r4, #2]
    48a8:	fba0 0202 	umull	r0, r2, r0, r2
    48ac:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    48b0:	b29b      	uxth	r3, r3
    48b2:	4299      	cmp	r1, r3
    48b4:	d809      	bhi.n	48ca <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48b6:	6833      	ldr	r3, [r6, #0]
    48b8:	9301      	str	r3, [sp, #4]
	return ret;
    48ba:	9b01      	ldr	r3, [sp, #4]
    48bc:	4a9f      	ldr	r2, [pc, #636]	; (4b3c <loop+0x2c0>)
    48be:	fba2 2303 	umull	r2, r3, r2, r3
    48c2:	099b      	lsrs	r3, r3, #6
    48c4:	8023      	strh	r3, [r4, #0]
		change_pattern();
    48c6:	f7fc fea7 	bl	1618 <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    48ca:	4d9d      	ldr	r5, [pc, #628]	; (4b40 <loop+0x2c4>)
    48cc:	682b      	ldr	r3, [r5, #0]
    48ce:	07dc      	lsls	r4, r3, #31
    48d0:	f140 8108 	bpl.w	4ae4 <loop+0x268>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48d4:	6833      	ldr	r3, [r6, #0]
    48d6:	4c9b      	ldr	r4, [pc, #620]	; (4b44 <loop+0x2c8>)
    48d8:	9305      	str	r3, [sp, #20]
	return ret;
    48da:	9a05      	ldr	r2, [sp, #20]
    48dc:	4897      	ldr	r0, [pc, #604]	; (4b3c <loop+0x2c0>)
    48de:	8823      	ldrh	r3, [r4, #0]
    48e0:	8861      	ldrh	r1, [r4, #2]
    48e2:	fba0 0202 	umull	r0, r2, r0, r2
    48e6:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    48ea:	b29b      	uxth	r3, r3
    48ec:	4299      	cmp	r1, r3
    48ee:	f240 80d8 	bls.w	4aa2 <loop+0x226>
    48f2:	4f95      	ldr	r7, [pc, #596]	; (4b48 <loop+0x2cc>)
    48f4:	f8df 9280 	ldr.w	r9, [pc, #640]	; 4b78 <loop+0x2fc>
    48f8:	f8df a264 	ldr.w	sl, [pc, #612]	; 4b60 <loop+0x2e4>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    48fc:	4d93      	ldr	r5, [pc, #588]	; (4b4c <loop+0x2d0>)
    48fe:	682b      	ldr	r3, [r5, #0]
    4900:	07d8      	lsls	r0, r3, #31
    4902:	f140 809a 	bpl.w	4a3a <loop+0x1be>
    4906:	4c92      	ldr	r4, [pc, #584]	; (4b50 <loop+0x2d4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4908:	6833      	ldr	r3, [r6, #0]
    490a:	9308      	str	r3, [sp, #32]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    490c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4910:	9b08      	ldr	r3, [sp, #32]
    4912:	1a5b      	subs	r3, r3, r1
    4914:	429a      	cmp	r2, r3
    4916:	f240 80a0 	bls.w	4a5a <loop+0x1de>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    491a:	f8df 8260 	ldr.w	r8, [pc, #608]	; 4b7c <loop+0x300>
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    491e:	4d8d      	ldr	r5, [pc, #564]	; (4b54 <loop+0x2d8>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4920:	f8d8 3000 	ldr.w	r3, [r8]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    4924:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    4928:	f8df b254 	ldr.w	fp, [pc, #596]	; 4b80 <loop+0x304>
    492c:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    4930:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4932:	07d9      	lsls	r1, r3, #31
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    4934:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4938:	d557      	bpl.n	49ea <loop+0x16e>
    493a:	4c87      	ldr	r4, [pc, #540]	; (4b58 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    493c:	6833      	ldr	r3, [r6, #0]
    493e:	930b      	str	r3, [sp, #44]	; 0x2c
    4940:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    4944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4946:	1a1b      	subs	r3, r3, r0
    4948:	428b      	cmp	r3, r1
    494a:	d25f      	bcs.n	4a0c <loop+0x190>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    494c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4b84 <loop+0x308>
    4950:	f8d8 3000 	ldr.w	r3, [r8]
    4954:	07da      	lsls	r2, r3, #31
    4956:	d567      	bpl.n	4a28 <loop+0x1ac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4958:	6833      	ldr	r3, [r6, #0]
    495a:	4c80      	ldr	r4, [pc, #512]	; (4b5c <loop+0x2e0>)
    495c:	930e      	str	r3, [sp, #56]	; 0x38
    495e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4964:	1a5b      	subs	r3, r3, r1
    4966:	4293      	cmp	r3, r2
    4968:	f0c0 8087 	bcc.w	4a7a <loop+0x1fe>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    496c:	6833      	ldr	r3, [r6, #0]
    496e:	930d      	str	r3, [sp, #52]	; 0x34
		if(in_transition){
    4970:	783b      	ldrb	r3, [r7, #0]
	return ret;
    4972:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4974:	6022      	str	r2, [r4, #0]
    4976:	4a79      	ldr	r2, [pc, #484]	; (4b5c <loop+0x2e0>)
    4978:	2b00      	cmp	r3, #0
    497a:	d179      	bne.n	4a70 <loop+0x1f4>
    497c:	4b78      	ldr	r3, [pc, #480]	; (4b60 <loop+0x2e4>)
    497e:	4a79      	ldr	r2, [pc, #484]	; (4b64 <loop+0x2e8>)
    4980:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4984:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    4986:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    4988:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    498a:	7014      	strb	r4, [r2, #0]
    498c:	3303      	adds	r3, #3
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    498e:	42ab      	cmp	r3, r5
        g = rhs.g;
    4990:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    4992:	7091      	strb	r1, [r2, #2]
    4994:	f102 0203 	add.w	r2, r2, #3
    4998:	d1f4      	bne.n	4984 <loop+0x108>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    499a:	4d73      	ldr	r5, [pc, #460]	; (4b68 <loop+0x2ec>)
    499c:	682b      	ldr	r3, [r5, #0]
    499e:	07db      	lsls	r3, r3, #31
    49a0:	d575      	bpl.n	4a8e <loop+0x212>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    49a2:	6833      	ldr	r3, [r6, #0]
    49a4:	4c71      	ldr	r4, [pc, #452]	; (4b6c <loop+0x2f0>)
    49a6:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    49a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    49aa:	4864      	ldr	r0, [pc, #400]	; (4b3c <loop+0x2c0>)
    49ac:	8823      	ldrh	r3, [r4, #0]
    49ae:	8861      	ldrh	r1, [r4, #2]
    49b0:	fba0 0202 	umull	r0, r2, r0, r2
    49b4:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    49b8:	b29b      	uxth	r3, r3
    49ba:	4299      	cmp	r1, r3
    49bc:	d80e      	bhi.n	49dc <loop+0x160>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    49be:	6833      	ldr	r3, [r6, #0]
    49c0:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    49c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    49c4:	4a5d      	ldr	r2, [pc, #372]	; (4b3c <loop+0x2c0>)
			LEDDebug(curr_leds);
    49c6:	4866      	ldr	r0, [pc, #408]	; (4b60 <loop+0x2e4>)
    49c8:	fba2 2303 	umull	r2, r3, r2, r3
    49cc:	099b      	lsrs	r3, r3, #6
    49ce:	8023      	strh	r3, [r4, #0]
    49d0:	f7fc f992 	bl	cf8 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    49d4:	783b      	ldrb	r3, [r7, #0]
    49d6:	2b00      	cmp	r3, #0
    49d8:	f040 80a3 	bne.w	4b22 <loop+0x2a6>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    49dc:	4864      	ldr	r0, [pc, #400]	; (4b70 <loop+0x2f4>)
    49de:	7801      	ldrb	r1, [r0, #0]
    49e0:	f000 fb6e 	bl	50c0 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    49e4:	b013      	add	sp, #76	; 0x4c
    49e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    49ea:	4640      	mov	r0, r8
    49ec:	f001 f884 	bl	5af8 <__cxa_guard_acquire>
    49f0:	2800      	cmp	r0, #0
    49f2:	f040 80f6 	bne.w	4be2 <loop+0x366>
    49f6:	4c58      	ldr	r4, [pc, #352]	; (4b58 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    49f8:	6833      	ldr	r3, [r6, #0]
    49fa:	930b      	str	r3, [sp, #44]	; 0x2c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    49fc:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a02:	1a5b      	subs	r3, r3, r1
    4a04:	4293      	cmp	r3, r2
    4a06:	d3a1      	bcc.n	494c <loop+0xd0>
    4a08:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a0c:	6833      	ldr	r3, [r6, #0]
    4a0e:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    4a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4a12:	f8df 8170 	ldr.w	r8, [pc, #368]	; 4b84 <loop+0x308>
    4a16:	6062      	str	r2, [r4, #4]
    4a18:	6023      	str	r3, [r4, #0]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    4a1a:	4851      	ldr	r0, [pc, #324]	; (4b60 <loop+0x2e4>)
    4a1c:	f7ff f978 	bl	3d10 <switch_mode(LEDStruct&)>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4a20:	f8d8 3000 	ldr.w	r3, [r8]
    4a24:	07da      	lsls	r2, r3, #31
    4a26:	d497      	bmi.n	4958 <loop+0xdc>
    4a28:	4640      	mov	r0, r8
    4a2a:	f001 f865 	bl	5af8 <__cxa_guard_acquire>
    4a2e:	2800      	cmp	r0, #0
    4a30:	f040 80e3 	bne.w	4bfa <loop+0x37e>
    4a34:	4c49      	ldr	r4, [pc, #292]	; (4b5c <loop+0x2e0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a36:	6833      	ldr	r3, [r6, #0]
    4a38:	e790      	b.n	495c <loop+0xe0>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    4a3a:	4628      	mov	r0, r5
    4a3c:	f001 f85c 	bl	5af8 <__cxa_guard_acquire>
    4a40:	2800      	cmp	r0, #0
    4a42:	f040 80b4 	bne.w	4bae <loop+0x332>
    4a46:	4c42      	ldr	r4, [pc, #264]	; (4b50 <loop+0x2d4>)
    4a48:	6833      	ldr	r3, [r6, #0]
    4a4a:	9308      	str	r3, [sp, #32]
    4a4c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4a50:	9b08      	ldr	r3, [sp, #32]
    4a52:	1a5b      	subs	r3, r3, r1
    4a54:	4293      	cmp	r3, r2
    4a56:	f4ff af60 	bcc.w	491a <loop+0x9e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a5a:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    4a5c:	4945      	ldr	r1, [pc, #276]	; (4b74 <loop+0x2f8>)
    4a5e:	9307      	str	r3, [sp, #28]
	return ret;
    4a60:	9b07      	ldr	r3, [sp, #28]
    4a62:	6023      	str	r3, [r4, #0]
    4a64:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    4a68:	2218      	movs	r2, #24
    4a6a:	f000 fa89 	bl	4f80 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    4a6e:	e754      	b.n	491a <loop+0x9e>
    4a70:	782b      	ldrb	r3, [r5, #0]

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    4a72:	4841      	ldr	r0, [pc, #260]	; (4b78 <loop+0x2fc>)
    4a74:	6053      	str	r3, [r2, #4]
    4a76:	f7ff f94b 	bl	3d10 <switch_mode(LEDStruct&)>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    4a7a:	783b      	ldrb	r3, [r7, #0]
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	f43f af7d 	beq.w	497c <loop+0x100>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    4a82:	4d39      	ldr	r5, [pc, #228]	; (4b68 <loop+0x2ec>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    4a84:	f7fc fe26 	bl	16d4 <blending()>
    4a88:	682b      	ldr	r3, [r5, #0]
    4a8a:	07db      	lsls	r3, r3, #31
    4a8c:	d489      	bmi.n	49a2 <loop+0x126>
    4a8e:	4628      	mov	r0, r5
    4a90:	f001 f832 	bl	5af8 <__cxa_guard_acquire>
    4a94:	2800      	cmp	r0, #0
    4a96:	f040 8095 	bne.w	4bc4 <loop+0x348>
    4a9a:	4c34      	ldr	r4, [pc, #208]	; (4b6c <loop+0x2f0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a9c:	6833      	ldr	r3, [r6, #0]
    4a9e:	9311      	str	r3, [sp, #68]	; 0x44
    4aa0:	e782      	b.n	49a8 <loop+0x12c>
    4aa2:	6833      	ldr	r3, [r6, #0]
    4aa4:	9304      	str	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    4aa6:	4a25      	ldr	r2, [pc, #148]	; (4b3c <loop+0x2c0>)
	return ret;
    4aa8:	9b04      	ldr	r3, [sp, #16]
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (in_transition) { change_palette(next_leds); }
    4aaa:	4f27      	ldr	r7, [pc, #156]	; (4b48 <loop+0x2cc>)
    4aac:	fba2 2303 	umull	r2, r3, r2, r3
    4ab0:	783a      	ldrb	r2, [r7, #0]
    4ab2:	099b      	lsrs	r3, r3, #6
    4ab4:	8023      	strh	r3, [r4, #0]
    4ab6:	b162      	cbz	r2, 4ad2 <loop+0x256>

// Change palette
void print_palette(uint8_t pn); // Forward declaration

void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    4ab8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4b78 <loop+0x2fc>
    4abc:	f899 3229 	ldrb.w	r3, [r9, #553]	; 0x229
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	f43f af19 	beq.w	48f8 <loop+0x7c>
    4ac6:	4648      	mov	r0, r9
    4ac8:	f7fd fb34 	bl	2134 <change_palette(LEDStruct&) [clone .part.9]>
    4acc:	f8df a090 	ldr.w	sl, [pc, #144]	; 4b60 <loop+0x2e4>
    4ad0:	e714      	b.n	48fc <loop+0x80>
    4ad2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4b60 <loop+0x2e4>
    4ad6:	f89a 3229 	ldrb.w	r3, [sl, #553]	; 0x229
    4ada:	2b00      	cmp	r3, #0
    4adc:	d154      	bne.n	4b88 <loop+0x30c>
    4ade:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4b78 <loop+0x2fc>
    4ae2:	e70b      	b.n	48fc <loop+0x80>
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    4ae4:	4628      	mov	r0, r5
    4ae6:	f001 f807 	bl	5af8 <__cxa_guard_acquire>
    4aea:	2800      	cmp	r0, #0
    4aec:	d150      	bne.n	4b90 <loop+0x314>
    4aee:	4c15      	ldr	r4, [pc, #84]	; (4b44 <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4af0:	6833      	ldr	r3, [r6, #0]
    4af2:	9305      	str	r3, [sp, #20]
    4af4:	e6f1      	b.n	48da <loop+0x5e>
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    4af6:	4628      	mov	r0, r5
    4af8:	f000 fffe 	bl	5af8 <__cxa_guard_acquire>
    4afc:	4e0d      	ldr	r6, [pc, #52]	; (4b34 <loop+0x2b8>)
    4afe:	2800      	cmp	r0, #0
    4b00:	f43f aecb 	beq.w	489a <loop+0x1e>
    4b04:	6833      	ldr	r3, [r6, #0]
    4b06:	9300      	str	r3, [sp, #0]
    4b08:	4a0c      	ldr	r2, [pc, #48]	; (4b3c <loop+0x2c0>)
	return ret;
    4b0a:	9b00      	ldr	r3, [sp, #0]
    4b0c:	4c0a      	ldr	r4, [pc, #40]	; (4b38 <loop+0x2bc>)
    4b0e:	fba2 2303 	umull	r2, r3, r2, r3
    4b12:	099b      	lsrs	r3, r3, #6
    4b14:	2214      	movs	r2, #20
    4b16:	4628      	mov	r0, r5
    4b18:	8023      	strh	r3, [r4, #0]
    4b1a:	8062      	strh	r2, [r4, #2]
    4b1c:	f000 fff2 	bl	5b04 <__cxa_guard_release>
    4b20:	e6bc      	b.n	489c <loop+0x20>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    4b22:	4815      	ldr	r0, [pc, #84]	; (4b78 <loop+0x2fc>)
    4b24:	f7fc f8e8 	bl	cf8 <LEDDebug(LEDStruct&)>
    4b28:	e758      	b.n	49dc <loop+0x160>
    4b2a:	bf00      	nop
    4b2c:	1fff8f90 	.word	0x1fff8f90
    4b30:	1fff8734 	.word	0x1fff8734
    4b34:	1fff94e8 	.word	0x1fff94e8
    4b38:	1fff8f80 	.word	0x1fff8f80
    4b3c:	10624dd3 	.word	0x10624dd3
    4b40:	1fff8f94 	.word	0x1fff8f94
    4b44:	1fff8c60 	.word	0x1fff8c60
    4b48:	1fff8f70 	.word	0x1fff8f70
    4b4c:	1fff8f98 	.word	0x1fff8f98
    4b50:	1fff8f84 	.word	0x1fff8f84
    4b54:	1fff8fa0 	.word	0x1fff8fa0
    4b58:	1fff8f68 	.word	0x1fff8f68
    4b5c:	1fff8f60 	.word	0x1fff8f60
    4b60:	1fff9174 	.word	0x1fff9174
    4b64:	1fff8fa8 	.word	0x1fff8fa8
    4b68:	1fff8f9c 	.word	0x1fff8f9c
    4b6c:	1fff8f8c 	.word	0x1fff8f8c
    4b70:	1fff9470 	.word	0x1fff9470
    4b74:	1fff936b 	.word	0x1fff936b
    4b78:	1fff8c64 	.word	0x1fff8c64
    4b7c:	1fff9170 	.word	0x1fff9170
    4b80:	1fff8fa1 	.word	0x1fff8fa1
    4b84:	1fff916c 	.word	0x1fff916c
    4b88:	4650      	mov	r0, sl
    4b8a:	f7fd fad3 	bl	2134 <change_palette(LEDStruct&) [clone .part.9]>
    4b8e:	e7a6      	b.n	4ade <loop+0x262>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b90:	6833      	ldr	r3, [r6, #0]
    4b92:	9303      	str	r3, [sp, #12]
	return ret;
    4b94:	9b03      	ldr	r3, [sp, #12]
    4b96:	4a1e      	ldr	r2, [pc, #120]	; (4c10 <loop+0x394>)
    4b98:	4c1e      	ldr	r4, [pc, #120]	; (4c14 <loop+0x398>)
    4b9a:	fba2 2303 	umull	r2, r3, r2, r3
    4b9e:	099b      	lsrs	r3, r3, #6
    4ba0:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    4ba2:	4628      	mov	r0, r5
    4ba4:	8023      	strh	r3, [r4, #0]
    4ba6:	8062      	strh	r2, [r4, #2]
    4ba8:	f000 ffac 	bl	5b04 <__cxa_guard_release>
    4bac:	e7a0      	b.n	4af0 <loop+0x274>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4bae:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4bb0:	4c19      	ldr	r4, [pc, #100]	; (4c18 <loop+0x39c>)
    4bb2:	9306      	str	r3, [sp, #24]
	return ret;
    4bb4:	9b06      	ldr	r3, [sp, #24]
    4bb6:	6023      	str	r3, [r4, #0]
    4bb8:	2332      	movs	r3, #50	; 0x32
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    4bba:	4628      	mov	r0, r5
    4bbc:	6063      	str	r3, [r4, #4]
    4bbe:	f000 ffa1 	bl	5b04 <__cxa_guard_release>
    4bc2:	e741      	b.n	4a48 <loop+0x1cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4bc4:	6833      	ldr	r3, [r6, #0]
    4bc6:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    4bc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    4bca:	4a11      	ldr	r2, [pc, #68]	; (4c10 <loop+0x394>)
    4bcc:	4c13      	ldr	r4, [pc, #76]	; (4c1c <loop+0x3a0>)
    4bce:	fba2 2303 	umull	r2, r3, r2, r3
    4bd2:	099b      	lsrs	r3, r3, #6
    4bd4:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    4bd6:	4628      	mov	r0, r5
    4bd8:	8023      	strh	r3, [r4, #0]
    4bda:	8062      	strh	r2, [r4, #2]
    4bdc:	f000 ff92 	bl	5b04 <__cxa_guard_release>
    4be0:	e75c      	b.n	4a9c <loop+0x220>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4be2:	6833      	ldr	r3, [r6, #0]
    4be4:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4be6:	4c0e      	ldr	r4, [pc, #56]	; (4c20 <loop+0x3a4>)
	return ret;
    4be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4bea:	f89b 3000 	ldrb.w	r3, [fp]
    4bee:	6022      	str	r2, [r4, #0]
    4bf0:	4640      	mov	r0, r8
    4bf2:	6063      	str	r3, [r4, #4]
    4bf4:	f000 ff86 	bl	5b04 <__cxa_guard_release>
    4bf8:	e6fe      	b.n	49f8 <loop+0x17c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4bfa:	6833      	ldr	r3, [r6, #0]
    4bfc:	930c      	str	r3, [sp, #48]	; 0x30
    4bfe:	4c09      	ldr	r4, [pc, #36]	; (4c24 <loop+0x3a8>)
	return ret;
    4c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    4c02:	782b      	ldrb	r3, [r5, #0]
    4c04:	6022      	str	r2, [r4, #0]
    4c06:	4640      	mov	r0, r8
    4c08:	6063      	str	r3, [r4, #4]
    4c0a:	f000 ff7b 	bl	5b04 <__cxa_guard_release>
    4c0e:	e712      	b.n	4a36 <loop+0x1ba>
    4c10:	10624dd3 	.word	0x10624dd3
    4c14:	1fff8c60 	.word	0x1fff8c60
    4c18:	1fff8f84 	.word	0x1fff8f84
    4c1c:	1fff8f8c 	.word	0x1fff8f8c
    4c20:	1fff8f68 	.word	0x1fff8f68
    4c24:	1fff8f60 	.word	0x1fff8f60

00004c28 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    4c28:	b430      	push	{r4, r5}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    4c2a:	4912      	ldr	r1, [pc, #72]	; (4c74 <_GLOBAL__sub_I_ib_jul01_gp+0x4c>)
    4c2c:	4a12      	ldr	r2, [pc, #72]	; (4c78 <_GLOBAL__sub_I_ib_jul01_gp+0x50>)
    4c2e:	25ff      	movs	r5, #255	; 0xff
    4c30:	240a      	movs	r4, #10
    4c32:	2301      	movs	r3, #1
    4c34:	2000      	movs	r0, #0
    4c36:	f881 51c2 	strb.w	r5, [r1, #450]	; 0x1c2
    4c3a:	f882 51c2 	strb.w	r5, [r2, #450]	; 0x1c2
    4c3e:	f881 41c3 	strb.w	r4, [r1, #451]	; 0x1c3
    4c42:	f882 41c3 	strb.w	r4, [r2, #451]	; 0x1c3
    4c46:	f881 31c4 	strb.w	r3, [r1, #452]	; 0x1c4
    4c4a:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5
    4c4e:	f881 3228 	strb.w	r3, [r1, #552]	; 0x228
    4c52:	f881 3229 	strb.w	r3, [r1, #553]	; 0x229
    4c56:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
    4c5a:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
    4c5e:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    4c62:	f882 3229 	strb.w	r3, [r2, #553]	; 0x229
    4c66:	f881 022d 	strb.w	r0, [r1, #557]	; 0x22d
    4c6a:	f882 022d 	strb.w	r0, [r2, #557]	; 0x22d
    4c6e:	bc30      	pop	{r4, r5}
    4c70:	4770      	bx	lr
    4c72:	bf00      	nop
    4c74:	1fff9174 	.word	0x1fff9174
    4c78:	1fff8c64 	.word	0x1fff8c64

00004c7c <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    4c7c:	2900      	cmp	r1, #0
    4c7e:	dd0b      	ble.n	4c98 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    4c80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4c84:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c86:	7813      	ldrb	r3, [r2, #0]
    4c88:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    4c8a:	7853      	ldrb	r3, [r2, #1]
    4c8c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    4c8e:	7893      	ldrb	r3, [r2, #2]
    4c90:	7083      	strb	r3, [r0, #2]
    4c92:	3003      	adds	r0, #3
    4c94:	4288      	cmp	r0, r1
    4c96:	d1f6      	bne.n	4c86 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    4c98:	4770      	bx	lr
    4c9a:	bf00      	nop

00004c9c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    4c9c:	b570      	push	{r4, r5, r6, lr}
    4c9e:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    4ca0:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    4ca2:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    4ca4:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    4ca6:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    4caa:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    4cae:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    4cb2:	dd10      	ble.n	4cd6 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    4cb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4cb8:	461e      	mov	r6, r3
    4cba:	4604      	mov	r4, r0
    4cbc:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4cbe:	4621      	mov	r1, r4
    4cc0:	a801      	add	r0, sp, #4
    4cc2:	f000 faf9 	bl	52b8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    4cc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4cca:	3403      	adds	r4, #3
    4ccc:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    4cce:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    4cd0:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    4cd4:	d1f3      	bne.n	4cbe <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    4cd6:	b002      	add	sp, #8
    4cd8:	bd70      	pop	{r4, r5, r6, pc}
    4cda:	bf00      	nop

00004cdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    4cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    4ce0:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    4ce2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    4ce4:	d352      	bcc.n	4d8c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    4ce6:	f896 e000 	ldrb.w	lr, [r6]
    4cea:	7815      	ldrb	r5, [r2, #0]
    4cec:	7877      	ldrb	r7, [r6, #1]
    4cee:	f896 8002 	ldrb.w	r8, [r6, #2]
    4cf2:	7854      	ldrb	r4, [r2, #1]
    4cf4:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    4cf8:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    4cfc:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    4d00:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    4d04:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    4d08:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    4d0c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    4d10:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    4d14:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    4d16:	b3b2      	cbz	r2, 4d86 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    4d18:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    4d1c:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    4d20:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    4d24:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    4d28:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    4d2c:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4d30:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    4d32:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    4d36:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    4d3a:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    4d3e:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    4d42:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    4d46:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    4d4a:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    4d4e:	d818      	bhi.n	4d82 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    4d50:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4d54:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    4d56:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4d58:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d5a:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    4d5e:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    4d62:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    4d66:	4475      	add	r5, lr
        g88 += gdelta87;
    4d68:	4454      	add	r4, sl
        b88 += bdelta87;
    4d6a:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4d6c:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d6e:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    4d72:	b2ad      	uxth	r5, r5
        g = rhs.g;
    4d74:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    4d78:	b2a4      	uxth	r4, r4
        b = rhs.b;
    4d7a:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    4d7e:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4d80:	d2e6      	bcs.n	4d50 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    4d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d86:	f04f 0b01 	mov.w	fp, #1
    4d8a:	e7c7      	b.n	4d1c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    4d8c:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d8e:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d90:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4d94:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4d96:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4d98:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    4d9c:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4da0:	7015      	strb	r5, [r2, #0]
    4da2:	4619      	mov	r1, r3
    4da4:	f886 e000 	strb.w	lr, [r6]
    4da8:	464b      	mov	r3, r9
        g = rhs.g;
    4daa:	7054      	strb	r4, [r2, #1]
    4dac:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    4dae:	f882 c002 	strb.w	ip, [r2, #2]
    4db2:	f886 8002 	strb.w	r8, [r6, #2]
    4db6:	e79f      	b.n	4cf8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00004db8 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    4db8:	b309      	cbz	r1, 4dfe <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    4dba:	b430      	push	{r4, r5}
    4dbc:	1e4d      	subs	r5, r1, #1
    4dbe:	b2ad      	uxth	r5, r5
    4dc0:	43d2      	mvns	r2, r2
    4dc2:	3501      	adds	r5, #1
    4dc4:	b2d2      	uxtb	r2, r2
    4dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4dca:	4405      	add	r5, r0
    4dcc:	3201      	adds	r2, #1
    4dce:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4dd0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    4dd4:	fb02 f303 	mul.w	r3, r2, r3
    4dd8:	121b      	asrs	r3, r3, #8
    4dda:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4dde:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4de0:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4de2:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4de6:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4dea:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4dec:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4dee:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4df0:	7083      	strb	r3, [r0, #2]
    4df2:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    4df4:	4285      	cmp	r5, r0
    4df6:	f104 0403 	add.w	r4, r4, #3
    4dfa:	d1e9      	bne.n	4dd0 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    4dfc:	bc30      	pop	{r4, r5}
    4dfe:	4770      	bx	lr

00004e00 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    4e00:	f7ff bfda 	b.w	4db8 <fade_raw(CRGB*, unsigned short, unsigned char)>

00004e04 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    4e04:	b322      	cbz	r2, 4e50 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    4e06:	2aff      	cmp	r2, #255	; 0xff
    4e08:	d023      	beq.n	4e52 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    4e0a:	b4f0      	push	{r4, r5, r6, r7}
        hi = 255;
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
    4e0c:	7804      	ldrb	r4, [r0, #0]
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
            hi = mid - 1;
        } else {
            if( mid == 255) {
                return 255;
    4e0e:	780e      	ldrb	r6, [r1, #0]
        hi = 255;
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
    4e10:	7843      	ldrb	r3, [r0, #1]
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
            hi = mid - 1;
        } else {
            if( mid == 255) {
                return 255;
    4e12:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    4e14:	19a7      	adds	r7, r4, r6
        hi = 255;
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
    4e16:	43d2      	mvns	r2, r2
    4e18:	fb06 7605 	mla	r6, r6, r5, r7
    4e1c:	b2d2      	uxtb	r2, r2
    4e1e:	fb04 6402 	mla	r4, r4, r2, r6
    4e22:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4e26:	7004      	strb	r4, [r0, #0]
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
            hi = mid - 1;
        } else {
            if( mid == 255) {
                return 255;
    4e28:	784c      	ldrb	r4, [r1, #1]
        hi = 255;
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
    4e2a:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    4e2c:	191f      	adds	r7, r3, r4
    4e2e:	fb04 7405 	mla	r4, r4, r5, r7
    4e32:	fb03 4302 	mla	r3, r3, r2, r4
    4e36:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4e3a:	7043      	strb	r3, [r0, #1]
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
            hi = mid - 1;
        } else {
            if( mid == 255) {
                return 255;
    4e3c:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4e3e:	18f1      	adds	r1, r6, r3
    4e40:	fb03 1505 	mla	r5, r3, r5, r1
    4e44:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    4e48:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4e4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    4e4e:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    4e50:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e52:	780b      	ldrb	r3, [r1, #0]
    4e54:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    4e56:	784b      	ldrb	r3, [r1, #1]
    4e58:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    4e5a:	788b      	ldrb	r3, [r1, #2]
    4e5c:	7083      	strb	r3, [r0, #2]
    4e5e:	4770      	bx	lr

00004e60 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    4e60:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e62:	780d      	ldrb	r5, [r1, #0]
    4e64:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    4e66:	784d      	ldrb	r5, [r1, #1]
    4e68:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    4e6a:	7889      	ldrb	r1, [r1, #2]
    4e6c:	7081      	strb	r1, [r0, #2]
    4e6e:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    4e70:	4611      	mov	r1, r2
    4e72:	461a      	mov	r2, r3
    4e74:	f7ff ffc6 	bl	4e04 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    4e78:	4620      	mov	r0, r4
    4e7a:	bd38      	pop	{r3, r4, r5, pc}

00004e7c <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    4e7c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    4e80:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    4e84:	3100      	adds	r1, #0
    4e86:	bf18      	it	ne
    4e88:	2101      	movne	r1, #1
    4e8a:	eb01 2123 	add.w	r1, r1, r3, asr #8
    4e8e:	b2c9      	uxtb	r1, r1
    4e90:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    4e92:	060a      	lsls	r2, r1, #24
    4e94:	b2db      	uxtb	r3, r3
    4e96:	d40e      	bmi.n	4eb6 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    4e98:	f001 0140 	and.w	r1, r1, #64	; 0x40
    4e9c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    4ea0:	b919      	cbnz	r1, 4eaa <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    4ea2:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    4ea4:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    4ea6:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    4ea8:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    4eaa:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    4eac:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    4eae:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    4eb0:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    4eb2:	7082      	strb	r2, [r0, #2]
    4eb4:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    4eb6:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    4eb8:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    4eba:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    4ebc:	7042      	strb	r2, [r0, #1]
    4ebe:	4770      	bx	lr

00004ec0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    4ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    4ec4:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    4ec6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4eca:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    4ece:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    4ed0:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4ed4:	d000      	beq.n	4ed8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    4ed6:	b9e6      	cbnz	r6, 4f12 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    4ed8:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    4eda:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    4edc:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    4ede:	2bff      	cmp	r3, #255	; 0xff
    4ee0:	d012      	beq.n	4f08 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d043      	beq.n	4f6e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    4ee6:	3301      	adds	r3, #1
    4ee8:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    4eea:	b11c      	cbz	r4, 4ef4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4eec:	fb03 4404 	mla	r4, r3, r4, r4
    4ef0:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    4ef4:	b119      	cbz	r1, 4efe <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    4ef6:	fb03 1101 	mla	r1, r3, r1, r1
    4efa:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    4efe:	b11a      	cbz	r2, 4f08 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    4f00:	fb03 2202 	mla	r2, r3, r2, r2
    4f04:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4f08:	7004      	strb	r4, [r0, #0]
    4f0a:	7041      	strb	r1, [r0, #1]
    4f0c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    4f12:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    4f14:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    4f16:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    4f1a:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    4f1c:	d000      	beq.n	4f20 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    4f1e:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    4f20:	0112      	lsls	r2, r2, #4
    4f22:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    4f26:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4f28:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4f2c:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4f30:	f891 8002 	ldrb.w	r8, [r1, #2]
    4f34:	fb04 f606 	mul.w	r6, r4, r6
    4f38:	1c51      	adds	r1, r2, #1
    4f3a:	fb04 f509 	mul.w	r5, r4, r9
    4f3e:	fb04 f407 	mul.w	r4, r4, r7
    4f42:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4f46:	f3c6 2707 	ubfx	r7, r6, #8, #8
    4f4a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4f4e:	fb01 f60c 	mul.w	r6, r1, ip
    4f52:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4f56:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4f5a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4f5e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4f62:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4f66:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4f68:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4f6a:	b2d2      	uxtb	r2, r2
    4f6c:	e7b7      	b.n	4ede <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    4f6e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    4f70:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    4f72:	461c      	mov	r4, r3
    4f74:	7004      	strb	r4, [r0, #0]
    4f76:	7041      	strb	r1, [r0, #1]
    4f78:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f7e:	bf00      	nop

00004f80 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    4f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f82:	3901      	subs	r1, #1
    4f84:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    4f86:	2500      	movs	r5, #0
    4f88:	302f      	adds	r0, #47	; 0x2f
    4f8a:	e001      	b.n	4f90 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    4f8c:	4284      	cmp	r4, r0
    4f8e:	d01e      	beq.n	4fce <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    4f90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    4f94:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    4f98:	42b3      	cmp	r3, r6
    4f9a:	d0f7      	beq.n	4f8c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    4f9c:	f103 0701 	add.w	r7, r3, #1
    4fa0:	d204      	bcs.n	4fac <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    4fa2:	b2fb      	uxtb	r3, r7
    4fa4:	7023      	strb	r3, [r4, #0]
    4fa6:	3501      	adds	r5, #1
    4fa8:	780e      	ldrb	r6, [r1, #0]
    4faa:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    4fac:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    4fae:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    4fb0:	b2ff      	uxtb	r7, r7
    4fb2:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    4fb6:	d208      	bcs.n	4fca <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    4fb8:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    4fba:	780e      	ldrb	r6, [r1, #0]
    4fbc:	42be      	cmp	r6, r7
    4fbe:	bf38      	it	cc
    4fc0:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    4fc2:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    4fc6:	bf38      	it	cc
    4fc8:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    4fca:	4295      	cmp	r5, r2
    4fcc:	d3de      	bcc.n	4f8c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    4fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004fd0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    4fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    4fd2:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    4fd4:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    4fd6:	4604      	mov	r4, r0
    4fd8:	bfcc      	ite	gt
    4fda:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    4fde:	2500      	movle	r5, #0
    4fe0:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    4fe2:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    4fe4:	bfd8      	it	le
    4fe6:	4616      	movle	r6, r2

	pLed->init();
    4fe8:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    4fea:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    4fec:	6823      	ldr	r3, [r4, #0]
    4fee:	6062      	str	r2, [r4, #4]
    4ff0:	695b      	ldr	r3, [r3, #20]
    4ff2:	4a0a      	ldr	r2, [pc, #40]	; (501c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    4ff4:	6166      	str	r6, [r4, #20]
    4ff6:	4293      	cmp	r3, r2
    4ff8:	d101      	bne.n	4ffe <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    4ffa:	4620      	mov	r0, r4
    4ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    4ffe:	4620      	mov	r0, r4
    5000:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    5002:	2800      	cmp	r0, #0
    5004:	d0f9      	beq.n	4ffa <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    5006:	4a06      	ldr	r2, [pc, #24]	; (5020 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    5008:	4b06      	ldr	r3, [pc, #24]	; (5024 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    500a:	6851      	ldr	r1, [r2, #4]
    500c:	fb93 f0f0 	sdiv	r0, r3, r0
    5010:	4288      	cmp	r0, r1
    5012:	bf38      	it	cc
    5014:	4608      	movcc	r0, r1
    5016:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    5018:	4620      	mov	r0, r4
    501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    501c:	00000471 	.word	0x00000471
    5020:	1fff9470 	.word	0x1fff9470
    5024:	000f4240 	.word	0x000f4240

00005028 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5028:	4b08      	ldr	r3, [pc, #32]	; (504c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    502a:	b510      	push	{r4, lr}
    502c:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    502e:	b15c      	cbz	r4, 5048 <CFastLED::clearData()+0x20>
    5030:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    5032:	2100      	movs	r1, #0
    5034:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    5036:	b123      	cbz	r3, 5042 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    5038:	6962      	ldr	r2, [r4, #20]
    503a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    503e:	f002 faf3 	bl	7628 <memset>
    5042:	68a4      	ldr	r4, [r4, #8]
    5044:	2c00      	cmp	r4, #0
    5046:	d1f3      	bne.n	5030 <CFastLED::clearData()+0x8>
    5048:	bd10      	pop	{r4, pc}
    504a:	bf00      	nop
    504c:	1fff9480 	.word	0x1fff9480

00005050 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5050:	4b07      	ldr	r3, [pc, #28]	; (5070 <CFastLED::setCorrection(CRGB const&)+0x20>)
    5052:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5054:	b153      	cbz	r3, 506c <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    5056:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5058:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    505a:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    505c:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    505e:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5060:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    5062:	735a      	strb	r2, [r3, #13]
    5064:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5066:	2b00      	cmp	r3, #0
    5068:	d1f6      	bne.n	5058 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    506a:	bc10      	pop	{r4}
    506c:	4770      	bx	lr
    506e:	bf00      	nop
    5070:	1fff9480 	.word	0x1fff9480

00005074 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    5074:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5076:	4c0f      	ldr	r4, [pc, #60]	; (50b4 <CFastLED::countFPS(int)+0x40>)
    5078:	6822      	ldr	r2, [r4, #0]
    507a:	1c53      	adds	r3, r2, #1
    507c:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    507e:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5080:	6023      	str	r3, [r4, #0]
    5082:	db13      	blt.n	50ac <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5084:	4d0c      	ldr	r5, [pc, #48]	; (50b8 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    5086:	4a0d      	ldr	r2, [pc, #52]	; (50bc <CFastLED::countFPS(int)+0x48>)
    5088:	6829      	ldr	r1, [r5, #0]
    508a:	9101      	str	r1, [sp, #4]
	return ret;
    508c:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    508e:	682d      	ldr	r5, [r5, #0]
    5090:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    5092:	6816      	ldr	r6, [r2, #0]
	return ret;
    5094:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    5096:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    509c:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    509e:	1b89      	subs	r1, r1, r6
    50a0:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    50a4:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    50a6:	fbb3 f3f1 	udiv	r3, r3, r1
    50aa:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    50ac:	b003      	add	sp, #12
    50ae:	bc70      	pop	{r4, r5, r6}
    50b0:	4770      	bx	lr
    50b2:	bf00      	nop
    50b4:	1fff9484 	.word	0x1fff9484
    50b8:	1fff94e8 	.word	0x1fff94e8
    50bc:	1fff948c 	.word	0x1fff948c

000050c0 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    50c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50c4:	6843      	ldr	r3, [r0, #4]
    50c6:	4c2d      	ldr	r4, [pc, #180]	; (517c <CFastLED::show(unsigned char)+0xbc>)
    50c8:	b083      	sub	sp, #12
    50ca:	4606      	mov	r6, r0
    50cc:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    50ce:	2b00      	cmp	r3, #0
    50d0:	d14b      	bne.n	516a <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    50d2:	f000 fd6f 	bl	5bb4 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    50d6:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    50d8:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    50da:	b11b      	cbz	r3, 50e4 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    50dc:	4648      	mov	r0, r9
    50de:	68b1      	ldr	r1, [r6, #8]
    50e0:	4798      	blx	r3
    50e2:	4681      	mov	r9, r0
    50e4:	4b26      	ldr	r3, [pc, #152]	; (5180 <CFastLED::show(unsigned char)+0xc0>)
    50e6:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    50e8:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    50ea:	2c00      	cmp	r4, #0
    50ec:	d036      	beq.n	515c <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    50ee:	8873      	ldrh	r3, [r6, #2]
    50f0:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    50f2:	6861      	ldr	r1, [r4, #4]
    50f4:	6962      	ldr	r2, [r4, #20]
    50f6:	2b63      	cmp	r3, #99	; 0x63
    50f8:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    50fa:	bf98      	it	ls
    50fc:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    50fe:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    5102:	f88d 5004 	strb.w	r5, [sp, #4]
    5106:	f88d 5005 	strb.w	r5, [sp, #5]
    510a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    510e:	f1b9 0f00 	cmp.w	r9, #0
    5112:	d01c      	beq.n	514e <CFastLED::show(unsigned char)+0x8e>
    5114:	f104 030b 	add.w	r3, r4, #11
    5118:	f10d 0e04 	add.w	lr, sp, #4
    511c:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    5120:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5124:	f1bb 0f00 	cmp.w	fp, #0
    5128:	d00d      	beq.n	5146 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    512a:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    512e:	f10a 0001 	add.w	r0, sl, #1
    5132:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5136:	f1ba 0f00 	cmp.w	sl, #0
    513a:	d004      	beq.n	5146 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    513c:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5140:	0c00      	lsrs	r0, r0, #16
    5142:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    5146:	4563      	cmp	r3, ip
    5148:	f10e 0e01 	add.w	lr, lr, #1
    514c:	d1e8      	bne.n	5120 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    514e:	4620      	mov	r0, r4
    5150:	ab01      	add	r3, sp, #4
    5152:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5154:	74a7      	strb	r7, [r4, #18]
    5156:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5158:	2c00      	cmp	r4, #0
    515a:	d1c8      	bne.n	50ee <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    515c:	4630      	mov	r0, r6
    515e:	2119      	movs	r1, #25
    5160:	f7ff ff88 	bl	5074 <CFastLED::countFPS(int)>
}
    5164:	b003      	add	sp, #12
    5166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    516a:	f000 fd23 	bl	5bb4 <micros>
    516e:	6822      	ldr	r2, [r4, #0]
    5170:	6873      	ldr	r3, [r6, #4]
    5172:	1a80      	subs	r0, r0, r2
    5174:	4298      	cmp	r0, r3
    5176:	d3aa      	bcc.n	50ce <CFastLED::show(unsigned char)+0xe>
    5178:	e7ab      	b.n	50d2 <CFastLED::show(unsigned char)+0x12>
    517a:	bf00      	nop
    517c:	1fff9488 	.word	0x1fff9488
    5180:	1fff9480 	.word	0x1fff9480

00005184 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    5184:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5186:	4d0a      	ldr	r5, [pc, #40]	; (51b0 <CFastLED::delay(unsigned long)+0x2c>)
    5188:	b083      	sub	sp, #12
    518a:	682b      	ldr	r3, [r5, #0]
    518c:	9300      	str	r3, [sp, #0]
	return ret;
    518e:	9f00      	ldr	r7, [sp, #0]
    5190:	4604      	mov	r4, r0
    5192:	460e      	mov	r6, r1
	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }

	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
    5194:	7821      	ldrb	r1, [r4, #0]
    5196:	4620      	mov	r0, r4
    5198:	f7ff ff92 	bl	50c0 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    519c:	f001 ffb8 	bl	7110 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    51a0:	682b      	ldr	r3, [r5, #0]
    51a2:	9301      	str	r3, [sp, #4]
	return ret;
    51a4:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    51a6:	1bdb      	subs	r3, r3, r7
    51a8:	42b3      	cmp	r3, r6
    51aa:	d3f3      	bcc.n	5194 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    51ac:	b003      	add	sp, #12
    51ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51b0:	1fff94e8 	.word	0x1fff94e8

000051b4 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    51b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51b8:	6843      	ldr	r3, [r0, #4]
    51ba:	4c2c      	ldr	r4, [pc, #176]	; (526c <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    51bc:	b083      	sub	sp, #12
    51be:	4606      	mov	r6, r0
    51c0:	468a      	mov	sl, r1
    51c2:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    51c4:	2b00      	cmp	r3, #0
    51c6:	d149      	bne.n	525c <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    51c8:	f000 fcf4 	bl	5bb4 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    51cc:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    51ce:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    51d0:	b11b      	cbz	r3, 51da <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    51d2:	4648      	mov	r0, r9
    51d4:	68b1      	ldr	r1, [r6, #8]
    51d6:	4798      	blx	r3
    51d8:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    51da:	4b25      	ldr	r3, [pc, #148]	; (5270 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    51dc:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    51de:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    51e0:	2c00      	cmp	r4, #0
    51e2:	d034      	beq.n	524e <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    51e4:	8873      	ldrh	r3, [r6, #2]
    51e6:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    51e8:	6962      	ldr	r2, [r4, #20]
    51ea:	2b63      	cmp	r3, #99	; 0x63
    51ec:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    51ee:	bf98      	it	ls
    51f0:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    51f2:	f8d3 8000 	ldr.w	r8, [r3]
    51f6:	f88d 5004 	strb.w	r5, [sp, #4]
    51fa:	f88d 5005 	strb.w	r5, [sp, #5]
    51fe:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    5202:	f1b9 0f00 	cmp.w	r9, #0
    5206:	d01a      	beq.n	523e <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    5208:	f104 030b 	add.w	r3, r4, #11
    520c:	a801      	add	r0, sp, #4
    520e:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    5212:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5216:	f1bb 0f00 	cmp.w	fp, #0
    521a:	d00c      	beq.n	5236 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    521c:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5220:	f10c 0101 	add.w	r1, ip, #1
    5224:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5228:	f1bc 0f00 	cmp.w	ip, #0
    522c:	d003      	beq.n	5236 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    522e:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5232:	0c09      	lsrs	r1, r1, #16
    5234:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    5236:	4573      	cmp	r3, lr
    5238:	f100 0001 	add.w	r0, r0, #1
    523c:	d1e9      	bne.n	5212 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    523e:	4620      	mov	r0, r4
    5240:	ab01      	add	r3, sp, #4
    5242:	4651      	mov	r1, sl
    5244:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5246:	74a7      	strb	r7, [r4, #18]
    5248:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    524a:	2c00      	cmp	r4, #0
    524c:	d1ca      	bne.n	51e4 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    524e:	4630      	mov	r0, r6
    5250:	2119      	movs	r1, #25
    5252:	f7ff ff0f 	bl	5074 <CFastLED::countFPS(int)>
}
    5256:	b003      	add	sp, #12
    5258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    525c:	f000 fcaa 	bl	5bb4 <micros>
    5260:	6822      	ldr	r2, [r4, #0]
    5262:	6873      	ldr	r3, [r6, #4]
    5264:	1a80      	subs	r0, r0, r2
    5266:	4298      	cmp	r0, r3
    5268:	d3ac      	bcc.n	51c4 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    526a:	e7ad      	b.n	51c8 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    526c:	1fff9488 	.word	0x1fff9488
    5270:	1fff9480 	.word	0x1fff9480

00005274 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    5274:	b510      	push	{r4, lr}
    5276:	4604      	mov	r4, r0
    5278:	b082      	sub	sp, #8
	if(writeData) {
    527a:	b151      	cbz	r1, 5292 <CFastLED::clear(bool)+0x1e>
    527c:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    527e:	461a      	mov	r2, r3
    5280:	a901      	add	r1, sp, #4
    5282:	f88d 3004 	strb.w	r3, [sp, #4]
    5286:	f88d 3005 	strb.w	r3, [sp, #5]
    528a:	f88d 3006 	strb.w	r3, [sp, #6]
    528e:	f7ff ff91 	bl	51b4 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    5292:	4620      	mov	r0, r4
    5294:	f7ff fec8 	bl	5028 <CFastLED::clearData()>
}
    5298:	b002      	add	sp, #8
    529a:	bd10      	pop	{r4, pc}

0000529c <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    529c:	2000      	movs	r0, #0
    529e:	4770      	bx	lr

000052a0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    52a0:	4b04      	ldr	r3, [pc, #16]	; (52b4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    52a2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    52a4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    52a6:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    52aa:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    52ac:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    52ae:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    52b0:	60da      	str	r2, [r3, #12]
    52b2:	4770      	bx	lr
    52b4:	1fff9470 	.word	0x1fff9470

000052b8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    52b8:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    52ba:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    52bc:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    52be:	7882      	ldrb	r2, [r0, #2]
    52c0:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    52c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    52c6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    52ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    52ce:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    52d0:	0625      	lsls	r5, r4, #24
    52d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    52d6:	d45f      	bmi.n	5398 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    52d8:	f004 0540 	and.w	r5, r4, #64	; 0x40
    52dc:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    52e0:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    52e4:	2d00      	cmp	r5, #0
    52e6:	d146      	bne.n	5376 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    52e8:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    52ec:	2c00      	cmp	r4, #0
    52ee:	d06c      	beq.n	53ca <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    52f0:	3355      	adds	r3, #85	; 0x55
    52f2:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    52f4:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    52f6:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    52f8:	2eff      	cmp	r6, #255	; 0xff
    52fa:	d01c      	beq.n	5336 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    52fc:	2e00      	cmp	r6, #0
    52fe:	d079      	beq.n	53f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    5300:	b11c      	cbz	r4, 530a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5302:	fb06 4404 	mla	r4, r6, r4, r4
    5306:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    530a:	b11d      	cbz	r5, 5314 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    530c:	fb06 5505 	mla	r5, r6, r5, r5
    5310:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    5314:	b11b      	cbz	r3, 531e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    5316:	fb06 3303 	mla	r3, r6, r3, r3
    531a:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    531e:	43f0      	mvns	r0, r6
    5320:	b2c0      	uxtb	r0, r0
    5322:	fb00 0000 	mla	r0, r0, r0, r0
    5326:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    532a:	4404      	add	r4, r0
            g += brightness_floor;
    532c:	4405      	add	r5, r0
            b += brightness_floor;
    532e:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5330:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    5332:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    5334:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    5336:	2aff      	cmp	r2, #255	; 0xff
    5338:	d018      	beq.n	536c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    533a:	fb12 f002 	smulbb	r0, r2, r2
    533e:	3200      	adds	r2, #0
    5340:	bf18      	it	ne
    5342:	2201      	movne	r2, #1
    5344:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    5348:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    534c:	d056      	beq.n	53fc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    534e:	b11c      	cbz	r4, 5358 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5350:	fb02 4404 	mla	r4, r2, r4, r4
    5354:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    5358:	b11d      	cbz	r5, 5362 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    535a:	fb02 5505 	mla	r5, r2, r5, r5
    535e:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    5362:	b11b      	cbz	r3, 536c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    5364:	fb02 3303 	mla	r3, r2, r3, r3
    5368:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    536c:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    536e:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    5370:	708b      	strb	r3, [r1, #2]
}
    5372:	bcf0      	pop	{r4, r5, r6, r7}
    5374:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    5376:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    537a:	bb5c      	cbnz	r4, 53d4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    537c:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    5380:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    5384:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5388:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    538a:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    538c:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    5390:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5392:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    5394:	463b      	mov	r3, r7
    5396:	e7af      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    5398:	f004 0740 	and.w	r7, r4, #64	; 0x40
    539c:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    53a0:	b9e7      	cbnz	r7, 53dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    53a2:	f004 0720 	and.w	r7, r4, #32
    53a6:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    53aa:	2f00      	cmp	r7, #0
    53ac:	d136      	bne.n	541c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    53ae:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    53b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    53b6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    53ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    53be:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    53c2:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    53c4:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    53c6:	b2c3      	uxtb	r3, r0
    53c8:	e796      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    53ca:	43dc      	mvns	r4, r3
    53cc:	b2e4      	uxtb	r4, r4
                g = third;
    53ce:	461d      	mov	r5, r3
                b = 0;
    53d0:	4603      	mov	r3, r0
    53d2:	e791      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    53d4:	2400      	movs	r4, #0
                g = K255 - third;
    53d6:	43dd      	mvns	r5, r3
    53d8:	b2ed      	uxtb	r5, r5
    53da:	e78d      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    53dc:	f004 0420 	and.w	r4, r4, #32
    53e0:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    53e4:	b994      	cbnz	r4, 540c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    53e6:	f103 0455 	add.w	r4, r3, #85	; 0x55
    53ea:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    53ec:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    53f0:	b2db      	uxtb	r3, r3
    53f2:	e781      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    53f4:	23ff      	movs	r3, #255	; 0xff
    53f6:	461d      	mov	r5, r3
    53f8:	461c      	mov	r4, r3
    53fa:	e79c      	b.n	5336 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    53fc:	4615      	mov	r5, r2
    53fe:	4614      	mov	r4, r2
    5400:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5402:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    5404:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    5406:	708b      	strb	r3, [r1, #2]
}
    5408:	bcf0      	pop	{r4, r5, r6, r7}
    540a:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    540c:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    5410:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    5412:	2500      	movs	r5, #0
                b = K85 - third;
    5414:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    5418:	b2db      	uxtb	r3, r3
    541a:	e76d      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    541c:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    541e:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    5420:	b2c3      	uxtb	r3, r0
    5422:	e769      	b.n	52f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00005424 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    5424:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5426:	b361      	cbz	r1, 5482 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    5428:	f101 3eff 	add.w	lr, r1, #4294967295
    542c:	fa1f fe8e 	uxth.w	lr, lr
    5430:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    5434:	2200      	movs	r2, #0
    5436:	f10e 0e06 	add.w	lr, lr, #6
    543a:	4486      	add	lr, r0
    543c:	1cc3      	adds	r3, r0, #3
    543e:	4615      	mov	r5, r2
    5440:	4614      	mov	r4, r2
        red32   += *p++;
    5442:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    5446:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    544a:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    544e:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5450:	4573      	cmp	r3, lr
        red32   += *p++;
    5452:	443c      	add	r4, r7
        green32 += *p++;
    5454:	4405      	add	r5, r0
        blue32  += *p++;
    5456:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5458:	d1f3      	bne.n	5442 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    545a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    545e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5462:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    5466:	f3c4 1317 	ubfx	r3, r4, #4, #24
    546a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    546e:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    5472:	0a12      	lsrs	r2, r2, #8
    5474:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    5478:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    547c:	1910      	adds	r0, r2, r4
}
    547e:	4408      	add	r0, r1
    5480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    5482:	460c      	mov	r4, r1
    5484:	460a      	mov	r2, r1
    5486:	e7f7      	b.n	5478 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

00005488 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    5488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    548c:	4b25      	ldr	r3, [pc, #148]	; (5524 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    548e:	681c      	ldr	r4, [r3, #0]
    5490:	b085      	sub	sp, #20
    5492:	4607      	mov	r7, r0
    5494:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5496:	b19c      	cbz	r4, 54c0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    5498:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5530 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    549c:	257d      	movs	r5, #125	; 0x7d
    549e:	e007      	b.n	54b0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    54a0:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    54a2:	b281      	uxth	r1, r0
    54a4:	4630      	mov	r0, r6
    54a6:	f7ff ffbd 	bl	5424 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    54aa:	68a4      	ldr	r4, [r4, #8]
    54ac:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    54ae:	b144      	cbz	r4, 54c2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    54b0:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    54b4:	691b      	ldr	r3, [r3, #16]
    54b6:	454b      	cmp	r3, r9
    54b8:	d0f2      	beq.n	54a0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    54ba:	4620      	mov	r0, r4
    54bc:	4798      	blx	r3
    54be:	e7f0      	b.n	54a2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    54c0:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    54c2:	fb05 f507 	mul.w	r5, r5, r7
    54c6:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    54c8:	4b17      	ldr	r3, [pc, #92]	; (5528 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    54ca:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    54cc:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    54ce:	d210      	bcs.n	54f2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    54d0:	b323      	cbz	r3, 551c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    54d2:	4a16      	ldr	r2, [pc, #88]	; (552c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    54d4:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    54d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    54da:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    54de:	f89d 100c 	ldrb.w	r1, [sp, #12]
    54e2:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    54e4:	4638      	mov	r0, r7
    54e6:	ea23 0301 	bic.w	r3, r3, r1
    54ea:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    54ec:	b005      	add	sp, #20
    54ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    54f2:	fb08 f707 	mul.w	r7, r8, r7
    54f6:	fbb7 f0f5 	udiv	r0, r7, r5
    54fa:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    54fc:	b173      	cbz	r3, 551c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    54fe:	4a0b      	ldr	r2, [pc, #44]	; (552c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    5500:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    5502:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    5506:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    550a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    550e:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    5510:	4638      	mov	r0, r7
    5512:	430b      	orrs	r3, r1
    5514:	7013      	strb	r3, [r2, #0]
}
    5516:	b005      	add	sp, #20
    5518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    551c:	4638      	mov	r0, r7
}
    551e:	b005      	add	sp, #20
    5520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5524:	1fff9480 	.word	0x1fff9480
    5528:	1fff9494 	.word	0x1fff9494
    552c:	00009d1c 	.word	0x00009d1c
    5530:	0000046d 	.word	0x0000046d

00005534 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	uint8_t getBrightness() { return m_Scale; }

	/// Set the maximum power to be used, given in volts and milliamps.
	/// @param volts - how many volts the leds are being driven at (usually 5)
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }
    5534:	4b03      	ldr	r3, [pc, #12]	; (5544 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    5536:	4a04      	ldr	r2, [pc, #16]	; (5548 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    5538:	60da      	str	r2, [r3, #12]
    553a:	fb01 f100 	mul.w	r1, r1, r0
    553e:	6099      	str	r1, [r3, #8]
    5540:	4770      	bx	lr
    5542:	bf00      	nop
    5544:	1fff9470 	.word	0x1fff9470
    5548:	00005489 	.word	0x00005489

0000554c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    554c:	4807      	ldr	r0, [pc, #28]	; (556c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    554e:	b082      	sub	sp, #8
    5550:	6803      	ldr	r3, [r0, #0]
    5552:	9301      	str	r3, [sp, #4]
	return ret;
    5554:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    5556:	4411      	add	r1, r2
    5558:	e001      	b.n	555e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    555a:	4299      	cmp	r1, r3
    555c:	d304      	bcc.n	5568 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    555e:	6803      	ldr	r3, [r0, #0]
    5560:	9300      	str	r3, [sp, #0]
	return ret;
    5562:	9b00      	ldr	r3, [sp, #0]
    5564:	429a      	cmp	r2, r3
    5566:	d9f8      	bls.n	555a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    5568:	b002      	add	sp, #8
    556a:	4770      	bx	lr
    556c:	1fff94e8 	.word	0x1fff94e8

00005570 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    5570:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5572:	4a10      	ldr	r2, [pc, #64]	; (55b4 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    5574:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    5576:	b9a1      	cbnz	r1, 55a2 <VisualMicroDebug::outPacketStart(bool)+0x32>
    5578:	6813      	ldr	r3, [r2, #0]
    557a:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    557c:	6841      	ldr	r1, [r0, #4]
	return ret;
    557e:	9b00      	ldr	r3, [sp, #0]
    5580:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    5582:	2931      	cmp	r1, #49	; 0x31
    5584:	d80d      	bhi.n	55a2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5586:	6813      	ldr	r3, [r2, #0]
    5588:	9302      	str	r3, [sp, #8]
	return ret;
    558a:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    558c:	f104 0332 	add.w	r3, r4, #50	; 0x32
    5590:	1a59      	subs	r1, r3, r1
    5592:	e001      	b.n	5598 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    5594:	4299      	cmp	r1, r3
    5596:	d304      	bcc.n	55a2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5598:	6813      	ldr	r3, [r2, #0]
    559a:	9301      	str	r3, [sp, #4]
	return ret;
    559c:	9b01      	ldr	r3, [sp, #4]
    559e:	429c      	cmp	r4, r3
    55a0:	d9f8      	bls.n	5594 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55a2:	6813      	ldr	r3, [r2, #0]
    55a4:	9303      	str	r3, [sp, #12]
	return ret;
    55a6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    55a8:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    55aa:	2001      	movs	r0, #1
    55ac:	b005      	add	sp, #20
    55ae:	bc10      	pop	{r4}
    55b0:	4770      	bx	lr
    55b2:	bf00      	nop
    55b4:	1fff94e8 	.word	0x1fff94e8

000055b8 <VisualMicroDebug::outPacketEnd()>:
    55b8:	4770      	bx	lr
    55ba:	bf00      	nop

000055bc <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    55bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    55c0:	f000 bb1a 	b.w	5bf8 <delay>

000055c4 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    55c4:	2300      	movs	r3, #0
    55c6:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    55c8:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    55ca:	b171      	cbz	r1, 55ea <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55cc:	4807      	ldr	r0, [pc, #28]	; (55ec <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    55ce:	b082      	sub	sp, #8
    55d0:	6803      	ldr	r3, [r0, #0]
    55d2:	9301      	str	r3, [sp, #4]
	return ret;
    55d4:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    55d6:	4411      	add	r1, r2
    55d8:	e001      	b.n	55de <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    55da:	4299      	cmp	r1, r3
    55dc:	d304      	bcc.n	55e8 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55de:	6803      	ldr	r3, [r0, #0]
    55e0:	9300      	str	r3, [sp, #0]
	return ret;
    55e2:	9b00      	ldr	r3, [sp, #0]
    55e4:	429a      	cmp	r2, r3
    55e6:	d9f8      	bls.n	55da <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    55e8:	b002      	add	sp, #8
    55ea:	4770      	bx	lr
    55ec:	1fff94e8 	.word	0x1fff94e8

000055f0 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    55f0:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55f2:	4c13      	ldr	r4, [pc, #76]	; (5640 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    55f4:	b085      	sub	sp, #20
    55f6:	6823      	ldr	r3, [r4, #0]
    55f8:	9303      	str	r3, [sp, #12]
	return ret;
    55fa:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    55fc:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    55fe:	460d      	mov	r5, r1
    5600:	4810      	ldr	r0, [pc, #64]	; (5644 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    5602:	2106      	movs	r1, #6
    5604:	f001 fb10 	bl	6c28 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    5608:	2300      	movs	r3, #0
    560a:	220a      	movs	r2, #10
    560c:	4629      	mov	r1, r5
    560e:	480e      	ldr	r0, [pc, #56]	; (5648 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    5610:	f001 fd1e 	bl	7050 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    5614:	2106      	movs	r1, #6
    5616:	480d      	ldr	r0, [pc, #52]	; (564c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    5618:	f001 fb06 	bl	6c28 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    561c:	480a      	ldr	r0, [pc, #40]	; (5648 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    561e:	f001 fd07 	bl	7030 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5622:	6823      	ldr	r3, [r4, #0]
    5624:	9302      	str	r3, [sp, #8]
	return ret;
    5626:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    5628:	f102 0132 	add.w	r1, r2, #50	; 0x32
    562c:	e001      	b.n	5632 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    562e:	4299      	cmp	r1, r3
    5630:	d304      	bcc.n	563c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5632:	6823      	ldr	r3, [r4, #0]
    5634:	9301      	str	r3, [sp, #4]
	return ret;
    5636:	9b01      	ldr	r3, [sp, #4]
    5638:	429a      	cmp	r2, r3
    563a:	d9f8      	bls.n	562e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    563c:	b005      	add	sp, #20
    563e:	bd30      	pop	{r4, r5, pc}
    5640:	1fff94e8 	.word	0x1fff94e8
    5644:	00009c98 	.word	0x00009c98
    5648:	1fff873c 	.word	0x1fff873c
    564c:	00009ca0 	.word	0x00009ca0

00005650 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    5650:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    5652:	7e03      	ldrb	r3, [r0, #24]
    5654:	b90b      	cbnz	r3, 565a <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    5656:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    5658:	bd38      	pop	{r3, r4, r5, pc}
    565a:	460d      	mov	r5, r1
    565c:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    565e:	f001 fab9 	bl	6bd4 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    5662:	f010 0fff 	tst.w	r0, #255	; 0xff
    5666:	d101      	bne.n	566c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    5668:	2065      	movs	r0, #101	; 0x65
    566a:	bd38      	pop	{r3, r4, r5, pc}
    566c:	f001 fab2 	bl	6bd4 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    5670:	f010 0fff 	tst.w	r0, #255	; 0xff
    5674:	d0f8      	beq.n	5668 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    5676:	f001 fa71 	bl	6b5c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    567a:	b2c0      	uxtb	r0, r0
    567c:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    5680:	2b1e      	cmp	r3, #30
    5682:	d8f3      	bhi.n	566c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    5684:	a201      	add	r2, pc, #4	; (adr r2, 568c <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    5686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    568a:	bf00      	nop
    568c:	00005715 	.word	0x00005715
    5690:	0000566d 	.word	0x0000566d
    5694:	0000566d 	.word	0x0000566d
    5698:	0000566d 	.word	0x0000566d
    569c:	0000566d 	.word	0x0000566d
    56a0:	0000566d 	.word	0x0000566d
    56a4:	0000566d 	.word	0x0000566d
    56a8:	0000566d 	.word	0x0000566d
    56ac:	0000566d 	.word	0x0000566d
    56b0:	0000566d 	.word	0x0000566d
    56b4:	0000566d 	.word	0x0000566d
    56b8:	00005709 	.word	0x00005709
    56bc:	0000566d 	.word	0x0000566d
    56c0:	0000566d 	.word	0x0000566d
    56c4:	0000566d 	.word	0x0000566d
    56c8:	0000566d 	.word	0x0000566d
    56cc:	00005657 	.word	0x00005657
    56d0:	0000566d 	.word	0x0000566d
    56d4:	0000566d 	.word	0x0000566d
    56d8:	0000566d 	.word	0x0000566d
    56dc:	0000566d 	.word	0x0000566d
    56e0:	0000566d 	.word	0x0000566d
    56e4:	0000566d 	.word	0x0000566d
    56e8:	0000566d 	.word	0x0000566d
    56ec:	0000566d 	.word	0x0000566d
    56f0:	00005657 	.word	0x00005657
    56f4:	0000566d 	.word	0x0000566d
    56f8:	0000566d 	.word	0x0000566d
    56fc:	0000566d 	.word	0x0000566d
    5700:	0000566d 	.word	0x0000566d
    5704:	00005659 	.word	0x00005659
		{

		case 'c':
			sendContinuedACK(breakPointId);
    5708:	4620      	mov	r0, r4
    570a:	4629      	mov	r1, r5
    570c:	f7ff ff70 	bl	55f0 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    5710:	2063      	movs	r0, #99	; 0x63
    5712:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    5714:	2300      	movs	r3, #0
    5716:	7623      	strb	r3, [r4, #24]
			return 'c';
    5718:	2063      	movs	r0, #99	; 0x63
    571a:	bd38      	pop	{r3, r4, r5, pc}

0000571c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    571c:	b570      	push	{r4, r5, r6, lr}
    571e:	4605      	mov	r5, r0
    5720:	b082      	sub	sp, #8
    5722:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    5724:	b1c9      	cbz	r1, 575a <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    5726:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5728:	4c0d      	ldr	r4, [pc, #52]	; (5760 <VisualMicroDebug::start(bool, bool)+0x44>)
    572a:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    572c:	2100      	movs	r1, #0
    572e:	4628      	mov	r0, r5
    5730:	f7ff ff8e 	bl	5650 <VisualMicroDebug::breakWait(unsigned char)>
    5734:	2863      	cmp	r0, #99	; 0x63
    5736:	d010      	beq.n	575a <VisualMicroDebug::start(bool, bool)+0x3e>
    5738:	6823      	ldr	r3, [r4, #0]
    573a:	9301      	str	r3, [sp, #4]
	return ret;
    573c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    573e:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5740:	6823      	ldr	r3, [r4, #0]
    5742:	9300      	str	r3, [sp, #0]
	return ret;
    5744:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    5746:	429a      	cmp	r2, r3
    5748:	d8f0      	bhi.n	572c <VisualMicroDebug::start(bool, bool)+0x10>
    574a:	4299      	cmp	r1, r3
    574c:	d2f8      	bcs.n	5740 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    574e:	2100      	movs	r1, #0
    5750:	4628      	mov	r0, r5
    5752:	f7ff ff7d 	bl	5650 <VisualMicroDebug::breakWait(unsigned char)>
    5756:	2863      	cmp	r0, #99	; 0x63
    5758:	d1ee      	bne.n	5738 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    575a:	762e      	strb	r6, [r5, #24]
#endif

}
    575c:	b002      	add	sp, #8
    575e:	bd70      	pop	{r4, r5, r6, pc}
    5760:	1fff94e8 	.word	0x1fff94e8

00005764 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    5764:	4b03      	ldr	r3, [pc, #12]	; (5774 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    5766:	2200      	movs	r2, #0
    5768:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    576a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    576c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    576e:	615a      	str	r2, [r3, #20]
    5770:	4770      	bx	lr
    5772:	bf00      	nop
    5774:	1fff9498 	.word	0x1fff9498

00005778 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    5778:	4a37      	ldr	r2, [pc, #220]	; (5858 <wait_for_cal+0xe0>)
    577a:	4938      	ldr	r1, [pc, #224]	; (585c <wait_for_cal+0xe4>)
    577c:	6813      	ldr	r3, [r2, #0]
    577e:	061b      	lsls	r3, r3, #24
    5780:	d4fc      	bmi.n	577c <wait_for_cal+0x4>
    5782:	680b      	ldr	r3, [r1, #0]
    5784:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    5788:	d1f8      	bne.n	577c <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    578a:	b672      	cpsid	i
	if (calibrating) {
    578c:	4934      	ldr	r1, [pc, #208]	; (5860 <wait_for_cal+0xe8>)
    578e:	780a      	ldrb	r2, [r1, #0]
    5790:	2a00      	cmp	r2, #0
    5792:	d05f      	beq.n	5854 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    5794:	4a33      	ldr	r2, [pc, #204]	; (5864 <wait_for_cal+0xec>)
    5796:	4834      	ldr	r0, [pc, #208]	; (5868 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    5798:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    579a:	4c34      	ldr	r4, [pc, #208]	; (586c <wait_for_cal+0xf4>)
    579c:	6817      	ldr	r7, [r2, #0]
    579e:	6806      	ldr	r6, [r0, #0]
    57a0:	6825      	ldr	r5, [r4, #0]
    57a2:	68d4      	ldr	r4, [r2, #12]
    57a4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    57a6:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    57a8:	3214      	adds	r2, #20
    57aa:	6800      	ldr	r0, [r0, #0]
    57ac:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    57ae:	4f30      	ldr	r7, [pc, #192]	; (5870 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    57b0:	4435      	add	r5, r6
    57b2:	442c      	add	r4, r5
    57b4:	4420      	add	r0, r4
    57b6:	4402      	add	r2, r0
    57b8:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    57bc:	4e2d      	ldr	r6, [pc, #180]	; (5874 <wait_for_cal+0xfc>)
    57be:	482e      	ldr	r0, [pc, #184]	; (5878 <wait_for_cal+0x100>)
    57c0:	4d2e      	ldr	r5, [pc, #184]	; (587c <wait_for_cal+0x104>)
    57c2:	4c2f      	ldr	r4, [pc, #188]	; (5880 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    57c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    57c8:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    57ca:	6837      	ldr	r7, [r6, #0]
    57cc:	6806      	ldr	r6, [r0, #0]
    57ce:	682d      	ldr	r5, [r5, #0]
    57d0:	4a2c      	ldr	r2, [pc, #176]	; (5884 <wait_for_cal+0x10c>)
    57d2:	6824      	ldr	r4, [r4, #0]
    57d4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    57d6:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    57d8:	6800      	ldr	r0, [r0, #0]
    57da:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    57dc:	4f2a      	ldr	r7, [pc, #168]	; (5888 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    57de:	4435      	add	r5, r6
    57e0:	442c      	add	r4, r5
    57e2:	4420      	add	r0, r4
    57e4:	4402      	add	r2, r0
    57e6:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    57ea:	4e28      	ldr	r6, [pc, #160]	; (588c <wait_for_cal+0x114>)
    57ec:	4828      	ldr	r0, [pc, #160]	; (5890 <wait_for_cal+0x118>)
    57ee:	4d29      	ldr	r5, [pc, #164]	; (5894 <wait_for_cal+0x11c>)
    57f0:	4c29      	ldr	r4, [pc, #164]	; (5898 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    57f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    57f6:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    57f8:	6837      	ldr	r7, [r6, #0]
    57fa:	6806      	ldr	r6, [r0, #0]
    57fc:	682d      	ldr	r5, [r5, #0]
    57fe:	4a27      	ldr	r2, [pc, #156]	; (589c <wait_for_cal+0x124>)
    5800:	6824      	ldr	r4, [r4, #0]
    5802:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    5804:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    5806:	6800      	ldr	r0, [r0, #0]
    5808:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    580a:	4f25      	ldr	r7, [pc, #148]	; (58a0 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    580c:	4435      	add	r5, r6
    580e:	442c      	add	r4, r5
    5810:	4420      	add	r0, r4
    5812:	4402      	add	r2, r0
    5814:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    5818:	4e22      	ldr	r6, [pc, #136]	; (58a4 <wait_for_cal+0x12c>)
    581a:	4823      	ldr	r0, [pc, #140]	; (58a8 <wait_for_cal+0x130>)
    581c:	4d23      	ldr	r5, [pc, #140]	; (58ac <wait_for_cal+0x134>)
    581e:	4c24      	ldr	r4, [pc, #144]	; (58b0 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    5820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5824:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    5826:	6837      	ldr	r7, [r6, #0]
    5828:	6806      	ldr	r6, [r0, #0]
    582a:	682d      	ldr	r5, [r5, #0]
    582c:	4a21      	ldr	r2, [pc, #132]	; (58b4 <wait_for_cal+0x13c>)
    582e:	6824      	ldr	r4, [r4, #0]
    5830:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    5832:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    5834:	6800      	ldr	r0, [r0, #0]
    5836:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    5838:	4435      	add	r5, r6
    583a:	442c      	add	r4, r5
    583c:	4420      	add	r0, r4
    583e:	4402      	add	r2, r0
    5840:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    5844:	481c      	ldr	r0, [pc, #112]	; (58b8 <wait_for_cal+0x140>)
    5846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    584a:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    584c:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    584e:	b662      	cpsie	i
}
    5850:	bcf0      	pop	{r4, r5, r6, r7}
    5852:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    5854:	b662      	cpsie	i
    5856:	4770      	bx	lr
    5858:	4003b024 	.word	0x4003b024
    585c:	400bb024 	.word	0x400bb024
    5860:	1fff94e1 	.word	0x1fff94e1
    5864:	4003b038 	.word	0x4003b038
    5868:	4003b03c 	.word	0x4003b03c
    586c:	4003b040 	.word	0x4003b040
    5870:	4003b02c 	.word	0x4003b02c
    5874:	4003b058 	.word	0x4003b058
    5878:	4003b05c 	.word	0x4003b05c
    587c:	4003b060 	.word	0x4003b060
    5880:	4003b064 	.word	0x4003b064
    5884:	4003b06c 	.word	0x4003b06c
    5888:	4003b030 	.word	0x4003b030
    588c:	400bb038 	.word	0x400bb038
    5890:	400bb03c 	.word	0x400bb03c
    5894:	400bb040 	.word	0x400bb040
    5898:	400bb044 	.word	0x400bb044
    589c:	400bb04c 	.word	0x400bb04c
    58a0:	400bb02c 	.word	0x400bb02c
    58a4:	400bb058 	.word	0x400bb058
    58a8:	400bb05c 	.word	0x400bb05c
    58ac:	400bb060 	.word	0x400bb060
    58b0:	400bb064 	.word	0x400bb064
    58b4:	400bb06c 	.word	0x400bb06c
    58b8:	400bb030 	.word	0x400bb030

000058bc <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    58bc:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    58be:	4829      	ldr	r0, [pc, #164]	; (5964 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    58c0:	4a29      	ldr	r2, [pc, #164]	; (5968 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    58c2:	4b2a      	ldr	r3, [pc, #168]	; (596c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    58c4:	4d2a      	ldr	r5, [pc, #168]	; (5970 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    58c6:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    58c8:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    58ca:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    58cc:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    58ce:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    58d0:	4c28      	ldr	r4, [pc, #160]	; (5974 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    58d2:	2b08      	cmp	r3, #8
    58d4:	d030      	beq.n	5938 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    58d6:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    58d8:	4827      	ldr	r0, [pc, #156]	; (5978 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    58da:	4928      	ldr	r1, [pc, #160]	; (597c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    58dc:	d037      	beq.n	594e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    58de:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    58e0:	bf0c      	ite	eq
    58e2:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    58e4:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    58e6:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    58e8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    58ea:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    58ec:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    58ee:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    58f0:	4b23      	ldr	r3, [pc, #140]	; (5980 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    58f2:	4924      	ldr	r1, [pc, #144]	; (5984 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    58f4:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    58f6:	4a24      	ldr	r2, [pc, #144]	; (5988 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    58f8:	b1bb      	cbz	r3, 592a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    58fa:	2301      	movs	r3, #1
    58fc:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    58fe:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5900:	4b22      	ldr	r3, [pc, #136]	; (598c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5902:	4923      	ldr	r1, [pc, #140]	; (5990 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5904:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5906:	4a23      	ldr	r2, [pc, #140]	; (5994 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    5908:	2b01      	cmp	r3, #1
    590a:	d926      	bls.n	595a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    590c:	2b04      	cmp	r3, #4
    590e:	d90f      	bls.n	5930 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    5910:	2b08      	cmp	r3, #8
    5912:	d91e      	bls.n	5952 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    5914:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    5916:	bf94      	ite	ls
    5918:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    591a:	2387      	movhi	r3, #135	; 0x87
    591c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    591e:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    5920:	4b1d      	ldr	r3, [pc, #116]	; (5998 <analog_init+0xdc>)
    5922:	2201      	movs	r2, #1
    5924:	701a      	strb	r2, [r3, #0]
}
    5926:	bc30      	pop	{r4, r5}
    5928:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    592a:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    592c:	6013      	str	r3, [r2, #0]
    592e:	e7e7      	b.n	5900 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    5930:	2384      	movs	r3, #132	; 0x84
    5932:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    5934:	6013      	str	r3, [r2, #0]
    5936:	e7f3      	b.n	5920 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5938:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    593c:	490f      	ldr	r1, [pc, #60]	; (597c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    593e:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5940:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5942:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5944:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5946:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5948:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    594a:	600b      	str	r3, [r1, #0]
    594c:	e7d0      	b.n	58f0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    594e:	2239      	movs	r2, #57	; 0x39
    5950:	e7f7      	b.n	5942 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5952:	2385      	movs	r3, #133	; 0x85
    5954:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5956:	6013      	str	r3, [r2, #0]
    5958:	e7e2      	b.n	5920 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    595a:	2380      	movs	r3, #128	; 0x80
    595c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    595e:	6013      	str	r3, [r2, #0]
    5960:	e7de      	b.n	5920 <analog_init+0x64>
    5962:	bf00      	nop
    5964:	40074000 	.word	0x40074000
    5968:	40074001 	.word	0x40074001
    596c:	1fff8736 	.word	0x1fff8736
    5970:	4003b008 	.word	0x4003b008
    5974:	4003b00c 	.word	0x4003b00c
    5978:	400bb008 	.word	0x400bb008
    597c:	400bb00c 	.word	0x400bb00c
    5980:	1fff94e4 	.word	0x1fff94e4
    5984:	4003b020 	.word	0x4003b020
    5988:	400bb020 	.word	0x400bb020
    598c:	1fff8737 	.word	0x1fff8737
    5990:	4003b024 	.word	0x4003b024
    5994:	400bb024 	.word	0x400bb024
    5998:	1fff94e1 	.word	0x1fff94e1

0000599c <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    599c:	2828      	cmp	r0, #40	; 0x28
    599e:	d82f      	bhi.n	5a00 <analogRead+0x64>
	channel = pin2sc1a[pin];
    59a0:	4b33      	ldr	r3, [pc, #204]	; (5a70 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    59a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    59a6:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    59a8:	2eff      	cmp	r6, #255	; 0xff
    59aa:	d02b      	beq.n	5a04 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    59ac:	4b31      	ldr	r3, [pc, #196]	; (5a74 <analogRead+0xd8>)
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d12a      	bne.n	5a0a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    59b4:	0632      	lsls	r2, r6, #24
    59b6:	d42c      	bmi.n	5a12 <analogRead+0x76>
#endif

	__disable_irq();
    59b8:	b672      	cpsid	i
    59ba:	4d2f      	ldr	r5, [pc, #188]	; (5a78 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    59bc:	4c2f      	ldr	r4, [pc, #188]	; (5a7c <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    59be:	462f      	mov	r7, r5
    59c0:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    59c2:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    59c4:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    59c6:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    59c8:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    59ca:	6823      	ldr	r3, [r4, #0]
    59cc:	061b      	lsls	r3, r3, #24
    59ce:	d40c      	bmi.n	59ea <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    59d0:	783b      	ldrb	r3, [r7, #0]
    59d2:	b91b      	cbnz	r3, 59dc <analogRead+0x40>
    59d4:	e7f4      	b.n	59c0 <analogRead+0x24>
    59d6:	782b      	ldrb	r3, [r5, #0]
    59d8:	2b00      	cmp	r3, #0
    59da:	d0f1      	beq.n	59c0 <analogRead+0x24>
		__enable_irq();
    59dc:	b662      	cpsie	i
		yield();
    59de:	f001 fb97 	bl	7110 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    59e2:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    59e4:	6823      	ldr	r3, [r4, #0]
    59e6:	0618      	lsls	r0, r3, #24
    59e8:	d5f5      	bpl.n	59d6 <analogRead+0x3a>
			result = ADC0_RA;
    59ea:	4b25      	ldr	r3, [pc, #148]	; (5a80 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    59ec:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    59ee:	2200      	movs	r2, #0
    59f0:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    59f2:	b662      	cpsie	i
			result >>= analog_right_shift;
    59f4:	4a23      	ldr	r2, [pc, #140]	; (5a84 <analogRead+0xe8>)
    59f6:	7810      	ldrb	r0, [r2, #0]
    59f8:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    59fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    5a00:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    5a02:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    5a04:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    5a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    5a0a:	f7ff feb5 	bl	5778 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    5a0e:	0632      	lsls	r2, r6, #24
    5a10:	d5d2      	bpl.n	59b8 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    5a12:	b672      	cpsid	i
    5a14:	4d1c      	ldr	r5, [pc, #112]	; (5a88 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    5a16:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5a94 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    5a1a:	4c1c      	ldr	r4, [pc, #112]	; (5a8c <analogRead+0xf0>)
    5a1c:	f006 0740 	and.w	r7, r6, #64	; 0x40
    5a20:	b2ff      	uxtb	r7, r7
    5a22:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    5a26:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    5a2a:	b1df      	cbz	r7, 5a64 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    5a2c:	f023 0310 	bic.w	r3, r3, #16
    5a30:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    5a34:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    5a36:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    5a38:	4a13      	ldr	r2, [pc, #76]	; (5a88 <analogRead+0xec>)
    5a3a:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    5a3c:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    5a3e:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    5a40:	6823      	ldr	r3, [r4, #0]
    5a42:	0619      	lsls	r1, r3, #24
    5a44:	d40c      	bmi.n	5a60 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    5a46:	7813      	ldrb	r3, [r2, #0]
    5a48:	b91b      	cbnz	r3, 5a52 <analogRead+0xb6>
    5a4a:	e7ec      	b.n	5a26 <analogRead+0x8a>
    5a4c:	782b      	ldrb	r3, [r5, #0]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d0e9      	beq.n	5a26 <analogRead+0x8a>
		__enable_irq();
    5a52:	b662      	cpsie	i
		yield();
    5a54:	f001 fb5c 	bl	7110 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    5a58:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    5a5a:	6823      	ldr	r3, [r4, #0]
    5a5c:	061b      	lsls	r3, r3, #24
    5a5e:	d5f5      	bpl.n	5a4c <analogRead+0xb0>
			result = ADC1_RA;
    5a60:	4b0b      	ldr	r3, [pc, #44]	; (5a90 <analogRead+0xf4>)
    5a62:	e7c3      	b.n	59ec <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    5a64:	f043 0310 	orr.w	r3, r3, #16
    5a68:	f8c8 3000 	str.w	r3, [r8]
    5a6c:	e7e2      	b.n	5a34 <analogRead+0x98>
    5a6e:	bf00      	nop
    5a70:	00009cf0 	.word	0x00009cf0
    5a74:	1fff94e1 	.word	0x1fff94e1
    5a78:	1fff94e3 	.word	0x1fff94e3
    5a7c:	4003b000 	.word	0x4003b000
    5a80:	4003b010 	.word	0x4003b010
    5a84:	1fff94e0 	.word	0x1fff94e0
    5a88:	1fff94e2 	.word	0x1fff94e2
    5a8c:	400bb000 	.word	0x400bb000
    5a90:	400bb010 	.word	0x400bb010
    5a94:	400bb00c 	.word	0x400bb00c

00005a98 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    5a98:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    5a9a:	4c10      	ldr	r4, [pc, #64]	; (5adc <fault_isr+0x44>)
    5a9c:	e008      	b.n	5ab0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    5a9e:	6823      	ldr	r3, [r4, #0]
    5aa0:	0559      	lsls	r1, r3, #21
    5aa2:	d40d      	bmi.n	5ac0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    5aa4:	6823      	ldr	r3, [r4, #0]
    5aa6:	051a      	lsls	r2, r3, #20
    5aa8:	d40f      	bmi.n	5aca <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    5aaa:	6823      	ldr	r3, [r4, #0]
    5aac:	04db      	lsls	r3, r3, #19
    5aae:	d411      	bmi.n	5ad4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    5ab0:	6823      	ldr	r3, [r4, #0]
    5ab2:	0358      	lsls	r0, r3, #13
    5ab4:	d5f3      	bpl.n	5a9e <fault_isr+0x6>
    5ab6:	f000 fa37 	bl	5f28 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    5aba:	6823      	ldr	r3, [r4, #0]
    5abc:	0559      	lsls	r1, r3, #21
    5abe:	d5f1      	bpl.n	5aa4 <fault_isr+0xc>
    5ac0:	f001 fbaa 	bl	7218 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    5ac4:	6823      	ldr	r3, [r4, #0]
    5ac6:	051a      	lsls	r2, r3, #20
    5ac8:	d5ef      	bpl.n	5aaa <fault_isr+0x12>
    5aca:	f001 fc3b 	bl	7344 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    5ace:	6823      	ldr	r3, [r4, #0]
    5ad0:	04db      	lsls	r3, r3, #19
    5ad2:	d5ed      	bpl.n	5ab0 <fault_isr+0x18>
    5ad4:	f001 fccc 	bl	7470 <uart2_status_isr>
    5ad8:	e7ea      	b.n	5ab0 <fault_isr+0x18>
    5ada:	bf00      	nop
    5adc:	40048034 	.word	0x40048034

00005ae0 <unused_isr>:
	}
}

void unused_isr(void)
{
    5ae0:	b508      	push	{r3, lr}
	fault_isr();
    5ae2:	f7ff ffd9 	bl	5a98 <fault_isr>
    5ae6:	bf00      	nop

00005ae8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    5ae8:	4b01      	ldr	r3, [pc, #4]	; (5af0 <startup_early_hook+0x8>)
    5aea:	2210      	movs	r2, #16
    5aec:	801a      	strh	r2, [r3, #0]
    5aee:	4770      	bx	lr
    5af0:	40052000 	.word	0x40052000

00005af4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    5af4:	4770      	bx	lr
    5af6:	bf00      	nop

00005af8 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    5af8:	7800      	ldrb	r0, [r0, #0]
}
    5afa:	fab0 f080 	clz	r0, r0
    5afe:	0940      	lsrs	r0, r0, #5
    5b00:	4770      	bx	lr
    5b02:	bf00      	nop

00005b04 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    5b04:	2301      	movs	r3, #1
    5b06:	7003      	strb	r3, [r0, #0]
    5b08:	4770      	bx	lr
    5b0a:	bf00      	nop

00005b0c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    5b0c:	4a1c      	ldr	r2, [pc, #112]	; (5b80 <pinMode.part.2+0x74>)
    5b0e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5b12:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    5b14:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5b16:	d011      	beq.n	5b3c <pinMode.part.2+0x30>
    5b18:	2904      	cmp	r1, #4
    5b1a:	d01b      	beq.n	5b54 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    5b1c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    5b20:	2200      	movs	r2, #0
    5b22:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    5b26:	b129      	cbz	r1, 5b34 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    5b28:	2902      	cmp	r1, #2
    5b2a:	d020      	beq.n	5b6e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    5b2c:	2903      	cmp	r1, #3
    5b2e:	d022      	beq.n	5b76 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    5b30:	601a      	str	r2, [r3, #0]
    5b32:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    5b34:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b38:	601a      	str	r2, [r3, #0]
    5b3a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5b3c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5b40:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5b44:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5b48:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    5b4a:	681a      	ldr	r2, [r3, #0]
    5b4c:	f022 0220 	bic.w	r2, r2, #32
    5b50:	601a      	str	r2, [r3, #0]
    5b52:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5b54:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5b58:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    5b5c:	2001      	movs	r0, #1
    5b5e:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    5b62:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    5b64:	681a      	ldr	r2, [r3, #0]
    5b66:	f042 0220 	orr.w	r2, r2, #32
    5b6a:	601a      	str	r2, [r3, #0]
    5b6c:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    5b6e:	f240 1203 	movw	r2, #259	; 0x103
    5b72:	601a      	str	r2, [r3, #0]
    5b74:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    5b76:	f44f 7281 	mov.w	r2, #258	; 0x102
    5b7a:	601a      	str	r2, [r3, #0]
    5b7c:	4770      	bx	lr
    5b7e:	bf00      	nop
    5b80:	00009d1c 	.word	0x00009d1c

00005b84 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    5b84:	b430      	push	{r4, r5}
	RTC_SR = 0;
    5b86:	4b05      	ldr	r3, [pc, #20]	; (5b9c <rtc_set+0x18>)
	RTC_TPR = 0;
    5b88:	4d05      	ldr	r5, [pc, #20]	; (5ba0 <rtc_set+0x1c>)
	RTC_TSR = t;
    5b8a:	4c06      	ldr	r4, [pc, #24]	; (5ba4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    5b8c:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    5b8e:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    5b90:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    5b92:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    5b94:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    5b96:	6019      	str	r1, [r3, #0]
}
    5b98:	bc30      	pop	{r4, r5}
    5b9a:	4770      	bx	lr
    5b9c:	4003d014 	.word	0x4003d014
    5ba0:	4003d004 	.word	0x4003d004
    5ba4:	4003d000 	.word	0x4003d000

00005ba8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    5ba8:	2821      	cmp	r0, #33	; 0x21
    5baa:	d801      	bhi.n	5bb0 <pinMode+0x8>
    5bac:	f7ff bfae 	b.w	5b0c <pinMode.part.2>
    5bb0:	4770      	bx	lr
    5bb2:	bf00      	nop

00005bb4 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    5bb4:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    5bb6:	490c      	ldr	r1, [pc, #48]	; (5be8 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5bb8:	4b0c      	ldr	r3, [pc, #48]	; (5bec <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5bba:	4a0d      	ldr	r2, [pc, #52]	; (5bf0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5bbc:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    5bbe:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5bc0:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    5bc2:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5bc4:	0152      	lsls	r2, r2, #5
    5bc6:	d502      	bpl.n	5bce <micros+0x1a>
    5bc8:	2b32      	cmp	r3, #50	; 0x32
    5bca:	bf88      	it	hi
    5bcc:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5bce:	4909      	ldr	r1, [pc, #36]	; (5bf4 <micros+0x40>)
    5bd0:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    5bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5bd8:	33ff      	adds	r3, #255	; 0xff
    5bda:	fba1 1303 	umull	r1, r3, r1, r3
    5bde:	fb02 f000 	mul.w	r0, r2, r0
}
    5be2:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    5be6:	4770      	bx	lr
    5be8:	1fff94e8 	.word	0x1fff94e8
    5bec:	e000e018 	.word	0xe000e018
    5bf0:	e000ed04 	.word	0xe000ed04
    5bf4:	aaaaaaab 	.word	0xaaaaaaab

00005bf8 <delay>:

void delay(uint32_t ms)
{
    5bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bfc:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    5bfe:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    5c00:	4f20      	ldr	r7, [pc, #128]	; (5c84 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5c02:	4b21      	ldr	r3, [pc, #132]	; (5c88 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5c04:	4a21      	ldr	r2, [pc, #132]	; (5c8c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5c06:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    5c08:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5c0a:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    5c0c:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5c0e:	0152      	lsls	r2, r2, #5
    5c10:	d502      	bpl.n	5c18 <delay+0x20>
    5c12:	2b32      	cmp	r3, #50	; 0x32
    5c14:	bf88      	it	hi
    5c16:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    5c18:	b395      	cbz	r5, 5c80 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5c1a:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    5c1e:	4e1c      	ldr	r6, [pc, #112]	; (5c90 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    5c20:	f8df 9064 	ldr.w	r9, [pc, #100]	; 5c88 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5c24:	f8df 8064 	ldr.w	r8, [pc, #100]	; 5c8c <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    5c28:	33ff      	adds	r3, #255	; 0xff
    5c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c2e:	fba6 1303 	umull	r1, r3, r6, r3
    5c32:	fb02 f404 	mul.w	r4, r2, r4
    5c36:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    5c3a:	b672      	cpsid	i
	current = SYST_CVR;
    5c3c:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    5c40:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    5c42:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    5c46:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    5c48:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    5c4c:	33ff      	adds	r3, #255	; 0xff
    5c4e:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5c52:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    5c56:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    5c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    5c5e:	d002      	beq.n	5c66 <delay+0x6e>
    5c60:	2932      	cmp	r1, #50	; 0x32
    5c62:	bf88      	it	hi
    5c64:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    5c66:	fb00 3302 	mla	r3, r0, r2, r3
    5c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    5c6e:	d304      	bcc.n	5c7a <delay+0x82>
				ms--;
				if (ms == 0) return;
    5c70:	3d01      	subs	r5, #1
    5c72:	d005      	beq.n	5c80 <delay+0x88>
				start += 1000;
    5c74:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    5c78:	e7df      	b.n	5c3a <delay+0x42>
			}
			yield();
    5c7a:	f001 fa49 	bl	7110 <yield>
		}
    5c7e:	e7dc      	b.n	5c3a <delay+0x42>
    5c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c84:	1fff94e8 	.word	0x1fff94e8
    5c88:	e000e018 	.word	0xe000e018
    5c8c:	e000ed04 	.word	0xe000ed04
    5c90:	aaaaaaab 	.word	0xaaaaaaab

00005c94 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    5c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    5c96:	4b2d      	ldr	r3, [pc, #180]	; (5d4c <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    5c98:	492d      	ldr	r1, [pc, #180]	; (5d50 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5c9a:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 5d6c <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    5c9e:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 5d70 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    5ca2:	4e2c      	ldr	r6, [pc, #176]	; (5d54 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    5ca4:	4d2c      	ldr	r5, [pc, #176]	; (5d58 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    5ca6:	4c2d      	ldr	r4, [pc, #180]	; (5d5c <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    5ca8:	4a2d      	ldr	r2, [pc, #180]	; (5d60 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    5caa:	4f2e      	ldr	r7, [pc, #184]	; (5d64 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    5cac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    5cb0:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    5cb2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    5cb6:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    5cb8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    5cbc:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    5cbe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    5cc2:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    5cc4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    5cc8:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    5cca:	2000      	movs	r0, #0
    5ccc:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5cce:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    5cd0:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    5cd4:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    5cd8:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    5cdc:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    5cde:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    5ce0:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    5ce2:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    5ce4:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    5ce6:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    5ce8:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5cea:	2209      	movs	r2, #9
    5cec:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    5cf0:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    5cf4:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    5cf8:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    5cfc:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    5d00:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    5d04:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    5d08:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    5d0a:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5d0e:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    5d12:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    5d16:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    5d1a:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    5d1c:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5d20:	4811      	ldr	r0, [pc, #68]	; (5d68 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    5d22:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    5d24:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    5d28:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    5d2c:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    5d2e:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    5d30:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    5d32:	f7ff fdc3 	bl	58bc <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    5d36:	2019      	movs	r0, #25
    5d38:	f7ff ff5e 	bl	5bf8 <delay>
	usb_init();
    5d3c:	f000 fe5c 	bl	69f8 <usb_init>
	delay(275);
    5d40:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    5d44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    5d48:	f7ff bf56 	b.w	5bf8 <delay>
    5d4c:	e000e108 	.word	0xe000e108
    5d50:	40038004 	.word	0x40038004
    5d54:	40038014 	.word	0x40038014
    5d58:	40038024 	.word	0x40038024
    5d5c:	4003802c 	.word	0x4003802c
    5d60:	4003801c 	.word	0x4003801c
    5d64:	40038034 	.word	0x40038034
    5d68:	400b8000 	.word	0x400b8000
    5d6c:	4003800c 	.word	0x4003800c
    5d70:	40038008 	.word	0x40038008

00005d74 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    5d74:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    5d76:	2b03      	cmp	r3, #3
    5d78:	d814      	bhi.n	5da4 <usb_rx+0x30>
	__disable_irq();
    5d7a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    5d7c:	490a      	ldr	r1, [pc, #40]	; (5da8 <usb_rx+0x34>)
    5d7e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    5d82:	b168      	cbz	r0, 5da0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    5d84:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    5d86:	4c09      	ldr	r4, [pc, #36]	; (5dac <usb_rx+0x38>)
    5d88:	8805      	ldrh	r5, [r0, #0]
    5d8a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    5d8e:	6846      	ldr	r6, [r0, #4]
    5d90:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    5d94:	1b52      	subs	r2, r2, r5
    5d96:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    5d9a:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    5d9c:	bc70      	pop	{r4, r5, r6}
    5d9e:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    5da0:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    5da2:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    5da4:	2000      	movs	r0, #0
    5da6:	4770      	bx	lr
    5da8:	1fff9544 	.word	0x1fff9544
    5dac:	1fff9794 	.word	0x1fff9794

00005db0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    5db0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5db2:	2803      	cmp	r0, #3
    5db4:	d80b      	bhi.n	5dce <usb_tx_packet_count+0x1e>
	__disable_irq();
    5db6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    5db8:	4b07      	ldr	r3, [pc, #28]	; (5dd8 <usb_tx_packet_count+0x28>)
    5dba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5dbe:	b143      	cbz	r3, 5dd2 <usb_tx_packet_count+0x22>
    5dc0:	2000      	movs	r0, #0
    5dc2:	685b      	ldr	r3, [r3, #4]
    5dc4:	3001      	adds	r0, #1
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d1fb      	bne.n	5dc2 <usb_tx_packet_count+0x12>
	__enable_irq();
    5dca:	b662      	cpsie	i
	return count;
    5dcc:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    5dce:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    5dd0:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    5dd2:	4618      	mov	r0, r3
    5dd4:	e7f9      	b.n	5dca <usb_tx_packet_count+0x1a>
    5dd6:	bf00      	nop
    5dd8:	1fff9598 	.word	0x1fff9598

00005ddc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    5ddc:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    5dde:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5de0:	4a2b      	ldr	r2, [pc, #172]	; (5e90 <usb_rx_memory+0xb4>)
    5de2:	7813      	ldrb	r3, [r2, #0]
    5de4:	071d      	lsls	r5, r3, #28
    5de6:	d506      	bpl.n	5df6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5de8:	4b2a      	ldr	r3, [pc, #168]	; (5e94 <usb_rx_memory+0xb8>)
    5dea:	6a19      	ldr	r1, [r3, #32]
    5dec:	2900      	cmp	r1, #0
    5dee:	d036      	beq.n	5e5e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5df0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5df2:	2900      	cmp	r1, #0
    5df4:	d041      	beq.n	5e7a <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5df6:	7853      	ldrb	r3, [r2, #1]
    5df8:	071c      	lsls	r4, r3, #28
    5dfa:	d506      	bpl.n	5e0a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5dfc:	4b25      	ldr	r3, [pc, #148]	; (5e94 <usb_rx_memory+0xb8>)
    5dfe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    5e00:	2900      	cmp	r1, #0
    5e02:	d03e      	beq.n	5e82 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5e04:	6c99      	ldr	r1, [r3, #72]	; 0x48
    5e06:	2900      	cmp	r1, #0
    5e08:	d039      	beq.n	5e7e <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5e0a:	7893      	ldrb	r3, [r2, #2]
    5e0c:	0719      	lsls	r1, r3, #28
    5e0e:	d505      	bpl.n	5e1c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5e10:	4b20      	ldr	r3, [pc, #128]	; (5e94 <usb_rx_memory+0xb8>)
    5e12:	6e19      	ldr	r1, [r3, #96]	; 0x60
    5e14:	2900      	cmp	r1, #0
    5e16:	d036      	beq.n	5e86 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5e18:	6e99      	ldr	r1, [r3, #104]	; 0x68
    5e1a:	b189      	cbz	r1, 5e40 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    5e1c:	78d3      	ldrb	r3, [r2, #3]
    5e1e:	071b      	lsls	r3, r3, #28
    5e20:	d507      	bpl.n	5e32 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    5e22:	4b1c      	ldr	r3, [pc, #112]	; (5e94 <usb_rx_memory+0xb8>)
    5e24:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5e28:	b37a      	cbz	r2, 5e8a <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5e2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5e2e:	2111      	movs	r1, #17
    5e30:	b13a      	cbz	r2, 5e42 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    5e32:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    5e34:	4b18      	ldr	r3, [pc, #96]	; (5e98 <usb_rx_memory+0xbc>)
    5e36:	2200      	movs	r2, #0
    5e38:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    5e3a:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    5e3c:	f000 be68 	b.w	6b10 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5e40:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    5e42:	4c15      	ldr	r4, [pc, #84]	; (5e98 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5e44:	4d15      	ldr	r5, [pc, #84]	; (5e9c <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    5e46:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5e48:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    5e4c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5e50:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    5e52:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    5e54:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    5e56:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    5e58:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    5e5a:	bc30      	pop	{r4, r5}
    5e5c:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    5e5e:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5e60:	4c0d      	ldr	r4, [pc, #52]	; (5e98 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5e62:	4d0f      	ldr	r5, [pc, #60]	; (5ea0 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    5e64:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5e66:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    5e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5e6e:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5e70:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    5e72:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5e74:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    5e76:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    5e78:	e7ef      	b.n	5e5a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    5e7a:	2105      	movs	r1, #5
    5e7c:	e7e1      	b.n	5e42 <usb_rx_memory+0x66>
    5e7e:	2109      	movs	r1, #9
    5e80:	e7df      	b.n	5e42 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    5e82:	2208      	movs	r2, #8
    5e84:	e7ec      	b.n	5e60 <usb_rx_memory+0x84>
    5e86:	220c      	movs	r2, #12
    5e88:	e7ea      	b.n	5e60 <usb_rx_memory+0x84>
    5e8a:	2210      	movs	r2, #16
    5e8c:	e7e8      	b.n	5e60 <usb_rx_memory+0x84>
    5e8e:	bf00      	nop
    5e90:	00009e58 	.word	0x00009e58
    5e94:	1fff8000 	.word	0x1fff8000
    5e98:	1fff95c1 	.word	0x1fff95c1
    5e9c:	004000c8 	.word	0x004000c8
    5ea0:	00400088 	.word	0x00400088

00005ea4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    5ea4:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    5ea6:	2b03      	cmp	r3, #3
    5ea8:	d81d      	bhi.n	5ee6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5eaa:	4a1b      	ldr	r2, [pc, #108]	; (5f18 <usb_tx+0x74>)
    5eac:	0140      	lsls	r0, r0, #5
    5eae:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    5eb2:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5eb4:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    5eb6:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    5eb8:	4c18      	ldr	r4, [pc, #96]	; (5f1c <usb_tx+0x78>)
    5eba:	5ce2      	ldrb	r2, [r4, r3]
    5ebc:	2a03      	cmp	r2, #3
    5ebe:	d81b      	bhi.n	5ef8 <usb_tx+0x54>
    5ec0:	e8df f002 	tbb	[pc, r2]
    5ec4:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    5ec8:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5eca:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    5ecc:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5ece:	f010 0f08 	tst.w	r0, #8
    5ed2:	bf14      	ite	ne
    5ed4:	23c8      	movne	r3, #200	; 0xc8
    5ed6:	2388      	moveq	r3, #136	; 0x88
    5ed8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5edc:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5ede:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5ee0:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    5ee2:	b662      	cpsie	i
}
    5ee4:	bc30      	pop	{r4, r5}
    5ee6:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    5ee8:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    5eea:	2202      	movs	r2, #2
		break;
    5eec:	e7ed      	b.n	5eca <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    5eee:	2205      	movs	r2, #5
    5ef0:	e7eb      	b.n	5eca <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    5ef2:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    5ef4:	2204      	movs	r2, #4
		break;
    5ef6:	e7e8      	b.n	5eca <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    5ef8:	4a09      	ldr	r2, [pc, #36]	; (5f20 <usb_tx+0x7c>)
    5efa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5efe:	b138      	cbz	r0, 5f10 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    5f00:	4a08      	ldr	r2, [pc, #32]	; (5f24 <usb_tx+0x80>)
    5f02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5f06:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    5f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    5f0c:	b662      	cpsie	i
		return;
    5f0e:	e7e9      	b.n	5ee4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    5f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    5f14:	4a03      	ldr	r2, [pc, #12]	; (5f24 <usb_tx+0x80>)
    5f16:	e7f7      	b.n	5f08 <usb_tx+0x64>
    5f18:	1fff8000 	.word	0x1fff8000
    5f1c:	1fff95d0 	.word	0x1fff95d0
    5f20:	1fff9598 	.word	0x1fff9598
    5f24:	1fff95a8 	.word	0x1fff95a8

00005f28 <usb_isr>:
}



void usb_isr(void)
{
    5f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    5f2c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 623c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    5f30:	f8df a30c 	ldr.w	sl, [pc, #780]	; 6240 <usb_isr+0x318>
}



void usb_isr(void)
{
    5f34:	b087      	sub	sp, #28
    5f36:	e044      	b.n	5fc2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    5f38:	4fab      	ldr	r7, [pc, #684]	; (61e8 <usb_isr+0x2c0>)
    5f3a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    5f3e:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    5f42:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    5f44:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    5f48:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    5f4c:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    5f4e:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    5f52:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    5f56:	2b00      	cmp	r3, #0
    5f58:	f040 8102 	bne.w	6160 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    5f5c:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    5f60:	0c1b      	lsrs	r3, r3, #16
    5f62:	b299      	uxth	r1, r3
    5f64:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    5f68:	2b00      	cmp	r3, #0
    5f6a:	f000 80f0 	beq.w	614e <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    5f6e:	4b9f      	ldr	r3, [pc, #636]	; (61ec <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    5f70:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    5f74:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    5f78:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    5f7c:	2a00      	cmp	r2, #0
    5f7e:	f000 82c5 	beq.w	650c <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    5f82:	4d9b      	ldr	r5, [pc, #620]	; (61f0 <usb_isr+0x2c8>)
    5f84:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    5f88:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    5f8a:	4c9a      	ldr	r4, [pc, #616]	; (61f4 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    5f8c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    5f90:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    5f94:	4419      	add	r1, r3
    5f96:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    5f9a:	f000 fd99 	bl	6ad0 <usb_malloc>
					if (packet) {
    5f9e:	2800      	cmp	r0, #0
    5fa0:	f000 82ad 	beq.w	64fe <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    5fa4:	4a94      	ldr	r2, [pc, #592]	; (61f8 <usb_isr+0x2d0>)
    5fa6:	4b95      	ldr	r3, [pc, #596]	; (61fc <usb_isr+0x2d4>)
    5fa8:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5fac:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    5fb0:	bf18      	it	ne
    5fb2:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5fb4:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    5fb8:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    5fbc:	2308      	movs	r3, #8
    5fbe:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    5fc2:	f89b 4000 	ldrb.w	r4, [fp]
    5fc6:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    5fc8:	0761      	lsls	r1, r4, #29
    5fca:	d51a      	bpl.n	6002 <usb_isr+0xda>
		if (usb_configuration) {
    5fcc:	4b8c      	ldr	r3, [pc, #560]	; (6200 <usb_isr+0x2d8>)
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	b1a3      	cbz	r3, 5ffc <usb_isr+0xd4>
			t = usb_reboot_timer;
    5fd2:	498c      	ldr	r1, [pc, #560]	; (6204 <usb_isr+0x2dc>)
    5fd4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    5fd6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5fda:	b122      	cbz	r2, 5fe6 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    5fdc:	3b01      	subs	r3, #1
    5fde:	b2db      	uxtb	r3, r3
    5fe0:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    5fe2:	b903      	cbnz	r3, 5fe6 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    5fe4:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    5fe6:	4988      	ldr	r1, [pc, #544]	; (6208 <usb_isr+0x2e0>)
    5fe8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    5fea:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5fee:	b12a      	cbz	r2, 5ffc <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    5ff0:	3b01      	subs	r3, #1
    5ff2:	b2db      	uxtb	r3, r3
    5ff4:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	f000 8257 	beq.w	64aa <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    5ffc:	2304      	movs	r3, #4
    5ffe:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    6002:	f004 0308 	and.w	r3, r4, #8
    6006:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    600a:	2b00      	cmp	r3, #0
    600c:	f000 80cc 	beq.w	61a8 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    6010:	f89a 3000 	ldrb.w	r3, [sl]
    6014:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    6016:	091e      	lsrs	r6, r3, #4
    6018:	d18e      	bne.n	5f38 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    601a:	089c      	lsrs	r4, r3, #2
    601c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 61e8 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    6020:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    6024:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    6028:	f3c2 0283 	ubfx	r2, r2, #2, #4
    602c:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    602e:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    6030:	2a0c      	cmp	r2, #12
    6032:	f200 8088 	bhi.w	6146 <usb_isr+0x21e>
    6036:	e8df f002 	tbb	[pc, r2]
    603a:	7c7c      	.short	0x7c7c
    603c:	86868686 	.word	0x86868686
    6040:	86478686 	.word	0x86478686
    6044:	8686      	.short	0x8686
    6046:	07          	.byte	0x07
    6047:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    6048:	6808      	ldr	r0, [r1, #0]
    604a:	4d70      	ldr	r5, [pc, #448]	; (620c <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    604c:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    604e:	4f70      	ldr	r7, [pc, #448]	; (6210 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6050:	4e70      	ldr	r6, [pc, #448]	; (6214 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    6052:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6054:	b281      	uxth	r1, r0
    6056:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    605a:	4b67      	ldr	r3, [pc, #412]	; (61f8 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    605c:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    605e:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6062:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6064:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    6066:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    606a:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    606c:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    6070:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6074:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    6078:	4c5b      	ldr	r4, [pc, #364]	; (61e8 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    607a:	f200 80e3 	bhi.w	6244 <usb_isr+0x31c>
    607e:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    6082:	f080 8346 	bcs.w	6712 <usb_isr+0x7ea>
    6086:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    608a:	f000 82fc 	beq.w	6686 <usb_isr+0x75e>
    608e:	f200 828d 	bhi.w	65ac <usb_isr+0x684>
    6092:	2980      	cmp	r1, #128	; 0x80
    6094:	f000 8377 	beq.w	6786 <usb_isr+0x85e>
    6098:	2982      	cmp	r1, #130	; 0x82
    609a:	f040 82fa 	bne.w	6692 <usb_isr+0x76a>
    609e:	88a9      	ldrh	r1, [r5, #4]
    60a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    60a4:	2904      	cmp	r1, #4
    60a6:	f200 82f4 	bhi.w	6692 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    60aa:	485b      	ldr	r0, [pc, #364]	; (6218 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    60ac:	4c5b      	ldr	r4, [pc, #364]	; (621c <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    60ae:	0089      	lsls	r1, r1, #2
    60b0:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    60b2:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    60b4:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    60b6:	7802      	ldrb	r2, [r0, #0]
    60b8:	0793      	lsls	r3, r2, #30
    60ba:	f140 8458 	bpl.w	696e <usb_isr+0xa46>
    60be:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    60c2:	f04f 0e02 	mov.w	lr, #2
    60c6:	e342      	b.n	674e <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    60c8:	4f51      	ldr	r7, [pc, #324]	; (6210 <usb_isr+0x2e8>)
    60ca:	683a      	ldr	r2, [r7, #0]
		if (data) {
    60cc:	b332      	cbz	r2, 611c <usb_isr+0x1f4>
			size = ep0_tx_len;
    60ce:	4b54      	ldr	r3, [pc, #336]	; (6220 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    60d0:	4e50      	ldr	r6, [pc, #320]	; (6214 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    60d2:	4954      	ldr	r1, [pc, #336]	; (6224 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    60d4:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    60d6:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    60d8:	780d      	ldrb	r5, [r1, #0]
    60da:	2840      	cmp	r0, #64	; 0x40
    60dc:	4686      	mov	lr, r0
    60de:	f045 0802 	orr.w	r8, r5, #2
    60e2:	bf28      	it	cs
    60e4:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    60e8:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    60ea:	f084 0401 	eor.w	r4, r4, #1
    60ee:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    60f0:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    60f4:	bf0c      	ite	eq
    60f6:	2488      	moveq	r4, #136	; 0x88
    60f8:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    60fa:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    60fe:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6100:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6104:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6108:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    610a:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    610c:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    6110:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6112:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6114:	2800      	cmp	r0, #0
    6116:	f000 8145 	beq.w	63a4 <usb_isr+0x47c>
    611a:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    611c:	4b3b      	ldr	r3, [pc, #236]	; (620c <usb_isr+0x2e4>)
    611e:	881a      	ldrh	r2, [r3, #0]
    6120:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    6124:	d10f      	bne.n	6146 <usb_isr+0x21e>
			setup.bRequest = 0;
    6126:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    6128:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    612a:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    612c:	4b3e      	ldr	r3, [pc, #248]	; (6228 <usb_isr+0x300>)
    612e:	701a      	strb	r2, [r3, #0]
    6130:	e009      	b.n	6146 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    6132:	4a36      	ldr	r2, [pc, #216]	; (620c <usb_isr+0x2e4>)
    6134:	8810      	ldrh	r0, [r2, #0]
    6136:	f242 0221 	movw	r2, #8225	; 0x2021
    613a:	4290      	cmp	r0, r2
    613c:	f000 8137 	beq.w	63ae <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    6140:	4a2d      	ldr	r2, [pc, #180]	; (61f8 <usb_isr+0x2d0>)
    6142:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6146:	4a39      	ldr	r2, [pc, #228]	; (622c <usb_isr+0x304>)
    6148:	2301      	movs	r3, #1
    614a:	7013      	strb	r3, [r2, #0]
    614c:	e736      	b.n	5fbc <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    614e:	4a2a      	ldr	r2, [pc, #168]	; (61f8 <usb_isr+0x2d0>)
    6150:	4b2a      	ldr	r3, [pc, #168]	; (61fc <usb_isr+0x2d4>)
    6152:	f019 0f08 	tst.w	r9, #8
    6156:	bf18      	it	ne
    6158:	4613      	movne	r3, r2
    615a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    615e:	e72d      	b.n	5fbc <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    6160:	f000 fcd6 	bl	6b10 <usb_free>
				packet = tx_first[endpoint];
    6164:	4a32      	ldr	r2, [pc, #200]	; (6230 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    6166:	4933      	ldr	r1, [pc, #204]	; (6234 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    6168:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    616c:	2b00      	cmp	r3, #0
    616e:	f000 81d1 	beq.w	6514 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6172:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    6174:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6176:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    617a:	f103 0208 	add.w	r2, r3, #8
    617e:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    6182:	2c03      	cmp	r4, #3
    6184:	d805      	bhi.n	6192 <usb_isr+0x26a>
    6186:	e8df f004 	tbb	[pc, r4]
    618a:	022c      	.short	0x022c
    618c:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    618e:	2202      	movs	r2, #2
    6190:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    6192:	881a      	ldrh	r2, [r3, #0]
    6194:	f019 0f08 	tst.w	r9, #8
    6198:	bf0c      	ite	eq
    619a:	2388      	moveq	r3, #136	; 0x88
    619c:	23c8      	movne	r3, #200	; 0xc8
    619e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    61a2:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    61a6:	e709      	b.n	5fbc <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    61a8:	07e0      	lsls	r0, r4, #31
    61aa:	f100 8181 	bmi.w	64b0 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    61ae:	0621      	lsls	r1, r4, #24
    61b0:	f100 81f2 	bmi.w	6598 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    61b4:	07a2      	lsls	r2, r4, #30
    61b6:	d506      	bpl.n	61c6 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    61b8:	4a1f      	ldr	r2, [pc, #124]	; (6238 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    61ba:	4920      	ldr	r1, [pc, #128]	; (623c <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    61bc:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    61be:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    61c0:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    61c2:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    61c4:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    61c6:	06e3      	lsls	r3, r4, #27
    61c8:	d502      	bpl.n	61d0 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    61ca:	4b1c      	ldr	r3, [pc, #112]	; (623c <usb_isr+0x314>)
    61cc:	2210      	movs	r2, #16
    61ce:	701a      	strb	r2, [r3, #0]
	}

}
    61d0:	b007      	add	sp, #28
    61d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    61d6:	2204      	movs	r2, #4
    61d8:	558a      	strb	r2, [r1, r6]
						break;
    61da:	e7da      	b.n	6192 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    61dc:	2205      	movs	r2, #5
    61de:	558a      	strb	r2, [r1, r6]
						break;
    61e0:	e7d7      	b.n	6192 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    61e2:	2203      	movs	r2, #3
    61e4:	558a      	strb	r2, [r1, r6]
						break;
    61e6:	e7d4      	b.n	6192 <usb_isr+0x26a>
    61e8:	1fff8000 	.word	0x1fff8000
    61ec:	1fff9544 	.word	0x1fff9544
    61f0:	1fff94f0 	.word	0x1fff94f0
    61f4:	1fff9794 	.word	0x1fff9794
    61f8:	004000c8 	.word	0x004000c8
    61fc:	00400088 	.word	0x00400088
    6200:	1fff95cc 	.word	0x1fff95cc
    6204:	1fff9555 	.word	0x1fff9555
    6208:	1fff95d4 	.word	0x1fff95d4
    620c:	1fff95b8 	.word	0x1fff95b8
    6210:	1fff94ec 	.word	0x1fff94ec
    6214:	1fff9554 	.word	0x1fff9554
    6218:	400720c0 	.word	0x400720c0
    621c:	1fff95c4 	.word	0x1fff95c4
    6220:	1fff9500 	.word	0x1fff9500
    6224:	1fff95c0 	.word	0x1fff95c0
    6228:	40072098 	.word	0x40072098
    622c:	40072094 	.word	0x40072094
    6230:	1fff9598 	.word	0x1fff9598
    6234:	1fff95d0 	.word	0x1fff95d0
    6238:	40072088 	.word	0x40072088
    623c:	40072080 	.word	0x40072080
    6240:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6244:	f242 0021 	movw	r0, #8225	; 0x2021
    6248:	4281      	cmp	r1, r0
    624a:	f000 812a 	beq.w	64a2 <usb_isr+0x57a>
    624e:	f200 80d8 	bhi.w	6402 <usb_isr+0x4da>
    6252:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    6256:	f000 8276 	beq.w	6746 <usb_isr+0x81e>
    625a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    625e:	f040 8218 	bne.w	6692 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    6262:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    6264:	49b3      	ldr	r1, [pc, #716]	; (6534 <usb_isr+0x60c>)
    6266:	78a8      	ldrb	r0, [r5, #2]
    6268:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    626a:	0612      	lsls	r2, r2, #24
    626c:	f100 833a 	bmi.w	68e4 <usb_isr+0x9bc>
    6270:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    6274:	49b0      	ldr	r1, [pc, #704]	; (6538 <usb_isr+0x610>)
    6276:	0613      	lsls	r3, r2, #24
    6278:	f100 830c 	bmi.w	6894 <usb_isr+0x96c>
    627c:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    6280:	49ad      	ldr	r1, [pc, #692]	; (6538 <usb_isr+0x610>)
    6282:	0615      	lsls	r5, r2, #24
    6284:	f100 8301 	bmi.w	688a <usb_isr+0x962>
    6288:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    628c:	49aa      	ldr	r1, [pc, #680]	; (6538 <usb_isr+0x610>)
    628e:	0614      	lsls	r4, r2, #24
    6290:	f100 82f6 	bmi.w	6880 <usb_isr+0x958>
    6294:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    6298:	49a7      	ldr	r1, [pc, #668]	; (6538 <usb_isr+0x610>)
    629a:	0610      	lsls	r0, r2, #24
    629c:	f100 834a 	bmi.w	6934 <usb_isr+0xa0c>
    62a0:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    62a4:	49a4      	ldr	r1, [pc, #656]	; (6538 <usb_isr+0x610>)
    62a6:	0612      	lsls	r2, r2, #24
    62a8:	f100 833f 	bmi.w	692a <usb_isr+0xa02>
    62ac:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    62b0:	49a1      	ldr	r1, [pc, #644]	; (6538 <usb_isr+0x610>)
    62b2:	0613      	lsls	r3, r2, #24
    62b4:	f100 8334 	bmi.w	6920 <usb_isr+0x9f8>
    62b8:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    62bc:	499e      	ldr	r1, [pc, #632]	; (6538 <usb_isr+0x610>)
    62be:	0615      	lsls	r5, r2, #24
    62c0:	f100 8329 	bmi.w	6916 <usb_isr+0x9ee>
    62c4:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    62c8:	499b      	ldr	r1, [pc, #620]	; (6538 <usb_isr+0x610>)
    62ca:	0614      	lsls	r4, r2, #24
    62cc:	f100 831e 	bmi.w	690c <usb_isr+0x9e4>
    62d0:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    62d4:	4998      	ldr	r1, [pc, #608]	; (6538 <usb_isr+0x610>)
    62d6:	0610      	lsls	r0, r2, #24
    62d8:	f100 8313 	bmi.w	6902 <usb_isr+0x9da>
    62dc:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    62e0:	4995      	ldr	r1, [pc, #596]	; (6538 <usb_isr+0x610>)
    62e2:	0612      	lsls	r2, r2, #24
    62e4:	f100 8308 	bmi.w	68f8 <usb_isr+0x9d0>
    62e8:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    62ec:	4992      	ldr	r1, [pc, #584]	; (6538 <usb_isr+0x610>)
    62ee:	0613      	lsls	r3, r2, #24
    62f0:	f100 82fd 	bmi.w	68ee <usb_isr+0x9c6>
    62f4:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    62f8:	498f      	ldr	r1, [pc, #572]	; (6538 <usb_isr+0x610>)
    62fa:	0615      	lsls	r5, r2, #24
    62fc:	f100 8331 	bmi.w	6962 <usb_isr+0xa3a>
    6300:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    6304:	498c      	ldr	r1, [pc, #560]	; (6538 <usb_isr+0x610>)
    6306:	0614      	lsls	r4, r2, #24
    6308:	f100 8325 	bmi.w	6956 <usb_isr+0xa2e>
    630c:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    6310:	4989      	ldr	r1, [pc, #548]	; (6538 <usb_isr+0x610>)
    6312:	0610      	lsls	r0, r2, #24
    6314:	f100 8319 	bmi.w	694a <usb_isr+0xa22>
    6318:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    631c:	4986      	ldr	r1, [pc, #536]	; (6538 <usb_isr+0x610>)
    631e:	0612      	lsls	r2, r2, #24
    6320:	f100 830d 	bmi.w	693e <usb_isr+0xa16>
    6324:	4885      	ldr	r0, [pc, #532]	; (653c <usb_isr+0x614>)
    6326:	4a86      	ldr	r2, [pc, #536]	; (6540 <usb_isr+0x618>)
    6328:	4986      	ldr	r1, [pc, #536]	; (6544 <usb_isr+0x61c>)
    632a:	9001      	str	r0, [sp, #4]
    632c:	4886      	ldr	r0, [pc, #536]	; (6548 <usb_isr+0x620>)
    632e:	4d87      	ldr	r5, [pc, #540]	; (654c <usb_isr+0x624>)
    6330:	4c87      	ldr	r4, [pc, #540]	; (6550 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6332:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    6334:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6336:	9605      	str	r6, [sp, #20]
    6338:	9502      	str	r5, [sp, #8]
    633a:	4680      	mov	r8, r0
    633c:	460f      	mov	r7, r1
    633e:	4616      	mov	r6, r2
    6340:	461d      	mov	r5, r3
    6342:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    6344:	6830      	ldr	r0, [r6, #0]
			while (p) {
    6346:	b128      	cbz	r0, 6354 <usb_isr+0x42c>
				n = p->next;
    6348:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    634a:	f000 fbe1 	bl	6b10 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    634e:	4620      	mov	r0, r4
    6350:	2c00      	cmp	r4, #0
    6352:	d1f9      	bne.n	6348 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    6354:	2300      	movs	r3, #0
    6356:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    6358:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    635a:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    635c:	461a      	mov	r2, r3
    635e:	2300      	movs	r3, #0
    6360:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    6364:	b128      	cbz	r0, 6372 <usb_isr+0x44a>
				n = p->next;
    6366:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    6368:	f000 fbd2 	bl	6b10 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    636c:	4620      	mov	r0, r4
    636e:	2c00      	cmp	r4, #0
    6370:	d1f9      	bne.n	6366 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    6372:	2200      	movs	r2, #0
    6374:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    6376:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    6378:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    637c:	4611      	mov	r1, r2
    637e:	2200      	movs	r2, #0
    6380:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    6384:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    6386:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    6388:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    638a:	f04f 0100 	mov.w	r1, #0
    638e:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    6392:	2b03      	cmp	r3, #3
    6394:	f200 812b 	bhi.w	65ee <usb_isr+0x6c6>
    6398:	e8df f013 	tbh	[pc, r3, lsl #1]
    639c:	01250170 	.word	0x01250170
    63a0:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    63a4:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    63a8:	bf18      	it	ne
    63aa:	2200      	movne	r2, #0
    63ac:	e6b5      	b.n	611a <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    63ae:	4a69      	ldr	r2, [pc, #420]	; (6554 <usb_isr+0x62c>)
    63b0:	780d      	ldrb	r5, [r1, #0]
    63b2:	7848      	ldrb	r0, [r1, #1]
    63b4:	7015      	strb	r5, [r2, #0]
    63b6:	7050      	strb	r0, [r2, #1]
    63b8:	788d      	ldrb	r5, [r1, #2]
    63ba:	78c8      	ldrb	r0, [r1, #3]
    63bc:	7095      	strb	r5, [r2, #2]
    63be:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    63c0:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    63c2:	790d      	ldrb	r5, [r1, #4]
    63c4:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    63c6:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    63c8:	794d      	ldrb	r5, [r1, #5]
    63ca:	7989      	ldrb	r1, [r1, #6]
    63cc:	7155      	strb	r5, [r2, #5]
    63ce:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    63d0:	f000 819b 	beq.w	670a <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63d4:	4960      	ldr	r1, [pc, #384]	; (6558 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63d6:	4e61      	ldr	r6, [pc, #388]	; (655c <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63d8:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63da:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    63dc:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63e0:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63e2:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    63e6:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63e8:	bf0c      	ite	eq
    63ea:	2188      	moveq	r1, #136	; 0x88
    63ec:	21c8      	movne	r1, #200	; 0xc8
    63ee:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63f2:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    63f6:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63fa:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    63fc:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63fe:	6051      	str	r1, [r2, #4]
    6400:	e69e      	b.n	6140 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    6402:	f242 2021 	movw	r0, #8737	; 0x2221
    6406:	4281      	cmp	r1, r0
    6408:	f040 81cb 	bne.w	67a2 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    640c:	4b54      	ldr	r3, [pc, #336]	; (6560 <usb_isr+0x638>)
    640e:	4c55      	ldr	r4, [pc, #340]	; (6564 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    6410:	4955      	ldr	r1, [pc, #340]	; (6568 <usb_isr+0x640>)
    6412:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    6414:	681d      	ldr	r5, [r3, #0]
    6416:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    6418:	f8cd e004 	str.w	lr, [sp, #4]
    641c:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    641e:	2000      	movs	r0, #0
    6420:	9002      	str	r0, [sp, #8]
    6422:	4680      	mov	r8, r0
    6424:	4684      	mov	ip, r0
    6426:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6428:	494b      	ldr	r1, [pc, #300]	; (6558 <usb_isr+0x630>)
    642a:	780d      	ldrb	r5, [r1, #0]
    642c:	f045 0e02 	orr.w	lr, r5, #2
    6430:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    6434:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6436:	9b01      	ldr	r3, [sp, #4]
    6438:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    643a:	9b03      	ldr	r3, [sp, #12]
    643c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    643e:	bf0c      	ite	eq
    6440:	2488      	moveq	r4, #136	; 0x88
    6442:	24c8      	movne	r4, #200	; 0xc8
    6444:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    6448:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    644c:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    6450:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    6452:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6454:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 6538 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    6458:	4b40      	ldr	r3, [pc, #256]	; (655c <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    645a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 6558 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    645e:	2800      	cmp	r0, #0
    6460:	f040 811e 	bne.w	66a0 <usb_isr+0x778>
    6464:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    6468:	d11b      	bne.n	64a2 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    646a:	f044 0c02 	orr.w	ip, r4, #2
    646e:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    6472:	9c02      	ldr	r4, [sp, #8]
    6474:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 6538 <usb_isr+0x610>
    6478:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    647a:	2a00      	cmp	r2, #0
    647c:	f040 8126 	bne.w	66cc <usb_isr+0x7a4>
    6480:	0402      	lsls	r2, r0, #16
    6482:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    6486:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    648a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    648e:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    6490:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    6492:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6494:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    6496:	2840      	cmp	r0, #64	; 0x40
    6498:	d103      	bne.n	64a2 <usb_isr+0x57a>
    649a:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    649c:	4a33      	ldr	r2, [pc, #204]	; (656c <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    649e:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    64a0:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    64a2:	4a33      	ldr	r2, [pc, #204]	; (6570 <usb_isr+0x648>)
    64a4:	2301      	movs	r3, #1
    64a6:	7013      	strb	r3, [r2, #0]
    64a8:	e64d      	b.n	6146 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    64aa:	f000 fc9d 	bl	6de8 <usb_serial_flush_callback>
    64ae:	e5a5      	b.n	5ffc <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    64b0:	4b21      	ldr	r3, [pc, #132]	; (6538 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    64b2:	482f      	ldr	r0, [pc, #188]	; (6570 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    64b4:	4928      	ldr	r1, [pc, #160]	; (6558 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    64b6:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    64b8:	f04f 0e02 	mov.w	lr, #2
    64bc:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    64c0:	4f2c      	ldr	r7, [pc, #176]	; (6574 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    64c2:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    64c4:	492c      	ldr	r1, [pc, #176]	; (6578 <usb_isr+0x650>)
    64c6:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    64c8:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    64ca:	4e2c      	ldr	r6, [pc, #176]	; (657c <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    64cc:	4d2c      	ldr	r5, [pc, #176]	; (6580 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    64ce:	4c2d      	ldr	r4, [pc, #180]	; (6584 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    64d0:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    64d2:	210d      	movs	r1, #13
    64d4:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    64d6:	21ff      	movs	r1, #255	; 0xff
    64d8:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    64da:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 6594 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    64de:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    64e0:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    64e2:	4d29      	ldr	r5, [pc, #164]	; (6588 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    64e4:	4a29      	ldr	r2, [pc, #164]	; (658c <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    64e6:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    64ea:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    64ec:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    64ee:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    64f2:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    64f4:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    64f6:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    64f8:	b007      	add	sp, #28
    64fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    64fe:	4a24      	ldr	r2, [pc, #144]	; (6590 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    6500:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    6504:	7813      	ldrb	r3, [r2, #0]
    6506:	3301      	adds	r3, #1
    6508:	7013      	strb	r3, [r2, #0]
    650a:	e557      	b.n	5fbc <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    650c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    6510:	4d0e      	ldr	r5, [pc, #56]	; (654c <usb_isr+0x624>)
    6512:	e53a      	b.n	5f8a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    6514:	5d8b      	ldrb	r3, [r1, r6]
    6516:	2b03      	cmp	r3, #3
    6518:	f200 80f0 	bhi.w	66fc <usb_isr+0x7d4>
    651c:	a201      	add	r2, pc, #4	; (adr r2, 6524 <usb_isr+0x5fc>)
    651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6522:	bf00      	nop
    6524:	00005fbd 	.word	0x00005fbd
    6528:	00005fbd 	.word	0x00005fbd
    652c:	000065e1 	.word	0x000065e1
    6530:	000065db 	.word	0x000065db
    6534:	1fff95cc 	.word	0x1fff95cc
    6538:	1fff8000 	.word	0x1fff8000
    653c:	1fff95a8 	.word	0x1fff95a8
    6540:	1fff9544 	.word	0x1fff9544
    6544:	1fff9598 	.word	0x1fff9598
    6548:	1fff95d0 	.word	0x1fff95d0
    654c:	1fff94f0 	.word	0x1fff94f0
    6550:	1fff9794 	.word	0x1fff9794
    6554:	1fff979c 	.word	0x1fff979c
    6558:	1fff95c0 	.word	0x1fff95c0
    655c:	1fff9554 	.word	0x1fff9554
    6560:	1fff94e8 	.word	0x1fff94e8
    6564:	1fff97a4 	.word	0x1fff97a4
    6568:	1fff95e4 	.word	0x1fff95e4
    656c:	1fff9500 	.word	0x1fff9500
    6570:	40072094 	.word	0x40072094
    6574:	400720c0 	.word	0x400720c0
    6578:	00400088 	.word	0x00400088
    657c:	40072088 	.word	0x40072088
    6580:	40072080 	.word	0x40072080
    6584:	40072098 	.word	0x40072098
    6588:	1fff9504 	.word	0x1fff9504
    658c:	1fff9558 	.word	0x1fff9558
    6590:	1fff95c1 	.word	0x1fff95c1
    6594:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6598:	49c1      	ldr	r1, [pc, #772]	; (68a0 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    659a:	4bc2      	ldr	r3, [pc, #776]	; (68a4 <usb_isr+0x97c>)
    659c:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    659e:	200d      	movs	r0, #13
    65a0:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    65a2:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    65a4:	07a2      	lsls	r2, r4, #30
    65a6:	f57f ae0e 	bpl.w	61c6 <usb_isr+0x29e>
    65aa:	e605      	b.n	61b8 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    65ac:	f240 3202 	movw	r2, #770	; 0x302
    65b0:	4291      	cmp	r1, r2
    65b2:	f040 80ee 	bne.w	6792 <usb_isr+0x86a>
    65b6:	88a9      	ldrh	r1, [r5, #4]
    65b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    65bc:	2904      	cmp	r1, #4
    65be:	d868      	bhi.n	6692 <usb_isr+0x76a>
    65c0:	886a      	ldrh	r2, [r5, #2]
    65c2:	2a00      	cmp	r2, #0
    65c4:	d165      	bne.n	6692 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    65c6:	48b6      	ldr	r0, [pc, #728]	; (68a0 <usb_isr+0x978>)
    65c8:	f8cd e004 	str.w	lr, [sp, #4]
    65cc:	0089      	lsls	r1, r1, #2
    65ce:	4408      	add	r0, r1
    65d0:	7801      	ldrb	r1, [r0, #0]
    65d2:	f041 0102 	orr.w	r1, r1, #2
    65d6:	7001      	strb	r1, [r0, #0]
    65d8:	e721      	b.n	641e <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    65da:	2301      	movs	r3, #1
    65dc:	558b      	strb	r3, [r1, r6]
						break;
    65de:	e4ed      	b.n	5fbc <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    65e0:	2300      	movs	r3, #0
    65e2:	558b      	strb	r3, [r1, r6]
						break;
    65e4:	e4ea      	b.n	5fbc <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    65e6:	f04f 0301 	mov.w	r3, #1
    65ea:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    65ee:	3501      	adds	r5, #1
    65f0:	2d04      	cmp	r5, #4
    65f2:	f106 0604 	add.w	r6, r6, #4
    65f6:	f107 0704 	add.w	r7, r7, #4
    65fa:	f108 0801 	add.w	r8, r8, #1
    65fe:	f47f aea1 	bne.w	6344 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6602:	4ca9      	ldr	r4, [pc, #676]	; (68a8 <usb_isr+0x980>)
			*reg = epconf;
    6604:	4ba9      	ldr	r3, [pc, #676]	; (68ac <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6606:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    6608:	4da9      	ldr	r5, [pc, #676]	; (68b0 <usb_isr+0x988>)
    660a:	9f04      	ldr	r7, [sp, #16]
    660c:	9e05      	ldr	r6, [sp, #20]
    660e:	2100      	movs	r1, #0
    6610:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6612:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6614:	0713      	lsls	r3, r2, #28
    6616:	f100 8105 	bmi.w	6824 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    661a:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    661c:	49a5      	ldr	r1, [pc, #660]	; (68b4 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    661e:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 68c0 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6622:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6624:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6626:	f04f 0100 	mov.w	r1, #0
    662a:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    662e:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6632:	f100 80e0 	bmi.w	67f6 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6636:	49a0      	ldr	r1, [pc, #640]	; (68b8 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6638:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    663a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    663c:	2100      	movs	r1, #0
    663e:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    6642:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6646:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6648:	f8df 8274 	ldr.w	r8, [pc, #628]	; 68c0 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    664c:	f100 8101 	bmi.w	6852 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    6650:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    6652:	499a      	ldr	r1, [pc, #616]	; (68bc <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6654:	4c9a      	ldr	r4, [pc, #616]	; (68c0 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    6656:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    6658:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    665a:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    665c:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    6660:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    6664:	f100 80b0 	bmi.w	67c8 <usb_isr+0x8a0>
    6668:	7833      	ldrb	r3, [r6, #0]
    666a:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    666c:	2100      	movs	r1, #0
    666e:	f083 0201 	eor.w	r2, r3, #1
    6672:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    6676:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    667a:	e6d0      	b.n	641e <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    667c:	f04f 0300 	mov.w	r3, #0
    6680:	f888 3000 	strb.w	r3, [r8]
    6684:	e7b3      	b.n	65ee <usb_isr+0x6c6>
    6686:	88a9      	ldrh	r1, [r5, #4]
    6688:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    668c:	2904      	cmp	r1, #4
    668e:	f240 808d 	bls.w	67ac <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6692:	4a83      	ldr	r2, [pc, #524]	; (68a0 <usb_isr+0x978>)
    6694:	230f      	movs	r3, #15
    6696:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6698:	4a8a      	ldr	r2, [pc, #552]	; (68c4 <usb_isr+0x99c>)
    669a:	2301      	movs	r3, #1
    669c:	7013      	strb	r3, [r2, #0]
    669e:	e552      	b.n	6146 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    66a0:	2840      	cmp	r0, #64	; 0x40
    66a2:	f67f aee2 	bls.w	646a <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    66a6:	f044 0402 	orr.w	r4, r4, #2
    66aa:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    66ae:	9e02      	ldr	r6, [sp, #8]
    66b0:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66b2:	b1ba      	cbz	r2, 66e4 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    66b4:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66b8:	4a83      	ldr	r2, [pc, #524]	; (68c8 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    66ba:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    66bc:	4633      	mov	r3, r6
    66be:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    66c0:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    66c4:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66c6:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    66ca:	e6e7      	b.n	649c <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    66cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    66d0:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66d2:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    66d4:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    66d6:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66d8:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    66dc:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66de:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    66e2:	e6d8      	b.n	6496 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    66e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    66e8:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    66ea:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66ec:	4a77      	ldr	r2, [pc, #476]	; (68cc <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    66ee:	f888 5000 	strb.w	r5, [r8]
    66f2:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    66f4:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    66f6:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    66fa:	e6cf      	b.n	649c <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    66fc:	f019 0f08 	tst.w	r9, #8
    6700:	bf0c      	ite	eq
    6702:	2302      	moveq	r3, #2
    6704:	2303      	movne	r3, #3
    6706:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    6708:	e458      	b.n	5fbc <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    670a:	4a71      	ldr	r2, [pc, #452]	; (68d0 <usb_isr+0x9a8>)
    670c:	210f      	movs	r1, #15
    670e:	7011      	strb	r1, [r2, #0]
    6710:	e660      	b.n	63d4 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    6712:	4a70      	ldr	r2, [pc, #448]	; (68d4 <usb_isr+0x9ac>)
    6714:	6854      	ldr	r4, [r2, #4]
    6716:	2c00      	cmp	r4, #0
    6718:	d0bb      	beq.n	6692 <usb_isr+0x76a>
    671a:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    671c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    6720:	e003      	b.n	672a <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    6722:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    6724:	6854      	ldr	r4, [r2, #4]
    6726:	2c00      	cmp	r4, #0
    6728:	d0b3      	beq.n	6692 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    672a:	8813      	ldrh	r3, [r2, #0]
    672c:	4283      	cmp	r3, r0
    672e:	d1f8      	bne.n	6722 <usb_isr+0x7fa>
    6730:	8853      	ldrh	r3, [r2, #2]
    6732:	4573      	cmp	r3, lr
    6734:	d1f5      	bne.n	6722 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    6736:	0a00      	lsrs	r0, r0, #8
    6738:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    673a:	bf0c      	ite	eq
    673c:	f894 e000 	ldrbe