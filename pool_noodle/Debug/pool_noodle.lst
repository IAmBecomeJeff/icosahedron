
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 31 67 00 00 e9 66 00 00     ... ....1g...f..
      10:	e9 66 00 00 e9 66 00 00 e9 66 00 00 e9 66 00 00     .f...f...f...f..
      20:	e9 66 00 00 e9 66 00 00 e9 66 00 00 31 67 00 00     .f...f...f..1g..
      30:	31 67 00 00 e9 66 00 00 5d 7b 00 00 61 7c 00 00     1g...f..]{..a|..
      40:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      50:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      60:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      70:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      80:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      90:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      a0:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      b0:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      c0:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      d0:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      e0:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
      f0:	31 67 00 00 69 7e 00 00 31 67 00 00 95 7f 00 00     1g..i~..1g......
     100:	31 67 00 00 c1 80 00 00 31 67 00 00 31 67 00 00     1g......1g..1g..
     110:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     120:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     130:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     140:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     150:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     160:	31 67 00 00 79 6b 00 00 31 67 00 00 31 67 00 00     1g..yk..1g..1g..
     170:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     180:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     190:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     1a0:	31 67 00 00 31 67 00 00 31 67 00 00 31 67 00 00     1g..1g..1g..1g..
     1b0:	31 67 00 00 31 67 00 00 31 67 00 00                 1g..1g..1g..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f006 fab2 	bl	6738 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f006 fb06 	bl	68e4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f006 fa77 	bl	67d4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f006 fa68 	bl	67d4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f008 faa8 	bl	885c <__libc_init_array>

	startup_late_hook();
     30c:	f006 fa1a 	bl	6744 <startup_late_hook>
	main();
     310:	f007 fcae 	bl	7c70 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c2c 	.word	0x1fff8c2c
     33c:	0000b30c 	.word	0x0000b30c
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c2c 	.word	0x1fff8c2c
     348:	1fffa020 	.word	0x1fffa020
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e2f09f8 	.word	0x5e2f09f8
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c2c 	.word	0x1fff8c2c
     42c:	00000000 	.word	0x00000000
     430:	0000b310 	.word	0x0000b310

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c30 	.word	0x1fff8c30
     460:	0000b310 	.word	0x0000b310
     464:	1fff8c2c 	.word	0x1fff8c2c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	4604      	mov	r4, r0
     496:	200e      	movs	r0, #14
     498:	f006 f9ae 	bl	67f8 <pinMode>
     49c:	2007      	movs	r0, #7
     49e:	2101      	movs	r1, #1
     4a0:	f006 f9aa 	bl	67f8 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     4a4:	69a0      	ldr	r0, [r4, #24]
     4a6:	b158      	cbz	r0, 4c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     4a8:	6803      	ldr	r3, [r0, #0]
     4aa:	4a07      	ldr	r2, [pc, #28]	; (4c8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	4293      	cmp	r3, r2
     4b0:	d107      	bne.n	4c2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     4b2:	6842      	ldr	r2, [r0, #4]
     4b4:	7b01      	ldrb	r1, [r0, #12]
     4b6:	7813      	ldrb	r3, [r2, #0]
     4b8:	ea23 0301 	bic.w	r3, r3, r1
     4bc:	7013      	strb	r3, [r2, #0]
     4be:	bd10      	pop	{r4, pc}
     4c0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4c6:	4718      	bx	r3
     4c8:	00000481 	.word	0x00000481

000004cc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4d0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4d2:	6805      	ldr	r5, [r0, #0]
     4d4:	f88d 3004 	strb.w	r3, [sp, #4]
     4d8:	f88d 3005 	strb.w	r3, [sp, #5]
     4dc:	f88d 3006 	strb.w	r3, [sp, #6]
     4e0:	682e      	ldr	r6, [r5, #0]
     4e2:	4a37      	ldr	r2, [pc, #220]	; (5c0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4e4:	f88d 3008 	strb.w	r3, [sp, #8]
     4e8:	4296      	cmp	r6, r2
     4ea:	f88d 3009 	strb.w	r3, [sp, #9]
     4ee:	f88d 300a 	strb.w	r3, [sp, #10]
     4f2:	d15f      	bne.n	5b4 <CLEDController::clearLeds(int)+0xe8>
     4f4:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4f6:	9104      	str	r1, [sp, #16]
     4f8:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     4fa:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4fc:	a801      	add	r0, sp, #4
     4fe:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     500:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     504:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     508:	f88d 3020 	strb.w	r3, [sp, #32]
     50c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50e:	d015      	beq.n	53c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     510:	f88d 301d 	strb.w	r3, [sp, #29]
     514:	f88d 301c 	strb.w	r3, [sp, #28]
     518:	f88d 301b 	strb.w	r3, [sp, #27]
     51c:	f88d 301a 	strb.w	r3, [sp, #26]
     520:	f88d 3019 	strb.w	r3, [sp, #25]
     524:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     528:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     52c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     530:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     532:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     534:	a903      	add	r1, sp, #12
     536:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     538:	b00b      	add	sp, #44	; 0x2c
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     53c:	4a21      	ldr	r2, [pc, #132]	; (5c4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     53e:	7813      	ldrb	r3, [r2, #0]
     540:	3301      	adds	r3, #1
     542:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     546:	f013 0f01 	tst.w	r3, #1
     54a:	bf14      	ite	ne
     54c:	2180      	movne	r1, #128	; 0x80
     54e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     550:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     552:	079a      	lsls	r2, r3, #30
     554:	bf44      	itt	mi
     556:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     55a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     55c:	075b      	lsls	r3, r3, #29
     55e:	bf48      	it	mi
     560:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     564:	3110      	adds	r1, #16
     566:	2200      	movs	r2, #0
     568:	b2c9      	uxtb	r1, r1
     56a:	f10d 031b 	add.w	r3, sp, #27
     56e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     572:	f44f 7e80 	mov.w	lr, #256	; 0x100
     576:	b1aa      	cbz	r2, 5a4 <CLEDController::clearLeds(int)+0xd8>
     578:	fb9e f2f2 	sdiv	r2, lr, r2
     57c:	b2d2      	uxtb	r2, r2
     57e:	1c50      	adds	r0, r2, #1
     580:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     582:	fb00 1501 	mla	r5, r0, r1, r1
     586:	122d      	asrs	r5, r5, #8
     588:	7018      	strb	r0, [r3, #0]
     58a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     58c:	b105      	cbz	r5, 590 <CLEDController::clearLeds(int)+0xc4>
     58e:	3e01      	subs	r6, #1
     590:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     594:	b100      	cbz	r0, 598 <CLEDController::clearLeds(int)+0xcc>
     596:	701a      	strb	r2, [r3, #0]
     598:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     59a:	429f      	cmp	r7, r3
     59c:	d008      	beq.n	5b0 <CLEDController::clearLeds(int)+0xe4>
     59e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d1e9      	bne.n	578 <CLEDController::clearLeds(int)+0xac>
     5a4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5a6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ac:	429f      	cmp	r7, r3
     5ae:	d1f6      	bne.n	59e <CLEDController::clearLeds(int)+0xd2>
     5b0:	6825      	ldr	r5, [r4, #0]
     5b2:	e7b9      	b.n	528 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5b4:	460a      	mov	r2, r1
     5b6:	ab02      	add	r3, sp, #8
     5b8:	a901      	add	r1, sp, #4
     5ba:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5bc:	b00b      	add	sp, #44	; 0x2c
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	000005c9 	.word	0x000005c9
     5c4:	1fff8c48 	.word	0x1fff8c48

000005c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     5ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     5d0:	789b      	ldrb	r3, [r3, #2]
     5d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5d6:	9101      	str	r1, [sp, #4]
     5d8:	9202      	str	r2, [sp, #8]
     5da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     5e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     5e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5e8:	d016      	beq.n	618 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5ea:	2300      	movs	r3, #0
     5ec:	f88d 3015 	strb.w	r3, [sp, #21]
     5f0:	f88d 3014 	strb.w	r3, [sp, #20]
     5f4:	f88d 3013 	strb.w	r3, [sp, #19]
     5f8:	f88d 3012 	strb.w	r3, [sp, #18]
     5fc:	f88d 3011 	strb.w	r3, [sp, #17]
     600:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     606:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     608:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     60a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     60e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     610:	a901      	add	r1, sp, #4
     612:	4790      	blx	r2
  }
     614:	b009      	add	sp, #36	; 0x24
     616:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     618:	4a1b      	ldr	r2, [pc, #108]	; (688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     622:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     626:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     628:	bf14      	ite	ne
     62a:	2280      	movne	r2, #128	; 0x80
     62c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     62e:	0799      	lsls	r1, r3, #30
     630:	bf44      	itt	mi
     632:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     636:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     638:	075b      	lsls	r3, r3, #29
     63a:	bf48      	it	mi
     63c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     640:	3210      	adds	r2, #16
     642:	b2d2      	uxtb	r2, r2
     644:	f10d 0313 	add.w	r3, sp, #19
     648:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     64c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     650:	b1ac      	cbz	r4, 67e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     652:	fb9e f4f4 	sdiv	r4, lr, r4
     656:	b2e4      	uxtb	r4, r4
     658:	1c61      	adds	r1, r4, #1
     65a:	b2c9      	uxtb	r1, r1
     65c:	fb01 2502 	mla	r5, r1, r2, r2
     660:	122d      	asrs	r5, r5, #8
     662:	7019      	strb	r1, [r3, #0]
     664:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     666:	b105      	cbz	r5, 66a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     668:	3e01      	subs	r6, #1
     66a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     66e:	b101      	cbz	r1, 672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     670:	701c      	strb	r4, [r3, #0]
     672:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     674:	42bb      	cmp	r3, r7
     676:	d0c5      	beq.n	604 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     678:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67a:	2c00      	cmp	r4, #0
     67c:	d1e9      	bne.n	652 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     67e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     680:	f803 4c03 	strb.w	r4, [r3, #-3]
     684:	e7f5      	b.n	672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     686:	bf00      	nop
     688:	1fff8c48 	.word	0x1fff8c48

0000068c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     690:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     692:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     694:	789b      	ldrb	r3, [r3, #2]
     696:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     698:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     69a:	9101      	str	r1, [sp, #4]
     69c:	9202      	str	r2, [sp, #8]
     69e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6a4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6a8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ac:	d017      	beq.n	6de <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ae:	2300      	movs	r3, #0
     6b0:	f88d 3015 	strb.w	r3, [sp, #21]
     6b4:	f88d 3014 	strb.w	r3, [sp, #20]
     6b8:	f88d 3013 	strb.w	r3, [sp, #19]
     6bc:	f88d 3012 	strb.w	r3, [sp, #18]
     6c0:	f88d 3011 	strb.w	r3, [sp, #17]
     6c4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6c8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6ca:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6cc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ce:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6d0:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d4:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d6:	a901      	add	r1, sp, #4
     6d8:	4798      	blx	r3
  }
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6de:	4a1b      	ldr	r2, [pc, #108]	; (74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6e0:	7813      	ldrb	r3, [r2, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ec:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ee:	bf14      	ite	ne
     6f0:	2280      	movne	r2, #128	; 0x80
     6f2:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f4:	0799      	lsls	r1, r3, #30
     6f6:	bf44      	itt	mi
     6f8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6fc:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6fe:	075b      	lsls	r3, r3, #29
     700:	bf48      	it	mi
     702:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     706:	3210      	adds	r2, #16
     708:	b2d2      	uxtb	r2, r2
     70a:	f10d 0313 	add.w	r3, sp, #19
     70e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1ac      	cbz	r4, 744 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     718:	fb9e f4f4 	sdiv	r4, lr, r4
     71c:	b2e4      	uxtb	r4, r4
     71e:	1c61      	adds	r1, r4, #1
     720:	b2c9      	uxtb	r1, r1
     722:	fb01 2502 	mla	r5, r1, r2, r2
     726:	122d      	asrs	r5, r5, #8
     728:	7019      	strb	r1, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b101      	cbz	r1, 738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     736:	701c      	strb	r4, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	42bb      	cmp	r3, r7
     73c:	d0c4      	beq.n	6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     73e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2c00      	cmp	r4, #0
     742:	d1e9      	bne.n	718 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     744:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 4c03 	strb.w	r4, [r3, #-3]
     74a:	e7f5      	b.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     74c:	1fff8c48 	.word	0x1fff8c48

00000750 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     750:	b570      	push	{r4, r5, r6, lr}
     752:	4604      	mov	r4, r0
     754:	4608      	mov	r0, r1
     756:	460d      	mov	r5, r1
     758:	f008 f932 	bl	89c0 <strlen>
     75c:	6823      	ldr	r3, [r4, #0]
     75e:	4602      	mov	r2, r0
     760:	4629      	mov	r1, r5
     762:	4620      	mov	r0, r4
     764:	685b      	ldr	r3, [r3, #4]
     766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     76a:	4718      	bx	r3

0000076c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     76c:	b538      	push	{r3, r4, r5, lr}
     76e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     770:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     772:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     774:	f008 f924 	bl	89c0 <strlen>
     778:	6823      	ldr	r3, [r4, #0]
     77a:	4602      	mov	r2, r0
     77c:	4629      	mov	r1, r5
     77e:	685b      	ldr	r3, [r3, #4]
     780:	4620      	mov	r0, r4
     782:	4798      	blx	r3
     784:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     786:	4620      	mov	r0, r4
     788:	f007 fa7a 	bl	7c80 <Print::println()>
     78c:	4428      	add	r0, r5
     78e:	bd38      	pop	{r3, r4, r5, pc}

00000790 <Print::println(unsigned char)>:
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     790:	b538      	push	{r3, r4, r5, lr}
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     792:	220a      	movs	r2, #10
     794:	2300      	movs	r3, #0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     796:	4605      	mov	r5, r0
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     798:	f007 fa82 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     79c:	4604      	mov	r4, r0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     79e:	4628      	mov	r0, r5
     7a0:	f007 fa6e 	bl	7c80 <Print::println()>
     7a4:	4420      	add	r0, r4
     7a6:	bd38      	pop	{r3, r4, r5, pc}

000007a8 <strip_sync(LEDStruct&)>:
LEDStruct next_leds;
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
     7a8:	b410      	push	{r4}
     7aa:	f46f 71df 	mvn.w	r1, #446	; 0x1be
     7ae:	e00d      	b.n	7cc <strip_sync(LEDStruct&)+0x24>

  /// do these sets point to the different things (note, this is different from the contents of the set being the same)
  bool operator!=(const CPixelView & rhs) const { return leds != rhs.leds || len != rhs.len || dir != rhs.dir; }

  /// access a single element in this set, just like an array operator
  inline PIXEL_TYPE & operator[](int x) const { if(dir & 0x80) { return leds[-x]; } else { return leds[x]; } }
     7b0:	f201 12bf 	addw	r2, r1, #447	; 0x1bf
     7b4:	441a      	add	r2, r3
     7b6:	1a5b      	subs	r3, r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7b8:	7814      	ldrb	r4, [r2, #0]
     7ba:	701c      	strb	r4, [r3, #0]
        g = rhs.g;
     7bc:	7854      	ldrb	r4, [r2, #1]
     7be:	705c      	strb	r4, [r3, #1]
     7c0:	3103      	adds	r1, #3
        b = rhs.b;
     7c2:	7892      	ldrb	r2, [r2, #2]
     7c4:	709a      	strb	r2, [r3, #2]
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
     7c6:	f111 0fde 	cmn.w	r1, #222	; 0xde
     7ca:	d00a      	beq.n	7e2 <strip_sync(LEDStruct&)+0x3a>
     7cc:	f990 2000 	ldrsb.w	r2, [r0]
     7d0:	6883      	ldr	r3, [r0, #8]
     7d2:	2a00      	cmp	r2, #0
     7d4:	daec      	bge.n	7b0 <strip_sync(LEDStruct&)+0x8>
     7d6:	f46f 72df 	mvn.w	r2, #446	; 0x1be
     7da:	1a52      	subs	r2, r2, r1
     7dc:	441a      	add	r2, r3
     7de:	440b      	add	r3, r1
     7e0:	e7ea      	b.n	7b8 <strip_sync(LEDStruct&)+0x10>
		leds.led_data[NUM_LEDS - i - 1] = leds.led_data[i];
	}
}
     7e2:	bc10      	pop	{r4}
     7e4:	4770      	bx	lr
     7e6:	bf00      	nop

000007e8 <updatePaletteIndex(LEDStruct&)>:
#define qsubd(x, b) ((x>b)?255:0)		// A digital unsigned subtraction macro. if result <0, then => 0. Otherwise, take on fixed value.
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     7e8:	4b48      	ldr	r3, [pc, #288]	; (90c <updatePaletteIndex(LEDStruct&)+0x124>)
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	2b00      	cmp	r3, #0
     7ee:	f000 808b 	beq.w	908 <updatePaletteIndex(LEDStruct&)+0x120>
// Unsigned subtraction magic
#define qsubd(x, b) ((x>b)?255:0)		// A digital unsigned subtraction macro. if result <0, then => 0. Otherwise, take on fixed value.
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     7f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7f6:	b09b      	sub	sp, #108	; 0x6c
     7f8:	f200 2309 	addw	r3, r0, #521	; 0x209
     7fc:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     7fe:	2300      	movs	r3, #0
     800:	4a43      	ldr	r2, [pc, #268]	; (910 <updatePaletteIndex(LEDStruct&)+0x128>)
     802:	9307      	str	r3, [sp, #28]
     804:	f8df 910c 	ldr.w	r9, [pc, #268]	; 914 <updatePaletteIndex(LEDStruct&)+0x12c>
     808:	9009      	str	r0, [sp, #36]	; 0x24
     80a:	f500 730e 	add.w	r3, r0, #568	; 0x238
     80e:	9208      	str	r2, [sp, #32]
     810:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     812:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     814:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     818:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     81a:	3701      	adds	r7, #1
        } while ( u.index != 255);
     81c:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     81e:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     820:	d1f8      	bne.n	814 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     822:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     826:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     828:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     82c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     830:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     832:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     836:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     83a:	2400      	movs	r4, #0
     83c:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     83e:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     842:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     846:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     84a:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     84e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     850:	b2f1      	uxtb	r1, r6
     852:	f3c5 6507 	ubfx	r5, r5, #24, #8
     856:	9103      	str	r1, [sp, #12]
     858:	b2e9      	uxtb	r1, r5
     85a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     85c:	fa5f f18c 	uxtb.w	r1, ip
     860:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     862:	9906      	ldr	r1, [sp, #24]
     864:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     866:	aa0d      	add	r2, sp, #52	; 0x34
     868:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     86a:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     86e:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     872:	d80c      	bhi.n	88e <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     874:	9905      	ldr	r1, [sp, #20]
     876:	458c      	cmp	ip, r1
     878:	dc07      	bgt.n	88a <updatePaletteIndex(LEDStruct&)+0xa2>
     87a:	290f      	cmp	r1, #15
     87c:	d005      	beq.n	88a <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     87e:	3101      	adds	r1, #1
     880:	b2c9      	uxtb	r1, r1
     882:	428b      	cmp	r3, r1
     884:	9102      	str	r1, [sp, #8]
     886:	bf38      	it	cc
     888:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     88a:	b259      	sxtb	r1, r3
     88c:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     88e:	a90c      	add	r1, sp, #48	; 0x30
     890:	9100      	str	r1, [sp, #0]
     892:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     894:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
     898:	f88d e035 	strb.w	lr, [sp, #53]	; 0x35
        b = rhs.b;
     89c:	f88d 8036 	strb.w	r8, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8a0:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
     8a4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
     8a8:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
     8ac:	f005 f83e 	bl	592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     8b0:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8b2:	46d3      	mov	fp, sl
        g = rhs.g;
     8b4:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     8b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
     8bc:	d1bf      	bne.n	83e <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     8c0:	aa0e      	add	r2, sp, #56	; 0x38
     8c2:	4293      	cmp	r3, r2
     8c4:	d018      	beq.n	8f8 <updatePaletteIndex(LEDStruct&)+0x110>
     8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     8c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     8ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
     8ce:	e001      	b.n	8d4 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     8d0:	42a3      	cmp	r3, r4
     8d2:	d011      	beq.n	8f8 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     8d4:	f812 1b01 	ldrb.w	r1, [r2], #1
     8d8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     8dc:	4288      	cmp	r0, r1
     8de:	d0f7      	beq.n	8d0 <updatePaletteIndex(LEDStruct&)+0xe8>
     8e0:	4b0a      	ldr	r3, [pc, #40]	; (90c <updatePaletteIndex(LEDStruct&)+0x124>)
     8e2:	9a07      	ldr	r2, [sp, #28]
     8e4:	781b      	ldrb	r3, [r3, #0]
     8e6:	3201      	adds	r2, #1
     8e8:	4293      	cmp	r3, r2
     8ea:	9207      	str	r2, [sp, #28]
     8ec:	dd09      	ble.n	902 <updatePaletteIndex(LEDStruct&)+0x11a>
     8ee:	9b08      	ldr	r3, [sp, #32]
     8f0:	f853 9f04 	ldr.w	r9, [r3, #4]!
     8f4:	9308      	str	r3, [sp, #32]
     8f6:	e78c      	b.n	812 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     8fa:	f89d 201c 	ldrb.w	r2, [sp, #28]
     8fe:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
			break;
		}
	}
}
     902:	b01b      	add	sp, #108	; 0x6c
     904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     908:	4770      	bx	lr
     90a:	bf00      	nop
     90c:	1fff8740 	.word	0x1fff8740
     910:	00009748 	.word	0x00009748
     914:	00009954 	.word	0x00009954

00000918 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     91c:	4bbe      	ldr	r3, [pc, #760]	; (c18 <initialize()+0x300>)
     91e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     920:	2700      	movs	r7, #0
     922:	6898      	ldr	r0, [r3, #8]
     924:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     928:	2196      	movs	r1, #150	; 0x96
     92a:	aa09      	add	r2, sp, #36	; 0x24
     92c:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     930:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     934:	f004 ffca 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
     938:	4bb7      	ldr	r3, [pc, #732]	; (c18 <initialize()+0x300>)
     93a:	49b8      	ldr	r1, [pc, #736]	; (c1c <initialize()+0x304>)
     93c:	f883 71d8 	strb.w	r7, [r3, #472]	; 0x1d8
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     940:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     944:	4ab5      	ldr	r2, [pc, #724]	; (c1c <initialize()+0x304>)
            count++;;
        } while ( u.index != 255);
     946:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     948:	3701      	adds	r7, #1
        } while ( u.index != 255);
     94a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     94c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     94e:	d1f7      	bne.n	940 <initialize()+0x28>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     950:	6813      	ldr	r3, [r2, #0]
     952:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     954:	f3c3 4907 	ubfx	r9, r3, #16, #8
     958:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     95c:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     960:	f04f 33ff 	mov.w	r3, #4294967295
     964:	46ce      	mov	lr, r9
     966:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     968:	2400      	movs	r4, #0
     96a:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     96c:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     970:	48ab      	ldr	r0, [pc, #684]	; (c20 <initialize()+0x308>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     972:	f3c5 2707 	ubfx	r7, r5, #8, #8
     976:	f3c5 4607 	ubfx	r6, r5, #16, #8
     97a:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     97c:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     980:	9104      	str	r1, [sp, #16]
     982:	b2f1      	uxtb	r1, r6
     984:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     986:	fa5f f18c 	uxtb.w	r1, ip
     98a:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     98c:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     98e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     990:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     992:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     996:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     998:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     99c:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9a0:	d80c      	bhi.n	9bc <initialize()+0xa4>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     9a2:	9906      	ldr	r1, [sp, #24]
     9a4:	458c      	cmp	ip, r1
     9a6:	dc07      	bgt.n	9b8 <initialize()+0xa0>
     9a8:	290f      	cmp	r1, #15
     9aa:	d005      	beq.n	9b8 <initialize()+0xa0>
                    istart8 = lastSlotUsed + 1;
     9ac:	3101      	adds	r1, #1
     9ae:	b2c9      	uxtb	r1, r1
     9b0:	428b      	cmp	r3, r1
     9b2:	9103      	str	r1, [sp, #12]
     9b4:	bf38      	it	cc
     9b6:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     9b8:	b259      	sxtb	r1, r3
     9ba:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9bc:	a908      	add	r1, sp, #32
     9be:	9100      	str	r1, [sp, #0]
     9c0:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9c2:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     9c6:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
     9ca:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ce:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     9d2:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     9d6:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     9da:	f004 ffa7 	bl	592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     9de:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e0:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     9e4:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
     9e8:	46d0      	mov	r8, sl
     9ea:	d1bf      	bne.n	96c <initialize()+0x54>
     9ec:	498d      	ldr	r1, [pc, #564]	; (c24 <initialize()+0x30c>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     9ee:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     9f0:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     9f4:	4a8b      	ldr	r2, [pc, #556]	; (c24 <initialize()+0x30c>)
            count++;;
        } while ( u.index != 255);
     9f6:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     9f8:	3701      	adds	r7, #1
        } while ( u.index != 255);
     9fa:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     9fc:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     9fe:	d1f7      	bne.n	9f0 <initialize()+0xd8>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a00:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a02:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a04:	ea4f 6813 	mov.w	r8, r3, lsr #24
     a08:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a0c:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a10:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a14:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a16:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a18:	2400      	movs	r4, #0
     a1a:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a1c:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a20:	4b7d      	ldr	r3, [pc, #500]	; (c18 <initialize()+0x300>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a22:	f3c5 2707 	ubfx	r7, r5, #8, #8
     a26:	f3c5 4607 	ubfx	r6, r5, #16, #8
     a2a:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     a2c:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a30:	9104      	str	r1, [sp, #16]
     a32:	b2f1      	uxtb	r1, r6
     a34:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     a36:	fa5f f18c 	uxtb.w	r1, ip
     a3a:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     a3c:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a3e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a40:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a42:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a46:	f203 2009 	addw	r0, r3, #521	; 0x209
     a4a:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a4c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a50:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a54:	d80c      	bhi.n	a70 <initialize()+0x158>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a56:	9906      	ldr	r1, [sp, #24]
     a58:	458c      	cmp	ip, r1
     a5a:	dc07      	bgt.n	a6c <initialize()+0x154>
     a5c:	290f      	cmp	r1, #15
     a5e:	d005      	beq.n	a6c <initialize()+0x154>
                    istart8 = lastSlotUsed + 1;
     a60:	3101      	adds	r1, #1
     a62:	b2c9      	uxtb	r1, r1
     a64:	428b      	cmp	r3, r1
     a66:	9103      	str	r1, [sp, #12]
     a68:	bf38      	it	cc
     a6a:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a6c:	b259      	sxtb	r1, r3
     a6e:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a70:	a908      	add	r1, sp, #32
     a72:	9100      	str	r1, [sp, #0]
     a74:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a76:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     a7a:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     a7e:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a82:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     a86:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     a8a:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     a8e:	f004 ff4d 	bl	592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a92:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a94:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     a98:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     a9c:	46d6      	mov	lr, sl
     a9e:	d1bd      	bne.n	a1c <initialize()+0x104>
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
	updatePaletteIndex(curr_leds);
     aa0:	485d      	ldr	r0, [pc, #372]	; (c18 <initialize()+0x300>)
     aa2:	f7ff fea1 	bl	7e8 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     aa6:	4b60      	ldr	r3, [pc, #384]	; (c28 <initialize()+0x310>)
     aa8:	4a60      	ldr	r2, [pc, #384]	; (c2c <initialize()+0x314>)
     aaa:	7818      	ldrb	r0, [r3, #0]
     aac:	4b5a      	ldr	r3, [pc, #360]	; (c18 <initialize()+0x300>)
     aae:	f883 023d 	strb.w	r0, [r3, #573]	; 0x23d
     ab2:	2300      	movs	r3, #0
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
		if (leds.mode_name == ModeList[i]) {
     ab4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     ab8:	4281      	cmp	r1, r0
     aba:	b2dc      	uxtb	r4, r3
     abc:	f103 0301 	add.w	r3, r3, #1
     ac0:	f000 80e4 	beq.w	c8c <initialize()+0x374>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     ac4:	2b14      	cmp	r3, #20
     ac6:	d1f5      	bne.n	ab4 <initialize()+0x19c>
     ac8:	4c59      	ldr	r4, [pc, #356]	; (c30 <initialize()+0x318>)
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     aca:	2700      	movs	r7, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     acc:	2196      	movs	r1, #150	; 0x96
     ace:	68a0      	ldr	r0, [r4, #8]
     ad0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     ad4:	aa09      	add	r2, sp, #36	; 0x24
     ad6:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     ada:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     ade:	f004 fef5 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     ae2:	2301      	movs	r3, #1
     ae4:	4953      	ldr	r1, [pc, #332]	; (c34 <initialize()+0x31c>)
     ae6:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     aea:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     aee:	4a51      	ldr	r2, [pc, #324]	; (c34 <initialize()+0x31c>)
            count++;;
        } while ( u.index != 255);
     af0:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     af2:	3701      	adds	r7, #1
        } while ( u.index != 255);
     af4:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     af6:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     af8:	d1f7      	bne.n	aea <initialize()+0x1d2>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     afa:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     afc:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     afe:	ea4f 6813 	mov.w	r8, r3, lsr #24
     b02:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b06:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b0a:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b0e:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b10:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b12:	2400      	movs	r4, #0
     b14:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b16:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b1a:	4847      	ldr	r0, [pc, #284]	; (c38 <initialize()+0x320>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b1c:	f3c5 2707 	ubfx	r7, r5, #8, #8
     b20:	f3c5 4607 	ubfx	r6, r5, #16, #8
     b24:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     b26:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b2a:	9104      	str	r1, [sp, #16]
     b2c:	b2f1      	uxtb	r1, r6
     b2e:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     b30:	fa5f f18c 	uxtb.w	r1, ip
     b34:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     b36:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b38:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b3a:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b3c:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b40:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b42:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b46:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b4a:	d80c      	bhi.n	b66 <initialize()+0x24e>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b4c:	9906      	ldr	r1, [sp, #24]
     b4e:	458c      	cmp	ip, r1
     b50:	dc07      	bgt.n	b62 <initialize()+0x24a>
     b52:	290f      	cmp	r1, #15
     b54:	d005      	beq.n	b62 <initialize()+0x24a>
                    istart8 = lastSlotUsed + 1;
     b56:	3101      	adds	r1, #1
     b58:	b2c9      	uxtb	r1, r1
     b5a:	428b      	cmp	r3, r1
     b5c:	9103      	str	r1, [sp, #12]
     b5e:	bf38      	it	cc
     b60:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b62:	b259      	sxtb	r1, r3
     b64:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b66:	a908      	add	r1, sp, #32
     b68:	9100      	str	r1, [sp, #0]
     b6a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b6c:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     b70:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     b74:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b78:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     b7c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     b80:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     b84:	f004 fed2 	bl	592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b88:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b8a:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     b8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     b92:	46d6      	mov	lr, sl
     b94:	d1bf      	bne.n	b16 <initialize()+0x1fe>
     b96:	4929      	ldr	r1, [pc, #164]	; (c3c <initialize()+0x324>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b98:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b9a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     b9e:	4a27      	ldr	r2, [pc, #156]	; (c3c <initialize()+0x324>)
            count++;;
        } while ( u.index != 255);
     ba0:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ba2:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ba4:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ba6:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ba8:	d1f7      	bne.n	b9a <initialize()+0x282>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     baa:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     bac:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     bae:	ea4f 6813 	mov.w	r8, r3, lsr #24
     bb2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     bb6:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     bba:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     bbe:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     bc0:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     bc2:	2400      	movs	r4, #0
     bc4:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     bc6:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bca:	4b19      	ldr	r3, [pc, #100]	; (c30 <initialize()+0x318>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bcc:	f3c5 2707 	ubfx	r7, r5, #8, #8
     bd0:	f3c5 4607 	ubfx	r6, r5, #16, #8
     bd4:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     bd6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bda:	9104      	str	r1, [sp, #16]
     bdc:	b2f1      	uxtb	r1, r6
     bde:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     be0:	fa5f f18c 	uxtb.w	r1, ip
     be4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     be6:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     be8:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     bea:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bec:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bf0:	f203 2009 	addw	r0, r3, #521	; 0x209
     bf4:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     bf6:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bfa:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     bfe:	d821      	bhi.n	c44 <initialize()+0x32c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c00:	9906      	ldr	r1, [sp, #24]
     c02:	458c      	cmp	ip, r1
     c04:	dc1c      	bgt.n	c40 <initialize()+0x328>
     c06:	290f      	cmp	r1, #15
     c08:	d01a      	beq.n	c40 <initialize()+0x328>
                    istart8 = lastSlotUsed + 1;
     c0a:	3101      	adds	r1, #1
     c0c:	b2c9      	uxtb	r1, r1
     c0e:	428b      	cmp	r3, r1
     c10:	9103      	str	r1, [sp, #12]
     c12:	bf38      	it	cc
     c14:	460b      	movcc	r3, r1
     c16:	e013      	b.n	c40 <initialize()+0x328>
     c18:	1fff93fc 	.word	0x1fff93fc
     c1c:	000098d8 	.word	0x000098d8
     c20:	1fff95d5 	.word	0x1fff95d5
     c24:	0000a804 	.word	0x0000a804
     c28:	1fff8739 	.word	0x1fff8739
     c2c:	1fff8723 	.word	0x1fff8723
     c30:	1fff8c74 	.word	0x1fff8c74
     c34:	0000a560 	.word	0x0000a560
     c38:	1fff8e4d 	.word	0x1fff8e4d
     c3c:	0000a648 	.word	0x0000a648
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c40:	b259      	sxtb	r1, r3
     c42:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c44:	a908      	add	r1, sp, #32
     c46:	9100      	str	r1, [sp, #0]
     c48:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c4a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     c4e:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     c52:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c56:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     c5a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     c5e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     c62:	f004 fe63 	bl	592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     c66:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c68:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     c6c:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     c70:	46d6      	mov	lr, sl
     c72:	d1a8      	bne.n	bc6 <initialize()+0x2ae>
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     c74:	4a07      	ldr	r2, [pc, #28]	; (c94 <initialize()+0x37c>)
     c76:	4b08      	ldr	r3, [pc, #32]	; (c98 <initialize()+0x380>)
	updatePaletteIndex(next_leds);
     c78:	4610      	mov	r0, r2
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     c7a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
     c7e:	f882 323c 	strb.w	r3, [r2, #572]	; 0x23c
	updatePaletteIndex(next_leds);
     c82:	f7ff fdb1 	bl	7e8 <updatePaletteIndex(LEDStruct&)>
}
     c86:	b00b      	add	sp, #44	; 0x2c
     c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
		if (leds.mode_name == ModeList[i]) {
			leds.mode_number = i;
     c8c:	4b02      	ldr	r3, [pc, #8]	; (c98 <initialize()+0x380>)
     c8e:	f883 423c 	strb.w	r4, [r3, #572]	; 0x23c
     c92:	e719      	b.n	ac8 <initialize()+0x1b0>
     c94:	1fff8c74 	.word	0x1fff8c74
     c98:	1fff93fc 	.word	0x1fff93fc

00000c9c <change_pattern()>:
}



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
     c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c9e:	2120      	movs	r1, #32
     ca0:	482a      	ldr	r0, [pc, #168]	; (d4c <change_pattern()+0xb0>)
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;
     ca2:	4c2b      	ldr	r4, [pc, #172]	; (d50 <change_pattern()+0xb4>)
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
     ca4:	4f2b      	ldr	r7, [pc, #172]	; (d54 <change_pattern()+0xb8>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
     ca6:	4e2c      	ldr	r6, [pc, #176]	; (d58 <change_pattern()+0xbc>)
     ca8:	f006 fde6 	bl	7878 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     cac:	482b      	ldr	r0, [pc, #172]	; (d5c <change_pattern()+0xc0>)
     cae:	f006 ffe7 	bl	7c80 <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     cb2:	492b      	ldr	r1, [pc, #172]	; (d60 <change_pattern()+0xc4>)
	transition_ratio = 0;
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
     cb4:	4a2b      	ldr	r2, [pc, #172]	; (d64 <change_pattern()+0xc8>)
     cb6:	880b      	ldrh	r3, [r1, #0]
     cb8:	7815      	ldrb	r5, [r2, #0]
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;
     cba:	8820      	ldrh	r0, [r4, #0]
// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
     cbc:	f8df e0b8 	ldr.w	lr, [pc, #184]	; d78 <change_pattern()+0xdc>
     cc0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     cc4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     cc8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ccc:	3319      	adds	r3, #25
     cce:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cd0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	transition_speed = random8(3,7);
     cd4:	f3c2 1281 	ubfx	r2, r2, #6, #2
     cd8:	3203      	adds	r2, #3
	transition_ratio = 0;
	number_of_mode_changes++;
     cda:	3001      	adds	r0, #1
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
     cdc:	703a      	strb	r2, [r7, #0]
	transition_ratio = 0;
	number_of_mode_changes++;
     cde:	8020      	strh	r0, [r4, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
     ce0:	2201      	movs	r2, #1
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
     ce2:	4f21      	ldr	r7, [pc, #132]	; (d68 <change_pattern()+0xcc>)
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
     ce4:	4821      	ldr	r0, [pc, #132]	; (d6c <change_pattern()+0xd0>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
     ce6:	7032      	strb	r2, [r6, #0]
	transition_type  = BLENDING;
     ce8:	2200      	movs	r2, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     cea:	800b      	strh	r3, [r1, #0]
     cec:	f88e 2000 	strb.w	r2, [lr]
	transition_speed = random8(3,7);
	transition_ratio = 0;
     cf0:	703a      	strb	r2, [r7, #0]
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
     cf2:	f880 223f 	strb.w	r2, [r0, #575]	; 0x23f
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
     cf6:	b995      	cbnz	r5, d1e <change_pattern()+0x82>
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
     cf8:	f890 223c 	ldrb.w	r2, [r0, #572]	; 0x23c
     cfc:	4b1c      	ldr	r3, [pc, #112]	; (d70 <change_pattern()+0xd4>)
     cfe:	3201      	adds	r2, #1
     d00:	fba3 1302 	umull	r1, r3, r3, r2
     d04:	091b      	lsrs	r3, r3, #4
     d06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     d0a:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
     d0e:	b2db      	uxtb	r3, r3
	next_leds.mode_name = ModeList[next_leds.mode_number];
     d10:	4a18      	ldr	r2, [pc, #96]	; (d74 <change_pattern()+0xd8>)
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
     d12:	f880 323c 	strb.w	r3, [r0, #572]	; 0x23c
	next_leds.mode_name = ModeList[next_leds.mode_number];
     d16:	5cd3      	ldrb	r3, [r2, r3]
     d18:	f880 323d 	strb.w	r3, [r0, #573]	; 0x23d
     d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d1e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     d22:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     d26:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     d2a:	3219      	adds	r2, #25
     d2c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     d2e:	eb02 2312 	add.w	r3, r2, r2, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     d32:	b2db      	uxtb	r3, r3
     d34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     d38:	f3c3 1387 	ubfx	r3, r3, #6, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d3c:	800a      	strh	r2, [r1, #0]
     d3e:	4a0d      	ldr	r2, [pc, #52]	; (d74 <change_pattern()+0xd8>)
	transition_ratio = 0;
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
     d40:	f880 323c 	strb.w	r3, [r0, #572]	; 0x23c
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
     d44:	5cd3      	ldrb	r3, [r2, r3]
     d46:	f880 323d 	strb.w	r3, [r0, #573]	; 0x23d
     d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d4c:	000099c0 	.word	0x000099c0
     d50:	1fff8c6c 	.word	0x1fff8c6c
     d54:	1fff93ee 	.word	0x1fff93ee
     d58:	1fff93ac 	.word	0x1fff93ac
     d5c:	1fff874c 	.word	0x1fff874c
     d60:	1fff8742 	.word	0x1fff8742
     d64:	1fff93cc 	.word	0x1fff93cc
     d68:	1fff8c6e 	.word	0x1fff8c6e
     d6c:	1fff8c74 	.word	0x1fff8c74
     d70:	cccccccd 	.word	0xcccccccd
     d74:	1fff8724 	.word	0x1fff8724
     d78:	1fff93b8 	.word	0x1fff93b8

00000d7c <blending()>:
}



// Transition functions
void blending() {
     d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d80:	f8df a0b4 	ldr.w	sl, [pc, #180]	; e38 <blending()+0xbc>
     d84:	f8df 80ac 	ldr.w	r8, [pc, #172]	; e34 <blending()+0xb8>
     d88:	4f26      	ldr	r7, [pc, #152]	; (e24 <blending()+0xa8>)
     d8a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; e3c <blending()+0xc0>
     d8e:	2600      	movs	r6, #0
     d90:	b085      	sub	sp, #20
     d92:	4655      	mov	r5, sl
     d94:	4634      	mov	r4, r6
     d96:	f998 3000 	ldrsb.w	r3, [r8]
     d9a:	f8d8 1008 	ldr.w	r1, [r8, #8]
     d9e:	68ba      	ldr	r2, [r7, #8]
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
     da0:	f8df b098 	ldr.w	fp, [pc, #152]	; e3c <blending()+0xc0>
     da4:	2b00      	cmp	r3, #0
     da6:	f997 3000 	ldrsb.w	r3, [r7]
     daa:	bfb4      	ite	lt
     dac:	1989      	addlt	r1, r1, r6
     dae:	1909      	addge	r1, r1, r4
     db0:	2b00      	cmp	r3, #0
     db2:	bfb4      	ite	lt
     db4:	1992      	addlt	r2, r2, r6
     db6:	1912      	addge	r2, r2, r4
     db8:	f899 3000 	ldrb.w	r3, [r9]
     dbc:	a803      	add	r0, sp, #12
     dbe:	f004 fe77 	bl	5ab0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dc2:	f89d 300c 	ldrb.w	r3, [sp, #12]
     dc6:	f80a 3004 	strb.w	r3, [sl, r4]
     dca:	3403      	adds	r4, #3
        g = rhs.g;
     dcc:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     dd0:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     dd4:	706a      	strb	r2, [r5, #1]
     dd6:	f5b4 7fe1 	cmp.w	r4, #450	; 0x1c2
        b = rhs.b;
     dda:	70ab      	strb	r3, [r5, #2]
     ddc:	f1a6 0603 	sub.w	r6, r6, #3
     de0:	f105 0503 	add.w	r5, r5, #3
     de4:	d1d7      	bne.n	d96 <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
     de6:	4e10      	ldr	r6, [pc, #64]	; (e28 <blending()+0xac>)
     de8:	6833      	ldr	r3, [r6, #0]
     dea:	07db      	lsls	r3, r3, #31
     dec:	f140 8214 	bpl.w	1218 <blending()+0x49c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     df0:	4d0e      	ldr	r5, [pc, #56]	; (e2c <blending()+0xb0>)
     df2:	4c0f      	ldr	r4, [pc, #60]	; (e30 <blending()+0xb4>)
     df4:	682b      	ldr	r3, [r5, #0]
     df6:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     df8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
     dfc:	9b03      	ldr	r3, [sp, #12]
     dfe:	1a5b      	subs	r3, r3, r1
     e00:	4293      	cmp	r3, r2
     e02:	d31d      	bcc.n	e40 <blending()+0xc4>
     e04:	f899 3000 	ldrb.w	r3, [r9]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e08:	682a      	ldr	r2, [r5, #0]
     e0a:	9202      	str	r2, [sp, #8]
     e0c:	3301      	adds	r3, #1
	return ret;
     e0e:	9a02      	ldr	r2, [sp, #8]
     e10:	6022      	str	r2, [r4, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	f889 3000 	strb.w	r3, [r9]
	if (transition_ratio == 255) {
     e18:	2bff      	cmp	r3, #255	; 0xff
     e1a:	d015      	beq.n	e48 <blending()+0xcc>
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
	}
}
     e1c:	b005      	add	sp, #20
     e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e22:	bf00      	nop
     e24:	1fff8c74 	.word	0x1fff8c74
     e28:	1fff93e8 	.word	0x1fff93e8
     e2c:	1fff9d60 	.word	0x1fff9d60
     e30:	1fff93b0 	.word	0x1fff93b0
     e34:	1fff93fc 	.word	0x1fff93fc
     e38:	1fff9b24 	.word	0x1fff9b24
     e3c:	1fff8c6e 	.word	0x1fff8c6e
     e40:	f89b 3000 	ldrb.w	r3, [fp]

// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
     e44:	2bff      	cmp	r3, #255	; 0xff
     e46:	d1e9      	bne.n	e1c <blending()+0xa0>
     e48:	f8d8 3008 	ldr.w	r3, [r8, #8]
     e4c:	f8d8 500c 	ldr.w	r5, [r8, #12]
		in_transition = 0;
     e50:	49e0      	ldr	r1, [pc, #896]	; (11d4 <blending()+0x458>)
     e52:	4ce1      	ldr	r4, [pc, #900]	; (11d8 <blending()+0x45c>)
     e54:	f8df e3bc 	ldr.w	lr, [pc, #956]	; 1214 <blending()+0x498>
     e58:	68ba      	ldr	r2, [r7, #8]
     e5a:	68fe      	ldr	r6, [r7, #12]
     e5c:	2000      	movs	r0, #0
 }

  /// Copy the contents of the passed in set to our set.  Note if one set is smaller than the other, only the
  /// smallest number of items will be copied over.
  inline CPixelView & operator=(const CPixelView & rhs) {
    for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) {
     e5e:	42ab      	cmp	r3, r5
     e60:	7008      	strb	r0, [r1, #0]
     e62:	d015      	beq.n	e90 <blending()+0x114>
     e64:	42b2      	cmp	r2, r6
     e66:	d013      	beq.n	e90 <blending()+0x114>
     e68:	f994 4000 	ldrsb.w	r4, [r4]
     e6c:	f99e 0000 	ldrsb.w	r0, [lr]
     e70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     e74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     e78:	7811      	ldrb	r1, [r2, #0]
     e7a:	7019      	strb	r1, [r3, #0]
        g = rhs.g;
     e7c:	7851      	ldrb	r1, [r2, #1]
     e7e:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
     e80:	7891      	ldrb	r1, [r2, #2]
     e82:	7099      	strb	r1, [r3, #2]
    const int8_t dir;
  public:
    __attribute__((always_inline)) inline pixelset_iterator_base(const pixelset_iterator_base & rhs) : leds(rhs.leds), dir(rhs.dir) {}
    __attribute__((always_inline)) inline pixelset_iterator_base(T * _leds, const char _dir) : leds(_leds), dir(_dir) {}

    __attribute__((always_inline)) inline pixelset_iterator_base& operator++() { leds += dir; return *this; }
     e84:	4423      	add	r3, r4
 }

  /// Copy the contents of the passed in set to our set.  Note if one set is smaller than the other, only the
  /// smallest number of items will be copied over.
  inline CPixelView & operator=(const CPixelView & rhs) {
    for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) {
     e86:	429d      	cmp	r5, r3
    const int8_t dir;
  public:
    __attribute__((always_inline)) inline pixelset_iterator_base(const pixelset_iterator_base & rhs) : leds(rhs.leds), dir(rhs.dir) {}
    __attribute__((always_inline)) inline pixelset_iterator_base(T * _leds, const char _dir) : leds(_leds), dir(_dir) {}

    __attribute__((always_inline)) inline pixelset_iterator_base& operator++() { leds += dir; return *this; }
     e88:	4402      	add	r2, r0
 }

  /// Copy the contents of the passed in set to our set.  Note if one set is smaller than the other, only the
  /// smallest number of items will be copied over.
  inline CPixelView & operator=(const CPixelView & rhs) {
    for(iterator pixel = begin(), rhspixel = rhs.begin(), _end = end(), rhs_end = rhs.end(); (pixel != _end) && (rhspixel != rhs_end); ++pixel, ++rhspixel) {
     e8a:	d001      	beq.n	e90 <blending()+0x114>
     e8c:	4296      	cmp	r6, r2
     e8e:	d1f3      	bne.n	e78 <blending()+0xfc>
     e90:	4bd2      	ldr	r3, [pc, #840]	; (11dc <blending()+0x460>)
     e92:	4ad3      	ldr	r2, [pc, #844]	; (11e0 <blending()+0x464>)
     e94:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     e98:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     e9c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     ea0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ea4:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     ea8:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     eac:	f803 1c01 	strb.w	r1, [r3, #-1]
     eb0:	3303      	adds	r3, #3
__attribute__((always_inline))
inline CRGB *operator+(const CRGBSet & pixels, int offset) { return (CRGB*)pixels + offset; }


template<int SIZE>
class CRGBArray : public CPixelView<CRGB> {
     eb2:	429d      	cmp	r5, r3
     eb4:	f102 0203 	add.w	r2, r2, #3
     eb8:	d1ee      	bne.n	e98 <blending()+0x11c>
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     eba:	f897 21d4 	ldrb.w	r2, [r7, #468]	; 0x1d4
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     ebe:	4bc9      	ldr	r3, [pc, #804]	; (11e4 <blending()+0x468>)
     ec0:	f897 41d5 	ldrb.w	r4, [r7, #469]	; 0x1d5
     ec4:	f897 01d6 	ldrb.w	r0, [r7, #470]	; 0x1d6
     ec8:	f897 11d7 	ldrb.w	r1, [r7, #471]	; 0x1d7
     ecc:	f888 21d4 	strb.w	r2, [r8, #468]	; 0x1d4
     ed0:	4ac5      	ldr	r2, [pc, #788]	; (11e8 <blending()+0x46c>)
     ed2:	f888 41d5 	strb.w	r4, [r8, #469]	; 0x1d5
     ed6:	f888 01d6 	strb.w	r0, [r8, #470]	; 0x1d6
     eda:	f103 0430 	add.w	r4, r3, #48	; 0x30
     ede:	f888 11d7 	strb.w	r1, [r8, #471]	; 0x1d7
     ee2:	6819      	ldr	r1, [r3, #0]
     ee4:	685d      	ldr	r5, [r3, #4]
     ee6:	6898      	ldr	r0, [r3, #8]
     ee8:	6011      	str	r1, [r2, #0]
     eea:	68d9      	ldr	r1, [r3, #12]
     eec:	60d1      	str	r1, [r2, #12]
     eee:	3310      	adds	r3, #16
     ef0:	42a3      	cmp	r3, r4
     ef2:	6055      	str	r5, [r2, #4]
     ef4:	6090      	str	r0, [r2, #8]
     ef6:	f102 0210 	add.w	r2, r2, #16
     efa:	d1f2      	bne.n	ee2 <blending()+0x166>
     efc:	4bbb      	ldr	r3, [pc, #748]	; (11ec <blending()+0x470>)
     efe:	4abc      	ldr	r2, [pc, #752]	; (11f0 <blending()+0x474>)
     f00:	f103 0130 	add.w	r1, r3, #48	; 0x30
     f04:	6818      	ldr	r0, [r3, #0]
     f06:	685d      	ldr	r5, [r3, #4]
     f08:	689c      	ldr	r4, [r3, #8]
     f0a:	6010      	str	r0, [r2, #0]
     f0c:	68d8      	ldr	r0, [r3, #12]
     f0e:	60d0      	str	r0, [r2, #12]
     f10:	3310      	adds	r3, #16
     f12:	428b      	cmp	r3, r1
     f14:	6055      	str	r5, [r2, #4]
     f16:	6094      	str	r4, [r2, #8]
     f18:	f102 0210 	add.w	r2, r2, #16
     f1c:	d1f2      	bne.n	f04 <blending()+0x188>
     f1e:	f897 4239 	ldrb.w	r4, [r7, #569]	; 0x239
     f22:	f897 023a 	ldrb.w	r0, [r7, #570]	; 0x23a
     f26:	f897 123b 	ldrb.w	r1, [r7, #571]	; 0x23b
     f2a:	f897 223c 	ldrb.w	r2, [r7, #572]	; 0x23c
     f2e:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
     f32:	f897 523e 	ldrb.w	r5, [r7, #574]	; 0x23e
     f36:	f888 4239 	strb.w	r4, [r8, #569]	; 0x239
     f3a:	f888 023a 	strb.w	r0, [r8, #570]	; 0x23a
     f3e:	f897 423f 	ldrb.w	r4, [r7, #575]	; 0x23f
     f42:	f897 0240 	ldrb.w	r0, [r7, #576]	; 0x240
     f46:	f888 123b 	strb.w	r1, [r8, #571]	; 0x23b
     f4a:	f888 223c 	strb.w	r2, [r8, #572]	; 0x23c
     f4e:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
     f52:	f897 2242 	ldrb.w	r2, [r7, #578]	; 0x242
     f56:	f888 323d 	strb.w	r3, [r8, #573]	; 0x23d
     f5a:	f888 523e 	strb.w	r5, [r8, #574]	; 0x23e
     f5e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
     f62:	f897 5244 	ldrb.w	r5, [r7, #580]	; 0x244
     f66:	f888 423f 	strb.w	r4, [r8, #575]	; 0x23f
     f6a:	f888 0240 	strb.w	r0, [r8, #576]	; 0x240
     f6e:	f897 4245 	ldrb.w	r4, [r7, #581]	; 0x245
     f72:	f897 0246 	ldrb.w	r0, [r7, #582]	; 0x246
     f76:	f888 1241 	strb.w	r1, [r8, #577]	; 0x241
     f7a:	f888 2242 	strb.w	r2, [r8, #578]	; 0x242
     f7e:	f897 1247 	ldrb.w	r1, [r7, #583]	; 0x247
     f82:	f897 2248 	ldrb.w	r2, [r7, #584]	; 0x248
     f86:	f888 3243 	strb.w	r3, [r8, #579]	; 0x243
     f8a:	f888 5244 	strb.w	r5, [r8, #580]	; 0x244
     f8e:	f888 4245 	strb.w	r4, [r8, #581]	; 0x245
     f92:	f888 1247 	strb.w	r1, [r8, #583]	; 0x247
     f96:	f888 2248 	strb.w	r2, [r8, #584]	; 0x248
     f9a:	4b96      	ldr	r3, [pc, #600]	; (11f4 <blending()+0x478>)
     f9c:	f888 0246 	strb.w	r0, [r8, #582]	; 0x246
     fa0:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
     fa4:	f897 524a 	ldrb.w	r5, [r7, #586]	; 0x24a
     fa8:	f897 424b 	ldrb.w	r4, [r7, #587]	; 0x24b
     fac:	f897 124c 	ldrb.w	r1, [r7, #588]	; 0x24c
     fb0:	f888 524a 	strb.w	r5, [r8, #586]	; 0x24a
     fb4:	f888 424b 	strb.w	r4, [r8, #587]	; 0x24b
     fb8:	f897 524d 	ldrb.w	r5, [r7, #589]	; 0x24d
     fbc:	f897 424e 	ldrb.w	r4, [r7, #590]	; 0x24e
     fc0:	f888 124c 	strb.w	r1, [r8, #588]	; 0x24c
     fc4:	4a8c      	ldr	r2, [pc, #560]	; (11f8 <blending()+0x47c>)
     fc6:	f897 124f 	ldrb.w	r1, [r7, #591]	; 0x24f
     fca:	f888 0249 	strb.w	r0, [r8, #585]	; 0x249
     fce:	f888 524d 	strb.w	r5, [r8, #589]	; 0x24d
     fd2:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     fd6:	f888 424e 	strb.w	r4, [r8, #590]	; 0x24e
     fda:	f888 124f 	strb.w	r1, [r8, #591]	; 0x24f
     fde:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     fe2:	f803 1b01 	strb.w	r1, [r3], #1
     fe6:	4283      	cmp	r3, r0
     fe8:	d1f9      	bne.n	fde <blending()+0x262>
     fea:	4984      	ldr	r1, [pc, #528]	; (11fc <blending()+0x480>)
     fec:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     ff0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     ff4:	f803 2b01 	strb.w	r2, [r3], #1
     ff8:	4283      	cmp	r3, r0
     ffa:	4a77      	ldr	r2, [pc, #476]	; (11d8 <blending()+0x45c>)
     ffc:	d1f8      	bne.n	ff0 <blending()+0x274>
     ffe:	f897 42e6 	ldrb.w	r4, [r7, #742]	; 0x2e6
    1002:	f897 02e7 	ldrb.w	r0, [r7, #743]	; 0x2e7
    1006:	f897 12e8 	ldrb.w	r1, [r7, #744]	; 0x2e8
    100a:	f897 32e9 	ldrb.w	r3, [r7, #745]	; 0x2e9
    100e:	f897 62ea 	ldrb.w	r6, [r7, #746]	; 0x2ea
    1012:	f897 52eb 	ldrb.w	r5, [r7, #747]	; 0x2eb
    1016:	f882 42e6 	strb.w	r4, [r2, #742]	; 0x2e6
    101a:	f882 02e7 	strb.w	r0, [r2, #743]	; 0x2e7
    101e:	f8b7 42ec 	ldrh.w	r4, [r7, #748]	; 0x2ec
    1022:	f8b7 02ee 	ldrh.w	r0, [r7, #750]	; 0x2ee
    1026:	f882 12e8 	strb.w	r1, [r2, #744]	; 0x2e8
    102a:	f882 32e9 	strb.w	r3, [r2, #745]	; 0x2e9
    102e:	f8b7 12f0 	ldrh.w	r1, [r7, #752]	; 0x2f0
    1032:	f897 32f2 	ldrb.w	r3, [r7, #754]	; 0x2f2
    1036:	f882 62ea 	strb.w	r6, [r2, #746]	; 0x2ea
    103a:	f882 52eb 	strb.w	r5, [r2, #747]	; 0x2eb
    103e:	f897 62f3 	ldrb.w	r6, [r7, #755]	; 0x2f3
    1042:	f897 52f4 	ldrb.w	r5, [r7, #756]	; 0x2f4
    1046:	f8a2 42ec 	strh.w	r4, [r2, #748]	; 0x2ec
    104a:	f8a2 02ee 	strh.w	r0, [r2, #750]	; 0x2ee
    104e:	f8a2 12f0 	strh.w	r1, [r2, #752]	; 0x2f0
    1052:	f897 02f6 	ldrb.w	r0, [r7, #758]	; 0x2f6
    1056:	f897 12f7 	ldrb.w	r1, [r7, #759]	; 0x2f7
    105a:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
    105e:	f897 42f5 	ldrb.w	r4, [r7, #757]	; 0x2f5
    1062:	f8b7 32f8 	ldrh.w	r3, [r7, #760]	; 0x2f8
    1066:	f882 62f3 	strb.w	r6, [r2, #755]	; 0x2f3
    106a:	f882 52f4 	strb.w	r5, [r2, #756]	; 0x2f4
    106e:	f882 02f6 	strb.w	r0, [r2, #758]	; 0x2f6
    1072:	f882 12f7 	strb.w	r1, [r2, #759]	; 0x2f7
    1076:	f8a2 32f8 	strh.w	r3, [r2, #760]	; 0x2f8
    107a:	f882 42f5 	strb.w	r4, [r2, #757]	; 0x2f5
    107e:	f8b7 42fa 	ldrh.w	r4, [r7, #762]	; 0x2fa
    1082:	f8b7 02fc 	ldrh.w	r0, [r7, #764]	; 0x2fc
    1086:	f8b7 12fe 	ldrh.w	r1, [r7, #766]	; 0x2fe
    108a:	f8b7 3300 	ldrh.w	r3, [r7, #768]	; 0x300
    108e:	f8b7 6302 	ldrh.w	r6, [r7, #770]	; 0x302
    1092:	f8b7 5304 	ldrh.w	r5, [r7, #772]	; 0x304
    1096:	f8a2 42fa 	strh.w	r4, [r2, #762]	; 0x2fa
    109a:	f8a2 02fc 	strh.w	r0, [r2, #764]	; 0x2fc
    109e:	f8b7 4306 	ldrh.w	r4, [r7, #774]	; 0x306
    10a2:	f8b7 0308 	ldrh.w	r0, [r7, #776]	; 0x308
    10a6:	f8a2 12fe 	strh.w	r1, [r2, #766]	; 0x2fe
    10aa:	f8a2 3300 	strh.w	r3, [r2, #768]	; 0x300
    10ae:	f8b7 130a 	ldrh.w	r1, [r7, #778]	; 0x30a
    10b2:	f8b7 330c 	ldrh.w	r3, [r7, #780]	; 0x30c
    10b6:	f8a2 6302 	strh.w	r6, [r2, #770]	; 0x302
    10ba:	f8a2 5304 	strh.w	r5, [r2, #772]	; 0x304
    10be:	f897 630e 	ldrb.w	r6, [r7, #782]	; 0x30e
    10c2:	f897 530f 	ldrb.w	r5, [r7, #783]	; 0x30f
    10c6:	f8a2 4306 	strh.w	r4, [r2, #774]	; 0x306
    10ca:	f8a2 0308 	strh.w	r0, [r2, #776]	; 0x308
    10ce:	f897 4310 	ldrb.w	r4, [r7, #784]	; 0x310
    10d2:	f8a2 130a 	strh.w	r1, [r2, #778]	; 0x30a
    10d6:	f8a2 330c 	strh.w	r3, [r2, #780]	; 0x30c
    10da:	f897 1312 	ldrb.w	r1, [r7, #786]	; 0x312
    10de:	f897 3313 	ldrb.w	r3, [r7, #787]	; 0x313
    10e2:	f897 0311 	ldrb.w	r0, [r7, #785]	; 0x311
    10e6:	f882 630e 	strb.w	r6, [r2, #782]	; 0x30e
    10ea:	f882 530f 	strb.w	r5, [r2, #783]	; 0x30f
    10ee:	f882 4310 	strb.w	r4, [r2, #784]	; 0x310
    10f2:	f882 1312 	strb.w	r1, [r2, #786]	; 0x312
    10f6:	f882 3313 	strb.w	r3, [r2, #787]	; 0x313
    10fa:	f882 0311 	strb.w	r0, [r2, #785]	; 0x311
    10fe:	f897 0314 	ldrb.w	r0, [r7, #788]	; 0x314
    1102:	f897 3315 	ldrb.w	r3, [r7, #789]	; 0x315
    1106:	f897 6316 	ldrb.w	r6, [r7, #790]	; 0x316
    110a:	f897 5317 	ldrb.w	r5, [r7, #791]	; 0x317
    110e:	f897 4318 	ldrb.w	r4, [r7, #792]	; 0x318
    1112:	f882 0314 	strb.w	r0, [r2, #788]	; 0x314
    1116:	f882 3315 	strb.w	r3, [r2, #789]	; 0x315
    111a:	f897 0319 	ldrb.w	r0, [r7, #793]	; 0x319
    111e:	f897 331a 	ldrb.w	r3, [r7, #794]	; 0x31a
    1122:	f882 6316 	strb.w	r6, [r2, #790]	; 0x316
    1126:	f882 5317 	strb.w	r5, [r2, #791]	; 0x317
    112a:	f882 4318 	strb.w	r4, [r2, #792]	; 0x318
    112e:	f882 0319 	strb.w	r0, [r2, #793]	; 0x319
    1132:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
    1136:	f897 631b 	ldrb.w	r6, [r7, #795]	; 0x31b
    113a:	f897 3325 	ldrb.w	r3, [r7, #805]	; 0x325
    113e:	f897 531c 	ldrb.w	r5, [r7, #796]	; 0x31c
    1142:	f8d7 4320 	ldr.w	r4, [r7, #800]	; 0x320
    1146:	f897 0324 	ldrb.w	r0, [r7, #804]	; 0x324
    114a:	492d      	ldr	r1, [pc, #180]	; (1200 <blending()+0x484>)
    114c:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
    1150:	f882 631b 	strb.w	r6, [r2, #795]	; 0x31b
    1154:	f882 531c 	strb.w	r5, [r2, #796]	; 0x31c
    1158:	f8c2 4320 	str.w	r4, [r2, #800]	; 0x320
    115c:	f882 0324 	strb.w	r0, [r2, #804]	; 0x324
    1160:	f502 734a 	add.w	r3, r2, #808	; 0x328
    1164:	f502 6283 	add.w	r2, r2, #1048	; 0x418
    1168:	f851 0f04 	ldr.w	r0, [r1, #4]!
    116c:	f843 0b04 	str.w	r0, [r3], #4
    1170:	4293      	cmp	r3, r2
    1172:	d1f9      	bne.n	1168 <blending()+0x3ec>
    1174:	4a23      	ldr	r2, [pc, #140]	; (1204 <blending()+0x488>)
    1176:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    117a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    117e:	f843 1b04 	str.w	r1, [r3], #4
    1182:	4283      	cmp	r3, r0
    1184:	d1f9      	bne.n	117a <blending()+0x3fe>
    1186:	4a20      	ldr	r2, [pc, #128]	; (1208 <blending()+0x48c>)
    1188:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    118c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1190:	f803 1b01 	strb.w	r1, [r3], #1
    1194:	4283      	cmp	r3, r0
    1196:	d1f9      	bne.n	118c <blending()+0x410>
    1198:	4a1c      	ldr	r2, [pc, #112]	; (120c <blending()+0x490>)
    119a:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    119e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    11a2:	f843 1b04 	str.w	r1, [r3], #4
    11a6:	4283      	cmp	r3, r0
    11a8:	d1f9      	bne.n	119e <blending()+0x422>
    11aa:	4a19      	ldr	r2, [pc, #100]	; (1210 <blending()+0x494>)
    11ac:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    11b0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    11b4:	f843 1b04 	str.w	r1, [r3], #4
    11b8:	4283      	cmp	r3, r0
    11ba:	4907      	ldr	r1, [pc, #28]	; (11d8 <blending()+0x45c>)
    11bc:	d1f8      	bne.n	11b0 <blending()+0x434>
    11be:	f897 3724 	ldrb.w	r3, [r7, #1828]	; 0x724
    11c2:	f881 3724 	strb.w	r3, [r1, #1828]	; 0x724
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
    11c6:	2300      	movs	r3, #0
    11c8:	f881 31d8 	strb.w	r3, [r1, #472]	; 0x1d8
	}
}
    11cc:	b005      	add	sp, #20
    11ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11d2:	bf00      	nop
    11d4:	1fff93ac 	.word	0x1fff93ac
    11d8:	1fff93fc 	.word	0x1fff93fc
    11dc:	1fff940f 	.word	0x1fff940f
    11e0:	1fff8c87 	.word	0x1fff8c87
    11e4:	1fff8e4d 	.word	0x1fff8e4d
    11e8:	1fff95d5 	.word	0x1fff95d5
    11ec:	1fff8e7d 	.word	0x1fff8e7d
    11f0:	1fff9605 	.word	0x1fff9605
    11f4:	1fff964c 	.word	0x1fff964c
    11f8:	1fff8ec3 	.word	0x1fff8ec3
    11fc:	1fff8f0e 	.word	0x1fff8f0e
    1200:	1fff8f98 	.word	0x1fff8f98
    1204:	1fff9088 	.word	0x1fff9088
    1208:	1fff917b 	.word	0x1fff917b
    120c:	1fff91b4 	.word	0x1fff91b4
    1210:	1fff92a4 	.word	0x1fff92a4
    1214:	1fff8c74 	.word	0x1fff8c74


// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1218:	4630      	mov	r0, r6
    121a:	f005 fa95 	bl	6748 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    121e:	4d0e      	ldr	r5, [pc, #56]	; (1258 <blending()+0x4dc>)
    1220:	b960      	cbnz	r0, 123c <blending()+0x4c0>
    1222:	4c0e      	ldr	r4, [pc, #56]	; (125c <blending()+0x4e0>)
    1224:	682b      	ldr	r3, [r5, #0]
    1226:	9303      	str	r3, [sp, #12]
    1228:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    122c:	9b03      	ldr	r3, [sp, #12]
    122e:	1a5b      	subs	r3, r3, r1
    1230:	4293      	cmp	r3, r2
    1232:	f4bf ade7 	bcs.w	e04 <blending()+0x88>
    1236:	f899 3000 	ldrb.w	r3, [r9]
    123a:	e5ed      	b.n	e18 <blending()+0x9c>
    123c:	4b08      	ldr	r3, [pc, #32]	; (1260 <blending()+0x4e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    123e:	682a      	ldr	r2, [r5, #0]
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	4c06      	ldr	r4, [pc, #24]	; (125c <blending()+0x4e0>)
    1244:	9201      	str	r2, [sp, #4]
	return ret;
    1246:	9a01      	ldr	r2, [sp, #4]
    1248:	6022      	str	r2, [r4, #0]
    124a:	009b      	lsls	r3, r3, #2
    124c:	4630      	mov	r0, r6
    124e:	6063      	str	r3, [r4, #4]
    1250:	f005 fa80 	bl	6754 <__cxa_guard_release>
    1254:	e7e6      	b.n	1224 <blending()+0x4a8>
    1256:	bf00      	nop
    1258:	1fff9d60 	.word	0x1fff9d60
    125c:	1fff93b0 	.word	0x1fff93b0
    1260:	1fff93ee 	.word	0x1fff93ee

00001264 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1264:	b510      	push	{r4, lr}
    1266:	2101      	movs	r1, #1
    1268:	4604      	mov	r4, r0
    126a:	4894      	ldr	r0, [pc, #592]	; (14bc <print_palette(unsigned char)+0x258>)
    126c:	f006 fb04 	bl	7878 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1270:	4621      	mov	r1, r4
    1272:	2300      	movs	r3, #0
    1274:	220a      	movs	r2, #10
    1276:	4892      	ldr	r0, [pc, #584]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1278:	f006 fd12 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    127c:	2102      	movs	r1, #2
    127e:	4891      	ldr	r0, [pc, #580]	; (14c4 <print_palette(unsigned char)+0x260>)
    1280:	f006 fafa 	bl	7878 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1284:	2c5c      	cmp	r4, #92	; 0x5c
    1286:	f200 8281 	bhi.w	178c <print_palette(unsigned char)+0x528>
    128a:	e8df f014 	tbh	[pc, r4, lsl #1]
    128e:	027a      	.short	0x027a
    1290:	02700275 	.word	0x02700275
    1294:	0266026b 	.word	0x0266026b
    1298:	025c0261 	.word	0x025c0261
    129c:	02520257 	.word	0x02520257
    12a0:	0248024d 	.word	0x0248024d
    12a4:	023e0243 	.word	0x023e0243
    12a8:	02340239 	.word	0x02340239
    12ac:	022a022f 	.word	0x022a022f
    12b0:	02200225 	.word	0x02200225
    12b4:	0216021b 	.word	0x0216021b
    12b8:	020c0211 	.word	0x020c0211
    12bc:	02020207 	.word	0x02020207
    12c0:	01f801fd 	.word	0x01f801fd
    12c4:	01ee01f3 	.word	0x01ee01f3
    12c8:	01e401e9 	.word	0x01e401e9
    12cc:	01da01df 	.word	0x01da01df
    12d0:	01d001d5 	.word	0x01d001d5
    12d4:	01c601cb 	.word	0x01c601cb
    12d8:	01bc01c1 	.word	0x01bc01c1
    12dc:	01b201b7 	.word	0x01b201b7
    12e0:	01a801ad 	.word	0x01a801ad
    12e4:	019e01a3 	.word	0x019e01a3
    12e8:	01940199 	.word	0x01940199
    12ec:	018a018f 	.word	0x018a018f
    12f0:	01800185 	.word	0x01800185
    12f4:	0176017b 	.word	0x0176017b
    12f8:	016c0171 	.word	0x016c0171
    12fc:	01110167 	.word	0x01110167
    1300:	0107010c 	.word	0x0107010c
    1304:	00fd0102 	.word	0x00fd0102
    1308:	00f300f8 	.word	0x00f300f8
    130c:	00e900ee 	.word	0x00e900ee
    1310:	00df00e4 	.word	0x00df00e4
    1314:	00d500da 	.word	0x00d500da
    1318:	00cb00d0 	.word	0x00cb00d0
    131c:	00c100c6 	.word	0x00c100c6
    1320:	00b700bc 	.word	0x00b700bc
    1324:	00ad00b2 	.word	0x00ad00b2
    1328:	00a300a8 	.word	0x00a300a8
    132c:	0099009e 	.word	0x0099009e
    1330:	008f0094 	.word	0x008f0094
    1334:	0085008a 	.word	0x0085008a
    1338:	007b0080 	.word	0x007b0080
    133c:	00710076 	.word	0x00710076
    1340:	0067006c 	.word	0x0067006c
    1344:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    1348:	495f      	ldr	r1, [pc, #380]	; (14c8 <print_palette(unsigned char)+0x264>)
    134a:	485d      	ldr	r0, [pc, #372]	; (14c0 <print_palette(unsigned char)+0x25c>)
    134c:	f7ff fa0e 	bl	76c <Print::println(char const*)>
		break;
    1350:	bd10      	pop	{r4, pc}
	case 90:
		Serial.println("purplefly_gp");
		break;

	case 91:
		Serial.println("rainbow2_gp");
    1352:	495e      	ldr	r1, [pc, #376]	; (14cc <print_palette(unsigned char)+0x268>)
    1354:	485a      	ldr	r0, [pc, #360]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1356:	f7ff fa09 	bl	76c <Print::println(char const*)>
		break;
    135a:	bd10      	pop	{r4, pc}
	case 89:
		Serial.println("blue_fire_gp");
		break;

	case 90:
		Serial.println("purplefly_gp");
    135c:	495c      	ldr	r1, [pc, #368]	; (14d0 <print_palette(unsigned char)+0x26c>)
    135e:	4858      	ldr	r0, [pc, #352]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1360:	f7ff fa04 	bl	76c <Print::println(char const*)>
		break;
    1364:	bd10      	pop	{r4, pc}
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    1366:	495b      	ldr	r1, [pc, #364]	; (14d4 <print_palette(unsigned char)+0x270>)
    1368:	4855      	ldr	r0, [pc, #340]	; (14c0 <print_palette(unsigned char)+0x25c>)
    136a:	f7ff f9ff 	bl	76c <Print::println(char const*)>
		break;
    136e:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    1370:	4959      	ldr	r1, [pc, #356]	; (14d8 <print_palette(unsigned char)+0x274>)
    1372:	4853      	ldr	r0, [pc, #332]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1374:	f7ff f9fa 	bl	76c <Print::println(char const*)>
		break;
    1378:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    137a:	4958      	ldr	r1, [pc, #352]	; (14dc <print_palette(unsigned char)+0x278>)
    137c:	4850      	ldr	r0, [pc, #320]	; (14c0 <print_palette(unsigned char)+0x25c>)
    137e:	f7ff f9f5 	bl	76c <Print::println(char const*)>
		break;
    1382:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    1384:	4956      	ldr	r1, [pc, #344]	; (14e0 <print_palette(unsigned char)+0x27c>)
    1386:	484e      	ldr	r0, [pc, #312]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1388:	f7ff f9f0 	bl	76c <Print::println(char const*)>
		break;
    138c:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    138e:	4955      	ldr	r1, [pc, #340]	; (14e4 <print_palette(unsigned char)+0x280>)
    1390:	484b      	ldr	r0, [pc, #300]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1392:	f7ff f9eb 	bl	76c <Print::println(char const*)>
		break;
    1396:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    1398:	4953      	ldr	r1, [pc, #332]	; (14e8 <print_palette(unsigned char)+0x284>)
    139a:	4849      	ldr	r0, [pc, #292]	; (14c0 <print_palette(unsigned char)+0x25c>)
    139c:	f7ff f9e6 	bl	76c <Print::println(char const*)>
		break;
    13a0:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    13a2:	4952      	ldr	r1, [pc, #328]	; (14ec <print_palette(unsigned char)+0x288>)
    13a4:	4846      	ldr	r0, [pc, #280]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13a6:	f7ff f9e1 	bl	76c <Print::println(char const*)>
		break;
    13aa:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    13ac:	4950      	ldr	r1, [pc, #320]	; (14f0 <print_palette(unsigned char)+0x28c>)
    13ae:	4844      	ldr	r0, [pc, #272]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13b0:	f7ff f9dc 	bl	76c <Print::println(char const*)>
		break;
    13b4:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    13b6:	494f      	ldr	r1, [pc, #316]	; (14f4 <print_palette(unsigned char)+0x290>)
    13b8:	4841      	ldr	r0, [pc, #260]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13ba:	f7ff f9d7 	bl	76c <Print::println(char const*)>
		break;
    13be:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    13c0:	494d      	ldr	r1, [pc, #308]	; (14f8 <print_palette(unsigned char)+0x294>)
    13c2:	483f      	ldr	r0, [pc, #252]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13c4:	f7ff f9d2 	bl	76c <Print::println(char const*)>
		break;
    13c8:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    13ca:	494c      	ldr	r1, [pc, #304]	; (14fc <print_palette(unsigned char)+0x298>)
    13cc:	483c      	ldr	r0, [pc, #240]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13ce:	f7ff f9cd 	bl	76c <Print::println(char const*)>
		break;
    13d2:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    13d4:	494a      	ldr	r1, [pc, #296]	; (1500 <print_palette(unsigned char)+0x29c>)
    13d6:	483a      	ldr	r0, [pc, #232]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13d8:	f7ff f9c8 	bl	76c <Print::println(char const*)>
		break;
    13dc:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    13de:	4949      	ldr	r1, [pc, #292]	; (1504 <print_palette(unsigned char)+0x2a0>)
    13e0:	4837      	ldr	r0, [pc, #220]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13e2:	f7ff f9c3 	bl	76c <Print::println(char const*)>
		break;
    13e6:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    13e8:	4947      	ldr	r1, [pc, #284]	; (1508 <print_palette(unsigned char)+0x2a4>)
    13ea:	4835      	ldr	r0, [pc, #212]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13ec:	f7ff f9be 	bl	76c <Print::println(char const*)>
		break;
    13f0:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    13f2:	4946      	ldr	r1, [pc, #280]	; (150c <print_palette(unsigned char)+0x2a8>)
    13f4:	4832      	ldr	r0, [pc, #200]	; (14c0 <print_palette(unsigned char)+0x25c>)
    13f6:	f7ff f9b9 	bl	76c <Print::println(char const*)>
		break;
    13fa:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    13fc:	4944      	ldr	r1, [pc, #272]	; (1510 <print_palette(unsigned char)+0x2ac>)
    13fe:	4830      	ldr	r0, [pc, #192]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1400:	f7ff f9b4 	bl	76c <Print::println(char const*)>
		break;
    1404:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    1406:	4943      	ldr	r1, [pc, #268]	; (1514 <print_palette(unsigned char)+0x2b0>)
    1408:	482d      	ldr	r0, [pc, #180]	; (14c0 <print_palette(unsigned char)+0x25c>)
    140a:	f7ff f9af 	bl	76c <Print::println(char const*)>
		break;
    140e:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    1410:	4941      	ldr	r1, [pc, #260]	; (1518 <print_palette(unsigned char)+0x2b4>)
    1412:	482b      	ldr	r0, [pc, #172]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1414:	f7ff f9aa 	bl	76c <Print::println(char const*)>
		break;
    1418:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    141a:	4940      	ldr	r1, [pc, #256]	; (151c <print_palette(unsigned char)+0x2b8>)
    141c:	4828      	ldr	r0, [pc, #160]	; (14c0 <print_palette(unsigned char)+0x25c>)
    141e:	f7ff f9a5 	bl	76c <Print::println(char const*)>
		break;
    1422:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    1424:	493e      	ldr	r1, [pc, #248]	; (1520 <print_palette(unsigned char)+0x2bc>)
    1426:	4826      	ldr	r0, [pc, #152]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1428:	f7ff f9a0 	bl	76c <Print::println(char const*)>
		break;
    142c:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    142e:	493d      	ldr	r1, [pc, #244]	; (1524 <print_palette(unsigned char)+0x2c0>)
    1430:	4823      	ldr	r0, [pc, #140]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1432:	f7ff f99b 	bl	76c <Print::println(char const*)>
		break;
    1436:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    1438:	493b      	ldr	r1, [pc, #236]	; (1528 <print_palette(unsigned char)+0x2c4>)
    143a:	4821      	ldr	r0, [pc, #132]	; (14c0 <print_palette(unsigned char)+0x25c>)
    143c:	f7ff f996 	bl	76c <Print::println(char const*)>
		break;
    1440:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    1442:	493a      	ldr	r1, [pc, #232]	; (152c <print_palette(unsigned char)+0x2c8>)
    1444:	481e      	ldr	r0, [pc, #120]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1446:	f7ff f991 	bl	76c <Print::println(char const*)>
		break;
    144a:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    144c:	4938      	ldr	r1, [pc, #224]	; (1530 <print_palette(unsigned char)+0x2cc>)
    144e:	481c      	ldr	r0, [pc, #112]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1450:	f7ff f98c 	bl	76c <Print::println(char const*)>
		break;
    1454:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    1456:	4937      	ldr	r1, [pc, #220]	; (1534 <print_palette(unsigned char)+0x2d0>)
    1458:	4819      	ldr	r0, [pc, #100]	; (14c0 <print_palette(unsigned char)+0x25c>)
    145a:	f7ff f987 	bl	76c <Print::println(char const*)>
		break;
    145e:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    1460:	4935      	ldr	r1, [pc, #212]	; (1538 <print_palette(unsigned char)+0x2d4>)
    1462:	4817      	ldr	r0, [pc, #92]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1464:	f7ff f982 	bl	76c <Print::println(char const*)>
		break;
    1468:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    146a:	4934      	ldr	r1, [pc, #208]	; (153c <print_palette(unsigned char)+0x2d8>)
    146c:	4814      	ldr	r0, [pc, #80]	; (14c0 <print_palette(unsigned char)+0x25c>)
    146e:	f7ff f97d 	bl	76c <Print::println(char const*)>
		break;
    1472:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    1474:	4932      	ldr	r1, [pc, #200]	; (1540 <print_palette(unsigned char)+0x2dc>)
    1476:	4812      	ldr	r0, [pc, #72]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1478:	f7ff f978 	bl	76c <Print::println(char const*)>
		break;
    147c:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    147e:	4931      	ldr	r1, [pc, #196]	; (1544 <print_palette(unsigned char)+0x2e0>)
    1480:	480f      	ldr	r0, [pc, #60]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1482:	f7ff f973 	bl	76c <Print::println(char const*)>
		break;
    1486:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    1488:	492f      	ldr	r1, [pc, #188]	; (1548 <print_palette(unsigned char)+0x2e4>)
    148a:	480d      	ldr	r0, [pc, #52]	; (14c0 <print_palette(unsigned char)+0x25c>)
    148c:	f7ff f96e 	bl	76c <Print::println(char const*)>
		break;
    1490:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    1492:	492e      	ldr	r1, [pc, #184]	; (154c <print_palette(unsigned char)+0x2e8>)
    1494:	480a      	ldr	r0, [pc, #40]	; (14c0 <print_palette(unsigned char)+0x25c>)
    1496:	f7ff f969 	bl	76c <Print::println(char const*)>
		break;
    149a:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    149c:	492c      	ldr	r1, [pc, #176]	; (1550 <print_palette(unsigned char)+0x2ec>)
    149e:	4808      	ldr	r0, [pc, #32]	; (14c0 <print_palette(unsigned char)+0x25c>)
    14a0:	f7ff f964 	bl	76c <Print::println(char const*)>
		break;
    14a4:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    14a6:	492b      	ldr	r1, [pc, #172]	; (1554 <print_palette(unsigned char)+0x2f0>)
    14a8:	4805      	ldr	r0, [pc, #20]	; (14c0 <print_palette(unsigned char)+0x25c>)
    14aa:	f7ff f95f 	bl	76c <Print::println(char const*)>
		break;
    14ae:	bd10      	pop	{r4, pc}
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    14b0:	4929      	ldr	r1, [pc, #164]	; (1558 <print_palette(unsigned char)+0x2f4>)
    14b2:	4803      	ldr	r0, [pc, #12]	; (14c0 <print_palette(unsigned char)+0x25c>)
    14b4:	f7ff f95a 	bl	76c <Print::println(char const*)>
		break;
    14b8:	bd10      	pop	{r4, pc}
    14ba:	bf00      	nop
    14bc:	000099e4 	.word	0x000099e4
    14c0:	1fff874c 	.word	0x1fff874c
    14c4:	000099e8 	.word	0x000099e8
    14c8:	00009f7c 	.word	0x00009f7c
    14cc:	00009f70 	.word	0x00009f70
    14d0:	00009f60 	.word	0x00009f60
    14d4:	00009f50 	.word	0x00009f50
    14d8:	00009f3c 	.word	0x00009f3c
    14dc:	00009f24 	.word	0x00009f24
    14e0:	00009f0c 	.word	0x00009f0c
    14e4:	00009efc 	.word	0x00009efc
    14e8:	00009ee4 	.word	0x00009ee4
    14ec:	00009ed8 	.word	0x00009ed8
    14f0:	00009ecc 	.word	0x00009ecc
    14f4:	00009eb4 	.word	0x00009eb4
    14f8:	00009ea8 	.word	0x00009ea8
    14fc:	00009e9c 	.word	0x00009e9c
    1500:	00009e90 	.word	0x00009e90
    1504:	00009e84 	.word	0x00009e84
    1508:	00009e74 	.word	0x00009e74
    150c:	00009e68 	.word	0x00009e68
    1510:	00009e54 	.word	0x00009e54
    1514:	00009e48 	.word	0x00009e48
    1518:	00009e38 	.word	0x00009e38
    151c:	00009e2c 	.word	0x00009e2c
    1520:	00009e20 	.word	0x00009e20
    1524:	00009e18 	.word	0x00009e18
    1528:	00009e04 	.word	0x00009e04
    152c:	00009df4 	.word	0x00009df4
    1530:	00009de0 	.word	0x00009de0
    1534:	00009dd4 	.word	0x00009dd4
    1538:	00009dc8 	.word	0x00009dc8
    153c:	00009dbc 	.word	0x00009dbc
    1540:	00009dac 	.word	0x00009dac
    1544:	00009d98 	.word	0x00009d98
    1548:	00009d8c 	.word	0x00009d8c
    154c:	00009d7c 	.word	0x00009d7c
    1550:	00009d70 	.word	0x00009d70
    1554:	00009d60 	.word	0x00009d60
    1558:	00009d54 	.word	0x00009d54
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    155c:	498e      	ldr	r1, [pc, #568]	; (1798 <print_palette(unsigned char)+0x534>)
    155e:	488f      	ldr	r0, [pc, #572]	; (179c <print_palette(unsigned char)+0x538>)
    1560:	f7ff f904 	bl	76c <Print::println(char const*)>
		break;
    1564:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    1566:	498e      	ldr	r1, [pc, #568]	; (17a0 <print_palette(unsigned char)+0x53c>)
    1568:	488c      	ldr	r0, [pc, #560]	; (179c <print_palette(unsigned char)+0x538>)
    156a:	f7ff f8ff 	bl	76c <Print::println(char const*)>
		break;
    156e:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1570:	498c      	ldr	r1, [pc, #560]	; (17a4 <print_palette(unsigned char)+0x540>)
    1572:	488a      	ldr	r0, [pc, #552]	; (179c <print_palette(unsigned char)+0x538>)
    1574:	f7ff f8fa 	bl	76c <Print::println(char const*)>
		break;
    1578:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    157a:	498b      	ldr	r1, [pc, #556]	; (17a8 <print_palette(unsigned char)+0x544>)
    157c:	4887      	ldr	r0, [pc, #540]	; (179c <print_palette(unsigned char)+0x538>)
    157e:	f7ff f8f5 	bl	76c <Print::println(char const*)>
		break;
    1582:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    1584:	4989      	ldr	r1, [pc, #548]	; (17ac <print_palette(unsigned char)+0x548>)
    1586:	4885      	ldr	r0, [pc, #532]	; (179c <print_palette(unsigned char)+0x538>)
    1588:	f7ff f8f0 	bl	76c <Print::println(char const*)>
		break;
    158c:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    158e:	4988      	ldr	r1, [pc, #544]	; (17b0 <print_palette(unsigned char)+0x54c>)
    1590:	4882      	ldr	r0, [pc, #520]	; (179c <print_palette(unsigned char)+0x538>)
    1592:	f7ff f8eb 	bl	76c <Print::println(char const*)>
		break;
    1596:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    1598:	4986      	ldr	r1, [pc, #536]	; (17b4 <print_palette(unsigned char)+0x550>)
    159a:	4880      	ldr	r0, [pc, #512]	; (179c <print_palette(unsigned char)+0x538>)
    159c:	f7ff f8e6 	bl	76c <Print::println(char const*)>
		break;
    15a0:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    15a2:	4985      	ldr	r1, [pc, #532]	; (17b8 <print_palette(unsigned char)+0x554>)
    15a4:	487d      	ldr	r0, [pc, #500]	; (179c <print_palette(unsigned char)+0x538>)
    15a6:	f7ff f8e1 	bl	76c <Print::println(char const*)>
		break;
    15aa:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    15ac:	4983      	ldr	r1, [pc, #524]	; (17bc <print_palette(unsigned char)+0x558>)
    15ae:	487b      	ldr	r0, [pc, #492]	; (179c <print_palette(unsigned char)+0x538>)
    15b0:	f7ff f8dc 	bl	76c <Print::println(char const*)>
		break;
    15b4:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    15b6:	4982      	ldr	r1, [pc, #520]	; (17c0 <print_palette(unsigned char)+0x55c>)
    15b8:	4878      	ldr	r0, [pc, #480]	; (179c <print_palette(unsigned char)+0x538>)
    15ba:	f7ff f8d7 	bl	76c <Print::println(char const*)>
		break;
    15be:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    15c0:	4980      	ldr	r1, [pc, #512]	; (17c4 <print_palette(unsigned char)+0x560>)
    15c2:	4876      	ldr	r0, [pc, #472]	; (179c <print_palette(unsigned char)+0x538>)
    15c4:	f7ff f8d2 	bl	76c <Print::println(char const*)>
		break;
    15c8:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    15ca:	497f      	ldr	r1, [pc, #508]	; (17c8 <print_palette(unsigned char)+0x564>)
    15cc:	4873      	ldr	r0, [pc, #460]	; (179c <print_palette(unsigned char)+0x538>)
    15ce:	f7ff f8cd 	bl	76c <Print::println(char const*)>
		break;
    15d2:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    15d4:	497d      	ldr	r1, [pc, #500]	; (17cc <print_palette(unsigned char)+0x568>)
    15d6:	4871      	ldr	r0, [pc, #452]	; (179c <print_palette(unsigned char)+0x538>)
    15d8:	f7ff f8c8 	bl	76c <Print::println(char const*)>
		break;
    15dc:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    15de:	497c      	ldr	r1, [pc, #496]	; (17d0 <print_palette(unsigned char)+0x56c>)
    15e0:	486e      	ldr	r0, [pc, #440]	; (179c <print_palette(unsigned char)+0x538>)
    15e2:	f7ff f8c3 	bl	76c <Print::println(char const*)>
		break;
    15e6:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    15e8:	497a      	ldr	r1, [pc, #488]	; (17d4 <print_palette(unsigned char)+0x570>)
    15ea:	486c      	ldr	r0, [pc, #432]	; (179c <print_palette(unsigned char)+0x538>)
    15ec:	f7ff f8be 	bl	76c <Print::println(char const*)>
		break;
    15f0:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    15f2:	4979      	ldr	r1, [pc, #484]	; (17d8 <print_palette(unsigned char)+0x574>)
    15f4:	4869      	ldr	r0, [pc, #420]	; (179c <print_palette(unsigned char)+0x538>)
    15f6:	f7ff f8b9 	bl	76c <Print::println(char const*)>
		break;
    15fa:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    15fc:	4977      	ldr	r1, [pc, #476]	; (17dc <print_palette(unsigned char)+0x578>)
    15fe:	4867      	ldr	r0, [pc, #412]	; (179c <print_palette(unsigned char)+0x538>)
    1600:	f7ff f8b4 	bl	76c <Print::println(char const*)>
		break;
    1604:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    1606:	4976      	ldr	r1, [pc, #472]	; (17e0 <print_palette(unsigned char)+0x57c>)
    1608:	4864      	ldr	r0, [pc, #400]	; (179c <print_palette(unsigned char)+0x538>)
    160a:	f7ff f8af 	bl	76c <Print::println(char const*)>
		break;
    160e:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    1610:	4974      	ldr	r1, [pc, #464]	; (17e4 <print_palette(unsigned char)+0x580>)
    1612:	4862      	ldr	r0, [pc, #392]	; (179c <print_palette(unsigned char)+0x538>)
    1614:	f7ff f8aa 	bl	76c <Print::println(char const*)>
		break;
    1618:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    161a:	4973      	ldr	r1, [pc, #460]	; (17e8 <print_palette(unsigned char)+0x584>)
    161c:	485f      	ldr	r0, [pc, #380]	; (179c <print_palette(unsigned char)+0x538>)
    161e:	f7ff f8a5 	bl	76c <Print::println(char const*)>
		break;
    1622:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    1624:	4971      	ldr	r1, [pc, #452]	; (17ec <print_palette(unsigned char)+0x588>)
    1626:	485d      	ldr	r0, [pc, #372]	; (179c <print_palette(unsigned char)+0x538>)
    1628:	f7ff f8a0 	bl	76c <Print::println(char const*)>
		break;
    162c:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    162e:	4970      	ldr	r1, [pc, #448]	; (17f0 <print_palette(unsigned char)+0x58c>)
    1630:	485a      	ldr	r0, [pc, #360]	; (179c <print_palette(unsigned char)+0x538>)
    1632:	f7ff f89b 	bl	76c <Print::println(char const*)>
		break;
    1636:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    1638:	496e      	ldr	r1, [pc, #440]	; (17f4 <print_palette(unsigned char)+0x590>)
    163a:	4858      	ldr	r0, [pc, #352]	; (179c <print_palette(unsigned char)+0x538>)
    163c:	f7ff f896 	bl	76c <Print::println(char const*)>
		break;
    1640:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    1642:	496d      	ldr	r1, [pc, #436]	; (17f8 <print_palette(unsigned char)+0x594>)
    1644:	4855      	ldr	r0, [pc, #340]	; (179c <print_palette(unsigned char)+0x538>)
    1646:	f7ff f891 	bl	76c <Print::println(char const*)>
		break;
    164a:	bd10      	pop	{r4, pc}
	case 30:
		Serial.println("bhw2_23_gp");
		break;

	case 31:
		Serial.println("bhw2_22_gp");
    164c:	496b      	ldr	r1, [pc, #428]	; (17fc <print_palette(unsigned char)+0x598>)
    164e:	4853      	ldr	r0, [pc, #332]	; (179c <print_palette(unsigned char)+0x538>)
    1650:	f7ff f88c 	bl	76c <Print::println(char const*)>
		break;
    1654:	bd10      	pop	{r4, pc}
	case 29:
		Serial.println("bhw1_28_gp");
		break;

	case 30:
		Serial.println("bhw2_23_gp");
    1656:	496a      	ldr	r1, [pc, #424]	; (1800 <print_palette(unsigned char)+0x59c>)
    1658:	4850      	ldr	r0, [pc, #320]	; (179c <print_palette(unsigned char)+0x538>)
    165a:	f7ff f887 	bl	76c <Print::println(char const*)>
		break;
    165e:	bd10      	pop	{r4, pc}
	case 28:
		Serial.println("bhw1_26_gp");
		break;

	case 29:
		Serial.println("bhw1_28_gp");
    1660:	4968      	ldr	r1, [pc, #416]	; (1804 <print_palette(unsigned char)+0x5a0>)
    1662:	484e      	ldr	r0, [pc, #312]	; (179c <print_palette(unsigned char)+0x538>)
    1664:	f7ff f882 	bl	76c <Print::println(char const*)>
		break;
    1668:	bd10      	pop	{r4, pc}
	case 27:
		Serial.println("bhw1_greeny_gp");
		break;

	case 28:
		Serial.println("bhw1_26_gp");
    166a:	4967      	ldr	r1, [pc, #412]	; (1808 <print_palette(unsigned char)+0x5a4>)
    166c:	484b      	ldr	r0, [pc, #300]	; (179c <print_palette(unsigned char)+0x538>)
    166e:	f7ff f87d 	bl	76c <Print::println(char const*)>
		break;
    1672:	bd10      	pop	{r4, pc}
	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
		break;

	case 27:
		Serial.println("bhw1_greeny_gp");
    1674:	4965      	ldr	r1, [pc, #404]	; (180c <print_palette(unsigned char)+0x5a8>)
    1676:	4849      	ldr	r0, [pc, #292]	; (179c <print_palette(unsigned char)+0x538>)
    1678:	f7ff f878 	bl	76c <Print::println(char const*)>
		break;
    167c:	bd10      	pop	{r4, pc}
	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
		break;

	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
    167e:	4964      	ldr	r1, [pc, #400]	; (1810 <print_palette(unsigned char)+0x5ac>)
    1680:	4846      	ldr	r0, [pc, #280]	; (179c <print_palette(unsigned char)+0x538>)
    1682:	f7ff f873 	bl	76c <Print::println(char const*)>
		break;
    1686:	bd10      	pop	{r4, pc}
	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
		break;

	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
    1688:	4962      	ldr	r1, [pc, #392]	; (1814 <print_palette(unsigned char)+0x5b0>)
    168a:	4844      	ldr	r0, [pc, #272]	; (179c <print_palette(unsigned char)+0x538>)
    168c:	f7ff f86e 	bl	76c <Print::println(char const*)>
		break;
    1690:	bd10      	pop	{r4, pc}
	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
		break;

	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
    1692:	4961      	ldr	r1, [pc, #388]	; (1818 <print_palette(unsigned char)+0x5b4>)
    1694:	4841      	ldr	r0, [pc, #260]	; (179c <print_palette(unsigned char)+0x538>)
    1696:	f7ff f869 	bl	76c <Print::println(char const*)>
		break;
    169a:	bd10      	pop	{r4, pc}
	case 22:
		Serial.println("es_autumn_19_gp");
		break;

	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
    169c:	495f      	ldr	r1, [pc, #380]	; (181c <print_palette(unsigned char)+0x5b8>)
    169e:	483f      	ldr	r0, [pc, #252]	; (179c <print_palette(unsigned char)+0x538>)
    16a0:	f7ff f864 	bl	76c <Print::println(char const*)>
		break;
    16a4:	bd10      	pop	{r4, pc}
	case 21:
		Serial.println("Sunset_Real_gp");
		break;

	case 22:
		Serial.println("es_autumn_19_gp");
    16a6:	495e      	ldr	r1, [pc, #376]	; (1820 <print_palette(unsigned char)+0x5bc>)
    16a8:	483c      	ldr	r0, [pc, #240]	; (179c <print_palette(unsigned char)+0x538>)
    16aa:	f7ff f85f 	bl	76c <Print::println(char const*)>
		break;
    16ae:	bd10      	pop	{r4, pc}
	case 20:
		Serial.println("Magenta_Evening_gp");
		break;

	case 21:
		Serial.println("Sunset_Real_gp");
    16b0:	495c      	ldr	r1, [pc, #368]	; (1824 <print_palette(unsigned char)+0x5c0>)
    16b2:	483a      	ldr	r0, [pc, #232]	; (179c <print_palette(unsigned char)+0x538>)
    16b4:	f7ff f85a 	bl	76c <Print::println(char const*)>
		break;
    16b8:	bd10      	pop	{r4, pc}
	case 19:
		Serial.println("Colorfull_gp");
		break;

	case 20:
		Serial.println("Magenta_Evening_gp");
    16ba:	495b      	ldr	r1, [pc, #364]	; (1828 <print_palette(unsigned char)+0x5c4>)
    16bc:	4837      	ldr	r0, [pc, #220]	; (179c <print_palette(unsigned char)+0x538>)
    16be:	f7ff f855 	bl	76c <Print::println(char const*)>
		break;
    16c2:	bd10      	pop	{r4, pc}
	case 18:
		Serial.println("fire_gp");
		break;

	case 19:
		Serial.println("Colorfull_gp");
    16c4:	4959      	ldr	r1, [pc, #356]	; (182c <print_palette(unsigned char)+0x5c8>)
    16c6:	4835      	ldr	r0, [pc, #212]	; (179c <print_palette(unsigned char)+0x538>)
    16c8:	f7ff f850 	bl	76c <Print::println(char const*)>
		break;
    16cc:	bd10      	pop	{r4, pc}
	case 17:
		Serial.println("lava_gp");
		break;

	case 18:
		Serial.println("fire_gp");
    16ce:	4958      	ldr	r1, [pc, #352]	; (1830 <print_palette(unsigned char)+0x5cc>)
    16d0:	4832      	ldr	r0, [pc, #200]	; (179c <print_palette(unsigned char)+0x538>)
    16d2:	f7ff f84b 	bl	76c <Print::println(char const*)>
		break;
    16d6:	bd10      	pop	{r4, pc}
	case 16:
		Serial.println("es_emerald_dragon_08_gp");
		break;

	case 17:
		Serial.println("lava_gp");
    16d8:	4956      	ldr	r1, [pc, #344]	; (1834 <print_palette(unsigned char)+0x5d0>)
    16da:	4830      	ldr	r0, [pc, #192]	; (179c <print_palette(unsigned char)+0x538>)
    16dc:	f7ff f846 	bl	76c <Print::println(char const*)>
		break;
    16e0:	bd10      	pop	{r4, pc}
	case 15:
		Serial.println("Fuschia_7_gp");
		break;

	case 16:
		Serial.println("es_emerald_dragon_08_gp");
    16e2:	4955      	ldr	r1, [pc, #340]	; (1838 <print_palette(unsigned char)+0x5d4>)
    16e4:	482d      	ldr	r0, [pc, #180]	; (179c <print_palette(unsigned char)+0x538>)
    16e6:	f7ff f841 	bl	76c <Print::println(char const*)>
		break;
    16ea:	bd10      	pop	{r4, pc}
	case 14:
		Serial.println("ib15_gp");
		break;

	case 15:
		Serial.println("Fuschia_7_gp");
    16ec:	4953      	ldr	r1, [pc, #332]	; (183c <print_palette(unsigned char)+0x5d8>)
    16ee:	482b      	ldr	r0, [pc, #172]	; (179c <print_palette(unsigned char)+0x538>)
    16f0:	f7ff f83c 	bl	76c <Print::println(char const*)>
		break;
    16f4:	bd10      	pop	{r4, pc}
	case 13:
		Serial.println("GMT_drywet_gp");
		break;

	case 14:
		Serial.println("ib15_gp");
    16f6:	4952      	ldr	r1, [pc, #328]	; (1840 <print_palette(unsigned char)+0x5dc>)
    16f8:	4828      	ldr	r0, [pc, #160]	; (179c <print_palette(unsigned char)+0x538>)
    16fa:	f7ff f837 	bl	76c <Print::println(char const*)>
		break;
    16fe:	bd10      	pop	{r4, pc}
	case 12:
		Serial.println("gr64_hult_gp");
		break;

	case 13:
		Serial.println("GMT_drywet_gp");
    1700:	4950      	ldr	r1, [pc, #320]	; (1844 <print_palette(unsigned char)+0x5e0>)
    1702:	4826      	ldr	r0, [pc, #152]	; (179c <print_palette(unsigned char)+0x538>)
    1704:	f7ff f832 	bl	76c <Print::println(char const*)>
		break;
    1708:	bd10      	pop	{r4, pc}
	case 11:
		Serial.println("gr65_hult_gp");
		break;

	case 12:
		Serial.println("gr64_hult_gp");
    170a:	494f      	ldr	r1, [pc, #316]	; (1848 <print_palette(unsigned char)+0x5e4>)
    170c:	4823      	ldr	r0, [pc, #140]	; (179c <print_palette(unsigned char)+0x538>)
    170e:	f7ff f82d 	bl	76c <Print::println(char const*)>
		break;
    1712:	bd10      	pop	{r4, pc}
	case 10:
		Serial.println("rainbowsherbet_gp");
		break;

	case 11:
		Serial.println("gr65_hult_gp");
    1714:	494d      	ldr	r1, [pc, #308]	; (184c <print_palette(unsigned char)+0x5e8>)
    1716:	4821      	ldr	r0, [pc, #132]	; (179c <print_palette(unsigned char)+0x538>)
    1718:	f7ff f828 	bl	76c <Print::println(char const*)>
		break;
    171c:	bd10      	pop	{r4, pc}
	case 9:
		Serial.println("es_landscape_33_gp");
		break;

	case 10:
		Serial.println("rainbowsherbet_gp");
    171e:	494c      	ldr	r1, [pc, #304]	; (1850 <print_palette(unsigned char)+0x5ec>)
    1720:	481e      	ldr	r0, [pc, #120]	; (179c <print_palette(unsigned char)+0x538>)
    1722:	f7ff f823 	bl	76c <Print::println(char const*)>
		break;
    1726:	bd10      	pop	{r4, pc}
	case 8:
		Serial.println("es_landscape_64_gp");
		break;

	case 9:
		Serial.println("es_landscape_33_gp");
    1728:	494a      	ldr	r1, [pc, #296]	; (1854 <print_palette(unsigned char)+0x5f0>)
    172a:	481c      	ldr	r0, [pc, #112]	; (179c <print_palette(unsigned char)+0x538>)
    172c:	f7ff f81e 	bl	76c <Print::println(char const*)>
		break;
    1730:	bd10      	pop	{r4, pc}
	case 7:
		Serial.println("es_ocean_breeze_036_gp");
		break;

	case 8:
		Serial.println("es_landscape_64_gp");
    1732:	4949      	ldr	r1, [pc, #292]	; (1858 <print_palette(unsigned char)+0x5f4>)
    1734:	4819      	ldr	r0, [pc, #100]	; (179c <print_palette(unsigned char)+0x538>)
    1736:	f7ff f819 	bl	76c <Print::println(char const*)>
		break;
    173a:	bd10      	pop	{r4, pc}
	case 6:
		Serial.println("es_ocean_breeze_068_gp");
		break;

	case 7:
		Serial.println("es_ocean_breeze_036_gp");
    173c:	4947      	ldr	r1, [pc, #284]	; (185c <print_palette(unsigned char)+0x5f8>)
    173e:	4817      	ldr	r0, [pc, #92]	; (179c <print_palette(unsigned char)+0x538>)
    1740:	f7ff f814 	bl	76c <Print::println(char const*)>
		break;
    1744:	bd10      	pop	{r4, pc}
	case 5:
		Serial.println("Coral_reef_gp");
		break;

	case 6:
		Serial.println("es_ocean_breeze_068_gp");
    1746:	4946      	ldr	r1, [pc, #280]	; (1860 <print_palette(unsigned char)+0x5fc>)
    1748:	4814      	ldr	r0, [pc, #80]	; (179c <print_palette(unsigned char)+0x538>)
    174a:	f7ff f80f 	bl	76c <Print::println(char const*)>
		break;
    174e:	bd10      	pop	{r4, pc}
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    1750:	4944      	ldr	r1, [pc, #272]	; (1864 <print_palette(unsigned char)+0x600>)
    1752:	4812      	ldr	r0, [pc, #72]	; (179c <print_palette(unsigned char)+0x538>)
    1754:	f7ff f80a 	bl	76c <Print::println(char const*)>
		break;
    1758:	bd10      	pop	{r4, pc}
	case 3:
		Serial.println("es_pinksplash_08_gp");
		break;

	case 4:
		Serial.println("es_pinksplash_07_gp");
    175a:	4943      	ldr	r1, [pc, #268]	; (1868 <print_palette(unsigned char)+0x604>)
    175c:	480f      	ldr	r0, [pc, #60]	; (179c <print_palette(unsigned char)+0x538>)
    175e:	f7ff f805 	bl	76c <Print::println(char const*)>
		break;
    1762:	bd10      	pop	{r4, pc}
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    1764:	4941      	ldr	r1, [pc, #260]	; (186c <print_palette(unsigned char)+0x608>)
    1766:	480d      	ldr	r0, [pc, #52]	; (179c <print_palette(unsigned char)+0x538>)
    1768:	f7ff f800 	bl	76c <Print::println(char const*)>
		break;
    176c:	bd10      	pop	{r4, pc}
	case 1:
		Serial.println("rgi_15_gp");
		break;

	case 2:
		Serial.println("Analogous_1_gp");
    176e:	4940      	ldr	r1, [pc, #256]	; (1870 <print_palette(unsigned char)+0x60c>)
    1770:	480a      	ldr	r0, [pc, #40]	; (179c <print_palette(unsigned char)+0x538>)
    1772:	f7fe fffb 	bl	76c <Print::println(char const*)>
		break;
    1776:	bd10      	pop	{r4, pc}
	case 0:
		Serial.println("ib_jul01_gp");
		break;

	case 1:
		Serial.println("rgi_15_gp");
    1778:	493e      	ldr	r1, [pc, #248]	; (1874 <print_palette(unsigned char)+0x610>)
    177a:	4808      	ldr	r0, [pc, #32]	; (179c <print_palette(unsigned char)+0x538>)
    177c:	f7fe fff6 	bl	76c <Print::println(char const*)>
		break;
    1780:	bd10      	pop	{r4, pc}
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    1782:	493d      	ldr	r1, [pc, #244]	; (1878 <print_palette(unsigned char)+0x614>)
    1784:	4805      	ldr	r0, [pc, #20]	; (179c <print_palette(unsigned char)+0x538>)
    1786:	f7fe fff1 	bl	76c <Print::println(char const*)>
		break;
    178a:	bd10      	pop	{r4, pc}
	case 92:
		Serial.println("blade_runner_2049_gp");
		break;

	default:
		Serial.println("Not a gradient palette");
    178c:	493b      	ldr	r1, [pc, #236]	; (187c <print_palette(unsigned char)+0x618>)
    178e:	4803      	ldr	r0, [pc, #12]	; (179c <print_palette(unsigned char)+0x538>)
    1790:	f7fe ffec 	bl	76c <Print::println(char const*)>
    1794:	bd10      	pop	{r4, pc}
    1796:	bf00      	nop
    1798:	00009d40 	.word	0x00009d40
    179c:	1fff874c 	.word	0x1fff874c
    17a0:	00009d30 	.word	0x00009d30
    17a4:	00009d24 	.word	0x00009d24
    17a8:	00009d18 	.word	0x00009d18
    17ac:	00009d0c 	.word	0x00009d0c
    17b0:	00009cf8 	.word	0x00009cf8
    17b4:	00009cec 	.word	0x00009cec
    17b8:	00009ce0 	.word	0x00009ce0
    17bc:	00009cd4 	.word	0x00009cd4
    17c0:	00009cbc 	.word	0x00009cbc
    17c4:	00009cb4 	.word	0x00009cb4
    17c8:	00009d4c 	.word	0x00009d4c
    17cc:	00009ca8 	.word	0x00009ca8
    17d0:	00009c9c 	.word	0x00009c9c
    17d4:	00009c88 	.word	0x00009c88
    17d8:	00009c74 	.word	0x00009c74
    17dc:	00009c64 	.word	0x00009c64
    17e0:	00009c58 	.word	0x00009c58
    17e4:	00009c4c 	.word	0x00009c4c
    17e8:	00009c40 	.word	0x00009c40
    17ec:	00009c34 	.word	0x00009c34
    17f0:	00009c28 	.word	0x00009c28
    17f4:	00009c1c 	.word	0x00009c1c
    17f8:	00009c10 	.word	0x00009c10
    17fc:	00009c04 	.word	0x00009c04
    1800:	00009bf8 	.word	0x00009bf8
    1804:	00009bec 	.word	0x00009bec
    1808:	00009be0 	.word	0x00009be0
    180c:	00009bd0 	.word	0x00009bd0
    1810:	00009bbc 	.word	0x00009bbc
    1814:	00009ba0 	.word	0x00009ba0
    1818:	00009b88 	.word	0x00009b88
    181c:	00009b6c 	.word	0x00009b6c
    1820:	00009b5c 	.word	0x00009b5c
    1824:	00009b4c 	.word	0x00009b4c
    1828:	00009b38 	.word	0x00009b38
    182c:	00009b28 	.word	0x00009b28
    1830:	00009b20 	.word	0x00009b20
    1834:	00009b18 	.word	0x00009b18
    1838:	00009b00 	.word	0x00009b00
    183c:	00009af0 	.word	0x00009af0
    1840:	00009ae8 	.word	0x00009ae8
    1844:	00009ad8 	.word	0x00009ad8
    1848:	00009ac8 	.word	0x00009ac8
    184c:	00009ab8 	.word	0x00009ab8
    1850:	00009aa4 	.word	0x00009aa4
    1854:	00009a90 	.word	0x00009a90
    1858:	00009a7c 	.word	0x00009a7c
    185c:	00009a64 	.word	0x00009a64
    1860:	00009a4c 	.word	0x00009a4c
    1864:	00009a3c 	.word	0x00009a3c
    1868:	00009a28 	.word	0x00009a28
    186c:	00009a14 	.word	0x00009a14
    1870:	00009a04 	.word	0x00009a04
    1874:	000099f8 	.word	0x000099f8
    1878:	000099ec 	.word	0x000099ec
    187c:	00009f94 	.word	0x00009f94

00001880 <LEDDebug(LEDStruct&)>:
}



// Debugging function
void LEDDebug(LEDStruct& leds) {
    1880:	b510      	push	{r4, lr}
    1882:	2100      	movs	r1, #0
    1884:	4604      	mov	r4, r0
    1886:	48bc      	ldr	r0, [pc, #752]	; (1b78 <LEDDebug(LEDStruct&)+0x2f8>)
    1888:	f005 fff6 	bl	7878 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    188c:	48bb      	ldr	r0, [pc, #748]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    188e:	f006 f9f7 	bl	7c80 <Print::println()>
    1892:	2132      	movs	r1, #50	; 0x32
    1894:	48ba      	ldr	r0, [pc, #744]	; (1b80 <LEDDebug(LEDStruct&)+0x300>)
    1896:	f005 ffef 	bl	7878 <usb_serial_write>
    189a:	48b8      	ldr	r0, [pc, #736]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    189c:	f006 f9f0 	bl	7c80 <Print::println()>
    18a0:	2112      	movs	r1, #18
    18a2:	48b8      	ldr	r0, [pc, #736]	; (1b84 <LEDDebug(LEDStruct&)+0x304>)
    18a4:	f005 ffe8 	bl	7878 <usb_serial_write>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    18a8:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
    18ac:	2b00      	cmp	r3, #0
    18ae:	f000 808b 	beq.w	19c8 <LEDDebug(LEDStruct&)+0x148>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    18b2:	2b01      	cmp	r3, #1
    18b4:	f000 8255 	beq.w	1d62 <LEDDebug(LEDStruct&)+0x4e2>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    18b8:	2b02      	cmp	r3, #2
    18ba:	f000 8257 	beq.w	1d6c <LEDDebug(LEDStruct&)+0x4ec>
    18be:	2112      	movs	r1, #18
    18c0:	48b1      	ldr	r0, [pc, #708]	; (1b88 <LEDDebug(LEDStruct&)+0x308>)
    18c2:	f005 ffd9 	bl	7878 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    18c6:	2300      	movs	r3, #0
    18c8:	220a      	movs	r2, #10
    18ca:	f894 11d4 	ldrb.w	r1, [r4, #468]	; 0x1d4
    18ce:	48ab      	ldr	r0, [pc, #684]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    18d0:	f006 f9e6 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    18d4:	48a9      	ldr	r0, [pc, #676]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    18d6:	f006 f9d3 	bl	7c80 <Print::println()>
    18da:	2112      	movs	r1, #18
    18dc:	48ab      	ldr	r0, [pc, #684]	; (1b8c <LEDDebug(LEDStruct&)+0x30c>)
    18de:	f005 ffcb 	bl	7878 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    18e2:	2300      	movs	r3, #0
    18e4:	220a      	movs	r2, #10
    18e6:	f894 11d5 	ldrb.w	r1, [r4, #469]	; 0x1d5
    18ea:	48a4      	ldr	r0, [pc, #656]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    18ec:	f006 f9d8 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    18f0:	48a2      	ldr	r0, [pc, #648]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    18f2:	f006 f9c5 	bl	7c80 <Print::println()>
    18f6:	2112      	movs	r1, #18
    18f8:	48a5      	ldr	r0, [pc, #660]	; (1b90 <LEDDebug(LEDStruct&)+0x310>)
    18fa:	f005 ffbd 	bl	7878 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    18fe:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
    1902:	489e      	ldr	r0, [pc, #632]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1904:	f006 fa0c 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1908:	489c      	ldr	r0, [pc, #624]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    190a:	f006 f9b9 	bl	7c80 <Print::println()>
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    190e:	f894 323b 	ldrb.w	r3, [r4, #571]	; 0x23b
    1912:	2b00      	cmp	r3, #0
    1914:	d153      	bne.n	19be <LEDDebug(LEDStruct&)+0x13e>
    1916:	2112      	movs	r1, #18
    1918:	489e      	ldr	r0, [pc, #632]	; (1b94 <LEDDebug(LEDStruct&)+0x314>)
    191a:	f005 ffad 	bl	7878 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    191e:	f894 11d6 	ldrb.w	r1, [r4, #470]	; 0x1d6
    1922:	4896      	ldr	r0, [pc, #600]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1924:	f006 f9fc 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1928:	4894      	ldr	r0, [pc, #592]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    192a:	f006 f9a9 	bl	7c80 <Print::println()>
    192e:	2112      	movs	r1, #18
    1930:	4899      	ldr	r0, [pc, #612]	; (1b98 <LEDDebug(LEDStruct&)+0x318>)
    1932:	f005 ffa1 	bl	7878 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1936:	f894 11d7 	ldrb.w	r1, [r4, #471]	; 0x1d7
    193a:	4890      	ldr	r0, [pc, #576]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    193c:	f006 f9f0 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1940:	488e      	ldr	r0, [pc, #568]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1942:	f006 f99d 	bl	7c80 <Print::println()>
    1946:	2112      	movs	r1, #18
    1948:	4894      	ldr	r0, [pc, #592]	; (1b9c <LEDDebug(LEDStruct&)+0x31c>)
    194a:	f005 ff95 	bl	7878 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    194e:	2300      	movs	r3, #0
    1950:	220a      	movs	r2, #10
    1952:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    1956:	4889      	ldr	r0, [pc, #548]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1958:	f006 f9a2 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    195c:	4887      	ldr	r0, [pc, #540]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    195e:	f006 f98f 	bl	7c80 <Print::println()>
    1962:	2112      	movs	r1, #18
    1964:	488e      	ldr	r0, [pc, #568]	; (1ba0 <LEDDebug(LEDStruct&)+0x320>)
    1966:	f005 ff87 	bl	7878 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    196a:	f894 123f 	ldrb.w	r1, [r4, #575]	; 0x23f
    196e:	4883      	ldr	r0, [pc, #524]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1970:	f006 f9d6 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1974:	4881      	ldr	r0, [pc, #516]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1976:	f006 f983 	bl	7c80 <Print::println()>
    197a:	2119      	movs	r1, #25
    197c:	4889      	ldr	r0, [pc, #548]	; (1ba4 <LEDDebug(LEDStruct&)+0x324>)
    197e:	f005 ff7b 	bl	7878 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1982:	487e      	ldr	r0, [pc, #504]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1984:	f006 f97c 	bl	7c80 <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
    1988:	f894 323e 	ldrb.w	r3, [r4, #574]	; 0x23e
    198c:	2b13      	cmp	r3, #19
    198e:	f200 81db 	bhi.w	1d48 <LEDDebug(LEDStruct&)+0x4c8>
    1992:	e8df f013 	tbh	[pc, r3, lsl #1]
    1996:	0066      	.short	0x0066
    1998:	01d901d9 	.word	0x01d901d9
    199c:	01d901d9 	.word	0x01d901d9
    19a0:	01d900cb 	.word	0x01d900cb
    19a4:	013701d9 	.word	0x013701d9
    19a8:	01d901d9 	.word	0x01d901d9
    19ac:	01d901d9 	.word	0x01d901d9
    19b0:	01d901d9 	.word	0x01d901d9
    19b4:	01790174 	.word	0x01790174
    19b8:	018c017e 	.word	0x018c017e
    19bc:	0021      	.short	0x0021
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    19be:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
    19c2:	f7ff fc4f 	bl	1264 <print_palette(unsigned char)>
    19c6:	e7a6      	b.n	1916 <LEDDebug(LEDStruct&)+0x96>
    19c8:	2107      	movs	r1, #7
    19ca:	4877      	ldr	r0, [pc, #476]	; (1ba8 <LEDDebug(LEDStruct&)+0x328>)
    19cc:	f005 ff54 	bl	7878 <usb_serial_write>
    19d0:	486a      	ldr	r0, [pc, #424]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    19d2:	f006 f955 	bl	7c80 <Print::println()>
    19d6:	e772      	b.n	18be <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
			break;

		case FIREWORKS:
			Serial.println("=====FIREWORKS=====");
    19d8:	4974      	ldr	r1, [pc, #464]	; (1bac <LEDDebug(LEDStruct&)+0x32c>)
    19da:	4868      	ldr	r0, [pc, #416]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    19dc:	f7fe fec6 	bl	76c <Print::println(char const*)>
    19e0:	2115      	movs	r1, #21
    19e2:	4873      	ldr	r0, [pc, #460]	; (1bb0 <LEDDebug(LEDStruct&)+0x330>)
    19e4:	f005 ff48 	bl	7878 <usb_serial_write>
			Serial.print("firework_position:   ");
			Serial.println(leds.firework_position);
    19e8:	f894 1319 	ldrb.w	r1, [r4, #793]	; 0x319
    19ec:	4863      	ldr	r0, [pc, #396]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    19ee:	f7fe fecf 	bl	790 <Print::println(unsigned char)>
    19f2:	2110      	movs	r1, #16
    19f4:	486f      	ldr	r0, [pc, #444]	; (1bb4 <LEDDebug(LEDStruct&)+0x334>)
    19f6:	f005 ff3f 	bl	7878 <usb_serial_write>
			Serial.print("Current Stage:  ");
			switch (leds.current_stage) {
    19fa:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    19fe:	2b01      	cmp	r3, #1
    1a00:	d00a      	beq.n	1a18 <LEDDebug(LEDStruct&)+0x198>
    1a02:	d305      	bcc.n	1a10 <LEDDebug(LEDStruct&)+0x190>
    1a04:	2b02      	cmp	r3, #2
    1a06:	d10b      	bne.n	1a20 <LEDDebug(LEDStruct&)+0x1a0>
			case WAITING: Serial.println("WAITING");
    1a08:	496b      	ldr	r1, [pc, #428]	; (1bb8 <LEDDebug(LEDStruct&)+0x338>)
    1a0a:	485c      	ldr	r0, [pc, #368]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a0c:	f7fe feae 	bl	76c <Print::println(char const*)>
			case FADEUP: Serial.println("FADEUP");
    1a10:	496a      	ldr	r1, [pc, #424]	; (1bbc <LEDDebug(LEDStruct&)+0x33c>)
    1a12:	485a      	ldr	r0, [pc, #360]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a14:	f7fe feaa 	bl	76c <Print::println(char const*)>
			case EXPLOSION: Serial.println("EXPLOSION");
    1a18:	4969      	ldr	r1, [pc, #420]	; (1bc0 <LEDDebug(LEDStruct&)+0x340>)
    1a1a:	4858      	ldr	r0, [pc, #352]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a1c:	f7fe fea6 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1a20:	4968      	ldr	r1, [pc, #416]	; (1bc4 <LEDDebug(LEDStruct&)+0x344>)
    1a22:	4856      	ldr	r0, [pc, #344]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a24:	f7fe fe94 	bl	750 <Print::write(char const*)>
			}
			Serial.print("Number of sparks:  ");
			Serial.println(leds.number_of_sparks);
    1a28:	f894 1325 	ldrb.w	r1, [r4, #805]	; 0x325
    1a2c:	4853      	ldr	r0, [pc, #332]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a2e:	f7fe feaf 	bl	790 <Print::println(unsigned char)>
    1a32:	4965      	ldr	r1, [pc, #404]	; (1bc8 <LEDDebug(LEDStruct&)+0x348>)
    1a34:	4851      	ldr	r0, [pc, #324]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a36:	f7fe fe8b 	bl	750 <Print::write(char const*)>
			Serial.print("Brightest spark:   ");
			Serial.println(leds.brightest_spark);
    1a3a:	f894 1724 	ldrb.w	r1, [r4, #1828]	; 0x724
    1a3e:	484f      	ldr	r0, [pc, #316]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a40:	f7fe fea6 	bl	790 <Print::println(unsigned char)>
    1a44:	4961      	ldr	r1, [pc, #388]	; (1bcc <LEDDebug(LEDStruct&)+0x34c>)
    1a46:	484d      	ldr	r0, [pc, #308]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a48:	f7fe fe82 	bl	750 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1a4c:	f8d4 1320 	ldr.w	r1, [r4, #800]	; 0x320
    1a50:	484a      	ldr	r0, [pc, #296]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a52:	2300      	movs	r3, #0
    1a54:	220a      	movs	r2, #10
    1a56:	f006 f923 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1a5a:	4848      	ldr	r0, [pc, #288]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a5c:	f006 f910 	bl	7c80 <Print::println()>
    1a60:	e054      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("===JUGGLE VARIABLES===");
    1a62:	495b      	ldr	r1, [pc, #364]	; (1bd0 <LEDDebug(LEDStruct&)+0x350>)
    1a64:	4845      	ldr	r0, [pc, #276]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a66:	f7fe fe81 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1a6a:	495a      	ldr	r1, [pc, #360]	; (1bd4 <LEDDebug(LEDStruct&)+0x354>)
    1a6c:	4843      	ldr	r0, [pc, #268]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a6e:	f7fe fe6f 	bl	750 <Print::write(char const*)>
			Serial.print("index:         ");
			Serial.println(leds.juggle_index);
    1a72:	f894 1240 	ldrb.w	r1, [r4, #576]	; 0x240
    1a76:	4841      	ldr	r0, [pc, #260]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a78:	f7fe fe8a 	bl	790 <Print::println(unsigned char)>
    1a7c:	4956      	ldr	r1, [pc, #344]	; (1bd8 <LEDDebug(LEDStruct&)+0x358>)
    1a7e:	483f      	ldr	r0, [pc, #252]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a80:	f7fe fe66 	bl	750 <Print::write(char const*)>
			Serial.print("numdots:       ");
			Serial.println(leds.juggle_numdots);
    1a84:	f894 1241 	ldrb.w	r1, [r4, #577]	; 0x241
    1a88:	483c      	ldr	r0, [pc, #240]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a8a:	f7fe fe81 	bl	790 <Print::println(unsigned char)>
    1a8e:	210f      	movs	r1, #15
    1a90:	4852      	ldr	r0, [pc, #328]	; (1bdc <LEDDebug(LEDStruct&)+0x35c>)
    1a92:	f005 fef1 	bl	7878 <usb_serial_write>
			Serial.print("beat:          ");
			Serial.println(leds.juggle_beat);
    1a96:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    1a9a:	4838      	ldr	r0, [pc, #224]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1a9c:	f7fe fe78 	bl	790 <Print::println(unsigned char)>
    1aa0:	210f      	movs	r1, #15
    1aa2:	484f      	ldr	r0, [pc, #316]	; (1be0 <LEDDebug(LEDStruct&)+0x360>)
    1aa4:	f005 fee8 	bl	7878 <usb_serial_write>
			Serial.print("fade:          ");
			Serial.println(leds.juggle_fade);
    1aa8:	f894 1243 	ldrb.w	r1, [r4, #579]	; 0x243
    1aac:	4833      	ldr	r0, [pc, #204]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1aae:	f7fe fe6f 	bl	790 <Print::println(unsigned char)>
    1ab2:	210f      	movs	r1, #15
    1ab4:	484b      	ldr	r0, [pc, #300]	; (1be4 <LEDDebug(LEDStruct&)+0x364>)
    1ab6:	f005 fedf 	bl	7878 <usb_serial_write>
			Serial.print("diff:          ");
			Serial.println(leds.juggle_diff);
    1aba:	f894 1244 	ldrb.w	r1, [r4, #580]	; 0x244
    1abe:	482f      	ldr	r0, [pc, #188]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1ac0:	f7fe fe66 	bl	790 <Print::println(unsigned char)>
    1ac4:	210f      	movs	r1, #15
    1ac6:	4848      	ldr	r0, [pc, #288]	; (1be8 <LEDDebug(LEDStruct&)+0x368>)
    1ac8:	f005 fed6 	bl	7878 <usb_serial_write>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1acc:	f894 1245 	ldrb.w	r1, [r4, #581]	; 0x245
    1ad0:	482a      	ldr	r0, [pc, #168]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1ad2:	f006 f925 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1ad6:	4829      	ldr	r0, [pc, #164]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1ad8:	f006 f8d2 	bl	7c80 <Print::println()>
    1adc:	210f      	movs	r1, #15
    1ade:	4843      	ldr	r0, [pc, #268]	; (1bec <LEDDebug(LEDStruct&)+0x36c>)
    1ae0:	f005 feca 	bl	7878 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1ae4:	f894 1246 	ldrb.w	r1, [r4, #582]	; 0x246
    1ae8:	4824      	ldr	r0, [pc, #144]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1aea:	f006 f919 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1aee:	4823      	ldr	r0, [pc, #140]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1af0:	f006 f8c6 	bl	7c80 <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1af4:	493e      	ldr	r1, [pc, #248]	; (1bf0 <LEDDebug(LEDStruct&)+0x370>)
    1af6:	4821      	ldr	r0, [pc, #132]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1af8:	f7fe fe2a 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1afc:	f894 1247 	ldrb.w	r1, [r4, #583]	; 0x247
    1b00:	481e      	ldr	r0, [pc, #120]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b02:	f006 f90d 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1b06:	481d      	ldr	r0, [pc, #116]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b08:	f006 f8ba 	bl	7c80 <Print::println()>
    1b0c:	2119      	movs	r1, #25
    1b0e:	4825      	ldr	r0, [pc, #148]	; (1ba4 <LEDDebug(LEDStruct&)+0x324>)
    1b10:	f005 feb2 	bl	7878 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1b14:	4819      	ldr	r0, [pc, #100]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b16:	f006 f8b3 	bl	7c80 <Print::println()>
    1b1a:	2100      	movs	r1, #0
    1b1c:	4816      	ldr	r0, [pc, #88]	; (1b78 <LEDDebug(LEDStruct&)+0x2f8>)
    1b1e:	f005 feab 	bl	7878 <usb_serial_write>
    1b22:	4816      	ldr	r0, [pc, #88]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
    1b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b28:	f006 b8aa 	b.w	7c80 <Print::println()>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    1b2c:	f894 324b 	ldrb.w	r3, [r4, #587]	; 0x24b
    1b30:	2b00      	cmp	r3, #0
    1b32:	f040 8120 	bne.w	1d76 <LEDDebug(LEDStruct&)+0x4f6>
    1b36:	492f      	ldr	r1, [pc, #188]	; (1bf4 <LEDDebug(LEDStruct&)+0x374>)
    1b38:	4810      	ldr	r0, [pc, #64]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b3a:	f7fe fe17 	bl	76c <Print::println(char const*)>
    1b3e:	210b      	movs	r1, #11
    1b40:	482d      	ldr	r0, [pc, #180]	; (1bf8 <LEDDebug(LEDStruct&)+0x378>)
    1b42:	f005 fe99 	bl	7878 <usb_serial_write>
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
			Serial.print("index:     ");
			Serial.println(leds.rainbow_index);
    1b46:	f894 124a 	ldrb.w	r1, [r4, #586]	; 0x24a
    1b4a:	480c      	ldr	r0, [pc, #48]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b4c:	f7fe fe20 	bl	790 <Print::println(unsigned char)>
    1b50:	210b      	movs	r1, #11
    1b52:	482a      	ldr	r0, [pc, #168]	; (1bfc <LEDDebug(LEDStruct&)+0x37c>)
    1b54:	f005 fe90 	bl	7878 <usb_serial_write>
			Serial.print("diff:      ");
			Serial.println(leds.rainbow_diff);
    1b58:	f894 1249 	ldrb.w	r1, [r4, #585]	; 0x249
    1b5c:	4807      	ldr	r0, [pc, #28]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b5e:	f7fe fe17 	bl	790 <Print::println(unsigned char)>
    1b62:	210b      	movs	r1, #11
    1b64:	4826      	ldr	r0, [pc, #152]	; (1c00 <LEDDebug(LEDStruct&)+0x380>)
    1b66:	f005 fe87 	bl	7878 <usb_serial_write>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
    1b6a:	f894 1248 	ldrb.w	r1, [r4, #584]	; 0x248
    1b6e:	4803      	ldr	r0, [pc, #12]	; (1b7c <LEDDebug(LEDStruct&)+0x2fc>)
    1b70:	f7fe fe0e 	bl	790 <Print::println(unsigned char)>
			break;
    1b74:	e7ca      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>
    1b76:	bf00      	nop
    1b78:	0000a3d0 	.word	0x0000a3d0
    1b7c:	1fff874c 	.word	0x1fff874c
    1b80:	00009fac 	.word	0x00009fac
    1b84:	00009fe0 	.word	0x00009fe0
    1b88:	0000a00c 	.word	0x0000a00c
    1b8c:	0000a020 	.word	0x0000a020
    1b90:	0000a034 	.word	0x0000a034
    1b94:	0000a048 	.word	0x0000a048
    1b98:	0000a05c 	.word	0x0000a05c
    1b9c:	0000a070 	.word	0x0000a070
    1ba0:	0000a084 	.word	0x0000a084
    1ba4:	0000a098 	.word	0x0000a098
    1ba8:	00009ff4 	.word	0x00009ff4
    1bac:	0000a254 	.word	0x0000a254
    1bb0:	0000a268 	.word	0x0000a268
    1bb4:	0000a280 	.word	0x0000a280
    1bb8:	0000a294 	.word	0x0000a294
    1bbc:	0000a29c 	.word	0x0000a29c
    1bc0:	0000a2a4 	.word	0x0000a2a4
    1bc4:	0000a2b0 	.word	0x0000a2b0
    1bc8:	0000a2c4 	.word	0x0000a2c4
    1bcc:	0000a2d8 	.word	0x0000a2d8
    1bd0:	0000a0b4 	.word	0x0000a0b4
    1bd4:	0000a0cc 	.word	0x0000a0cc
    1bd8:	0000a0dc 	.word	0x0000a0dc
    1bdc:	0000a0ec 	.word	0x0000a0ec
    1be0:	0000a0fc 	.word	0x0000a0fc
    1be4:	0000a10c 	.word	0x0000a10c
    1be8:	0000a11c 	.word	0x0000a11c
    1bec:	0000a12c 	.word	0x0000a12c
    1bf0:	0000a13c 	.word	0x0000a13c
    1bf4:	0000a14c 	.word	0x0000a14c
    1bf8:	0000a17c 	.word	0x0000a17c
    1bfc:	0000a188 	.word	0x0000a188
    1c00:	0000a338 	.word	0x0000a338

		case FIRE:
			if (leds.mode_name == TORCH) { Serial.print("=====TORCH"); }
    1c04:	f894 323d 	ldrb.w	r3, [r4, #573]	; 0x23d
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1c08:	486c      	ldr	r0, [pc, #432]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c0a:	2b0d      	cmp	r3, #13
    1c0c:	bf0c      	ite	eq
    1c0e:	496c      	ldreq	r1, [pc, #432]	; (1dc0 <LEDDebug(LEDStruct&)+0x540>)
    1c10:	496c      	ldrne	r1, [pc, #432]	; (1dc4 <LEDDebug(LEDStruct&)+0x544>)
    1c12:	f7fe fd9d 	bl	750 <Print::write(char const*)>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
    1c16:	f894 32e9 	ldrb.w	r3, [r4, #745]	; 0x2e9
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	f040 80c8 	bne.w	1db0 <LEDDebug(LEDStruct&)+0x530>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
    1c20:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
    1c24:	2b00      	cmp	r3, #0
    1c26:	f040 80be 	bne.w	1da6 <LEDDebug(LEDStruct&)+0x526>
			Serial.println("=====");
    1c2a:	4967      	ldr	r1, [pc, #412]	; (1dc8 <LEDDebug(LEDStruct&)+0x548>)
    1c2c:	4863      	ldr	r0, [pc, #396]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c2e:	f7fe fd9d 	bl	76c <Print::println(char const*)>
    1c32:	210d      	movs	r1, #13
    1c34:	4865      	ldr	r0, [pc, #404]	; (1dcc <LEDDebug(LEDStruct&)+0x54c>)
    1c36:	f005 fe1f 	bl	7878 <usb_serial_write>
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
    1c3a:	f894 124c 	ldrb.w	r1, [r4, #588]	; 0x24c
    1c3e:	485f      	ldr	r0, [pc, #380]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c40:	f7fe fda6 	bl	790 <Print::println(unsigned char)>
    1c44:	210d      	movs	r1, #13
    1c46:	4862      	ldr	r0, [pc, #392]	; (1dd0 <LEDDebug(LEDStruct&)+0x550>)
    1c48:	f005 fe16 	bl	7878 <usb_serial_write>
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
    1c4c:	f894 124e 	ldrb.w	r1, [r4, #590]	; 0x24e
    1c50:	485a      	ldr	r0, [pc, #360]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c52:	f7fe fd9d 	bl	790 <Print::println(unsigned char)>
			if (!leds.fire_sync) {
    1c56:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	f000 8090 	beq.w	1d80 <LEDDebug(LEDStruct&)+0x500>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH) {
    1c60:	f894 323d 	ldrb.w	r3, [r4, #573]	; 0x23d
    1c64:	2b0d      	cmp	r3, #13
    1c66:	f47f af51 	bne.w	1b0c <LEDDebug(LEDStruct&)+0x28c>
    1c6a:	495a      	ldr	r1, [pc, #360]	; (1dd4 <LEDDebug(LEDStruct&)+0x554>)
    1c6c:	4853      	ldr	r0, [pc, #332]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c6e:	f7fe fd6f 	bl	750 <Print::write(char const*)>
				Serial.print("torch_diff:  ");
				Serial.println(leds.torch_diff);
    1c72:	f894 12eb 	ldrb.w	r1, [r4, #747]	; 0x2eb
    1c76:	4851      	ldr	r0, [pc, #324]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c78:	f7fe fd8a 	bl	790 <Print::println(unsigned char)>
    1c7c:	e746      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>
			}
			break;
		
		case COLORWAVE:
			Serial.println("=====COLORWAVE=====");
    1c7e:	4956      	ldr	r1, [pc, #344]	; (1dd8 <LEDDebug(LEDStruct&)+0x558>)
    1c80:	484e      	ldr	r0, [pc, #312]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c82:	f7fe fd73 	bl	76c <Print::println(char const*)>
			break;
    1c86:	e741      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>

		case PRIDE:
			Serial.println("=====PRIDE=====");
    1c88:	4954      	ldr	r1, [pc, #336]	; (1ddc <LEDDebug(LEDStruct&)+0x55c>)
    1c8a:	484c      	ldr	r0, [pc, #304]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c8c:	f7fe fd6e 	bl	76c <Print::println(char const*)>
			break;
    1c90:	e73c      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>

		case CONFETTI:
			Serial.println("=====CONFETTI=====");
    1c92:	4953      	ldr	r1, [pc, #332]	; (1de0 <LEDDebug(LEDStruct&)+0x560>)
    1c94:	4849      	ldr	r0, [pc, #292]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c96:	f7fe fd69 	bl	76c <Print::println(char const*)>
    1c9a:	4952      	ldr	r1, [pc, #328]	; (1de4 <LEDDebug(LEDStruct&)+0x564>)
    1c9c:	4847      	ldr	r0, [pc, #284]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1c9e:	f7fe fd57 	bl	750 <Print::write(char const*)>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
    1ca2:	f894 130e 	ldrb.w	r1, [r4, #782]	; 0x30e
    1ca6:	4845      	ldr	r0, [pc, #276]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1ca8:	f7fe fd72 	bl	790 <Print::println(unsigned char)>
			break;
    1cac:	e72e      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>
			Serial.print("Next explosion time: ");
			Serial.println(leds.next_explosion_time);
			break;

		case ONE_SIN:
			Serial.println("=====ONE_SIN=====");
    1cae:	494e      	ldr	r1, [pc, #312]	; (1de8 <LEDDebug(LEDStruct&)+0x568>)
    1cb0:	4842      	ldr	r0, [pc, #264]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cb2:	f7fe fd5b 	bl	76c <Print::println(char const*)>
    1cb6:	494d      	ldr	r1, [pc, #308]	; (1dec <LEDDebug(LEDStruct&)+0x56c>)
    1cb8:	4840      	ldr	r0, [pc, #256]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cba:	f7fe fd49 	bl	750 <Print::write(char const*)>
			Serial.print("sin_inc:       ");
			Serial.println(leds.sin_inc);
    1cbe:	f894 130f 	ldrb.w	r1, [r4, #783]	; 0x30f
    1cc2:	483e      	ldr	r0, [pc, #248]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cc4:	f7fe fd64 	bl	790 <Print::println(unsigned char)>
    1cc8:	4949      	ldr	r1, [pc, #292]	; (1df0 <LEDDebug(LEDStruct&)+0x570>)
    1cca:	483c      	ldr	r0, [pc, #240]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1ccc:	f7fe fd40 	bl	750 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    1cd0:	f894 1310 	ldrb.w	r1, [r4, #784]	; 0x310
    1cd4:	4839      	ldr	r0, [pc, #228]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cd6:	f7fe fd5b 	bl	790 <Print::println(unsigned char)>
    1cda:	4946      	ldr	r1, [pc, #280]	; (1df4 <LEDDebug(LEDStruct&)+0x574>)
    1cdc:	4837      	ldr	r0, [pc, #220]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cde:	f7fe fd37 	bl	750 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    1ce2:	f894 1311 	ldrb.w	r1, [r4, #785]	; 0x311
    1ce6:	4835      	ldr	r0, [pc, #212]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1ce8:	f7fe fd52 	bl	790 <Print::println(unsigned char)>
    1cec:	4942      	ldr	r1, [pc, #264]	; (1df8 <LEDDebug(LEDStruct&)+0x578>)
    1cee:	4833      	ldr	r0, [pc, #204]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cf0:	f7fe fd2e 	bl	750 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    1cf4:	f894 1312 	ldrb.w	r1, [r4, #786]	; 0x312
    1cf8:	4830      	ldr	r0, [pc, #192]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1cfa:	f7fe fd49 	bl	790 <Print::println(unsigned char)>
    1cfe:	493f      	ldr	r1, [pc, #252]	; (1dfc <LEDDebug(LEDStruct&)+0x57c>)
    1d00:	482e      	ldr	r0, [pc, #184]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d02:	f7fe fd25 	bl	750 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    1d06:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    1d0a:	482c      	ldr	r0, [pc, #176]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d0c:	f7fe fd40 	bl	790 <Print::println(unsigned char)>
    1d10:	493b      	ldr	r1, [pc, #236]	; (1e00 <LEDDebug(LEDStruct&)+0x580>)
    1d12:	482a      	ldr	r0, [pc, #168]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d14:	f7fe fd1c 	bl	750 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    1d18:	f894 1313 	ldrb.w	r1, [r4, #787]	; 0x313
    1d1c:	4827      	ldr	r0, [pc, #156]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d1e:	f7fe fd37 	bl	790 <Print::println(unsigned char)>
    1d22:	4938      	ldr	r1, [pc, #224]	; (1e04 <LEDDebug(LEDStruct&)+0x584>)
    1d24:	4825      	ldr	r0, [pc, #148]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d26:	f7fe fd13 	bl	750 <Print::write(char const*)>
			Serial.print("bg_clr:        ");
			Serial.println(leds.bg_clr);
    1d2a:	f894 1314 	ldrb.w	r1, [r4, #788]	; 0x314
    1d2e:	4823      	ldr	r0, [pc, #140]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d30:	f7fe fd2e 	bl	790 <Print::println(unsigned char)>
    1d34:	4934      	ldr	r1, [pc, #208]	; (1e08 <LEDDebug(LEDStruct&)+0x588>)
    1d36:	4821      	ldr	r0, [pc, #132]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d38:	f7fe fd0a 	bl	750 <Print::write(char const*)>
			Serial.print("bg_bri:        ");
			Serial.println(leds.bg_bri);
    1d3c:	f894 1315 	ldrb.w	r1, [r4, #789]	; 0x315
    1d40:	481e      	ldr	r0, [pc, #120]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d42:	f7fe fd25 	bl	790 <Print::println(unsigned char)>
			break;
    1d46:	e6e1      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>

		default:
			Serial.println("");
    1d48:	4930      	ldr	r1, [pc, #192]	; (1e0c <LEDDebug(LEDStruct&)+0x58c>)
    1d4a:	481c      	ldr	r0, [pc, #112]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d4c:	f7fe fd0e 	bl	76c <Print::println(char const*)>
			Serial.println("===MODE TYPE ERROR===");
    1d50:	492f      	ldr	r1, [pc, #188]	; (1e10 <LEDDebug(LEDStruct&)+0x590>)
    1d52:	481a      	ldr	r0, [pc, #104]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d54:	f7fe fd0a 	bl	76c <Print::println(char const*)>
			Serial.println("");
    1d58:	492c      	ldr	r1, [pc, #176]	; (1e0c <LEDDebug(LEDStruct&)+0x58c>)
    1d5a:	4818      	ldr	r0, [pc, #96]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d5c:	f7fe fd06 	bl	76c <Print::println(char const*)>
			break;
    1d60:	e6d4      	b.n	1b0c <LEDDebug(LEDStruct&)+0x28c>
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    1d62:	492c      	ldr	r1, [pc, #176]	; (1e14 <LEDDebug(LEDStruct&)+0x594>)
    1d64:	4815      	ldr	r0, [pc, #84]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d66:	f7fe fd01 	bl	76c <Print::println(char const*)>
    1d6a:	e5a8      	b.n	18be <LEDDebug(LEDStruct&)+0x3e>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1d6c:	492a      	ldr	r1, [pc, #168]	; (1e18 <LEDDebug(LEDStruct&)+0x598>)
    1d6e:	4813      	ldr	r0, [pc, #76]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d70:	f7fe fcfc 	bl	76c <Print::println(char const*)>
    1d74:	e5a3      	b.n	18be <LEDDebug(LEDStruct&)+0x3e>
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
    1d76:	4929      	ldr	r1, [pc, #164]	; (1e1c <LEDDebug(LEDStruct&)+0x59c>)
    1d78:	4810      	ldr	r0, [pc, #64]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d7a:	f7fe fcf7 	bl	76c <Print::println(char const*)>
    1d7e:	e6de      	b.n	1b3e <LEDDebug(LEDStruct&)+0x2be>
    1d80:	4927      	ldr	r1, [pc, #156]	; (1e20 <LEDDebug(LEDStruct&)+0x5a0>)
    1d82:	480e      	ldr	r0, [pc, #56]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d84:	f7fe fce4 	bl	750 <Print::write(char const*)>
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
    1d88:	f894 124d 	ldrb.w	r1, [r4, #589]	; 0x24d
    1d8c:	480b      	ldr	r0, [pc, #44]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d8e:	f7fe fcff 	bl	790 <Print::println(unsigned char)>
    1d92:	4924      	ldr	r1, [pc, #144]	; (1e24 <LEDDebug(LEDStruct&)+0x5a4>)
    1d94:	4809      	ldr	r0, [pc, #36]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1d96:	f7fe fcdb 	bl	750 <Print::write(char const*)>
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
    1d9a:	f894 124f 	ldrb.w	r1, [r4, #591]	; 0x24f
    1d9e:	4807      	ldr	r0, [pc, #28]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1da0:	f7fe fcf6 	bl	790 <Print::println(unsigned char)>
    1da4:	e75c      	b.n	1c60 <LEDDebug(LEDStruct&)+0x3e0>
    1da6:	4920      	ldr	r1, [pc, #128]	; (1e28 <LEDDebug(LEDStruct&)+0x5a8>)
    1da8:	4804      	ldr	r0, [pc, #16]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1daa:	f7fe fcd1 	bl	750 <Print::write(char const*)>
    1dae:	e73c      	b.n	1c2a <LEDDebug(LEDStruct&)+0x3aa>
    1db0:	491e      	ldr	r1, [pc, #120]	; (1e2c <LEDDebug(LEDStruct&)+0x5ac>)
    1db2:	4802      	ldr	r0, [pc, #8]	; (1dbc <LEDDebug(LEDStruct&)+0x53c>)
    1db4:	f7fe fccc 	bl	750 <Print::write(char const*)>
    1db8:	e732      	b.n	1c20 <LEDDebug(LEDStruct&)+0x3a0>
    1dba:	bf00      	nop
    1dbc:	1fff874c 	.word	0x1fff874c
    1dc0:	0000a194 	.word	0x0000a194
    1dc4:	0000a1a0 	.word	0x0000a1a0
    1dc8:	0000a0ac 	.word	0x0000a0ac
    1dcc:	0000a1bc 	.word	0x0000a1bc
    1dd0:	0000a1cc 	.word	0x0000a1cc
    1dd4:	0000a1fc 	.word	0x0000a1fc
    1dd8:	0000a20c 	.word	0x0000a20c
    1ddc:	0000a220 	.word	0x0000a220
    1de0:	0000a230 	.word	0x0000a230
    1de4:	0000a244 	.word	0x0000a244
    1de8:	0000a2f0 	.word	0x0000a2f0
    1dec:	0000a304 	.word	0x0000a304
    1df0:	0000a314 	.word	0x0000a314
    1df4:	0000a324 	.word	0x0000a324
    1df8:	0000a334 	.word	0x0000a334
    1dfc:	0000a344 	.word	0x0000a344
    1e00:	0000a354 	.word	0x0000a354
    1e04:	0000a364 	.word	0x0000a364
    1e08:	0000a374 	.word	0x0000a374
    1e0c:	0000a3d0 	.word	0x0000a3d0
    1e10:	0000a384 	.word	0x0000a384
    1e14:	00009ffc 	.word	0x00009ffc
    1e18:	0000a004 	.word	0x0000a004
    1e1c:	0000a160 	.word	0x0000a160
    1e20:	0000a1dc 	.word	0x0000a1dc
    1e24:	0000a1ec 	.word	0x0000a1ec
    1e28:	0000a1b4 	.word	0x0000a1b4
    1e2c:	0000a1ac 	.word	0x0000a1ac

00001e30 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	
}

// Change palette
void change_palette(LEDStruct& leds) {
    1e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e34:	b08d      	sub	sp, #52	; 0x34
    1e36:	2120      	movs	r1, #32
    1e38:	4605      	mov	r5, r0
    1e3a:	9009      	str	r0, [sp, #36]	; 0x24
    1e3c:	483f      	ldr	r0, [pc, #252]	; (1f3c <change_palette(LEDStruct&) [clone .part.11]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    1e3e:	4c40      	ldr	r4, [pc, #256]	; (1f40 <change_palette(LEDStruct&) [clone .part.11]+0x110>)
    1e40:	f005 fd1a 	bl	7878 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1e44:	483f      	ldr	r0, [pc, #252]	; (1f44 <change_palette(LEDStruct&) [clone .part.11]+0x114>)
    1e46:	f005 ff1b 	bl	7c80 <Print::println()>
    1e4a:	483f      	ldr	r0, [pc, #252]	; (1f48 <change_palette(LEDStruct&) [clone .part.11]+0x118>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1e4c:	4a3f      	ldr	r2, [pc, #252]	; (1f4c <change_palette(LEDStruct&) [clone .part.11]+0x11c>)
    1e4e:	8803      	ldrh	r3, [r0, #0]
    1e50:	7811      	ldrb	r1, [r2, #0]
    1e52:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1e56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1e5a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1e5e:	3319      	adds	r3, #25
    1e60:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1e62:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1e66:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1e68:	fb12 f201 	smulbb	r2, r2, r1
    1e6c:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1e6e:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    1e70:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1e74:	f885 223a 	strb.w	r2, [r5, #570]	; 0x23a
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1e78:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1e7a:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    1e7e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1e80:	3701      	adds	r7, #1
        } while ( u.index != 255);
    1e82:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1e84:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    1e86:	d1f8      	bne.n	1e7a <change_palette(LEDStruct&) [clone .part.11]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1e88:	f8d8 3000 	ldr.w	r3, [r8]
    1e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1e8e:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    1e90:	ea4f 6913 	mov.w	r9, r3, lsr #24
    1e94:	f202 2209 	addw	r2, r2, #521	; 0x209
    1e98:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1e9c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1ea0:	f04f 33ff 	mov.w	r3, #4294967295
    1ea4:	9207      	str	r2, [sp, #28]
    1ea6:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1ea8:	2400      	movs	r4, #0
    1eaa:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1eac:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1eb0:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1eb2:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    1eb6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1eba:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1ebe:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    1ec0:	b2f9      	uxtb	r1, r7
    1ec2:	f3c5 6507 	ubfx	r5, r5, #24, #8
    1ec6:	9104      	str	r1, [sp, #16]
    1ec8:	b2e9      	uxtb	r1, r5
    1eca:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1ecc:	fa5f f18c 	uxtb.w	r1, ip
    1ed0:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1ed2:	9908      	ldr	r1, [sp, #32]
    1ed4:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1ed6:	aa0b      	add	r2, sp, #44	; 0x2c
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1ed8:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1edc:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1ee0:	d80c      	bhi.n	1efc <change_palette(LEDStruct&) [clone .part.11]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1ee2:	9906      	ldr	r1, [sp, #24]
    1ee4:	458c      	cmp	ip, r1
    1ee6:	dc07      	bgt.n	1ef8 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
    1ee8:	290f      	cmp	r1, #15
    1eea:	d005      	beq.n	1ef8 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
                    istart8 = lastSlotUsed + 1;
    1eec:	3101      	adds	r1, #1
    1eee:	b2c9      	uxtb	r1, r1
    1ef0:	428b      	cmp	r3, r1
    1ef2:	9103      	str	r1, [sp, #12]
    1ef4:	bf38      	it	cc
    1ef6:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1ef8:	b259      	sxtb	r1, r3
    1efa:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1efc:	a90a      	add	r1, sp, #40	; 0x28
    1efe:	9100      	str	r1, [sp, #0]
    1f00:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f02:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
        g = rhs.g;
    1f06:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
        b = rhs.b;
    1f0a:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f0e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    1f12:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    1f16:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    1f1a:	f003 fd07 	bl	592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1f1e:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f20:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    1f24:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1f28:	46ca      	mov	sl, r9
    1f2a:	d1bf      	bne.n	1eac <change_palette(LEDStruct&) [clone .part.11]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    1f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f2e:	f893 023a 	ldrb.w	r0, [r3, #570]	; 0x23a
    1f32:	f7ff f997 	bl	1264 <print_palette(unsigned char)>
	}
}
    1f36:	b00d      	add	sp, #52	; 0x34
    1f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f3c:	0000a39c 	.word	0x0000a39c
    1f40:	00009748 	.word	0x00009748
    1f44:	1fff874c 	.word	0x1fff874c
    1f48:	1fff8742 	.word	0x1fff8742
    1f4c:	1fff8740 	.word	0x1fff8740

00001f50 <juggle(LEDStruct&)>:
	*/
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1f54:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
	*/
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1f58:	b08f      	sub	sp, #60	; 0x3c
    1f5a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	f000 80ee 	beq.w	213e <juggle(LEDStruct&)+0x1ee>
    1f62:	f890 7245 	ldrb.w	r7, [r0, #581]	; 0x245
    1f66:	f890 2243 	ldrb.w	r2, [r0, #579]	; 0x243

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    1f6a:	b117      	cbz	r7, 1f72 <juggle(LEDStruct&)+0x22>
    1f6c:	2300      	movs	r3, #0
    1f6e:	f884 3240 	strb.w	r3, [r4, #576]	; 0x240

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    1f72:	2196      	movs	r1, #150	; 0x96
    1f74:	68a0      	ldr	r0, [r4, #8]
    1f76:	f003 fd6b 	bl	5a50 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1f7a:	f894 1246 	ldrb.w	r1, [r4, #582]	; 0x246
		if (leds.juggle_phased) {
    1f7e:	f894 6247 	ldrb.w	r6, [r4, #583]	; 0x247
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1f82:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1f86:	2900      	cmp	r1, #0
    1f88:	f040 8171 	bne.w	226e <juggle(LEDStruct&)+0x31e>
		if (leds.juggle_phased) {
    1f8c:	2e00      	cmp	r6, #0
    1f8e:	f000 82b6 	beq.w	24fe <juggle(LEDStruct&)+0x5ae>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1f92:	2b00      	cmp	r3, #0
    1f94:	f000 8381 	beq.w	269a <juggle(LEDStruct&)+0x74a>
    1f98:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    1f9c:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 229c <juggle(LEDStruct&)+0x34c>
    1fa0:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 22a0 <juggle(LEDStruct&)+0x350>
    1fa4:	4fbb      	ldr	r7, [pc, #748]	; (2294 <juggle(LEDStruct&)+0x344>)
    1fa6:	460e      	mov	r6, r1
    1fa8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    1fac:	f204 1bd9 	addw	fp, r4, #473	; 0x1d9
    1fb0:	e065      	b.n	207e <juggle(LEDStruct&)+0x12e>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1fb2:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    1fb6:	4433      	add	r3, r6
    1fb8:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fba:	f8d9 1000 	ldr.w	r1, [r9]
    1fbe:	9102      	str	r1, [sp, #8]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1fc0:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1fc2:	9802      	ldr	r0, [sp, #8]
    1fc4:	bf98      	it	ls
    1fc6:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1fc8:	f44f 718c 	mov.w	r1, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1fcc:	bf98      	it	ls
    1fce:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1fd0:	fb01 f000 	mul.w	r0, r1, r0
    1fd4:	fb03 f000 	mul.w	r0, r3, r0
    1fd8:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fda:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1fdc:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fe0:	d503      	bpl.n	1fea <juggle(LEDStruct&)+0x9a>
    1fe2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1fe6:	3307      	adds	r3, #7
    1fe8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1fea:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1fec:	f3c3 0146 	ubfx	r1, r3, #1, #7
    1ff0:	f818 e005 	ldrb.w	lr, [r8, r5]
    1ff4:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    1ff8:	68a5      	ldr	r5, [r4, #8]
    1ffa:	fb0e 3301 	mla	r3, lr, r1, r3
    1ffe:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2000:	0401      	lsls	r1, r0, #16
    2002:	bf48      	it	mi
    2004:	425b      	negmi	r3, r3
    2006:	b21b      	sxth	r3, r3
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )
{
  #if SCALE16_C == 1
    uint16_t result;
#if FASTLED_SCALE8_FIXED == 1
    result = ((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536;
    2008:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000

  /// do these sets point to the different things (note, this is different from the contents of the set being the same)
  bool operator!=(const CPixelView & rhs) const { return leds != rhs.leds || len != rhs.len || dir != rhs.dir; }

  /// access a single element in this set, just like an array operator
  inline PIXEL_TYPE & operator[](int x) const { if(dir & 0x80) { return leds[-x]; } else { return leds[x]; } }
    200c:	f994 1000 	ldrsb.w	r1, [r4]
    2010:	2096      	movs	r0, #150	; 0x96
    2012:	b29b      	uxth	r3, r3
    2014:	fb00 f303 	mul.w	r3, r0, r3
    2018:	2900      	cmp	r1, #0
    201a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    201e:	bfb4      	ite	lt
    2020:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2024:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    2028:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    202c:	441d      	add	r5, r3
    202e:	4650      	mov	r0, sl
    2030:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    2034:	9100      	str	r1, [sp, #0]
    2036:	4659      	mov	r1, fp
    2038:	f003 fd6a 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    203c:	782b      	ldrb	r3, [r5, #0]
    203e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    2042:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2046:	702b      	strb	r3, [r5, #0]
    2048:	786a      	ldrb	r2, [r5, #1]
    204a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    204e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2052:	706a      	strb	r2, [r5, #1]
    2054:	78ab      	ldrb	r3, [r5, #2]
    2056:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    205a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    205e:	70ab      	strb	r3, [r5, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2060:	f894 1240 	ldrb.w	r1, [r4, #576]	; 0x240
    2064:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2068:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
    206c:	3601      	adds	r6, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    206e:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2070:	b2f6      	uxtb	r6, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2072:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2074:	42b3      	cmp	r3, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2076:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    207a:	f240 830e 	bls.w	269a <juggle(LEDStruct&)+0x74a>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    207e:	f894 11d6 	ldrb.w	r1, [r4, #470]	; 0x1d6
    2082:	2900      	cmp	r1, #0
    2084:	d195      	bne.n	1fb2 <juggle(LEDStruct&)+0x62>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2086:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    208a:	4433      	add	r3, r6
    208c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    208e:	f8d9 1000 	ldr.w	r1, [r9]
    2092:	9103      	str	r1, [sp, #12]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2094:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2096:	9803      	ldr	r0, [sp, #12]
    2098:	bf98      	it	ls
    209a:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    209c:	f44f 718c 	mov.w	r1, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    20a0:	bf98      	it	ls
    20a2:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    20a4:	fb01 f000 	mul.w	r0, r1, r0
    20a8:	fb03 f000 	mul.w	r0, r3, r0
    20ac:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    20ae:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    20b0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    20b4:	d503      	bpl.n	20be <juggle(LEDStruct&)+0x16e>
    20b6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    20ba:	3307      	adds	r3, #7
    20bc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    20be:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    20c0:	f3c3 0146 	ubfx	r1, r3, #1, #7
    20c4:	f818 e005 	ldrb.w	lr, [r8, r5]
    20c8:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    20cc:	68a5      	ldr	r5, [r4, #8]
    20ce:	fb0e 3301 	mla	r3, lr, r1, r3
    20d2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    20d4:	0401      	lsls	r1, r0, #16
    20d6:	bf48      	it	mi
    20d8:	425b      	negmi	r3, r3
    20da:	b21b      	sxth	r3, r3
    20dc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    20e0:	b29b      	uxth	r3, r3
    20e2:	f994 1000 	ldrsb.w	r1, [r4]
    20e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    20ea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    20ee:	2900      	cmp	r1, #0
    20f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    20f4:	bfb4      	ite	lt
    20f6:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    20fa:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    20fe:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    2102:	441d      	add	r5, r3
    2104:	4650      	mov	r0, sl
    2106:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    210a:	9100      	str	r1, [sp, #0]
    210c:	4659      	mov	r1, fp
    210e:	f003 fcff 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2112:	782b      	ldrb	r3, [r5, #0]
    2114:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    2118:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    211c:	702b      	strb	r3, [r5, #0]
    211e:	786a      	ldrb	r2, [r5, #1]
    2120:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    2124:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2128:	706a      	strb	r2, [r5, #1]
    212a:	78ab      	ldrb	r3, [r5, #2]
    212c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    2130:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2134:	70ab      	strb	r3, [r5, #2]
    2136:	4620      	mov	r0, r4
    2138:	f7fe fb36 	bl	7a8 <strip_sync(LEDStruct&)>
    213c:	e790      	b.n	2060 <juggle(LEDStruct&)+0x110>
    213e:	4d56      	ldr	r5, [pc, #344]	; (2298 <juggle(LEDStruct&)+0x348>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2140:	f880 323e 	strb.w	r3, [r0, #574]	; 0x23e
    2144:	882b      	ldrh	r3, [r5, #0]
    2146:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    214a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    214e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2152:	3119      	adds	r1, #25
    2154:	b289      	uxth	r1, r1
    2156:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    215a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    215e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2162:	3019      	adds	r0, #25
    2164:	b280      	uxth	r0, r0
    2166:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    216a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    216e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2172:	3319      	adds	r3, #25
    2174:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2178:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    217c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2180:	3219      	adds	r2, #25
    2182:	b292      	uxth	r2, r2
    2184:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2188:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    218c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2190:	3619      	adds	r6, #25
    2192:	b2b6      	uxth	r6, r6
    2194:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    2198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    219c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    21a0:	3319      	adds	r3, #25
    21a2:	b29b      	uxth	r3, r3
    21a4:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    21a8:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    21ac:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    21b0:	f10e 0e19 	add.w	lr, lr, #25
    21b4:	fa1f fe8e 	uxth.w	lr, lr
    21b8:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    21bc:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    21c0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    21c4:	3719      	adds	r7, #25
    21c6:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    21c8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    21cc:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    21d0:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    21d2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    21d6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    21da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    21de:	b2d2      	uxtb	r2, r2
    21e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    21e4:	eb06 2616 	add.w	r6, r6, r6, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    21e8:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    21ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    21f0:	119b      	asrs	r3, r3, #6
    21f2:	ea4f 18e2 	mov.w	r8, r2, asr #7
	leds.juggle_beat		 = jb;
    21f6:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    21f8:	f10c 0c19 	add.w	ip, ip, #25
    21fc:	fa1f fc8c 	uxth.w	ip, ip
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2200:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
    2204:	eb06 0646 	add.w	r6, r6, r6, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2208:	f108 0301 	add.w	r3, r8, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    220c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2210:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2214:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    2218:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    221c:	11b6      	asrs	r6, r6, #6
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    221e:	f3ce 1e42 	ubfx	lr, lr, #5, #3
    2222:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2226:	f884 3241 	strb.w	r3, [r4, #577]	; 0x241
    222a:	eb0c 231c 	add.w	r3, ip, ip, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    222e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2232:	3608      	adds	r6, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2234:	b2d2      	uxtb	r2, r2
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2236:	f10e 0e01 	add.w	lr, lr, #1

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    223a:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    223e:	f884 1246 	strb.w	r1, [r4, #582]	; 0x246
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2242:	f3c3 13c0 	ubfx	r3, r3, #7, #1
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2246:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2248:	f884 0247 	strb.w	r0, [r4, #583]	; 0x247
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    224c:	f884 6242 	strb.w	r6, [r4, #578]	; 0x242
	leds.juggle_fade		 = jf;
    2250:	f884 2243 	strb.w	r2, [r4, #579]	; 0x243
	leds.juggle_diff		 = jd;
    2254:	f884 e244 	strb.w	lr, [r4, #580]	; 0x244
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2258:	f8a5 c000 	strh.w	ip, [r5]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    225c:	f884 31d6 	strb.w	r3, [r4, #470]	; 0x1d6
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2260:	f884 7245 	strb.w	r7, [r4, #581]	; 0x245
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2264:	f884 123f 	strb.w	r1, [r4, #575]	; 0x23f
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2268:	f884 123b 	strb.w	r1, [r4, #571]	; 0x23b
    226c:	e67d      	b.n	1f6a <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    226e:	2e00      	cmp	r6, #0
    2270:	f000 80a8 	beq.w	23c4 <juggle(LEDStruct&)+0x474>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2274:	2b00      	cmp	r3, #0
    2276:	f000 8210 	beq.w	269a <juggle(LEDStruct&)+0x74a>
    227a:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    227e:	f8df 901c 	ldr.w	r9, [pc, #28]	; 229c <juggle(LEDStruct&)+0x34c>
    2282:	f8df 801c 	ldr.w	r8, [pc, #28]	; 22a0 <juggle(LEDStruct&)+0x350>
    2286:	4f03      	ldr	r7, [pc, #12]	; (2294 <juggle(LEDStruct&)+0x344>)
    2288:	2600      	movs	r6, #0
    228a:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    228e:	f204 1bd9 	addw	fp, r4, #473	; 0x1d9
    2292:	e073      	b.n	237c <juggle(LEDStruct&)+0x42c>
    2294:	00009060 	.word	0x00009060
    2298:	1fff8742 	.word	0x1fff8742
    229c:	1fff9d60 	.word	0x1fff9d60
    22a0:	000098f4 	.word	0x000098f4
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    22a4:	f894 31d6 	ldrb.w	r3, [r4, #470]	; 0x1d6
    22a8:	2b00      	cmp	r3, #0
    22aa:	f000 82ba 	beq.w	2822 <juggle(LEDStruct&)+0x8d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22ae:	f8d9 3000 	ldr.w	r3, [r9]
    22b2:	9306      	str	r3, [sp, #24]
	return ret;
    22b4:	9806      	ldr	r0, [sp, #24]
    22b6:	f894 3242 	ldrb.w	r3, [r4, #578]	; 0x242
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    22ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    22be:	fb01 0016 	mls	r0, r1, r6, r0
    22c2:	021b      	lsls	r3, r3, #8
    22c4:	f44f 718c 	mov.w	r1, #280	; 0x118
    22c8:	fb01 f303 	mul.w	r3, r1, r3
    22cc:	fb03 f000 	mul.w	r0, r3, r0
    22d0:	f3c0 400e 	ubfx	r0, r0, #16, #15
    22d4:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    22d8:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    22da:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    22de:	d503      	bpl.n	22e8 <juggle(LEDStruct&)+0x398>
    22e0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    22e4:	3307      	adds	r3, #7
    22e6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    22e8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    22ea:	f3c3 0146 	ubfx	r1, r3, #1, #7
    22ee:	f818 e005 	ldrb.w	lr, [r8, r5]
    22f2:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    22f6:	68a5      	ldr	r5, [r4, #8]
    22f8:	fb0e 3301 	mla	r3, lr, r1, r3
    22fc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    22fe:	0401      	lsls	r1, r0, #16
    2300:	bf48      	it	mi
    2302:	425b      	negmi	r3, r3
    2304:	b21b      	sxth	r3, r3
    2306:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    230a:	f994 1000 	ldrsb.w	r1, [r4]
    230e:	2096      	movs	r0, #150	; 0x96
    2310:	b29b      	uxth	r3, r3
    2312:	fb00 f303 	mul.w	r3, r0, r3
    2316:	2900      	cmp	r1, #0
    2318:	ea4f 4313 	mov.w	r3, r3, lsr #16
    231c:	bfb4      	ite	lt
    231e:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2322:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2326:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    232a:	441d      	add	r5, r3
    232c:	4650      	mov	r0, sl
    232e:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    2332:	9100      	str	r1, [sp, #0]
    2334:	4659      	mov	r1, fp
    2336:	f003 fbeb 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    233a:	782b      	ldrb	r3, [r5, #0]
    233c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    2340:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2344:	702b      	strb	r3, [r5, #0]
    2346:	786a      	ldrb	r2, [r5, #1]
    2348:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    234c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2350:	706a      	strb	r2, [r5, #1]
    2352:	78ab      	ldrb	r3, [r5, #2]
    2354:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    2358:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    235c:	70ab      	strb	r3, [r5, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    235e:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    2362:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2366:	f894 1241 	ldrb.w	r1, [r4, #577]	; 0x241
    236a:	3601      	adds	r6, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    236c:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    236e:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2370:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2372:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2374:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2378:	f240 818f 	bls.w	269a <juggle(LEDStruct&)+0x74a>
				if (leds.this_dir) {
    237c:	f894 31d7 	ldrb.w	r3, [r4, #471]	; 0x1d7
    2380:	2b00      	cmp	r3, #0
    2382:	d18f      	bne.n	22a4 <juggle(LEDStruct&)+0x354>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2384:	f894 31d6 	ldrb.w	r3, [r4, #470]	; 0x1d6
    2388:	2b00      	cmp	r3, #0
    238a:	f000 818f 	beq.w	26ac <juggle(LEDStruct&)+0x75c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    238e:	f8d9 3000 	ldr.w	r3, [r9]
    2392:	9308      	str	r3, [sp, #32]
	return ret;
    2394:	9808      	ldr	r0, [sp, #32]
    2396:	f894 3242 	ldrb.w	r3, [r4, #578]	; 0x242
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    239a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    239e:	fb01 0016 	mls	r0, r1, r6, r0
    23a2:	021b      	lsls	r3, r3, #8
    23a4:	f44f 718c 	mov.w	r1, #280	; 0x118
    23a8:	fb01 f303 	mul.w	r3, r1, r3
    23ac:	fb03 f000 	mul.w	r0, r3, r0
    23b0:	f3c0 400e 	ubfx	r0, r0, #16, #15
    23b4:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
    23b8:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    23ba:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    23bc:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    23c0:	d592      	bpl.n	22e8 <juggle(LEDStruct&)+0x398>
    23c2:	e78d      	b.n	22e0 <juggle(LEDStruct&)+0x390>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23c4:	2b00      	cmp	r3, #0
    23c6:	f000 8168 	beq.w	269a <juggle(LEDStruct&)+0x74a>
    23ca:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    23ce:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 26a4 <juggle(LEDStruct&)+0x754>
    23d2:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 26a8 <juggle(LEDStruct&)+0x758>
    23d6:	4fb2      	ldr	r7, [pc, #712]	; (26a0 <juggle(LEDStruct&)+0x750>)
    23d8:	f204 1bd9 	addw	fp, r4, #473	; 0x1d9
    23dc:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    23e0:	e06a      	b.n	24b8 <juggle(LEDStruct&)+0x568>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    23e2:	f894 11d6 	ldrb.w	r1, [r4, #470]	; 0x1d6
    23e6:	2900      	cmp	r1, #0
    23e8:	f000 8236 	beq.w	2858 <juggle(LEDStruct&)+0x908>
    23ec:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    23f0:	4433      	add	r3, r6
    23f2:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23f4:	f8d9 1000 	ldr.w	r1, [r9]
    23f8:	910a      	str	r1, [sp, #40]	; 0x28

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    23fa:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    23fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    23fe:	bf9c      	itt	ls
    2400:	021b      	lslls	r3, r3, #8
    2402:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2404:	fb0a f000 	mul.w	r0, sl, r0
    2408:	fb03 f000 	mul.w	r0, r3, r0
    240c:	f3c0 400e 	ubfx	r0, r0, #16, #15
    2410:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2414:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2416:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    241a:	d503      	bpl.n	2424 <juggle(LEDStruct&)+0x4d4>
    241c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2420:	3307      	adds	r3, #7
    2422:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2424:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2426:	f3c3 0146 	ubfx	r1, r3, #1, #7
    242a:	f818 e005 	ldrb.w	lr, [r8, r5]
    242e:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    2432:	68a5      	ldr	r5, [r4, #8]
    2434:	fb0e 3301 	mla	r3, lr, r1, r3
    2438:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    243a:	0401      	lsls	r1, r0, #16
    243c:	bf48      	it	mi
    243e:	425b      	negmi	r3, r3
    2440:	b21b      	sxth	r3, r3
    2442:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2446:	f994 1000 	ldrsb.w	r1, [r4]
    244a:	2096      	movs	r0, #150	; 0x96
    244c:	b29b      	uxth	r3, r3
    244e:	fb00 f303 	mul.w	r3, r0, r3
    2452:	2900      	cmp	r1, #0
    2454:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2458:	bfb4      	ite	lt
    245a:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    245e:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2462:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    2466:	441d      	add	r5, r3
    2468:	a809      	add	r0, sp, #36	; 0x24
    246a:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    246e:	9100      	str	r1, [sp, #0]
    2470:	4659      	mov	r1, fp
    2472:	f003 fb4d 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2476:	782b      	ldrb	r3, [r5, #0]
    2478:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    247c:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2480:	702b      	strb	r3, [r5, #0]
    2482:	786a      	ldrb	r2, [r5, #1]
    2484:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    2488:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    248c:	706a      	strb	r2, [r5, #1]
    248e:	78ab      	ldrb	r3, [r5, #2]
    2490:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    2494:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2498:	70ab      	strb	r3, [r5, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    249a:	f894 1240 	ldrb.w	r1, [r4, #576]	; 0x240
    249e:	f894 2244 	ldrb.w	r2, [r4, #580]	; 0x244
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    24a2:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
    24a6:	3601      	adds	r6, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    24a8:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    24aa:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    24ac:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    24ae:	42b3      	cmp	r3, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    24b0:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    24b4:	f240 80f1 	bls.w	269a <juggle(LEDStruct&)+0x74a>
				if (leds.this_dir) {
    24b8:	f894 11d7 	ldrb.w	r1, [r4, #471]	; 0x1d7
    24bc:	2900      	cmp	r1, #0
    24be:	d190      	bne.n	23e2 <juggle(LEDStruct&)+0x492>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    24c0:	f894 11d6 	ldrb.w	r1, [r4, #470]	; 0x1d6
    24c4:	2900      	cmp	r1, #0
    24c6:	f000 814f 	beq.w	2768 <juggle(LEDStruct&)+0x818>
    24ca:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    24ce:	4433      	add	r3, r6
    24d0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24d2:	f8d9 1000 	ldr.w	r1, [r9]
    24d6:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    24d8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    24da:	980c      	ldr	r0, [sp, #48]	; 0x30
    24dc:	bf9c      	itt	ls
    24de:	021b      	lslls	r3, r3, #8
    24e0:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    24e2:	fb0a f000 	mul.w	r0, sl, r0
    24e6:	fb03 f000 	mul.w	r0, r3, r0
    24ea:	f3c0 400e 	ubfx	r0, r0, #16, #15
    24ee:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
    24f2:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    24f4:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    24f6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    24fa:	d593      	bpl.n	2424 <juggle(LEDStruct&)+0x4d4>
    24fc:	e78e      	b.n	241c <juggle(LEDStruct&)+0x4cc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    24fe:	2b00      	cmp	r3, #0
    2500:	f000 80cb 	beq.w	269a <juggle(LEDStruct&)+0x74a>
    2504:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    2508:	f8df 9198 	ldr.w	r9, [pc, #408]	; 26a4 <juggle(LEDStruct&)+0x754>
    250c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 26a8 <juggle(LEDStruct&)+0x758>
    2510:	4f63      	ldr	r7, [pc, #396]	; (26a0 <juggle(LEDStruct&)+0x750>)
    2512:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    2516:	f204 1bd9 	addw	fp, r4, #473	; 0x1d9
    251a:	e061      	b.n	25e0 <juggle(LEDStruct&)+0x690>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    251c:	f8d9 3000 	ldr.w	r3, [r9]
    2520:	9304      	str	r3, [sp, #16]
	return ret;
    2522:	9904      	ldr	r1, [sp, #16]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2524:	f894 3242 	ldrb.w	r3, [r4, #578]	; 0x242
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    2528:	f44f 708c 	mov.w	r0, #280	; 0x118
    252c:	fb00 f101 	mul.w	r1, r0, r1
    2530:	021b      	lsls	r3, r3, #8
    2532:	fb01 f303 	mul.w	r3, r1, r3
    2536:	0370      	lsls	r0, r6, #13
    2538:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    253c:	b280      	uxth	r0, r0
    253e:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2540:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2544:	d503      	bpl.n	254e <juggle(LEDStruct&)+0x5fe>
    2546:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    254a:	3307      	adds	r3, #7
    254c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    254e:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2550:	f3c3 0146 	ubfx	r1, r3, #1, #7
    2554:	f818 e005 	ldrb.w	lr, [r8, r5]
    2558:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    255c:	68a5      	ldr	r5, [r4, #8]
    255e:	fb0e 3301 	mla	r3, lr, r1, r3
    2562:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2564:	0401      	lsls	r1, r0, #16
    2566:	bf48      	it	mi
    2568:	425b      	negmi	r3, r3
    256a:	b21b      	sxth	r3, r3
    256c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2570:	f994 1000 	ldrsb.w	r1, [r4]
    2574:	2096      	movs	r0, #150	; 0x96
    2576:	b29b      	uxth	r3, r3
    2578:	fb00 f303 	mul.w	r3, r0, r3
    257c:	2900      	cmp	r1, #0
    257e:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2582:	bfb4      	ite	lt
    2584:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2588:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    258c:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    2590:	441d      	add	r5, r3
    2592:	4650      	mov	r0, sl
    2594:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    2598:	9100      	str	r1, [sp, #0]
    259a:	4659      	mov	r1, fp
    259c:	f003 fab8 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    25a0:	782b      	ldrb	r3, [r5, #0]
    25a2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    25a6:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    25aa:	702b      	strb	r3, [r5, #0]
    25ac:	786a      	ldrb	r2, [r5, #1]
    25ae:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    25b2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    25b6:	706a      	strb	r2, [r5, #1]
    25b8:	78ab      	ldrb	r3, [r5, #2]
    25ba:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    25be:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    25c2:	70ab      	strb	r3, [r5, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    25c4:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    25c8:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    25cc:	f894 1241 	ldrb.w	r1, [r4, #577]	; 0x241
    25d0:	3601      	adds	r6, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    25d2:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    25d4:	b2f6      	uxtb	r6, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    25d6:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    25d8:	42b1      	cmp	r1, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    25da:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    25de:	d95c      	bls.n	269a <juggle(LEDStruct&)+0x74a>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    25e0:	f894 31d6 	ldrb.w	r3, [r4, #470]	; 0x1d6
    25e4:	2b00      	cmp	r3, #0
    25e6:	d199      	bne.n	251c <juggle(LEDStruct&)+0x5cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25e8:	f8d9 3000 	ldr.w	r3, [r9]
    25ec:	9305      	str	r3, [sp, #20]
	return ret;
    25ee:	9905      	ldr	r1, [sp, #20]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    25f0:	f894 3242 	ldrb.w	r3, [r4, #578]	; 0x242
    25f4:	f44f 708c 	mov.w	r0, #280	; 0x118
    25f8:	fb00 f101 	mul.w	r1, r0, r1
    25fc:	021b      	lsls	r3, r3, #8
    25fe:	fb01 f303 	mul.w	r3, r1, r3
    2602:	0370      	lsls	r0, r6, #13
    2604:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    2608:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    260a:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    260c:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2610:	d503      	bpl.n	261a <juggle(LEDStruct&)+0x6ca>
    2612:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2616:	3307      	adds	r3, #7
    2618:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    261a:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    261c:	f3c3 0146 	ubfx	r1, r3, #1, #7
    2620:	f818 e005 	ldrb.w	lr, [r8, r5]
    2624:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    2628:	68a5      	ldr	r5, [r4, #8]
    262a:	fb0e 3301 	mla	r3, lr, r1, r3
    262e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2630:	0401      	lsls	r1, r0, #16
    2632:	bf48      	it	mi
    2634:	425b      	negmi	r3, r3
    2636:	b21b      	sxth	r3, r3
    2638:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    263c:	b29b      	uxth	r3, r3
    263e:	f994 1000 	ldrsb.w	r1, [r4]
    2642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2646:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    264a:	2900      	cmp	r1, #0
    264c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2650:	bfb4      	ite	lt
    2652:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2656:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    265a:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    265e:	441d      	add	r5, r3
    2660:	4650      	mov	r0, sl
    2662:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    2666:	9100      	str	r1, [sp, #0]
    2668:	4659      	mov	r1, fp
    266a:	f003 fa51 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    266e:	782b      	ldrb	r3, [r5, #0]
    2670:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    2674:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2678:	702b      	strb	r3, [r5, #0]
    267a:	786a      	ldrb	r2, [r5, #1]
    267c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    2680:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2684:	706a      	strb	r2, [r5, #1]
    2686:	78ab      	ldrb	r3, [r5, #2]
    2688:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    268c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2690:	70ab      	strb	r3, [r5, #2]
    2692:	4620      	mov	r0, r4
    2694:	f7fe f888 	bl	7a8 <strip_sync(LEDStruct&)>
    2698:	e794      	b.n	25c4 <juggle(LEDStruct&)+0x674>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    269a:	b00f      	add	sp, #60	; 0x3c
    269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26a0:	00009060 	.word	0x00009060
    26a4:	1fff9d60 	.word	0x1fff9d60
    26a8:	000098f4 	.word	0x000098f4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26ac:	f8d9 3000 	ldr.w	r3, [r9]
    26b0:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    26b2:	9809      	ldr	r0, [sp, #36]	; 0x24
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    26b4:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    26b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    26bc:	fb03 0316 	mls	r3, r3, r6, r0
    26c0:	0209      	lsls	r1, r1, #8
    26c2:	f44f 708c 	mov.w	r0, #280	; 0x118
    26c6:	fb00 f001 	mul.w	r0, r0, r1
    26ca:	fb03 f000 	mul.w	r0, r3, r0
    26ce:	f3c0 400e 	ubfx	r0, r0, #16, #15
    26d2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
    26d6:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    26d8:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    26da:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    26de:	d503      	bpl.n	26e8 <juggle(LEDStruct&)+0x798>
    26e0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    26e4:	3307      	adds	r3, #7
    26e6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    26e8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    26ea:	f3c3 0146 	ubfx	r1, r3, #1, #7
    26ee:	f818 e005 	ldrb.w	lr, [r8, r5]
    26f2:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    26f6:	68a5      	ldr	r5, [r4, #8]
    26f8:	fb0e 3301 	mla	r3, lr, r1, r3
    26fc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    26fe:	0401      	lsls	r1, r0, #16
    2700:	bf48      	it	mi
    2702:	425b      	negmi	r3, r3
    2704:	b21b      	sxth	r3, r3
    2706:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    270a:	b29b      	uxth	r3, r3
    270c:	f994 1000 	ldrsb.w	r1, [r4]
    2710:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2714:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2718:	2900      	cmp	r1, #0
    271a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    271e:	bfb4      	ite	lt
    2720:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2724:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    2728:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    272c:	441d      	add	r5, r3
    272e:	4650      	mov	r0, sl
    2730:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    2734:	9100      	str	r1, [sp, #0]
    2736:	4659      	mov	r1, fp
    2738:	f003 f9ea 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    273c:	782b      	ldrb	r3, [r5, #0]
    273e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    2742:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2746:	702b      	strb	r3, [r5, #0]
    2748:	786a      	ldrb	r2, [r5, #1]
    274a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    274e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2752:	706a      	strb	r2, [r5, #1]
    2754:	78ab      	ldrb	r3, [r5, #2]
    2756:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    275a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    275e:	70ab      	strb	r3, [r5, #2]
    2760:	4620      	mov	r0, r4
    2762:	f7fe f821 	bl	7a8 <strip_sync(LEDStruct&)>
    2766:	e5fa      	b.n	235e <juggle(LEDStruct&)+0x40e>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2768:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    276c:	4433      	add	r3, r6
    276e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2770:	f8d9 1000 	ldr.w	r1, [r9]
    2774:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2776:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2778:	980d      	ldr	r0, [sp, #52]	; 0x34
    277a:	bf9c      	itt	ls
    277c:	021b      	lslls	r3, r3, #8
    277e:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2780:	fb0a f000 	mul.w	r0, sl, r0
    2784:	fb03 f000 	mul.w	r0, r3, r0
    2788:	f3c0 400e 	ubfx	r0, r0, #16, #15
    278c:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
    2790:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2792:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2794:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2798:	d503      	bpl.n	27a2 <juggle(LEDStruct&)+0x852>
    279a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    279e:	3307      	adds	r3, #7
    27a0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    27a2:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    27a4:	f3c3 0146 	ubfx	r1, r3, #1, #7
    27a8:	f818 e005 	ldrb.w	lr, [r8, r5]
    27ac:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    27b0:	68a5      	ldr	r5, [r4, #8]
    27b2:	fb0e 3301 	mla	r3, lr, r1, r3
    27b6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    27b8:	0401      	lsls	r1, r0, #16
    27ba:	bf48      	it	mi
    27bc:	425b      	negmi	r3, r3
    27be:	b21b      	sxth	r3, r3
    27c0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    27c4:	b29b      	uxth	r3, r3
    27c6:	f994 1000 	ldrsb.w	r1, [r4]
    27ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27ce:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    27d2:	2900      	cmp	r1, #0
    27d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
    27d8:	bfb4      	ite	lt
    27da:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    27de:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    27e2:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    27e6:	441d      	add	r5, r3
    27e8:	a809      	add	r0, sp, #36	; 0x24
    27ea:	f894 31d4 	ldrb.w	r3, [r4, #468]	; 0x1d4
    27ee:	9100      	str	r1, [sp, #0]
    27f0:	4659      	mov	r1, fp
    27f2:	f003 f98d 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    27f6:	782b      	ldrb	r3, [r5, #0]
    27f8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    27fc:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2800:	702b      	strb	r3, [r5, #0]
    2802:	786a      	ldrb	r2, [r5, #1]
    2804:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    2808:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    280c:	706a      	strb	r2, [r5, #1]
    280e:	78ab      	ldrb	r3, [r5, #2]
    2810:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    2814:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2818:	70ab      	strb	r3, [r5, #2]
    281a:	4620      	mov	r0, r4
    281c:	f7fd ffc4 	bl	7a8 <strip_sync(LEDStruct&)>
    2820:	e63b      	b.n	249a <juggle(LEDStruct&)+0x54a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2822:	f8d9 3000 	ldr.w	r3, [r9]
    2826:	9307      	str	r3, [sp, #28]
	return ret;
    2828:	9807      	ldr	r0, [sp, #28]
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    282a:	f894 3242 	ldrb.w	r3, [r4, #578]	; 0x242
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    282e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2832:	fb01 0016 	mls	r0, r1, r6, r0
    2836:	021b      	lsls	r3, r3, #8
    2838:	f44f 718c 	mov.w	r1, #280	; 0x118
    283c:	fb01 f303 	mul.w	r3, r1, r3
    2840:	fb03 f000 	mul.w	r0, r3, r0
    2844:	f3c0 400e 	ubfx	r0, r0, #16, #15
    2848:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    284c:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    284e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2852:	f57f af49 	bpl.w	26e8 <juggle(LEDStruct&)+0x798>
    2856:	e743      	b.n	26e0 <juggle(LEDStruct&)+0x790>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2858:	f894 1242 	ldrb.w	r1, [r4, #578]	; 0x242
    285c:	4433      	add	r3, r6
    285e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2860:	f8d9 1000 	ldr.w	r1, [r9]
    2864:	910b      	str	r1, [sp, #44]	; 0x2c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2866:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2868:	980b      	ldr	r0, [sp, #44]	; 0x2c
    286a:	bf9c      	itt	ls
    286c:	021b      	lslls	r3, r3, #8
    286e:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2870:	fb0a f000 	mul.w	r0, sl, r0
    2874:	fb03 f000 	mul.w	r0, r3, r0
    2878:	f3c0 400e 	ubfx	r0, r0, #16, #15
    287c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2880:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2882:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2886:	d58c      	bpl.n	27a2 <juggle(LEDStruct&)+0x852>
    2888:	e787      	b.n	279a <juggle(LEDStruct&)+0x84a>
    288a:	bf00      	nop

0000288c <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    288c:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f

    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    2890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2894:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2896:	2b00      	cmp	r3, #0
    2898:	d051      	beq.n	293e <rainbow_march(LEDStruct&)+0xb2>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    289a:	f894 31d7 	ldrb.w	r3, [r4, #471]	; 0x1d7
    289e:	b9ab      	cbnz	r3, 28cc <rainbow_march(LEDStruct&)+0x40>
    28a0:	f894 224a 	ldrb.w	r2, [r4, #586]	; 0x24a
    28a4:	f894 3248 	ldrb.w	r3, [r4, #584]	; 0x248
    28a8:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    28aa:	f894 324b 	ldrb.w	r3, [r4, #587]	; 0x24b
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    28ae:	b2d2      	uxtb	r2, r2
    28b0:	f884 224a 	strb.w	r2, [r4, #586]	; 0x24a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    28b4:	b9b3      	cbnz	r3, 28e4 <rainbow_march(LEDStruct&)+0x58>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    28b6:	f894 31d6 	ldrb.w	r3, [r4, #470]	; 0x1d6
    28ba:	b3ab      	cbz	r3, 2928 <rainbow_march(LEDStruct&)+0x9c>
    28bc:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
    28c0:	68a0      	ldr	r0, [r4, #8]
    28c2:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    28c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    28c8:	f003 b810 	b.w	58ec <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    28cc:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
    28d0:	f894 2248 	ldrb.w	r2, [r4, #584]	; 0x248
    28d4:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    28d6:	f894 324b 	ldrb.w	r3, [r4, #587]	; 0x24b
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    28da:	b2d2      	uxtb	r2, r2
    28dc:	f884 224a 	strb.w	r2, [r4, #586]	; 0x24a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    28e0:	2b00      	cmp	r3, #0
    28e2:	d0e8      	beq.n	28b6 <rainbow_march(LEDStruct&)+0x2a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    28e4:	2125      	movs	r1, #37	; 0x25
    28e6:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
    28ea:	68a0      	ldr	r0, [r4, #8]
    28ec:	f002 fffe 	bl	58ec <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    28f0:	f06f 01dd 	mvn.w	r1, #221	; 0xdd
    28f4:	e00d      	b.n	2912 <rainbow_march(LEDStruct&)+0x86>
    28f6:	f101 02de 	add.w	r2, r1, #222	; 0xde
    28fa:	441a      	add	r2, r3
    28fc:	1a5b      	subs	r3, r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28fe:	7810      	ldrb	r0, [r2, #0]
    2900:	7018      	strb	r0, [r3, #0]
        g = rhs.g;
    2902:	7850      	ldrb	r0, [r2, #1]
    2904:	7058      	strb	r0, [r3, #1]
    2906:	3103      	adds	r1, #3
        b = rhs.b;
    2908:	7892      	ldrb	r2, [r2, #2]
    290a:	709a      	strb	r2, [r3, #2]

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    290c:	f111 0f6f 	cmn.w	r1, #111	; 0x6f
    2910:	d063      	beq.n	29da <rainbow_march(LEDStruct&)+0x14e>
    2912:	f994 2000 	ldrsb.w	r2, [r4]
    2916:	68a3      	ldr	r3, [r4, #8]
    2918:	2a00      	cmp	r2, #0
    291a:	daec      	bge.n	28f6 <rainbow_march(LEDStruct&)+0x6a>
    291c:	f06f 02dd 	mvn.w	r2, #221	; 0xdd
    2920:	1a52      	subs	r2, r2, r1
    2922:	441a      	add	r2, r3
    2924:	440b      	add	r3, r1
    2926:	e7ea      	b.n	28fe <rainbow_march(LEDStruct&)+0x72>
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    2928:	68a0      	ldr	r0, [r4, #8]
    292a:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
    292e:	214b      	movs	r1, #75	; 0x4b
    2930:	f002 ffdc 	bl	58ec <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2934:	4620      	mov	r0, r4
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    2936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    293a:	f7fd bf35 	b.w	7a8 <strip_sync(LEDStruct&)>
    293e:	4929      	ldr	r1, [pc, #164]	; (29e4 <rainbow_march(LEDStruct&)+0x158>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2940:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
    2944:	880b      	ldrh	r3, [r1, #0]
    2946:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    294a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    294e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2952:	3319      	adds	r3, #25
    2954:	b29b      	uxth	r3, r3
    2956:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    295a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    295e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2962:	3219      	adds	r2, #25
    2964:	b292      	uxth	r2, r2
    2966:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    296a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    296e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2972:	3519      	adds	r5, #25
    2974:	b2ad      	uxth	r5, r5
    2976:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    297a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    297e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2982:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2986:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    298a:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    298c:	b2d2      	uxtb	r2, r2
    298e:	3619      	adds	r6, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2990:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    2994:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2998:	b2b6      	uxth	r6, r6

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    299a:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    299c:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    299e:	eb06 2716 	add.w	r7, r6, r6, lsr #8

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    29a2:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    29a4:	3201      	adds	r2, #1
    29a6:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    29aa:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.this_dir = td;
    29ae:	f3c5 15c0 	ubfx	r5, r5, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    29b2:	f880 3249 	strb.w	r3, [r0, #585]	; 0x249
    leds.rainbow_rot    = rr;
    29b6:	f880 2248 	strb.w	r2, [r0, #584]	; 0x248
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    29ba:	2301      	movs	r3, #1
	leds.mode_type = RAINBOW_MARCH;
    29bc:	2205      	movs	r2, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    29be:	f880 71d6 	strb.w	r7, [r0, #470]	; 0x1d6
	leds.this_dir = td;
    29c2:	f880 51d7 	strb.w	r5, [r0, #471]	; 0x1d7
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    29c6:	f880 323f 	strb.w	r3, [r0, #575]	; 0x23f
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    29ca:	f880 324b 	strb.w	r3, [r0, #587]	; 0x24b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    29ce:	f880 223e 	strb.w	r2, [r0, #574]	; 0x23e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    29d2:	800e      	strh	r6, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    29d4:	f7fe ff54 	bl	1880 <LEDDebug(LEDStruct&)>
    29d8:	e75f      	b.n	289a <rainbow_march(LEDStruct&)+0xe>

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
    29da:	4620      	mov	r0, r4
	}
}
    29dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
    29e0:	f7fd bee2 	b.w	7a8 <strip_sync(LEDStruct&)>
    29e4:	1fff8742 	.word	0x1fff8742

000029e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    29e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    29ea:	f890 423d 	ldrb.w	r4, [r0, #573]	; 0x23d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    29ee:	f89d 6014 	ldrb.w	r6, [sp, #20]
    29f2:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    29f6:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    29f8:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    29fa:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    29fc:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    29fe:	f880 523e 	strb.w	r5, [r0, #574]	; 0x23e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    2a02:	f880 723f 	strb.w	r7, [r0, #575]	; 0x23f
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2a06:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2a0a:	d940      	bls.n	2a8e <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa6>
	else { leds.use_palette = 0; }
    2a0c:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    2a0e:	f880 624c 	strb.w	r6, [r0, #588]	; 0x24c
	leds.fire_cooling		= fc;
    2a12:	f880 524e 	strb.w	r5, [r0, #590]	; 0x24e
	leds.fire_sync			= fy;
    2a16:	f880 12e8 	strb.w	r1, [r0, #744]	; 0x2e8
	leds.fire_mirror		= fm;
    2a1a:	f880 22e9 	strb.w	r2, [r0, #745]	; 0x2e9
	leds.torch_diff			= td;
    2a1e:	f880 e2eb 	strb.w	lr, [r0, #747]	; 0x2eb

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    2a22:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2a26:	2a00      	cmp	r2, #0
    2a28:	d13f      	bne.n	2aaa <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2a2a:	234b      	movs	r3, #75	; 0x4b
    2a2c:	f880 22e7 	strb.w	r2, [r0, #743]	; 0x2e7
    2a30:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6

	if (!leds.fire_sync) {
    2a34:	bb51      	cbnz	r1, 2a8c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    2a36:	4c20      	ldr	r4, [pc, #128]	; (2ab8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    2a38:	8823      	ldrh	r3, [r4, #0]
    2a3a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a42:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a46:	3319      	adds	r3, #25
    2a48:	b29b      	uxth	r3, r3
    2a4a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2a52:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2a56:	3219      	adds	r2, #25
    2a58:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a5a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2a5e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
		leds.fire_sparking2 = fs - 10 + random8(21);
    2a62:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
    2a64:	b2c9      	uxtb	r1, r1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2a66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
    2a6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2a6e:	3e0a      	subs	r6, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
    2a70:	3d0a      	subs	r5, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2a72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
    2a76:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2a7a:	eb06 2323 	add.w	r3, r6, r3, asr #8
		leds.fire_cooling2	= fc - 10 + random8(21);
    2a7e:	eb05 2121 	add.w	r1, r5, r1, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2a82:	f880 324d 	strb.w	r3, [r0, #589]	; 0x24d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a86:	8022      	strh	r2, [r4, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
    2a88:	f880 124f 	strb.w	r1, [r0, #591]	; 0x24f
    2a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2a8e:	f880 723b 	strb.w	r7, [r0, #571]	; 0x23b
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    2a92:	f880 624c 	strb.w	r6, [r0, #588]	; 0x24c
	leds.fire_cooling		= fc;
    2a96:	f880 524e 	strb.w	r5, [r0, #590]	; 0x24e
	leds.fire_sync			= fy;
    2a9a:	f880 12e8 	strb.w	r1, [r0, #744]	; 0x2e8
	leds.fire_mirror		= fm;
    2a9e:	f880 22e9 	strb.w	r2, [r0, #745]	; 0x2e9
	leds.torch_diff			= td;
    2aa2:	f880 e2eb 	strb.w	lr, [r0, #747]	; 0x2eb
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2aa6:	2a00      	cmp	r2, #0
    2aa8:	d0c2      	beq.n	2a30 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    2aaa:	2325      	movs	r3, #37	; 0x25
    2aac:	f880 32e6 	strb.w	r3, [r0, #742]	; 0x2e6
    2ab0:	f880 32e7 	strb.w	r3, [r0, #743]	; 0x2e7
    2ab4:	e7be      	b.n	2a34 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    2ab6:	bf00      	nop
    2ab8:	1fff8742 	.word	0x1fff8742

00002abc <fire(LEDStruct&)>:
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    2abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    2ac0:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
    2ac4:	4dd1      	ldr	r5, [pc, #836]	; (2e0c <fire(LEDStruct&)+0x350>)
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    2ac6:	b086      	sub	sp, #24
    2ac8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    2aca:	2b00      	cmp	r3, #0
    2acc:	f000 822f 	beq.w	2f2e <fire(LEDStruct&)+0x472>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2ad0:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	f000 82f3 	beq.w	30c0 <fire(LEDStruct&)+0x604>
    2ada:	f894 124e 	ldrb.w	r1, [r4, #590]	; 0x24e
    2ade:	882a      	ldrh	r2, [r5, #0]
    2ae0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2ae4:	004f      	lsls	r7, r1, #1
    2ae6:	f203 2e4f 	addw	lr, r3, #591	; 0x24f
    2aea:	fb97 f7f3 	sdiv	r7, r7, r3
    2aee:	3702      	adds	r7, #2
    2af0:	b2ff      	uxtb	r7, r7
    2af2:	44a6      	add	lr, r4
    2af4:	f204 264f 	addw	r6, r4, #591	; 0x24f
    2af8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2afc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2b00:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2b04:	3219      	adds	r2, #25
    2b06:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b08:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2b0c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    2b10:	b2c9      	uxtb	r1, r1
    2b12:	fb11 f107 	smulbb	r1, r1, r7
    2b16:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2b1a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2b1e:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2b20:	7031      	strb	r1, [r6, #0]
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2b22:	d1e9      	bne.n	2af8 <fire(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    2b24:	f894 62e8 	ldrb.w	r6, [r4, #744]	; 0x2e8
    2b28:	802a      	strh	r2, [r5, #0]
    2b2a:	2e00      	cmp	r6, #0
    2b2c:	f000 8172 	beq.w	2e14 <fire(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2b30:	f1a3 0e03 	sub.w	lr, r3, #3
    2b34:	f1be 0f01 	cmp.w	lr, #1
    2b38:	f04f 0c01 	mov.w	ip, #1
    2b3c:	dd1a      	ble.n	2b74 <fire(LEDStruct&)+0xb8>
    2b3e:	f503 7013 	add.w	r0, r3, #588	; 0x24c
    2b42:	f203 274e 	addw	r7, r3, #590	; 0x24e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2b46:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 2e10 <fire(LEDStruct&)+0x354>
    2b4a:	4420      	add	r0, r4
    2b4c:	4427      	add	r7, r4
    2b4e:	f504 7814 	add.w	r8, r4, #592	; 0x250
    2b52:	7801      	ldrb	r1, [r0, #0]
    2b54:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    2b58:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    2b5c:	fb89 a601 	smull	sl, r6, r9, r1
    2b60:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2b64:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2b66:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2b6a:	d1f2      	bne.n	2b52 <fire(LEDStruct&)+0x96>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    2b6c:	f1bc 0f00 	cmp.w	ip, #0
    2b70:	f000 8133 	beq.w	2dda <fire(LEDStruct&)+0x31e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b74:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2b78:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2b7c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2b80:	3219      	adds	r2, #25
    2b82:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    2b84:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    2b88:	f894 624c 	ldrb.w	r6, [r4, #588]	; 0x24c
    2b8c:	802a      	strh	r2, [r5, #0]
    2b8e:	b2c9      	uxtb	r1, r1
    2b90:	428e      	cmp	r6, r1
    2b92:	489e      	ldr	r0, [pc, #632]	; (2e0c <fire(LEDStruct&)+0x350>)
    2b94:	d926      	bls.n	2be4 <fire(LEDStruct&)+0x128>
    2b96:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2b9a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2b9e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2ba2:	3219      	adds	r2, #25
    2ba4:	b292      	uxth	r2, r2
    2ba6:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2baa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2bae:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2bb2:	3619      	adds	r6, #25
    2bb4:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2bb6:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    2bba:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2bbe:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2bc0:	b2d2      	uxtb	r2, r2
    2bc2:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    2bc6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    2bca:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2bce:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    2bd2:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2bd4:	8006      	strh	r6, [r0, #0]
    2bd6:	3960      	subs	r1, #96	; 0x60
    2bd8:	f892 0250 	ldrb.w	r0, [r2, #592]	; 0x250
    2bdc:	fa80 f051 	uqadd8	r0, r0, r1
    2be0:	f882 0250 	strb.w	r0, [r2, #592]	; 0x250
	}

	if (!leds.fire_sync) {
    2be4:	f1bc 0f00 	cmp.w	ip, #0
    2be8:	d112      	bne.n	2c10 <fire(LEDStruct&)+0x154>
    2bea:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    2bec:	f894 624d 	ldrb.w	r6, [r4, #589]	; 0x24d
    2bf0:	4986      	ldr	r1, [pc, #536]	; (2e0c <fire(LEDStruct&)+0x350>)
    2bf2:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2bf6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2bfa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2bfe:	3219      	adds	r2, #25
    2c00:	b292      	uxth	r2, r2
    2c02:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    2c06:	b2c0      	uxtb	r0, r0
    2c08:	4286      	cmp	r6, r0
    2c0a:	802a      	strh	r2, [r5, #0]
    2c0c:	f200 8166 	bhi.w	2edc <fire(LEDStruct&)+0x420>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    2c10:	f894 71d7 	ldrb.w	r7, [r4, #471]	; 0x1d7
    2c14:	2f00      	cmp	r7, #0
    2c16:	f040 80b9 	bne.w	2d8c <fire(LEDStruct&)+0x2d0>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	f000 8247 	beq.w	30ae <fire(LEDStruct&)+0x5f2>
    2c20:	f204 264f 	addw	r6, r4, #591	; 0x24f
    2c24:	46b0      	mov	r8, r6
    2c26:	ad05      	add	r5, sp, #20
    2c28:	f994 1000 	ldrsb.w	r1, [r4]
    2c2c:	68a2      	ldr	r2, [r4, #8]
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    2c2e:	3b01      	subs	r3, #1
    2c30:	1bdb      	subs	r3, r3, r7
    2c32:	2900      	cmp	r1, #0
    2c34:	bfb4      	ite	lt
    2c36:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2c3a:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    2c3e:	eb02 0903 	add.w	r9, r2, r3
    2c42:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    2c46:	4628      	mov	r0, r5
    2c48:	f002 ff40 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2c4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2c50:	f889 3000 	strb.w	r3, [r9]
        g = rhs.g;
    2c54:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2c58:	f889 3001 	strb.w	r3, [r9, #1]
        b = rhs.b;
    2c5c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2c60:	f889 3002 	strb.w	r3, [r9, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    2c64:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2c68:	3701      	adds	r7, #1
    2c6a:	42bb      	cmp	r3, r7
    2c6c:	dcdc      	bgt.n	2c28 <fire(LEDStruct&)+0x16c>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2c6e:	f894 22e9 	ldrb.w	r2, [r4, #745]	; 0x2e9
    2c72:	b33a      	cbz	r2, 2cc4 <fire(LEDStruct&)+0x208>
		if (leds.this_dir) {
    2c74:	f894 21d7 	ldrb.w	r2, [r4, #471]	; 0x1d7
    2c78:	2a00      	cmp	r2, #0
    2c7a:	f040 81c1 	bne.w	3000 <fire(LEDStruct&)+0x544>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2c7e:	4690      	mov	r8, r2
    2c80:	2b00      	cmp	r3, #0
    2c82:	f000 8217 	beq.w	30b4 <fire(LEDStruct&)+0x5f8>
    2c86:	f994 1000 	ldrsb.w	r1, [r4]
    2c8a:	68a2      	ldr	r2, [r4, #8]
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    2c8c:	4443      	add	r3, r8
    2c8e:	2900      	cmp	r1, #0
    2c90:	bfb4      	ite	lt
    2c92:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2c96:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    2c9a:	18d7      	adds	r7, r2, r3
    2c9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2ca0:	4628      	mov	r0, r5
    2ca2:	f002 ff13 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ca6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2caa:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    2cac:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2cb0:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    2cb2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2cb6:	70bb      	strb	r3, [r7, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2cb8:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2cbc:	f108 0801 	add.w	r8, r8, #1
    2cc0:	4543      	cmp	r3, r8
    2cc2:	dce0      	bgt.n	2c86 <fire(LEDStruct&)+0x1ca>
    2cc4:	f894 22e8 	ldrb.w	r2, [r4, #744]	; 0x2e8
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2cc8:	2a00      	cmp	r2, #0
    2cca:	f040 81c2 	bne.w	3052 <fire(LEDStruct&)+0x596>
	else {
		if (leds.this_dir) {
    2cce:	f894 21d7 	ldrb.w	r2, [r4, #471]	; 0x1d7
    2cd2:	2a00      	cmp	r2, #0
    2cd4:	f040 80d8 	bne.w	2e88 <fire(LEDStruct&)+0x3cc>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d054      	beq.n	2d86 <fire(LEDStruct&)+0x2ca>
    2cdc:	f204 269a 	addw	r6, r4, #666	; 0x29a
    2ce0:	46b0      	mov	r8, r6
    2ce2:	2700      	movs	r7, #0
    2ce4:	ad05      	add	r5, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    2ce6:	f894 32e7 	ldrb.w	r3, [r4, #743]	; 0x2e7
    2cea:	f994 1000 	ldrsb.w	r1, [r4]
    2cee:	68a2      	ldr	r2, [r4, #8]
    2cf0:	334b      	adds	r3, #75	; 0x4b
    2cf2:	443b      	add	r3, r7
    2cf4:	2900      	cmp	r1, #0
    2cf6:	bfb4      	ite	lt
    2cf8:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2cfc:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    2d00:	eb02 0903 	add.w	r9, r2, r3
    2d04:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    2d08:	4628      	mov	r0, r5
    2d0a:	f002 fedf 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2d12:	f889 3000 	strb.w	r3, [r9]
        g = rhs.g;
    2d16:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2d1a:	f889 3001 	strb.w	r3, [r9, #1]
        b = rhs.b;
    2d1e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2d22:	f889 3002 	strb.w	r3, [r9, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2d26:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2d2a:	3701      	adds	r7, #1
    2d2c:	42bb      	cmp	r3, r7
    2d2e:	dcda      	bgt.n	2ce6 <fire(LEDStruct&)+0x22a>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    2d30:	f894 22e9 	ldrb.w	r2, [r4, #745]	; 0x2e9
    2d34:	b33a      	cbz	r2, 2d86 <fire(LEDStruct&)+0x2ca>
			if (leds.this_dir) {
    2d36:	f894 21d7 	ldrb.w	r2, [r4, #471]	; 0x1d7
    2d3a:	2a00      	cmp	r2, #0
    2d3c:	f040 818f 	bne.w	305e <fire(LEDStruct&)+0x5a2>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    2d40:	4690      	mov	r8, r2
    2d42:	b303      	cbz	r3, 2d86 <fire(LEDStruct&)+0x2ca>
    2d44:	f994 2000 	ldrsb.w	r2, [r4]
    2d48:	68a7      	ldr	r7, [r4, #8]
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    2d4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2d4e:	334b      	adds	r3, #75	; 0x4b
    2d50:	ebc8 0303 	rsb	r3, r8, r3
    2d54:	2a00      	cmp	r2, #0
    2d56:	bfb4      	ite	lt
    2d58:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    2d5c:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    2d60:	441f      	add	r7, r3
    2d62:	4628      	mov	r0, r5
    2d64:	f002 feb2 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d68:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2d6c:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    2d6e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2d72:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    2d74:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2d78:	70bb      	strb	r3, [r7, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    2d7a:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2d7e:	f108 0801 	add.w	r8, r8, #1
    2d82:	4543      	cmp	r3, r8
    2d84:	dcde      	bgt.n	2d44 <fire(LEDStruct&)+0x288>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    2d86:	b006      	add	sp, #24
    2d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d070      	beq.n	2e72 <fire(LEDStruct&)+0x3b6>
    2d90:	f204 264f 	addw	r6, r4, #591	; 0x24f
    2d94:	46b1      	mov	r9, r6
    2d96:	f04f 0800 	mov.w	r8, #0
    2d9a:	ad05      	add	r5, sp, #20
    2d9c:	f994 2000 	ldrsb.w	r2, [r4]
    2da0:	68a3      	ldr	r3, [r4, #8]
			leds.led_data[j] = HeatColor(leds.heat[j]);
    2da2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2da6:	2a00      	cmp	r2, #0
    2da8:	bfb4      	ite	lt
    2daa:	eba8 0788 	sublt.w	r7, r8, r8, lsl #2
    2dae:	eb08 0748 	addge.w	r7, r8, r8, lsl #1
    2db2:	441f      	add	r7, r3
    2db4:	4628      	mov	r0, r5
    2db6:	f002 fe89 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2dbe:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    2dc0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2dc4:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    2dc6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2dca:	70bb      	strb	r3, [r7, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2dcc:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2dd0:	f108 0801 	add.w	r8, r8, #1
    2dd4:	4543      	cmp	r3, r8
    2dd6:	dce1      	bgt.n	2d9c <fire(LEDStruct&)+0x2e0>
    2dd8:	e749      	b.n	2c6e <fire(LEDStruct&)+0x1b2>
    2dda:	f203 2697 	addw	r6, r3, #663	; 0x297
    2dde:	f203 2799 	addw	r7, r3, #665	; 0x299
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    2de2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 2e10 <fire(LEDStruct&)+0x354>
    2de6:	4426      	add	r6, r4
    2de8:	4427      	add	r7, r4
    2dea:	7831      	ldrb	r1, [r6, #0]
    2dec:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    2df0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2df4:	fb88 9001 	smull	r9, r0, r8, r1
    2df8:	f10e 3eff 	add.w	lr, lr, #4294967295
    2dfc:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2e00:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    2e04:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2e08:	d1ef      	bne.n	2dea <fire(LEDStruct&)+0x32e>
    2e0a:	e6b3      	b.n	2b74 <fire(LEDStruct&)+0xb8>
    2e0c:	1fff8742 	.word	0x1fff8742
    2e10:	55555556 	.word	0x55555556
    2e14:	f894 124f 	ldrb.w	r1, [r4, #591]	; 0x24f
    2e18:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2e1c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    2e20:	fb9e fef3 	sdiv	lr, lr, r3
    2e24:	f10e 0e02 	add.w	lr, lr, #2
    2e28:	fa5f fe8e 	uxtb.w	lr, lr
    2e2c:	f204 279a 	addw	r7, r4, #666	; 0x29a
    2e30:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2e34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2e38:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2e3c:	3219      	adds	r2, #25
    2e3e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e40:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2e44:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    2e48:	b2c9      	uxtb	r1, r1
    2e4a:	fb11 f10e 	smulbb	r1, r1, lr
    2e4e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2e52:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    2e54:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2e58:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    2e5a:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2e5c:	dbe8      	blt.n	2e30 <fire(LEDStruct&)+0x374>
    2e5e:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2e60:	f1a3 0e03 	sub.w	lr, r3, #3
    2e64:	f1be 0f01 	cmp.w	lr, #1
    2e68:	f04f 0c00 	mov.w	ip, #0
    2e6c:	f73f ae67 	bgt.w	2b3e <fire(LEDStruct&)+0x82>
    2e70:	e680      	b.n	2b74 <fire(LEDStruct&)+0xb8>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2e72:	f894 32e9 	ldrb.w	r3, [r4, #745]	; 0x2e9
    2e76:	2b00      	cmp	r3, #0
    2e78:	f040 811c 	bne.w	30b4 <fire(LEDStruct&)+0x5f8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2e7c:	f1bc 0f00 	cmp.w	ip, #0
    2e80:	f040 80e7 	bne.w	3052 <fire(LEDStruct&)+0x596>
    2e84:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2e88:	2b00      	cmp	r3, #0
    2e8a:	f43f af7c 	beq.w	2d86 <fire(LEDStruct&)+0x2ca>
    2e8e:	f204 269a 	addw	r6, r4, #666	; 0x29a
    2e92:	46b2      	mov	sl, r6
    2e94:	f46f 79df 	mvn.w	r9, #446	; 0x1be
    2e98:	f04f 0800 	mov.w	r8, #0
    2e9c:	ad05      	add	r5, sp, #20
    2e9e:	f994 3000 	ldrsb.w	r3, [r4]
    2ea2:	68a7      	ldr	r7, [r4, #8]
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    2ea4:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	bfb4      	ite	lt
    2eac:	444f      	addlt	r7, r9
    2eae:	ebc9 0707 	rsbge	r7, r9, r7
    2eb2:	4628      	mov	r0, r5
    2eb4:	f002 fe0a 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2eb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2ebc:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    2ebe:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2ec2:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    2ec4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2ec8:	70bb      	strb	r3, [r7, #2]
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2eca:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    2ece:	f108 0801 	add.w	r8, r8, #1
    2ed2:	4543      	cmp	r3, r8
    2ed4:	f109 0903 	add.w	r9, r9, #3
    2ed8:	dce1      	bgt.n	2e9e <fire(LEDStruct&)+0x3e2>
    2eda:	e729      	b.n	2d30 <fire(LEDStruct&)+0x274>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2edc:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2ee0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2ee4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2ee8:	3219      	adds	r2, #25
    2eea:	b292      	uxth	r2, r2
    2eec:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2ef0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2ef4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2ef8:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2efa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2efe:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2f00:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f02:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2f06:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2f0a:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    2f0c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2f10:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    2f14:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    2f18:	f892 629b 	ldrb.w	r6, [r2, #667]	; 0x29b
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f1c:	800d      	strh	r5, [r1, #0]
    2f1e:	1201      	asrs	r1, r0, #8
    2f20:	3960      	subs	r1, #96	; 0x60
    2f22:	4630      	mov	r0, r6
    2f24:	fa80 f051 	uqadd8	r0, r0, r1
    2f28:	f882 029b 	strb.w	r0, [r2, #667]	; 0x29b
    2f2c:	e670      	b.n	2c10 <fire(LEDStruct&)+0x154>
    2f2e:	882b      	ldrh	r3, [r5, #0]
    2f30:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2f34:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2f38:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2f3c:	3119      	adds	r1, #25
    2f3e:	b289      	uxth	r1, r1
    2f40:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2f44:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2f48:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f4c:	3219      	adds	r2, #25
    2f4e:	b292      	uxth	r2, r2
    2f50:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2f54:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2f58:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2f5c:	f10e 0e19 	add.w	lr, lr, #25
    2f60:	fa1f fe8e 	uxth.w	lr, lr
    2f64:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    2f68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    2f6c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2f70:	3619      	adds	r6, #25
    2f72:	b2b6      	uxth	r6, r6
    2f74:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    2f78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2f7c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2f80:	3319      	adds	r3, #25
    2f82:	b29b      	uxth	r3, r3
    2f84:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2f88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f8c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    2f90:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f94:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f98:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
}


void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    2f9c:	b2f6      	uxtb	r6, r6
    2f9e:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2fa2:	3719      	adds	r7, #25
    2fa4:	b2db      	uxtb	r3, r3
    2fa6:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    2faa:	b2bf      	uxth	r7, r7
    2fac:	11b6      	asrs	r6, r6, #6
    2fae:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    2fb2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2fb6:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    2fba:	119b      	asrs	r3, r3, #6
    2fbc:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2fc0:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    2fc4:	333c      	adds	r3, #60	; 0x3c
    2fc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    2fca:	f3c6 1681 	ubfx	r6, r6, #6, #2
    2fce:	fa5f f883 	uxtb.w	r8, r3
    2fd2:	fa5f fc8c 	uxtb.w	ip, ip
    2fd6:	3601      	adds	r6, #1
    2fd8:	f10e 0314 	add.w	r3, lr, #20
    2fdc:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    2fe0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2fe4:	f8cd c000 	str.w	ip, [sp]
    2fe8:	f8cd 8004 	str.w	r8, [sp, #4]
    2fec:	9602      	str	r6, [sp, #8]
    2fee:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    2ff2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    2ff6:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2ff8:	802f      	strh	r7, [r5, #0]
    2ffa:	f7ff fcf5 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    2ffe:	e567      	b.n	2ad0 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3000:	2b00      	cmp	r3, #0
    3002:	d057      	beq.n	30b4 <fire(LEDStruct&)+0x5f8>
    3004:	f06f 09dd 	mvn.w	r9, #221	; 0xdd
    3008:	f04f 0800 	mov.w	r8, #0
    300c:	f994 3000 	ldrsb.w	r3, [r4]
    3010:	68a7      	ldr	r7, [r4, #8]
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    3012:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    3016:	2b00      	cmp	r3, #0
    3018:	bfb4      	ite	lt
    301a:	444f      	addlt	r7, r9
    301c:	ebc9 0707 	rsbge	r7, r9, r7
    3020:	4628      	mov	r0, r5
    3022:	f002 fd53 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3026:	f89d 3014 	ldrb.w	r3, [sp, #20]
    302a:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    302c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3030:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    3032:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3036:	70bb      	strb	r3, [r7, #2]
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3038:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    303c:	f108 0801 	add.w	r8, r8, #1
    3040:	4543      	cmp	r3, r8
    3042:	f109 0903 	add.w	r9, r9, #3
    3046:	dce1      	bgt.n	300c <fire(LEDStruct&)+0x550>
    3048:	f894 22e8 	ldrb.w	r2, [r4, #744]	; 0x2e8
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    304c:	2a00      	cmp	r2, #0
    304e:	f43f ae3e 	beq.w	2cce <fire(LEDStruct&)+0x212>
    3052:	4620      	mov	r0, r4
    3054:	f7fd fba8 	bl	7a8 <strip_sync(LEDStruct&)>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3058:	b006      	add	sp, #24
    305a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    305e:	2b00      	cmp	r3, #0
    3060:	f43f ae91 	beq.w	2d86 <fire(LEDStruct&)+0x2ca>
    3064:	f06f 09e0 	mvn.w	r9, #224	; 0xe0
    3068:	f04f 0800 	mov.w	r8, #0
    306c:	f994 3000 	ldrsb.w	r3, [r4]
    3070:	68a7      	ldr	r7, [r4, #8]
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    3072:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    3076:	2b00      	cmp	r3, #0
    3078:	bfb4      	ite	lt
    307a:	444f      	addlt	r7, r9
    307c:	ebc9 0707 	rsbge	r7, r9, r7
    3080:	4628      	mov	r0, r5
    3082:	f002 fd23 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3086:	f89d 3014 	ldrb.w	r3, [sp, #20]
    308a:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    308c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3090:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    3092:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3096:	70bb      	strb	r3, [r7, #2]
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    3098:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    309c:	f108 0801 	add.w	r8, r8, #1
    30a0:	4543      	cmp	r3, r8
    30a2:	f1a9 0903 	sub.w	r9, r9, #3
    30a6:	dce1      	bgt.n	306c <fire(LEDStruct&)+0x5b0>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    30a8:	b006      	add	sp, #24
    30aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    30ae:	f894 32e9 	ldrb.w	r3, [r4, #745]	; 0x2e9
    30b2:	b163      	cbz	r3, 30ce <fire(LEDStruct&)+0x612>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    30b4:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
    30b8:	2b00      	cmp	r3, #0
    30ba:	f43f ae64 	beq.w	2d86 <fire(LEDStruct&)+0x2ca>
    30be:	e7c8      	b.n	3052 <fire(LEDStruct&)+0x596>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    30c0:	f894 22e8 	ldrb.w	r2, [r4, #744]	; 0x2e8
    30c4:	b10a      	cbz	r2, 30ca <fire(LEDStruct&)+0x60e>
    30c6:	882a      	ldrh	r2, [r5, #0]
    30c8:	e532      	b.n	2b30 <fire(LEDStruct&)+0x74>
    30ca:	882a      	ldrh	r2, [r5, #0]
    30cc:	e6c8      	b.n	2e60 <fire(LEDStruct&)+0x3a4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    30ce:	f1bc 0f00 	cmp.w	ip, #0
    30d2:	d1be      	bne.n	3052 <fire(LEDStruct&)+0x596>
    30d4:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
    30d8:	e5fe      	b.n	2cd8 <fire(LEDStruct&)+0x21c>
    30da:	bf00      	nop

000030dc <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    30dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    30e0:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
    30e4:	4dd2      	ldr	r5, [pc, #840]	; (3430 <torch(LEDStruct&)+0x354>)





void torch(LEDStruct& leds) {
    30e6:	b087      	sub	sp, #28
    30e8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    30ea:	2b00      	cmp	r3, #0
    30ec:	f000 81e1 	beq.w	34b2 <torch(LEDStruct&)+0x3d6>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    30f0:	f894 c2e6 	ldrb.w	ip, [r4, #742]	; 0x2e6
    30f4:	4661      	mov	r1, ip
    30f6:	f1bc 0f00 	cmp.w	ip, #0
    30fa:	f000 8243 	beq.w	3584 <torch(LEDStruct&)+0x4a8>
    30fe:	f894 224e 	ldrb.w	r2, [r4, #590]	; 0x24e
    3102:	882b      	ldrh	r3, [r5, #0]
    3104:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3108:	0057      	lsls	r7, r2, #1
    310a:	f20c 2e4f 	addw	lr, ip, #591	; 0x24f
    310e:	fb97 f7fc 	sdiv	r7, r7, ip
    3112:	3702      	adds	r7, #2
    3114:	b2ff      	uxtb	r7, r7
    3116:	44a6      	add	lr, r4
    3118:	f204 264f 	addw	r6, r4, #591	; 0x24f
    311c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3120:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3124:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3128:	3319      	adds	r3, #25
    312a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    312c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3130:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3134:	b2d2      	uxtb	r2, r2
    3136:	fb12 f207 	smulbb	r2, r2, r7
    313a:	eba0 2212 	sub.w	r2, r0, r2, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    313e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3142:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3144:	7032      	strb	r2, [r6, #0]


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3146:	d1e9      	bne.n	311c <torch(LEDStruct&)+0x40>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3148:	f894 62e8 	ldrb.w	r6, [r4, #744]	; 0x2e8
    314c:	802b      	strh	r3, [r5, #0]
    314e:	2e00      	cmp	r6, #0
    3150:	f000 8140 	beq.w	33d4 <torch(LEDStruct&)+0x2f8>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3154:	f1ac 0703 	sub.w	r7, ip, #3
    3158:	2f01      	cmp	r7, #1
    315a:	f04f 0901 	mov.w	r9, #1
    315e:	dd1a      	ble.n	3196 <torch(LEDStruct&)+0xba>
    3160:	f50c 7013 	add.w	r0, ip, #588	; 0x24c
    3164:	f20c 264e 	addw	r6, ip, #590	; 0x24e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3168:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 3434 <torch(LEDStruct&)+0x358>
    316c:	4420      	add	r0, r4
    316e:	4426      	add	r6, r4
    3170:	f504 7e14 	add.w	lr, r4, #592	; 0x250
    3174:	7802      	ldrb	r2, [r0, #0]
    3176:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    317a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
    317e:	fb88 ba02 	smull	fp, sl, r8, r2
    3182:	ebaa 72e2 	sub.w	r2, sl, r2, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3186:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3188:	f806 2d01 	strb.w	r2, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    318c:	d1f2      	bne.n	3174 <torch(LEDStruct&)+0x98>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    318e:	f1b9 0f00 	cmp.w	r9, #0
    3192:	f000 8108 	beq.w	33a6 <torch(LEDStruct&)+0x2ca>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3196:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    319a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    319e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    31a2:	3319      	adds	r3, #25
    31a4:	b29b      	uxth	r3, r3
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    31a6:	eb03 2013 	add.w	r0, r3, r3, lsr #8
    31aa:	f894 624c 	ldrb.w	r6, [r4, #588]	; 0x24c
    31ae:	802b      	strh	r3, [r5, #0]
    31b0:	b2c0      	uxtb	r0, r0
    31b2:	4286      	cmp	r6, r0
    31b4:	4a9e      	ldr	r2, [pc, #632]	; (3430 <torch(LEDStruct&)+0x354>)
    31b6:	d928      	bls.n	320a <torch(LEDStruct&)+0x12e>
    31b8:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    31bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    31c0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    31c4:	3319      	adds	r3, #25
    31c6:	b29b      	uxth	r3, r3
    31c8:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    31cc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    31d0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    31d4:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31d6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31da:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31dc:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31de:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    31e6:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    31e8:	eb04 2323 	add.w	r3, r4, r3, asr #8
    31ec:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31f0:	8016      	strh	r6, [r2, #0]
    31f2:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    31f6:	f893 6250 	ldrb.w	r6, [r3, #592]	; 0x250
    31fa:	1200      	asrs	r0, r0, #8
    31fc:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    3200:	4630      	mov	r0, r6
    3202:	fa80 f052 	uqadd8	r0, r0, r2
    3206:	f883 0250 	strb.w	r0, [r3, #592]	; 0x250
	}
	if (!leds.fire_sync) {
    320a:	f1b9 0f00 	cmp.w	r9, #0
    320e:	d112      	bne.n	3236 <torch(LEDStruct&)+0x15a>
    3210:	882b      	ldrh	r3, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    3212:	f894 624d 	ldrb.w	r6, [r4, #589]	; 0x24d
    3216:	4a86      	ldr	r2, [pc, #536]	; (3430 <torch(LEDStruct&)+0x354>)
    3218:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    321c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3220:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3224:	3319      	adds	r3, #25
    3226:	b29b      	uxth	r3, r3
    3228:	eb03 2013 	add.w	r0, r3, r3, lsr #8
    322c:	b2c0      	uxtb	r0, r0
    322e:	4286      	cmp	r6, r0
    3230:	802b      	strh	r3, [r5, #0]
    3232:	f200 8101 	bhi.w	3438 <torch(LEDStruct&)+0x35c>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3236:	f1bc 0f00 	cmp.w	ip, #0
    323a:	f000 81a8 	beq.w	358e <torch(LEDStruct&)+0x4b2>
    323e:	f204 284f 	addw	r8, r4, #591	; 0x24f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3242:	2700      	movs	r7, #0
    3244:	ad05      	add	r5, sp, #20
    3246:	f994 3000 	ldrsb.w	r3, [r4]
    324a:	68a6      	ldr	r6, [r4, #8]
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    324c:	f1c1 014b 	rsb	r1, r1, #75	; 0x4b
    3250:	4439      	add	r1, r7
    3252:	2b00      	cmp	r3, #0
    3254:	bfb4      	ite	lt
    3256:	eba1 0181 	sublt.w	r1, r1, r1, lsl #2
    325a:	eb01 0141 	addge.w	r1, r1, r1, lsl #1
    325e:	440e      	add	r6, r1
    3260:	4628      	mov	r0, r5
    3262:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    3266:	f002 fc31 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    326a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    326e:	7033      	strb	r3, [r6, #0]
        g = rhs.g;
    3270:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3274:	7073      	strb	r3, [r6, #1]
        b = rhs.b;
    3276:	f89d 3016 	ldrb.w	r3, [sp, #22]
    327a:	70b3      	strb	r3, [r6, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    327c:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
    3280:	3701      	adds	r7, #1
    3282:	42b9      	cmp	r1, r7
    3284:	dcdf      	bgt.n	3246 <torch(LEDStruct&)+0x16a>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3286:	f894 72e8 	ldrb.w	r7, [r4, #744]	; 0x2e8
    328a:	2f00      	cmp	r7, #0
    328c:	f040 810b 	bne.w	34a6 <torch(LEDStruct&)+0x3ca>
    3290:	f204 289a 	addw	r8, r4, #666	; 0x29a
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3294:	2900      	cmp	r1, #0
    3296:	f000 817e 	beq.w	3596 <torch(LEDStruct&)+0x4ba>
    329a:	f994 3000 	ldrsb.w	r3, [r4]
    329e:	68a6      	ldr	r6, [r4, #8]
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    32a0:	314a      	adds	r1, #74	; 0x4a
    32a2:	1bc9      	subs	r1, r1, r7
    32a4:	2b00      	cmp	r3, #0
    32a6:	bfb4      	ite	lt
    32a8:	eba1 0181 	sublt.w	r1, r1, r1, lsl #2
    32ac:	eb01 0141 	addge.w	r1, r1, r1, lsl #1
    32b0:	440e      	add	r6, r1
    32b2:	4628      	mov	r0, r5
    32b4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    32b8:	f002 fc08 	bl	5acc <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    32c0:	7033      	strb	r3, [r6, #0]
        g = rhs.g;
    32c2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    32c6:	7073      	strb	r3, [r6, #1]
        b = rhs.b;
    32c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    32cc:	70b3      	strb	r3, [r6, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    32ce:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
    32d2:	3701      	adds	r7, #1
    32d4:	42b9      	cmp	r1, r7
    32d6:	dce0      	bgt.n	329a <torch(LEDStruct&)+0x1be>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    32d8:	f1c1 034b 	rsb	r3, r1, #75	; 0x4b
    32dc:	2b00      	cmp	r3, #0
    32de:	dd53      	ble.n	3388 <torch(LEDStruct&)+0x2ac>
    32e0:	ad05      	add	r5, sp, #20
    32e2:	f204 1bd9 	addw	fp, r4, #473	; 0x1d9
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    32e6:	f46f 79df 	mvn.w	r9, #446	; 0x1be
    32ea:	2600      	movs	r6, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    32ec:	f04f 0a01 	mov.w	sl, #1
    32f0:	f994 2000 	ldrsb.w	r2, [r4]
    32f4:	68a3      	ldr	r3, [r4, #8]
    32f6:	2a00      	cmp	r2, #0
    32f8:	f894 22ea 	ldrb.w	r2, [r4, #746]	; 0x2ea
    32fc:	f8cd a000 	str.w	sl, [sp]
    3300:	bfb4      	ite	lt
    3302:	eba6 0786 	sublt.w	r7, r6, r6, lsl #2
    3306:	eb06 0746 	addge.w	r7, r6, r6, lsl #1
    330a:	ebc6 2806 	rsb	r8, r6, r6, lsl #8
    330e:	fb98 f1f1 	sdiv	r1, r8, r1
    3312:	440a      	add	r2, r1
    3314:	441f      	add	r7, r3
    3316:	b2d2      	uxtb	r2, r2
    3318:	23ff      	movs	r3, #255	; 0xff
    331a:	4659      	mov	r1, fp
    331c:	4628      	mov	r0, r5
    331e:	f002 fbf7 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3322:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3326:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    3328:	f89d 3015 	ldrb.w	r3, [sp, #21]
    332c:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    332e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3332:	70bb      	strb	r3, [r7, #2]
    3334:	f994 3000 	ldrsb.w	r3, [r4]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3338:	f894 12ea 	ldrb.w	r1, [r4, #746]	; 0x2ea
    333c:	68a7      	ldr	r7, [r4, #8]
    333e:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
    3342:	fb98 f8f2 	sdiv	r8, r8, r2
    3346:	2b00      	cmp	r3, #0
    3348:	eb08 0201 	add.w	r2, r8, r1
    334c:	bfb4      	ite	lt
    334e:	444f      	addlt	r7, r9
    3350:	ebc9 0707 	rsbge	r7, r9, r7
    3354:	23ff      	movs	r3, #255	; 0xff
    3356:	4659      	mov	r1, fp
    3358:	f8cd a000 	str.w	sl, [sp]
    335c:	b2d2      	uxtb	r2, r2
    335e:	4628      	mov	r0, r5
    3360:	f002 fbd6 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3364:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3368:	703b      	strb	r3, [r7, #0]
        g = rhs.g;
    336a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    336e:	707b      	strb	r3, [r7, #1]
        b = rhs.b;
    3370:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3374:	70bb      	strb	r3, [r7, #2]
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3376:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
    337a:	3601      	adds	r6, #1
    337c:	f1c1 034b 	rsb	r3, r1, #75	; 0x4b
    3380:	42b3      	cmp	r3, r6
    3382:	f109 0903 	add.w	r9, r9, #3
    3386:	dcb3      	bgt.n	32f0 <torch(LEDStruct&)+0x214>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3388:	f894 31d7 	ldrb.w	r3, [r4, #471]	; 0x1d7
    338c:	2b00      	cmp	r3, #0
    338e:	f040 8080 	bne.w	3492 <torch(LEDStruct&)+0x3b6>
	else			   { leds.torch_index -= leds.torch_diff; }
    3392:	f894 32ea 	ldrb.w	r3, [r4, #746]	; 0x2ea
    3396:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
    339a:	1a9b      	subs	r3, r3, r2
    339c:	f884 32ea 	strb.w	r3, [r4, #746]	; 0x2ea
}
    33a0:	b007      	add	sp, #28
    33a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33a6:	f20c 2697 	addw	r6, ip, #663	; 0x297
    33aa:	f20c 2e99 	addw	lr, ip, #665	; 0x299
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    33ae:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3434 <torch(LEDStruct&)+0x358>
    33b2:	4426      	add	r6, r4
    33b4:	44a6      	add	lr, r4
    33b6:	7832      	ldrb	r2, [r6, #0]
    33b8:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    33bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    33c0:	fb88 a002 	smull	sl, r0, r8, r2
    33c4:	3f01      	subs	r7, #1
    33c6:	eba0 72e2 	sub.w	r2, r0, r2, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    33ca:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    33cc:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    33d0:	d1f1      	bne.n	33b6 <torch(LEDStruct&)+0x2da>
    33d2:	e6e0      	b.n	3196 <torch(LEDStruct&)+0xba>
    33d4:	f894 224f 	ldrb.w	r2, [r4, #591]	; 0x24f
    33d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    33dc:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    33e0:	fb9e fefc 	sdiv	lr, lr, ip
    33e4:	f10e 0e02 	add.w	lr, lr, #2
    33e8:	fa5f fe8e 	uxtb.w	lr, lr
    33ec:	f204 279a 	addw	r7, r4, #666	; 0x29a
    33f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    33f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    33f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    33fc:	3319      	adds	r3, #25
    33fe:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3400:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3404:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3408:	b2d2      	uxtb	r2, r2
    340a:	fb12 f20e 	smulbb	r2, r2, lr
    340e:	eba0 2212 	sub.w	r2, r0, r2, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3412:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3414:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3418:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    341a:	703a      	strb	r2, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    341c:	dbe8      	blt.n	33f0 <torch(LEDStruct&)+0x314>
    341e:	802b      	strh	r3, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3420:	f1ac 0703 	sub.w	r7, ip, #3
    3424:	2f01      	cmp	r7, #1
    3426:	f04f 0900 	mov.w	r9, #0
    342a:	f73f ae99 	bgt.w	3160 <torch(LEDStruct&)+0x84>
    342e:	e6b2      	b.n	3196 <torch(LEDStruct&)+0xba>
    3430:	1fff8742 	.word	0x1fff8742
    3434:	55555556 	.word	0x55555556
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3438:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    343c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3440:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3444:	3319      	adds	r3, #25
    3446:	b29b      	uxth	r3, r3
    3448:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    344c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3450:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3454:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3456:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    345a:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    345c:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    345e:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3462:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3466:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3468:	eb04 2323 	add.w	r3, r4, r3, asr #8
    346c:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3470:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3474:	f893 629b 	ldrb.w	r6, [r3, #667]	; 0x29b
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3478:	8015      	strh	r5, [r2, #0]
    347a:	1202      	asrs	r2, r0, #8
    347c:	3a60      	subs	r2, #96	; 0x60
    347e:	4630      	mov	r0, r6
    3480:	fa80 f052 	uqadd8	r0, r0, r2
    3484:	f883 029b 	strb.w	r0, [r3, #667]	; 0x29b
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3488:	f1bc 0f00 	cmp.w	ip, #0
    348c:	f47f aed7 	bne.w	323e <torch(LEDStruct&)+0x162>
    3490:	e080      	b.n	3594 <torch(LEDStruct&)+0x4b8>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3492:	f894 22ea 	ldrb.w	r2, [r4, #746]	; 0x2ea
    3496:	f894 32eb 	ldrb.w	r3, [r4, #747]	; 0x2eb
    349a:	4413      	add	r3, r2
    349c:	f884 32ea 	strb.w	r3, [r4, #746]	; 0x2ea
	else			   { leds.torch_index -= leds.torch_diff; }
}
    34a0:	b007      	add	sp, #28
    34a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    34a6:	4620      	mov	r0, r4
    34a8:	f7fd f97e 	bl	7a8 <strip_sync(LEDStruct&)>
    34ac:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
    34b0:	e712      	b.n	32d8 <torch(LEDStruct&)+0x1fc>
    34b2:	882b      	ldrh	r3, [r5, #0]
    34b4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    34b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    34bc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    34c0:	3119      	adds	r1, #25
    34c2:	b289      	uxth	r1, r1
    34c4:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    34c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    34cc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    34d0:	3219      	adds	r2, #25
    34d2:	b292      	uxth	r2, r2
    34d4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    34d8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    34dc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    34e0:	f10e 0e19 	add.w	lr, lr, #25
    34e4:	fa1f fe8e 	uxth.w	lr, lr
    34e8:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    34ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    34f0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    34f4:	3619      	adds	r6, #25
    34f6:	b2b6      	uxth	r6, r6
    34f8:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    34fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3500:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3504:	3319      	adds	r3, #25
    3506:	b29b      	uxth	r3, r3
    3508:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    350c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3510:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3514:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3518:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    351c:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3520:	b2f6      	uxtb	r6, r6
    3522:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3526:	3719      	adds	r7, #25
    3528:	b2db      	uxtb	r3, r3
    352a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    352e:	b2bf      	uxth	r7, r7
    3530:	11b6      	asrs	r6, r6, #6
    3532:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3536:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    353a:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    353e:	119b      	asrs	r3, r3, #6
    3540:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3544:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3548:	333c      	adds	r3, #60	; 0x3c
    354a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    354e:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3552:	fa5f f883 	uxtb.w	r8, r3
    3556:	fa5f fc8c 	uxtb.w	ip, ip
    355a:	3601      	adds	r6, #1
    355c:	f10e 0314 	add.w	r3, lr, #20
    3560:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3564:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3568:	f8cd c000 	str.w	ip, [sp]
    356c:	f8cd 8004 	str.w	r8, [sp, #4]
    3570:	9602      	str	r6, [sp, #8]
    3572:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3576:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    357a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    357c:	802f      	strh	r7, [r5, #0]
    357e:	f7ff fa33 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3582:	e5b5      	b.n	30f0 <torch(LEDStruct&)+0x14>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3584:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
    3588:	b13b      	cbz	r3, 359a <torch(LEDStruct&)+0x4be>
    358a:	882b      	ldrh	r3, [r5, #0]
    358c:	e5e2      	b.n	3154 <torch(LEDStruct&)+0x78>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    358e:	f1b9 0f00 	cmp.w	r9, #0
    3592:	d188      	bne.n	34a6 <torch(LEDStruct&)+0x3ca>
    3594:	ad05      	add	r5, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3596:	2100      	movs	r1, #0
    3598:	e6a3      	b.n	32e2 <torch(LEDStruct&)+0x206>
    359a:	882b      	ldrh	r3, [r5, #0]
    359c:	e740      	b.n	3420 <torch(LEDStruct&)+0x344>
    359e:	bf00      	nop

000035a0 <colorwave(LEDStruct&)>:
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    35a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    35a4:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    35a8:	b08b      	sub	sp, #44	; 0x2c
    35aa:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    35ac:	2b00      	cmp	r3, #0
    35ae:	f000 81af 	beq.w	3910 <colorwave(LEDStruct&)+0x370>
    35b2:	f8b0 630c 	ldrh.w	r6, [r0, #780]	; 0x30c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35b6:	4dd1      	ldr	r5, [pc, #836]	; (38fc <colorwave(LEDStruct&)+0x35c>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    35b8:	4bd1      	ldr	r3, [pc, #836]	; (3900 <colorwave(LEDStruct&)+0x360>)
    35ba:	682a      	ldr	r2, [r5, #0]
    35bc:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    35be:	9909      	ldr	r1, [sp, #36]	; 0x24
    35c0:	fb03 f101 	mul.w	r1, r3, r1
    35c4:	0c09      	lsrs	r1, r1, #16
    35c6:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    35c8:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    35cc:	d503      	bpl.n	35d6 <colorwave(LEDStruct&)+0x36>
    35ce:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    35d2:	3307      	adds	r3, #7
    35d4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    35d6:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    35d8:	4fca      	ldr	r7, [pc, #808]	; (3904 <colorwave(LEDStruct&)+0x364>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    35da:	f8df 8330 	ldr.w	r8, [pc, #816]	; 390c <colorwave(LEDStruct&)+0x36c>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35de:	f817 e002 	ldrb.w	lr, [r7, r2]
    35e2:	f838 0012 	ldrh.w	r0, [r8, r2, lsl #1]
    35e6:	f3c3 0246 	ubfx	r2, r3, #1, #7
    35ea:	fb0e 0302 	mla	r3, lr, r2, r0

    if( theta & 0x8000 ) y = -y;
    35ee:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35f0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    35f2:	bf48      	it	mi
    35f4:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35f6:	682a      	ldr	r2, [r5, #0]
    35f8:	9208      	str	r2, [sp, #32]
    35fa:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    35fc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3600:	b29b      	uxth	r3, r3
	return ret;
    3602:	9908      	ldr	r1, [sp, #32]
    3604:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    3608:	f64d 6308 	movw	r3, #56840	; 0xde08
    360c:	fb03 f101 	mul.w	r1, r3, r1
    3610:	0c00      	lsrs	r0, r0, #16
    3612:	0c09      	lsrs	r1, r1, #16
    3614:	3060      	adds	r0, #96	; 0x60
    3616:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3618:	044a      	lsls	r2, r1, #17
    361a:	f884 02f2 	strb.w	r0, [r4, #754]	; 0x2f2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    361e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3622:	d503      	bpl.n	362c <colorwave(LEDStruct&)+0x8c>
    3624:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3628:	3307      	adds	r3, #7
    362a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    362c:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3630:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3634:	f817 c00e 	ldrb.w	ip, [r7, lr]
    3638:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    363c:	fb0c 3302 	mla	r3, ip, r2, r3
    3640:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3642:	040a      	lsls	r2, r1, #16
    3644:	bf48      	it	mi
    3646:	425b      	negmi	r3, r3
    3648:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    364a:	682a      	ldr	r2, [r5, #0]
    364c:	9207      	str	r2, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    364e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3652:	b29b      	uxth	r3, r3
    3654:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    3658:	9a07      	ldr	r2, [sp, #28]
    365a:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    365e:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    3662:	fb03 fe02 	mul.w	lr, r3, r2
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3666:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3668:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    366c:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    3670:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3672:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    3676:	f8a4 12f8 	strh.w	r1, [r4, #760]	; 0x2f8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    367a:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    367e:	d003      	beq.n	3688 <colorwave(LEDStruct&)+0xe8>
    3680:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3684:	3307      	adds	r3, #7
    3686:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3688:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    368c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3690:	f817 900c 	ldrb.w	r9, [r7, ip]
    3694:	f838 301c 	ldrh.w	r3, [r8, ip, lsl #1]
    3698:	fb09 3302 	mla	r3, r9, r2, r3

    if( theta & 0x8000 ) y = -y;
    369c:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36a0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    36a2:	bf18      	it	ne
    36a4:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36a6:	682a      	ldr	r2, [r5, #0]
    36a8:	9206      	str	r2, [sp, #24]
    36aa:	b21b      	sxth	r3, r3
    36ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    36b0:	b29b      	uxth	r3, r3
    36b2:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    36b6:	f8dd c018 	ldr.w	ip, [sp, #24]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    36ba:	f8b4 22f0 	ldrh.w	r2, [r4, #752]	; 0x2f0
    36be:	f8a4 22fa 	strh.w	r2, [r4, #762]	; 0x2fa
    36c2:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    36c6:	f647 3398 	movw	r3, #31640	; 0x7b98
    36ca:	fb03 fc0c 	mul.w	ip, r3, ip
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    36ce:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    36d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    36d6:	f10e 0e17 	add.w	lr, lr, #23
    36da:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    36de:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	if (!leds.mode_initialized) { colorwave_init(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    36e2:	f884 e2f3 	strb.w	lr, [r4, #755]	; 0x2f3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    36e6:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    36ea:	d003      	beq.n	36f4 <colorwave(LEDStruct&)+0x154>
    36ec:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    36f0:	3307      	adds	r3, #7
    36f2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    36f4:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36f8:	f3c3 0346 	ubfx	r3, r3, #1, #7
    36fc:	f817 b00a 	ldrb.w	fp, [r7, sl]
    3700:	f838 901a 	ldrh.w	r9, [r8, sl, lsl #1]
    3704:	fb0b 9903 	mla	r9, fp, r3, r9

    if( theta & 0x8000 ) y = -y;
    3708:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    370c:	682b      	ldr	r3, [r5, #0]
    370e:	9304      	str	r3, [sp, #16]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3710:	fa1f f989 	uxth.w	r9, r9

    if( theta & 0x8000 ) y = -y;
    3714:	bf18      	it	ne
    3716:	f1c9 0900 	rsbne	r9, r9, #0
	return ret;
    371a:	9b04      	ldr	r3, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    371c:	682d      	ldr	r5, [r5, #0]
    371e:	9505      	str	r5, [sp, #20]
    3720:	fa0f f989 	sxth.w	r9, r9
    3724:	f5a9 4500 	sub.w	r5, r9, #32768	; 0x8000

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3728:	f8b4 c2ee 	ldrh.w	ip, [r4, #750]	; 0x2ee
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    372c:	f8b4 b2ec 	ldrh.w	fp, [r4, #748]	; 0x2ec
    3730:	b2ad      	uxth	r5, r5
    3732:	f240 49b1 	movw	r9, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    3736:	fa1f fa83 	uxth.w	sl, r3
    373a:	fb09 f305 	mul.w	r3, r9, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    373e:	4d72      	ldr	r5, [pc, #456]	; (3908 <colorwave(LEDStruct&)+0x368>)
	return ret;
    3740:	f8dd 9014 	ldr.w	r9, [sp, #20]
    3744:	f8a4 a2fe 	strh.w	sl, [r4, #766]	; 0x2fe
	leds.deltams = leds.ms - leds.sLastMillis;
    3748:	ebcc 0c0a 	rsb	ip, ip, sl
    374c:	fa1f fc8c 	uxth.w	ip, ip
    3750:	fb05 f909 	mul.w	r9, r5, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3754:	0c1b      	lsrs	r3, r3, #16
    3756:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    375a:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    375e:	fb1c be0e 	smlabb	lr, ip, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3762:	b29d      	uxth	r5, r3
    3764:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3768:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    376c:	f8a4 52fc 	strh.w	r5, [r4, #764]	; 0x2fc

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3770:	f8a4 c300 	strh.w	ip, [r4, #768]	; 0x300
	leds.sLastMillis = leds.ms;
    3774:	f8a4 a2ee 	strh.w	sl, [r4, #750]	; 0x2ee
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3778:	f8a4 e2ec 	strh.w	lr, [r4, #748]	; 0x2ec
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    377c:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3780:	d003      	beq.n	378a <colorwave(LEDStruct&)+0x1ea>
    3782:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3786:	3307      	adds	r3, #7
    3788:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    378a:	ea4f 2b13 	mov.w	fp, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    378e:	f3c3 0a46 	ubfx	sl, r3, #1, #7
    3792:	f817 300b 	ldrb.w	r3, [r7, fp]
    3796:	f838 b01b 	ldrh.w	fp, [r8, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    379a:	f8a4 e302 	strh.w	lr, [r4, #770]	; 0x302
    379e:	fb03 b30a 	mla	r3, r3, sl, fp
    37a2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    37a4:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    37a8:	bf18      	it	ne
    37aa:	425b      	negne	r3, r3
    37ac:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    37ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    37b2:	b29b      	uxth	r3, r3
    37b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37b8:	0c1b      	lsrs	r3, r3, #16
    37ba:	3305      	adds	r3, #5
    37bc:	b29b      	uxth	r3, r3
    37be:	fb0c 2303 	mla	r3, ip, r3, r2
    37c2:	f8a4 32f0 	strh.w	r3, [r4, #752]	; 0x2f0
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    37c6:	2e00      	cmp	r6, #0
    37c8:	f000 808e 	beq.w	38e8 <colorwave(LEDStruct&)+0x348>
    37cc:	462b      	mov	r3, r5
    37ce:	f204 1ad9 	addw	sl, r4, #473	; 0x1d9
    37d2:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    37d4:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    37d8:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    37da:	441a      	add	r2, r3
    37dc:	b292      	uxth	r2, r2
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    37de:	09d3      	lsrs	r3, r2, #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    37e0:	448e      	add	lr, r1

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    37e2:	f8a4 3304 	strh.w	r3, [r4, #772]	; 0x304
			if (leds.h16_128 & 0x100) {
    37e6:	05db      	lsls	r3, r3, #23
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    37e8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    37ec:	f8a4 22fa 	strh.w	r2, [r4, #762]	; 0x2fa
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    37f0:	fa1f fe8e 	uxth.w	lr, lr
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    37f4:	bf46      	itte	mi
    37f6:	ea6f 2212 	mvnmi.w	r2, r2, lsr #8
    37fa:	b2d2      	uxtbmi	r2, r2
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    37fc:	0a12      	lsrpl	r2, r2, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    37fe:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    3802:	f884 c2f4 	strb.w	ip, [r4, #756]	; 0x2f4
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    3806:	f8a4 e302 	strh.w	lr, [r4, #770]	; 0x302
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    380a:	f884 22f4 	strb.w	r2, [r4, #756]	; 0x2f4
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    380e:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3812:	d003      	beq.n	381c <colorwave(LEDStruct&)+0x27c>
    3814:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3818:	3107      	adds	r1, #7
    381a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    381c:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3820:	f3c1 0346 	ubfx	r3, r1, #1, #7
    3824:	f817 b00c 	ldrb.w	fp, [r7, ip]
    3828:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    382c:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    3830:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3834:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3836:	bf18      	it	ne
    3838:	4249      	negne	r1, r1
    383a:	b209      	sxth	r1, r1
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    383c:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    3840:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3842:	fb01 fe01 	mul.w	lr, r1, r1
    3846:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    384a:	fb0e f300 	mul.w	r3, lr, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    384e:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    3852:	43c0      	mvns	r0, r0
    3854:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    3858:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    385c:	b2db      	uxtb	r3, r3
    385e:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3862:	f8a4 1306 	strh.w	r1, [r4, #774]	; 0x306

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3866:	f8a4 e308 	strh.w	lr, [r4, #776]	; 0x308
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    386a:	f884 32f6 	strb.w	r3, [r4, #758]	; 0x2f6

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    386e:	4651      	mov	r1, sl
    3870:	f8cd 9000 	str.w	r9, [sp]
    3874:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    3876:	f884 22f7 	strb.w	r2, [r4, #759]	; 0x2f7

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    387a:	f002 f949 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    387e:	f8b4 330c 	ldrh.w	r3, [r4, #780]	; 0x30c
    3882:	f994 2000 	ldrsb.w	r2, [r4]
    3886:	68a0      	ldr	r0, [r4, #8]
    3888:	3b01      	subs	r3, #1
    388a:	1b9b      	subs	r3, r3, r6
    388c:	b29b      	uxth	r3, r3
    388e:	2a00      	cmp	r2, #0
    3890:	f8a4 330a 	strh.w	r3, [r4, #778]	; 0x30a
    3894:	bfb4      	ite	lt
    3896:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    389a:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    389e:	4418      	add	r0, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    38a0:	2280      	movs	r2, #128	; 0x80
    38a2:	a903      	add	r1, sp, #12
    38a4:	3d01      	subs	r5, #1
    38a6:	f002 f8d5 	bl	5a54 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    38aa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    38ae:	d00a      	beq.n	38c6 <colorwave(LEDStruct&)+0x326>
    38b0:	f8b4 22fa 	ldrh.w	r2, [r4, #762]	; 0x2fa
    38b4:	f8b4 32fc 	ldrh.w	r3, [r4, #764]	; 0x2fc
    38b8:	f8b4 e302 	ldrh.w	lr, [r4, #770]	; 0x302
    38bc:	f8b4 12f8 	ldrh.w	r1, [r4, #760]	; 0x2f8
    38c0:	f894 02f2 	ldrb.w	r0, [r4, #754]	; 0x2f2
    38c4:	e789      	b.n	37da <colorwave(LEDStruct&)+0x23a>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    38c6:	3601      	adds	r6, #1
    38c8:	f8b4 330c 	ldrh.w	r3, [r4, #780]	; 0x30c
    38cc:	b2b6      	uxth	r6, r6
    38ce:	42b3      	cmp	r3, r6
    38d0:	d90a      	bls.n	38e8 <colorwave(LEDStruct&)+0x348>
    38d2:	f8b4 22fa 	ldrh.w	r2, [r4, #762]	; 0x2fa
    38d6:	f8b4 32fc 	ldrh.w	r3, [r4, #764]	; 0x2fc
    38da:	f8b4 e302 	ldrh.w	lr, [r4, #770]	; 0x302
    38de:	f8b4 12f8 	ldrh.w	r1, [r4, #760]	; 0x2f8
    38e2:	f894 02f2 	ldrb.w	r0, [r4, #754]	; 0x2f2
    38e6:	e777      	b.n	37d8 <colorwave(LEDStruct&)+0x238>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    38e8:	f894 31d6 	ldrb.w	r3, [r4, #470]	; 0x1d6
    38ec:	b913      	cbnz	r3, 38f4 <colorwave(LEDStruct&)+0x354>
    38ee:	4620      	mov	r0, r4
    38f0:	f7fc ff5a 	bl	7a8 <strip_sync(LEDStruct&)>
}
    38f4:	b00b      	add	sp, #44	; 0x2c
    38f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38fa:	bf00      	nop
    38fc:	1fff9d60 	.word	0x1fff9d60
    3900:	000174f8 	.word	0x000174f8
    3904:	000098f4 	.word	0x000098f4
    3908:	0001b580 	.word	0x0001b580
    390c:	00009060 	.word	0x00009060
    3910:	4810      	ldr	r0, [pc, #64]	; (3954 <colorwave(LEDStruct&)+0x3b4>)
    3912:	8803      	ldrh	r3, [r0, #0]
    3914:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3918:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    391c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3920:	3319      	adds	r3, #25
    3922:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3924:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3928:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    392a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    392e:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3930:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    3932:	f884 21d6 	strb.w	r2, [r4, #470]	; 0x1d6
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3936:	f884 123f 	strb.w	r1, [r4, #575]	; 0x23f
	leds.use_palette = 1;
    393a:	f884 123b 	strb.w	r1, [r4, #571]	; 0x23b
	leds.mode_type = COLORWAVE;
    393e:	f884 523e 	strb.w	r5, [r4, #574]	; 0x23e

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3942:	b11a      	cbz	r2, 394c <colorwave(LEDStruct&)+0x3ac>
    3944:	2696      	movs	r6, #150	; 0x96
    3946:	f8a4 630c 	strh.w	r6, [r4, #780]	; 0x30c
    394a:	e634      	b.n	35b6 <colorwave(LEDStruct&)+0x16>
	else					 { leds.strip_range = ONE_SIDE; }
    394c:	264b      	movs	r6, #75	; 0x4b
    394e:	f8a4 630c 	strh.w	r6, [r4, #780]	; 0x30c
    3952:	e630      	b.n	35b6 <colorwave(LEDStruct&)+0x16>
    3954:	1fff8742 	.word	0x1fff8742

00003958 <confetti(LEDStruct&)>:

	leds.confetti_fade = cf;
}

void confetti(LEDStruct& leds)
{
    3958:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    395a:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f

	leds.confetti_fade = cf;
}

void confetti(LEDStruct& leds)
{
    395e:	b085      	sub	sp, #20
    3960:	4606      	mov	r6, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    3962:	2b00      	cmp	r3, #0
    3964:	d048      	beq.n	39f8 <confetti(LEDStruct&)+0xa0>
    3966:	f890 230e 	ldrb.w	r2, [r0, #782]	; 0x30e
    396a:	4d33      	ldr	r5, [pc, #204]	; (3a38 <confetti(LEDStruct&)+0xe0>)

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    396c:	68b0      	ldr	r0, [r6, #8]
    396e:	2196      	movs	r1, #150	; 0x96
    3970:	f002 f86e 	bl	5a50 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3974:	882b      	ldrh	r3, [r5, #0]
    3976:	68b7      	ldr	r7, [r6, #8]
    3978:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    397c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3980:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3984:	3319      	adds	r3, #25
    3986:	b29b      	uxth	r3, r3
    3988:	802b      	strh	r3, [r5, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    398a:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    398e:	f996 1000 	ldrsb.w	r1, [r6]
    3992:	eb03 0484 	add.w	r4, r3, r4, lsl #2
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    3996:	2296      	movs	r2, #150	; 0x96
    3998:	fb02 f203 	mul.w	r2, r2, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    399c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    39a0:	2900      	cmp	r1, #0
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    39a2:	ea4f 4212 	mov.w	r2, r2, lsr #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39a6:	f104 0419 	add.w	r4, r4, #25
    39aa:	bfb4      	ite	lt
    39ac:	eba2 0282 	sublt.w	r2, r2, r2, lsl #2
    39b0:	eb02 0242 	addge.w	r2, r2, r2, lsl #1
    39b4:	b2a4      	uxth	r4, r4
    39b6:	4417      	add	r7, r2
	int pos = random16(NUM_LEDS);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    39b8:	2301      	movs	r3, #1
    39ba:	eb04 2214 	add.w	r2, r4, r4, lsr #8
    39be:	9300      	str	r3, [sp, #0]
    39c0:	f206 11d9 	addw	r1, r6, #473	; 0x1d9
    39c4:	b2d2      	uxtb	r2, r2
    39c6:	23ff      	movs	r3, #255	; 0xff
    39c8:	a803      	add	r0, sp, #12
    39ca:	802c      	strh	r4, [r5, #0]
    39cc:	f002 f8a0 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39d0:	783b      	ldrb	r3, [r7, #0]
    39d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    39d6:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    39da:	703b      	strb	r3, [r7, #0]
    39dc:	787a      	ldrb	r2, [r7, #1]
    39de:	f89d 300d 	ldrb.w	r3, [sp, #13]
    39e2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    39e6:	707a      	strb	r2, [r7, #1]
    39e8:	78bb      	ldrb	r3, [r7, #2]
    39ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
    39ee:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    39f2:	70bb      	strb	r3, [r7, #2]
}
    39f4:	b005      	add	sp, #20
    39f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f8:	4d0f      	ldr	r5, [pc, #60]	; (3a38 <confetti(LEDStruct&)+0xe0>)
    39fa:	882b      	ldrh	r3, [r5, #0]
    39fc:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3a00:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3a04:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3a08:	3119      	adds	r1, #25
    3a0a:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a0c:	eb01 2311 	add.w	r3, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a10:	b2db      	uxtb	r3, r3
    3a12:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3a16:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    3a1a:	11d2      	asrs	r2, r2, #7
    3a1c:	320a      	adds	r2, #10
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    3a1e:	2301      	movs	r3, #1
    3a20:	b2d2      	uxtb	r2, r2
	leds.mode_type = CONFETTI;
    3a22:	2011      	movs	r0, #17
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a24:	8029      	strh	r1, [r5, #0]
	leds.use_palette = 1;

	leds.confetti_fade = cf;
    3a26:	f886 230e 	strb.w	r2, [r6, #782]	; 0x30e
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    3a2a:	f886 323f 	strb.w	r3, [r6, #575]	; 0x23f
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    3a2e:	f886 323b 	strb.w	r3, [r6, #571]	; 0x23b
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    3a32:	f886 023e 	strb.w	r0, [r6, #574]	; 0x23e
    3a36:	e799      	b.n	396c <confetti(LEDStruct&)+0x14>
    3a38:	1fff8742 	.word	0x1fff8742

00003a3c <one_sin(LEDStruct&)>:

}



void one_sin(LEDStruct& leds) {
    3a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    3a40:	f890 123f 	ldrb.w	r1, [r0, #575]	; 0x23f

}



void one_sin(LEDStruct& leds) {
    3a44:	b084      	sub	sp, #16
    3a46:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    3a48:	2900      	cmp	r1, #0
    3a4a:	f000 809d 	beq.w	3b88 <one_sin(LEDStruct&)+0x14c>
    3a4e:	f890 1317 	ldrb.w	r1, [r0, #791]	; 0x317
    3a52:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3a56:	f890 030f 	ldrb.w	r0, [r0, #783]	; 0x30f
    3a5a:	f894 2310 	ldrb.w	r2, [r4, #784]	; 0x310

	leds.sin_start += leds.sin_inc;
    3a5e:	4401      	add	r1, r0
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    3a60:	f894 01d7 	ldrb.w	r0, [r4, #471]	; 0x1d7


void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }

	leds.sin_start += leds.sin_inc;
    3a64:	b2c9      	uxtb	r1, r1
    3a66:	f884 1317 	strb.w	r1, [r4, #791]	; 0x317
	leds.sin_index = leds.sin_start;
    3a6a:	f884 1316 	strb.w	r1, [r4, #790]	; 0x316
	if (leds.this_dir) {
    3a6e:	2800      	cmp	r0, #0
    3a70:	f000 8085 	beq.w	3b7e <one_sin(LEDStruct&)+0x142>
		leds.sin_phase += leds.sin_speed;
    3a74:	4413      	add	r3, r2
    3a76:	b2da      	uxtb	r2, r3
    3a78:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
    3a7c:	f204 17d9 	addw	r7, r4, #473	; 0x1d9
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    3a80:	2500      	movs	r5, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    3a82:	26ff      	movs	r6, #255	; 0xff
    3a84:	e001      	b.n	3a8a <one_sin(LEDStruct&)+0x4e>
    3a86:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    3a8a:	f894 3313 	ldrb.w	r3, [r4, #787]	; 0x313
    3a8e:	f894 a311 	ldrb.w	sl, [r4, #785]	; 0x311
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3a92:	f88d 600d 	strb.w	r6, [sp, #13]
    3a96:	fa5f f885 	uxtb.w	r8, r5
    3a9a:	fb03 2308 	mla	r3, r3, r8, r2
    3a9e:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    3aa0:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    3aa2:	bf44      	itt	mi
    3aa4:	43db      	mvnmi	r3, r3
    3aa6:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3aa8:	005b      	lsls	r3, r3, #1
    3aaa:	b2db      	uxtb	r3, r3
    3aac:	1c5a      	adds	r2, r3, #1
    3aae:	fb02 f303 	mul.w	r3, r2, r3
    3ab2:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    3ab4:	fb03 f202 	mul.w	r2, r3, r2
    3ab8:	1212      	asrs	r2, r2, #8
    3aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3abe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    3ac2:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    3ac4:	05da      	lsls	r2, r3, #23
    3ac6:	f994 1000 	ldrsb.w	r1, [r4]
    3aca:	68a2      	ldr	r2, [r4, #8]

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    3acc:	bf54      	ite	pl
    3ace:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    3ad0:	23ff      	movmi	r3, #255	; 0xff
    3ad2:	459a      	cmp	sl, r3
    3ad4:	bf34      	ite	cc
    3ad6:	f04f 0aff 	movcc.w	sl, #255	; 0xff
    3ada:	f04f 0a00 	movcs.w	sl, #0
    3ade:	2900      	cmp	r1, #0
    3ae0:	bfb4      	ite	lt
    3ae2:	eba5 0185 	sublt.w	r1, r5, r5, lsl #2
    3ae6:	eb05 0145 	addge.w	r1, r5, r5, lsl #1
    3aea:	f894 3314 	ldrb.w	r3, [r4, #788]	; 0x314
    3aee:	f88d 300c 	strb.w	r3, [sp, #12]
    3af2:	4411      	add	r1, r2
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3af4:	a803      	add	r0, sp, #12
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    3af6:	f894 2315 	ldrb.w	r2, [r4, #789]	; 0x315
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3afa:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3afe:	f002 fa03 	bl	5f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    3b02:	f994 3000 	ldrsb.w	r3, [r4]
    3b06:	68a2      	ldr	r2, [r4, #8]
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    3b08:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	bfb4      	ite	lt
    3b10:	eba5 0985 	sublt.w	r9, r5, r5, lsl #2
    3b14:	eb05 0945 	addge.w	r9, r5, r5, lsl #1
    3b18:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    3b1c:	4491      	add	r9, r2
    3b1e:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
    3b22:	9100      	str	r1, [sp, #0]
    3b24:	fb02 3208 	mla	r2, r2, r8, r3
    3b28:	b2d2      	uxtb	r2, r2
    3b2a:	4653      	mov	r3, sl
    3b2c:	4639      	mov	r1, r7
    3b2e:	a803      	add	r0, sp, #12
    3b30:	f001 ffee 	bl	5b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b34:	f899 3000 	ldrb.w	r3, [r9]
    3b38:	f89d 200c 	ldrb.w	r2, [sp, #12]
    3b3c:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b40:	f889 3000 	strb.w	r3, [r9]
    3b44:	f899 2001 	ldrb.w	r2, [r9, #1]
    3b48:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3b4c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b50:	f889 2001 	strb.w	r2, [r9, #1]
    3b54:	f899 3002 	ldrb.w	r3, [r9, #2]
    3b58:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3b5c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b60:	f889 3002 	strb.w	r3, [r9, #2]
		leds.sin_index += leds.sin_rot;
    3b64:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    3b68:	f894 3312 	ldrb.w	r3, [r4, #786]	; 0x312
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
    3b6c:	3501      	adds	r5, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    3b6e:	4413      	add	r3, r2
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
    3b70:	2d96      	cmp	r5, #150	; 0x96
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    3b72:	f884 3316 	strb.w	r3, [r4, #790]	; 0x316
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
    3b76:	d186      	bne.n	3a86 <one_sin(LEDStruct&)+0x4a>
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    3b78:	b004      	add	sp, #16
    3b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    3b7e:	1a9b      	subs	r3, r3, r2
    3b80:	b2da      	uxtb	r2, r3
    3b82:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
    3b86:	e779      	b.n	3a7c <one_sin(LEDStruct&)+0x40>
    3b88:	4e4b      	ldr	r6, [pc, #300]	; (3cb8 <one_sin(LEDStruct&)+0x27c>)
    3b8a:	8833      	ldrh	r3, [r6, #0]
    3b8c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3b90:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3b94:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b98:	3219      	adds	r2, #25
    3b9a:	b292      	uxth	r2, r2
    3b9c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3ba0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3ba4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3ba8:	3019      	adds	r0, #25
    3baa:	b280      	uxth	r0, r0
    3bac:	eb00 2840 	add.w	r8, r0, r0, lsl #9
    3bb0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
    3bb4:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    3bb8:	f108 0819 	add.w	r8, r8, #25
    3bbc:	fa1f f888 	uxth.w	r8, r8
    3bc0:	eb08 2c48 	add.w	ip, r8, r8, lsl #9
    3bc4:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
    3bc8:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3bcc:	f10c 0c19 	add.w	ip, ip, #25
    3bd0:	fa1f fc8c 	uxth.w	ip, ip
    3bd4:	eb0c 234c 	add.w	r3, ip, ip, lsl #9
    3bd8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    3bdc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3be0:	3319      	adds	r3, #25
    3be2:	b29b      	uxth	r3, r3
    3be4:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    3be8:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    3bec:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3bf0:	f10e 0e19 	add.w	lr, lr, #25
    3bf4:	fa1f fe8e 	uxth.w	lr, lr
    3bf8:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    3bfc:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    3c00:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3c04:	3519      	adds	r5, #25
    3c06:	b2ad      	uxth	r5, r5
    3c08:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c0c:	eb08 2818 	add.w	r8, r8, r8, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c10:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;

	leds.sin_inc		= si;
	leds.sin_speed		= ss;
	leds.sin_cutoff		= sc;
    3c14:	fa5f f888 	uxtb.w	r8, r8
    3c18:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3c1c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c20:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c24:	3719      	adds	r7, #25
    3c26:	ea4f 1828 	mov.w	r8, r8, asr #4
    3c2a:	b2bf      	uxth	r7, r7
    3c2c:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c30:	b2d2      	uxtb	r2, r2
    3c32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c36:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3c3a:	f884 8311 	strb.w	r8, [r4, #785]	; 0x311
    3c3e:	eb07 2817 	add.w	r8, r7, r7, lsr #8
    3c42:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c46:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c48:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c4c:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c4e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    3c52:	fa5f f888 	uxtb.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c56:	3201      	adds	r2, #1
    3c58:	f3c0 1981 	ubfx	r9, r0, #6, #2
	leds.use_palette = 1;

	leds.sin_inc		= si;
	leds.sin_speed		= ss;
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    3c5c:	f3cc 1c81 	ubfx	ip, ip, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
    3c64:	f3ce 1e42 	ubfx	lr, lr, #5, #3
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    3c68:	eb08 0888 	add.w	r8, r8, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c6c:	b2d0      	uxtb	r0, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c6e:	8037      	strh	r7, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3c70:	f109 0201 	add.w	r2, r9, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    3c74:	2601      	movs	r6, #1
	leds.use_palette = 1;

	leds.sin_inc		= si;
	leds.sin_speed		= ss;
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    3c76:	f10c 0c01 	add.w	ip, ip, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
    3c7e:	f10e 0e01 	add.w	lr, lr, #1
	leds.bg_clr			= bc;
    3c82:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.bg_bri			= bb;
    3c86:	ea4f 18e8 	mov.w	r8, r8, asr #7
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    3c8a:	2712      	movs	r7, #18
	leds.use_palette = 1;

	leds.sin_inc		= si;
    3c8c:	f884 030f 	strb.w	r0, [r4, #783]	; 0x30f
	leds.sin_speed		= ss;
    3c90:	f884 2310 	strb.w	r2, [r4, #784]	; 0x310
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    3c94:	f884 c312 	strb.w	ip, [r4, #786]	; 0x312
	leds.sin_phase		= sp;
    3c98:	f884 3318 	strb.w	r3, [r4, #792]	; 0x318
	leds.sin_all_freq	= saf;
    3c9c:	f884 e313 	strb.w	lr, [r4, #787]	; 0x313
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    3ca0:	f884 8315 	strb.w	r8, [r4, #789]	; 0x315
	leds.sin_speed		= ss;
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
    3ca4:	f884 5314 	strb.w	r5, [r4, #788]	; 0x314
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    3ca8:	f884 623f 	strb.w	r6, [r4, #575]	; 0x23f
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    3cac:	f884 623b 	strb.w	r6, [r4, #571]	; 0x23b
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    3cb0:	f884 723e 	strb.w	r7, [r4, #574]	; 0x23e
    3cb4:	e6d3      	b.n	3a5e <one_sin(LEDStruct&)+0x22>
    3cb6:	bf00      	nop
    3cb8:	1fff8742 	.word	0x1fff8742

00003cbc <pride(LEDStruct&)>:
	leds.use_palette = 0;
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    3cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    3cc0:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
	leds.use_palette = 0;
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    3cc4:	b08b      	sub	sp, #44	; 0x2c
    3cc6:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    3cc8:	b93b      	cbnz	r3, 3cda <pride(LEDStruct&)+0x1e>
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    3cca:	2101      	movs	r1, #1
	leds.mode_type = PRIDE;
    3ccc:	2210      	movs	r2, #16
	leds.use_palette = 0;
    3cce:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    3cd2:	f880 123f 	strb.w	r1, [r0, #575]	; 0x23f
	leds.mode_type = PRIDE;
    3cd6:	f880 223e 	strb.w	r2, [r0, #574]	; 0x23e
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cda:	4ac7      	ldr	r2, [pc, #796]	; (3ff8 <pride(LEDStruct&)+0x33c>)
    3cdc:	6813      	ldr	r3, [r2, #0]
    3cde:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3ce2:	f645 7328 	movw	r3, #24360	; 0x5f28
    3ce6:	fb03 f101 	mul.w	r1, r3, r1
    3cea:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cec:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cee:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cf2:	d503      	bpl.n	3cfc <pride(LEDStruct&)+0x40>
    3cf4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3cf8:	3307      	adds	r3, #7
    3cfa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3cfc:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];
    3cfe:	4ebf      	ldr	r6, [pc, #764]	; (3ffc <pride(LEDStruct&)+0x340>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d00:	4dbf      	ldr	r5, [pc, #764]	; (4000 <pride(LEDStruct&)+0x344>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d02:	5c37      	ldrb	r7, [r6, r0]
    3d04:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3d08:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3d0c:	fb07 0303 	mla	r3, r7, r3, r0
    3d10:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3d12:	040f      	lsls	r7, r1, #16
    3d14:	bf48      	it	mi
    3d16:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d18:	6811      	ldr	r1, [r2, #0]
    3d1a:	9108      	str	r1, [sp, #32]
    3d1c:	b21b      	sxth	r3, r3
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
    3d1e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    3d22:	9808      	ldr	r0, [sp, #32]
    3d24:	49b7      	ldr	r1, [pc, #732]	; (4004 <pride(LEDStruct&)+0x348>)
    3d26:	b29b      	uxth	r3, r3
    3d28:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    3d2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    3d30:	fb01 f100 	mul.w	r1, r1, r0
    3d34:	0c09      	lsrs	r1, r1, #16
    3d36:	f10c 0cdc 	add.w	ip, ip, #220	; 0xdc
    3d3a:	fa5f fc8c 	uxtb.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d3e:	0448      	lsls	r0, r1, #17
    3d40:	f884 c2f5 	strb.w	ip, [r4, #757]	; 0x2f5
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d44:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d48:	d503      	bpl.n	3d52 <pride(LEDStruct&)+0x96>
    3d4a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3d4e:	3307      	adds	r3, #7
    3d50:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d52:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d54:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3d58:	5c37      	ldrb	r7, [r6, r0]
    3d5a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3d5e:	fb07 0303 	mla	r3, r7, r3, r0

    if( theta & 0x8000 ) y = -y;
    3d62:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d64:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3d66:	bf48      	it	mi
    3d68:	425b      	negmi	r3, r3
    3d6a:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d6c:	6811      	ldr	r1, [r2, #0]
    3d6e:	9107      	str	r1, [sp, #28]
	leds.brightdepth = beatsin88(341, 96, 224);
    3d70:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3d74:	b29b      	uxth	r3, r3
    3d76:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    3d7a:	9807      	ldr	r0, [sp, #28]
    3d7c:	0c19      	lsrs	r1, r3, #16
    3d7e:	f64d 6308 	movw	r3, #56840	; 0xde08
    3d82:	fb03 f000 	mul.w	r0, r3, r0
    3d86:	0c00      	lsrs	r0, r0, #16
    3d88:	3160      	adds	r1, #96	; 0x60
    3d8a:	b2c9      	uxtb	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d8c:	0447      	lsls	r7, r0, #17
    3d8e:	f884 12f2 	strb.w	r1, [r4, #754]	; 0x2f2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d92:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d96:	d503      	bpl.n	3da0 <pride(LEDStruct&)+0xe4>
    3d98:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3d9c:	3307      	adds	r3, #7
    3d9e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3da0:	0a1f      	lsrs	r7, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3da2:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3da6:	f816 e007 	ldrb.w	lr, [r6, r7]
    3daa:	f835 7017 	ldrh.w	r7, [r5, r7, lsl #1]
    3dae:	fb0e 7303 	mla	r3, lr, r3, r7

    if( theta & 0x8000 ) y = -y;
    3db2:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3db4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3db6:	bf48      	it	mi
    3db8:	425b      	negmi	r3, r3
    3dba:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3dbc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3dc0:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dc2:	6810      	ldr	r0, [r2, #0]
    3dc4:	9006      	str	r0, [sp, #24]
    3dc6:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    3dca:	eb03 2000 	add.w	r0, r3, r0, lsl #8
	return ret;
    3dce:	9f06      	ldr	r7, [sp, #24]
    3dd0:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3dd2:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    3dd6:	fb03 f307 	mul.w	r3, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3dda:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
    3dde:	b287      	uxth	r7, r0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3de0:	0c18      	lsrs	r0, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3de2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    3de6:	f8a4 72f8 	strh.w	r7, [r4, #760]	; 0x2f8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3dea:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3dee:	d003      	beq.n	3df8 <pride(LEDStruct&)+0x13c>
    3df0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3df4:	3307      	adds	r3, #7
    3df6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3df8:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3dfc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3e00:	f816 800e 	ldrb.w	r8, [r6, lr]
    3e04:	f835 e01e 	ldrh.w	lr, [r5, lr, lsl #1]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    3e08:	f8b4 92f0 	ldrh.w	r9, [r4, #752]	; 0x2f0
    3e0c:	fb08 e303 	mla	r3, r8, r3, lr

    if( theta & 0x8000 ) y = -y;
    3e10:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e12:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3e14:	bf48      	it	mi
    3e16:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e18:	6810      	ldr	r0, [r2, #0]
    3e1a:	9005      	str	r0, [sp, #20]
    3e1c:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3e1e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3e22:	b29b      	uxth	r3, r3
    3e24:	2026      	movs	r0, #38	; 0x26
	return ret;
    3e26:	f8dd e014 	ldr.w	lr, [sp, #20]
    3e2a:	fb00 f003 	mul.w	r0, r0, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3e2e:	f647 3398 	movw	r3, #31640	; 0x7b98
    3e32:	fb03 fe0e 	mul.w	lr, r3, lr
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3e36:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3e38:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3e3c:	3017      	adds	r0, #23
    3e3e:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e40:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	if (!leds.mode_initialized) { pride_init(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    3e44:	f884 02f3 	strb.w	r0, [r4, #755]	; 0x2f3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e48:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e4c:	d003      	beq.n	3e56 <pride(LEDStruct&)+0x19a>
    3e4e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3e52:	3307      	adds	r3, #7
    3e54:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e56:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e5a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3e5e:	f816 a008 	ldrb.w	sl, [r6, r8]
    3e62:	f835 8018 	ldrh.w	r8, [r5, r8, lsl #1]
    3e66:	fb0a 8303 	mla	r3, sl, r3, r8

    if( theta & 0x8000 ) y = -y;
    3e6a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e6e:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e70:	f8d2 e000 	ldr.w	lr, [r2]
    3e74:	f8cd e00c 	str.w	lr, [sp, #12]

    if( theta & 0x8000 ) y = -y;
    3e78:	bf18      	it	ne
    3e7a:	425b      	negne	r3, r3
	return ret;
    3e7c:	f8dd a00c 	ldr.w	sl, [sp, #12]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3e80:	f8b4 82ee 	ldrh.w	r8, [r4, #750]	; 0x2ee
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e84:	6812      	ldr	r2, [r2, #0]
    3e86:	9204      	str	r2, [sp, #16]
    3e88:	b21b      	sxth	r3, r3
    3e8a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    3e8e:	fa1f fa8a 	uxth.w	sl, sl
    3e92:	f640 32b8 	movw	r2, #3000	; 0xbb8
    3e96:	b29b      	uxth	r3, r3
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3e98:	f8b4 e2ec 	ldrh.w	lr, [r4, #748]	; 0x2ec
	return ret;
    3e9c:	f8dd b010 	ldr.w	fp, [sp, #16]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    3ea0:	f8a4 a2fe 	strh.w	sl, [r4, #766]	; 0x2fe
    3ea4:	fb02 f303 	mul.w	r3, r2, r3
	leds.deltams = leds.ms - leds.sLastMillis;
    3ea8:	ebc8 080a 	rsb	r8, r8, sl
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3eac:	4a56      	ldr	r2, [pc, #344]	; (4008 <pride(LEDStruct&)+0x34c>)
	leds.sLastMillis = leds.ms;
    3eae:	f8a4 a2ee 	strh.w	sl, [r4, #750]	; 0x2ee

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3eb2:	fa1f f888 	uxth.w	r8, r8
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3eb6:	fb18 e000 	smlabb	r0, r8, r0, lr
    3eba:	fb02 fb0b 	mul.w	fp, r2, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3ebe:	0c1b      	lsrs	r3, r3, #16
    3ec0:	3301      	adds	r3, #1
    3ec2:	fa1f fe80 	uxth.w	lr, r0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3ec6:	ea4f 401b 	mov.w	r0, fp, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3eca:	b29a      	uxth	r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ecc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    3ed0:	f8a4 22fc 	strh.w	r2, [r4, #764]	; 0x2fc

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3ed4:	f8a4 8300 	strh.w	r8, [r4, #768]	; 0x300
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3ed8:	f8a4 e2ec 	strh.w	lr, [r4, #748]	; 0x2ec
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3edc:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ee0:	d003      	beq.n	3eea <pride(LEDStruct&)+0x22e>
    3ee2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3ee6:	3307      	adds	r3, #7
    3ee8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3eea:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3eee:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3ef2:	f816 b00a 	ldrb.w	fp, [r6, sl]
    3ef6:	f835 a01a 	ldrh.w	sl, [r5, sl, lsl #1]
    3efa:	fb0b a303 	mla	r3, fp, r3, sl
    3efe:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3f00:	0400      	lsls	r0, r0, #16
    3f02:	bf48      	it	mi
    3f04:	425b      	negmi	r3, r3
    3f06:	b21b      	sxth	r3, r3
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    3f08:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3f0c:	b29b      	uxth	r3, r3
    3f0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3f12:	0c1b      	lsrs	r3, r3, #16
    3f14:	3305      	adds	r3, #5
    3f16:	b29b      	uxth	r3, r3
    3f18:	fb08 9303 	mla	r3, r8, r3, r9
    3f1c:	f8a4 32f0 	strh.w	r3, [r4, #752]	; 0x2f0
    3f20:	4638      	mov	r0, r7
    3f22:	4613      	mov	r3, r2
    3f24:	f04f 0895 	mov.w	r8, #149	; 0x95
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    3f28:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3f2c:	e00b      	b.n	3f46 <pride(LEDStruct&)+0x28a>
    3f2e:	f8b4 92fa 	ldrh.w	r9, [r4, #762]	; 0x2fa
    3f32:	f8b4 32fc 	ldrh.w	r3, [r4, #764]	; 0x2fc
    3f36:	f8b4 e302 	ldrh.w	lr, [r4, #770]	; 0x302
    3f3a:	f8b4 02f8 	ldrh.w	r0, [r4, #760]	; 0x2f8
    3f3e:	f894 12f2 	ldrb.w	r1, [r4, #754]	; 0x2f2
    3f42:	f894 c2f5 	ldrb.w	ip, [r4, #757]	; 0x2f5
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    3f46:	4470      	add	r0, lr
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
    3f48:	444b      	add	r3, r9
    3f4a:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    3f4c:	b280      	uxth	r0, r0
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    3f4e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f52:	0442      	lsls	r2, r0, #17
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
    3f54:	f8a4 32fa 	strh.w	r3, [r4, #762]	; 0x2fa
		leds.hue8 = leds.hue16 / 256;
    3f58:	f884 e2f4 	strb.w	lr, [r4, #756]	; 0x2f4

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    3f5c:	f8a4 0302 	strh.w	r0, [r4, #770]	; 0x302
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f60:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f64:	d503      	bpl.n	3f6e <pride(LEDStruct&)+0x2b2>
    3f66:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3f6a:	3307      	adds	r3, #7
    3f6c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f6e:	ea4f 2913 	mov.w	r9, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f72:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3f76:	f816 a009 	ldrb.w	sl, [r6, r9]
    3f7a:	f835 3019 	ldrh.w	r3, [r5, r9, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3f7e:	f88d e008 	strb.w	lr, [sp, #8]
    3f82:	fb0a 3302 	mla	r3, sl, r2, r3
    3f86:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3f88:	0402      	lsls	r2, r0, #16
    3f8a:	bf48      	it	mi
    3f8c:	425b      	negmi	r3, r3
    3f8e:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3f90:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3f94:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3f96:	fb03 f003 	mul.w	r0, r3, r3
    3f9a:	0c00      	lsrs	r0, r0, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    3f9c:	fb00 f201 	mul.w	r2, r0, r1
    3fa0:	43c9      	mvns	r1, r1
    3fa2:	eb01 4212 	add.w	r2, r1, r2, lsr #16
    3fa6:	b2d2      	uxtb	r2, r2
	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3fa8:	f8a4 3306 	strh.w	r3, [r4, #774]	; 0x306

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3fac:	f8a4 0308 	strh.w	r0, [r4, #776]	; 0x308
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    3fb0:	f884 22f6 	strb.w	r2, [r4, #758]	; 0x2f6
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3fb4:	a802      	add	r0, sp, #8
    3fb6:	a901      	add	r1, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3fb8:	f88d 200a 	strb.w	r2, [sp, #10]
    3fbc:	f88d c009 	strb.w	ip, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3fc0:	f001 ffa2 	bl	5f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    3fc4:	f994 2000 	ldrsb.w	r2, [r4]
    3fc8:	68a3      	ldr	r3, [r4, #8]

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;
    3fca:	f8a4 830a 	strh.w	r8, [r4, #778]	; 0x30a
    3fce:	2a00      	cmp	r2, #0
    3fd0:	bfb4      	ite	lt
    3fd2:	eba8 0088 	sublt.w	r0, r8, r8, lsl #2
    3fd6:	eb08 0048 	addge.w	r0, r8, r8, lsl #1
    3fda:	f108 38ff 	add.w	r8, r8, #4294967295
    3fde:	4418      	add	r0, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    3fe0:	2240      	movs	r2, #64	; 0x40
    3fe2:	a901      	add	r1, sp, #4
    3fe4:	fa1f f888 	uxth.w	r8, r8
    3fe8:	f001 fd34 	bl	5a54 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    3fec:	45b8      	cmp	r8, r7
    3fee:	d19e      	bne.n	3f2e <pride(LEDStruct&)+0x272>

		leds.pixelnumber = i;
		leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
}
    3ff0:	b00b      	add	sp, #44	; 0x2c
    3ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ff6:	bf00      	nop
    3ff8:	1fff9d60 	.word	0x1fff9d60
    3ffc:	000098f4 	.word	0x000098f4
    4000:	00009060 	.word	0x00009060
    4004:	000174f8 	.word	0x000174f8
    4008:	0001b580 	.word	0x0001b580

0000400c <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    400c:	b570      	push	{r4, r5, r6, lr}
    400e:	4604      	mov	r4, r0
    4010:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    4012:	4d1b      	ldr	r5, [pc, #108]	; (4080 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    4014:	2002      	movs	r0, #2
    4016:	f002 fae9 	bl	65ec <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    401a:	882b      	ldrh	r3, [r5, #0]
    401c:	68a2      	ldr	r2, [r4, #8]
    401e:	4418      	add	r0, r3
    4020:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    4024:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4028:	f243 6319 	movw	r3, #13849	; 0x3619
    402c:	4418      	add	r0, r3
    402e:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4030:	eb00 2110 	add.w	r1, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4034:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    4038:	eb00 0086 	add.w	r0, r0, r6, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    403c:	b2c9      	uxtb	r1, r1
    403e:	4403      	add	r3, r0
    4040:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4044:	b29b      	uxth	r3, r3
    4046:	1189      	asrs	r1, r1, #6
	leds.current_stage = FADEUP;
    4048:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    404a:	eb03 2013 	add.w	r0, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    404e:	311b      	adds	r1, #27
    4050:	f884 1319 	strb.w	r1, [r4, #793]	; 0x319
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    4054:	f884 031a 	strb.w	r0, [r4, #794]	; 0x31a


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    4058:	f884 631c 	strb.w	r6, [r4, #796]	; 0x31c
	leds.firework_hue = random8();
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    405c:	4610      	mov	r0, r2
void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    405e:	f884 631b 	strb.w	r6, [r4, #795]	; 0x31b
	leds.exploded = false;
    4062:	f884 6324 	strb.w	r6, [r4, #804]	; 0x324
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4066:	aa01      	add	r2, sp, #4
    4068:	2196      	movs	r1, #150	; 0x96
    406a:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    406c:	f88d 6004 	strb.w	r6, [sp, #4]
    4070:	f88d 6005 	strb.w	r6, [sp, #5]
    4074:	f88d 6006 	strb.w	r6, [sp, #6]
    4078:	f001 fc28 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
}
    407c:	b002      	add	sp, #8
    407e:	bd70      	pop	{r4, r5, r6, pc}
    4080:	1fff8742 	.word	0x1fff8742

00004084 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    4084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    4088:	f890 3324 	ldrb.w	r3, [r0, #804]	; 0x324
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    408c:	b087      	sub	sp, #28
    408e:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    4090:	2b00      	cmp	r3, #0
    4092:	f000 809b 	beq.w	41cc <fadeup(LEDStruct&)+0x148>
    4096:	f890 3319 	ldrb.w	r3, [r0, #793]	; 0x319
    409a:	9303      	str	r3, [sp, #12]
    409c:	4606      	mov	r6, r0
    409e:	4618      	mov	r0, r3
    40a0:	4b6e      	ldr	r3, [pc, #440]	; (425c <fadeup(LEDStruct&)+0x1d8>)
    40a2:	881b      	ldrh	r3, [r3, #0]
    40a4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    40a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    40ac:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    40b0:	3419      	adds	r4, #25
    40b2:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40b4:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40b8:	b2db      	uxtb	r3, r3
    40ba:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    40be:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    40c2:	ea4f 2929 	mov.w	r9, r9, asr #8
    40c6:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    40ca:	2301      	movs	r3, #1
    40cc:	fa5f f989 	uxtb.w	r9, r9
    40d0:	f886 331c 	strb.w	r3, [r6, #796]	; 0x31c
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    40d4:	f886 9325 	strb.w	r9, [r6, #805]	; 0x325
    40d8:	f004 f95c 	bl	8394 <__aeabi_ui2f>
    40dc:	f506 7b49 	add.w	fp, r6, #804	; 0x324
    40e0:	f506 6aa8 	add.w	sl, r6, #1344	; 0x540
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    40e4:	465b      	mov	r3, fp
    40e6:	f206 4814 	addw	r8, r6, #1044	; 0x414
    40ea:	f206 5707 	addw	r7, r6, #1287	; 0x507
    40ee:	46d3      	mov	fp, sl
    40f0:	9001      	str	r0, [sp, #4]
    40f2:	f506 66c6 	add.w	r6, r6, #1584	; 0x630
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    40f6:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    40f8:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40fa:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    40fe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4102:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4106:	3419      	adds	r4, #25
    4108:	b2a4      	uxth	r4, r4
    410a:	2373      	movs	r3, #115	; 0x73
    410c:	fb03 f004 	mul.w	r0, r3, r4
    4110:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    4112:	9b01      	ldr	r3, [sp, #4]
    4114:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4118:	300a      	adds	r0, #10
    411a:	b280      	uxth	r0, r0
    411c:	f004 f93a 	bl	8394 <__aeabi_ui2f>
    4120:	494f      	ldr	r1, [pc, #316]	; (4260 <fadeup(LEDStruct&)+0x1dc>)
    4122:	f004 fa43 	bl	85ac <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4126:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    412a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    412e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4132:	3319      	adds	r3, #25
    4134:	b29b      	uxth	r3, r3
    4136:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    413a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    413e:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4142:	3419      	adds	r4, #25
    4144:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4146:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(5, 15);
    414a:	b2c9      	uxtb	r1, r1
    414c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4150:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4154:	11c9      	asrs	r1, r1, #7
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    4156:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(5, 15);
    415a:	3105      	adds	r1, #5
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    415c:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    4160:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(5, 15);
    4164:	b2c8      	uxtb	r0, r1
    4166:	f004 f915 	bl	8394 <__aeabi_ui2f>
    416a:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    416c:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(5, 15);
			leds.spark_bri[i] = 255;
    416e:	4a3d      	ldr	r2, [pc, #244]	; (4264 <fadeup(LEDStruct&)+0x1e0>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(5, 15);
    4170:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4174:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(5, 15);
			leds.spark_bri[i] = 255;
    4176:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    417a:	d8be      	bhi.n	40fa <fadeup(LEDStruct&)+0x76>
    417c:	4b37      	ldr	r3, [pc, #220]	; (425c <fadeup(LEDStruct&)+0x1d8>)
    417e:	9902      	ldr	r1, [sp, #8]
    4180:	801c      	strh	r4, [r3, #0]
    4182:	f991 2000 	ldrsb.w	r2, [r1]
    4186:	688b      	ldr	r3, [r1, #8]
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(5, 15);
			leds.spark_bri[i] = 255;
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
    4188:	9802      	ldr	r0, [sp, #8]
    418a:	2a00      	cmp	r2, #0
    418c:	9a03      	ldr	r2, [sp, #12]
    418e:	bfb4      	ite	lt
    4190:	eba2 0282 	sublt.w	r2, r2, r2, lsl #2
    4194:	eb02 0242 	addge.w	r2, r2, r2, lsl #1
    4198:	4413      	add	r3, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    419a:	22ff      	movs	r2, #255	; 0xff
    419c:	701a      	strb	r2, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
    419e:	705a      	strb	r2, [r3, #1]
        b = (colorcode >>  0) & 0xFF;
    41a0:	709a      	strb	r2, [r3, #2]
    41a2:	f890 3319 	ldrb.w	r3, [r0, #793]	; 0x319
    41a6:	f990 1000 	ldrsb.w	r1, [r0]
    41aa:	6882      	ldr	r2, [r0, #8]
    41ac:	f1c3 0395 	rsb	r3, r3, #149	; 0x95
    41b0:	2900      	cmp	r1, #0
    41b2:	bfb4      	ite	lt
    41b4:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    41b8:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    41bc:	4413      	add	r3, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    41be:	22ff      	movs	r2, #255	; 0xff
    41c0:	701a      	strb	r2, [r3, #0]
        g = (colorcode >>  8) & 0xFF;
    41c2:	705a      	strb	r2, [r3, #1]
        b = (colorcode >>  0) & 0xFF;
    41c4:	709a      	strb	r2, [r3, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    41c6:	b007      	add	sp, #28
    41c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    41cc:	9d02      	ldr	r5, [sp, #8]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    41ce:	9c02      	ldr	r4, [sp, #8]
    41d0:	f895 331b 	ldrb.w	r3, [r5, #795]	; 0x31b
    41d4:	f995 0000 	ldrsb.w	r0, [r5]
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    41d8:	f895 2319 	ldrb.w	r2, [r5, #793]	; 0x319
    41dc:	68a9      	ldr	r1, [r5, #8]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    41de:	3305      	adds	r3, #5
    41e0:	2800      	cmp	r0, #0
    41e2:	b2db      	uxtb	r3, r3
    41e4:	bfb4      	ite	lt
    41e6:	eba2 0282 	sublt.w	r2, r2, r2, lsl #2
    41ea:	eb02 0242 	addge.w	r2, r2, r2, lsl #1
    41ee:	f885 331b 	strb.w	r3, [r5, #795]	; 0x31b
    41f2:	4411      	add	r1, r2
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    41f4:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    41f6:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    41fa:	f88d 3016 	strb.w	r3, [sp, #22]
    41fe:	23ff      	movs	r3, #255	; 0xff
    4200:	f88d 2014 	strb.w	r2, [sp, #20]
    4204:	f88d 3015 	strb.w	r3, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4208:	f001 fe7e 	bl	5f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    420c:	f994 2000 	ldrsb.w	r2, [r4]
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4210:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4214:	68a1      	ldr	r1, [r4, #8]
    4216:	9c02      	ldr	r4, [sp, #8]
    4218:	2a00      	cmp	r2, #0
    421a:	f1c3 0395 	rsb	r3, r3, #149	; 0x95
    421e:	bfb4      	ite	lt
    4220:	eba3 0383 	sublt.w	r3, r3, r3, lsl #2
    4224:	eb03 0343 	addge.w	r3, r3, r3, lsl #1
    4228:	4419      	add	r1, r3
    422a:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    422e:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4232:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4236:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4238:	23ff      	movs	r3, #255	; 0xff
    423a:	f88d 3015 	strb.w	r3, [sp, #21]
    423e:	f88d 2014 	strb.w	r2, [sp, #20]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4242:	f001 fe61 	bl	5f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    4246:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    424a:	2bff      	cmp	r3, #255	; 0xff
    424c:	d1bb      	bne.n	41c6 <fadeup(LEDStruct&)+0x142>
			leds.exploded = true;
    424e:	9a02      	ldr	r2, [sp, #8]
    4250:	2301      	movs	r3, #1
    4252:	f882 3324 	strb.w	r3, [r2, #804]	; 0x324
		}
	}
}
    4256:	b007      	add	sp, #28
    4258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    425c:	1fff8742 	.word	0x1fff8742
    4260:	42c80000 	.word	0x42c80000
    4264:	437f0000 	.word	0x437f0000

00004268 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    4268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    426c:	4b65      	ldr	r3, [pc, #404]	; (4404 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    426e:	4606      	mov	r6, r0
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4270:	781a      	ldrb	r2, [r3, #0]
    4272:	6880      	ldr	r0, [r0, #8]
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    4274:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4276:	2196      	movs	r1, #150	; 0x96
    4278:	f001 fbea 	bl	5a50 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    427c:	f896 3325 	ldrb.w	r3, [r6, #805]	; 0x325
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    4280:	2700      	movs	r7, #0
    4282:	f886 7724 	strb.w	r7, [r6, #1828]	; 0x724
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4286:	2b00      	cmp	r3, #0
    4288:	f000 8088 	beq.w	439c <explosion(LEDStruct&)+0x134>
    428c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 441c <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4290:	f04f 08ff 	mov.w	r8, #255	; 0xff
    4294:	e03b      	b.n	430e <explosion(LEDStruct&)+0xa6>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4296:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
    429a:	4650      	mov	r0, sl
    429c:	f003 ffca 	bl	8234 <__addsf3>
    42a0:	4605      	mov	r5, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    42a2:	2100      	movs	r1, #0
    42a4:	4628      	mov	r0, r5
    42a6:	f004 fa6b 	bl	8780 <__aeabi_fcmplt>
    42aa:	2800      	cmp	r0, #0
    42ac:	d174      	bne.n	4398 <explosion(LEDStruct&)+0x130>
    42ae:	4956      	ldr	r1, [pc, #344]	; (4408 <explosion(LEDStruct&)+0x1a0>)
    42b0:	4628      	mov	r0, r5
    42b2:	f004 fa83 	bl	87bc <__aeabi_fcmpgt>
    42b6:	b100      	cbz	r0, 42ba <explosion(LEDStruct&)+0x52>
    42b8:	4d53      	ldr	r5, [pc, #332]	; (4408 <explosion(LEDStruct&)+0x1a0>)
    42ba:	f8c4 5328 	str.w	r5, [r4, #808]	; 0x328
		leds.spark_vel[x] *= gravity;
    42be:	4651      	mov	r1, sl
    42c0:	f8d9 0000 	ldr.w	r0, [r9]
    42c4:	f004 f8be 	bl	8444 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    42c8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    42cc:	f8c4 0418 	str.w	r0, [r4, #1048]	; 0x418
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    42d0:	f8d4 0544 	ldr.w	r0, [r4, #1348]	; 0x544
    42d4:	f004 f8b6 	bl	8444 <__aeabi_fmul>
    42d8:	4601      	mov	r1, r0
    42da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    42de:	f003 ffa7 	bl	8230 <__aeabi_fsub>
    42e2:	f8d4 1634 	ldr.w	r1, [r4, #1588]	; 0x634
    42e6:	f004 f8ad 	bl	8444 <__aeabi_fmul>
    42ea:	f8c4 0634 	str.w	r0, [r4, #1588]	; 0x634
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    42ee:	f004 fa95 	bl	881c <__aeabi_f2uiz>
    42f2:	f896 3724 	ldrb.w	r3, [r6, #1828]	; 0x724
    42f6:	b2c0      	uxtb	r0, r0
    42f8:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    42fa:	f107 0701 	add.w	r7, r7, #1
    42fe:	f896 3325 	ldrb.w	r3, [r6, #805]	; 0x325
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4302:	bf38      	it	cc
    4304:	f886 0724 	strbcc.w	r0, [r6, #1828]	; 0x724
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4308:	b2ff      	uxtb	r7, r7
    430a:	42bb      	cmp	r3, r7
    430c:	d946      	bls.n	439c <explosion(LEDStruct&)+0x134>
    430e:	eb06 0487 	add.w	r4, r6, r7, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    4312:	f8d4 0328 	ldr.w	r0, [r4, #808]	; 0x328
    4316:	f004 fa5b 	bl	87d0 <__aeabi_f2iz>
    431a:	f996 3000 	ldrsb.w	r3, [r6]
    431e:	68b5      	ldr	r5, [r6, #8]
    4320:	2b00      	cmp	r3, #0
    4322:	bfb4      	ite	lt
    4324:	eba0 0080 	sublt.w	r0, r0, r0, lsl #2
    4328:	eb00 0040 	addge.w	r0, r0, r0, lsl #1
    432c:	4405      	add	r5, r0
    432e:	f8d4 0634 	ldr.w	r0, [r4, #1588]	; 0x634
    4332:	f004 fa73 	bl	881c <__aeabi_f2uiz>
    4336:	f896 331a 	ldrb.w	r3, [r6, #794]	; 0x31a
    433a:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    433e:	a901      	add	r1, sp, #4
    4340:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4342:	f88d 3000 	strb.w	r3, [sp]
    4346:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    434a:	f001 fddd 	bl	5f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    434e:	782b      	ldrb	r3, [r5, #0]
    4350:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4354:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4358:	702b      	strb	r3, [r5, #0]
    435a:	786a      	ldrb	r2, [r5, #1]
    435c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4360:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4364:	706a      	strb	r2, [r5, #1]
    4366:	78ab      	ldrb	r3, [r5, #2]
    4368:	f89d 2006 	ldrb.w	r2, [sp, #6]
    436c:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4370:	19f2      	adds	r2, r6, r7
        b = qadd8( b, rhs.b);
    4372:	70ab      	strb	r3, [r5, #2]
    4374:	f892 3508 	ldrb.w	r3, [r2, #1288]	; 0x508
    4378:	f8d4 a418 	ldr.w	sl, [r4, #1048]	; 0x418
    437c:	2b00      	cmp	r3, #0
    437e:	d18a      	bne.n	4296 <explosion(LEDStruct&)+0x2e>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    4380:	4651      	mov	r1, sl
    4382:	f8d4 0328 	ldr.w	r0, [r4, #808]	; 0x328
    4386:	f003 ff53 	bl	8230 <__aeabi_fsub>
    438a:	4605      	mov	r5, r0
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    438c:	2100      	movs	r1, #0
    438e:	4628      	mov	r0, r5
    4390:	f004 f9f6 	bl	8780 <__aeabi_fcmplt>
    4394:	2800      	cmp	r0, #0
    4396:	d08a      	beq.n	42ae <explosion(LEDStruct&)+0x46>
    4398:	2500      	movs	r5, #0
    439a:	e78e      	b.n	42ba <explosion(LEDStruct&)+0x52>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
    439c:	4630      	mov	r0, r6
    439e:	f7fc fa03 	bl	7a8 <strip_sync(LEDStruct&)>
	if (leds.brightest_spark <= 5) {
    43a2:	f896 3724 	ldrb.w	r3, [r6, #1828]	; 0x724
    43a6:	2b05      	cmp	r3, #5
    43a8:	d829      	bhi.n	43fe <explosion(LEDStruct&)+0x196>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    43aa:	2300      	movs	r3, #0
    43ac:	68b0      	ldr	r0, [r6, #8]
    43ae:	f88d 3004 	strb.w	r3, [sp, #4]
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    43b2:	aa01      	add	r2, sp, #4
    43b4:	2196      	movs	r1, #150	; 0x96
    43b6:	f88d 3005 	strb.w	r3, [sp, #5]
    43ba:	f88d 3006 	strb.w	r3, [sp, #6]
    43be:	f001 fa85 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43c2:	4812      	ldr	r0, [pc, #72]	; (440c <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43c4:	4c12      	ldr	r4, [pc, #72]	; (4410 <explosion(LEDStruct&)+0x1a8>)
    43c6:	8803      	ldrh	r3, [r0, #0]
    43c8:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    43ca:	4912      	ldr	r1, [pc, #72]	; (4414 <explosion(LEDStruct&)+0x1ac>)
    43cc:	4a12      	ldr	r2, [pc, #72]	; (4418 <explosion(LEDStruct&)+0x1b0>)
    43ce:	9401      	str	r4, [sp, #4]
    43d0:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    43d4:	8809      	ldrh	r1, [r1, #0]
    43d6:	8812      	ldrh	r2, [r2, #0]
    43d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    43dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    43e0:	440a      	add	r2, r1
    43e2:	3319      	adds	r3, #25
    43e4:	b29b      	uxth	r3, r3
    43e6:	b292      	uxth	r2, r2
	return ret;
    43e8:	9901      	ldr	r1, [sp, #4]
    43ea:	8003      	strh	r3, [r0, #0]
    43ec:	fb03 f302 	mul.w	r3, r3, r2
    43f0:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark <= 5) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    43f4:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    43f6:	f8c6 3320 	str.w	r3, [r6, #800]	; 0x320
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark <= 5) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    43fa:	f886 231c 	strb.w	r2, [r6, #796]	; 0x31c
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    43fe:	b002      	add	sp, #8
    4400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4404:	1fff8738 	.word	0x1fff8738
    4408:	42940000 	.word	0x42940000
    440c:	1fff8742 	.word	0x1fff8742
    4410:	1fff9d60 	.word	0x1fff9d60
    4414:	1fff8720 	.word	0x1fff8720
    4418:	1fff873a 	.word	0x1fff873a
    441c:	1fff873c 	.word	0x1fff873c

00004420 <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    4420:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4422:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    4426:	b082      	sub	sp, #8
    4428:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    442a:	bb03      	cbnz	r3, 446e <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    442c:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    442e:	2113      	movs	r1, #19
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4430:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    4432:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4436:	f884 023f 	strb.w	r0, [r4, #575]	; 0x23f
	leds.mode_type = FIREWORKS;
    443a:	f884 123e 	strb.w	r1, [r4, #574]	; 0x23e
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    443e:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
    4442:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4444:	aa01      	add	r2, sp, #4
    4446:	68a0      	ldr	r0, [r4, #8]
    4448:	f88d 3004 	strb.w	r3, [sp, #4]
    444c:	2196      	movs	r1, #150	; 0x96
    444e:	f88d 3005 	strb.w	r3, [sp, #5]
    4452:	f88d 3006 	strb.w	r3, [sp, #6]
    4456:	f001 fa39 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    445a:	4a0f      	ldr	r2, [pc, #60]	; (4498 <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    445c:	f8d4 3320 	ldr.w	r3, [r4, #800]	; 0x320
    4460:	6812      	ldr	r2, [r2, #0]
    4462:	9201      	str	r2, [sp, #4]
	return ret;
    4464:	9a01      	ldr	r2, [sp, #4]
    4466:	429a      	cmp	r2, r3
    4468:	d212      	bcs.n	4490 <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    446a:	b002      	add	sp, #8
    446c:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    446e:	f890 331c 	ldrb.w	r3, [r0, #796]	; 0x31c
    4472:	2b01      	cmp	r3, #1
    4474:	d004      	beq.n	4480 <fireworks(LEDStruct&)+0x60>
    4476:	d207      	bcs.n	4488 <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    4478:	f7ff fe04 	bl	4084 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    447c:	b002      	add	sp, #8
    447e:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    4480:	f7ff fef2 	bl	4268 <explosion(LEDStruct&)>
			break;
	}
}
    4484:	b002      	add	sp, #8
    4486:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4488:	2b02      	cmp	r3, #2
    448a:	d0da      	beq.n	4442 <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    448c:	b002      	add	sp, #8
    448e:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    4490:	4620      	mov	r0, r4
    4492:	f7ff fdbb 	bl	400c <prepare_for_explosion(LEDStruct&)>
    4496:	e7e8      	b.n	446a <fireworks(LEDStruct&)+0x4a>
    4498:	1fff9d60 	.word	0x1fff9d60

0000449c <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    449c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    449e:	f890 323d 	ldrb.w	r3, [r0, #573]	; 0x23d
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    44a2:	b085      	sub	sp, #20
    44a4:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    44a6:	2b13      	cmp	r3, #19
    44a8:	f200 8455 	bhi.w	4d56 <switch_mode(LEDStruct&)+0x8ba>
    44ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    44b0:	031c039a 	.word	0x031c039a
    44b4:	0067029c 	.word	0x0067029c
    44b8:	016400e3 	.word	0x016400e3
    44bc:	013b00e9 	.word	0x013b00e9
    44c0:	02080256 	.word	0x02080256
    44c4:	001401ba 	.word	0x001401ba
    44c8:	01410061 	.word	0x01410061
    44cc:	042e0433 	.word	0x042e0433
    44d0:	04240429 	.word	0x04240429
    44d4:	041a041f 	.word	0x041a041f
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    44d8:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
    44dc:	2b00      	cmp	r3, #0
    44de:	d148      	bne.n	4572 <switch_mode(LEDStruct&)+0xd6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44e0:	4dcf      	ldr	r5, [pc, #828]	; (4820 <switch_mode(LEDStruct&)+0x384>)
    44e2:	882b      	ldrh	r3, [r5, #0]
    44e4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    44e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    44ec:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44f0:	3319      	adds	r3, #25
    44f2:	b29b      	uxth	r3, r3
    44f4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    44f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    44fc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4500:	3119      	adds	r1, #25
    4502:	b289      	uxth	r1, r1
    4504:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4508:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    450c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4510:	3219      	adds	r2, #25
    4512:	b292      	uxth	r2, r2
    4514:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4518:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    451c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4520:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4524:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4528:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    452c:	b2db      	uxtb	r3, r3
    452e:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4530:	3619      	adds	r6, #25
    4532:	b2d2      	uxtb	r2, r2
    4534:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4538:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    453c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    4540:	b2b6      	uxth	r6, r6
    4542:	1188      	asrs	r0, r1, #6
    4544:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4548:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    454a:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    454e:	3032      	adds	r0, #50	; 0x32
    4550:	f3c7 1781 	ubfx	r7, r7, #6, #2
    4554:	313c      	adds	r1, #60	; 0x3c
    4556:	121b      	asrs	r3, r3, #8
    4558:	b2c0      	uxtb	r0, r0
    455a:	3701      	adds	r7, #1
    455c:	b2c9      	uxtb	r1, r1
    455e:	3314      	adds	r3, #20
    4560:	2201      	movs	r2, #1
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    4562:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    4566:	b2db      	uxtb	r3, r3
    4568:	4611      	mov	r1, r2
    456a:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    456c:	802e      	strh	r6, [r5, #0]
    456e:	f7fe fa3b 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    4572:	4620      	mov	r0, r4
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4574:	b005      	add	sp, #20
    4576:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    457a:	f7fe ba9f 	b.w	2abc <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    457e:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
    4582:	2b00      	cmp	r3, #0
    4584:	d177      	bne.n	4676 <switch_mode(LEDStruct&)+0x1da>
    4586:	49a6      	ldr	r1, [pc, #664]	; (4820 <switch_mode(LEDStruct&)+0x384>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4588:	f880 323e 	strb.w	r3, [r0, #574]	; 0x23e
    458c:	880b      	ldrh	r3, [r1, #0]
    458e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4592:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4596:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    459a:	3319      	adds	r3, #25
    459c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    45a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    45a4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    45a8:	3319      	adds	r3, #25
    45aa:	b29b      	uxth	r3, r3
    45ac:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    45b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    45b4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    45b8:	3019      	adds	r0, #25
    45ba:	b280      	uxth	r0, r0
    45bc:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    45c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    45c4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    45c8:	3219      	adds	r2, #25
    45ca:	b292      	uxth	r2, r2
    45cc:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    45d0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    45d4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    45d8:	3719      	adds	r7, #25
    45da:	b2bf      	uxth	r7, r7
    45dc:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    45e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    45e4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    45e8:	3519      	adds	r5, #25
    45ea:	b2ad      	uxth	r5, r5
    45ec:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45f0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45f4:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    45f8:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45fa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    45fe:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4602:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4606:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4608:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    460c:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    460e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4612:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4616:	11f6      	asrs	r6, r6, #7
    4618:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    461c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    4620:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4624:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4626:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    462a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    462c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    462e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4630:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4634:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4638:	f884 0241 	strb.w	r0, [r4, #577]	; 0x241
    463c:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4640:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4642:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    4644:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4648:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    464c:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4650:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4652:	f884 3243 	strb.w	r3, [r4, #579]	; 0x243
	leds.juggle_diff		 = jd;
    4656:	f884 6244 	strb.w	r6, [r4, #580]	; 0x244
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    465a:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    465e:	f884 01d6 	strb.w	r0, [r4, #470]	; 0x1d6
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4662:	f884 5245 	strb.w	r5, [r4, #581]	; 0x245
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4666:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    466a:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    466e:	f884 2246 	strb.w	r2, [r4, #582]	; 0x246
	leds.juggle_phased		 = jp;
    4672:	f884 2247 	strb.w	r2, [r4, #583]	; 0x247
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    4676:	4620      	mov	r0, r4
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4678:	b005      	add	sp, #20
    467a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    467e:	f7fd bc67 	b.w	1f50 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    4682:	f890 323f 	ldrb.w	r3, [r0, #575]	; 0x23f
    4686:	2b00      	cmp	r3, #0
    4688:	d14d      	bne.n	4726 <switch_mode(LEDStruct&)+0x28a>
    468a:	4965      	ldr	r1, [pc, #404]	; (4820 <switch_mode(LEDStruct&)+0x384>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    468c:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
    4690:	880b      	ldrh	r3, [r1, #0]
    4692:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4696:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    469a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    469e:	3319      	adds	r3, #25
    46a0:	b29b      	uxth	r3, r3
    46a2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    46a6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    46aa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    46ae:	3219      	adds	r2, #25
    46b0:	b292      	uxth	r2, r2
    46b2:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    46b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    46ba:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    46be:	3019      	adds	r0, #25
    46c0:	b280      	uxth	r0, r0
    46c2:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    46c6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46ca:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    46ce:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46d2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    46d6:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    46d8:	b2d2      	uxtb	r2, r2
    46da:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    46dc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    46e0:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    46e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    46e6:	121b      	asrs	r3, r3, #8
    46e8:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    46ea:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46ec:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    46f0:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    46f4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    46f8:	2701      	movs	r7, #1
	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    46fa:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    46fc:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4700:	f884 3249 	strb.w	r3, [r4, #585]	; 0x249
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    4704:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    4706:	f884 01d7 	strb.w	r0, [r4, #471]	; 0x1d7

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    470a:	f884 2248 	strb.w	r2, [r4, #584]	; 0x248
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    470e:	f884 61d6 	strb.w	r6, [r4, #470]	; 0x1d6
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    4712:	f884 723f 	strb.w	r7, [r4, #575]	; 0x23f
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    4716:	f884 724b 	strb.w	r7, [r4, #587]	; 0x24b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    471a:	f884 323e 	strb.w	r3, [r4, #574]	; 0x23e

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    471e:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4720:	800d      	strh	r5, [r1, #0]
    4722:	f7fd f8ad 	bl	1880 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    4726:	4620      	mov	r0, r4
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4728:	b005      	add	sp, #20
    472a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    472e:	f7fe b8ad 	b.w	288c <rainbow_march(LEDStruct&)>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
    4732:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    4736:	b9ca      	cbnz	r2, 476c <switch_mode(LEDStruct&)+0x2d0>
    4738:	4e39      	ldr	r6, [pc, #228]	; (4820 <switch_mode(LEDStruct&)+0x384>)
    473a:	8833      	ldrh	r3, [r6, #0]
    473c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4740:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4744:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4748:	3519      	adds	r5, #25
    474a:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    474c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    4750:	f3c3 1381 	ubfx	r3, r3, #6, #2
    4754:	3301      	adds	r3, #1
    4756:	205a      	movs	r0, #90	; 0x5a
    4758:	2146      	movs	r1, #70	; 0x46
    475a:	9302      	str	r3, [sp, #8]
    475c:	9001      	str	r0, [sp, #4]
    475e:	9100      	str	r1, [sp, #0]
    4760:	2314      	movs	r3, #20
    4762:	4611      	mov	r1, r2
    4764:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4766:	8035      	strh	r5, [r6, #0]
    4768:	f7fe f93e 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			torch(leds);
    476c:	4620      	mov	r0, r4
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    476e:	b005      	add	sp, #20
    4770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
    4774:	f7fe bcb2 	b.w	30dc <torch(LEDStruct&)>
			break;


		// Rainbow March Functions
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    4778:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    477c:	2a00      	cmp	r2, #0
    477e:	d1d2      	bne.n	4726 <switch_mode(LEDStruct&)+0x28a>
    4780:	4927      	ldr	r1, [pc, #156]	; (4820 <switch_mode(LEDStruct&)+0x384>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    4782:	f880 223b 	strb.w	r2, [r0, #571]	; 0x23b
    4786:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    4788:	f880 224b 	strb.w	r2, [r0, #587]	; 0x24b
    478c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4790:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4794:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4798:	3319      	adds	r3, #25
    479a:	b29b      	uxth	r3, r3
    479c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    47a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    47a4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    47a8:	3219      	adds	r2, #25
    47aa:	b292      	uxth	r2, r2
    47ac:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    47b0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    47b4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    47b8:	3019      	adds	r0, #25
    47ba:	b280      	uxth	r0, r0
    47bc:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    47c0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47c4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    47c8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47cc:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    leds.rainbow_diff   = rd;
    47d0:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    47d2:	b2d2      	uxtb	r2, r2
    47d4:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    47d6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    47da:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    47dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    47e0:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47e2:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    47e6:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    47e8:	1212      	asrs	r2, r2, #8
    47ea:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    47ee:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    47f0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;
    47f4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    47f8:	2701      	movs	r7, #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    47fa:	f884 3249 	strb.w	r3, [r4, #585]	; 0x249
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    47fe:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    4800:	f884 01d7 	strb.w	r0, [r4, #471]	; 0x1d7

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    4804:	f884 2248 	strb.w	r2, [r4, #584]	; 0x248
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    4808:	f884 61d6 	strb.w	r6, [r4, #470]	; 0x1d6
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    480c:	f884 723f 	strb.w	r7, [r4, #575]	; 0x23f
	leds.mode_type = RAINBOW_MARCH;
    4810:	f884 323e 	strb.w	r3, [r4, #574]	; 0x23e

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    4814:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4816:	800d      	strh	r5, [r1, #0]
    4818:	f7fd f832 	bl	1880 <LEDDebug(LEDStruct&)>
    481c:	e783      	b.n	4726 <switch_mode(LEDStruct&)+0x28a>
    481e:	bf00      	nop
    4820:	1fff8742 	.word	0x1fff8742
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    4824:	f890 123f 	ldrb.w	r1, [r0, #575]	; 0x23f
    4828:	2900      	cmp	r1, #0
    482a:	f47f aea2 	bne.w	4572 <switch_mode(LEDStruct&)+0xd6>
    482e:	4dad      	ldr	r5, [pc, #692]	; (4ae4 <switch_mode(LEDStruct&)+0x648>)
    4830:	882b      	ldrh	r3, [r5, #0]
    4832:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4836:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    483a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    483e:	3019      	adds	r0, #25
    4840:	b280      	uxth	r0, r0
    4842:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4846:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    484a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    484e:	3219      	adds	r2, #25
    4850:	b292      	uxth	r2, r2
    4852:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    4856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    485a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    485e:	3319      	adds	r3, #25
    4860:	b29b      	uxth	r3, r3
    4862:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    4866:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    486a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    486e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4872:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4876:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    487a:	b2c7      	uxtb	r7, r0
    487c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    487e:	3619      	adds	r6, #25
    4880:	b2db      	uxtb	r3, r3
    4882:	b2b6      	uxth	r6, r6
    4884:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    4888:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    488c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4890:	1190      	asrs	r0, r2, #6
    4892:	119a      	asrs	r2, r3, #6
    4894:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4898:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    489c:	3032      	adds	r0, #50	; 0x32
    489e:	f3c7 1781 	ubfx	r7, r7, #6, #2
    48a2:	323c      	adds	r2, #60	; 0x3c
    48a4:	121b      	asrs	r3, r3, #8
    48a6:	b2c0      	uxtb	r0, r0
    48a8:	3701      	adds	r7, #1
    48aa:	b2d2      	uxtb	r2, r2
    48ac:	3314      	adds	r3, #20
    48ae:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    48b2:	b2db      	uxtb	r3, r3
    48b4:	2201      	movs	r2, #1
    48b6:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    48b8:	802e      	strh	r6, [r5, #0]
    48ba:	f7fe f895 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    48be:	e658      	b.n	4572 <switch_mode(LEDStruct&)+0xd6>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    48c0:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    48c4:	2a00      	cmp	r2, #0
    48c6:	f47f ae54 	bne.w	4572 <switch_mode(LEDStruct&)+0xd6>
    48ca:	4d86      	ldr	r5, [pc, #536]	; (4ae4 <switch_mode(LEDStruct&)+0x648>)
    48cc:	882b      	ldrh	r3, [r5, #0]
    48ce:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    48d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    48d6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    48da:	3019      	adds	r0, #25
    48dc:	b280      	uxth	r0, r0
    48de:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    48e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    48e6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    48ea:	3119      	adds	r1, #25
    48ec:	b289      	uxth	r1, r1
    48ee:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    48f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    48f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    48fa:	3319      	adds	r3, #25
    48fc:	b29b      	uxth	r3, r3
    48fe:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    4902:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4906:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    490a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    490e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4912:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4916:	b2c7      	uxtb	r7, r0
    4918:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    491a:	3619      	adds	r6, #25
    491c:	b2db      	uxtb	r3, r3
    491e:	b2b6      	uxth	r6, r6
    4920:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    4924:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4928:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    492c:	1188      	asrs	r0, r1, #6
    492e:	1199      	asrs	r1, r3, #6
    4930:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4934:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    4938:	3032      	adds	r0, #50	; 0x32
    493a:	f3c7 1781 	ubfx	r7, r7, #6, #2
    493e:	313c      	adds	r1, #60	; 0x3c
    4940:	121b      	asrs	r3, r3, #8
    4942:	b2c0      	uxtb	r0, r0
    4944:	3701      	adds	r7, #1
    4946:	b2c9      	uxtb	r1, r1
    4948:	3314      	adds	r3, #20
    494a:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    494e:	b2db      	uxtb	r3, r3
    4950:	2101      	movs	r1, #1
    4952:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4954:	802e      	strh	r6, [r5, #0]
    4956:	f7fe f847 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    495a:	e60a      	b.n	4572 <switch_mode(LEDStruct&)+0xd6>
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    495c:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    4960:	2a00      	cmp	r2, #0
    4962:	f47f ae06 	bne.w	4572 <switch_mode(LEDStruct&)+0xd6>
    4966:	4d5f      	ldr	r5, [pc, #380]	; (4ae4 <switch_mode(LEDStruct&)+0x648>)
    4968:	882b      	ldrh	r3, [r5, #0]
    496a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    496e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4972:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4976:	3019      	adds	r0, #25
    4978:	b280      	uxth	r0, r0
    497a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    497e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4982:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4986:	3119      	adds	r1, #25
    4988:	b289      	uxth	r1, r1
    498a:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    498e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4992:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4996:	3319      	adds	r3, #25
    4998:	b29b      	uxth	r3, r3
    499a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    499e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49a2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    49a6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49aa:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49ae:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    49b2:	b2c7      	uxtb	r7, r0
    49b4:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49b6:	3619      	adds	r6, #25
    49b8:	b2db      	uxtb	r3, r3
    49ba:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    49be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    49c2:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    49c6:	b2b6      	uxth	r6, r6
    49c8:	1188      	asrs	r0, r1, #6
    49ca:	1199      	asrs	r1, r3, #6
    49cc:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49d0:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    49d4:	3032      	adds	r0, #50	; 0x32
    49d6:	f3c7 1781 	ubfx	r7, r7, #6, #2
    49da:	313c      	adds	r1, #60	; 0x3c
    49dc:	121b      	asrs	r3, r3, #8
    49de:	b2c0      	uxtb	r0, r0
    49e0:	3701      	adds	r7, #1
    49e2:	b2c9      	uxtb	r1, r1
    49e4:	3314      	adds	r3, #20
    49e6:	e5bc      	b.n	4562 <switch_mode(LEDStruct&)+0xc6>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    49e8:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    49ec:	2a00      	cmp	r2, #0
    49ee:	f47f ae42 	bne.w	4676 <switch_mode(LEDStruct&)+0x1da>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49f2:	493c      	ldr	r1, [pc, #240]	; (4ae4 <switch_mode(LEDStruct&)+0x648>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    49f4:	f880 223e 	strb.w	r2, [r0, #574]	; 0x23e
    49f8:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    49fa:	f880 2246 	strb.w	r2, [r0, #582]	; 0x246
    49fe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a0a:	3319      	adds	r3, #25
    4a0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a14:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a18:	3319      	adds	r3, #25
    4a1a:	b29b      	uxth	r3, r3
    4a1c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4a20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4a24:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4a28:	3019      	adds	r0, #25
    4a2a:	b280      	uxth	r0, r0
    4a2c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4a30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4a34:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a38:	3219      	adds	r2, #25
    4a3a:	b292      	uxth	r2, r2
    4a3c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    4a40:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    4a44:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4a48:	3719      	adds	r7, #25
    4a4a:	b2bf      	uxth	r7, r7
    4a4c:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    4a50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    4a54:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4a58:	3519      	adds	r5, #25
    4a5a:	b2ad      	uxth	r5, r5
    4a5c:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a60:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a64:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4a68:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a6a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4a6e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4a72:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4a76:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a78:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4a7c:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    4a7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4a82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4a86:	11f6      	asrs	r6, r6, #7
    4a88:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4a8c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    4a90:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4a94:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a96:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4a9a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    4a9c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    4a9e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4aa0:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4aa4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4aa8:	f884 0241 	strb.w	r0, [r4, #577]	; 0x241
    4aac:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4ab0:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4ab2:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    4ab4:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4ab8:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4abc:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4ac0:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4ac2:	f884 3243 	strb.w	r3, [r4, #579]	; 0x243
	leds.juggle_diff		 = jd;
    4ac6:	f884 6244 	strb.w	r6, [r4, #580]	; 0x244
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4aca:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4ace:	f884 01d6 	strb.w	r0, [r4, #470]	; 0x1d6
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4ad2:	f884 5245 	strb.w	r5, [r4, #581]	; 0x245
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4ad6:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4ada:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4ade:	f884 2247 	strb.w	r2, [r4, #583]	; 0x247
    4ae2:	e5c8      	b.n	4676 <switch_mode(LEDStruct&)+0x1da>
    4ae4:	1fff8742 	.word	0x1fff8742
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    4ae8:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    4aec:	2a00      	cmp	r2, #0
    4aee:	f47f adc2 	bne.w	4676 <switch_mode(LEDStruct&)+0x1da>
    4af2:	499a      	ldr	r1, [pc, #616]	; (4d5c <switch_mode(LEDStruct&)+0x8c0>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4af4:	f880 223e 	strb.w	r2, [r0, #574]	; 0x23e
    4af8:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4afa:	f880 2247 	strb.w	r2, [r0, #583]	; 0x247
    4afe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b0a:	3319      	adds	r3, #25
    4b0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b14:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b18:	3319      	adds	r3, #25
    4b1a:	b29b      	uxth	r3, r3
    4b1c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4b20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b24:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4b28:	3019      	adds	r0, #25
    4b2a:	b280      	uxth	r0, r0
    4b2c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4b30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4b34:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b38:	3219      	adds	r2, #25
    4b3a:	b292      	uxth	r2, r2
    4b3c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    4b40:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    4b44:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4b48:	3719      	adds	r7, #25
    4b4a:	b2bf      	uxth	r7, r7
    4b4c:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    4b50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    4b54:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4b58:	3519      	adds	r5, #25
    4b5a:	b2ad      	uxth	r5, r5
    4b5c:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b60:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b64:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_numdots 	 = jn;
    4b68:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b6a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4b6e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4b72:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4b76:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b78:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4b7c:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    4b7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4b82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4b86:	11f6      	asrs	r6, r6, #7
    4b88:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4b8c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    4b90:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4b94:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b96:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4b9a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    4b9c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    4b9e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4ba0:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4ba4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4ba8:	f884 0241 	strb.w	r0, [r4, #577]	; 0x241
    4bac:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4bb0:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4bb2:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    4bb4:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4bb8:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4bbc:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4bc0:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4bc2:	f884 3243 	strb.w	r3, [r4, #579]	; 0x243
	leds.juggle_diff		 = jd;
    4bc6:	f884 6244 	strb.w	r6, [r4, #580]	; 0x244
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bca:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4bce:	f884 01d6 	strb.w	r0, [r4, #470]	; 0x1d6
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4bd2:	f884 5245 	strb.w	r5, [r4, #581]	; 0x245
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4bd6:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4bda:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4bde:	f884 2246 	strb.w	r2, [r4, #582]	; 0x246
    4be2:	e548      	b.n	4676 <switch_mode(LEDStruct&)+0x1da>
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    4be4:	f890 123f 	ldrb.w	r1, [r0, #575]	; 0x23f
    4be8:	2900      	cmp	r1, #0
    4bea:	f47f ad44 	bne.w	4676 <switch_mode(LEDStruct&)+0x1da>
    4bee:	485b      	ldr	r0, [pc, #364]	; (4d5c <switch_mode(LEDStruct&)+0x8c0>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4bf0:	f884 123e 	strb.w	r1, [r4, #574]	; 0x23e
    4bf4:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4bf6:	f884 1246 	strb.w	r1, [r4, #582]	; 0x246
    4bfa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4bfe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c02:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c06:	3319      	adds	r3, #25
    4c08:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c10:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c14:	3319      	adds	r3, #25
    4c16:	b29b      	uxth	r3, r3
    4c18:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4c1c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4c20:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4c24:	3519      	adds	r5, #25
    4c26:	b2ad      	uxth	r5, r5
    4c28:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    4c2c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    4c30:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c34:	3219      	adds	r2, #25
    4c36:	b292      	uxth	r2, r2
    4c38:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    4c3c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    4c40:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4c44:	3719      	adds	r7, #25
    4c46:	b2bf      	uxth	r7, r7
    4c48:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    4c4c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    4c50:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4c54:	3619      	adds	r6, #25
    4c56:	b2b6      	uxth	r6, r6
    4c58:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    4c5c:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c60:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4c64:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    4c68:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4c6c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c6e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4c72:	b2ed      	uxtb	r5, r5
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4c74:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4c76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4c7e:	f10c 0c19 	add.w	ip, ip, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4c82:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    4c86:	fa1f fc8c 	uxth.w	ip, ip
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4c8a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c8e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4c92:	11aa      	asrs	r2, r5, #6
    4c94:	3208      	adds	r2, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4c96:	ea4f 1eee 	mov.w	lr, lr, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4c9a:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4c9c:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4ca0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4ca4:	f884 1247 	strb.w	r1, [r4, #583]	; 0x247
    4ca8:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    4cac:	f10e 0501 	add.w	r5, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4cb0:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4cb2:	3701      	adds	r7, #1
	leds.juggle_index_reset  = jir;
    4cb4:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4cb8:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4cbc:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4cc0:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4cc2:	f884 5241 	strb.w	r5, [r4, #577]	; 0x241
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4cc6:	f884 3243 	strb.w	r3, [r4, #579]	; 0x243
	leds.juggle_diff		 = jd;
    4cca:	f884 7244 	strb.w	r7, [r4, #580]	; 0x244
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cce:	f8a0 c000 	strh.w	ip, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4cd2:	f884 11d6 	strb.w	r1, [r4, #470]	; 0x1d6
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4cd6:	f884 6245 	strb.w	r6, [r4, #581]	; 0x245
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    4cda:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4cde:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
    4ce2:	e4c8      	b.n	4676 <switch_mode(LEDStruct&)+0x1da>
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4ce4:	b005      	add	sp, #20
    4ce6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			one_sin(leds);
			break;

		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
    4cea:	f7ff bb99 	b.w	4420 <fireworks(LEDStruct&)>
			break;
	}
}
    4cee:	b005      	add	sp, #20
    4cf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			confetti(leds);
			break;

		// Sin Functions
		case ONE_SIN:
			one_sin(leds);
    4cf4:	f7fe bea2 	b.w	3a3c <one_sin(LEDStruct&)>
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4cf8:	b005      	add	sp, #20
    4cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			pride(leds);
			break;

		// Confetti Functions
		case CONFETTI:
			confetti(leds);
    4cfe:	f7fe be2b 	b.w	3958 <confetti(LEDStruct&)>
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4d02:	b005      	add	sp, #20
    4d04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    4d08:	f7fe bfd8 	b.w	3cbc <pride(LEDStruct&)>
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4d0c:	b005      	add	sp, #20
    4d0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			torch(leds);
			break;

		// Colorwave and Pride Functions
		case COLORWAVE:
			colorwave(leds);
    4d12:	f7fe bc45 	b.w	35a0 <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0, 20, 100, 90); }		// sync on  | mirror must be off
    4d16:	f890 223f 	ldrb.w	r2, [r0, #575]	; 0x23f
    4d1a:	2a00      	cmp	r2, #0
    4d1c:	f47f ad26 	bne.w	476c <switch_mode(LEDStruct&)+0x2d0>
    4d20:	4e0e      	ldr	r6, [pc, #56]	; (4d5c <switch_mode(LEDStruct&)+0x8c0>)
    4d22:	8833      	ldrh	r3, [r6, #0]
    4d24:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4d28:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4d2c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4d30:	3519      	adds	r5, #25
    4d32:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d34:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    4d38:	f3c3 1381 	ubfx	r3, r3, #6, #2
    4d3c:	3301      	adds	r3, #1
    4d3e:	205a      	movs	r0, #90	; 0x5a
    4d40:	2164      	movs	r1, #100	; 0x64
    4d42:	9302      	str	r3, [sp, #8]
    4d44:	9001      	str	r0, [sp, #4]
    4d46:	9100      	str	r1, [sp, #0]
    4d48:	2314      	movs	r3, #20
    4d4a:	2101      	movs	r1, #1
    4d4c:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d4e:	8035      	strh	r5, [r6, #0]
    4d50:	f7fd fe4a 	bl	29e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4d54:	e50a      	b.n	476c <switch_mode(LEDStruct&)+0x2d0>
		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
			break;
	}
}
    4d56:	b005      	add	sp, #20
    4d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d5a:	bf00      	nop
    4d5c:	1fff8742 	.word	0x1fff8742

00004d60 <setup>:

Mode start_mode = COLORWAVE;

// ================ SETUP ================

void setup() {
    4d60:	b570      	push	{r4, r5, r6, lr}
    4d62:	f640 31b8 	movw	r1, #3000	; 0xbb8
    4d66:	b082      	sub	sp, #8
    4d68:	4863      	ldr	r0, [pc, #396]	; (4ef8 <setup+0x198>)
    4d6a:	f001 fa53 	bl	6214 <VisualMicroDebug::init(unsigned long)>
    4d6e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    4d72:	4861      	ldr	r0, [pc, #388]	; (4ef8 <setup+0x198>)
    4d74:	f001 fa4a 	bl	620c <VisualMicroDebug::begin(unsigned long)>
    4d78:	2101      	movs	r1, #1
    4d7a:	485f      	ldr	r0, [pc, #380]	; (4ef8 <setup+0x198>)
    4d7c:	f001 fa20 	bl	61c0 <VisualMicroDebug::outPacketStart(bool)>
    4d80:	b150      	cbz	r0, 4d98 <setup+0x38>
    4d82:	2110      	movs	r1, #16
    4d84:	485d      	ldr	r0, [pc, #372]	; (4efc <setup+0x19c>)
    4d86:	f002 fd77 	bl	7878 <usb_serial_write>
    4d8a:	485b      	ldr	r0, [pc, #364]	; (4ef8 <setup+0x198>)
    4d8c:	210a      	movs	r1, #10
    4d8e:	f001 fa05 	bl	619c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    4d92:	4859      	ldr	r0, [pc, #356]	; (4ef8 <setup+0x198>)
    4d94:	f001 fa38 	bl	6208 <VisualMicroDebug::outPacketEnd()>
    4d98:	2201      	movs	r2, #1
    4d9a:	2100      	movs	r1, #0
    4d9c:	4856      	ldr	r0, [pc, #344]	; (4ef8 <setup+0x198>)
    4d9e:	f001 fae5 	bl	636c <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    4da2:	f240 51dc 	movw	r1, #1500	; 0x5dc
    4da6:	4856      	ldr	r0, [pc, #344]	; (4f00 <setup+0x1a0>)
    4da8:	f002 ffc2 	bl	7d30 <Stream::setTimeout(unsigned long)>
    4dac:	2108      	movs	r1, #8
    4dae:	4855      	ldr	r0, [pc, #340]	; (4f04 <setup+0x1a4>)
    4db0:	f002 fd62 	bl	7878 <usb_serial_write>
    4db4:	4852      	ldr	r0, [pc, #328]	; (4f00 <setup+0x1a0>)
    4db6:	f002 ff63 	bl	7c80 <Print::println()>

	delay(1000);
    4dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4dbe:	f001 fd43 	bl	6848 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4dc2:	4851      	ldr	r0, [pc, #324]	; (4f08 <setup+0x1a8>)
    4dc4:	6803      	ldr	r3, [r0, #0]
    4dc6:	f013 0401 	ands.w	r4, r3, #1
    4dca:	d071      	beq.n	4eb0 <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4dcc:	4c4f      	ldr	r4, [pc, #316]	; (4f0c <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4dce:	4950      	ldr	r1, [pc, #320]	; (4f10 <setup+0x1b0>)
    4dd0:	4850      	ldr	r0, [pc, #320]	; (4f14 <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    4dd2:	4d51      	ldr	r5, [pc, #324]	; (4f18 <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4dd4:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4dd6:	2300      	movs	r3, #0
    4dd8:	2296      	movs	r2, #150	; 0x96
    4dda:	f000 ff21 	bl	5c20 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4dde:	22b0      	movs	r2, #176	; 0xb0
    4de0:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    4de2:	4620      	mov	r0, r4
    4de4:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    4de6:	7026      	strb	r6, [r4, #0]
    4de8:	f88d 2005 	strb.w	r2, [sp, #5]
    4dec:	f88d 3006 	strb.w	r3, [sp, #6]
    4df0:	f88d 6004 	strb.w	r6, [sp, #4]
    4df4:	f000 ff54 	bl	5ca0 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    4df8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    4dfc:	2005      	movs	r0, #5
    4dfe:	f001 f9c1 	bl	6184 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    4e02:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    4e06:	2002      	movs	r0, #2
    4e08:	802b      	strh	r3, [r5, #0]
    4e0a:	f001 fbef 	bl	65ec <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    4e0e:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    4e10:	2100      	movs	r1, #0
    4e12:	4403      	add	r3, r0
    4e14:	4620      	mov	r0, r4
    4e16:	802b      	strh	r3, [r5, #0]
    4e18:	f001 f854 	bl	5ec4 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    4e1c:	7821      	ldrb	r1, [r4, #0]
    4e1e:	4620      	mov	r0, r4
    4e20:	f000 ff76 	bl	5d10 <CFastLED::show(unsigned char)>
    4e24:	4620      	mov	r0, r4
    4e26:	2132      	movs	r1, #50	; 0x32
    4e28:	f000 ffd4 	bl	5dd4 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4e2c:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    4e2e:	aa01      	add	r2, sp, #4
    4e30:	2196      	movs	r1, #150	; 0x96
    4e32:	4837      	ldr	r0, [pc, #220]	; (4f10 <setup+0x1b0>)
    4e34:	f88d 6004 	strb.w	r6, [sp, #4]
    4e38:	f88d 5005 	strb.w	r5, [sp, #5]
    4e3c:	f88d 5006 	strb.w	r5, [sp, #6]
    4e40:	f000 fd44 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
    4e44:	4620      	mov	r0, r4
    4e46:	21fa      	movs	r1, #250	; 0xfa
    4e48:	f000 ffc4 	bl	5dd4 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    4e4c:	aa01      	add	r2, sp, #4
    4e4e:	2196      	movs	r1, #150	; 0x96
    4e50:	482f      	ldr	r0, [pc, #188]	; (4f10 <setup+0x1b0>)
    4e52:	f88d 6006 	strb.w	r6, [sp, #6]
    4e56:	f88d 5004 	strb.w	r5, [sp, #4]
    4e5a:	f88d 5005 	strb.w	r5, [sp, #5]
    4e5e:	f000 fd35 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
    4e62:	4620      	mov	r0, r4
    4e64:	21fa      	movs	r1, #250	; 0xfa
    4e66:	f000 ffb5 	bl	5dd4 <CFastLED::delay(unsigned long)>
    4e6a:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    4e6c:	aa01      	add	r2, sp, #4
    4e6e:	2196      	movs	r1, #150	; 0x96
    4e70:	4827      	ldr	r0, [pc, #156]	; (4f10 <setup+0x1b0>)
    4e72:	f88d 3005 	strb.w	r3, [sp, #5]
    4e76:	f88d 5004 	strb.w	r5, [sp, #4]
    4e7a:	f88d 5006 	strb.w	r5, [sp, #6]
    4e7e:	f000 fd25 	bl	58cc <fill_solid(CRGB*, int, CRGB const&)>
    4e82:	4620      	mov	r0, r4
    4e84:	21fa      	movs	r1, #250	; 0xfa
    4e86:	f000 ffa5 	bl	5dd4 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    4e8a:	4629      	mov	r1, r5
    4e8c:	4620      	mov	r0, r4
    4e8e:	f001 f819 	bl	5ec4 <CFastLED::clear(bool)>
    4e92:	4620      	mov	r0, r4
    4e94:	21fa      	movs	r1, #250	; 0xfa
    4e96:	f000 ff9d 	bl	5dd4 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    4e9a:	f7fb fd3d 	bl	918 <initialize()>
    4e9e:	210e      	movs	r1, #14
    4ea0:	481e      	ldr	r0, [pc, #120]	; (4f1c <setup+0x1bc>)
    4ea2:	f002 fce9 	bl	7878 <usb_serial_write>
    4ea6:	4816      	ldr	r0, [pc, #88]	; (4f00 <setup+0x1a0>)
    4ea8:	f002 feea 	bl	7c80 <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    4eac:	b002      	add	sp, #8
    4eae:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    4eb0:	f001 fc4a 	bl	6748 <__cxa_guard_acquire>
    4eb4:	2800      	cmp	r0, #0
    4eb6:	d089      	beq.n	4dcc <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4eb8:	4919      	ldr	r1, [pc, #100]	; (4f20 <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4eba:	4b16      	ldr	r3, [pc, #88]	; (4f14 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4ebc:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4ebe:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4ec0:	22ff      	movs	r2, #255	; 0xff
    4ec2:	2501      	movs	r5, #1
    4ec4:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    4ec6:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    4ec8:	749d      	strb	r5, [r3, #18]
    4eca:	731a      	strb	r2, [r3, #12]
    4ecc:	735a      	strb	r2, [r3, #13]
    4ece:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4ed0:	73da      	strb	r2, [r3, #15]
    4ed2:	741a      	strb	r2, [r3, #16]
    4ed4:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4ed6:	b160      	cbz	r0, 4ef2 <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    4ed8:	4a12      	ldr	r2, [pc, #72]	; (4f24 <setup+0x1c4>)
    4eda:	6811      	ldr	r1, [r2, #0]
    4edc:	b101      	cbz	r1, 4ee0 <setup+0x180>
    4ede:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    4ee0:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    4ee2:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    4ee4:	4910      	ldr	r1, [pc, #64]	; (4f28 <setup+0x1c8>)
    4ee6:	4808      	ldr	r0, [pc, #32]	; (4f08 <setup+0x1a8>)
    4ee8:	619a      	str	r2, [r3, #24]
    4eea:	6019      	str	r1, [r3, #0]
    4eec:	f001 fc32 	bl	6754 <__cxa_guard_release>
    4ef0:	e76c      	b.n	4dcc <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    4ef2:	600b      	str	r3, [r1, #0]
    4ef4:	e7f0      	b.n	4ed8 <setup+0x178>
    4ef6:	bf00      	nop
    4ef8:	1fff9d10 	.word	0x1fff9d10
    4efc:	0000a3c0 	.word	0x0000a3c0
    4f00:	1fff874c 	.word	0x1fff874c
    4f04:	0000a3d4 	.word	0x0000a3d4
    4f08:	1fff8c4c 	.word	0x1fff8c4c
    4f0c:	1fff9ce8 	.word	0x1fff9ce8
    4f10:	1fff9b24 	.word	0x1fff9b24
    4f14:	1fff8c50 	.word	0x1fff8c50
    4f18:	1fff8742 	.word	0x1fff8742
    4f1c:	0000a3e0 	.word	0x0000a3e0
    4f20:	1fff9cf8 	.word	0x1fff9cf8
    4f24:	1fff9d08 	.word	0x1fff9d08
    4f28:	00008ae0 	.word	0x00008ae0

00004f2c <loop>:



// ================ LOOP ================

void loop() {
    4f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f30:	b097      	sub	sp, #92	; 0x5c
	// Add entropy to randomness
	random16_add_entropy(random());
    4f32:	f003 fd09 	bl	8948 <random>

	// Change patterns
	EVERY_N_SECONDS(20){
    4f36:	4da3      	ldr	r5, [pc, #652]	; (51c4 <loop+0x298>)
    4f38:	4aa3      	ldr	r2, [pc, #652]	; (51c8 <loop+0x29c>)
    4f3a:	6829      	ldr	r1, [r5, #0]
    4f3c:	8813      	ldrh	r3, [r2, #0]
    4f3e:	4418      	add	r0, r3
    4f40:	07cb      	lsls	r3, r1, #31
    4f42:	8010      	strh	r0, [r2, #0]
    4f44:	f140 81b2 	bpl.w	52ac <loop+0x380>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f48:	4ea0      	ldr	r6, [pc, #640]	; (51cc <loop+0x2a0>)
    4f4a:	4ca1      	ldr	r4, [pc, #644]	; (51d0 <loop+0x2a4>)
    4f4c:	6833      	ldr	r3, [r6, #0]
    4f4e:	9303      	str	r3, [sp, #12]
	return ret;
    4f50:	9a03      	ldr	r2, [sp, #12]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    4f52:	48a0      	ldr	r0, [pc, #640]	; (51d4 <loop+0x2a8>)
    4f54:	8823      	ldrh	r3, [r4, #0]
    4f56:	8861      	ldrh	r1, [r4, #2]
    4f58:	fba0 0202 	umull	r0, r2, r0, r2
    4f5c:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    4f60:	b29b      	uxth	r3, r3
    4f62:	4299      	cmp	r1, r3
    4f64:	d809      	bhi.n	4f7a <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f66:	6833      	ldr	r3, [r6, #0]
    4f68:	9302      	str	r3, [sp, #8]
	return ret;
    4f6a:	9b02      	ldr	r3, [sp, #8]
    4f6c:	4a99      	ldr	r2, [pc, #612]	; (51d4 <loop+0x2a8>)
    4f6e:	fba2 2303 	umull	r2, r3, r2, r3
    4f72:	099b      	lsrs	r3, r3, #6
    4f74:	8023      	strh	r3, [r4, #0]
		change_pattern();
    4f76:	f7fb fe91 	bl	c9c <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    4f7a:	4d97      	ldr	r5, [pc, #604]	; (51d8 <loop+0x2ac>)
    4f7c:	682b      	ldr	r3, [r5, #0]
    4f7e:	07df      	lsls	r7, r3, #31
    4f80:	f140 818b 	bpl.w	529a <loop+0x36e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f84:	6833      	ldr	r3, [r6, #0]
    4f86:	4c95      	ldr	r4, [pc, #596]	; (51dc <loop+0x2b0>)
    4f88:	9306      	str	r3, [sp, #24]
	return ret;
    4f8a:	9a06      	ldr	r2, [sp, #24]
    4f8c:	4891      	ldr	r0, [pc, #580]	; (51d4 <loop+0x2a8>)
    4f8e:	8823      	ldrh	r3, [r4, #0]
    4f90:	8861      	ldrh	r1, [r4, #2]
    4f92:	fba0 0202 	umull	r0, r2, r0, r2
    4f96:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    4f9a:	b29b      	uxth	r3, r3
    4f9c:	4299      	cmp	r1, r3
    4f9e:	f240 814f 	bls.w	5240 <loop+0x314>
    4fa2:	4d8f      	ldr	r5, [pc, #572]	; (51e0 <loop+0x2b4>)
    4fa4:	f8df a280 	ldr.w	sl, [pc, #640]	; 5228 <loop+0x2fc>
    4fa8:	4f8e      	ldr	r7, [pc, #568]	; (51e4 <loop+0x2b8>)
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    4faa:	f8df 8280 	ldr.w	r8, [pc, #640]	; 522c <loop+0x300>
    4fae:	f8d8 3000 	ldr.w	r3, [r8]
    4fb2:	07dc      	lsls	r4, r3, #31
    4fb4:	f140 8169 	bpl.w	528a <loop+0x35e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4fb8:	6833      	ldr	r3, [r6, #0]
    4fba:	4c8b      	ldr	r4, [pc, #556]	; (51e8 <loop+0x2bc>)
    4fbc:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4fbe:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4fc4:	1a5b      	subs	r3, r3, r1
    4fc6:	4293      	cmp	r3, r2
    4fc8:	d30d      	bcc.n	4fe6 <loop+0xba>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4fca:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    4fcc:	4987      	ldr	r1, [pc, #540]	; (51ec <loop+0x2c0>)
    4fce:	9308      	str	r3, [sp, #32]
	return ret;
    4fd0:	9b08      	ldr	r3, [sp, #32]
    4fd2:	6023      	str	r3, [r4, #0]
    4fd4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    4fd8:	2218      	movs	r2, #24
    4fda:	f000 fdf9 	bl	5bd0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    4fde:	782b      	ldrb	r3, [r5, #0]
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	f040 818d 	bne.w	5300 <loop+0x3d4>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4fe6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 5230 <loop+0x304>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    4fea:	f8df 8248 	ldr.w	r8, [pc, #584]	; 5234 <loop+0x308>

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    4fee:	f8d9 3000 	ldr.w	r3, [r9]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    4ff2:	f8df b244 	ldr.w	fp, [pc, #580]	; 5238 <loop+0x30c>
	next_delay = next_leds.delay_time;
    4ff6:	f89a 21d5 	ldrb.w	r2, [sl, #469]	; 0x1d5
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    4ffa:	f897 11d5 	ldrb.w	r1, [r7, #469]	; 0x1d5
	next_delay = next_leds.delay_time;
    4ffe:	f888 2000 	strb.w	r2, [r8]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5002:	07d8      	lsls	r0, r3, #31
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    5004:	f88b 1000 	strb.w	r1, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5008:	f140 80c0 	bpl.w	518c <loop+0x260>
    500c:	4c78      	ldr	r4, [pc, #480]	; (51f0 <loop+0x2c4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    500e:	6833      	ldr	r3, [r6, #0]
    5010:	930c      	str	r3, [sp, #48]	; 0x30
    5012:	e894 0005 	ldmia.w	r4, {r0, r2}
	return ret;
    5016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5018:	1a1b      	subs	r3, r3, r0
    501a:	4293      	cmp	r3, r2
    501c:	f080 80c8 	bcs.w	51b0 <loop+0x284>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    5020:	f8df 9218 	ldr.w	r9, [pc, #536]	; 523c <loop+0x310>
    5024:	f8d9 3000 	ldr.w	r3, [r9]
    5028:	07d9      	lsls	r1, r3, #31
    502a:	d56d      	bpl.n	5108 <loop+0x1dc>
    502c:	4c71      	ldr	r4, [pc, #452]	; (51f4 <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    502e:	6833      	ldr	r3, [r6, #0]
    5030:	930f      	str	r3, [sp, #60]	; 0x3c
    5032:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    5036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5038:	1a5b      	subs	r3, r3, r1
    503a:	429a      	cmp	r2, r3
    503c:	d973      	bls.n	5126 <loop+0x1fa>
			switch_mode(next_leds);
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    503e:	782b      	ldrb	r3, [r5, #0]
    5040:	2b00      	cmp	r3, #0
    5042:	d079      	beq.n	5138 <loop+0x20c>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    5044:	4f6c      	ldr	r7, [pc, #432]	; (51f8 <loop+0x2cc>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    5046:	f7fb fe99 	bl	d7c <blending()>
    504a:	683b      	ldr	r3, [r7, #0]
    504c:	07da      	lsls	r2, r3, #31
    504e:	f140 8093 	bpl.w	5178 <loop+0x24c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5052:	6833      	ldr	r3, [r6, #0]
    5054:	4c69      	ldr	r4, [pc, #420]	; (51fc <loop+0x2d0>)
    5056:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    5058:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    505a:	485e      	ldr	r0, [pc, #376]	; (51d4 <loop+0x2a8>)
    505c:	8823      	ldrh	r3, [r4, #0]
    505e:	8861      	ldrh	r1, [r4, #2]
    5060:	fba0 0202 	umull	r0, r2, r0, r2
    5064:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    5068:	b29b      	uxth	r3, r3
    506a:	4299      	cmp	r1, r3
    506c:	d826      	bhi.n	50bc <loop+0x190>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    506e:	6833      	ldr	r3, [r6, #0]
    5070:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    5072:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5074:	4a57      	ldr	r2, [pc, #348]	; (51d4 <loop+0x2a8>)
			LEDDebug(curr_leds);
    5076:	485b      	ldr	r0, [pc, #364]	; (51e4 <loop+0x2b8>)
    5078:	fba2 2303 	umull	r2, r3, r2, r3
    507c:	099b      	lsrs	r3, r3, #6
    507e:	8023      	strh	r3, [r4, #0]
    5080:	f7fc fbfe 	bl	1880 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    5084:	782b      	ldrb	r3, [r5, #0]
    5086:	2b00      	cmp	r3, #0
    5088:	f040 8136 	bne.w	52f8 <loop+0x3cc>
    508c:	2114      	movs	r1, #20
    508e:	485c      	ldr	r0, [pc, #368]	; (5200 <loop+0x2d4>)
    5090:	f002 fbf2 	bl	7878 <usb_serial_write>
				LEDDebug(next_leds);
			}
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
    5094:	4b5b      	ldr	r3, [pc, #364]	; (5204 <loop+0x2d8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5096:	485c      	ldr	r0, [pc, #368]	; (5208 <loop+0x2dc>)
    5098:	8819      	ldrh	r1, [r3, #0]
    509a:	f002 fe41 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    509e:	485a      	ldr	r0, [pc, #360]	; (5208 <loop+0x2dc>)
    50a0:	f002 fdee 	bl	7c80 <Print::println()>
    50a4:	2116      	movs	r1, #22
    50a6:	4859      	ldr	r0, [pc, #356]	; (520c <loop+0x2e0>)
    50a8:	f002 fbe6 	bl	7878 <usb_serial_write>
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
    50ac:	4b58      	ldr	r3, [pc, #352]	; (5210 <loop+0x2e4>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    50ae:	4856      	ldr	r0, [pc, #344]	; (5208 <loop+0x2dc>)
    50b0:	8819      	ldrh	r1, [r3, #0]
    50b2:	f002 fe35 	bl	7d20 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    50b6:	4854      	ldr	r0, [pc, #336]	; (5208 <loop+0x2dc>)
    50b8:	f002 fde2 	bl	7c80 <Print::println()>
		}
		EVERY_N_MINUTES(1) {
    50bc:	4d55      	ldr	r5, [pc, #340]	; (5214 <loop+0x2e8>)
    50be:	682b      	ldr	r3, [r5, #0]
    50c0:	07db      	lsls	r3, r3, #31
    50c2:	f140 8109 	bpl.w	52d8 <loop+0x3ac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    50c6:	6833      	ldr	r3, [r6, #0]
    50c8:	4c53      	ldr	r4, [pc, #332]	; (5218 <loop+0x2ec>)
    50ca:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    50cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    50ce:	4853      	ldr	r0, [pc, #332]	; (521c <loop+0x2f0>)
    50d0:	8823      	ldrh	r3, [r4, #0]
    50d2:	8861      	ldrh	r1, [r4, #2]
    50d4:	fba0 0202 	umull	r0, r2, r0, r2
    50d8:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    50dc:	b29b      	uxth	r3, r3
    50de:	4299      	cmp	r1, r3
    50e0:	d80b      	bhi.n	50fa <loop+0x1ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    50e2:	6833      	ldr	r3, [r6, #0]
			number_of_min_on++;
    50e4:	494a      	ldr	r1, [pc, #296]	; (5210 <loop+0x2e4>)
    50e6:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    50e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    50ea:	484c      	ldr	r0, [pc, #304]	; (521c <loop+0x2f0>)
    50ec:	880a      	ldrh	r2, [r1, #0]
    50ee:	fba0 0303 	umull	r0, r3, r0, r3
    50f2:	0b9b      	lsrs	r3, r3, #14
    50f4:	3201      	adds	r2, #1
    50f6:	8023      	strh	r3, [r4, #0]
    50f8:	800a      	strh	r2, [r1, #0]
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    50fa:	4849      	ldr	r0, [pc, #292]	; (5220 <loop+0x2f4>)
    50fc:	7801      	ldrb	r1, [r0, #0]
    50fe:	f000 fe07 	bl	5d10 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    5102:	b017      	add	sp, #92	; 0x5c
    5104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    5108:	4648      	mov	r0, r9
    510a:	f001 fb1d 	bl	6748 <__cxa_guard_acquire>
    510e:	2800      	cmp	r0, #0
    5110:	f040 8127 	bne.w	5362 <loop+0x436>
    5114:	4c37      	ldr	r4, [pc, #220]	; (51f4 <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5116:	6833      	ldr	r3, [r6, #0]
    5118:	930f      	str	r3, [sp, #60]	; 0x3c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    511a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    511e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5120:	1a5b      	subs	r3, r3, r1
    5122:	4293      	cmp	r3, r2
    5124:	d38b      	bcc.n	503e <loop+0x112>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5126:	6833      	ldr	r3, [r6, #0]
    5128:	930e      	str	r3, [sp, #56]	; 0x38
		if(in_transition){
    512a:	782b      	ldrb	r3, [r5, #0]
	return ret;
    512c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    512e:	6022      	str	r2, [r4, #0]
    5130:	4a30      	ldr	r2, [pc, #192]	; (51f4 <loop+0x2c8>)
    5132:	2b00      	cmp	r3, #0
    5134:	f040 80d9 	bne.w	52ea <loop+0x3be>
    5138:	68b9      	ldr	r1, [r7, #8]
    513a:	4b3a      	ldr	r3, [pc, #232]	; (5224 <loop+0x2f8>)
    513c:	f997 e000 	ldrsb.w	lr, [r7]



// ================ LOOP ================

void loop() {
    5140:	4608      	mov	r0, r1
    5142:	f503 77e1 	add.w	r7, r3, #450	; 0x1c2
    5146:	ea30 022e 	bics.w	r2, r0, lr, asr #32
    514a:	bf28      	it	cs
    514c:	460a      	movcs	r2, r1
    514e:	3303      	adds	r3, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5150:	7814      	ldrb	r4, [r2, #0]
    5152:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    5156:	7854      	ldrb	r4, [r2, #1]
    5158:	f803 4c02 	strb.w	r4, [r3, #-2]
        b = rhs.b;
    515c:	7892      	ldrb	r2, [r2, #2]
    515e:	f803 2c01 	strb.w	r2, [r3, #-1]
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    5162:	429f      	cmp	r7, r3
    5164:	f1a1 0103 	sub.w	r1, r1, #3
    5168:	f100 0003 	add.w	r0, r0, #3
    516c:	d1eb      	bne.n	5146 <loop+0x21a>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    516e:	4f22      	ldr	r7, [pc, #136]	; (51f8 <loop+0x2cc>)
    5170:	683b      	ldr	r3, [r7, #0]
    5172:	07da      	lsls	r2, r3, #31
    5174:	f53f af6d 	bmi.w	5052 <loop+0x126>
    5178:	4638      	mov	r0, r7
    517a:	f001 fae5 	bl	6748 <__cxa_guard_acquire>
    517e:	2800      	cmp	r0, #0
    5180:	f040 80fb 	bne.w	537a <loop+0x44e>
    5184:	4c1d      	ldr	r4, [pc, #116]	; (51fc <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5186:	6833      	ldr	r3, [r6, #0]
    5188:	9312      	str	r3, [sp, #72]	; 0x48
    518a:	e765      	b.n	5058 <loop+0x12c>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    518c:	4648      	mov	r0, r9
    518e:	f001 fadb 	bl	6748 <__cxa_guard_acquire>
    5192:	2800      	cmp	r0, #0
    5194:	f040 80d9 	bne.w	534a <loop+0x41e>
    5198:	4c15      	ldr	r4, [pc, #84]	; (51f0 <loop+0x2c4>)
    519a:	6833      	ldr	r3, [r6, #0]
    519c:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    519e:	990c      	ldr	r1, [sp, #48]	; 0x30
    51a0:	6823      	ldr	r3, [r4, #0]
    51a2:	6862      	ldr	r2, [r4, #4]
    51a4:	1acb      	subs	r3, r1, r3
    51a6:	4293      	cmp	r3, r2
    51a8:	f4ff af3a 	bcc.w	5020 <loop+0xf4>
    51ac:	f89b 1000 	ldrb.w	r1, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    51b0:	6833      	ldr	r3, [r6, #0]
    51b2:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    51b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    51b6:	480b      	ldr	r0, [pc, #44]	; (51e4 <loop+0x2b8>)
    51b8:	6061      	str	r1, [r4, #4]
    51ba:	6023      	str	r3, [r4, #0]
    51bc:	f7ff f96e 	bl	449c <switch_mode(LEDStruct&)>
    51c0:	e72e      	b.n	5020 <loop+0xf4>
    51c2:	bf00      	nop
    51c4:	1fff93d0 	.word	0x1fff93d0
    51c8:	1fff8742 	.word	0x1fff8742
    51cc:	1fff9d60 	.word	0x1fff9d60
    51d0:	1fff93bc 	.word	0x1fff93bc
    51d4:	10624dd3 	.word	0x10624dd3
    51d8:	1fff93d4 	.word	0x1fff93d4
    51dc:	1fff8c70 	.word	0x1fff8c70
    51e0:	1fff93ac 	.word	0x1fff93ac
    51e4:	1fff93fc 	.word	0x1fff93fc
    51e8:	1fff93c0 	.word	0x1fff93c0
    51ec:	1fff9605 	.word	0x1fff9605
    51f0:	1fff93a4 	.word	0x1fff93a4
    51f4:	1fff939c 	.word	0x1fff939c
    51f8:	1fff93dc 	.word	0x1fff93dc
    51fc:	1fff93c8 	.word	0x1fff93c8
    5200:	0000a3f0 	.word	0x0000a3f0
    5204:	1fff8c6c 	.word	0x1fff8c6c
    5208:	1fff874c 	.word	0x1fff874c
    520c:	0000a408 	.word	0x0000a408
    5210:	1fff93ec 	.word	0x1fff93ec
    5214:	1fff93e0 	.word	0x1fff93e0
    5218:	1fff93f4 	.word	0x1fff93f4
    521c:	45e7b273 	.word	0x45e7b273
    5220:	1fff9ce8 	.word	0x1fff9ce8
    5224:	1fff9b24 	.word	0x1fff9b24
    5228:	1fff8c74 	.word	0x1fff8c74
    522c:	1fff93d8 	.word	0x1fff93d8
    5230:	1fff93f8 	.word	0x1fff93f8
    5234:	1fff93e4 	.word	0x1fff93e4
    5238:	1fff93e5 	.word	0x1fff93e5
    523c:	1fff93f0 	.word	0x1fff93f0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5240:	6833      	ldr	r3, [r6, #0]
    5242:	9305      	str	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5244:	4a5c      	ldr	r2, [pc, #368]	; (53b8 <loop+0x48c>)
	return ret;
    5246:	9b05      	ldr	r3, [sp, #20]
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (in_transition) { change_palette(next_leds); }
    5248:	4d5c      	ldr	r5, [pc, #368]	; (53bc <loop+0x490>)
    524a:	fba2 2303 	umull	r2, r3, r2, r3
    524e:	782a      	ldrb	r2, [r5, #0]
    5250:	099b      	lsrs	r3, r3, #6
    5252:	8023      	strh	r3, [r4, #0]
    5254:	b15a      	cbz	r2, 526e <loop+0x342>
	
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    5256:	f8df a180 	ldr.w	sl, [pc, #384]	; 53d8 <loop+0x4ac>
    525a:	f89a 323b 	ldrb.w	r3, [sl, #571]	; 0x23b
    525e:	2b00      	cmp	r3, #0
    5260:	f43f aea2 	beq.w	4fa8 <loop+0x7c>
    5264:	4650      	mov	r0, sl
    5266:	f7fc fde3 	bl	1e30 <change_palette(LEDStruct&) [clone .part.11]>
    526a:	4f55      	ldr	r7, [pc, #340]	; (53c0 <loop+0x494>)
    526c:	e69d      	b.n	4faa <loop+0x7e>
    526e:	4f54      	ldr	r7, [pc, #336]	; (53c0 <loop+0x494>)
    5270:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
    5274:	2b00      	cmp	r3, #0
    5276:	d14a      	bne.n	530e <loop+0x3e2>
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    5278:	f8df 8174 	ldr.w	r8, [pc, #372]	; 53f0 <loop+0x4c4>
    527c:	f8df a158 	ldr.w	sl, [pc, #344]	; 53d8 <loop+0x4ac>
    5280:	f8d8 3000 	ldr.w	r3, [r8]
    5284:	07dc      	lsls	r4, r3, #31
    5286:	f53f ae97 	bmi.w	4fb8 <loop+0x8c>
    528a:	4640      	mov	r0, r8
    528c:	f001 fa5c 	bl	6748 <__cxa_guard_acquire>
    5290:	2800      	cmp	r0, #0
    5292:	d140      	bne.n	5316 <loop+0x3ea>
    5294:	4c4b      	ldr	r4, [pc, #300]	; (53c4 <loop+0x498>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5296:	6833      	ldr	r3, [r6, #0]
    5298:	e690      	b.n	4fbc <loop+0x90>
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    529a:	4628      	mov	r0, r5
    529c:	f001 fa54 	bl	6748 <__cxa_guard_acquire>
    52a0:	2800      	cmp	r0, #0
    52a2:	d143      	bne.n	532c <loop+0x400>
    52a4:	4c48      	ldr	r4, [pc, #288]	; (53c8 <loop+0x49c>)
    52a6:	6833      	ldr	r3, [r6, #0]
    52a8:	9306      	str	r3, [sp, #24]
    52aa:	e66e      	b.n	4f8a <loop+0x5e>
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    52ac:	4628      	mov	r0, r5
    52ae:	f001 fa4b 	bl	6748 <__cxa_guard_acquire>
    52b2:	4e46      	ldr	r6, [pc, #280]	; (53cc <loop+0x4a0>)
    52b4:	2800      	cmp	r0, #0
    52b6:	f43f ae48 	beq.w	4f4a <loop+0x1e>
    52ba:	6833      	ldr	r3, [r6, #0]
    52bc:	9301      	str	r3, [sp, #4]
    52be:	4a3e      	ldr	r2, [pc, #248]	; (53b8 <loop+0x48c>)
	return ret;
    52c0:	9b01      	ldr	r3, [sp, #4]
    52c2:	4c43      	ldr	r4, [pc, #268]	; (53d0 <loop+0x4a4>)
    52c4:	fba2 2303 	umull	r2, r3, r2, r3
    52c8:	099b      	lsrs	r3, r3, #6
    52ca:	2214      	movs	r2, #20
    52cc:	4628      	mov	r0, r5
    52ce:	8023      	strh	r3, [r4, #0]
    52d0:	8062      	strh	r2, [r4, #2]
    52d2:	f001 fa3f 	bl	6754 <__cxa_guard_release>
    52d6:	e639      	b.n	4f4c <loop+0x20>
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    52d8:	4628      	mov	r0, r5
    52da:	f001 fa35 	bl	6748 <__cxa_guard_acquire>
    52de:	2800      	cmp	r0, #0
    52e0:	d15a      	bne.n	5398 <loop+0x46c>
    52e2:	4c3c      	ldr	r4, [pc, #240]	; (53d4 <loop+0x4a8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    52e4:	6833      	ldr	r3, [r6, #0]
    52e6:	9315      	str	r3, [sp, #84]	; 0x54
    52e8:	e6f0      	b.n	50cc <loop+0x1a0>
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    52ea:	f898 3000 	ldrb.w	r3, [r8]

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    52ee:	483a      	ldr	r0, [pc, #232]	; (53d8 <loop+0x4ac>)
    52f0:	6053      	str	r3, [r2, #4]
    52f2:	f7ff f8d3 	bl	449c <switch_mode(LEDStruct&)>
    52f6:	e6a2      	b.n	503e <loop+0x112>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    52f8:	4837      	ldr	r0, [pc, #220]	; (53d8 <loop+0x4ac>)
    52fa:	f7fc fac1 	bl	1880 <LEDDebug(LEDStruct&)>
    52fe:	e6c5      	b.n	508c <loop+0x160>
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    5300:	4936      	ldr	r1, [pc, #216]	; (53dc <loop+0x4b0>)
    5302:	2218      	movs	r2, #24
    5304:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    5308:	f000 fc62 	bl	5bd0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    530c:	e66b      	b.n	4fe6 <loop+0xba>
    530e:	4638      	mov	r0, r7
    5310:	f7fc fd8e 	bl	1e30 <change_palette(LEDStruct&) [clone .part.11]>
    5314:	e7b0      	b.n	5278 <loop+0x34c>
    5316:	6833      	ldr	r3, [r6, #0]
    5318:	4c2a      	ldr	r4, [pc, #168]	; (53c4 <loop+0x498>)
    531a:	9307      	str	r3, [sp, #28]
	return ret;
    531c:	9b07      	ldr	r3, [sp, #28]
    531e:	6023      	str	r3, [r4, #0]
    5320:	2332      	movs	r3, #50	; 0x32
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    5322:	4640      	mov	r0, r8
    5324:	6063      	str	r3, [r4, #4]
    5326:	f001 fa15 	bl	6754 <__cxa_guard_release>
    532a:	e7b4      	b.n	5296 <loop+0x36a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    532c:	6833      	ldr	r3, [r6, #0]
    532e:	9304      	str	r3, [sp, #16]
	return ret;
    5330:	9b04      	ldr	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5332:	4a21      	ldr	r2, [pc, #132]	; (53b8 <loop+0x48c>)
    5334:	4c24      	ldr	r4, [pc, #144]	; (53c8 <loop+0x49c>)
    5336:	fba2 2303 	umull	r2, r3, r2, r3
    533a:	099b      	lsrs	r3, r3, #6
    533c:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    533e:	4628      	mov	r0, r5
    5340:	8023      	strh	r3, [r4, #0]
    5342:	8062      	strh	r2, [r4, #2]
    5344:	f001 fa06 	bl	6754 <__cxa_guard_release>
    5348:	e7ad      	b.n	52a6 <loop+0x37a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    534a:	6833      	ldr	r3, [r6, #0]
    534c:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    534e:	4c24      	ldr	r4, [pc, #144]	; (53e0 <loop+0x4b4>)
	return ret;
    5350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5352:	f89b 3000 	ldrb.w	r3, [fp]
    5356:	6022      	str	r2, [r4, #0]
    5358:	4648      	mov	r0, r9
    535a:	6063      	str	r3, [r4, #4]
    535c:	f001 f9fa 	bl	6754 <__cxa_guard_release>
    5360:	e71b      	b.n	519a <loop+0x26e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5362:	6833      	ldr	r3, [r6, #0]
    5364:	930d      	str	r3, [sp, #52]	; 0x34
    5366:	4c1f      	ldr	r4, [pc, #124]	; (53e4 <loop+0x4b8>)
	return ret;
    5368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    536a:	f898 3000 	ldrb.w	r3, [r8]
    536e:	6022      	str	r2, [r4, #0]
    5370:	4648      	mov	r0, r9
    5372:	6063      	str	r3, [r4, #4]
    5374:	f001 f9ee 	bl	6754 <__cxa_guard_release>
    5378:	e6cd      	b.n	5116 <loop+0x1ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    537a:	6833      	ldr	r3, [r6, #0]
    537c:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    537e:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5380:	4a0d      	ldr	r2, [pc, #52]	; (53b8 <loop+0x48c>)
    5382:	4c19      	ldr	r4, [pc, #100]	; (53e8 <loop+0x4bc>)
    5384:	fba2 2303 	umull	r2, r3, r2, r3
    5388:	099b      	lsrs	r3, r3, #6
    538a:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    538c:	4638      	mov	r0, r7
    538e:	8023      	strh	r3, [r4, #0]
    5390:	8062      	strh	r2, [r4, #2]
    5392:	f001 f9df 	bl	6754 <__cxa_guard_release>
    5396:	e6f6      	b.n	5186 <loop+0x25a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5398:	6833      	ldr	r3, [r6, #0]
    539a:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    539c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    539e:	4a13      	ldr	r2, [pc, #76]	; (53ec <loop+0x4c0>)
    53a0:	4c0c      	ldr	r4, [pc, #48]	; (53d4 <loop+0x4a8>)
    53a2:	fba2 2303 	umull	r2, r3, r2, r3
    53a6:	0b9b      	lsrs	r3, r3, #14
    53a8:	2201      	movs	r2, #1
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    53aa:	4628      	mov	r0, r5
    53ac:	8023      	strh	r3, [r4, #0]
    53ae:	8062      	strh	r2, [r4, #2]
    53b0:	f001 f9d0 	bl	6754 <__cxa_guard_release>
    53b4:	e796      	b.n	52e4 <loop+0x3b8>
    53b6:	bf00      	nop
    53b8:	10624dd3 	.word	0x10624dd3
    53bc:	1fff93ac 	.word	0x1fff93ac
    53c0:	1fff93fc 	.word	0x1fff93fc
    53c4:	1fff93c0 	.word	0x1fff93c0
    53c8:	1fff8c70 	.word	0x1fff8c70
    53cc:	1fff9d60 	.word	0x1fff9d60
    53d0:	1fff93bc 	.word	0x1fff93bc
    53d4:	1fff93f4 	.word	0x1fff93f4
    53d8:	1fff8c74 	.word	0x1fff8c74
    53dc:	1fff8e7d 	.word	0x1fff8e7d
    53e0:	1fff93a4 	.word	0x1fff93a4
    53e4:	1fff939c 	.word	0x1fff939c
    53e8:	1fff93c8 	.word	0x1fff93c8
    53ec:	45e7b273 	.word	0x45e7b273
    53f0:	1fff93d8 	.word	0x1fff93d8

000053f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    53f4:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    53f6:	0604      	lsls	r4, r0, #24
    53f8:	f100 8119 	bmi.w	562e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    53fc:	4b48      	ldr	r3, [pc, #288]	; (5520 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    53fe:	4949      	ldr	r1, [pc, #292]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5400:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5402:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5404:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5406:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5408:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    540a:	bf00      	nop
    540c:	bf00      	nop
    540e:	bf00      	nop
    5410:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5412:	601a      	str	r2, [r3, #0]
    5414:	bf00      	nop
    5416:	bf00      	nop
    5418:	bf00      	nop
    541a:	bf00      	nop
    541c:	0641      	lsls	r1, r0, #25
    541e:	f140 8083 	bpl.w	5528 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5422:	4a40      	ldr	r2, [pc, #256]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    5424:	2102      	movs	r1, #2
    5426:	2304      	movs	r3, #4
    5428:	6011      	str	r1, [r2, #0]
    542a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    542c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    542e:	bf00      	nop
    5430:	bf00      	nop
    5432:	bf00      	nop
    5434:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5436:	6053      	str	r3, [r2, #4]
    5438:	bf00      	nop
    543a:	bf00      	nop
    543c:	bf00      	nop
    543e:	bf00      	nop
    5440:	0682      	lsls	r2, r0, #26
    5442:	f140 8084 	bpl.w	554e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5446:	4a37      	ldr	r2, [pc, #220]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    5448:	2102      	movs	r1, #2
    544a:	2304      	movs	r3, #4
    544c:	6011      	str	r1, [r2, #0]
    544e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5450:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5452:	bf00      	nop
    5454:	bf00      	nop
    5456:	bf00      	nop
    5458:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    545a:	6053      	str	r3, [r2, #4]
    545c:	bf00      	nop
    545e:	bf00      	nop
    5460:	bf00      	nop
    5462:	bf00      	nop
    5464:	06c3      	lsls	r3, r0, #27
    5466:	f140 8085 	bpl.w	5574 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    546a:	4a2e      	ldr	r2, [pc, #184]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    546c:	2102      	movs	r1, #2
    546e:	2304      	movs	r3, #4
    5470:	6011      	str	r1, [r2, #0]
    5472:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5474:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5476:	bf00      	nop
    5478:	bf00      	nop
    547a:	bf00      	nop
    547c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    547e:	6053      	str	r3, [r2, #4]
    5480:	bf00      	nop
    5482:	bf00      	nop
    5484:	bf00      	nop
    5486:	bf00      	nop
    5488:	0704      	lsls	r4, r0, #28
    548a:	f140 8086 	bpl.w	559a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    548e:	4a25      	ldr	r2, [pc, #148]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    5490:	2102      	movs	r1, #2
    5492:	2304      	movs	r3, #4
    5494:	6011      	str	r1, [r2, #0]
    5496:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5498:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    549a:	bf00      	nop
    549c:	bf00      	nop
    549e:	bf00      	nop
    54a0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    54a2:	6053      	str	r3, [r2, #4]
    54a4:	bf00      	nop
    54a6:	bf00      	nop
    54a8:	bf00      	nop
    54aa:	bf00      	nop
    54ac:	0741      	lsls	r1, r0, #29
    54ae:	f140 8087 	bpl.w	55c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    54b2:	4a1c      	ldr	r2, [pc, #112]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    54b4:	2102      	movs	r1, #2
    54b6:	2304      	movs	r3, #4
    54b8:	6011      	str	r1, [r2, #0]
    54ba:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    54bc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    54be:	bf00      	nop
    54c0:	bf00      	nop
    54c2:	bf00      	nop
    54c4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    54c6:	6053      	str	r3, [r2, #4]
    54c8:	bf00      	nop
    54ca:	bf00      	nop
    54cc:	bf00      	nop
    54ce:	bf00      	nop
    54d0:	0782      	lsls	r2, r0, #30
    54d2:	f140 8088 	bpl.w	55e6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    54d6:	4a13      	ldr	r2, [pc, #76]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    54d8:	2102      	movs	r1, #2
    54da:	2304      	movs	r3, #4
    54dc:	6011      	str	r1, [r2, #0]
    54de:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    54e0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    54e2:	bf00      	nop
    54e4:	bf00      	nop
    54e6:	bf00      	nop
    54e8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    54ea:	6053      	str	r3, [r2, #4]
    54ec:	bf00      	nop
    54ee:	bf00      	nop
    54f0:	bf00      	nop
    54f2:	bf00      	nop
    54f4:	07c3      	lsls	r3, r0, #31
    54f6:	f100 8089 	bmi.w	560c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    54fa:	4b09      	ldr	r3, [pc, #36]	; (5520 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    54fc:	4909      	ldr	r1, [pc, #36]	; (5524 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    54fe:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5500:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5502:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5504:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5506:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5508:	bf00      	nop
    550a:	bf00      	nop
    550c:	bf00      	nop
    550e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5510:	601a      	str	r2, [r3, #0]
    5512:	bf00      	nop
    5514:	bf00      	nop
    5516:	bf00      	nop
    5518:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    551a:	bc10      	pop	{r4}
    551c:	4770      	bx	lr
    551e:	bf00      	nop
    5520:	400ff0c8 	.word	0x400ff0c8
    5524:	400ff0c4 	.word	0x400ff0c4
    5528:	4b49      	ldr	r3, [pc, #292]	; (5650 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    552a:	494a      	ldr	r1, [pc, #296]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    552c:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    552e:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5530:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5532:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5534:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5536:	bf00      	nop
    5538:	bf00      	nop
    553a:	bf00      	nop
    553c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    553e:	601a      	str	r2, [r3, #0]
    5540:	bf00      	nop
    5542:	bf00      	nop
    5544:	bf00      	nop
    5546:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    5548:	0682      	lsls	r2, r0, #26
    554a:	f53f af7c 	bmi.w	5446 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    554e:	4b40      	ldr	r3, [pc, #256]	; (5650 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5550:	4940      	ldr	r1, [pc, #256]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5552:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5554:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5556:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5558:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    555a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    555c:	bf00      	nop
    555e:	bf00      	nop
    5560:	bf00      	nop
    5562:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5564:	601a      	str	r2, [r3, #0]
    5566:	bf00      	nop
    5568:	bf00      	nop
    556a:	bf00      	nop
    556c:	bf00      	nop
    556e:	06c3      	lsls	r3, r0, #27
    5570:	f53f af7b 	bmi.w	546a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    5574:	4b36      	ldr	r3, [pc, #216]	; (5650 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5576:	4937      	ldr	r1, [pc, #220]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5578:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    557a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    557c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    557e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5580:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5582:	bf00      	nop
    5584:	bf00      	nop
    5586:	bf00      	nop
    5588:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    558a:	601a      	str	r2, [r3, #0]
    558c:	bf00      	nop
    558e:	bf00      	nop
    5590:	bf00      	nop
    5592:	bf00      	nop
    5594:	0704      	lsls	r4, r0, #28
    5596:	f53f af7a 	bmi.w	548e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    559a:	4b2d      	ldr	r3, [pc, #180]	; (5650 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    559c:	492d      	ldr	r1, [pc, #180]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    559e:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55a0:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55a2:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55a4:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    55a6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    55a8:	bf00      	nop
    55aa:	bf00      	nop
    55ac:	bf00      	nop
    55ae:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55b0:	601a      	str	r2, [r3, #0]
    55b2:	bf00      	nop
    55b4:	bf00      	nop
    55b6:	bf00      	nop
    55b8:	bf00      	nop
    55ba:	0741      	lsls	r1, r0, #29
    55bc:	f53f af79 	bmi.w	54b2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    55c0:	4b23      	ldr	r3, [pc, #140]	; (5650 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55c2:	4924      	ldr	r1, [pc, #144]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55c4:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55c6:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55c8:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55ca:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    55cc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    55ce:	bf00      	nop
    55d0:	bf00      	nop
    55d2:	bf00      	nop
    55d4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55d6:	601a      	str	r2, [r3, #0]
    55d8:	bf00      	nop
    55da:	bf00      	nop
    55dc:	bf00      	nop
    55de:	bf00      	nop
    55e0:	0782      	lsls	r2, r0, #30
    55e2:	f53f af78 	bmi.w	54d6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    55e6:	4b1a      	ldr	r3, [pc, #104]	; (5650 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55e8:	491a      	ldr	r1, [pc, #104]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55ea:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55ec:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55ee:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    55f0:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    55f2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    55f4:	bf00      	nop
    55f6:	bf00      	nop
    55f8:	bf00      	nop
    55fa:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    55fc:	601a      	str	r2, [r3, #0]
    55fe:	bf00      	nop
    5600:	bf00      	nop
    5602:	bf00      	nop
    5604:	bf00      	nop
    5606:	07c3      	lsls	r3, r0, #31
    5608:	f57f af77 	bpl.w	54fa <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    560c:	4a11      	ldr	r2, [pc, #68]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    560e:	2102      	movs	r1, #2
    5610:	2304      	movs	r3, #4
    5612:	6011      	str	r1, [r2, #0]
    5614:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5616:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5618:	bf00      	nop
    561a:	bf00      	nop
    561c:	bf00      	nop
    561e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5620:	6053      	str	r3, [r2, #4]
    5622:	bf00      	nop
    5624:	bf00      	nop
    5626:	bf00      	nop
    5628:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    562a:	bc10      	pop	{r4}
    562c:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    562e:	4a09      	ldr	r2, [pc, #36]	; (5654 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    5630:	2102      	movs	r1, #2
    5632:	2304      	movs	r3, #4
    5634:	6011      	str	r1, [r2, #0]
    5636:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5638:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    563a:	bf00      	nop
    563c:	bf00      	nop
    563e:	bf00      	nop
    5640:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5642:	6053      	str	r3, [r2, #4]
    5644:	bf00      	nop
    5646:	bf00      	nop
    5648:	bf00      	nop
    564a:	bf00      	nop
    564c:	e6e6      	b.n	541c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    564e:	bf00      	nop
    5650:	400ff0c8 	.word	0x400ff0c8
    5654:	400ff0c4 	.word	0x400ff0c4

00005658 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    5658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    565c:	4680      	mov	r8, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    565e:	6980      	ldr	r0, [r0, #24]
    5660:	b081      	sub	sp, #4
    5662:	460c      	mov	r4, r1
    5664:	b150      	cbz	r0, 567c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    5666:	6803      	ldr	r3, [r0, #0]
    5668:	4a77      	ldr	r2, [pc, #476]	; (5848 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f0>)
    566a:	681b      	ldr	r3, [r3, #0]
    566c:	4293      	cmp	r3, r2
    566e:	f040 80e8 	bne.w	5842 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1ea>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    5672:	6842      	ldr	r2, [r0, #4]
    5674:	7b01      	ldrb	r1, [r0, #12]
    5676:	7813      	ldrb	r3, [r2, #0]
    5678:	430b      	orrs	r3, r1
    567a:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    567c:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    567e:	7d27      	ldrb	r7, [r4, #20]
    5680:	f894 9013 	ldrb.w	r9, [r4, #19]
    5684:	f894 a012 	ldrb.w	sl, [r4, #18]
    5688:	f7ff feb4 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    568c:	2000      	movs	r0, #0
    568e:	f7ff feb1 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5692:	2000      	movs	r0, #0
    5694:	f7ff feae 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5698:	2000      	movs	r0, #0
    569a:	f7ff feab 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    569e:	68a3      	ldr	r3, [r4, #8]
    56a0:	2b00      	cmp	r3, #0
    56a2:	dd44      	ble.n	572e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    56a4:	6822      	ldr	r2, [r4, #0]
    56a6:	f10a 0a01 	add.w	sl, sl, #1
    56aa:	f109 0901 	add.w	r9, r9, #1
    56ae:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    56b0:	69a1      	ldr	r1, [r4, #24]
    56b2:	1853      	adds	r3, r2, r1
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    56b4:	5c56      	ldrb	r6, [r2, r1]
    56b6:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    56b8:	f893 b002 	ldrb.w	fp, [r3, #2]
    56bc:	fb09 f505 	mul.w	r5, r9, r5
    56c0:	122d      	asrs	r5, r5, #8
    56c2:	fb07 fb0b 	mul.w	fp, r7, fp
    56c6:	fb0a f606 	mul.w	r6, sl, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    56ca:	022d      	lsls	r5, r5, #8
    56cc:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    56ce:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    56d2:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    56d4:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    56d8:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    56da:	4335      	orrs	r5, r6
    56dc:	f7ff fe8a 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    56e0:	b2ad      	uxth	r5, r5
    56e2:	fa5f f08b 	uxtb.w	r0, fp
    56e6:	f7ff fe85 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    56ea:	0a28      	lsrs	r0, r5, #8
    56ec:	f7ff fe82 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    56f0:	b2e8      	uxtb	r0, r5
    56f2:	f7ff fe7f 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    56f6:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    56f8:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    56fa:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    56fc:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5700:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5702:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    5706:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    570a:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    570c:	f994 2015 	ldrsb.w	r2, [r4, #21]
    5710:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5712:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    5716:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    571a:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    571e:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    5720:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5722:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    5724:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    5726:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5728:	6022      	str	r2, [r4, #0]
    572a:	60a3      	str	r3, [r4, #8]
    572c:	dcc0      	bgt.n	56b0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    572e:	6866      	ldr	r6, [r4, #4]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5730:	4d46      	ldr	r5, [pc, #280]	; (584c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f4>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5732:	4c47      	ldr	r4, [pc, #284]	; (5850 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
    5734:	2e00      	cmp	r6, #0
    5736:	bfb8      	it	lt
    5738:	361f      	addlt	r6, #31
    573a:	1176      	asrs	r6, r6, #5
    573c:	20ff      	movs	r0, #255	; 0xff
    573e:	f7ff fe59 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5742:	2000      	movs	r0, #0
    5744:	f7ff fe56 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5748:	2202      	movs	r2, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    574a:	2304      	movs	r3, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    574c:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    574e:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5750:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5752:	bf00      	nop
    5754:	bf00      	nop
    5756:	bf00      	nop
    5758:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    575a:	6023      	str	r3, [r4, #0]
    575c:	bf00      	nop
    575e:	bf00      	nop
    5760:	bf00      	nop
    5762:	bf00      	nop
    5764:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5766:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5768:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    576a:	bf00      	nop
    576c:	bf00      	nop
    576e:	bf00      	nop
    5770:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5772:	6023      	str	r3, [r4, #0]
    5774:	bf00      	nop
    5776:	bf00      	nop
    5778:	bf00      	nop
    577a:	bf00      	nop
    577c:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    577e:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5780:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5782:	bf00      	nop
    5784:	bf00      	nop
    5786:	bf00      	nop
    5788:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    578a:	6023      	str	r3, [r4, #0]
    578c:	bf00      	nop
    578e:	bf00      	nop
    5790:	bf00      	nop
    5792:	bf00      	nop
    5794:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5796:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5798:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    579a:	bf00      	nop
    579c:	bf00      	nop
    579e:	bf00      	nop
    57a0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    57a2:	6023      	str	r3, [r4, #0]
    57a4:	bf00      	nop
    57a6:	bf00      	nop
    57a8:	bf00      	nop
    57aa:	bf00      	nop
    57ac:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    57ae:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    57b0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    57b2:	bf00      	nop
    57b4:	bf00      	nop
    57b6:	bf00      	nop
    57b8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    57ba:	6023      	str	r3, [r4, #0]
    57bc:	bf00      	nop
    57be:	bf00      	nop
    57c0:	bf00      	nop
    57c2:	bf00      	nop
    57c4:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    57c6:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    57c8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    57ca:	bf00      	nop
    57cc:	bf00      	nop
    57ce:	bf00      	nop
    57d0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    57d2:	6023      	str	r3, [r4, #0]
    57d4:	bf00      	nop
    57d6:	bf00      	nop
    57d8:	bf00      	nop
    57da:	bf00      	nop
    57dc:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    57de:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    57e0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    57e2:	bf00      	nop
    57e4:	bf00      	nop
    57e6:	bf00      	nop
    57e8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    57ea:	6023      	str	r3, [r4, #0]
    57ec:	bf00      	nop
    57ee:	bf00      	nop
    57f0:	bf00      	nop
    57f2:	bf00      	nop
    57f4:	6022      	str	r2, [r4, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    57f6:	602b      	str	r3, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    57f8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    57fa:	bf00      	nop
    57fc:	bf00      	nop
    57fe:	bf00      	nop
    5800:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5802:	6023      	str	r3, [r4, #0]
    5804:	bf00      	nop
    5806:	bf00      	nop
    5808:	bf00      	nop
    580a:	bf00      	nop
    580c:	2000      	movs	r0, #0
    580e:	3e01      	subs	r6, #1
    5810:	f7ff fdf0 	bl	53f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5814:	1c73      	adds	r3, r6, #1
    5816:	d191      	bne.n	573c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe4>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    5818:	f8d8 0018 	ldr.w	r0, [r8, #24]
    581c:	b150      	cbz	r0, 5834 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1dc>
    581e:	6803      	ldr	r3, [r0, #0]
    5820:	4a0c      	ldr	r2, [pc, #48]	; (5854 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
    5822:	685b      	ldr	r3, [r3, #4]
    5824:	4293      	cmp	r3, r2
    5826:	d108      	bne.n	583a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e2>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    5828:	6842      	ldr	r2, [r0, #4]
    582a:	7b01      	ldrb	r1, [r0, #12]
    582c:	7813      	ldrb	r3, [r2, #0]
    582e:	ea23 0301 	bic.w	r3, r3, r1
    5832:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    5834:	b001      	add	sp, #4
    5836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    583a:	b001      	add	sp, #4
    583c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5840:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    5842:	4798      	blx	r3
    5844:	e71a      	b.n	567c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    5846:	bf00      	nop
    5848:	00000475 	.word	0x00000475
    584c:	400ff0c4 	.word	0x400ff0c4
    5850:	400ff0c8 	.word	0x400ff0c8
    5854:	00000481 	.word	0x00000481

00005858 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    5858:	b4f0      	push	{r4, r5, r6, r7}

  /// pixelset constructor for a pixel set starting at the given PIXEL_TYPE* and going for _len leds.  Note that the length
  /// can be backwards, creating a PixelSet that walks backwards over the data
  /// @param leds point to the raw led data
  /// @param len how many leds in this set
  inline CPixelView(PIXEL_TYPE *_leds, int _len) : dir(_len < 0 ? -1 : 1), len(_len), leds(_leds), end_pos(_leds + _len) {}
    585a:	4a1a      	ldr	r2, [pc, #104]	; (58c4 <_GLOBAL__sub_I_ib_jul01_gp+0x6c>)
    585c:	4b1a      	ldr	r3, [pc, #104]	; (58c8 <_GLOBAL__sub_I_ib_jul01_gp+0x70>)
    585e:	f102 0510 	add.w	r5, r2, #16
    5862:	f502 74e9 	add.w	r4, r2, #466	; 0x1d2
    5866:	2101      	movs	r1, #1
    5868:	f103 0010 	add.w	r0, r3, #16
    586c:	6095      	str	r5, [r2, #8]
    586e:	60d4      	str	r4, [r2, #12]
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    5870:	25ff      	movs	r5, #255	; 0xff
    5872:	240f      	movs	r4, #15
    5874:	2696      	movs	r6, #150	; 0x96
    5876:	f503 77e9 	add.w	r7, r3, #466	; 0x1d2
    587a:	6098      	str	r0, [r3, #8]
    587c:	7011      	strb	r1, [r2, #0]
    587e:	2000      	movs	r0, #0
    5880:	7019      	strb	r1, [r3, #0]
    5882:	f882 51d4 	strb.w	r5, [r2, #468]	; 0x1d4
    5886:	f883 51d4 	strb.w	r5, [r3, #468]	; 0x1d4
    588a:	f882 41d5 	strb.w	r4, [r2, #469]	; 0x1d5
    588e:	f883 41d5 	strb.w	r4, [r3, #469]	; 0x1d5
    5892:	60df      	str	r7, [r3, #12]
    5894:	6056      	str	r6, [r2, #4]
    5896:	605e      	str	r6, [r3, #4]
    5898:	f882 11d6 	strb.w	r1, [r2, #470]	; 0x1d6
    589c:	f882 11d7 	strb.w	r1, [r2, #471]	; 0x1d7
    58a0:	f882 1239 	strb.w	r1, [r2, #569]	; 0x239
    58a4:	f882 123b 	strb.w	r1, [r2, #571]	; 0x23b
    58a8:	f883 11d6 	strb.w	r1, [r3, #470]	; 0x1d6
    58ac:	f883 11d7 	strb.w	r1, [r3, #471]	; 0x1d7
    58b0:	f883 1239 	strb.w	r1, [r3, #569]	; 0x239
    58b4:	f883 123b 	strb.w	r1, [r3, #571]	; 0x23b
    58b8:	f882 023f 	strb.w	r0, [r2, #575]	; 0x23f
    58bc:	f883 023f 	strb.w	r0, [r3, #575]	; 0x23f
    58c0:	bcf0      	pop	{r4, r5, r6, r7}
    58c2:	4770      	bx	lr
    58c4:	1fff93fc 	.word	0x1fff93fc
    58c8:	1fff8c74 	.word	0x1fff8c74

000058cc <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    58cc:	2900      	cmp	r1, #0
    58ce:	dd0b      	ble.n	58e8 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    58d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    58d4:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    58d6:	7813      	ldrb	r3, [r2, #0]
    58d8:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    58da:	7853      	ldrb	r3, [r2, #1]
    58dc:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    58de:	7893      	ldrb	r3, [r2, #2]
    58e0:	7083      	strb	r3, [r0, #2]
    58e2:	3003      	adds	r0, #3
    58e4:	4288      	cmp	r0, r1
    58e6:	d1f6      	bne.n	58d6 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    58e8:	4770      	bx	lr
    58ea:	bf00      	nop

000058ec <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    58ec:	b570      	push	{r4, r5, r6, lr}
    58ee:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    58f0:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    58f2:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    58f4:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    58f6:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    58fa:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    58fe:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    5902:	dd10      	ble.n	5926 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    5904:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5908:	461e      	mov	r6, r3
    590a:	4604      	mov	r4, r0
    590c:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    590e:	4621      	mov	r1, r4
    5910:	a801      	add	r0, sp, #4
    5912:	f000 faf9 	bl	5f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    5916:	f89d 2004 	ldrb.w	r2, [sp, #4]
    591a:	3403      	adds	r4, #3
    591c:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    591e:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    5920:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    5924:	d1f3      	bne.n	590e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    5926:	b002      	add	sp, #8
    5928:	bd70      	pop	{r4, r5, r6, pc}
    592a:	bf00      	nop

0000592c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    5930:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    5932:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    5934:	d352      	bcc.n	59dc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    5936:	f896 e000 	ldrb.w	lr, [r6]
    593a:	7815      	ldrb	r5, [r2, #0]
    593c:	7877      	ldrb	r7, [r6, #1]
    593e:	f896 8002 	ldrb.w	r8, [r6, #2]
    5942:	7854      	ldrb	r4, [r2, #1]
    5944:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    5948:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    594c:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    5950:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    5954:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    5958:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    595c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    5960:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    5964:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    5966:	b3b2      	cbz	r2, 59d6 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    5968:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    596c:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    5970:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    5974:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    5978:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    597c:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5980:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    5982:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    5986:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    598a:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    598e:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    5992:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    5996:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    599a:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    599e:	d818      	bhi.n	59d2 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    59a0:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    59a4:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    59a6:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    59a8:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    59aa:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    59ae:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    59b2:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    59b6:	4475      	add	r5, lr
        g88 += gdelta87;
    59b8:	4454      	add	r4, sl
        b88 += bdelta87;
    59ba:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    59bc:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    59be:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    59c2:	b2ad      	uxth	r5, r5
        g = rhs.g;
    59c4:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    59c8:	b2a4      	uxth	r4, r4
        b = rhs.b;
    59ca:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    59ce:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    59d0:	d2e6      	bcs.n	59a0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    59d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59d6:	f04f 0b01 	mov.w	fp, #1
    59da:	e7c7      	b.n	596c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    59dc:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    59de:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    59e0:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    59e4:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    59e6:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    59e8:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    59ec:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    59f0:	7015      	strb	r5, [r2, #0]
    59f2:	4619      	mov	r1, r3
    59f4:	f886 e000 	strb.w	lr, [r6]
    59f8:	464b      	mov	r3, r9
        g = rhs.g;
    59fa:	7054      	strb	r4, [r2, #1]
    59fc:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    59fe:	f882 c002 	strb.w	ip, [r2, #2]
    5a02:	f886 8002 	strb.w	r8, [r6, #2]
    5a06:	e79f      	b.n	5948 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00005a08 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    5a08:	b309      	cbz	r1, 5a4e <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    5a0a:	b430      	push	{r4, r5}
    5a0c:	1e4d      	subs	r5, r1, #1
    5a0e:	b2ad      	uxth	r5, r5
    5a10:	43d2      	mvns	r2, r2
    5a12:	3501      	adds	r5, #1
    5a14:	b2d2      	uxtb	r2, r2
    5a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5a1a:	4405      	add	r5, r0
    5a1c:	3201      	adds	r2, #1
    5a1e:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5a20:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    5a24:	fb02 f303 	mul.w	r3, r2, r3
    5a28:	121b      	asrs	r3, r3, #8
    5a2a:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5a2e:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5a30:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5a32:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5a36:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5a3a:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5a3c:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5a3e:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5a40:	7083      	strb	r3, [r0, #2]
    5a42:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    5a44:	4285      	cmp	r5, r0
    5a46:	f104 0403 	add.w	r4, r4, #3
    5a4a:	d1e9      	bne.n	5a20 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    5a4c:	bc30      	pop	{r4, r5}
    5a4e:	4770      	bx	lr

00005a50 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    5a50:	f7ff bfda 	b.w	5a08 <fade_raw(CRGB*, unsigned short, unsigned char)>

00005a54 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    5a54:	b322      	cbz	r2, 5aa0 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    5a56:	2aff      	cmp	r2, #255	; 0xff
    5a58:	d023      	beq.n	5aa2 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    5a5a:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5a5c:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5a5e:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5a60:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5a62:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    5a64:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5a66:	43d2      	mvns	r2, r2
    5a68:	fb06 7605 	mla	r6, r6, r5, r7
    5a6c:	b2d2      	uxtb	r2, r2
    5a6e:	fb04 6402 	mla	r4, r4, r2, r6
    5a72:	f3c4 2407 	ubfx	r4, r4, #8, #8
    5a76:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5a78:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5a7a:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    5a7c:	191f      	adds	r7, r3, r4
    5a7e:	fb04 7405 	mla	r4, r4, r5, r7
    5a82:	fb03 4302 	mla	r3, r3, r2, r4
    5a86:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5a8a:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5a8c:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    5a8e:	18f1      	adds	r1, r6, r3
    5a90:	fb03 1505 	mla	r5, r3, r5, r1
    5a94:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    5a98:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    5a9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    5a9e:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    5aa0:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5aa2:	780b      	ldrb	r3, [r1, #0]
    5aa4:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    5aa6:	784b      	ldrb	r3, [r1, #1]
    5aa8:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    5aaa:	788b      	ldrb	r3, [r1, #2]
    5aac:	7083      	strb	r3, [r0, #2]
    5aae:	4770      	bx	lr

00005ab0 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    5ab0:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5ab2:	780d      	ldrb	r5, [r1, #0]
    5ab4:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    5ab6:	784d      	ldrb	r5, [r1, #1]
    5ab8:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    5aba:	7889      	ldrb	r1, [r1, #2]
    5abc:	7081      	strb	r1, [r0, #2]
    5abe:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    5ac0:	4611      	mov	r1, r2
    5ac2:	461a      	mov	r2, r3
    5ac4:	f7ff ffc6 	bl	5a54 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    5ac8:	4620      	mov	r0, r4
    5aca:	bd38      	pop	{r3, r4, r5, pc}

00005acc <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5acc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    5ad0:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    5ad4:	3100      	adds	r1, #0
    5ad6:	bf18      	it	ne
    5ad8:	2101      	movne	r1, #1
    5ada:	eb01 2123 	add.w	r1, r1, r3, asr #8
    5ade:	b2c9      	uxtb	r1, r1
    5ae0:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    5ae2:	060a      	lsls	r2, r1, #24
    5ae4:	b2db      	uxtb	r3, r3
    5ae6:	d40e      	bmi.n	5b06 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    5ae8:	f001 0140 	and.w	r1, r1, #64	; 0x40
    5aec:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5af0:	b919      	cbnz	r1, 5afa <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    5af2:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    5af4:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    5af6:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    5af8:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    5afa:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    5afc:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    5afe:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    5b00:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    5b02:	7082      	strb	r2, [r0, #2]
    5b04:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    5b06:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    5b08:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    5b0a:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    5b0c:	7042      	strb	r2, [r0, #1]
    5b0e:	4770      	bx	lr

00005b10 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    5b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    5b14:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    5b16:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    5b1a:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    5b1e:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    5b20:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    5b24:	d000      	beq.n	5b28 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    5b26:	b9e6      	cbnz	r6, 5b62 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    5b28:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    5b2a:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    5b2c:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    5b2e:	2bff      	cmp	r3, #255	; 0xff
    5b30:	d012      	beq.n	5b58 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    5b32:	2b00      	cmp	r3, #0
    5b34:	d043      	beq.n	5bbe <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    5b36:	3301      	adds	r3, #1
    5b38:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    5b3a:	b11c      	cbz	r4, 5b44 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5b3c:	fb03 4404 	mla	r4, r3, r4, r4
    5b40:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    5b44:	b119      	cbz	r1, 5b4e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    5b46:	fb03 1101 	mla	r1, r3, r1, r1
    5b4a:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    5b4e:	b11a      	cbz	r2, 5b58 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    5b50:	fb03 2202 	mla	r2, r3, r2, r2
    5b54:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    5b58:	7004      	strb	r4, [r0, #0]
    5b5a:	7041      	strb	r1, [r0, #1]
    5b5c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    5b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    5b62:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    5b64:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    5b66:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    5b6a:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    5b6c:	d000      	beq.n	5b70 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    5b6e:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    5b70:	0112      	lsls	r2, r2, #4
    5b72:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    5b76:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5b78:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5b7c:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5b80:	f891 8002 	ldrb.w	r8, [r1, #2]
    5b84:	fb04 f606 	mul.w	r6, r4, r6
    5b88:	1c51      	adds	r1, r2, #1
    5b8a:	fb04 f509 	mul.w	r5, r4, r9
    5b8e:	fb04 f407 	mul.w	r4, r4, r7
    5b92:	f3c4 2407 	ubfx	r4, r4, #8, #8
    5b96:	f3c6 2707 	ubfx	r7, r6, #8, #8
    5b9a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5b9e:	fb01 f60c 	mul.w	r6, r1, ip
    5ba2:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5ba6:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5baa:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5bae:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5bb2:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5bb6:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5bb8:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5bba:	b2d2      	uxtb	r2, r2
    5bbc:	e7b7      	b.n	5b2e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    5bbe:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    5bc0:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    5bc2:	461c      	mov	r4, r3
    5bc4:	7004      	strb	r4, [r0, #0]
    5bc6:	7041      	strb	r1, [r0, #1]
    5bc8:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    5bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5bce:	bf00      	nop

00005bd0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    5bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bd2:	3901      	subs	r1, #1
    5bd4:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    5bd6:	2500      	movs	r5, #0
    5bd8:	302f      	adds	r0, #47	; 0x2f
    5bda:	e001      	b.n	5be0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    5bdc:	4284      	cmp	r4, r0
    5bde:	d01e      	beq.n	5c1e <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    5be0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    5be4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    5be8:	42b3      	cmp	r3, r6
    5bea:	d0f7      	beq.n	5bdc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    5bec:	f103 0701 	add.w	r7, r3, #1
    5bf0:	d204      	bcs.n	5bfc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    5bf2:	b2fb      	uxtb	r3, r7
    5bf4:	7023      	strb	r3, [r4, #0]
    5bf6:	3501      	adds	r5, #1
    5bf8:	780e      	ldrb	r6, [r1, #0]
    5bfa:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5bfc:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    5bfe:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    5c00:	b2ff      	uxtb	r7, r7
    5c02:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    5c06:	d208      	bcs.n	5c1a <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    5c08:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    5c0a:	780e      	ldrb	r6, [r1, #0]
    5c0c:	42be      	cmp	r6, r7
    5c0e:	bf38      	it	cc
    5c10:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5c12:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    5c16:	bf38      	it	cc
    5c18:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    5c1a:	4295      	cmp	r5, r2
    5c1c:	d3de      	bcc.n	5bdc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    5c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c20 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    5c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    5c22:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    5c24:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    5c26:	4604      	mov	r4, r0
    5c28:	bfcc      	ite	gt
    5c2a:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    5c2e:	2500      	movle	r5, #0
    5c30:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    5c32:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    5c34:	bfd8      	it	le
    5c36:	4616      	movle	r6, r2

	pLed->init();
    5c38:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    5c3a:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    5c3c:	6823      	ldr	r3, [r4, #0]
    5c3e:	6062      	str	r2, [r4, #4]
    5c40:	695b      	ldr	r3, [r3, #20]
    5c42:	4a0a      	ldr	r2, [pc, #40]	; (5c6c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    5c44:	6166      	str	r6, [r4, #20]
    5c46:	4293      	cmp	r3, r2
    5c48:	d101      	bne.n	5c4e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    5c4a:	4620      	mov	r0, r4
    5c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    5c4e:	4620      	mov	r0, r4
    5c50:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    5c52:	2800      	cmp	r0, #0
    5c54:	d0f9      	beq.n	5c4a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    5c56:	4a06      	ldr	r2, [pc, #24]	; (5c70 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    5c58:	4b06      	ldr	r3, [pc, #24]	; (5c74 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    5c5a:	6851      	ldr	r1, [r2, #4]
    5c5c:	fb93 f0f0 	sdiv	r0, r3, r0
    5c60:	4288      	cmp	r0, r1
    5c62:	bf38      	it	cc
    5c64:	4608      	movcc	r0, r1
    5c66:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    5c68:	4620      	mov	r0, r4
    5c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c6c:	00000471 	.word	0x00000471
    5c70:	1fff9ce8 	.word	0x1fff9ce8
    5c74:	000f4240 	.word	0x000f4240

00005c78 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5c78:	4b08      	ldr	r3, [pc, #32]	; (5c9c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    5c7a:	b510      	push	{r4, lr}
    5c7c:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5c7e:	b15c      	cbz	r4, 5c98 <CFastLED::clearData()+0x20>
    5c80:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    5c82:	2100      	movs	r1, #0
    5c84:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    5c86:	b123      	cbz	r3, 5c92 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    5c88:	6962      	ldr	r2, [r4, #20]
    5c8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5c8e:	f002 fe0d 	bl	88ac <memset>
    5c92:	68a4      	ldr	r4, [r4, #8]
    5c94:	2c00      	cmp	r4, #0
    5c96:	d1f3      	bne.n	5c80 <CFastLED::clearData()+0x8>
    5c98:	bd10      	pop	{r4, pc}
    5c9a:	bf00      	nop
    5c9c:	1fff9cf8 	.word	0x1fff9cf8

00005ca0 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5ca0:	4b07      	ldr	r3, [pc, #28]	; (5cc0 <CFastLED::setCorrection(CRGB const&)+0x20>)
    5ca2:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5ca4:	b153      	cbz	r3, 5cbc <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    5ca6:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5ca8:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    5caa:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    5cac:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    5cae:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5cb0:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    5cb2:	735a      	strb	r2, [r3, #13]
    5cb4:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d1f6      	bne.n	5ca8 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    5cba:	bc10      	pop	{r4}
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop
    5cc0:	1fff9cf8 	.word	0x1fff9cf8

00005cc4 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    5cc4:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5cc6:	4c0f      	ldr	r4, [pc, #60]	; (5d04 <CFastLED::countFPS(int)+0x40>)
    5cc8:	6822      	ldr	r2, [r4, #0]
    5cca:	1c53      	adds	r3, r2, #1
    5ccc:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    5cce:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5cd0:	6023      	str	r3, [r4, #0]
    5cd2:	db13      	blt.n	5cfc <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5cd4:	4d0c      	ldr	r5, [pc, #48]	; (5d08 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    5cd6:	4a0d      	ldr	r2, [pc, #52]	; (5d0c <CFastLED::countFPS(int)+0x48>)
    5cd8:	6829      	ldr	r1, [r5, #0]
    5cda:	9101      	str	r1, [sp, #4]
	return ret;
    5cdc:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5cde:	682d      	ldr	r5, [r5, #0]
    5ce0:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    5ce2:	6816      	ldr	r6, [r2, #0]
	return ret;
    5ce4:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    5ce6:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    5cec:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5cee:	1b89      	subs	r1, r1, r6
    5cf0:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    5cf4:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5cf6:	fbb3 f3f1 	udiv	r3, r3, r1
    5cfa:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    5cfc:	b003      	add	sp, #12
    5cfe:	bc70      	pop	{r4, r5, r6}
    5d00:	4770      	bx	lr
    5d02:	bf00      	nop
    5d04:	1fff9cfc 	.word	0x1fff9cfc
    5d08:	1fff9d60 	.word	0x1fff9d60
    5d0c:	1fff9d04 	.word	0x1fff9d04

00005d10 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    5d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d14:	6843      	ldr	r3, [r0, #4]
    5d16:	4c2d      	ldr	r4, [pc, #180]	; (5dcc <CFastLED::show(unsigned char)+0xbc>)
    5d18:	b083      	sub	sp, #12
    5d1a:	4606      	mov	r6, r0
    5d1c:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d14b      	bne.n	5dba <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    5d22:	f000 fd6f 	bl	6804 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5d26:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    5d28:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5d2a:	b11b      	cbz	r3, 5d34 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    5d2c:	4648      	mov	r0, r9
    5d2e:	68b1      	ldr	r1, [r6, #8]
    5d30:	4798      	blx	r3
    5d32:	4681      	mov	r9, r0
    5d34:	4b26      	ldr	r3, [pc, #152]	; (5dd0 <CFastLED::show(unsigned char)+0xc0>)
    5d36:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5d38:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5d3a:	2c00      	cmp	r4, #0
    5d3c:	d036      	beq.n	5dac <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    5d3e:	8873      	ldrh	r3, [r6, #2]
    5d40:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5d42:	6861      	ldr	r1, [r4, #4]
    5d44:	6962      	ldr	r2, [r4, #20]
    5d46:	2b63      	cmp	r3, #99	; 0x63
    5d48:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5d4a:	bf98      	it	ls
    5d4c:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5d4e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    5d52:	f88d 5004 	strb.w	r5, [sp, #4]
    5d56:	f88d 5005 	strb.w	r5, [sp, #5]
    5d5a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    5d5e:	f1b9 0f00 	cmp.w	r9, #0
    5d62:	d01c      	beq.n	5d9e <CFastLED::show(unsigned char)+0x8e>
    5d64:	f104 030b 	add.w	r3, r4, #11
    5d68:	f10d 0e04 	add.w	lr, sp, #4
    5d6c:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    5d70:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5d74:	f1bb 0f00 	cmp.w	fp, #0
    5d78:	d00d      	beq.n	5d96 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    5d7a:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5d7e:	f10a 0001 	add.w	r0, sl, #1
    5d82:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5d86:	f1ba 0f00 	cmp.w	sl, #0
    5d8a:	d004      	beq.n	5d96 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5d8c:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5d90:	0c00      	lsrs	r0, r0, #16
    5d92:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    5d96:	4563      	cmp	r3, ip
    5d98:	f10e 0e01 	add.w	lr, lr, #1
    5d9c:	d1e8      	bne.n	5d70 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    5d9e:	4620      	mov	r0, r4
    5da0:	ab01      	add	r3, sp, #4
    5da2:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5da4:	74a7      	strb	r7, [r4, #18]
    5da6:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5da8:	2c00      	cmp	r4, #0
    5daa:	d1c8      	bne.n	5d3e <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    5dac:	4630      	mov	r0, r6
    5dae:	2119      	movs	r1, #25
    5db0:	f7ff ff88 	bl	5cc4 <CFastLED::countFPS(int)>
}
    5db4:	b003      	add	sp, #12
    5db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5dba:	f000 fd23 	bl	6804 <micros>
    5dbe:	6822      	ldr	r2, [r4, #0]
    5dc0:	6873      	ldr	r3, [r6, #4]
    5dc2:	1a80      	subs	r0, r0, r2
    5dc4:	4298      	cmp	r0, r3
    5dc6:	d3aa      	bcc.n	5d1e <CFastLED::show(unsigned char)+0xe>
    5dc8:	e7ab      	b.n	5d22 <CFastLED::show(unsigned char)+0x12>
    5dca:	bf00      	nop
    5dcc:	1fff9d00 	.word	0x1fff9d00
    5dd0:	1fff9cf8 	.word	0x1fff9cf8

00005dd4 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    5dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5dd6:	4d0a      	ldr	r5, [pc, #40]	; (5e00 <CFastLED::delay(unsigned long)+0x2c>)
    5dd8:	b083      	sub	sp, #12
    5dda:	682b      	ldr	r3, [r5, #0]
    5ddc:	9300      	str	r3, [sp, #0]
	return ret;
    5dde:	9f00      	ldr	r7, [sp, #0]
    5de0:	4604      	mov	r4, r0
    5de2:	460e      	mov	r6, r1
    5de4:	7821      	ldrb	r1, [r4, #0]
    5de6:	4620      	mov	r0, r4
    5de8:	f7ff ff92 	bl	5d10 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    5dec:	f001 ffb8 	bl	7d60 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5df0:	682b      	ldr	r3, [r5, #0]
    5df2:	9301      	str	r3, [sp, #4]
	return ret;
    5df4:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    5df6:	1bdb      	subs	r3, r3, r7
    5df8:	42b3      	cmp	r3, r6
    5dfa:	d3f3      	bcc.n	5de4 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    5dfc:	b003      	add	sp, #12
    5dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e00:	1fff9d60 	.word	0x1fff9d60

00005e04 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    5e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e08:	6843      	ldr	r3, [r0, #4]
    5e0a:	4c2c      	ldr	r4, [pc, #176]	; (5ebc <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    5e0c:	b083      	sub	sp, #12
    5e0e:	4606      	mov	r6, r0
    5e10:	468a      	mov	sl, r1
    5e12:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5e14:	2b00      	cmp	r3, #0
    5e16:	d149      	bne.n	5eac <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    5e18:	f000 fcf4 	bl	6804 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5e1c:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    5e1e:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    5e20:	b11b      	cbz	r3, 5e2a <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    5e22:	4648      	mov	r0, r9
    5e24:	68b1      	ldr	r1, [r6, #8]
    5e26:	4798      	blx	r3
    5e28:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    5e2a:	4b25      	ldr	r3, [pc, #148]	; (5ec0 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    5e2c:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5e2e:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5e30:	2c00      	cmp	r4, #0
    5e32:	d034      	beq.n	5e9e <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    5e34:	8873      	ldrh	r3, [r6, #2]
    5e36:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    5e38:	6962      	ldr	r2, [r4, #20]
    5e3a:	2b63      	cmp	r3, #99	; 0x63
    5e3c:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5e3e:	bf98      	it	ls
    5e40:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    5e42:	f8d3 8000 	ldr.w	r8, [r3]
    5e46:	f88d 5004 	strb.w	r5, [sp, #4]
    5e4a:	f88d 5005 	strb.w	r5, [sp, #5]
    5e4e:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    5e52:	f1b9 0f00 	cmp.w	r9, #0
    5e56:	d01a      	beq.n	5e8e <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    5e58:	f104 030b 	add.w	r3, r4, #11
    5e5c:	a801      	add	r0, sp, #4
    5e5e:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    5e62:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5e66:	f1bb 0f00 	cmp.w	fp, #0
    5e6a:	d00c      	beq.n	5e86 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    5e6c:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5e70:	f10c 0101 	add.w	r1, ip, #1
    5e74:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5e78:	f1bc 0f00 	cmp.w	ip, #0
    5e7c:	d003      	beq.n	5e86 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    5e7e:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5e82:	0c09      	lsrs	r1, r1, #16
    5e84:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    5e86:	4573      	cmp	r3, lr
    5e88:	f100 0001 	add.w	r0, r0, #1
    5e8c:	d1e9      	bne.n	5e62 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    5e8e:	4620      	mov	r0, r4
    5e90:	ab01      	add	r3, sp, #4
    5e92:	4651      	mov	r1, sl
    5e94:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5e96:	74a7      	strb	r7, [r4, #18]
    5e98:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5e9a:	2c00      	cmp	r4, #0
    5e9c:	d1ca      	bne.n	5e34 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    5e9e:	4630      	mov	r0, r6
    5ea0:	2119      	movs	r1, #25
    5ea2:	f7ff ff0f 	bl	5cc4 <CFastLED::countFPS(int)>
}
    5ea6:	b003      	add	sp, #12
    5ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    5eac:	f000 fcaa 	bl	6804 <micros>
    5eb0:	6822      	ldr	r2, [r4, #0]
    5eb2:	6873      	ldr	r3, [r6, #4]
    5eb4:	1a80      	subs	r0, r0, r2
    5eb6:	4298      	cmp	r0, r3
    5eb8:	d3ac      	bcc.n	5e14 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    5eba:	e7ad      	b.n	5e18 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    5ebc:	1fff9d00 	.word	0x1fff9d00
    5ec0:	1fff9cf8 	.word	0x1fff9cf8

00005ec4 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    5ec4:	b510      	push	{r4, lr}
    5ec6:	4604      	mov	r4, r0
    5ec8:	b082      	sub	sp, #8
	if(writeData) {
    5eca:	b151      	cbz	r1, 5ee2 <CFastLED::clear(bool)+0x1e>
    5ecc:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    5ece:	461a      	mov	r2, r3
    5ed0:	a901      	add	r1, sp, #4
    5ed2:	f88d 3004 	strb.w	r3, [sp, #4]
    5ed6:	f88d 3005 	strb.w	r3, [sp, #5]
    5eda:	f88d 3006 	strb.w	r3, [sp, #6]
    5ede:	f7ff ff91 	bl	5e04 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    5ee2:	4620      	mov	r0, r4
    5ee4:	f7ff fec8 	bl	5c78 <CFastLED::clearData()>
}
    5ee8:	b002      	add	sp, #8
    5eea:	bd10      	pop	{r4, pc}

00005eec <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    5eec:	2000      	movs	r0, #0
    5eee:	4770      	bx	lr

00005ef0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5ef0:	4b04      	ldr	r3, [pc, #16]	; (5f04 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    5ef2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5ef4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    5ef6:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5efa:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    5efc:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    5efe:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    5f00:	60da      	str	r2, [r3, #12]
    5f02:	4770      	bx	lr
    5f04:	1fff9ce8 	.word	0x1fff9ce8

00005f08 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    5f08:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    5f0a:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    5f0c:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    5f0e:	7882      	ldrb	r2, [r0, #2]
    5f10:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5f12:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    5f16:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5f1a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    5f1e:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    5f20:	0625      	lsls	r5, r4, #24
    5f22:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5f26:	d45f      	bmi.n	5fe8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    5f28:	f004 0540 	and.w	r5, r4, #64	; 0x40
    5f2c:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    5f30:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    5f34:	2d00      	cmp	r5, #0
    5f36:	d146      	bne.n	5fc6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    5f38:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    5f3c:	2c00      	cmp	r4, #0
    5f3e:	d06c      	beq.n	601a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    5f40:	3355      	adds	r3, #85	; 0x55
    5f42:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    5f44:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    5f46:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    5f48:	2eff      	cmp	r6, #255	; 0xff
    5f4a:	d01c      	beq.n	5f86 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    5f4c:	2e00      	cmp	r6, #0
    5f4e:	d079      	beq.n	6044 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    5f50:	b11c      	cbz	r4, 5f5a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5f52:	fb06 4404 	mla	r4, r6, r4, r4
    5f56:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    5f5a:	b11d      	cbz	r5, 5f64 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    5f5c:	fb06 5505 	mla	r5, r6, r5, r5
    5f60:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    5f64:	b11b      	cbz	r3, 5f6e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    5f66:	fb06 3303 	mla	r3, r6, r3, r3
    5f6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5f6e:	43f0      	mvns	r0, r6
    5f70:	b2c0      	uxtb	r0, r0
    5f72:	fb00 0000 	mla	r0, r0, r0, r0
    5f76:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5f7a:	4404      	add	r4, r0
            g += brightness_floor;
    5f7c:	4405      	add	r5, r0
            b += brightness_floor;
    5f7e:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5f80:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    5f82:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    5f84:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    5f86:	2aff      	cmp	r2, #255	; 0xff
    5f88:	d018      	beq.n	5fbc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5f8a:	fb12 f002 	smulbb	r0, r2, r2
    5f8e:	3200      	adds	r2, #0
    5f90:	bf18      	it	ne
    5f92:	2201      	movne	r2, #1
    5f94:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    5f98:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5f9c:	d056      	beq.n	604c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    5f9e:	b11c      	cbz	r4, 5fa8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5fa0:	fb02 4404 	mla	r4, r2, r4, r4
    5fa4:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    5fa8:	b11d      	cbz	r5, 5fb2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    5faa:	fb02 5505 	mla	r5, r2, r5, r5
    5fae:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    5fb2:	b11b      	cbz	r3, 5fbc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    5fb4:	fb02 3303 	mla	r3, r2, r3, r3
    5fb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5fbc:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    5fbe:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    5fc0:	708b      	strb	r3, [r1, #2]
}
    5fc2:	bcf0      	pop	{r4, r5, r6, r7}
    5fc4:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    5fc6:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    5fca:	bb5c      	cbnz	r4, 6024 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5fcc:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    5fd0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    5fd4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    5fd8:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    5fda:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5fdc:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    5fe0:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5fe2:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    5fe4:	463b      	mov	r3, r7
    5fe6:	e7af      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    5fe8:	f004 0740 	and.w	r7, r4, #64	; 0x40
    5fec:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    5ff0:	b9e7      	cbnz	r7, 602c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    5ff2:	f004 0720 	and.w	r7, r4, #32
    5ff6:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    5ffa:	2f00      	cmp	r7, #0
    5ffc:	d136      	bne.n	606c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5ffe:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    6002:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    6006:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    600a:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    600e:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    6012:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    6014:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    6016:	b2c3      	uxtb	r3, r0
    6018:	e796      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    601a:	43dc      	mvns	r4, r3
    601c:	b2e4      	uxtb	r4, r4
                g = third;
    601e:	461d      	mov	r5, r3
                b = 0;
    6020:	4603      	mov	r3, r0
    6022:	e791      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    6024:	2400      	movs	r4, #0
                g = K255 - third;
    6026:	43dd      	mvns	r5, r3
    6028:	b2ed      	uxtb	r5, r5
    602a:	e78d      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    602c:	f004 0420 	and.w	r4, r4, #32
    6030:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    6034:	b994      	cbnz	r4, 605c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    6036:	f103 0455 	add.w	r4, r3, #85	; 0x55
    603a:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    603c:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    6040:	b2db      	uxtb	r3, r3
    6042:	e781      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    6044:	23ff      	movs	r3, #255	; 0xff
    6046:	461d      	mov	r5, r3
    6048:	461c      	mov	r4, r3
    604a:	e79c      	b.n	5f86 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    604c:	4615      	mov	r5, r2
    604e:	4614      	mov	r4, r2
    6050:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    6052:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    6054:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    6056:	708b      	strb	r3, [r1, #2]
}
    6058:	bcf0      	pop	{r4, r5, r6, r7}
    605a:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    605c:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    6060:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    6062:	2500      	movs	r5, #0
                b = K85 - third;
    6064:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    6068:	b2db      	uxtb	r3, r3
    606a:	e76d      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    606c:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    606e:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    6070:	b2c3      	uxtb	r3, r0
    6072:	e769      	b.n	5f48 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00006074 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    6074:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    6076:	b361      	cbz	r1, 60d2 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    6078:	f101 3eff 	add.w	lr, r1, #4294967295
    607c:	fa1f fe8e 	uxth.w	lr, lr
    6080:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    6084:	2200      	movs	r2, #0
    6086:	f10e 0e06 	add.w	lr, lr, #6
    608a:	4486      	add	lr, r0
    608c:	1cc3      	adds	r3, r0, #3
    608e:	4615      	mov	r5, r2
    6090:	4614      	mov	r4, r2
        red32   += *p++;
    6092:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    6096:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    609a:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    609e:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    60a0:	4573      	cmp	r3, lr
        red32   += *p++;
    60a2:	443c      	add	r4, r7
        green32 += *p++;
    60a4:	4405      	add	r5, r0
        blue32  += *p++;
    60a6:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    60a8:	d1f3      	bne.n	6092 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    60aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    60ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    60b2:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    60b6:	f3c4 1317 	ubfx	r3, r4, #4, #24
    60ba:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    60be:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    60c2:	0a12      	lsrs	r2, r2, #8
    60c4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    60c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    60cc:	1910      	adds	r0, r2, r4
}
    60ce:	4408      	add	r0, r1
    60d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    60d2:	460c      	mov	r4, r1
    60d4:	460a      	mov	r2, r1
    60d6:	e7f7      	b.n	60c8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

000060d8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    60d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    60dc:	4b25      	ldr	r3, [pc, #148]	; (6174 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    60de:	681c      	ldr	r4, [r3, #0]
    60e0:	b085      	sub	sp, #20
    60e2:	4607      	mov	r7, r0
    60e4:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    60e6:	b19c      	cbz	r4, 6110 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    60e8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 6180 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    60ec:	257d      	movs	r5, #125	; 0x7d
    60ee:	e007      	b.n	6100 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    60f0:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    60f2:	b281      	uxth	r1, r0
    60f4:	4630      	mov	r0, r6
    60f6:	f7ff ffbd 	bl	6074 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    60fa:	68a4      	ldr	r4, [r4, #8]
    60fc:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    60fe:	b144      	cbz	r4, 6112 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    6100:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    6104:	691b      	ldr	r3, [r3, #16]
    6106:	454b      	cmp	r3, r9
    6108:	d0f2      	beq.n	60f0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    610a:	4620      	mov	r0, r4
    610c:	4798      	blx	r3
    610e:	e7f0      	b.n	60f2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    6110:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    6112:	fb05 f507 	mul.w	r5, r5, r7
    6116:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    6118:	4b17      	ldr	r3, [pc, #92]	; (6178 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    611a:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    611c:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    611e:	d210      	bcs.n	6142 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    6120:	b323      	cbz	r3, 616c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    6122:	4a16      	ldr	r2, [pc, #88]	; (617c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    6124:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    6126:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    612a:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    612e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6132:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    6134:	4638      	mov	r0, r7
    6136:	ea23 0301 	bic.w	r3, r3, r1
    613a:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    613c:	b005      	add	sp, #20
    613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    6142:	fb08 f707 	mul.w	r7, r8, r7
    6146:	fbb7 f0f5 	udiv	r0, r7, r5
    614a:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    614c:	b173      	cbz	r3, 616c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    614e:	4a0b      	ldr	r2, [pc, #44]	; (617c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    6150:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    6152:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    6156:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    615a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    615e:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    6160:	4638      	mov	r0, r7
    6162:	430b      	orrs	r3, r1
    6164:	7013      	strb	r3, [r2, #0]
}
    6166:	b005      	add	sp, #20
    6168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    616c:	4638      	mov	r0, r7
}
    616e:	b005      	add	sp, #20
    6170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6174:	1fff9cf8 	.word	0x1fff9cf8
    6178:	1fff9d0c 	.word	0x1fff9d0c
    617c:	0000b158 	.word	0x0000b158
    6180:	0000046d 	.word	0x0000046d

00006184 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    6184:	4b03      	ldr	r3, [pc, #12]	; (6194 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    6186:	4a04      	ldr	r2, [pc, #16]	; (6198 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    6188:	60da      	str	r2, [r3, #12]
    618a:	fb01 f100 	mul.w	r1, r1, r0
    618e:	6099      	str	r1, [r3, #8]
    6190:	4770      	bx	lr
    6192:	bf00      	nop
    6194:	1fff9ce8 	.word	0x1fff9ce8
    6198:	000060d9 	.word	0x000060d9

0000619c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    619c:	4807      	ldr	r0, [pc, #28]	; (61bc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    619e:	b082      	sub	sp, #8
    61a0:	6803      	ldr	r3, [r0, #0]
    61a2:	9301      	str	r3, [sp, #4]
	return ret;
    61a4:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    61a6:	4411      	add	r1, r2
    61a8:	e001      	b.n	61ae <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    61aa:	4299      	cmp	r1, r3
    61ac:	d304      	bcc.n	61b8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61ae:	6803      	ldr	r3, [r0, #0]
    61b0:	9300      	str	r3, [sp, #0]
	return ret;
    61b2:	9b00      	ldr	r3, [sp, #0]
    61b4:	429a      	cmp	r2, r3
    61b6:	d9f8      	bls.n	61aa <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    61b8:	b002      	add	sp, #8
    61ba:	4770      	bx	lr
    61bc:	1fff9d60 	.word	0x1fff9d60

000061c0 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    61c0:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61c2:	4a10      	ldr	r2, [pc, #64]	; (6204 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    61c4:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    61c6:	b9a1      	cbnz	r1, 61f2 <VisualMicroDebug::outPacketStart(bool)+0x32>
    61c8:	6813      	ldr	r3, [r2, #0]
    61ca:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    61cc:	6841      	ldr	r1, [r0, #4]
	return ret;
    61ce:	9b00      	ldr	r3, [sp, #0]
    61d0:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    61d2:	2931      	cmp	r1, #49	; 0x31
    61d4:	d80d      	bhi.n	61f2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61d6:	6813      	ldr	r3, [r2, #0]
    61d8:	9302      	str	r3, [sp, #8]
	return ret;
    61da:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    61dc:	f104 0332 	add.w	r3, r4, #50	; 0x32
    61e0:	1a59      	subs	r1, r3, r1
    61e2:	e001      	b.n	61e8 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    61e4:	4299      	cmp	r1, r3
    61e6:	d304      	bcc.n	61f2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61e8:	6813      	ldr	r3, [r2, #0]
    61ea:	9301      	str	r3, [sp, #4]
	return ret;
    61ec:	9b01      	ldr	r3, [sp, #4]
    61ee:	429c      	cmp	r4, r3
    61f0:	d9f8      	bls.n	61e4 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61f2:	6813      	ldr	r3, [r2, #0]
    61f4:	9303      	str	r3, [sp, #12]
	return ret;
    61f6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    61f8:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    61fa:	2001      	movs	r0, #1
    61fc:	b005      	add	sp, #20
    61fe:	bc10      	pop	{r4}
    6200:	4770      	bx	lr
    6202:	bf00      	nop
    6204:	1fff9d60 	.word	0x1fff9d60

00006208 <VisualMicroDebug::outPacketEnd()>:
    6208:	4770      	bx	lr
    620a:	bf00      	nop

0000620c <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    620c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6210:	f000 bb1a 	b.w	6848 <delay>

00006214 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    6214:	2300      	movs	r3, #0
    6216:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    6218:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    621a:	b171      	cbz	r1, 623a <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    621c:	4807      	ldr	r0, [pc, #28]	; (623c <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    621e:	b082      	sub	sp, #8
    6220:	6803      	ldr	r3, [r0, #0]
    6222:	9301      	str	r3, [sp, #4]
	return ret;
    6224:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    6226:	4411      	add	r1, r2
    6228:	e001      	b.n	622e <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    622a:	4299      	cmp	r1, r3
    622c:	d304      	bcc.n	6238 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    622e:	6803      	ldr	r3, [r0, #0]
    6230:	9300      	str	r3, [sp, #0]
	return ret;
    6232:	9b00      	ldr	r3, [sp, #0]
    6234:	429a      	cmp	r2, r3
    6236:	d9f8      	bls.n	622a <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    6238:	b002      	add	sp, #8
    623a:	4770      	bx	lr
    623c:	1fff9d60 	.word	0x1fff9d60

00006240 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    6240:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6242:	4c13      	ldr	r4, [pc, #76]	; (6290 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    6244:	b085      	sub	sp, #20
    6246:	6823      	ldr	r3, [r4, #0]
    6248:	9303      	str	r3, [sp, #12]
	return ret;
    624a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    624c:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    624e:	460d      	mov	r5, r1
    6250:	4810      	ldr	r0, [pc, #64]	; (6294 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    6252:	2106      	movs	r1, #6
    6254:	f001 fb10 	bl	7878 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    6258:	2300      	movs	r3, #0
    625a:	220a      	movs	r2, #10
    625c:	4629      	mov	r1, r5
    625e:	480e      	ldr	r0, [pc, #56]	; (6298 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    6260:	f001 fd1e 	bl	7ca0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6264:	2106      	movs	r1, #6
    6266:	480d      	ldr	r0, [pc, #52]	; (629c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    6268:	f001 fb06 	bl	7878 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    626c:	480a      	ldr	r0, [pc, #40]	; (6298 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    626e:	f001 fd07 	bl	7c80 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6272:	6823      	ldr	r3, [r4, #0]
    6274:	9302      	str	r3, [sp, #8]
	return ret;
    6276:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    6278:	f102 0132 	add.w	r1, r2, #50	; 0x32
    627c:	e001      	b.n	6282 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    627e:	4299      	cmp	r1, r3
    6280:	d304      	bcc.n	628c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6282:	6823      	ldr	r3, [r4, #0]
    6284:	9301      	str	r3, [sp, #4]
	return ret;
    6286:	9b01      	ldr	r3, [sp, #4]
    6288:	429a      	cmp	r2, r3
    628a:	d9f8      	bls.n	627e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    628c:	b005      	add	sp, #20
    628e:	bd30      	pop	{r4, r5, pc}
    6290:	1fff9d60 	.word	0x1fff9d60
    6294:	0000b0d4 	.word	0x0000b0d4
    6298:	1fff874c 	.word	0x1fff874c
    629c:	0000b0dc 	.word	0x0000b0dc

000062a0 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    62a0:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    62a2:	7e03      	ldrb	r3, [r0, #24]
    62a4:	b90b      	cbnz	r3, 62aa <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    62a6:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    62a8:	bd38      	pop	{r3, r4, r5, pc}
    62aa:	460d      	mov	r5, r1
    62ac:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    62ae:	f001 fab9 	bl	7824 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    62b2:	f010 0fff 	tst.w	r0, #255	; 0xff
    62b6:	d101      	bne.n	62bc <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    62b8:	2065      	movs	r0, #101	; 0x65
    62ba:	bd38      	pop	{r3, r4, r5, pc}
    62bc:	f001 fab2 	bl	7824 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    62c0:	f010 0fff 	tst.w	r0, #255	; 0xff
    62c4:	d0f8      	beq.n	62b8 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    62c6:	f001 fa71 	bl	77ac <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    62ca:	b2c0      	uxtb	r0, r0
    62cc:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    62d0:	2b1e      	cmp	r3, #30
    62d2:	d8f3      	bhi.n	62bc <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    62d4:	a201      	add	r2, pc, #4	; (adr r2, 62dc <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    62d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    62da:	bf00      	nop
    62dc:	00006365 	.word	0x00006365
    62e0:	000062bd 	.word	0x000062bd
    62e4:	000062bd 	.word	0x000062bd
    62e8:	000062bd 	.word	0x000062bd
    62ec:	000062bd 	.word	0x000062bd
    62f0:	000062bd 	.word	0x000062bd
    62f4:	000062bd 	.word	0x000062bd
    62f8:	000062bd 	.word	0x000062bd
    62fc:	000062bd 	.word	0x000062bd
    6300:	000062bd 	.word	0x000062bd
    6304:	000062bd 	.word	0x000062bd
    6308:	00006359 	.word	0x00006359
    630c:	000062bd 	.word	0x000062bd
    6310:	000062bd 	.word	0x000062bd
    6314:	000062bd 	.word	0x000062bd
    6318:	000062bd 	.word	0x000062bd
    631c:	000062a7 	.word	0x000062a7
    6320:	000062bd 	.word	0x000062bd
    6324:	000062bd 	.word	0x000062bd
    6328:	000062bd 	.word	0x000062bd
    632c:	000062bd 	.word	0x000062bd
    6330:	000062bd 	.word	0x000062bd
    6334:	000062bd 	.word	0x000062bd
    6338:	000062bd 	.word	0x000062bd
    633c:	000062bd 	.word	0x000062bd
    6340:	000062a7 	.word	0x000062a7
    6344:	000062bd 	.word	0x000062bd
    6348:	000062bd 	.word	0x000062bd
    634c:	000062bd 	.word	0x000062bd
    6350:	000062bd 	.word	0x000062bd
    6354:	000062a9 	.word	0x000062a9
		{

		case 'c':
			sendContinuedACK(breakPointId);
    6358:	4620      	mov	r0, r4
    635a:	4629      	mov	r1, r5
    635c:	f7ff ff70 	bl	6240 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get 