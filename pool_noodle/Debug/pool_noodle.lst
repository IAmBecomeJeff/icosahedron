
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 19 c4 00 00 d1 c3 00 00     ... ............
      10:	d1 c3 00 00 d1 c3 00 00 d1 c3 00 00 d1 c3 00 00     ................
      20:	d1 c3 00 00 d1 c3 00 00 d1 c3 00 00 19 c4 00 00     ................
      30:	19 c4 00 00 d1 c3 00 00 45 d8 00 00 49 d9 00 00     ........E...I...
      40:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      50:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      60:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      70:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      80:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      90:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      a0:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      b0:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      c0:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      d0:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      e0:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
      f0:	19 c4 00 00 a1 dc 00 00 19 c4 00 00 cd dd 00 00     ................
     100:	19 c4 00 00 f9 de 00 00 19 c4 00 00 19 c4 00 00     ................
     110:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     120:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     130:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     140:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     150:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     160:	19 c4 00 00 61 c8 00 00 19 c4 00 00 19 c4 00 00     ....a...........
     170:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     180:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     190:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     1a0:	19 c4 00 00 19 c4 00 00 19 c4 00 00 19 c4 00 00     ................
     1b0:	19 c4 00 00 19 c4 00 00 19 c4 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00c f926 	bl	c420 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00c f97a 	bl	c5cc <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00c f8eb 	bl	c4bc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00c f8dc 	bl	c4bc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00e fdde 	bl	eec8 <__libc_init_array>

	startup_late_hook();
     30c:	f00c f88e 	bl	c42c <startup_late_hook>
	main();
     310:	f00d fb22 	bl	d958 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c6c 	.word	0x1fff8c6c
     33c:	00012478 	.word	0x00012478
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c6c 	.word	0x1fff8c6c
     348:	1fffb448 	.word	0x1fffb448
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e45607e 	.word	0x5e45607e
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c6c 	.word	0x1fff8c6c
     42c:	00000000 	.word	0x00000000
     430:	0001247c 	.word	0x0001247c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c70 	.word	0x1fff8c70
     460:	0001247c 	.word	0x0001247c
     464:	1fff8c6c 	.word	0x1fff8c6c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.16]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     490:	3980      	subs	r1, #128	; 0x80
     492:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     494:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     496:	004b      	lsls	r3, r1, #1
     498:	7844      	ldrb	r4, [r0, #1]
     49a:	7882      	ldrb	r2, [r0, #2]
     49c:	b2c9      	uxtb	r1, r1
     49e:	b2db      	uxtb	r3, r3
     4a0:	1a61      	subs	r1, r4, r1
     4a2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ac:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ae:	7083      	strb	r3, [r0, #2]
}
     4b0:	bc10      	pop	{r4}
     4b2:	4770      	bx	lr

000004b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4b4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4b6:	4c1d      	ldr	r4, [pc, #116]	; (52c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x78>)
     4b8:	b083      	sub	sp, #12
     4ba:	6824      	ldr	r4, [r4, #0]
     4bc:	9401      	str	r4, [sp, #4]
	return ret;
     4be:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     4c0:	28ff      	cmp	r0, #255	; 0xff
     4c2:	bf98      	it	ls
     4c4:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4c6:	f44f 748c 	mov.w	r4, #280	; 0x118
     4ca:	eba5 0303 	sub.w	r3, r5, r3
     4ce:	fb04 f303 	mul.w	r3, r4, r3
     4d2:	bf98      	it	ls
     4d4:	b280      	uxthls	r0, r0
     4d6:	fb00 f003 	mul.w	r0, r0, r3
     4da:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e2:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4e4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e8:	d503      	bpl.n	4f2 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x3e>
     4ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ee:	3307      	adds	r3, #7
     4f0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f2:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4f4:	4e0e      	ldr	r6, [pc, #56]	; (530 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f6:	4c0f      	ldr	r4, [pc, #60]	; (534 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4f8:	5d76      	ldrb	r6, [r6, r5]
     4fa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4fe:	f3c3 0546 	ubfx	r5, r3, #1, #7
     502:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     506:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     508:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     50a:	bf4a      	itet	mi
     50c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     50e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     510:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     512:	1a52      	subs	r2, r2, r1
     514:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     518:	b292      	uxth	r2, r2
     51a:	b2a3      	uxth	r3, r4
     51c:	fb02 3303 	mla	r3, r2, r3, r3
     520:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     524:	b280      	uxth	r0, r0
     526:	b003      	add	sp, #12
     528:	bc70      	pop	{r4, r5, r6}
     52a:	4770      	bx	lr
     52c:	1fffb184 	.word	0x1fffb184
     530:	00011234 	.word	0x00011234
     534:	00010afc 	.word	0x00010afc

00000538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     538:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	4c1e      	ldr	r4, [pc, #120]	; (5b4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x7c>)
     53c:	b083      	sub	sp, #12
     53e:	6824      	ldr	r4, [r4, #0]
     540:	9401      	str	r4, [sp, #4]
	return ret;
     542:	9d01      	ldr	r5, [sp, #4]
     544:	28ff      	cmp	r0, #255	; 0xff
     546:	bf98      	it	ls
     548:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     54a:	f44f 748c 	mov.w	r4, #280	; 0x118
     54e:	eba5 0303 	sub.w	r3, r5, r3
     552:	fb04 f303 	mul.w	r3, r4, r3
     556:	bf98      	it	ls
     558:	b280      	uxthls	r0, r0
     55a:	fb00 f003 	mul.w	r0, r0, r3
     55e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     562:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     566:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     568:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     56a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     56e:	d503      	bpl.n	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x40>
     570:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     574:	3307      	adds	r3, #7
     576:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     578:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     57a:	4e0f      	ldr	r6, [pc, #60]	; (5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     57c:	4c0f      	ldr	r4, [pc, #60]	; (5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     57e:	5d76      	ldrb	r6, [r6, r5]
     580:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     584:	f3c3 0546 	ubfx	r5, r3, #1, #7
     588:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     58c:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     58e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     590:	bf4a      	itet	mi
     592:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     594:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     596:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     598:	1a52      	subs	r2, r2, r1
     59a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     59e:	b292      	uxth	r2, r2
     5a0:	b2a3      	uxth	r3, r4
     5a2:	fb02 3303 	mla	r3, r2, r3, r3
     5a6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5aa:	b280      	uxth	r0, r0
     5ac:	b003      	add	sp, #12
     5ae:	bc70      	pop	{r4, r5, r6}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	1fffb184 	.word	0x1fffb184
     5b8:	00011234 	.word	0x00011234
     5bc:	00010afc 	.word	0x00010afc

000005c0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     5c0:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c2:	4b18      	ldr	r3, [pc, #96]	; (624 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x64>)
     5c4:	b083      	sub	sp, #12
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	9301      	str	r3, [sp, #4]
	return ret;
     5ca:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     5cc:	f44f 738c 	mov.w	r3, #280	; 0x118
     5d0:	fb03 f606 	mul.w	r6, r3, r6
     5d4:	fb00 f006 	mul.w	r0, r0, r6
     5d8:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5da:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5dc:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5e0:	d503      	bpl.n	5ea <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x2a>
     5e2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5e6:	3307      	adds	r3, #7
     5e8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5ea:	0a18      	lsrs	r0, r3, #8
     5ec:	4d0e      	ldr	r5, [pc, #56]	; (628 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x68>)
    uint8_t  m   = slope[section];
     5ee:	4c0f      	ldr	r4, [pc, #60]	; (62c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5f0:	5c24      	ldrb	r4, [r4, r0]
     5f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     5f6:	f3c3 0546 	ubfx	r5, r3, #1, #7
     5fa:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     5fe:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     600:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     602:	bf48      	it	mi
     604:	4264      	negmi	r4, r4
     606:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     608:	1a53      	subs	r3, r2, r1
     60a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     60e:	b29a      	uxth	r2, r3
     610:	b2a3      	uxth	r3, r4
     612:	fb02 3303 	mla	r3, r2, r3, r3
     616:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     61a:	b280      	uxth	r0, r0
     61c:	b003      	add	sp, #12
     61e:	bc70      	pop	{r4, r5, r6}
     620:	4770      	bx	lr
     622:	bf00      	nop
     624:	1fffb184 	.word	0x1fffb184
     628:	00010afc 	.word	0x00010afc
     62c:	00011234 	.word	0x00011234

00000630 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     630:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     632:	2101      	movs	r1, #1
     634:	4604      	mov	r4, r0
     636:	200e      	movs	r0, #14
     638:	f00b ff52 	bl	c4e0 <pinMode>
     63c:	2007      	movs	r0, #7
     63e:	2101      	movs	r1, #1
     640:	f00b ff4e 	bl	c4e0 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     644:	69a0      	ldr	r0, [r4, #24]
     646:	b158      	cbz	r0, 660 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     648:	6803      	ldr	r3, [r0, #0]
     64a:	4a07      	ldr	r2, [pc, #28]	; (668 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     64c:	685b      	ldr	r3, [r3, #4]
     64e:	4293      	cmp	r3, r2
     650:	d107      	bne.n	662 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     652:	6842      	ldr	r2, [r0, #4]
     654:	7b01      	ldrb	r1, [r0, #12]
     656:	7813      	ldrb	r3, [r2, #0]
     658:	ea23 0301 	bic.w	r3, r3, r1
     65c:	7013      	strb	r3, [r2, #0]
     65e:	bd10      	pop	{r4, pc}
     660:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     666:	4718      	bx	r3
     668:	00000481 	.word	0x00000481

0000066c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     66c:	b5f0      	push	{r4, r5, r6, r7, lr}
     66e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     670:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     672:	6805      	ldr	r5, [r0, #0]
     674:	f88d 3004 	strb.w	r3, [sp, #4]
     678:	f88d 3005 	strb.w	r3, [sp, #5]
     67c:	f88d 3006 	strb.w	r3, [sp, #6]
     680:	682e      	ldr	r6, [r5, #0]
     682:	4a37      	ldr	r2, [pc, #220]	; (760 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     684:	f88d 3008 	strb.w	r3, [sp, #8]
     688:	4296      	cmp	r6, r2
     68a:	f88d 3009 	strb.w	r3, [sp, #9]
     68e:	f88d 300a 	strb.w	r3, [sp, #10]
     692:	d15f      	bne.n	754 <CLEDController::clearLeds(int)+0xe8>
     694:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     696:	9104      	str	r1, [sp, #16]
     698:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     69a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     69c:	a801      	add	r0, sp, #4
     69e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     6a4:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     6a8:	f88d 3020 	strb.w	r3, [sp, #32]
     6ac:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ae:	d015      	beq.n	6dc <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6b0:	f88d 301d 	strb.w	r3, [sp, #29]
     6b4:	f88d 301c 	strb.w	r3, [sp, #28]
     6b8:	f88d 301b 	strb.w	r3, [sp, #27]
     6bc:	f88d 301a 	strb.w	r3, [sp, #26]
     6c0:	f88d 3019 	strb.w	r3, [sp, #25]
     6c4:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6c8:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ca:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d4:	a903      	add	r1, sp, #12
     6d6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6d8:	b00b      	add	sp, #44	; 0x2c
     6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6dc:	4a21      	ldr	r2, [pc, #132]	; (764 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6de:	7813      	ldrb	r3, [r2, #0]
     6e0:	3301      	adds	r3, #1
     6e2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e6:	f013 0f01 	tst.w	r3, #1
     6ea:	bf14      	ite	ne
     6ec:	2180      	movne	r1, #128	; 0x80
     6ee:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6f0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f2:	079a      	lsls	r2, r3, #30
     6f4:	bf44      	itt	mi
     6f6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     6fa:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     6fc:	075b      	lsls	r3, r3, #29
     6fe:	bf48      	it	mi
     700:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     704:	3110      	adds	r1, #16
     706:	2200      	movs	r2, #0
     708:	b2c9      	uxtb	r1, r1
     70a:	f10d 031b 	add.w	r3, sp, #27
     70e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1aa      	cbz	r2, 744 <CLEDController::clearLeds(int)+0xd8>
     718:	fb9e f2f2 	sdiv	r2, lr, r2
     71c:	b2d2      	uxtb	r2, r2
     71e:	1c50      	adds	r0, r2, #1
     720:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     722:	fb00 1501 	mla	r5, r0, r1, r1
     726:	122d      	asrs	r5, r5, #8
     728:	7018      	strb	r0, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CLEDController::clearLeds(int)+0xc4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b100      	cbz	r0, 738 <CLEDController::clearLeds(int)+0xcc>
     736:	701a      	strb	r2, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	429f      	cmp	r7, r3
     73c:	d008      	beq.n	750 <CLEDController::clearLeds(int)+0xe4>
     73e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2a00      	cmp	r2, #0
     742:	d1e9      	bne.n	718 <CLEDController::clearLeds(int)+0xac>
     744:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 2c03 	strb.w	r2, [r3, #-3]
     74a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     74c:	429f      	cmp	r7, r3
     74e:	d1f6      	bne.n	73e <CLEDController::clearLeds(int)+0xd2>
     750:	6825      	ldr	r5, [r4, #0]
     752:	e7b9      	b.n	6c8 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     754:	460a      	mov	r2, r1
     756:	ab02      	add	r3, sp, #8
     758:	a901      	add	r1, sp, #4
     75a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     75c:	b00b      	add	sp, #44	; 0x2c
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     760:	00000769 	.word	0x00000769
     764:	1fff8c88 	.word	0x1fff8c88

00000768 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     768:	b5f0      	push	{r4, r5, r6, r7, lr}
     76a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     76c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     76e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     770:	789b      	ldrb	r3, [r3, #2]
     772:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     774:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     776:	9101      	str	r1, [sp, #4]
     778:	9202      	str	r2, [sp, #8]
     77a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     77c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     780:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     784:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     788:	d016      	beq.n	7b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     78a:	2300      	movs	r3, #0
     78c:	f88d 3015 	strb.w	r3, [sp, #21]
     790:	f88d 3014 	strb.w	r3, [sp, #20]
     794:	f88d 3013 	strb.w	r3, [sp, #19]
     798:	f88d 3012 	strb.w	r3, [sp, #18]
     79c:	f88d 3011 	strb.w	r3, [sp, #17]
     7a0:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7a4:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7a6:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7a8:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7aa:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     7ae:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7b0:	a901      	add	r1, sp, #4
     7b2:	4790      	blx	r2
  }
     7b4:	b009      	add	sp, #36	; 0x24
     7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     7b8:	4a1b      	ldr	r2, [pc, #108]	; (828 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7ba:	7813      	ldrb	r3, [r2, #0]
     7bc:	3301      	adds	r3, #1
     7be:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7c2:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7c6:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7c8:	bf14      	ite	ne
     7ca:	2280      	movne	r2, #128	; 0x80
     7cc:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     7ce:	0799      	lsls	r1, r3, #30
     7d0:	bf44      	itt	mi
     7d2:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     7d6:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     7d8:	075b      	lsls	r3, r3, #29
     7da:	bf48      	it	mi
     7dc:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     7e0:	3210      	adds	r2, #16
     7e2:	b2d2      	uxtb	r2, r2
     7e4:	f10d 0313 	add.w	r3, sp, #19
     7e8:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ec:	f44f 7e80 	mov.w	lr, #256	; 0x100
     7f0:	b1ac      	cbz	r4, 81e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     7f2:	fb9e f4f4 	sdiv	r4, lr, r4
     7f6:	b2e4      	uxtb	r4, r4
     7f8:	1c61      	adds	r1, r4, #1
     7fa:	b2c9      	uxtb	r1, r1
     7fc:	fb01 2502 	mla	r5, r1, r2, r2
     800:	122d      	asrs	r5, r5, #8
     802:	7019      	strb	r1, [r3, #0]
     804:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     806:	b105      	cbz	r5, 80a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     808:	3e01      	subs	r6, #1
     80a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     80e:	b101      	cbz	r1, 812 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     810:	701c      	strb	r4, [r3, #0]
     812:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     814:	42bb      	cmp	r3, r7
     816:	d0c5      	beq.n	7a4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     818:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     81a:	2c00      	cmp	r4, #0
     81c:	d1e9      	bne.n	7f2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     81e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     820:	f803 4c03 	strb.w	r4, [r3, #-3]
     824:	e7f5      	b.n	812 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     826:	bf00      	nop
     828:	1fff8c88 	.word	0x1fff8c88

0000082c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     82c:	b5f0      	push	{r4, r5, r6, r7, lr}
     82e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     830:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     832:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     834:	789b      	ldrb	r3, [r3, #2]
     836:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     838:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     83a:	9101      	str	r1, [sp, #4]
     83c:	9202      	str	r2, [sp, #8]
     83e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     840:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     844:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     848:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     84c:	d017      	beq.n	87e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     84e:	2300      	movs	r3, #0
     850:	f88d 3015 	strb.w	r3, [sp, #21]
     854:	f88d 3014 	strb.w	r3, [sp, #20]
     858:	f88d 3013 	strb.w	r3, [sp, #19]
     85c:	f88d 3012 	strb.w	r3, [sp, #18]
     860:	f88d 3011 	strb.w	r3, [sp, #17]
     864:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     868:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     86a:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     86c:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     86e:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     870:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     874:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     876:	a901      	add	r1, sp, #4
     878:	4798      	blx	r3
  }
     87a:	b009      	add	sp, #36	; 0x24
     87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     87e:	4a1b      	ldr	r2, [pc, #108]	; (8ec <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     880:	7813      	ldrb	r3, [r2, #0]
     882:	3301      	adds	r3, #1
     884:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     888:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     88c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     88e:	bf14      	ite	ne
     890:	2280      	movne	r2, #128	; 0x80
     892:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     894:	0799      	lsls	r1, r3, #30
     896:	bf44      	itt	mi
     898:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     89c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     89e:	075b      	lsls	r3, r3, #29
     8a0:	bf48      	it	mi
     8a2:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     8a6:	3210      	adds	r2, #16
     8a8:	b2d2      	uxtb	r2, r2
     8aa:	f10d 0313 	add.w	r3, sp, #19
     8ae:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8b2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     8b6:	b1ac      	cbz	r4, 8e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     8b8:	fb9e f4f4 	sdiv	r4, lr, r4
     8bc:	b2e4      	uxtb	r4, r4
     8be:	1c61      	adds	r1, r4, #1
     8c0:	b2c9      	uxtb	r1, r1
     8c2:	fb01 2502 	mla	r5, r1, r2, r2
     8c6:	122d      	asrs	r5, r5, #8
     8c8:	7019      	strb	r1, [r3, #0]
     8ca:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     8cc:	b105      	cbz	r5, 8d0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     8ce:	3e01      	subs	r6, #1
     8d0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     8d4:	b101      	cbz	r1, 8d8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     8d6:	701c      	strb	r4, [r3, #0]
     8d8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     8da:	42bb      	cmp	r3, r7
     8dc:	d0c4      	beq.n	868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     8de:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8e0:	2c00      	cmp	r4, #0
     8e2:	d1e9      	bne.n	8b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     8e4:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8e6:	f803 4c03 	strb.w	r4, [r3, #-3]
     8ea:	e7f5      	b.n	8d8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     8ec:	1fff8c88 	.word	0x1fff8c88

000008f0 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	4604      	mov	r4, r0
     8f4:	4608      	mov	r0, r1
     8f6:	460d      	mov	r5, r1
     8f8:	f00e fbe2 	bl	f0c0 <strlen>
     8fc:	6823      	ldr	r3, [r4, #0]
     8fe:	4602      	mov	r2, r0
     900:	4629      	mov	r1, r5
     902:	4620      	mov	r0, r4
     904:	685b      	ldr	r3, [r3, #4]
     906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     90a:	4718      	bx	r3

0000090c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     90c:	b538      	push	{r3, r4, r5, lr}
     90e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     910:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     912:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     914:	f00e fbd4 	bl	f0c0 <strlen>
     918:	6823      	ldr	r3, [r4, #0]
     91a:	4602      	mov	r2, r0
     91c:	4629      	mov	r1, r5
     91e:	685b      	ldr	r3, [r3, #4]
     920:	4620      	mov	r0, r4
     922:	4798      	blx	r3
     924:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     926:	4620      	mov	r0, r4
     928:	f00d f81e 	bl	d968 <Print::println()>
     92c:	4428      	add	r0, r5
     92e:	bd38      	pop	{r3, r4, r5, pc}

00000930 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     934:	780d      	ldrb	r5, [r1, #0]
     936:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     938:	784d      	ldrb	r5, [r1, #1]
     93a:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     93c:	7889      	ldrb	r1, [r1, #2]
     93e:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     940:	7811      	ldrb	r1, [r2, #0]
     942:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     944:	7851      	ldrb	r1, [r2, #1]
     946:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     948:	7892      	ldrb	r2, [r2, #2]
     94a:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     94c:	781a      	ldrb	r2, [r3, #0]
     94e:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     950:	785a      	ldrb	r2, [r3, #1]
     952:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     954:	789b      	ldrb	r3, [r3, #2]
     956:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     95a:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     95c:	f89a b000 	ldrb.w	fp, [sl]
     960:	f880 b009 	strb.w	fp, [r0, #9]
     964:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     968:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     96c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     970:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     972:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     974:	9d10      	ldr	r5, [sp, #64]	; 0x40
     976:	9911      	ldr	r1, [sp, #68]	; 0x44
     978:	9a12      	ldr	r2, [sp, #72]	; 0x48
     97a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     97c:	f89a b001 	ldrb.w	fp, [sl, #1]
     980:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     984:	f89a a002 	ldrb.w	sl, [sl, #2]
     988:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     98c:	f899 a000 	ldrb.w	sl, [r9]
     990:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     994:	f899 a001 	ldrb.w	sl, [r9, #1]
     998:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     99c:	f899 9002 	ldrb.w	r9, [r9, #2]
     9a0:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9a4:	f898 9000 	ldrb.w	r9, [r8]
     9a8:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     9ac:	f898 9001 	ldrb.w	r9, [r8, #1]
     9b0:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     9b4:	f898 8002 	ldrb.w	r8, [r8, #2]
     9b8:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9bc:	f89c 8000 	ldrb.w	r8, [ip]
     9c0:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     9c4:	f89c 8001 	ldrb.w	r8, [ip, #1]
     9c8:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     9cc:	f89c c002 	ldrb.w	ip, [ip, #2]
     9d0:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9d4:	f89e c000 	ldrb.w	ip, [lr]
     9d8:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     9dc:	f89e c001 	ldrb.w	ip, [lr, #1]
     9e0:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     9e4:	f89e e002 	ldrb.w	lr, [lr, #2]
     9e8:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ec:	f897 e000 	ldrb.w	lr, [r7]
     9f0:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     9f4:	f897 e001 	ldrb.w	lr, [r7, #1]
     9f8:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     9fc:	78bf      	ldrb	r7, [r7, #2]
     9fe:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a00:	7837      	ldrb	r7, [r6, #0]
     a02:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     a04:	7877      	ldrb	r7, [r6, #1]
     a06:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     a08:	78b6      	ldrb	r6, [r6, #2]
     a0a:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a0c:	782e      	ldrb	r6, [r5, #0]
     a0e:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     a10:	786e      	ldrb	r6, [r5, #1]
     a12:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     a14:	78ad      	ldrb	r5, [r5, #2]
     a16:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a1a:	780d      	ldrb	r5, [r1, #0]
     a1c:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     a20:	784d      	ldrb	r5, [r1, #1]
     a22:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     a26:	7889      	ldrb	r1, [r1, #2]
     a28:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a2c:	7811      	ldrb	r1, [r2, #0]
     a2e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     a32:	7851      	ldrb	r1, [r2, #1]
     a34:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     a38:	7892      	ldrb	r2, [r2, #2]
     a3a:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a40:	7812      	ldrb	r2, [r2, #0]
     a42:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     a46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a48:	7852      	ldrb	r2, [r2, #1]
     a4a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     a4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a50:	7892      	ldrb	r2, [r2, #2]
     a52:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a56:	9a14      	ldr	r2, [sp, #80]	; 0x50
     a58:	7812      	ldrb	r2, [r2, #0]
     a5a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     a5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     a60:	7852      	ldrb	r2, [r2, #1]
     a62:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
     a68:	7892      	ldrb	r2, [r2, #2]
     a6a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a6e:	781a      	ldrb	r2, [r3, #0]
     a70:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     a74:	785a      	ldrb	r2, [r3, #1]
     a76:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     a7a:	789b      	ldrb	r3, [r3, #2]
     a7c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a84 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a88:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a8a:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a8c:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a8e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a92:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a94:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a96:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a98:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a9a:	d1f8      	bne.n	a8e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a9c:	680b      	ldr	r3, [r1, #0]
     a9e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     aa0:	ea4f 6813 	mov.w	r8, r3, lsr #24
     aa4:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     aa8:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     aac:	f04f 33ff 	mov.w	r3, #4294967295
     ab0:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     ab2:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     ab4:	9305      	str	r3, [sp, #20]
     ab6:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ab8:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     abc:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     abe:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     ac2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ac6:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     aca:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     acc:	b2f9      	uxtb	r1, r7
     ace:	f3c5 6507 	ubfx	r5, r5, #24, #8
     ad2:	9103      	str	r1, [sp, #12]
     ad4:	b2e9      	uxtb	r1, r5
     ad6:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     ad8:	fa5f f18c 	uxtb.w	r1, ip
     adc:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     ade:	9907      	ldr	r1, [sp, #28]
     ae0:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ae2:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ae4:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ae8:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     aec:	d80c      	bhi.n	b08 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     aee:	9905      	ldr	r1, [sp, #20]
     af0:	458c      	cmp	ip, r1
     af2:	dc07      	bgt.n	b04 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     af4:	290f      	cmp	r1, #15
     af6:	d005      	beq.n	b04 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     af8:	3101      	adds	r1, #1
     afa:	b2c9      	uxtb	r1, r1
     afc:	428b      	cmp	r3, r1
     afe:	9102      	str	r1, [sp, #8]
     b00:	bf38      	it	cc
     b02:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b04:	b259      	sxtb	r1, r3
     b06:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b08:	a909      	add	r1, sp, #36	; 0x24
     b0a:	9100      	str	r1, [sp, #0]
     b0c:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b0e:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     b12:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     b16:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b1a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     b1e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     b22:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     b26:	f00a fc77 	bl	b418 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b2a:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     b2c:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b30:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     b34:	46d1      	mov	r9, sl
     b36:	d1bf      	bne.n	ab8 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     b38:	9806      	ldr	r0, [sp, #24]
     b3a:	b00b      	add	sp, #44	; 0x2c
     b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b40 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     b40:	4b48      	ldr	r3, [pc, #288]	; (c64 <updatePaletteIndex(LEDStruct&)+0x124>)
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	2b00      	cmp	r3, #0
     b46:	f000 808b 	beq.w	c60 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     b4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b4e:	b09b      	sub	sp, #108	; 0x6c
     b50:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     b54:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     b56:	2300      	movs	r3, #0
     b58:	4a43      	ldr	r2, [pc, #268]	; (c68 <updatePaletteIndex(LEDStruct&)+0x128>)
     b5a:	9307      	str	r3, [sp, #28]
     b5c:	f8df 910c 	ldr.w	r9, [pc, #268]	; c6c <updatePaletteIndex(LEDStruct&)+0x12c>
     b60:	9009      	str	r0, [sp, #36]	; 0x24
     b62:	f200 2327 	addw	r3, r0, #551	; 0x227
     b66:	9208      	str	r2, [sp, #32]
     b68:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b6a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b6c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b70:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b72:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b74:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b76:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b78:	d1f8      	bne.n	b6c <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b7a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b7e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b80:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b84:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b88:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b8a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b8e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     b92:	2400      	movs	r4, #0
     b94:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b96:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b9a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     b9e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ba2:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     ba6:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     ba8:	b2f1      	uxtb	r1, r6
     baa:	f3c5 6507 	ubfx	r5, r5, #24, #8
     bae:	9103      	str	r1, [sp, #12]
     bb0:	b2e9      	uxtb	r1, r5
     bb2:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     bb4:	fa5f f18c 	uxtb.w	r1, ip
     bb8:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     bba:	9906      	ldr	r1, [sp, #24]
     bbc:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bbe:	aa0c      	add	r2, sp, #48	; 0x30
     bc0:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     bc2:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bc6:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     bca:	d80c      	bhi.n	be6 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     bcc:	9905      	ldr	r1, [sp, #20]
     bce:	458c      	cmp	ip, r1
     bd0:	dc07      	bgt.n	be2 <updatePaletteIndex(LEDStruct&)+0xa2>
     bd2:	290f      	cmp	r1, #15
     bd4:	d005      	beq.n	be2 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     bd6:	3101      	adds	r1, #1
     bd8:	b2c9      	uxtb	r1, r1
     bda:	428b      	cmp	r3, r1
     bdc:	9102      	str	r1, [sp, #8]
     bde:	bf38      	it	cc
     be0:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     be2:	b259      	sxtb	r1, r3
     be4:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     be6:	a90d      	add	r1, sp, #52	; 0x34
     be8:	9100      	str	r1, [sp, #0]
     bea:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bec:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     bf0:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     bf4:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bf8:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     bfc:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     c00:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     c04:	f00a fc08 	bl	b418 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     c08:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c0a:	46d3      	mov	fp, sl
        g = rhs.g;
     c0c:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     c10:	f8dd 8010 	ldr.w	r8, [sp, #16]
     c14:	d1bf      	bne.n	b96 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c18:	aa0e      	add	r2, sp, #56	; 0x38
     c1a:	4293      	cmp	r3, r2
     c1c:	d018      	beq.n	c50 <updatePaletteIndex(LEDStruct&)+0x110>
     c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     c22:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     c26:	e001      	b.n	c2c <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     c28:	42a3      	cmp	r3, r4
     c2a:	d011      	beq.n	c50 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     c2c:	f812 1b01 	ldrb.w	r1, [r2], #1
     c30:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     c34:	4288      	cmp	r0, r1
     c36:	d0f7      	beq.n	c28 <updatePaletteIndex(LEDStruct&)+0xe8>
     c38:	4b0a      	ldr	r3, [pc, #40]	; (c64 <updatePaletteIndex(LEDStruct&)+0x124>)
     c3a:	9a07      	ldr	r2, [sp, #28]
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	3201      	adds	r2, #1
     c40:	4293      	cmp	r3, r2
     c42:	9207      	str	r2, [sp, #28]
     c44:	dd09      	ble.n	c5a <updatePaletteIndex(LEDStruct&)+0x11a>
     c46:	9b08      	ldr	r3, [sp, #32]
     c48:	f853 9f04 	ldr.w	r9, [r3, #4]!
     c4c:	9308      	str	r3, [sp, #32]
     c4e:	e78c      	b.n	b6a <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c52:	f89d 201c 	ldrb.w	r2, [sp, #28]
     c56:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     c5a:	b01b      	add	sp, #108	; 0x6c
     c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c60:	4770      	bx	lr
     c62:	bf00      	nop
     c64:	1fff8754 	.word	0x1fff8754
     c68:	00011090 	.word	0x00011090
     c6c:	00011c34 	.word	0x00011c34

00000c70 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c74:	4d42      	ldr	r5, [pc, #264]	; (d80 <initialize()+0x110>)
		}
	}
}

// Initialization function
void initialize() {
     c76:	b082      	sub	sp, #8
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c78:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     c7a:	2400      	movs	r4, #0
     c7c:	4628      	mov	r0, r5
     c7e:	2196      	movs	r1, #150	; 0x96
     c80:	f88d 4004 	strb.w	r4, [sp, #4]
     c84:	f88d 4005 	strb.w	r4, [sp, #5]
     c88:	f88d 4006 	strb.w	r4, [sp, #6]
     c8c:	f00a fb94 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     c90:	493c      	ldr	r1, [pc, #240]	; (d84 <initialize()+0x114>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     c92:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     c96:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     c9a:	f7ff fef3 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     c9e:	493a      	ldr	r1, [pc, #232]	; (d88 <initialize()+0x118>)
     ca0:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     ca4:	f7ff feee 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     ca8:	4628      	mov	r0, r5
     caa:	f7ff ff49 	bl	b40 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     cae:	4b37      	ldr	r3, [pc, #220]	; (d8c <initialize()+0x11c>)
     cb0:	4a37      	ldr	r2, [pc, #220]	; (d90 <initialize()+0x120>)
     cb2:	7818      	ldrb	r0, [r3, #0]
     cb4:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     cb8:	4623      	mov	r3, r4
     cba:	e001      	b.n	cc0 <initialize()+0x50>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     cbc:	2b20      	cmp	r3, #32
     cbe:	d008      	beq.n	cd2 <initialize()+0x62>
		if (leds.mode_name == ModeList[i]) {
     cc0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     cc4:	4281      	cmp	r1, r0
     cc6:	b2dc      	uxtb	r4, r3
     cc8:	f103 0301 	add.w	r3, r3, #1
     ccc:	d1f6      	bne.n	cbc <initialize()+0x4c>
			leds.mode_number = i;
     cce:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     cd2:	4e30      	ldr	r6, [pc, #192]	; (d94 <initialize()+0x124>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     cd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; da8 <initialize()+0x138>
	curr_over_leds.array_type		= CURR_OVERLAY;
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     cd8:	4f2f      	ldr	r7, [pc, #188]	; (d98 <initialize()+0x128>)
     cda:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     cdc:	aa01      	add	r2, sp, #4
     cde:	4630      	mov	r0, r6
     ce0:	2196      	movs	r1, #150	; 0x96
     ce2:	f88d 4004 	strb.w	r4, [sp, #4]
     ce6:	f88d 4005 	strb.w	r4, [sp, #5]
     cea:	f88d 4006 	strb.w	r4, [sp, #6]
     cee:	f00a fb63 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     cf2:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     cf4:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     cf8:	4928      	ldr	r1, [pc, #160]	; (d9c <initialize()+0x12c>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     cfa:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     cfe:	f7ff fec1 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     d02:	4927      	ldr	r1, [pc, #156]	; (da0 <initialize()+0x130>)
     d04:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     d08:	f7ff febc 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     d0c:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     d10:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     d14:	4630      	mov	r0, r6
     d16:	f7ff ff13 	bl	b40 <updatePaletteIndex(LEDStruct&)>

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d1a:	aa01      	add	r2, sp, #4
     d1c:	4640      	mov	r0, r8
     d1e:	2196      	movs	r1, #150	; 0x96
     d20:	f88d 4004 	strb.w	r4, [sp, #4]
     d24:	f88d 4005 	strb.w	r4, [sp, #5]
     d28:	f88d 4006 	strb.w	r4, [sp, #6]
     d2c:	f00a fb44 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
     d30:	2302      	movs	r3, #2
	curr_over_leds.current_palette	= cequal_gp;
     d32:	f508 70e4 	add.w	r0, r8, #456	; 0x1c8
     d36:	491b      	ldr	r1, [pc, #108]	; (da4 <initialize()+0x134>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_over_leds.array_type		= CURR_OVERLAY;
     d38:	f888 31c6 	strb.w	r3, [r8, #454]	; 0x1c6
	curr_over_leds.current_palette	= cequal_gp;
     d3c:	f7ff fea2 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
	curr_over_leds.target_palette	= cequal_gp;
     d40:	f508 70fc 	add.w	r0, r8, #504	; 0x1f8
     d44:	4917      	ldr	r1, [pc, #92]	; (da4 <initialize()+0x134>)
     d46:	f7ff fe9d 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d4a:	aa01      	add	r2, sp, #4
     d4c:	4638      	mov	r0, r7
     d4e:	2196      	movs	r1, #150	; 0x96
     d50:	f88d 4004 	strb.w	r4, [sp, #4]
     d54:	f88d 4005 	strb.w	r4, [sp, #5]
     d58:	f88d 4006 	strb.w	r4, [sp, #6]
     d5c:	f00a fb2c 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
     d60:	2303      	movs	r3, #3
	next_over_leds.current_palette = cequal_gp;
     d62:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     d66:	490f      	ldr	r1, [pc, #60]	; (da4 <initialize()+0x134>)
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	next_over_leds.array_type = NEXT_OVERLAY;
     d68:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	next_over_leds.current_palette = cequal_gp;
     d6c:	f7ff fe8a 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
	next_over_leds.target_palette = cequal_gp;
     d70:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     d74:	490b      	ldr	r1, [pc, #44]	; (da4 <initialize()+0x134>)
     d76:	f7ff fe85 	bl	a84 <CRGBPalette16::operator=(unsigned char const*)>
}
     d7a:	b002      	add	sp, #8
     d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d80:	1fffa6ec 	.word	0x1fffa6ec
     d84:	00012080 	.word	0x00012080
     d88:	000116d8 	.word	0x000116d8
     d8c:	1fff874d 	.word	0x1fff874d
     d90:	1fff8727 	.word	0x1fff8727
     d94:	1fff8cb0 	.word	0x1fff8cb0
     d98:	1fff9e90 	.word	0x1fff9e90
     d9c:	00011e50 	.word	0x00011e50
     da0:	00011e10 	.word	0x00011e10
     da4:	00011ef8 	.word	0x00011ef8
     da8:	1fff9620 	.word	0x1fff9620

00000dac <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     dac:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     dae:	2112      	movs	r1, #18
     db0:	b082      	sub	sp, #8
     db2:	4834      	ldr	r0, [pc, #208]	; (e84 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     db4:	4c34      	ldr	r4, [pc, #208]	; (e88 <global_debug()+0xdc>)
     db6:	f00c fbd3 	bl	d560 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     dba:	4b34      	ldr	r3, [pc, #208]	; (e8c <global_debug()+0xe0>)
     dbc:	4620      	mov	r0, r4
     dbe:	7819      	ldrb	r1, [r3, #0]
     dc0:	f00c fe22 	bl	da08 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     dc4:	4620      	mov	r0, r4
     dc6:	f00c fdcf 	bl	d968 <Print::println()>
     dca:	2111      	movs	r1, #17
     dcc:	4830      	ldr	r0, [pc, #192]	; (e90 <global_debug()+0xe4>)
     dce:	f00c fbc7 	bl	d560 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     dd2:	4b30      	ldr	r3, [pc, #192]	; (e94 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     dd4:	4620      	mov	r0, r4
     dd6:	7819      	ldrb	r1, [r3, #0]
     dd8:	f00c fe16 	bl	da08 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ddc:	4620      	mov	r0, r4
     dde:	f00c fdc3 	bl	d968 <Print::println()>
     de2:	2115      	movs	r1, #21
     de4:	482c      	ldr	r0, [pc, #176]	; (e98 <global_debug()+0xec>)
     de6:	f00c fbbb 	bl	d560 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     dea:	4b2c      	ldr	r3, [pc, #176]	; (e9c <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     dec:	4620      	mov	r0, r4
     dee:	7819      	ldrb	r1, [r3, #0]
     df0:	f00c fe0a 	bl	da08 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     df4:	4620      	mov	r0, r4
     df6:	f00c fdb7 	bl	d968 <Print::println()>
     dfa:	2111      	movs	r1, #17
     dfc:	4828      	ldr	r0, [pc, #160]	; (ea0 <global_debug()+0xf4>)
     dfe:	f00c fbaf 	bl	d560 <usb_serial_write>
	Serial.print("(T) Mode Timer:\t\t");
	Serial.println(mode_change_time);
     e02:	4b28      	ldr	r3, [pc, #160]	; (ea4 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e04:	4620      	mov	r0, r4
     e06:	8819      	ldrh	r1, [r3, #0]
     e08:	f00c fdfe 	bl	da08 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e0c:	4620      	mov	r0, r4
     e0e:	f00c fdab 	bl	d968 <Print::println()>
     e12:	2114      	movs	r1, #20
     e14:	4824      	ldr	r0, [pc, #144]	; (ea8 <global_debug()+0xfc>)
     e16:	f00c fba3 	bl	d560 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     e1a:	4b24      	ldr	r3, [pc, #144]	; (eac <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e1c:	4620      	mov	r0, r4
     e1e:	8819      	ldrh	r1, [r3, #0]
     e20:	f00c fdf2 	bl	da08 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e24:	4620      	mov	r0, r4
     e26:	f00c fd9f 	bl	d968 <Print::println()>
     e2a:	210f      	movs	r1, #15
     e2c:	4820      	ldr	r0, [pc, #128]	; (eb0 <global_debug()+0x104>)
     e2e:	f00c fb97 	bl	d560 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     e32:	4b20      	ldr	r3, [pc, #128]	; (eb4 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e34:	4620      	mov	r0, r4
     e36:	8819      	ldrh	r1, [r3, #0]
     e38:	f00c fde6 	bl	da08 <Print::print(long)>
     e3c:	2102      	movs	r1, #2
     e3e:	481e      	ldr	r0, [pc, #120]	; (eb8 <global_debug()+0x10c>)
     e40:	f00c fb8e 	bl	d560 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     e44:	4b1d      	ldr	r3, [pc, #116]	; (ebc <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e46:	220a      	movs	r2, #10
     e48:	7819      	ldrb	r1, [r3, #0]
     e4a:	4620      	mov	r0, r4
     e4c:	2300      	movs	r3, #0
     e4e:	f00c fd9b 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     e52:	2101      	movs	r1, #1
     e54:	481a      	ldr	r0, [pc, #104]	; (ec0 <global_debug()+0x114>)
     e56:	f00c fb83 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e5a:	4620      	mov	r0, r4
     e5c:	f00c fd84 	bl	d968 <Print::println()>
     e60:	210e      	movs	r1, #14
     e62:	4818      	ldr	r0, [pc, #96]	; (ec4 <global_debug()+0x118>)
     e64:	f00c fb7c 	bl	d560 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e68:	4b17      	ldr	r3, [pc, #92]	; (ec8 <global_debug()+0x11c>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	9301      	str	r3, [sp, #4]
	return ret;
     e6e:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     e70:	2300      	movs	r3, #0
     e72:	220a      	movs	r2, #10
     e74:	4620      	mov	r0, r4
     e76:	f00c fd87 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     e7a:	4620      	mov	r0, r4
     e7c:	f00c fd74 	bl	d968 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     e80:	b002      	add	sp, #8
     e82:	bd10      	pop	{r4, pc}
     e84:	0000f308 	.word	0x0000f308
     e88:	1fff878c 	.word	0x1fff878c
     e8c:	1fff8783 	.word	0x1fff8783
     e90:	0000f31c 	.word	0x0000f31c
     e94:	1fff874e 	.word	0x1fff874e
     e98:	0000f330 	.word	0x0000f330
     e9c:	1fff8722 	.word	0x1fff8722
     ea0:	0000f348 	.word	0x0000f348
     ea4:	1fff8720 	.word	0x1fff8720
     ea8:	0000f35c 	.word	0x0000f35c
     eac:	1fff8cac 	.word	0x1fff8cac
     eb0:	0000f374 	.word	0x0000f374
     eb4:	1fff961a 	.word	0x1fff961a
     eb8:	0000f384 	.word	0x0000f384
     ebc:	1fff9575 	.word	0x1fff9575
     ec0:	0000f388 	.word	0x0000f388
     ec4:	0000f38c 	.word	0x0000f38c
     ec8:	1fffb184 	.word	0x1fffb184

00000ecc <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ecc:	491e      	ldr	r1, [pc, #120]	; (f48 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     ece:	481f      	ldr	r0, [pc, #124]	; (f4c <begin_transition()+0x80>)
     ed0:	880b      	ldrh	r3, [r1, #0]
     ed2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     ed6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     eda:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ede:	3319      	adds	r3, #25
     ee0:	b29b      	uxth	r3, r3
     ee2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     ee6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     eea:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     eee:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ef2:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     ef4:	b2db      	uxtb	r3, r3
     ef6:	b292      	uxth	r2, r2
     ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     efc:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     efe:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f00:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f04:	4e12      	ldr	r6, [pc, #72]	; (f50 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f06:	4d13      	ldr	r5, [pc, #76]	; (f54 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f08:	5cf3      	ldrb	r3, [r6, r3]
     f0a:	4c13      	ldr	r4, [pc, #76]	; (f58 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f0c:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     f0e:	b2ff      	uxtb	r7, r7
     f10:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     f14:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     f16:	123f      	asrs	r7, r7, #8
     f18:	3703      	adds	r7, #3
	switch (transition_type) {
     f1a:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     f1c:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f1e:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     f20:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     f22:	d00c      	beq.n	f3e <begin_transition()+0x72>
     f24:	d306      	bcc.n	f34 <begin_transition()+0x68>
     f26:	2b02      	cmp	r3, #2
     f28:	d102      	bne.n	f30 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     f2a:	4b0c      	ldr	r3, [pc, #48]	; (f5c <begin_transition()+0x90>)
     f2c:	2200      	movs	r2, #0
     f2e:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     f30:	bcf0      	pop	{r4, r5, r6, r7}
     f32:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     f34:	4b0a      	ldr	r3, [pc, #40]	; (f60 <begin_transition()+0x94>)
     f36:	2200      	movs	r2, #0
     f38:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     f3a:	bcf0      	pop	{r4, r5, r6, r7}
     f3c:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     f3e:	4b07      	ldr	r3, [pc, #28]	; (f5c <begin_transition()+0x90>)
     f40:	224a      	movs	r2, #74	; 0x4a
     f42:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     f44:	bcf0      	pop	{r4, r5, r6, r7}
     f46:	4770      	bx	lr
     f48:	1fff8784 	.word	0x1fff8784
     f4c:	1fff9518 	.word	0x1fff9518
     f50:	1fff8724 	.word	0x1fff8724
     f54:	1fff9e7d 	.word	0x1fff9e7d
     f58:	1fff952c 	.word	0x1fff952c
     f5c:	1fff9554 	.word	0x1fff9554
     f60:	1fff8cae 	.word	0x1fff8cae

00000f64 <LEDStruct::operator=(LEDStruct const&)>:
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f66:	1cca      	adds	r2, r1, #3
     f68:	4604      	mov	r4, r0
     f6a:	1cc3      	adds	r3, r0, #3
     f6c:	460d      	mov	r5, r1
     f6e:	f200 10c5 	addw	r0, r0, #453	; 0x1c5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f72:	f812 1c03 	ldrb.w	r1, [r2, #-3]
     f76:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
     f7a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
     f7e:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
     f82:	f812 1c01 	ldrb.w	r1, [r2, #-1]
     f86:	f803 1c01 	strb.w	r1, [r3, #-1]
     f8a:	3303      	adds	r3, #3
     f8c:	4298      	cmp	r0, r3
     f8e:	f102 0203 	add.w	r2, r2, #3
     f92:	d1ee      	bne.n	f72 <LEDStruct::operator=(LEDStruct const&)+0xe>
     f94:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
     f98:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
     f9c:	f895 31c3 	ldrb.w	r3, [r5, #451]	; 0x1c3
     fa0:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
     fa4:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
     fa8:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
     fac:	f895 11c5 	ldrb.w	r1, [r5, #453]	; 0x1c5
     fb0:	f895 21c6 	ldrb.w	r2, [r5, #454]	; 0x1c6
     fb4:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
     fb8:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
     fbc:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
     fc0:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     fc4:	2230      	movs	r2, #48	; 0x30
     fc6:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
     fca:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
     fce:	f00d ffa3 	bl	ef18 <memmove>
     fd2:	2230      	movs	r2, #48	; 0x30
     fd4:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
     fd8:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
     fdc:	f00d ff9c 	bl	ef18 <memmove>
     fe0:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
     fe4:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
     fe8:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
     fec:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
     ff0:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
     ff4:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
     ff8:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     ffc:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
    1000:	f895 122c 	ldrb.w	r1, [r5, #556]	; 0x22c
    1004:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    1008:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    100c:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    1010:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    1014:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
    1018:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    101c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    1020:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    1024:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    1028:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    102c:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
    1030:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
    1034:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    1038:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    103c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    1040:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
    1044:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
    1048:	f895 1234 	ldrb.w	r1, [r5, #564]	; 0x234
    104c:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    1050:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    1054:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    1058:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    105c:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    1060:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
    1064:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    1068:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
    106c:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    1070:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
    1074:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    1078:	f205 223e 	addw	r2, r5, #574	; 0x23e
    107c:	f204 233e 	addw	r3, r4, #574	; 0x23e
    1080:	f204 207a 	addw	r0, r4, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1084:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    1088:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    108c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    1090:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1094:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    1098:	f803 1c01 	strb.w	r1, [r3, #-1]
    109c:	3303      	adds	r3, #3
    109e:	4298      	cmp	r0, r3
    10a0:	f102 0203 	add.w	r2, r2, #3
    10a4:	d1ee      	bne.n	1084 <LEDStruct::operator=(LEDStruct const&)+0x120>
    10a6:	f895 3277 	ldrb.w	r3, [r5, #631]	; 0x277
    10aa:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
    10ae:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
    10b2:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    10b6:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
    10ba:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    10be:	f895 327a 	ldrb.w	r3, [r5, #634]	; 0x27a
    10c2:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    10c6:	f895 327b 	ldrb.w	r3, [r5, #635]	; 0x27b
    10ca:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    10ce:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    10d2:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    10d6:	f895 327d 	ldrb.w	r3, [r5, #637]	; 0x27d
    10da:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    10de:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
    10e2:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    10e6:	f895 327f 	ldrb.w	r3, [r5, #639]	; 0x27f
    10ea:	f884 327f 	strb.w	r3, [r4, #639]	; 0x27f
    10ee:	f205 227f 	addw	r2, r5, #639	; 0x27f
    10f2:	f504 7320 	add.w	r3, r4, #640	; 0x280
    10f6:	f204 20cb 	addw	r0, r4, #715	; 0x2cb
    10fa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    10fe:	f803 1b01 	strb.w	r1, [r3], #1
    1102:	4283      	cmp	r3, r0
    1104:	d1f9      	bne.n	10fa <LEDStruct::operator=(LEDStruct const&)+0x196>
    1106:	f205 22ca 	addw	r2, r5, #714	; 0x2ca
    110a:	f204 3016 	addw	r0, r4, #790	; 0x316
    110e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1112:	f803 1b01 	strb.w	r1, [r3], #1
    1116:	4283      	cmp	r3, r0
    1118:	d1f9      	bne.n	110e <LEDStruct::operator=(LEDStruct const&)+0x1aa>
    111a:	f895 3316 	ldrb.w	r3, [r5, #790]	; 0x316
    111e:	f884 3316 	strb.w	r3, [r4, #790]	; 0x316
    1122:	f895 3317 	ldrb.w	r3, [r5, #791]	; 0x317
    1126:	f884 3317 	strb.w	r3, [r4, #791]	; 0x317
    112a:	f895 2318 	ldrb.w	r2, [r5, #792]	; 0x318
    112e:	f895 3319 	ldrb.w	r3, [r5, #793]	; 0x319
    1132:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
    1136:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
    113a:	f895 331a 	ldrb.w	r3, [r5, #794]	; 0x31a
    113e:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    1142:	f895 331b 	ldrb.w	r3, [r5, #795]	; 0x31b
    1146:	f884 331b 	strb.w	r3, [r4, #795]	; 0x31b
    114a:	f8b5 131c 	ldrh.w	r1, [r5, #796]	; 0x31c
    114e:	f8b5 231e 	ldrh.w	r2, [r5, #798]	; 0x31e
    1152:	f8b5 3320 	ldrh.w	r3, [r5, #800]	; 0x320
    1156:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
    115a:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    115e:	f8a4 231e 	strh.w	r2, [r4, #798]	; 0x31e
    1162:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    1166:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
    116a:	f895 3323 	ldrb.w	r3, [r5, #803]	; 0x323
    116e:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
    1172:	f895 3324 	ldrb.w	r3, [r5, #804]	; 0x324
    1176:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
    117a:	f895 3325 	ldrb.w	r3, [r5, #805]	; 0x325
    117e:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
    1182:	f895 3326 	ldrb.w	r3, [r5, #806]	; 0x326
    1186:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
    118a:	f895 3327 	ldrb.w	r3, [r5, #807]	; 0x327
    118e:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
    1192:	f8b5 3328 	ldrh.w	r3, [r5, #808]	; 0x328
    1196:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    119a:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
    119e:	f8b5 132c 	ldrh.w	r1, [r5, #812]	; 0x32c
    11a2:	f8b5 232e 	ldrh.w	r2, [r5, #814]	; 0x32e
    11a6:	f8b5 3330 	ldrh.w	r3, [r5, #816]	; 0x330
    11aa:	f8b5 7332 	ldrh.w	r7, [r5, #818]	; 0x332
    11ae:	f8b5 6334 	ldrh.w	r6, [r5, #820]	; 0x334
    11b2:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
    11b6:	f8b5 0336 	ldrh.w	r0, [r5, #822]	; 0x336
    11ba:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c
    11be:	f8b5 1338 	ldrh.w	r1, [r5, #824]	; 0x338
    11c2:	f8a4 232e 	strh.w	r2, [r4, #814]	; 0x32e
    11c6:	f8b5 233a 	ldrh.w	r2, [r5, #826]	; 0x33a
    11ca:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    11ce:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    11d2:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    11d6:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
    11da:	f8a4 233a 	strh.w	r2, [r4, #826]	; 0x33a
    11de:	f8a4 7332 	strh.w	r7, [r4, #818]	; 0x332
    11e2:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
    11e6:	f8a4 0336 	strh.w	r0, [r4, #822]	; 0x336
    11ea:	f895 333e 	ldrb.w	r3, [r5, #830]	; 0x33e
    11ee:	f884 333e 	strb.w	r3, [r4, #830]	; 0x33e
    11f2:	f895 333f 	ldrb.w	r3, [r5, #831]	; 0x33f
    11f6:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
    11fa:	f895 3340 	ldrb.w	r3, [r5, #832]	; 0x340
    11fe:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
    1202:	f895 3341 	ldrb.w	r3, [r5, #833]	; 0x341
    1206:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
    120a:	f895 3342 	ldrb.w	r3, [r5, #834]	; 0x342
    120e:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    1212:	f895 3343 	ldrb.w	r3, [r5, #835]	; 0x343
    1216:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
    121a:	f895 3344 	ldrb.w	r3, [r5, #836]	; 0x344
    121e:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
    1222:	f895 3345 	ldrb.w	r3, [r5, #837]	; 0x345
    1226:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    122a:	f895 3346 	ldrb.w	r3, [r5, #838]	; 0x346
    122e:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    1232:	f895 3347 	ldrb.w	r3, [r5, #839]	; 0x347
    1236:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
    123a:	f895 3348 	ldrb.w	r3, [r5, #840]	; 0x348
    123e:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    1242:	f895 3349 	ldrb.w	r3, [r5, #841]	; 0x349
    1246:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
    124a:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    124e:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    1252:	f895 334b 	ldrb.w	r3, [r5, #843]	; 0x34b
    1256:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    125a:	f895 334c 	ldrb.w	r3, [r5, #844]	; 0x34c
    125e:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    1262:	f895 334d 	ldrb.w	r3, [r5, #845]	; 0x34d
    1266:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    126a:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    126e:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    1272:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    1276:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    127a:	f895 3350 	ldrb.w	r3, [r5, #848]	; 0x350
    127e:	f884 3350 	strb.w	r3, [r4, #848]	; 0x350
    1282:	f895 3351 	ldrb.w	r3, [r5, #849]	; 0x351
    1286:	f884 3351 	strb.w	r3, [r4, #849]	; 0x351
    128a:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    128e:	f884 3352 	strb.w	r3, [r4, #850]	; 0x352
    1292:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    1296:	f884 3353 	strb.w	r3, [r4, #851]	; 0x353
    129a:	f895 1354 	ldrb.w	r1, [r5, #852]	; 0x354
    129e:	f8d5 2358 	ldr.w	r2, [r5, #856]	; 0x358
    12a2:	f895 335c 	ldrb.w	r3, [r5, #860]	; 0x35c
    12a6:	f884 335c 	strb.w	r3, [r4, #860]	; 0x35c
    12aa:	f884 1354 	strb.w	r1, [r4, #852]	; 0x354
    12ae:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
    12b2:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
    12b6:	f884 335d 	strb.w	r3, [r4, #861]	; 0x35d
    12ba:	f504 7258 	add.w	r2, r4, #864	; 0x360
    12be:	f505 7157 	add.w	r1, r5, #860	; 0x35c
    12c2:	f504 638a 	add.w	r3, r4, #1104	; 0x450
    12c6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    12ca:	f842 0b04 	str.w	r0, [r2], #4
    12ce:	4293      	cmp	r3, r2
    12d0:	d1f9      	bne.n	12c6 <LEDStruct::operator=(LEDStruct const&)+0x362>
    12d2:	f205 424c 	addw	r2, r5, #1100	; 0x44c
    12d6:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
    12da:	f852 1f04 	ldr.w	r1, [r2, #4]!
    12de:	f843 1b04 	str.w	r1, [r3], #4
    12e2:	4283      	cmp	r3, r0
    12e4:	d1f9      	bne.n	12da <LEDStruct::operator=(LEDStruct const&)+0x376>
    12e6:	f205 523f 	addw	r2, r5, #1343	; 0x53f
    12ea:	f204 507c 	addw	r0, r4, #1404	; 0x57c
    12ee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    12f2:	f803 1b01 	strb.w	r1, [r3], #1
    12f6:	4283      	cmp	r3, r0
    12f8:	d1f9      	bne.n	12ee <LEDStruct::operator=(LEDStruct const&)+0x38a>
    12fa:	f505 61af 	add.w	r1, r5, #1400	; 0x578
    12fe:	f204 626c 	addw	r2, r4, #1644	; 0x66c
    1302:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1306:	f843 0b04 	str.w	r0, [r3], #4
    130a:	429a      	cmp	r2, r3
    130c:	d1f9      	bne.n	1302 <LEDStruct::operator=(LEDStruct const&)+0x39e>
    130e:	4613      	mov	r3, r2
    1310:	f204 705c 	addw	r0, r4, #1884	; 0x75c
    1314:	f505 62cd 	add.w	r2, r5, #1640	; 0x668
    1318:	f852 1f04 	ldr.w	r1, [r2, #4]!
    131c:	f843 1b04 	str.w	r1, [r3], #4
    1320:	4298      	cmp	r0, r3
    1322:	d1f9      	bne.n	1318 <LEDStruct::operator=(LEDStruct const&)+0x3b4>
    1324:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    1328:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
    132c:	f895 375d 	ldrb.w	r3, [r5, #1885]	; 0x75d
    1330:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    1334:	f895 375e 	ldrb.w	r3, [r5, #1886]	; 0x75e
    1338:	f884 375e 	strb.w	r3, [r4, #1886]	; 0x75e
    133c:	f8b5 1760 	ldrh.w	r1, [r5, #1888]	; 0x760
    1340:	f8b5 2762 	ldrh.w	r2, [r5, #1890]	; 0x762
    1344:	f8b5 3764 	ldrh.w	r3, [r5, #1892]	; 0x764
    1348:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764
    134c:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
    1350:	f8a4 2762 	strh.w	r2, [r4, #1890]	; 0x762
    1354:	f895 3766 	ldrb.w	r3, [r5, #1894]	; 0x766
    1358:	f884 3766 	strb.w	r3, [r4, #1894]	; 0x766
    135c:	f895 3767 	ldrb.w	r3, [r5, #1895]	; 0x767
    1360:	f884 3767 	strb.w	r3, [r4, #1895]	; 0x767
    1364:	f895 3768 	ldrb.w	r3, [r5, #1896]	; 0x768
    1368:	f884 3768 	strb.w	r3, [r4, #1896]	; 0x768
    136c:	f895 3769 	ldrb.w	r3, [r5, #1897]	; 0x769
    1370:	f884 3769 	strb.w	r3, [r4, #1897]	; 0x769
    1374:	f895 376a 	ldrb.w	r3, [r5, #1898]	; 0x76a
    1378:	f884 376a 	strb.w	r3, [r4, #1898]	; 0x76a
    137c:	f505 61ed 	add.w	r1, r5, #1896	; 0x768
    1380:	f204 736c 	addw	r3, r4, #1900	; 0x76c
    1384:	f204 728c 	addw	r2, r4, #1932	; 0x78c
    1388:	f851 0f04 	ldr.w	r0, [r1, #4]!
    138c:	f843 0b04 	str.w	r0, [r3], #4
    1390:	429a      	cmp	r2, r3
    1392:	d1f9      	bne.n	1388 <LEDStruct::operator=(LEDStruct const&)+0x424>
    1394:	f505 61f1 	add.w	r1, r5, #1928	; 0x788
    1398:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
    139c:	f851 0f04 	ldr.w	r0, [r1, #4]!
    13a0:	f842 0b04 	str.w	r0, [r2], #4
    13a4:	4293      	cmp	r3, r2
    13a6:	d1f9      	bne.n	139c <LEDStruct::operator=(LEDStruct const&)+0x438>
    13a8:	f505 62f5 	add.w	r2, r5, #1960	; 0x7a8
    13ac:	f204 70cc 	addw	r0, r4, #1996	; 0x7cc
    13b0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13b4:	f843 1b04 	str.w	r1, [r3], #4
    13b8:	4283      	cmp	r3, r0
    13ba:	d1f9      	bne.n	13b0 <LEDStruct::operator=(LEDStruct const&)+0x44c>
    13bc:	f505 62f9 	add.w	r2, r5, #1992	; 0x7c8
    13c0:	f204 70ec 	addw	r0, r4, #2028	; 0x7ec
    13c4:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13c8:	f843 1b04 	str.w	r1, [r3], #4
    13cc:	4283      	cmp	r3, r0
    13ce:	d1f9      	bne.n	13c4 <LEDStruct::operator=(LEDStruct const&)+0x460>
    13d0:	f505 62fd 	add.w	r2, r5, #2024	; 0x7e8
    13d4:	f604 000c 	addw	r0, r4, #2060	; 0x80c
    13d8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13dc:	f843 1b04 	str.w	r1, [r3], #4
    13e0:	4283      	cmp	r3, r0
    13e2:	d1f9      	bne.n	13d8 <LEDStruct::operator=(LEDStruct const&)+0x474>
    13e4:	f605 0208 	addw	r2, r5, #2056	; 0x808
    13e8:	f604 002c 	addw	r0, r4, #2092	; 0x82c
    13ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13f0:	f843 1b04 	str.w	r1, [r3], #4
    13f4:	4283      	cmp	r3, r0
    13f6:	d1f9      	bne.n	13ec <LEDStruct::operator=(LEDStruct const&)+0x488>
    13f8:	f8b5 382c 	ldrh.w	r3, [r5, #2092]	; 0x82c
    13fc:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    1400:	f895 382e 	ldrb.w	r3, [r5, #2094]	; 0x82e
    1404:	f884 382e 	strb.w	r3, [r4, #2094]	; 0x82e
    1408:	f8b5 1830 	ldrh.w	r1, [r5, #2096]	; 0x830
    140c:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    1410:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
    1414:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    1418:	f8a4 1830 	strh.w	r1, [r4, #2096]	; 0x830
    141c:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    1420:	f895 383c 	ldrb.w	r3, [r5, #2108]	; 0x83c
    1424:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    1428:	f895 383d 	ldrb.w	r3, [r5, #2109]	; 0x83d
    142c:	f884 383d 	strb.w	r3, [r4, #2109]	; 0x83d
    1430:	f895 383e 	ldrb.w	r3, [r5, #2110]	; 0x83e
    1434:	f884 383e 	strb.w	r3, [r4, #2110]	; 0x83e
    1438:	f895 383f 	ldrb.w	r3, [r5, #2111]	; 0x83f
    143c:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
    1440:	f895 3840 	ldrb.w	r3, [r5, #2112]	; 0x840
    1444:	f884 3840 	strb.w	r3, [r4, #2112]	; 0x840
    1448:	f895 0841 	ldrb.w	r0, [r5, #2113]	; 0x841
    144c:	f8d5 3848 	ldr.w	r3, [r5, #2120]	; 0x848
    1450:	f895 1842 	ldrb.w	r1, [r5, #2114]	; 0x842
    1454:	f8d5 2844 	ldr.w	r2, [r5, #2116]	; 0x844
    1458:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    145c:	f884 0841 	strb.w	r0, [r4, #2113]	; 0x841
    1460:	f884 1842 	strb.w	r1, [r4, #2114]	; 0x842
    1464:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
    1468:	f895 384c 	ldrb.w	r3, [r5, #2124]	; 0x84c
    146c:	f884 384c 	strb.w	r3, [r4, #2124]	; 0x84c
    1470:	f895 384d 	ldrb.w	r3, [r5, #2125]	; 0x84d
    1474:	f884 384d 	strb.w	r3, [r4, #2125]	; 0x84d
    1478:	f895 384e 	ldrb.w	r3, [r5, #2126]	; 0x84e
    147c:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e
    1480:	f895 384f 	ldrb.w	r3, [r5, #2127]	; 0x84f
    1484:	f884 384f 	strb.w	r3, [r4, #2127]	; 0x84f
    1488:	f895 3850 	ldrb.w	r3, [r5, #2128]	; 0x850
    148c:	f884 3850 	strb.w	r3, [r4, #2128]	; 0x850
    1490:	f895 3851 	ldrb.w	r3, [r5, #2129]	; 0x851
    1494:	f884 3851 	strb.w	r3, [r4, #2129]	; 0x851
    1498:	f895 3852 	ldrb.w	r3, [r5, #2130]	; 0x852
    149c:	f884 3852 	strb.w	r3, [r4, #2130]	; 0x852
    14a0:	f895 3853 	ldrb.w	r3, [r5, #2131]	; 0x853
    14a4:	f884 3853 	strb.w	r3, [r4, #2131]	; 0x853
    14a8:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
    14ac:	f884 3854 	strb.w	r3, [r4, #2132]	; 0x854
    14b0:	f895 3855 	ldrb.w	r3, [r5, #2133]	; 0x855
    14b4:	f884 3855 	strb.w	r3, [r4, #2133]	; 0x855
    14b8:	f895 3856 	ldrb.w	r3, [r5, #2134]	; 0x856
    14bc:	f884 3856 	strb.w	r3, [r4, #2134]	; 0x856
    14c0:	f895 3857 	ldrb.w	r3, [r5, #2135]	; 0x857
    14c4:	f884 3857 	strb.w	r3, [r4, #2135]	; 0x857
    14c8:	4620      	mov	r0, r4
    14ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000014cc <finish_transition()>:

void finish_transition() {
    14cc:	b530      	push	{r4, r5, lr}
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14ce:	4d1d      	ldr	r5, [pc, #116]	; (1544 <finish_transition()+0x78>)
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    14d0:	4c1d      	ldr	r4, [pc, #116]	; (1548 <finish_transition()+0x7c>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    14d2:	b083      	sub	sp, #12
	in_transition = 0;
    14d4:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14d6:	4628      	mov	r0, r5
    14d8:	aa01      	add	r2, sp, #4
    14da:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    14dc:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14de:	f88d 3004 	strb.w	r3, [sp, #4]
    14e2:	f88d 3005 	strb.w	r3, [sp, #5]
    14e6:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14ea:	f009 ff65 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds = next_leds;
    14ee:	4628      	mov	r0, r5
    14f0:	4916      	ldr	r1, [pc, #88]	; (154c <finish_transition()+0x80>)
    14f2:	f7ff fd37 	bl	f64 <LEDStruct::operator=(LEDStruct const&)>
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    14f6:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    14fa:	b13b      	cbz	r3, 150c <finish_transition()+0x40>
    14fc:	4c14      	ldr	r4, [pc, #80]	; (1550 <finish_transition()+0x84>)
    14fe:	4915      	ldr	r1, [pc, #84]	; (1554 <finish_transition()+0x88>)
    1500:	4620      	mov	r0, r4
    1502:	f7ff fd2f 	bl	f64 <LEDStruct::operator=(LEDStruct const&)>
    1506:	2302      	movs	r3, #2
    1508:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    150c:	2400      	movs	r4, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    150e:	aa01      	add	r2, sp, #4
    1510:	2196      	movs	r1, #150	; 0x96
    1512:	480e      	ldr	r0, [pc, #56]	; (154c <finish_transition()+0x80>)
    1514:	f88d 4004 	strb.w	r4, [sp, #4]
    1518:	f88d 4005 	strb.w	r4, [sp, #5]
    151c:	f88d 4006 	strb.w	r4, [sp, #6]
    1520:	f009 ff4a 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1524:	aa01      	add	r2, sp, #4
    1526:	2196      	movs	r1, #150	; 0x96
    1528:	480a      	ldr	r0, [pc, #40]	; (1554 <finish_transition()+0x88>)
    152a:	f88d 4004 	strb.w	r4, [sp, #4]
    152e:	f88d 4005 	strb.w	r4, [sp, #5]
    1532:	f88d 4006 	strb.w	r4, [sp, #6]
    1536:	f009 ff3f 	bl	b3b8 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    153a:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
}
    153e:	b003      	add	sp, #12
    1540:	bd30      	pop	{r4, r5, pc}
    1542:	bf00      	nop
    1544:	1fffa6ec 	.word	0x1fffa6ec
    1548:	1fff9518 	.word	0x1fff9518
    154c:	1fff8cb0 	.word	0x1fff8cb0
    1550:	1fff9620 	.word	0x1fff9620
    1554:	1fff9e90 	.word	0x1fff9e90

00001558 <blending()>:

void blending() {
    1558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    155c:	4d2f      	ldr	r5, [pc, #188]	; (161c <blending()+0xc4>)
    155e:	4e30      	ldr	r6, [pc, #192]	; (1620 <blending()+0xc8>)
    1560:	4c30      	ldr	r4, [pc, #192]	; (1624 <blending()+0xcc>)
    1562:	4f31      	ldr	r7, [pc, #196]	; (1628 <blending()+0xd0>)
    1564:	b085      	sub	sp, #20
    1566:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    156a:	4632      	mov	r2, r6
    156c:	4629      	mov	r1, r5
    156e:	783b      	ldrb	r3, [r7, #0]
    1570:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1628 <blending()+0xd0>
    1574:	a803      	add	r0, sp, #12
    1576:	3503      	adds	r5, #3
    1578:	f00a f810 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    157c:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1580:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1584:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1588:	7021      	strb	r1, [r4, #0]
    158a:	4545      	cmp	r5, r8
        g = rhs.g;
    158c:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    158e:	70a3      	strb	r3, [r4, #2]
    1590:	f106 0603 	add.w	r6, r6, #3
    1594:	f104 0403 	add.w	r4, r4, #3
    1598:	d1e7      	bne.n	156a <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    159a:	4e24      	ldr	r6, [pc, #144]	; (162c <blending()+0xd4>)
    159c:	6833      	ldr	r3, [r6, #0]
    159e:	07db      	lsls	r3, r3, #31
    15a0:	d51f      	bpl.n	15e2 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15a2:	4d23      	ldr	r5, [pc, #140]	; (1630 <blending()+0xd8>)
    15a4:	4c23      	ldr	r4, [pc, #140]	; (1634 <blending()+0xdc>)
    15a6:	682b      	ldr	r3, [r5, #0]
    15a8:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15aa:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15ae:	9b03      	ldr	r3, [sp, #12]
    15b0:	1a5b      	subs	r3, r3, r1
    15b2:	4293      	cmp	r3, r2
    15b4:	d30c      	bcc.n	15d0 <blending()+0x78>
    15b6:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15b8:	682a      	ldr	r2, [r5, #0]
    15ba:	9202      	str	r2, [sp, #8]
    15bc:	3301      	adds	r3, #1
	return ret;
    15be:	9a02      	ldr	r2, [sp, #8]
    15c0:	6022      	str	r2, [r4, #0]
    15c2:	b2db      	uxtb	r3, r3
    15c4:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    15c6:	2bff      	cmp	r3, #255	; 0xff
    15c8:	d006      	beq.n	15d8 <blending()+0x80>
		finish_transition();
	}
}
    15ca:	b005      	add	sp, #20
    15cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    15d0:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    15d4:	2bff      	cmp	r3, #255	; 0xff
    15d6:	d1f8      	bne.n	15ca <blending()+0x72>
		finish_transition();
    15d8:	f7ff ff78 	bl	14cc <finish_transition()>
	}
}
    15dc:	b005      	add	sp, #20
    15de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15e2:	4630      	mov	r0, r6
    15e4:	f00a ff24 	bl	c430 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e8:	4d11      	ldr	r5, [pc, #68]	; (1630 <blending()+0xd8>)
    15ea:	b950      	cbnz	r0, 1602 <blending()+0xaa>
    15ec:	4c11      	ldr	r4, [pc, #68]	; (1634 <blending()+0xdc>)
    15ee:	682b      	ldr	r3, [r5, #0]
    15f0:	9303      	str	r3, [sp, #12]
    15f2:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15f6:	9b03      	ldr	r3, [sp, #12]
    15f8:	1a5b      	subs	r3, r3, r1
    15fa:	4293      	cmp	r3, r2
    15fc:	d2db      	bcs.n	15b6 <blending()+0x5e>
    15fe:	783b      	ldrb	r3, [r7, #0]
    1600:	e7e1      	b.n	15c6 <blending()+0x6e>
    1602:	4b0d      	ldr	r3, [pc, #52]	; (1638 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1604:	682a      	ldr	r2, [r5, #0]
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	4c0a      	ldr	r4, [pc, #40]	; (1634 <blending()+0xdc>)
    160a:	9201      	str	r2, [sp, #4]
	return ret;
    160c:	9a01      	ldr	r2, [sp, #4]
    160e:	6022      	str	r2, [r4, #0]
    1610:	009b      	lsls	r3, r3, #2
    1612:	4630      	mov	r0, r6
    1614:	6063      	str	r3, [r4, #4]
    1616:	f00a ff11 	bl	c43c <__cxa_guard_release>
    161a:	e7e8      	b.n	15ee <blending()+0x96>
    161c:	1fffa6ec 	.word	0x1fffa6ec
    1620:	1fff8cb0 	.word	0x1fff8cb0
    1624:	1fffaf44 	.word	0x1fffaf44
    1628:	1fff8cae 	.word	0x1fff8cae
    162c:	1fff960c 	.word	0x1fff960c
    1630:	1fffb184 	.word	0x1fffb184
    1634:	1fff951c 	.word	0x1fff951c
    1638:	1fff9e7d 	.word	0x1fff9e7d

0000163c <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1640:	4e94      	ldr	r6, [pc, #592]	; (1894 <wipedown()+0x258>)
    1642:	f896 c000 	ldrb.w	ip, [r6]
    1646:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    164a:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    164c:	2b00      	cmp	r3, #0
    164e:	f000 811e 	beq.w	188e <wipedown()+0x252>
    1652:	f103 3bff 	add.w	fp, r3, #4294967295
    1656:	fa1f fb8b 	uxth.w	fp, fp
    165a:	488f      	ldr	r0, [pc, #572]	; (1898 <wipedown()+0x25c>)
    165c:	498f      	ldr	r1, [pc, #572]	; (189c <wipedown()+0x260>)
    165e:	f10b 0b01 	add.w	fp, fp, #1
    1662:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1666:	4483      	add	fp, r0
    1668:	4602      	mov	r2, r0
    166a:	460d      	mov	r5, r1
    166c:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    166e:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    1670:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1674:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1678:	7027      	strb	r7, [r4, #0]
    167a:	3203      	adds	r2, #3
    167c:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1680:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    1684:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1688:	f884 a001 	strb.w	sl, [r4, #1]
    168c:	455a      	cmp	r2, fp
        b = rhs.b;
    168e:	f884 9002 	strb.w	r9, [r4, #2]
    1692:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1696:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    169a:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    169e:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    16a2:	f104 0403 	add.w	r4, r4, #3
    16a6:	f1a1 0103 	sub.w	r1, r1, #3
    16aa:	d1e0      	bne.n	166e <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16ac:	2b4a      	cmp	r3, #74	; 0x4a
    16ae:	d827      	bhi.n	1700 <wipedown()+0xc4>
    16b0:	487b      	ldr	r0, [pc, #492]	; (18a0 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    16b2:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16be:	eb00 0801 	add.w	r8, r0, r1
    16c2:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16c6:	3301      	adds	r3, #1
    16c8:	186f      	adds	r7, r5, r1
    16ca:	f810 b001 	ldrb.w	fp, [r0, r1]
    16ce:	f805 b001 	strb.w	fp, [r5, r1]
    16d2:	18ac      	adds	r4, r5, r2
    16d4:	b29b      	uxth	r3, r3
        g = rhs.g;
    16d6:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    16da:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16de:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e2:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    16e6:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16ea:	f887 a001 	strb.w	sl, [r7, #1]
    16ee:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    16f0:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16f4:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    16f8:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    16fc:	70a1      	strb	r1, [r4, #2]
    16fe:	d1d8      	bne.n	16b2 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1700:	f10c 3aff 	add.w	sl, ip, #4294967295
    1704:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1708:	2480      	movs	r4, #128	; 0x80
    170a:	eb05 0b0a 	add.w	fp, r5, sl
    170e:	4659      	mov	r1, fp
    1710:	4623      	mov	r3, r4
    1712:	a803      	add	r0, sp, #12
    1714:	aa02      	add	r2, sp, #8
    1716:	2700      	movs	r7, #0
    1718:	f88d 4009 	strb.w	r4, [sp, #9]
    171c:	f88d 400a 	strb.w	r4, [sp, #10]
    1720:	f88d 7008 	strb.w	r7, [sp, #8]
    1724:	f009 ff3a 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1728:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    172c:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    1730:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1734:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1738:	f805 300a 	strb.w	r3, [r5, sl]
    173c:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    1740:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1744:	eb05 0908 	add.w	r9, r5, r8
    1748:	4649      	mov	r1, r9
    174a:	4623      	mov	r3, r4
        g = rhs.g;
    174c:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    1750:	f88b 0002 	strb.w	r0, [fp, #2]
    1754:	aa02      	add	r2, sp, #8
    1756:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1758:	f88d 7008 	strb.w	r7, [sp, #8]
    175c:	f88d 4009 	strb.w	r4, [sp, #9]
    1760:	f88d 400a 	strb.w	r4, [sp, #10]
    1764:	f009 ff1a 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    1768:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    176a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    176e:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1772:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    1776:	f89d 000d 	ldrb.w	r0, [sp, #13]
    177a:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    177e:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    1782:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1786:	f89d 300e 	ldrb.w	r3, [sp, #14]
    178a:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    178e:	eb05 0e0c 	add.w	lr, r5, ip
    1792:	1868      	adds	r0, r5, r1
    1794:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    1796:	2a49      	cmp	r2, #73	; 0x49
    1798:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    179c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 189c <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    17a0:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    17a4:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17a8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1894 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17ac:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    17ae:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    17b0:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    17b2:	d92e      	bls.n	1812 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    17b4:	4f3b      	ldr	r7, [pc, #236]	; (18a4 <wipedown()+0x268>)
    17b6:	683b      	ldr	r3, [r7, #0]
    17b8:	07db      	lsls	r3, r3, #31
    17ba:	d517      	bpl.n	17ec <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17bc:	4d3a      	ldr	r5, [pc, #232]	; (18a8 <wipedown()+0x26c>)
    17be:	4c3b      	ldr	r4, [pc, #236]	; (18ac <wipedown()+0x270>)
    17c0:	682b      	ldr	r3, [r5, #0]
    17c2:	9303      	str	r3, [sp, #12]
    17c4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    17c8:	9b03      	ldr	r3, [sp, #12]
    17ca:	1a5b      	subs	r3, r3, r1
    17cc:	4293      	cmp	r3, r2
    17ce:	7833      	ldrb	r3, [r6, #0]
    17d0:	d306      	bcc.n	17e0 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17d2:	682a      	ldr	r2, [r5, #0]
    17d4:	9202      	str	r2, [sp, #8]
    17d6:	3b01      	subs	r3, #1
	return ret;
    17d8:	9a02      	ldr	r2, [sp, #8]
    17da:	6022      	str	r2, [r4, #0]
    17dc:	b2db      	uxtb	r3, r3
    17de:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    17e0:	b90b      	cbnz	r3, 17e6 <wipedown()+0x1aa>
		finish_transition();
    17e2:	f7ff fe73 	bl	14cc <finish_transition()>
	}
}
    17e6:	b005      	add	sp, #20
    17e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    17ec:	4638      	mov	r0, r7
    17ee:	f00a fe1f 	bl	c430 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17f2:	4d2d      	ldr	r5, [pc, #180]	; (18a8 <wipedown()+0x26c>)
    17f4:	2800      	cmp	r0, #0
    17f6:	d0e2      	beq.n	17be <wipedown()+0x182>
    17f8:	4b2d      	ldr	r3, [pc, #180]	; (18b0 <wipedown()+0x274>)
    17fa:	682a      	ldr	r2, [r5, #0]
    17fc:	781b      	ldrb	r3, [r3, #0]
    17fe:	4c2b      	ldr	r4, [pc, #172]	; (18ac <wipedown()+0x270>)
    1800:	9201      	str	r2, [sp, #4]
	return ret;
    1802:	9a01      	ldr	r2, [sp, #4]
    1804:	6022      	str	r2, [r4, #0]
    1806:	009b      	lsls	r3, r3, #2
    1808:	4638      	mov	r0, r7
    180a:	6063      	str	r3, [r4, #4]
    180c:	f00a fe16 	bl	c43c <__cxa_guard_release>
    1810:	e7d6      	b.n	17c0 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1812:	1c55      	adds	r5, r2, #1
    1814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1818:	eb08 0a05 	add.w	sl, r8, r5
    181c:	4651      	mov	r1, sl
    181e:	4623      	mov	r3, r4
    1820:	aa02      	add	r2, sp, #8
    1822:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1824:	f88d 7008 	strb.w	r7, [sp, #8]
    1828:	f88d 4009 	strb.w	r4, [sp, #9]
    182c:	f88d 400a 	strb.w	r4, [sp, #10]
    1830:	f009 feb4 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1834:	f899 3000 	ldrb.w	r3, [r9]
    1838:	f88d 7008 	strb.w	r7, [sp, #8]
    183c:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    1840:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1844:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1848:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    184c:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    1850:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1854:	f808 c005 	strb.w	ip, [r8, r5]
    1858:	aa02      	add	r2, sp, #8
    185a:	4623      	mov	r3, r4
    185c:	4649      	mov	r1, r9
    185e:	a803      	add	r0, sp, #12
        g = rhs.g;
    1860:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    1864:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1868:	f88d 4009 	strb.w	r4, [sp, #9]
    186c:	f88d 400a 	strb.w	r4, [sp, #10]
    1870:	f009 fe94 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1874:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1878:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    187c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1880:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    1884:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    1888:	f889 3002 	strb.w	r3, [r9, #2]
    188c:	e792      	b.n	17b4 <wipedown()+0x178>
    188e:	4d03      	ldr	r5, [pc, #12]	; (189c <wipedown()+0x260>)
    1890:	e70e      	b.n	16b0 <wipedown()+0x74>
    1892:	bf00      	nop
    1894:	1fff9554 	.word	0x1fff9554
    1898:	1fffa6ec 	.word	0x1fffa6ec
    189c:	1fffaf44 	.word	0x1fffaf44
    18a0:	1fff8cb0 	.word	0x1fff8cb0
    18a4:	1fff9610 	.word	0x1fff9610
    18a8:	1fffb184 	.word	0x1fffb184
    18ac:	1fff9530 	.word	0x1fff9530
    18b0:	1fff9e7d 	.word	0x1fff9e7d

000018b4 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18b8:	4ba2      	ldr	r3, [pc, #648]	; (1b44 <wipeup()+0x290>)
    18ba:	781d      	ldrb	r5, [r3, #0]
    18bc:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18be:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18c0:	2b00      	cmp	r3, #0
    18c2:	f000 8130 	beq.w	1b26 <wipeup()+0x272>
    18c6:	f103 3bff 	add.w	fp, r3, #4294967295
    18ca:	fa1f fb8b 	uxth.w	fp, fp
    18ce:	489e      	ldr	r0, [pc, #632]	; (1b48 <wipeup()+0x294>)
    18d0:	499e      	ldr	r1, [pc, #632]	; (1b4c <wipeup()+0x298>)
    18d2:	f10b 0b01 	add.w	fp, fp, #1
    18d6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    18da:	4483      	add	fp, r0
    18dc:	4602      	mov	r2, r0
    18de:	460c      	mov	r4, r1
    18e0:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18e2:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    18e6:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    18ea:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18ee:	f886 e000 	strb.w	lr, [r6]
    18f2:	3203      	adds	r2, #3
    18f4:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    18f8:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    18fc:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1900:	f886 a001 	strb.w	sl, [r6, #1]
    1904:	455a      	cmp	r2, fp
        b = rhs.b;
    1906:	f886 9002 	strb.w	r9, [r6, #2]
    190a:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    190e:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1912:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    1916:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    191a:	f106 0603 	add.w	r6, r6, #3
    191e:	f1a1 0103 	sub.w	r1, r1, #3
    1922:	d1de      	bne.n	18e2 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1924:	2b4a      	cmp	r3, #74	; 0x4a
    1926:	d828      	bhi.n	197a <wipeup()+0xc6>
    1928:	4889      	ldr	r0, [pc, #548]	; (1b50 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    192a:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    192e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1932:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1936:	eb00 0801 	add.w	r8, r0, r1
    193a:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    193e:	3301      	adds	r3, #1
    1940:	eb04 0e01 	add.w	lr, r4, r1
    1944:	f810 b001 	ldrb.w	fp, [r0, r1]
    1948:	f804 b001 	strb.w	fp, [r4, r1]
    194c:	18a6      	adds	r6, r4, r2
    194e:	b29b      	uxth	r3, r3
        g = rhs.g;
    1950:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1954:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1958:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    195c:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1960:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1964:	f88e a001 	strb.w	sl, [lr, #1]
    1968:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    196a:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    196e:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    1972:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    1976:	70b1      	strb	r1, [r6, #2]
    1978:	d1d7      	bne.n	192a <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    197a:	2d00      	cmp	r5, #0
    197c:	f040 808f 	bne.w	1a9e <wipeup()+0x1ea>
    1980:	f10d 0a0c 	add.w	sl, sp, #12
    1984:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1988:	4b6e      	ldr	r3, [pc, #440]	; (1b44 <wipeup()+0x290>)
    198a:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    198c:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1990:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1994:	1c5a      	adds	r2, r3, #1
    1996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    199a:	eb04 0e03 	add.w	lr, r4, r3
    199e:	1825      	adds	r5, r4, r0
    19a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19a4:	2680      	movs	r6, #128	; 0x80
    19a6:	eb04 0902 	add.w	r9, r4, r2
    19aa:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19ac:	22ff      	movs	r2, #255	; 0xff
    19ae:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19b0:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    19b4:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    19b8:	f88e 2002 	strb.w	r2, [lr, #2]
    19bc:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19be:	5422      	strb	r2, [r4, r0]
    19c0:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    19c2:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    19c4:	70aa      	strb	r2, [r5, #2]
    19c6:	4650      	mov	r0, sl
    19c8:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19ca:	f88d 6009 	strb.w	r6, [sp, #9]
    19ce:	f88d 600a 	strb.w	r6, [sp, #10]
    19d2:	f88d 8008 	strb.w	r8, [sp, #8]
    19d6:	f009 fde1 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    19da:	4b5a      	ldr	r3, [pc, #360]	; (1b44 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    19e0:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    19e2:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19e6:	f88d 8008 	strb.w	r8, [sp, #8]
    19ea:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    19ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    19f2:	eb04 0805 	add.w	r8, r4, r5
    19f6:	4633      	mov	r3, r6
    19f8:	f88d 6009 	strb.w	r6, [sp, #9]
    19fc:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a00:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a04:	55e1      	strb	r1, [r4, r7]
    1a06:	465a      	mov	r2, fp
    1a08:	4650      	mov	r0, sl
    1a0a:	4641      	mov	r1, r8
        g = rhs.g;
    1a0c:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a10:	f889 6002 	strb.w	r6, [r9, #2]
    1a14:	f009 fdc2 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a18:	4b4e      	ldr	r3, [pc, #312]	; (1b54 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a1a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a1e:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a20:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a24:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a28:	5560      	strb	r0, [r4, r5]
    1a2a:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a2c:	4845      	ldr	r0, [pc, #276]	; (1b44 <wipeup()+0x290>)
        g = rhs.g;
    1a2e:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1a32:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a36:	d520      	bpl.n	1a7a <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a38:	4d47      	ldr	r5, [pc, #284]	; (1b58 <wipeup()+0x2a4>)
    1a3a:	4c48      	ldr	r4, [pc, #288]	; (1b5c <wipeup()+0x2a8>)
    1a3c:	682b      	ldr	r3, [r5, #0]
    1a3e:	9303      	str	r3, [sp, #12]
    1a40:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a44:	9b03      	ldr	r3, [sp, #12]
    1a46:	1a5b      	subs	r3, r3, r1
    1a48:	4293      	cmp	r3, r2
    1a4a:	d30e      	bcc.n	1a6a <wipeup()+0x1b6>
    1a4c:	4b3d      	ldr	r3, [pc, #244]	; (1b44 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a4e:	682a      	ldr	r2, [r5, #0]
    1a50:	781b      	ldrb	r3, [r3, #0]
    1a52:	9202      	str	r2, [sp, #8]
	return ret;
    1a54:	9a02      	ldr	r2, [sp, #8]
    1a56:	6022      	str	r2, [r4, #0]
    1a58:	3301      	adds	r3, #1
    1a5a:	4a3a      	ldr	r2, [pc, #232]	; (1b44 <wipeup()+0x290>)
    1a5c:	b2db      	uxtb	r3, r3
    1a5e:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1a60:	2b4a      	cmp	r3, #74	; 0x4a
    1a62:	d005      	beq.n	1a70 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1a64:	b005      	add	sp, #20
    1a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a6a:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1a6c:	2b4a      	cmp	r3, #74	; 0x4a
    1a6e:	d1f9      	bne.n	1a64 <wipeup()+0x1b0>
		finish_transition();
    1a70:	f7ff fd2c 	bl	14cc <finish_transition()>
	}
}
    1a74:	b005      	add	sp, #20
    1a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a7a:	4836      	ldr	r0, [pc, #216]	; (1b54 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a7c:	4d36      	ldr	r5, [pc, #216]	; (1b58 <wipeup()+0x2a4>)
    1a7e:	f00a fcd7 	bl	c430 <__cxa_guard_acquire>
    1a82:	2800      	cmp	r0, #0
    1a84:	d151      	bne.n	1b2a <wipeup()+0x276>
    1a86:	4c35      	ldr	r4, [pc, #212]	; (1b5c <wipeup()+0x2a8>)
    1a88:	682b      	ldr	r3, [r5, #0]
    1a8a:	9303      	str	r3, [sp, #12]
    1a8c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	1a5b      	subs	r3, r3, r1
    1a94:	4293      	cmp	r3, r2
    1a96:	d2d9      	bcs.n	1a4c <wipeup()+0x198>
    1a98:	4b2a      	ldr	r3, [pc, #168]	; (1b44 <wipeup()+0x290>)
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	e7e0      	b.n	1a60 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1a9e:	3d01      	subs	r5, #1
    1aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1aa4:	2680      	movs	r6, #128	; 0x80
    1aa6:	eb04 0905 	add.w	r9, r4, r5
    1aaa:	f10d 0a0c 	add.w	sl, sp, #12
    1aae:	f10d 0b08 	add.w	fp, sp, #8
    1ab2:	f04f 0800 	mov.w	r8, #0
    1ab6:	4649      	mov	r1, r9
    1ab8:	4633      	mov	r3, r6
    1aba:	4650      	mov	r0, sl
    1abc:	465a      	mov	r2, fp
    1abe:	f88d 8008 	strb.w	r8, [sp, #8]
    1ac2:	f88d 6009 	strb.w	r6, [sp, #9]
    1ac6:	f88d 600a 	strb.w	r6, [sp, #10]
    1aca:	f009 fd67 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1ace:	4b1d      	ldr	r3, [pc, #116]	; (1b44 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1ad0:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1ad4:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1ad6:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1ada:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ade:	f88d 8008 	strb.w	r8, [sp, #8]
    1ae2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1aea:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1aee:	5562      	strb	r2, [r4, r5]
    1af0:	461f      	mov	r7, r3
    1af2:	4641      	mov	r1, r8
    1af4:	4633      	mov	r3, r6
    1af6:	465a      	mov	r2, fp
    1af8:	4650      	mov	r0, sl
        g = rhs.g;
    1afa:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1afe:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b02:	f88d 6009 	strb.w	r6, [sp, #9]
    1b06:	f88d 600a 	strb.w	r6, [sp, #10]
    1b0a:	f009 fd47 	bl	b59c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b0e:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b12:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b16:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b1a:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b1c:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b20:	f888 3002 	strb.w	r3, [r8, #2]
    1b24:	e730      	b.n	1988 <wipeup()+0xd4>
    1b26:	4c09      	ldr	r4, [pc, #36]	; (1b4c <wipeup()+0x298>)
    1b28:	e6fe      	b.n	1928 <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b2a:	4b0d      	ldr	r3, [pc, #52]	; (1b60 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b2c:	682a      	ldr	r2, [r5, #0]
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	4c0a      	ldr	r4, [pc, #40]	; (1b5c <wipeup()+0x2a8>)
    1b32:	9201      	str	r2, [sp, #4]
	return ret;
    1b34:	9a01      	ldr	r2, [sp, #4]
    1b36:	6022      	str	r2, [r4, #0]
    1b38:	009b      	lsls	r3, r3, #2
    1b3a:	4806      	ldr	r0, [pc, #24]	; (1b54 <wipeup()+0x2a0>)
    1b3c:	6063      	str	r3, [r4, #4]
    1b3e:	f00a fc7d 	bl	c43c <__cxa_guard_release>
    1b42:	e7a1      	b.n	1a88 <wipeup()+0x1d4>
    1b44:	1fff9554 	.word	0x1fff9554
    1b48:	1fff8cb0 	.word	0x1fff8cb0
    1b4c:	1fffaf44 	.word	0x1fffaf44
    1b50:	1fffa6ec 	.word	0x1fffa6ec
    1b54:	1fff9614 	.word	0x1fff9614
    1b58:	1fffb184 	.word	0x1fffb184
    1b5c:	1fff9e80 	.word	0x1fff9e80
    1b60:	1fff9e7d 	.word	0x1fff9e7d

00001b64 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1b64:	2801      	cmp	r0, #1
    1b66:	d006      	beq.n	1b76 <switch_transition(TransitionType)+0x12>
    1b68:	d303      	bcc.n	1b72 <switch_transition(TransitionType)+0xe>
    1b6a:	2802      	cmp	r0, #2
    1b6c:	d101      	bne.n	1b72 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1b6e:	f7ff bea1 	b.w	18b4 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1b72:	f7ff bcf1 	b.w	1558 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1b76:	f7ff bd61 	b.w	163c <wipedown()>
    1b7a:	bf00      	nop

00001b7c <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1b7c:	b510      	push	{r4, lr}
    1b7e:	2110      	movs	r1, #16
    1b80:	4604      	mov	r4, r0
    1b82:	4894      	ldr	r0, [pc, #592]	; (1dd4 <print_palette(unsigned char)+0x258>)
    1b84:	f00b fcec 	bl	d560 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b88:	4621      	mov	r1, r4
    1b8a:	2300      	movs	r3, #0
    1b8c:	220a      	movs	r2, #10
    1b8e:	4892      	ldr	r0, [pc, #584]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1b90:	f00b fefa 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b94:	2102      	movs	r1, #2
    1b96:	4891      	ldr	r0, [pc, #580]	; (1ddc <print_palette(unsigned char)+0x260>)
    1b98:	f00b fce2 	bl	d560 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1b9c:	2c5c      	cmp	r4, #92	; 0x5c
    1b9e:	f200 8281 	bhi.w	20a4 <print_palette(unsigned char)+0x528>
    1ba2:	e8df f014 	tbh	[pc, r4, lsl #1]
    1ba6:	027a      	.short	0x027a
    1ba8:	02700275 	.word	0x02700275
    1bac:	0266026b 	.word	0x0266026b
    1bb0:	025c0261 	.word	0x025c0261
    1bb4:	02520257 	.word	0x02520257
    1bb8:	0248024d 	.word	0x0248024d
    1bbc:	023e0243 	.word	0x023e0243
    1bc0:	02340239 	.word	0x02340239
    1bc4:	022a022f 	.word	0x022a022f
    1bc8:	02200225 	.word	0x02200225
    1bcc:	0216021b 	.word	0x0216021b
    1bd0:	020c0211 	.word	0x020c0211
    1bd4:	02020207 	.word	0x02020207
    1bd8:	01f801fd 	.word	0x01f801fd
    1bdc:	01ee01f3 	.word	0x01ee01f3
    1be0:	01e401e9 	.word	0x01e401e9
    1be4:	01da01df 	.word	0x01da01df
    1be8:	01d001d5 	.word	0x01d001d5
    1bec:	01c601cb 	.word	0x01c601cb
    1bf0:	01bc01c1 	.word	0x01bc01c1
    1bf4:	01b201b7 	.word	0x01b201b7
    1bf8:	01a801ad 	.word	0x01a801ad
    1bfc:	019e01a3 	.word	0x019e01a3
    1c00:	01940199 	.word	0x01940199
    1c04:	018a018f 	.word	0x018a018f
    1c08:	01800185 	.word	0x01800185
    1c0c:	0176017b 	.word	0x0176017b
    1c10:	016c0171 	.word	0x016c0171
    1c14:	01110167 	.word	0x01110167
    1c18:	0107010c 	.word	0x0107010c
    1c1c:	00fd0102 	.word	0x00fd0102
    1c20:	00f300f8 	.word	0x00f300f8
    1c24:	00e900ee 	.word	0x00e900ee
    1c28:	00df00e4 	.word	0x00df00e4
    1c2c:	00d500da 	.word	0x00d500da
    1c30:	00cb00d0 	.word	0x00cb00d0
    1c34:	00c100c6 	.word	0x00c100c6
    1c38:	00b700bc 	.word	0x00b700bc
    1c3c:	00ad00b2 	.word	0x00ad00b2
    1c40:	00a300a8 	.word	0x00a300a8
    1c44:	0099009e 	.word	0x0099009e
    1c48:	008f0094 	.word	0x008f0094
    1c4c:	0085008a 	.word	0x0085008a
    1c50:	007b0080 	.word	0x007b0080
    1c54:	00710076 	.word	0x00710076
    1c58:	0067006c 	.word	0x0067006c
    1c5c:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1c60:	495f      	ldr	r1, [pc, #380]	; (1de0 <print_palette(unsigned char)+0x264>)
    1c62:	485d      	ldr	r0, [pc, #372]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1c64:	f7fe fe52 	bl	90c <Print::println(char const*)>
    1c68:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1c6a:	495e      	ldr	r1, [pc, #376]	; (1de4 <print_palette(unsigned char)+0x268>)
    1c6c:	485a      	ldr	r0, [pc, #360]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1c6e:	f7fe fe4d 	bl	90c <Print::println(char const*)>
    1c72:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1c74:	495c      	ldr	r1, [pc, #368]	; (1de8 <print_palette(unsigned char)+0x26c>)
    1c76:	4858      	ldr	r0, [pc, #352]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1c78:	f7fe fe48 	bl	90c <Print::println(char const*)>
    1c7c:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1c7e:	495b      	ldr	r1, [pc, #364]	; (1dec <print_palette(unsigned char)+0x270>)
    1c80:	4855      	ldr	r0, [pc, #340]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1c82:	f7fe fe43 	bl	90c <Print::println(char const*)>
    1c86:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1c88:	4959      	ldr	r1, [pc, #356]	; (1df0 <print_palette(unsigned char)+0x274>)
    1c8a:	4853      	ldr	r0, [pc, #332]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1c8c:	f7fe fe3e 	bl	90c <Print::println(char const*)>
    1c90:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1c92:	4958      	ldr	r1, [pc, #352]	; (1df4 <print_palette(unsigned char)+0x278>)
    1c94:	4850      	ldr	r0, [pc, #320]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1c96:	f7fe fe39 	bl	90c <Print::println(char const*)>
    1c9a:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1c9c:	4956      	ldr	r1, [pc, #344]	; (1df8 <print_palette(unsigned char)+0x27c>)
    1c9e:	484e      	ldr	r0, [pc, #312]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1ca0:	f7fe fe34 	bl	90c <Print::println(char const*)>
    1ca4:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1ca6:	4955      	ldr	r1, [pc, #340]	; (1dfc <print_palette(unsigned char)+0x280>)
    1ca8:	484b      	ldr	r0, [pc, #300]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1caa:	f7fe fe2f 	bl	90c <Print::println(char const*)>
    1cae:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1cb0:	4953      	ldr	r1, [pc, #332]	; (1e00 <print_palette(unsigned char)+0x284>)
    1cb2:	4849      	ldr	r0, [pc, #292]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cb4:	f7fe fe2a 	bl	90c <Print::println(char const*)>
    1cb8:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1cba:	4952      	ldr	r1, [pc, #328]	; (1e04 <print_palette(unsigned char)+0x288>)
    1cbc:	4846      	ldr	r0, [pc, #280]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cbe:	f7fe fe25 	bl	90c <Print::println(char const*)>
    1cc2:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1cc4:	4950      	ldr	r1, [pc, #320]	; (1e08 <print_palette(unsigned char)+0x28c>)
    1cc6:	4844      	ldr	r0, [pc, #272]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cc8:	f7fe fe20 	bl	90c <Print::println(char const*)>
    1ccc:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1cce:	494f      	ldr	r1, [pc, #316]	; (1e0c <print_palette(unsigned char)+0x290>)
    1cd0:	4841      	ldr	r0, [pc, #260]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cd2:	f7fe fe1b 	bl	90c <Print::println(char const*)>
    1cd6:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1cd8:	494d      	ldr	r1, [pc, #308]	; (1e10 <print_palette(unsigned char)+0x294>)
    1cda:	483f      	ldr	r0, [pc, #252]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cdc:	f7fe fe16 	bl	90c <Print::println(char const*)>
    1ce0:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1ce2:	494c      	ldr	r1, [pc, #304]	; (1e14 <print_palette(unsigned char)+0x298>)
    1ce4:	483c      	ldr	r0, [pc, #240]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1ce6:	f7fe fe11 	bl	90c <Print::println(char const*)>
    1cea:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1cec:	494a      	ldr	r1, [pc, #296]	; (1e18 <print_palette(unsigned char)+0x29c>)
    1cee:	483a      	ldr	r0, [pc, #232]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cf0:	f7fe fe0c 	bl	90c <Print::println(char const*)>
    1cf4:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1cf6:	4949      	ldr	r1, [pc, #292]	; (1e1c <print_palette(unsigned char)+0x2a0>)
    1cf8:	4837      	ldr	r0, [pc, #220]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1cfa:	f7fe fe07 	bl	90c <Print::println(char const*)>
    1cfe:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d00:	4947      	ldr	r1, [pc, #284]	; (1e20 <print_palette(unsigned char)+0x2a4>)
    1d02:	4835      	ldr	r0, [pc, #212]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d04:	f7fe fe02 	bl	90c <Print::println(char const*)>
    1d08:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d0a:	4946      	ldr	r1, [pc, #280]	; (1e24 <print_palette(unsigned char)+0x2a8>)
    1d0c:	4832      	ldr	r0, [pc, #200]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d0e:	f7fe fdfd 	bl	90c <Print::println(char const*)>
    1d12:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d14:	4944      	ldr	r1, [pc, #272]	; (1e28 <print_palette(unsigned char)+0x2ac>)
    1d16:	4830      	ldr	r0, [pc, #192]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d18:	f7fe fdf8 	bl	90c <Print::println(char const*)>
    1d1c:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d1e:	4943      	ldr	r1, [pc, #268]	; (1e2c <print_palette(unsigned char)+0x2b0>)
    1d20:	482d      	ldr	r0, [pc, #180]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d22:	f7fe fdf3 	bl	90c <Print::println(char const*)>
    1d26:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d28:	4941      	ldr	r1, [pc, #260]	; (1e30 <print_palette(unsigned char)+0x2b4>)
    1d2a:	482b      	ldr	r0, [pc, #172]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d2c:	f7fe fdee 	bl	90c <Print::println(char const*)>
    1d30:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1d32:	4940      	ldr	r1, [pc, #256]	; (1e34 <print_palette(unsigned char)+0x2b8>)
    1d34:	4828      	ldr	r0, [pc, #160]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d36:	f7fe fde9 	bl	90c <Print::println(char const*)>
    1d3a:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1d3c:	493e      	ldr	r1, [pc, #248]	; (1e38 <print_palette(unsigned char)+0x2bc>)
    1d3e:	4826      	ldr	r0, [pc, #152]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d40:	f7fe fde4 	bl	90c <Print::println(char const*)>
    1d44:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1d46:	493d      	ldr	r1, [pc, #244]	; (1e3c <print_palette(unsigned char)+0x2c0>)
    1d48:	4823      	ldr	r0, [pc, #140]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d4a:	f7fe fddf 	bl	90c <Print::println(char const*)>
    1d4e:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1d50:	493b      	ldr	r1, [pc, #236]	; (1e40 <print_palette(unsigned char)+0x2c4>)
    1d52:	4821      	ldr	r0, [pc, #132]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d54:	f7fe fdda 	bl	90c <Print::println(char const*)>
    1d58:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1d5a:	493a      	ldr	r1, [pc, #232]	; (1e44 <print_palette(unsigned char)+0x2c8>)
    1d5c:	481e      	ldr	r0, [pc, #120]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d5e:	f7fe fdd5 	bl	90c <Print::println(char const*)>
    1d62:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1d64:	4938      	ldr	r1, [pc, #224]	; (1e48 <print_palette(unsigned char)+0x2cc>)
    1d66:	481c      	ldr	r0, [pc, #112]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d68:	f7fe fdd0 	bl	90c <Print::println(char const*)>
    1d6c:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1d6e:	4937      	ldr	r1, [pc, #220]	; (1e4c <print_palette(unsigned char)+0x2d0>)
    1d70:	4819      	ldr	r0, [pc, #100]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d72:	f7fe fdcb 	bl	90c <Print::println(char const*)>
    1d76:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1d78:	4935      	ldr	r1, [pc, #212]	; (1e50 <print_palette(unsigned char)+0x2d4>)
    1d7a:	4817      	ldr	r0, [pc, #92]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d7c:	f7fe fdc6 	bl	90c <Print::println(char const*)>
    1d80:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1d82:	4934      	ldr	r1, [pc, #208]	; (1e54 <print_palette(unsigned char)+0x2d8>)
    1d84:	4814      	ldr	r0, [pc, #80]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d86:	f7fe fdc1 	bl	90c <Print::println(char const*)>
    1d8a:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1d8c:	4932      	ldr	r1, [pc, #200]	; (1e58 <print_palette(unsigned char)+0x2dc>)
    1d8e:	4812      	ldr	r0, [pc, #72]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d90:	f7fe fdbc 	bl	90c <Print::println(char const*)>
    1d94:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1d96:	4931      	ldr	r1, [pc, #196]	; (1e5c <print_palette(unsigned char)+0x2e0>)
    1d98:	480f      	ldr	r0, [pc, #60]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1d9a:	f7fe fdb7 	bl	90c <Print::println(char const*)>
    1d9e:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1da0:	492f      	ldr	r1, [pc, #188]	; (1e60 <print_palette(unsigned char)+0x2e4>)
    1da2:	480d      	ldr	r0, [pc, #52]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1da4:	f7fe fdb2 	bl	90c <Print::println(char const*)>
    1da8:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1daa:	492e      	ldr	r1, [pc, #184]	; (1e64 <print_palette(unsigned char)+0x2e8>)
    1dac:	480a      	ldr	r0, [pc, #40]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1dae:	f7fe fdad 	bl	90c <Print::println(char const*)>
    1db2:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1db4:	492c      	ldr	r1, [pc, #176]	; (1e68 <print_palette(unsigned char)+0x2ec>)
    1db6:	4808      	ldr	r0, [pc, #32]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1db8:	f7fe fda8 	bl	90c <Print::println(char const*)>
    1dbc:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1dbe:	492b      	ldr	r1, [pc, #172]	; (1e6c <print_palette(unsigned char)+0x2f0>)
    1dc0:	4805      	ldr	r0, [pc, #20]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1dc2:	f7fe fda3 	bl	90c <Print::println(char const*)>
    1dc6:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1dc8:	4929      	ldr	r1, [pc, #164]	; (1e70 <print_palette(unsigned char)+0x2f4>)
    1dca:	4803      	ldr	r0, [pc, #12]	; (1dd8 <print_palette(unsigned char)+0x25c>)
    1dcc:	f7fe fd9e 	bl	90c <Print::println(char const*)>
    1dd0:	bd10      	pop	{r4, pc}
    1dd2:	bf00      	nop
    1dd4:	0000f39c 	.word	0x0000f39c
    1dd8:	1fff878c 	.word	0x1fff878c
    1ddc:	0000f3b0 	.word	0x0000f3b0
    1de0:	0000f944 	.word	0x0000f944
    1de4:	0000f938 	.word	0x0000f938
    1de8:	0000f928 	.word	0x0000f928
    1dec:	0000f918 	.word	0x0000f918
    1df0:	0000f904 	.word	0x0000f904
    1df4:	0000f8ec 	.word	0x0000f8ec
    1df8:	0000f8d4 	.word	0x0000f8d4
    1dfc:	0000f8c4 	.word	0x0000f8c4
    1e00:	0000f8ac 	.word	0x0000f8ac
    1e04:	0000f8a0 	.word	0x0000f8a0
    1e08:	0000f894 	.word	0x0000f894
    1e0c:	0000f87c 	.word	0x0000f87c
    1e10:	0000f870 	.word	0x0000f870
    1e14:	0000f864 	.word	0x0000f864
    1e18:	0000f858 	.word	0x0000f858
    1e1c:	0000f84c 	.word	0x0000f84c
    1e20:	0000f83c 	.word	0x0000f83c
    1e24:	0000f830 	.word	0x0000f830
    1e28:	0000f81c 	.word	0x0000f81c
    1e2c:	0000f810 	.word	0x0000f810
    1e30:	0000f800 	.word	0x0000f800
    1e34:	0000f7f4 	.word	0x0000f7f4
    1e38:	0000f7e8 	.word	0x0000f7e8
    1e3c:	0000f7e0 	.word	0x0000f7e0
    1e40:	0000f7cc 	.word	0x0000f7cc
    1e44:	0000f7bc 	.word	0x0000f7bc
    1e48:	0000f7a8 	.word	0x0000f7a8
    1e4c:	0000f79c 	.word	0x0000f79c
    1e50:	0000f790 	.word	0x0000f790
    1e54:	0000f784 	.word	0x0000f784
    1e58:	0000f774 	.word	0x0000f774
    1e5c:	0000f760 	.word	0x0000f760
    1e60:	0000f754 	.word	0x0000f754
    1e64:	0000f744 	.word	0x0000f744
    1e68:	0000f738 	.word	0x0000f738
    1e6c:	0000f728 	.word	0x0000f728
    1e70:	0000f71c 	.word	0x0000f71c
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1e74:	498e      	ldr	r1, [pc, #568]	; (20b0 <print_palette(unsigned char)+0x534>)
    1e76:	488f      	ldr	r0, [pc, #572]	; (20b4 <print_palette(unsigned char)+0x538>)
    1e78:	f7fe fd48 	bl	90c <Print::println(char const*)>
    1e7c:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1e7e:	498e      	ldr	r1, [pc, #568]	; (20b8 <print_palette(unsigned char)+0x53c>)
    1e80:	488c      	ldr	r0, [pc, #560]	; (20b4 <print_palette(unsigned char)+0x538>)
    1e82:	f7fe fd43 	bl	90c <Print::println(char const*)>
    1e86:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1e88:	498c      	ldr	r1, [pc, #560]	; (20bc <print_palette(unsigned char)+0x540>)
    1e8a:	488a      	ldr	r0, [pc, #552]	; (20b4 <print_palette(unsigned char)+0x538>)
    1e8c:	f7fe fd3e 	bl	90c <Print::println(char const*)>
    1e90:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1e92:	498b      	ldr	r1, [pc, #556]	; (20c0 <print_palette(unsigned char)+0x544>)
    1e94:	4887      	ldr	r0, [pc, #540]	; (20b4 <print_palette(unsigned char)+0x538>)
    1e96:	f7fe fd39 	bl	90c <Print::println(char const*)>
    1e9a:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1e9c:	4989      	ldr	r1, [pc, #548]	; (20c4 <print_palette(unsigned char)+0x548>)
    1e9e:	4885      	ldr	r0, [pc, #532]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ea0:	f7fe fd34 	bl	90c <Print::println(char const*)>
    1ea4:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1ea6:	4988      	ldr	r1, [pc, #544]	; (20c8 <print_palette(unsigned char)+0x54c>)
    1ea8:	4882      	ldr	r0, [pc, #520]	; (20b4 <print_palette(unsigned char)+0x538>)
    1eaa:	f7fe fd2f 	bl	90c <Print::println(char const*)>
    1eae:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1eb0:	4986      	ldr	r1, [pc, #536]	; (20cc <print_palette(unsigned char)+0x550>)
    1eb2:	4880      	ldr	r0, [pc, #512]	; (20b4 <print_palette(unsigned char)+0x538>)
    1eb4:	f7fe fd2a 	bl	90c <Print::println(char const*)>
    1eb8:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1eba:	4985      	ldr	r1, [pc, #532]	; (20d0 <print_palette(unsigned char)+0x554>)
    1ebc:	487d      	ldr	r0, [pc, #500]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ebe:	f7fe fd25 	bl	90c <Print::println(char const*)>
    1ec2:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1ec4:	4983      	ldr	r1, [pc, #524]	; (20d4 <print_palette(unsigned char)+0x558>)
    1ec6:	487b      	ldr	r0, [pc, #492]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ec8:	f7fe fd20 	bl	90c <Print::println(char const*)>
    1ecc:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1ece:	4982      	ldr	r1, [pc, #520]	; (20d8 <print_palette(unsigned char)+0x55c>)
    1ed0:	4878      	ldr	r0, [pc, #480]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ed2:	f7fe fd1b 	bl	90c <Print::println(char const*)>
    1ed6:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1ed8:	4980      	ldr	r1, [pc, #512]	; (20dc <print_palette(unsigned char)+0x560>)
    1eda:	4876      	ldr	r0, [pc, #472]	; (20b4 <print_palette(unsigned char)+0x538>)
    1edc:	f7fe fd16 	bl	90c <Print::println(char const*)>
    1ee0:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1ee2:	497f      	ldr	r1, [pc, #508]	; (20e0 <print_palette(unsigned char)+0x564>)
    1ee4:	4873      	ldr	r0, [pc, #460]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ee6:	f7fe fd11 	bl	90c <Print::println(char const*)>
    1eea:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1eec:	497d      	ldr	r1, [pc, #500]	; (20e4 <print_palette(unsigned char)+0x568>)
    1eee:	4871      	ldr	r0, [pc, #452]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ef0:	f7fe fd0c 	bl	90c <Print::println(char const*)>
    1ef4:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1ef6:	497c      	ldr	r1, [pc, #496]	; (20e8 <print_palette(unsigned char)+0x56c>)
    1ef8:	486e      	ldr	r0, [pc, #440]	; (20b4 <print_palette(unsigned char)+0x538>)
    1efa:	f7fe fd07 	bl	90c <Print::println(char const*)>
    1efe:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f00:	497a      	ldr	r1, [pc, #488]	; (20ec <print_palette(unsigned char)+0x570>)
    1f02:	486c      	ldr	r0, [pc, #432]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f04:	f7fe fd02 	bl	90c <Print::println(char const*)>
    1f08:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f0a:	4979      	ldr	r1, [pc, #484]	; (20f0 <print_palette(unsigned char)+0x574>)
    1f0c:	4869      	ldr	r0, [pc, #420]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f0e:	f7fe fcfd 	bl	90c <Print::println(char const*)>
    1f12:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f14:	4977      	ldr	r1, [pc, #476]	; (20f4 <print_palette(unsigned char)+0x578>)
    1f16:	4867      	ldr	r0, [pc, #412]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f18:	f7fe fcf8 	bl	90c <Print::println(char const*)>
    1f1c:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f1e:	4976      	ldr	r1, [pc, #472]	; (20f8 <print_palette(unsigned char)+0x57c>)
    1f20:	4864      	ldr	r0, [pc, #400]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f22:	f7fe fcf3 	bl	90c <Print::println(char const*)>
    1f26:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f28:	4974      	ldr	r1, [pc, #464]	; (20fc <print_palette(unsigned char)+0x580>)
    1f2a:	4862      	ldr	r0, [pc, #392]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f2c:	f7fe fcee 	bl	90c <Print::println(char const*)>
    1f30:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1f32:	4973      	ldr	r1, [pc, #460]	; (2100 <print_palette(unsigned char)+0x584>)
    1f34:	485f      	ldr	r0, [pc, #380]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f36:	f7fe fce9 	bl	90c <Print::println(char const*)>
    1f3a:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1f3c:	4971      	ldr	r1, [pc, #452]	; (2104 <print_palette(unsigned char)+0x588>)
    1f3e:	485d      	ldr	r0, [pc, #372]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f40:	f7fe fce4 	bl	90c <Print::println(char const*)>
    1f44:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1f46:	4970      	ldr	r1, [pc, #448]	; (2108 <print_palette(unsigned char)+0x58c>)
    1f48:	485a      	ldr	r0, [pc, #360]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f4a:	f7fe fcdf 	bl	90c <Print::println(char const*)>
    1f4e:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1f50:	496e      	ldr	r1, [pc, #440]	; (210c <print_palette(unsigned char)+0x590>)
    1f52:	4858      	ldr	r0, [pc, #352]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f54:	f7fe fcda 	bl	90c <Print::println(char const*)>
    1f58:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1f5a:	496d      	ldr	r1, [pc, #436]	; (2110 <print_palette(unsigned char)+0x594>)
    1f5c:	4855      	ldr	r0, [pc, #340]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f5e:	f7fe fcd5 	bl	90c <Print::println(char const*)>
    1f62:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1f64:	496b      	ldr	r1, [pc, #428]	; (2114 <print_palette(unsigned char)+0x598>)
    1f66:	4853      	ldr	r0, [pc, #332]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f68:	f7fe fcd0 	bl	90c <Print::println(char const*)>
    1f6c:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1f6e:	496a      	ldr	r1, [pc, #424]	; (2118 <print_palette(unsigned char)+0x59c>)
    1f70:	4850      	ldr	r0, [pc, #320]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f72:	f7fe fccb 	bl	90c <Print::println(char const*)>
    1f76:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1f78:	4968      	ldr	r1, [pc, #416]	; (211c <print_palette(unsigned char)+0x5a0>)
    1f7a:	484e      	ldr	r0, [pc, #312]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f7c:	f7fe fcc6 	bl	90c <Print::println(char const*)>
    1f80:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1f82:	4967      	ldr	r1, [pc, #412]	; (2120 <print_palette(unsigned char)+0x5a4>)
    1f84:	484b      	ldr	r0, [pc, #300]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f86:	f7fe fcc1 	bl	90c <Print::println(char const*)>
    1f8a:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1f8c:	4965      	ldr	r1, [pc, #404]	; (2124 <print_palette(unsigned char)+0x5a8>)
    1f8e:	4849      	ldr	r0, [pc, #292]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f90:	f7fe fcbc 	bl	90c <Print::println(char const*)>
    1f94:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1f96:	4964      	ldr	r1, [pc, #400]	; (2128 <print_palette(unsigned char)+0x5ac>)
    1f98:	4846      	ldr	r0, [pc, #280]	; (20b4 <print_palette(unsigned char)+0x538>)
    1f9a:	f7fe fcb7 	bl	90c <Print::println(char const*)>
    1f9e:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1fa0:	4962      	ldr	r1, [pc, #392]	; (212c <print_palette(unsigned char)+0x5b0>)
    1fa2:	4844      	ldr	r0, [pc, #272]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fa4:	f7fe fcb2 	bl	90c <Print::println(char const*)>
    1fa8:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1faa:	4961      	ldr	r1, [pc, #388]	; (2130 <print_palette(unsigned char)+0x5b4>)
    1fac:	4841      	ldr	r0, [pc, #260]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fae:	f7fe fcad 	bl	90c <Print::println(char const*)>
    1fb2:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1fb4:	495f      	ldr	r1, [pc, #380]	; (2134 <print_palette(unsigned char)+0x5b8>)
    1fb6:	483f      	ldr	r0, [pc, #252]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fb8:	f7fe fca8 	bl	90c <Print::println(char const*)>
    1fbc:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1fbe:	495e      	ldr	r1, [pc, #376]	; (2138 <print_palette(unsigned char)+0x5bc>)
    1fc0:	483c      	ldr	r0, [pc, #240]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fc2:	f7fe fca3 	bl	90c <Print::println(char const*)>
    1fc6:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1fc8:	495c      	ldr	r1, [pc, #368]	; (213c <print_palette(unsigned char)+0x5c0>)
    1fca:	483a      	ldr	r0, [pc, #232]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fcc:	f7fe fc9e 	bl	90c <Print::println(char const*)>
    1fd0:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1fd2:	495b      	ldr	r1, [pc, #364]	; (2140 <print_palette(unsigned char)+0x5c4>)
    1fd4:	4837      	ldr	r0, [pc, #220]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fd6:	f7fe fc99 	bl	90c <Print::println(char const*)>
    1fda:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1fdc:	4959      	ldr	r1, [pc, #356]	; (2144 <print_palette(unsigned char)+0x5c8>)
    1fde:	4835      	ldr	r0, [pc, #212]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fe0:	f7fe fc94 	bl	90c <Print::println(char const*)>
    1fe4:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    1fe6:	4958      	ldr	r1, [pc, #352]	; (2148 <print_palette(unsigned char)+0x5cc>)
    1fe8:	4832      	ldr	r0, [pc, #200]	; (20b4 <print_palette(unsigned char)+0x538>)
    1fea:	f7fe fc8f 	bl	90c <Print::println(char const*)>
    1fee:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    1ff0:	4956      	ldr	r1, [pc, #344]	; (214c <print_palette(unsigned char)+0x5d0>)
    1ff2:	4830      	ldr	r0, [pc, #192]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ff4:	f7fe fc8a 	bl	90c <Print::println(char const*)>
    1ff8:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    1ffa:	4955      	ldr	r1, [pc, #340]	; (2150 <print_palette(unsigned char)+0x5d4>)
    1ffc:	482d      	ldr	r0, [pc, #180]	; (20b4 <print_palette(unsigned char)+0x538>)
    1ffe:	f7fe fc85 	bl	90c <Print::println(char const*)>
    2002:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2004:	4953      	ldr	r1, [pc, #332]	; (2154 <print_palette(unsigned char)+0x5d8>)
    2006:	482b      	ldr	r0, [pc, #172]	; (20b4 <print_palette(unsigned char)+0x538>)
    2008:	f7fe fc80 	bl	90c <Print::println(char const*)>
    200c:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    200e:	4952      	ldr	r1, [pc, #328]	; (2158 <print_palette(unsigned char)+0x5dc>)
    2010:	4828      	ldr	r0, [pc, #160]	; (20b4 <print_palette(unsigned char)+0x538>)
    2012:	f7fe fc7b 	bl	90c <Print::println(char const*)>
    2016:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    2018:	4950      	ldr	r1, [pc, #320]	; (215c <print_palette(unsigned char)+0x5e0>)
    201a:	4826      	ldr	r0, [pc, #152]	; (20b4 <print_palette(unsigned char)+0x538>)
    201c:	f7fe fc76 	bl	90c <Print::println(char const*)>
    2020:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    2022:	494f      	ldr	r1, [pc, #316]	; (2160 <print_palette(unsigned char)+0x5e4>)
    2024:	4823      	ldr	r0, [pc, #140]	; (20b4 <print_palette(unsigned char)+0x538>)
    2026:	f7fe fc71 	bl	90c <Print::println(char const*)>
    202a:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    202c:	494d      	ldr	r1, [pc, #308]	; (2164 <print_palette(unsigned char)+0x5e8>)
    202e:	4821      	ldr	r0, [pc, #132]	; (20b4 <print_palette(unsigned char)+0x538>)
    2030:	f7fe fc6c 	bl	90c <Print::println(char const*)>
    2034:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    2036:	494c      	ldr	r1, [pc, #304]	; (2168 <print_palette(unsigned char)+0x5ec>)
    2038:	481e      	ldr	r0, [pc, #120]	; (20b4 <print_palette(unsigned char)+0x538>)
    203a:	f7fe fc67 	bl	90c <Print::println(char const*)>
    203e:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    2040:	494a      	ldr	r1, [pc, #296]	; (216c <print_palette(unsigned char)+0x5f0>)
    2042:	481c      	ldr	r0, [pc, #112]	; (20b4 <print_palette(unsigned char)+0x538>)
    2044:	f7fe fc62 	bl	90c <Print::println(char const*)>
    2048:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    204a:	4949      	ldr	r1, [pc, #292]	; (2170 <print_palette(unsigned char)+0x5f4>)
    204c:	4819      	ldr	r0, [pc, #100]	; (20b4 <print_palette(unsigned char)+0x538>)
    204e:	f7fe fc5d 	bl	90c <Print::println(char const*)>
    2052:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    2054:	4947      	ldr	r1, [pc, #284]	; (2174 <print_palette(unsigned char)+0x5f8>)
    2056:	4817      	ldr	r0, [pc, #92]	; (20b4 <print_palette(unsigned char)+0x538>)
    2058:	f7fe fc58 	bl	90c <Print::println(char const*)>
    205c:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    205e:	4946      	ldr	r1, [pc, #280]	; (2178 <print_palette(unsigned char)+0x5fc>)
    2060:	4814      	ldr	r0, [pc, #80]	; (20b4 <print_palette(unsigned char)+0x538>)
    2062:	f7fe fc53 	bl	90c <Print::println(char const*)>
    2066:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    2068:	4944      	ldr	r1, [pc, #272]	; (217c <print_palette(unsigned char)+0x600>)
    206a:	4812      	ldr	r0, [pc, #72]	; (20b4 <print_palette(unsigned char)+0x538>)
    206c:	f7fe fc4e 	bl	90c <Print::println(char const*)>
    2070:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    2072:	4943      	ldr	r1, [pc, #268]	; (2180 <print_palette(unsigned char)+0x604>)
    2074:	480f      	ldr	r0, [pc, #60]	; (20b4 <print_palette(unsigned char)+0x538>)
    2076:	f7fe fc49 	bl	90c <Print::println(char const*)>
    207a:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    207c:	4941      	ldr	r1, [pc, #260]	; (2184 <print_palette(unsigned char)+0x608>)
    207e:	480d      	ldr	r0, [pc, #52]	; (20b4 <print_palette(unsigned char)+0x538>)
    2080:	f7fe fc44 	bl	90c <Print::println(char const*)>
    2084:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    2086:	4940      	ldr	r1, [pc, #256]	; (2188 <print_palette(unsigned char)+0x60c>)
    2088:	480a      	ldr	r0, [pc, #40]	; (20b4 <print_palette(unsigned char)+0x538>)
    208a:	f7fe fc3f 	bl	90c <Print::println(char const*)>
    208e:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    2090:	493e      	ldr	r1, [pc, #248]	; (218c <print_palette(unsigned char)+0x610>)
    2092:	4808      	ldr	r0, [pc, #32]	; (20b4 <print_palette(unsigned char)+0x538>)
    2094:	f7fe fc3a 	bl	90c <Print::println(char const*)>
    2098:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    209a:	493d      	ldr	r1, [pc, #244]	; (2190 <print_palette(unsigned char)+0x614>)
    209c:	4805      	ldr	r0, [pc, #20]	; (20b4 <print_palette(unsigned char)+0x538>)
    209e:	f7fe fc35 	bl	90c <Print::println(char const*)>
    20a2:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    20a4:	493b      	ldr	r1, [pc, #236]	; (2194 <print_palette(unsigned char)+0x618>)
    20a6:	4803      	ldr	r0, [pc, #12]	; (20b4 <print_palette(unsigned char)+0x538>)
    20a8:	f7fe fc30 	bl	90c <Print::println(char const*)>
    20ac:	bd10      	pop	{r4, pc}
    20ae:	bf00      	nop
    20b0:	0000f708 	.word	0x0000f708
    20b4:	1fff878c 	.word	0x1fff878c
    20b8:	0000f6f8 	.word	0x0000f6f8
    20bc:	0000f6ec 	.word	0x0000f6ec
    20c0:	0000f6e0 	.word	0x0000f6e0
    20c4:	0000f6d4 	.word	0x0000f6d4
    20c8:	0000f6c0 	.word	0x0000f6c0
    20cc:	0000f6b4 	.word	0x0000f6b4
    20d0:	0000f6a8 	.word	0x0000f6a8
    20d4:	0000f69c 	.word	0x0000f69c
    20d8:	0000f684 	.word	0x0000f684
    20dc:	0000f67c 	.word	0x0000f67c
    20e0:	0000f714 	.word	0x0000f714
    20e4:	0000f670 	.word	0x0000f670
    20e8:	0000f664 	.word	0x0000f664
    20ec:	0000f650 	.word	0x0000f650
    20f0:	0000f63c 	.word	0x0000f63c
    20f4:	0000f62c 	.word	0x0000f62c
    20f8:	0000f620 	.word	0x0000f620
    20fc:	0000f614 	.word	0x0000f614
    2100:	0000f608 	.word	0x0000f608
    2104:	0000f5fc 	.word	0x0000f5fc
    2108:	0000f5f0 	.word	0x0000f5f0
    210c:	0000f5e4 	.word	0x0000f5e4
    2110:	0000f5d8 	.word	0x0000f5d8
    2114:	0000f5cc 	.word	0x0000f5cc
    2118:	0000f5c0 	.word	0x0000f5c0
    211c:	0000f5b4 	.word	0x0000f5b4
    2120:	0000f5a8 	.word	0x0000f5a8
    2124:	0000f598 	.word	0x0000f598
    2128:	0000f584 	.word	0x0000f584
    212c:	0000f568 	.word	0x0000f568
    2130:	0000f550 	.word	0x0000f550
    2134:	0000f534 	.word	0x0000f534
    2138:	0000f524 	.word	0x0000f524
    213c:	0000f514 	.word	0x0000f514
    2140:	0000f500 	.word	0x0000f500
    2144:	0000f4f0 	.word	0x0000f4f0
    2148:	0000f4e8 	.word	0x0000f4e8
    214c:	0000f4e0 	.word	0x0000f4e0
    2150:	0000f4c8 	.word	0x0000f4c8
    2154:	0000f4b8 	.word	0x0000f4b8
    2158:	0000f4b0 	.word	0x0000f4b0
    215c:	0000f4a0 	.word	0x0000f4a0
    2160:	0000f490 	.word	0x0000f490
    2164:	0000f480 	.word	0x0000f480
    2168:	0000f46c 	.word	0x0000f46c
    216c:	0000f458 	.word	0x0000f458
    2170:	0000f444 	.word	0x0000f444
    2174:	0000f42c 	.word	0x0000f42c
    2178:	0000f414 	.word	0x0000f414
    217c:	0000f404 	.word	0x0000f404
    2180:	0000f3f0 	.word	0x0000f3f0
    2184:	0000f3dc 	.word	0x0000f3dc
    2188:	0000f3cc 	.word	0x0000f3cc
    218c:	0000f3c0 	.word	0x0000f3c0
    2190:	0000f3b4 	.word	0x0000f3b4
    2194:	0000f95c 	.word	0x0000f95c

00002198 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    2198:	b538      	push	{r3, r4, r5, lr}
    219a:	2100      	movs	r1, #0
    219c:	4604      	mov	r4, r0
    219e:	4893      	ldr	r0, [pc, #588]	; (23ec <LEDDebug(LEDStruct&)+0x254>)
    21a0:	f00b f9de 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21a4:	4892      	ldr	r0, [pc, #584]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    21a6:	f00b fbdf 	bl	d968 <Print::println()>
    21aa:	2122      	movs	r1, #34	; 0x22
    21ac:	4891      	ldr	r0, [pc, #580]	; (23f4 <LEDDebug(LEDStruct&)+0x25c>)
    21ae:	f00b f9d7 	bl	d560 <usb_serial_write>
    21b2:	488f      	ldr	r0, [pc, #572]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    21b4:	f00b fbd8 	bl	d968 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    21b8:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    21bc:	2b00      	cmp	r3, #0
    21be:	f000 80b3 	beq.w	2328 <LEDDebug(LEDStruct&)+0x190>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    21c2:	2b01      	cmp	r3, #1
    21c4:	f000 8658 	beq.w	2e78 <LEDDebug(LEDStruct&)+0xce0>
    21c8:	2113      	movs	r1, #19
    21ca:	488b      	ldr	r0, [pc, #556]	; (23f8 <LEDDebug(LEDStruct&)+0x260>)
    21cc:	f00b f9c8 	bl	d560 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    21d0:	4b8a      	ldr	r3, [pc, #552]	; (23fc <LEDDebug(LEDStruct&)+0x264>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21d2:	4887      	ldr	r0, [pc, #540]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    21d4:	7819      	ldrb	r1, [r3, #0]
    21d6:	220a      	movs	r2, #10
    21d8:	2300      	movs	r3, #0
    21da:	f00b fbd5 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    21de:	2103      	movs	r1, #3
    21e0:	4887      	ldr	r0, [pc, #540]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    21e2:	f00b f9bd 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21e6:	4882      	ldr	r0, [pc, #520]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    21e8:	f00b fbbe 	bl	d968 <Print::println()>
    21ec:	2113      	movs	r1, #19
    21ee:	4885      	ldr	r0, [pc, #532]	; (2404 <LEDDebug(LEDStruct&)+0x26c>)
    21f0:	f00b f9b6 	bl	d560 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21f4:	2300      	movs	r3, #0
    21f6:	220a      	movs	r2, #10
    21f8:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    21fc:	487c      	ldr	r0, [pc, #496]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    21fe:	f00b fbc3 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2202:	2103      	movs	r1, #3
    2204:	487e      	ldr	r0, [pc, #504]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    2206:	f00b f9ab 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    220a:	4879      	ldr	r0, [pc, #484]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    220c:	f00b fbac 	bl	d968 <Print::println()>
    2210:	2111      	movs	r1, #17
    2212:	487d      	ldr	r0, [pc, #500]	; (2408 <LEDDebug(LEDStruct&)+0x270>)
    2214:	f00b f9a4 	bl	d560 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2218:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    221c:	4874      	ldr	r0, [pc, #464]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    221e:	f00b fbf3 	bl	da08 <Print::print(long)>
    2222:	2103      	movs	r1, #3
    2224:	4876      	ldr	r0, [pc, #472]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    2226:	f00b f99b 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    222a:	4871      	ldr	r0, [pc, #452]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    222c:	f00b fb9c 	bl	d968 <Print::println()>
    2230:	2111      	movs	r1, #17
    2232:	4876      	ldr	r0, [pc, #472]	; (240c <LEDDebug(LEDStruct&)+0x274>)
    2234:	f00b f994 	bl	d560 <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEAR"); }
    2238:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    223c:	2b01      	cmp	r3, #1
    223e:	d078      	beq.n	2332 <LEDDebug(LEDStruct&)+0x19a>
    2240:	2107      	movs	r1, #7
    2242:	4873      	ldr	r0, [pc, #460]	; (2410 <LEDDebug(LEDStruct&)+0x278>)
    2244:	f00b f98c 	bl	d560 <usb_serial_write>
    2248:	2103      	movs	r1, #3
    224a:	486d      	ldr	r0, [pc, #436]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    224c:	f00b f988 	bl	d560 <usb_serial_write>
    2250:	4867      	ldr	r0, [pc, #412]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2252:	f00b fb89 	bl	d968 <Print::println()>
    2256:	2114      	movs	r1, #20
    2258:	486e      	ldr	r0, [pc, #440]	; (2414 <LEDDebug(LEDStruct&)+0x27c>)
    225a:	f00b f981 	bl	d560 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    225e:	2300      	movs	r3, #0
    2260:	220a      	movs	r2, #10
    2262:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    2266:	4862      	ldr	r0, [pc, #392]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2268:	f00b fb8e 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    226c:	2103      	movs	r1, #3
    226e:	4864      	ldr	r0, [pc, #400]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    2270:	f00b f976 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2274:	485e      	ldr	r0, [pc, #376]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2276:	f00b fb77 	bl	d968 <Print::println()>
    227a:	2115      	movs	r1, #21
    227c:	4866      	ldr	r0, [pc, #408]	; (2418 <LEDDebug(LEDStruct&)+0x280>)
    227e:	f00b f96f 	bl	d560 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2282:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2286:	485a      	ldr	r0, [pc, #360]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2288:	f00b fbbe 	bl	da08 <Print::print(long)>
    228c:	2103      	movs	r1, #3
    228e:	485c      	ldr	r0, [pc, #368]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    2290:	f00b f966 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2294:	4856      	ldr	r0, [pc, #344]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2296:	f00b fb67 	bl	d968 <Print::println()>
    229a:	2111      	movs	r1, #17
    229c:	485f      	ldr	r0, [pc, #380]	; (241c <LEDDebug(LEDStruct&)+0x284>)
    229e:	f00b f95f 	bl	d560 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22a2:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    22a6:	4852      	ldr	r0, [pc, #328]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    22a8:	f00b fbae 	bl	da08 <Print::print(long)>
    22ac:	2103      	movs	r1, #3
    22ae:	4854      	ldr	r0, [pc, #336]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    22b0:	f00b f956 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22b4:	484e      	ldr	r0, [pc, #312]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    22b6:	f00b fb57 	bl	d968 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    22ba:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    22be:	bb73      	cbnz	r3, 231e <LEDDebug(LEDStruct&)+0x186>
    22c0:	2122      	movs	r1, #34	; 0x22
    22c2:	484c      	ldr	r0, [pc, #304]	; (23f4 <LEDDebug(LEDStruct&)+0x25c>)
    22c4:	f00b f94c 	bl	d560 <usb_serial_write>
    22c8:	4849      	ldr	r0, [pc, #292]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    22ca:	f00b fb4d 	bl	d968 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    22ce:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    22d2:	2b20      	cmp	r3, #32
    22d4:	f200 85c2 	bhi.w	2e5c <LEDDebug(LEDStruct&)+0xcc4>
    22d8:	e8df f013 	tbh	[pc, r3, lsl #1]
    22dc:	05c000b4 	.word	0x05c000b4
    22e0:	05c005c0 	.word	0x05c005c0
    22e4:	05c005c0 	.word	0x05c005c0
    22e8:	05c0012e 	.word	0x05c0012e
    22ec:	05c005c0 	.word	0x05c005c0
    22f0:	018005c0 	.word	0x018005c0
    22f4:	05c005c0 	.word	0x05c005c0
    22f8:	05c005c0 	.word	0x05c005c0
    22fc:	018e05c0 	.word	0x018e05c0
    2300:	044105bd 	.word	0x044105bd
    2304:	045b0443 	.word	0x045b0443
    2308:	0199050e 	.word	0x0199050e
    230c:	026f022a 	.word	0x026f022a
    2310:	02ae05c0 	.word	0x02ae05c0
    2314:	032d0304 	.word	0x032d0304
    2318:	040b03c8 	.word	0x040b03c8
    231c:	0030      	.short	0x0030
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    231e:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    2322:	f7ff fc2b 	bl	1b7c <print_palette(unsigned char)>
    2326:	e7cb      	b.n	22c0 <LEDDebug(LEDStruct&)+0x128>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2328:	493d      	ldr	r1, [pc, #244]	; (2420 <LEDDebug(LEDStruct&)+0x288>)
    232a:	4831      	ldr	r0, [pc, #196]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    232c:	f7fe faee 	bl	90c <Print::println(char const*)>
    2330:	e74a      	b.n	21c8 <LEDDebug(LEDStruct&)+0x30>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2332:	493c      	ldr	r1, [pc, #240]	; (2424 <LEDDebug(LEDStruct&)+0x28c>)
    2334:	482e      	ldr	r0, [pc, #184]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2336:	f7fe fadb 	bl	8f0 <Print::write(char const*)>
    233a:	e785      	b.n	2248 <LEDDebug(LEDStruct&)+0xb0>
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
			break;

		case OUTWARD:
			Serial.println("==============OUTWARD=============");
    233c:	493a      	ldr	r1, [pc, #232]	; (2428 <LEDDebug(LEDStruct&)+0x290>)
    233e:	482c      	ldr	r0, [pc, #176]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2340:	f7fe fae4 	bl	90c <Print::println(char const*)>
    2344:	4939      	ldr	r1, [pc, #228]	; (242c <LEDDebug(LEDStruct&)+0x294>)
    2346:	482a      	ldr	r0, [pc, #168]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2348:	f7fe fad2 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    234c:	2300      	movs	r3, #0
    234e:	220a      	movs	r2, #10
    2350:	f894 1857 	ldrb.w	r1, [r4, #2135]	; 0x857
    2354:	4826      	ldr	r0, [pc, #152]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2356:	f00b fb17 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) out_fade:\t");
			Serial.print(leds.out_fade);
			Serial.println("\t||");
    235a:	4929      	ldr	r1, [pc, #164]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    235c:	4824      	ldr	r0, [pc, #144]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    235e:	f7fe fad5 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2362:	4933      	ldr	r1, [pc, #204]	; (2430 <LEDDebug(LEDStruct&)+0x298>)
    2364:	4822      	ldr	r0, [pc, #136]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2366:	f7fe fac3 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    236a:	2300      	movs	r3, #0
    236c:	220a      	movs	r2, #10
    236e:	f894 1853 	ldrb.w	r1, [r4, #2131]	; 0x853
    2372:	481f      	ldr	r0, [pc, #124]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2374:	f00b fb08 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) out_beat1:\t");
			Serial.print(leds.out_beat1);
			Serial.println("\t||");
    2378:	4921      	ldr	r1, [pc, #132]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    237a:	481d      	ldr	r0, [pc, #116]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    237c:	f7fe fac6 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2380:	492c      	ldr	r1, [pc, #176]	; (2434 <LEDDebug(LEDStruct&)+0x29c>)
    2382:	481b      	ldr	r0, [pc, #108]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2384:	f7fe fab4 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2388:	2300      	movs	r3, #0
    238a:	220a      	movs	r2, #10
    238c:	f894 1854 	ldrb.w	r1, [r4, #2132]	; 0x854
    2390:	4817      	ldr	r0, [pc, #92]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    2392:	f00b faf9 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) out_beat2:\t");
			Serial.print(leds.out_beat2);
			Serial.println("\t||");
    2396:	491a      	ldr	r1, [pc, #104]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    2398:	4815      	ldr	r0, [pc, #84]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    239a:	f7fe fab7 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    239e:	4926      	ldr	r1, [pc, #152]	; (2438 <LEDDebug(LEDStruct&)+0x2a0>)
    23a0:	4813      	ldr	r0, [pc, #76]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    23a2:	f7fe faa5 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23a6:	2300      	movs	r3, #0
    23a8:	220a      	movs	r2, #10
    23aa:	f894 1855 	ldrb.w	r1, [r4, #2133]	; 0x855
    23ae:	4810      	ldr	r0, [pc, #64]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    23b0:	f00b faea 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) out_min1:\t");
			Serial.print(leds.out_min1);
			Serial.println("\t||");
    23b4:	4912      	ldr	r1, [pc, #72]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    23b6:	480e      	ldr	r0, [pc, #56]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    23b8:	f7fe faa8 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23bc:	491f      	ldr	r1, [pc, #124]	; (243c <LEDDebug(LEDStruct&)+0x2a4>)
    23be:	480c      	ldr	r0, [pc, #48]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    23c0:	f7fe fa96 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23c4:	f894 1856 	ldrb.w	r1, [r4, #2134]	; 0x856
    23c8:	4809      	ldr	r0, [pc, #36]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    23ca:	2300      	movs	r3, #0
    23cc:	220a      	movs	r2, #10
    23ce:	f00b fadb 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) out_min2:\t");
			Serial.print(leds.out_min2);
			Serial.println("\t||");
    23d2:	490b      	ldr	r1, [pc, #44]	; (2400 <LEDDebug(LEDStruct&)+0x268>)
    23d4:	4806      	ldr	r0, [pc, #24]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
    23d6:	f7fe fa99 	bl	90c <Print::println(char const*)>
    23da:	2123      	movs	r1, #35	; 0x23
    23dc:	4818      	ldr	r0, [pc, #96]	; (2440 <LEDDebug(LEDStruct&)+0x2a8>)
    23de:	f00b f8bf 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    23e2:	4803      	ldr	r0, [pc, #12]	; (23f0 <LEDDebug(LEDStruct&)+0x258>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    23e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    23e8:	f00b babe 	b.w	d968 <Print::println()>
    23ec:	0000fb0c 	.word	0x0000fb0c
    23f0:	1fff878c 	.word	0x1fff878c
    23f4:	0000f974 	.word	0x0000f974
    23f8:	0000f9e0 	.word	0x0000f9e0
    23fc:	1fff8723 	.word	0x1fff8723
    2400:	0000f9f4 	.word	0x0000f9f4
    2404:	0000f9f8 	.word	0x0000f9f8
    2408:	0000fa0c 	.word	0x0000fa0c
    240c:	0000fa20 	.word	0x0000fa20
    2410:	0000fa3c 	.word	0x0000fa3c
    2414:	0000fa44 	.word	0x0000fa44
    2418:	0000fa5c 	.word	0x0000fa5c
    241c:	0000fa74 	.word	0x0000fa74
    2420:	0000f998 	.word	0x0000f998
    2424:	0000fa34 	.word	0x0000fa34
    2428:	00010480 	.word	0x00010480
    242c:	000104a4 	.word	0x000104a4
    2430:	000104b8 	.word	0x000104b8
    2434:	000104cc 	.word	0x000104cc
    2438:	000104e0 	.word	0x000104e0
    243c:	000104f4 	.word	0x000104f4
    2440:	0001052c 	.word	0x0001052c
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    2444:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2448:	489f      	ldr	r0, [pc, #636]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    244a:	2b04      	cmp	r3, #4
    244c:	bf0c      	ite	eq
    244e:	499f      	ldreq	r1, [pc, #636]	; (26cc <LEDDebug(LEDStruct&)+0x534>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2450:	499f      	ldrne	r1, [pc, #636]	; (26d0 <LEDDebug(LEDStruct&)+0x538>)
    2452:	f7fe fa5b 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2456:	499f      	ldr	r1, [pc, #636]	; (26d4 <LEDDebug(LEDStruct&)+0x53c>)
    2458:	489b      	ldr	r0, [pc, #620]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    245a:	f7fe fa49 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    245e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2462:	4899      	ldr	r0, [pc, #612]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2464:	f00b fad0 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2468:	499b      	ldr	r1, [pc, #620]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    246a:	4897      	ldr	r0, [pc, #604]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    246c:	f7fe fa4e 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2470:	499a      	ldr	r1, [pc, #616]	; (26dc <LEDDebug(LEDStruct&)+0x544>)
    2472:	4895      	ldr	r0, [pc, #596]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2474:	f7fe fa3c 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2478:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    247c:	4892      	ldr	r0, [pc, #584]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    247e:	f00b fac3 	bl	da08 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2482:	4995      	ldr	r1, [pc, #596]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2484:	4890      	ldr	r0, [pc, #576]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2486:	f7fe fa41 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    248a:	4995      	ldr	r1, [pc, #596]	; (26e0 <LEDDebug(LEDStruct&)+0x548>)
    248c:	488e      	ldr	r0, [pc, #568]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    248e:	f7fe fa2f 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2492:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    2496:	488c      	ldr	r0, [pc, #560]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2498:	f00b fab6 	bl	da08 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    249c:	498e      	ldr	r1, [pc, #568]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    249e:	488a      	ldr	r0, [pc, #552]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24a0:	f7fe fa34 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24a4:	498f      	ldr	r1, [pc, #572]	; (26e4 <LEDDebug(LEDStruct&)+0x54c>)
    24a6:	4888      	ldr	r0, [pc, #544]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24a8:	f7fe fa22 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24ac:	2300      	movs	r3, #0
    24ae:	220a      	movs	r2, #10
    24b0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    24b4:	4884      	ldr	r0, [pc, #528]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24b6:	f00b fa67 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    24ba:	4987      	ldr	r1, [pc, #540]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    24bc:	4882      	ldr	r0, [pc, #520]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24be:	f7fe fa25 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24c2:	4989      	ldr	r1, [pc, #548]	; (26e8 <LEDDebug(LEDStruct&)+0x550>)
    24c4:	4880      	ldr	r0, [pc, #512]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24c6:	f7fe fa13 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24ca:	2300      	movs	r3, #0
    24cc:	220a      	movs	r2, #10
    24ce:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    24d2:	487d      	ldr	r0, [pc, #500]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24d4:	f00b fa58 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    24d8:	497f      	ldr	r1, [pc, #508]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    24da:	487b      	ldr	r0, [pc, #492]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24dc:	f7fe fa16 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24e0:	4982      	ldr	r1, [pc, #520]	; (26ec <LEDDebug(LEDStruct&)+0x554>)
    24e2:	4879      	ldr	r0, [pc, #484]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24e4:	f7fe fa04 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24e8:	2300      	movs	r3, #0
    24ea:	220a      	movs	r2, #10
    24ec:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    24f0:	4875      	ldr	r0, [pc, #468]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24f2:	f00b fa49 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    24f6:	4978      	ldr	r1, [pc, #480]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    24f8:	4873      	ldr	r0, [pc, #460]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    24fa:	f7fe fa07 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24fe:	497c      	ldr	r1, [pc, #496]	; (26f0 <LEDDebug(LEDStruct&)+0x558>)
    2500:	4871      	ldr	r0, [pc, #452]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2502:	f7fe f9f5 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2506:	2300      	movs	r3, #0
    2508:	220a      	movs	r2, #10
    250a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    250e:	486e      	ldr	r0, [pc, #440]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2510:	f00b fa3a 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2514:	4970      	ldr	r1, [pc, #448]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2516:	486c      	ldr	r0, [pc, #432]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2518:	f7fe f9f8 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    251c:	4975      	ldr	r1, [pc, #468]	; (26f4 <LEDDebug(LEDStruct&)+0x55c>)
    251e:	486a      	ldr	r0, [pc, #424]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2520:	f7fe f9e6 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2524:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2528:	4867      	ldr	r0, [pc, #412]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    252a:	f00b fa6d 	bl	da08 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    252e:	496a      	ldr	r1, [pc, #424]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2530:	4865      	ldr	r0, [pc, #404]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2532:	f7fe f9eb 	bl	90c <Print::println(char const*)>
			break;
    2536:	e750      	b.n	23da <LEDDebug(LEDStruct&)+0x242>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    2538:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    253c:	2b07      	cmp	r3, #7
    253e:	f000 8505 	beq.w	2f4c <LEDDebug(LEDStruct&)+0xdb4>
    2542:	2b09      	cmp	r3, #9
    2544:	f000 852c 	beq.w	2fa0 <LEDDebug(LEDStruct&)+0xe08>
    2548:	2b06      	cmp	r3, #6
    254a:	d103      	bne.n	2554 <LEDDebug(LEDStruct&)+0x3bc>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    254c:	496a      	ldr	r1, [pc, #424]	; (26f8 <LEDDebug(LEDStruct&)+0x560>)
    254e:	485e      	ldr	r0, [pc, #376]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2550:	f7fe f9dc 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2554:	495f      	ldr	r1, [pc, #380]	; (26d4 <LEDDebug(LEDStruct&)+0x53c>)
    2556:	485c      	ldr	r0, [pc, #368]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2558:	f7fe f9ca 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    255c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2560:	4859      	ldr	r0, [pc, #356]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2562:	f00b fa51 	bl	da08 <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2566:	495c      	ldr	r1, [pc, #368]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2568:	4857      	ldr	r0, [pc, #348]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    256a:	f7fe f9cf 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    256e:	4963      	ldr	r1, [pc, #396]	; (26fc <LEDDebug(LEDStruct&)+0x564>)
    2570:	4855      	ldr	r0, [pc, #340]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2572:	f7fe f9bd 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2576:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    257a:	4853      	ldr	r0, [pc, #332]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    257c:	f00b fa44 	bl	da08 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    2580:	4955      	ldr	r1, [pc, #340]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2582:	4851      	ldr	r0, [pc, #324]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2584:	f7fe f9c2 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2588:	495d      	ldr	r1, [pc, #372]	; (2700 <LEDDebug(LEDStruct&)+0x568>)
    258a:	484f      	ldr	r0, [pc, #316]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    258c:	f7fe f9b0 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2590:	2300      	movs	r3, #0
    2592:	220a      	movs	r2, #10
    2594:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2598:	484b      	ldr	r0, [pc, #300]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    259a:	f00b f9f5 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    259e:	494e      	ldr	r1, [pc, #312]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    25a0:	4849      	ldr	r0, [pc, #292]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    25a2:	f7fe f9b3 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25a6:	4957      	ldr	r1, [pc, #348]	; (2704 <LEDDebug(LEDStruct&)+0x56c>)
    25a8:	4847      	ldr	r0, [pc, #284]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    25aa:	f7fe f9a1 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25ae:	2300      	movs	r3, #0
    25b0:	220a      	movs	r2, #10
    25b2:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    25b6:	4844      	ldr	r0, [pc, #272]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    25b8:	f00b f9e6 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    25bc:	4946      	ldr	r1, [pc, #280]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    25be:	4842      	ldr	r0, [pc, #264]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    25c0:	f7fe f9a4 	bl	90c <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    25c4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25c8:	2b09      	cmp	r3, #9
    25ca:	f47f af06 	bne.w	23da <LEDDebug(LEDStruct&)+0x242>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ce:	494e      	ldr	r1, [pc, #312]	; (2708 <LEDDebug(LEDStruct&)+0x570>)
    25d0:	483d      	ldr	r0, [pc, #244]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    25d2:	f7fe f98d 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25d6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    25da:	e6f5      	b.n	23c8 <LEDDebug(LEDStruct&)+0x230>
				Serial.println("\t||");
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    25dc:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25e0:	3b0b      	subs	r3, #11
    25e2:	2b05      	cmp	r3, #5
    25e4:	f200 8452 	bhi.w	2e8c <LEDDebug(LEDStruct&)+0xcf4>
    25e8:	e8df f013 	tbh	[pc, r3, lsl #1]
    25ec:	044c04d0 	.word	0x044c04d0
    25f0:	04c604cb 	.word	0x04c604cb
    25f4:	04bc04c1 	.word	0x04bc04c1
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    25f8:	4944      	ldr	r1, [pc, #272]	; (270c <LEDDebug(LEDStruct&)+0x574>)
    25fa:	4833      	ldr	r0, [pc, #204]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    25fc:	f7fe f986 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2600:	4934      	ldr	r1, [pc, #208]	; (26d4 <LEDDebug(LEDStruct&)+0x53c>)
    2602:	4831      	ldr	r0, [pc, #196]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2604:	f7fe f974 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2608:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    260c:	e78c      	b.n	2528 <LEDDebug(LEDStruct&)+0x390>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    260e:	4940      	ldr	r1, [pc, #256]	; (2710 <LEDDebug(LEDStruct&)+0x578>)
    2610:	482d      	ldr	r0, [pc, #180]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2612:	f7fe f97b 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2616:	493f      	ldr	r1, [pc, #252]	; (2714 <LEDDebug(LEDStruct&)+0x57c>)
    2618:	482b      	ldr	r0, [pc, #172]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    261a:	f7fe f969 	bl	8f0 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    261e:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2622:	2b01      	cmp	r3, #1
    2624:	f000 8498 	beq.w	2f58 <LEDDebug(LEDStruct&)+0xdc0>
    2628:	f0c0 84c0 	bcc.w	2fac <LEDDebug(LEDStruct&)+0xe14>
    262c:	2b02      	cmp	r3, #2
    262e:	d107      	bne.n	2640 <LEDDebug(LEDStruct&)+0x4a8>
    2630:	4939      	ldr	r1, [pc, #228]	; (2718 <LEDDebug(LEDStruct&)+0x580>)
    2632:	4825      	ldr	r0, [pc, #148]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2634:	f7fe f95c 	bl	8f0 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    2638:	4927      	ldr	r1, [pc, #156]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    263a:	4823      	ldr	r0, [pc, #140]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    263c:	f7fe f966 	bl	90c <Print::println(char const*)>
    2640:	4936      	ldr	r1, [pc, #216]	; (271c <LEDDebug(LEDStruct&)+0x584>)
    2642:	4821      	ldr	r0, [pc, #132]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2644:	f7fe f954 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2648:	2300      	movs	r3, #0
    264a:	220a      	movs	r2, #10
    264c:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    2650:	481d      	ldr	r0, [pc, #116]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2652:	f00b f999 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    2656:	4920      	ldr	r1, [pc, #128]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2658:	481b      	ldr	r0, [pc, #108]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    265a:	f7fe f957 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    265e:	4930      	ldr	r1, [pc, #192]	; (2720 <LEDDebug(LEDStruct&)+0x588>)
    2660:	4819      	ldr	r0, [pc, #100]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2662:	f7fe f945 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2666:	2300      	movs	r3, #0
    2668:	220a      	movs	r2, #10
    266a:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    266e:	4816      	ldr	r0, [pc, #88]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2670:	f00b f98a 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    2674:	4918      	ldr	r1, [pc, #96]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2676:	4814      	ldr	r0, [pc, #80]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2678:	f7fe f948 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    267c:	4929      	ldr	r1, [pc, #164]	; (2724 <LEDDebug(LEDStruct&)+0x58c>)
    267e:	4812      	ldr	r0, [pc, #72]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2680:	f7fe f936 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2684:	2300      	movs	r3, #0
    2686:	220a      	movs	r2, #10
    2688:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    268c:	480e      	ldr	r0, [pc, #56]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    268e:	f00b f97b 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2692:	4911      	ldr	r1, [pc, #68]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    2694:	480c      	ldr	r0, [pc, #48]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    2696:	f7fe f939 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    269a:	4923      	ldr	r1, [pc, #140]	; (2728 <LEDDebug(LEDStruct&)+0x590>)
    269c:	480a      	ldr	r0, [pc, #40]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    269e:	f7fe f927 	bl	8f0 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    26a2:	2300      	movs	r3, #0
    26a4:	220a      	movs	r2, #10
    26a6:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    26aa:	4807      	ldr	r0, [pc, #28]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    26ac:	f00b f96c 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    26b0:	4909      	ldr	r1, [pc, #36]	; (26d8 <LEDDebug(LEDStruct&)+0x540>)
    26b2:	4805      	ldr	r0, [pc, #20]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    26b4:	f7fe f92a 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26b8:	491c      	ldr	r1, [pc, #112]	; (272c <LEDDebug(LEDStruct&)+0x594>)
    26ba:	4803      	ldr	r0, [pc, #12]	; (26c8 <LEDDebug(LEDStruct&)+0x530>)
    26bc:	f7fe f918 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26c0:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    26c4:	e730      	b.n	2528 <LEDDebug(LEDStruct&)+0x390>
    26c6:	bf00      	nop
    26c8:	1fff878c 	.word	0x1fff878c
    26cc:	0000fa88 	.word	0x0000fa88
    26d0:	0000faac 	.word	0x0000faac
    26d4:	0000fad0 	.word	0x0000fad0
    26d8:	0000f9f4 	.word	0x0000f9f4
    26dc:	0000fae8 	.word	0x0000fae8
    26e0:	0000fafc 	.word	0x0000fafc
    26e4:	0000fb10 	.word	0x0000fb10
    26e8:	0000fb24 	.word	0x0000fb24
    26ec:	0000fb34 	.word	0x0000fb34
    26f0:	0000fb44 	.word	0x0000fb44
    26f4:	0000fb54 	.word	0x0000fb54
    26f8:	0000fb6c 	.word	0x0000fb6c
    26fc:	0000fbd8 	.word	0x0000fbd8
    2700:	0000fbe8 	.word	0x0000fbe8
    2704:	0000fbf8 	.word	0x0000fbf8
    2708:	0000fc08 	.word	0x0000fc08
    270c:	0000fd6c 	.word	0x0000fd6c
    2710:	0000fe14 	.word	0x0000fe14
    2714:	0000fe38 	.word	0x0000fe38
    2718:	0000fe4c 	.word	0x0000fe4c
    271c:	0000fe68 	.word	0x0000fe68
    2720:	0000fe80 	.word	0x0000fe80
    2724:	0000fe98 	.word	0x0000fe98
    2728:	0000feb0 	.word	0x0000feb0
    272c:	0000fecc 	.word	0x0000fecc
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    2730:	49ad      	ldr	r1, [pc, #692]	; (29e8 <LEDDebug(LEDStruct&)+0x850>)
    2732:	48ae      	ldr	r0, [pc, #696]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2734:	f7fe f8ea 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2738:	49ad      	ldr	r1, [pc, #692]	; (29f0 <LEDDebug(LEDStruct&)+0x858>)
    273a:	48ac      	ldr	r0, [pc, #688]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    273c:	f7fe f8d8 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2740:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2744:	48a9      	ldr	r0, [pc, #676]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2746:	f00b f95f 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    274a:	49aa      	ldr	r1, [pc, #680]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    274c:	48a7      	ldr	r0, [pc, #668]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    274e:	f7fe f8dd 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2752:	49a9      	ldr	r1, [pc, #676]	; (29f8 <LEDDebug(LEDStruct&)+0x860>)
    2754:	48a5      	ldr	r0, [pc, #660]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2756:	f7fe f8cb 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    275a:	2300      	movs	r3, #0
    275c:	220a      	movs	r2, #10
    275e:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    2762:	48a2      	ldr	r0, [pc, #648]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2764:	f00b f910 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    2768:	49a2      	ldr	r1, [pc, #648]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    276a:	48a0      	ldr	r0, [pc, #640]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    276c:	f7fe f8ce 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2770:	49a2      	ldr	r1, [pc, #648]	; (29fc <LEDDebug(LEDStruct&)+0x864>)
    2772:	489e      	ldr	r0, [pc, #632]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2774:	f7fe f8bc 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2778:	2300      	movs	r3, #0
    277a:	220a      	movs	r2, #10
    277c:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2780:	489a      	ldr	r0, [pc, #616]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2782:	f00b f901 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2786:	499b      	ldr	r1, [pc, #620]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2788:	4898      	ldr	r0, [pc, #608]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    278a:	f7fe f8bf 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    278e:	499c      	ldr	r1, [pc, #624]	; (2a00 <LEDDebug(LEDStruct&)+0x868>)
    2790:	4896      	ldr	r0, [pc, #600]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2792:	f7fe f8ad 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2796:	2300      	movs	r3, #0
    2798:	220a      	movs	r2, #10
    279a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    279e:	4893      	ldr	r0, [pc, #588]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27a0:	f00b f8f2 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    27a4:	4993      	ldr	r1, [pc, #588]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    27a6:	4891      	ldr	r0, [pc, #580]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27a8:	f7fe f8b0 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ac:	4995      	ldr	r1, [pc, #596]	; (2a04 <LEDDebug(LEDStruct&)+0x86c>)
    27ae:	488f      	ldr	r0, [pc, #572]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27b0:	f7fe f89e 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27b4:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    27b8:	e606      	b.n	23c8 <LEDDebug(LEDStruct&)+0x230>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    27ba:	4993      	ldr	r1, [pc, #588]	; (2a08 <LEDDebug(LEDStruct&)+0x870>)
    27bc:	488b      	ldr	r0, [pc, #556]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27be:	f7fe f8a5 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27c2:	4992      	ldr	r1, [pc, #584]	; (2a0c <LEDDebug(LEDStruct&)+0x874>)
    27c4:	4889      	ldr	r0, [pc, #548]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27c6:	f7fe f893 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27ca:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27ce:	4887      	ldr	r0, [pc, #540]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27d0:	f00b f91a 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    27d4:	4987      	ldr	r1, [pc, #540]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    27d6:	4885      	ldr	r0, [pc, #532]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27d8:	f7fe f898 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27dc:	498c      	ldr	r1, [pc, #560]	; (2a10 <LEDDebug(LEDStruct&)+0x878>)
    27de:	4883      	ldr	r0, [pc, #524]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27e0:	f7fe f886 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27e4:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    27e8:	4880      	ldr	r0, [pc, #512]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27ea:	f00b f90d 	bl	da08 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    27ee:	4981      	ldr	r1, [pc, #516]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    27f0:	487e      	ldr	r0, [pc, #504]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27f2:	f7fe f88b 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27f6:	4987      	ldr	r1, [pc, #540]	; (2a14 <LEDDebug(LEDStruct&)+0x87c>)
    27f8:	487c      	ldr	r0, [pc, #496]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    27fa:	f7fe f879 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27fe:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2802:	487a      	ldr	r0, [pc, #488]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2804:	f00b f900 	bl	da08 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2808:	497a      	ldr	r1, [pc, #488]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    280a:	4878      	ldr	r0, [pc, #480]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    280c:	f7fe f87e 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2810:	4981      	ldr	r1, [pc, #516]	; (2a18 <LEDDebug(LEDStruct&)+0x880>)
    2812:	4876      	ldr	r0, [pc, #472]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2814:	f7fe f86c 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2818:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    281c:	4873      	ldr	r0, [pc, #460]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    281e:	f00b f8f3 	bl	da08 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2822:	4974      	ldr	r1, [pc, #464]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2824:	4871      	ldr	r0, [pc, #452]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2826:	f7fe f871 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    282a:	497c      	ldr	r1, [pc, #496]	; (2a1c <LEDDebug(LEDStruct&)+0x884>)
    282c:	486f      	ldr	r0, [pc, #444]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    282e:	f7fe f85f 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2832:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2836:	e5c7      	b.n	23c8 <LEDDebug(LEDStruct&)+0x230>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2838:	4979      	ldr	r1, [pc, #484]	; (2a20 <LEDDebug(LEDStruct&)+0x888>)
    283a:	486c      	ldr	r0, [pc, #432]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    283c:	f7fe f866 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2840:	4978      	ldr	r1, [pc, #480]	; (2a24 <LEDDebug(LEDStruct&)+0x88c>)
    2842:	486a      	ldr	r0, [pc, #424]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2844:	f7fe f854 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2848:	2300      	movs	r3, #0
    284a:	220a      	movs	r2, #10
    284c:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2850:	4866      	ldr	r0, [pc, #408]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2852:	f00b f899 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2856:	4967      	ldr	r1, [pc, #412]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2858:	4864      	ldr	r0, [pc, #400]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    285a:	f7fe f857 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    285e:	4972      	ldr	r1, [pc, #456]	; (2a28 <LEDDebug(LEDStruct&)+0x890>)
    2860:	4862      	ldr	r0, [pc, #392]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2862:	f7fe f845 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2866:	2300      	movs	r3, #0
    2868:	220a      	movs	r2, #10
    286a:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    286e:	485f      	ldr	r0, [pc, #380]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2870:	f00b f88a 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2874:	495f      	ldr	r1, [pc, #380]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2876:	485d      	ldr	r0, [pc, #372]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2878:	f7fe f848 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    287c:	496b      	ldr	r1, [pc, #428]	; (2a2c <LEDDebug(LEDStruct&)+0x894>)
    287e:	485b      	ldr	r0, [pc, #364]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2880:	f7fe f836 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2884:	2300      	movs	r3, #0
    2886:	220a      	movs	r2, #10
    2888:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    288c:	4857      	ldr	r0, [pc, #348]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    288e:	f00b f87b 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2892:	4958      	ldr	r1, [pc, #352]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2894:	4855      	ldr	r0, [pc, #340]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2896:	f7fe f839 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    289a:	4965      	ldr	r1, [pc, #404]	; (2a30 <LEDDebug(LEDStruct&)+0x898>)
    289c:	4853      	ldr	r0, [pc, #332]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    289e:	f7fe f827 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28a2:	2300      	movs	r3, #0
    28a4:	220a      	movs	r2, #10
    28a6:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    28aa:	4850      	ldr	r0, [pc, #320]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28ac:	f00b f86c 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    28b0:	4950      	ldr	r1, [pc, #320]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    28b2:	484e      	ldr	r0, [pc, #312]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28b4:	f7fe f82a 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28b8:	495e      	ldr	r1, [pc, #376]	; (2a34 <LEDDebug(LEDStruct&)+0x89c>)
    28ba:	484c      	ldr	r0, [pc, #304]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28bc:	f7fe f818 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c0:	2300      	movs	r3, #0
    28c2:	220a      	movs	r2, #10
    28c4:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    28c8:	4848      	ldr	r0, [pc, #288]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28ca:	f00b f85d 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    28ce:	4949      	ldr	r1, [pc, #292]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    28d0:	4846      	ldr	r0, [pc, #280]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28d2:	f7fe f81b 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28d6:	4958      	ldr	r1, [pc, #352]	; (2a38 <LEDDebug(LEDStruct&)+0x8a0>)
    28d8:	4844      	ldr	r0, [pc, #272]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28da:	f7fe f809 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    28de:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    28e2:	e621      	b.n	2528 <LEDDebug(LEDStruct&)+0x390>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    28e4:	4955      	ldr	r1, [pc, #340]	; (2a3c <LEDDebug(LEDStruct&)+0x8a4>)
    28e6:	4841      	ldr	r0, [pc, #260]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28e8:	f7fe f810 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ec:	4954      	ldr	r1, [pc, #336]	; (2a40 <LEDDebug(LEDStruct&)+0x8a8>)
    28ee:	483f      	ldr	r0, [pc, #252]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28f0:	f7fd fffe 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28f4:	2300      	movs	r3, #0
    28f6:	220a      	movs	r2, #10
    28f8:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    28fc:	483b      	ldr	r0, [pc, #236]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    28fe:	f00b f843 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2902:	493c      	ldr	r1, [pc, #240]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2904:	4839      	ldr	r0, [pc, #228]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2906:	f7fe f801 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    290a:	494e      	ldr	r1, [pc, #312]	; (2a44 <LEDDebug(LEDStruct&)+0x8ac>)
    290c:	4837      	ldr	r0, [pc, #220]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    290e:	f7fd ffef 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2912:	2300      	movs	r3, #0
    2914:	220a      	movs	r2, #10
    2916:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    291a:	4834      	ldr	r0, [pc, #208]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    291c:	f00b f834 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2920:	4934      	ldr	r1, [pc, #208]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2922:	4832      	ldr	r0, [pc, #200]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2924:	f7fd fff2 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2928:	4947      	ldr	r1, [pc, #284]	; (2a48 <LEDDebug(LEDStruct&)+0x8b0>)
    292a:	4830      	ldr	r0, [pc, #192]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    292c:	f7fd ffe0 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2930:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2934:	e5f8      	b.n	2528 <LEDDebug(LEDStruct&)+0x390>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2936:	4945      	ldr	r1, [pc, #276]	; (2a4c <LEDDebug(LEDStruct&)+0x8b4>)
    2938:	482c      	ldr	r0, [pc, #176]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    293a:	f7fd ffe7 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    293e:	4944      	ldr	r1, [pc, #272]	; (2a50 <LEDDebug(LEDStruct&)+0x8b8>)
    2940:	482a      	ldr	r0, [pc, #168]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2942:	f7fd ffd5 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2946:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    294a:	4828      	ldr	r0, [pc, #160]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    294c:	f00b f85c 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2950:	4928      	ldr	r1, [pc, #160]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2952:	4826      	ldr	r0, [pc, #152]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2954:	f7fd ffda 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2958:	493e      	ldr	r1, [pc, #248]	; (2a54 <LEDDebug(LEDStruct&)+0x8bc>)
    295a:	4824      	ldr	r0, [pc, #144]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    295c:	f7fd ffc8 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2960:	2300      	movs	r3, #0
    2962:	220a      	movs	r2, #10
    2964:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2968:	4820      	ldr	r0, [pc, #128]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    296a:	f00b f80d 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    296e:	4921      	ldr	r1, [pc, #132]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    2970:	481e      	ldr	r0, [pc, #120]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2972:	f7fd ffcb 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2976:	4938      	ldr	r1, [pc, #224]	; (2a58 <LEDDebug(LEDStruct&)+0x8c0>)
    2978:	481c      	ldr	r0, [pc, #112]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    297a:	f7fd ffb9 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    297e:	2300      	movs	r3, #0
    2980:	220a      	movs	r2, #10
    2982:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2986:	4819      	ldr	r0, [pc, #100]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2988:	f00a fffe 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    298c:	4919      	ldr	r1, [pc, #100]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    298e:	4817      	ldr	r0, [pc, #92]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2990:	f7fd ffbc 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2994:	4931      	ldr	r1, [pc, #196]	; (2a5c <LEDDebug(LEDStruct&)+0x8c4>)
    2996:	4815      	ldr	r0, [pc, #84]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    2998:	f7fd ffaa 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    299c:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    29a0:	4812      	ldr	r0, [pc, #72]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    29a2:	f00b f831 	bl	da08 <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    29a6:	4913      	ldr	r1, [pc, #76]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    29a8:	4810      	ldr	r0, [pc, #64]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    29aa:	f7fd ffaf 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29ae:	492c      	ldr	r1, [pc, #176]	; (2a60 <LEDDebug(LEDStruct&)+0x8c8>)
    29b0:	480e      	ldr	r0, [pc, #56]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    29b2:	f7fd ff9d 	bl	8f0 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    29b6:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    29ba:	2b01      	cmp	r3, #1
    29bc:	f000 82c1 	beq.w	2f42 <LEDDebug(LEDStruct&)+0xdaa>
    29c0:	f0c0 82e9 	bcc.w	2f96 <LEDDebug(LEDStruct&)+0xdfe>
    29c4:	2b02      	cmp	r3, #2
    29c6:	d103      	bne.n	29d0 <LEDDebug(LEDStruct&)+0x838>
    29c8:	4926      	ldr	r1, [pc, #152]	; (2a64 <LEDDebug(LEDStruct&)+0x8cc>)
    29ca:	4808      	ldr	r0, [pc, #32]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    29cc:	f7fd ff90 	bl	8f0 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    29d0:	4908      	ldr	r1, [pc, #32]	; (29f4 <LEDDebug(LEDStruct&)+0x85c>)
    29d2:	4806      	ldr	r0, [pc, #24]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    29d4:	f7fd ff9a 	bl	90c <Print::println(char const*)>
    29d8:	4923      	ldr	r1, [pc, #140]	; (2a68 <LEDDebug(LEDStruct&)+0x8d0>)
    29da:	4804      	ldr	r0, [pc, #16]	; (29ec <LEDDebug(LEDStruct&)+0x854>)
    29dc:	f7fd ff88 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29e0:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    29e4:	e5a0      	b.n	2528 <LEDDebug(LEDStruct&)+0x390>
    29e6:	bf00      	nop
    29e8:	000100a8 	.word	0x000100a8
    29ec:	1fff878c 	.word	0x1fff878c
    29f0:	000100cc 	.word	0x000100cc
    29f4:	0000f9f4 	.word	0x0000f9f4
    29f8:	000100e4 	.word	0x000100e4
    29fc:	000100f8 	.word	0x000100f8
    2a00:	00010110 	.word	0x00010110
    2a04:	00010128 	.word	0x00010128
    2a08:	00010140 	.word	0x00010140
    2a0c:	0000fad0 	.word	0x0000fad0
    2a10:	00010164 	.word	0x00010164
    2a14:	0001017c 	.word	0x0001017c
    2a18:	00010194 	.word	0x00010194
    2a1c:	000101a8 	.word	0x000101a8
    2a20:	000101bc 	.word	0x000101bc
    2a24:	000101e0 	.word	0x000101e0
    2a28:	000101f8 	.word	0x000101f8
    2a2c:	00010210 	.word	0x00010210
    2a30:	00010228 	.word	0x00010228
    2a34:	00010240 	.word	0x00010240
    2a38:	00010254 	.word	0x00010254
    2a3c:	0001026c 	.word	0x0001026c
    2a40:	00010290 	.word	0x00010290
    2a44:	000102a0 	.word	0x000102a0
    2a48:	000102bc 	.word	0x000102bc
    2a4c:	000102d4 	.word	0x000102d4
    2a50:	000102f8 	.word	0x000102f8
    2a54:	00010310 	.word	0x00010310
    2a58:	00010328 	.word	0x00010328
    2a5c:	00010340 	.word	0x00010340
    2a60:	00010354 	.word	0x00010354
    2a64:	00010368 	.word	0x00010368
    2a68:	00010378 	.word	0x00010378
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2a6c:	498a      	ldr	r1, [pc, #552]	; (2c98 <LEDDebug(LEDStruct&)+0xb00>)
    2a6e:	488b      	ldr	r0, [pc, #556]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2a70:	f7fd ff4c 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a74:	498a      	ldr	r1, [pc, #552]	; (2ca0 <LEDDebug(LEDStruct&)+0xb08>)
    2a76:	4889      	ldr	r0, [pc, #548]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2a78:	f7fd ff3a 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a7c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2a80:	4886      	ldr	r0, [pc, #536]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2a82:	f00a ffc1 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2a86:	4987      	ldr	r1, [pc, #540]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2a88:	4884      	ldr	r0, [pc, #528]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2a8a:	f7fd ff3f 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a8e:	4986      	ldr	r1, [pc, #536]	; (2ca8 <LEDDebug(LEDStruct&)+0xb10>)
    2a90:	4882      	ldr	r0, [pc, #520]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2a92:	f7fd ff2d 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a96:	2300      	movs	r3, #0
    2a98:	220a      	movs	r2, #10
    2a9a:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    2a9e:	487f      	ldr	r0, [pc, #508]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2aa0:	f00a ff72 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2aa4:	497f      	ldr	r1, [pc, #508]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2aa6:	487d      	ldr	r0, [pc, #500]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2aa8:	f7fd ff30 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aac:	497f      	ldr	r1, [pc, #508]	; (2cac <LEDDebug(LEDStruct&)+0xb14>)
    2aae:	487b      	ldr	r0, [pc, #492]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ab0:	f7fd ff1e 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ab4:	2300      	movs	r3, #0
    2ab6:	220a      	movs	r2, #10
    2ab8:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    2abc:	4877      	ldr	r0, [pc, #476]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2abe:	f00a ff63 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    2ac2:	4978      	ldr	r1, [pc, #480]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2ac4:	4875      	ldr	r0, [pc, #468]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ac6:	f7fd ff21 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aca:	4979      	ldr	r1, [pc, #484]	; (2cb0 <LEDDebug(LEDStruct&)+0xb18>)
    2acc:	4873      	ldr	r0, [pc, #460]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ace:	f7fd ff0f 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ad2:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    2ad6:	4871      	ldr	r0, [pc, #452]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ad8:	f00a ff96 	bl	da08 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    2adc:	4971      	ldr	r1, [pc, #452]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2ade:	486f      	ldr	r0, [pc, #444]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ae0:	f7fd ff14 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae4:	4973      	ldr	r1, [pc, #460]	; (2cb4 <LEDDebug(LEDStruct&)+0xb1c>)
    2ae6:	486d      	ldr	r0, [pc, #436]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ae8:	f7fd ff02 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2aec:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    2af0:	e51a      	b.n	2528 <LEDDebug(LEDStruct&)+0x390>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2af2:	4971      	ldr	r1, [pc, #452]	; (2cb8 <LEDDebug(LEDStruct&)+0xb20>)
    2af4:	4869      	ldr	r0, [pc, #420]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2af6:	f7fd ff09 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2afa:	4969      	ldr	r1, [pc, #420]	; (2ca0 <LEDDebug(LEDStruct&)+0xb08>)
    2afc:	4867      	ldr	r0, [pc, #412]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2afe:	f7fd fef7 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b02:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2b06:	4865      	ldr	r0, [pc, #404]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b08:	f00a ff7e 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2b0c:	4965      	ldr	r1, [pc, #404]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2b0e:	4863      	ldr	r0, [pc, #396]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b10:	f7fd fefc 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b14:	4969      	ldr	r1, [pc, #420]	; (2cbc <LEDDebug(LEDStruct&)+0xb24>)
    2b16:	4861      	ldr	r0, [pc, #388]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b18:	f7fd feea 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b1c:	2300      	movs	r3, #0
    2b1e:	220a      	movs	r2, #10
    2b20:	f894 184c 	ldrb.w	r1, [r4, #2124]	; 0x84c
    2b24:	485d      	ldr	r0, [pc, #372]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b26:	f00a ff2f 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2b2a:	495e      	ldr	r1, [pc, #376]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2b2c:	485b      	ldr	r0, [pc, #364]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b2e:	f7fd feed 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b32:	4963      	ldr	r1, [pc, #396]	; (2cc0 <LEDDebug(LEDStruct&)+0xb28>)
    2b34:	4859      	ldr	r0, [pc, #356]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b36:	f7fd fedb 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b3a:	2300      	movs	r3, #0
    2b3c:	220a      	movs	r2, #10
    2b3e:	f894 184d 	ldrb.w	r1, [r4, #2125]	; 0x84d
    2b42:	4856      	ldr	r0, [pc, #344]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b44:	f00a ff20 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    2b48:	4956      	ldr	r1, [pc, #344]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2b4a:	4854      	ldr	r0, [pc, #336]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b4c:	f7fd fede 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b50:	495c      	ldr	r1, [pc, #368]	; (2cc4 <LEDDebug(LEDStruct&)+0xb2c>)
    2b52:	4852      	ldr	r0, [pc, #328]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b54:	f7fd fecc 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b58:	f894 184e 	ldrb.w	r1, [r4, #2126]	; 0x84e
    2b5c:	e434      	b.n	23c8 <LEDDebug(LEDStruct&)+0x230>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    2b5e:	495a      	ldr	r1, [pc, #360]	; (2cc8 <LEDDebug(LEDStruct&)+0xb30>)
    2b60:	e54b      	b.n	25fa <LEDDebug(LEDStruct&)+0x462>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    2b62:	495a      	ldr	r1, [pc, #360]	; (2ccc <LEDDebug(LEDStruct&)+0xb34>)
    2b64:	484d      	ldr	r0, [pc, #308]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b66:	f7fd fed1 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b6a:	494d      	ldr	r1, [pc, #308]	; (2ca0 <LEDDebug(LEDStruct&)+0xb08>)
    2b6c:	484b      	ldr	r0, [pc, #300]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b6e:	f7fd febf 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b72:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2b76:	4849      	ldr	r0, [pc, #292]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b78:	f00a ff46 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2b7c:	4949      	ldr	r1, [pc, #292]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2b7e:	4847      	ldr	r0, [pc, #284]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b80:	f7fd fec4 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b84:	4952      	ldr	r1, [pc, #328]	; (2cd0 <LEDDebug(LEDStruct&)+0xb38>)
    2b86:	4845      	ldr	r0, [pc, #276]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b88:	f7fd feb2 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b8c:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2b90:	e41a      	b.n	23c8 <LEDDebug(LEDStruct&)+0x230>
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2b92:	4950      	ldr	r1, [pc, #320]	; (2cd4 <LEDDebug(LEDStruct&)+0xb3c>)
    2b94:	4841      	ldr	r0, [pc, #260]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b96:	f7fd feb9 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b9a:	4941      	ldr	r1, [pc, #260]	; (2ca0 <LEDDebug(LEDStruct&)+0xb08>)
    2b9c:	483f      	ldr	r0, [pc, #252]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2b9e:	f7fd fea7 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ba2:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2ba6:	483d      	ldr	r0, [pc, #244]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2ba8:	f00a ff2e 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2bac:	493d      	ldr	r1, [pc, #244]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2bae:	483b      	ldr	r0, [pc, #236]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bb0:	f7fd feac 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb4:	4948      	ldr	r1, [pc, #288]	; (2cd8 <LEDDebug(LEDStruct&)+0xb40>)
    2bb6:	4839      	ldr	r0, [pc, #228]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bb8:	f7fd fe9a 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bbc:	2300      	movs	r3, #0
    2bbe:	220a      	movs	r2, #10
    2bc0:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2bc4:	4835      	ldr	r0, [pc, #212]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bc6:	f00a fedf 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2bca:	4936      	ldr	r1, [pc, #216]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2bcc:	4833      	ldr	r0, [pc, #204]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bce:	f7fd fe9d 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bd2:	4942      	ldr	r1, [pc, #264]	; (2cdc <LEDDebug(LEDStruct&)+0xb44>)
    2bd4:	4831      	ldr	r0, [pc, #196]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bd6:	f7fd fe8b 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bda:	2300      	movs	r3, #0
    2bdc:	220a      	movs	r2, #10
    2bde:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2be2:	482e      	ldr	r0, [pc, #184]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2be4:	f00a fed0 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2be8:	492e      	ldr	r1, [pc, #184]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2bea:	482c      	ldr	r0, [pc, #176]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bec:	f7fd fe8e 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bf0:	493b      	ldr	r1, [pc, #236]	; (2ce0 <LEDDebug(LEDStruct&)+0xb48>)
    2bf2:	482a      	ldr	r0, [pc, #168]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2bf4:	f7fd fe7c 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bf8:	2300      	movs	r3, #0
    2bfa:	220a      	movs	r2, #10
    2bfc:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2c00:	4826      	ldr	r0, [pc, #152]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c02:	f00a fec1 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2c06:	4927      	ldr	r1, [pc, #156]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2c08:	4824      	ldr	r0, [pc, #144]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c0a:	f7fd fe7f 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c0e:	4935      	ldr	r1, [pc, #212]	; (2ce4 <LEDDebug(LEDStruct&)+0xb4c>)
    2c10:	4822      	ldr	r0, [pc, #136]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c12:	f7fd fe6d 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c16:	2300      	movs	r3, #0
    2c18:	220a      	movs	r2, #10
    2c1a:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2c1e:	481f      	ldr	r0, [pc, #124]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c20:	f00a feb2 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2c24:	491f      	ldr	r1, [pc, #124]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2c26:	481d      	ldr	r0, [pc, #116]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c28:	f7fd fe70 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c2c:	492e      	ldr	r1, [pc, #184]	; (2ce8 <LEDDebug(LEDStruct&)+0xb50>)
    2c2e:	481b      	ldr	r0, [pc, #108]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c30:	f7fd fe5e 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c34:	2300      	movs	r3, #0
    2c36:	220a      	movs	r2, #10
    2c38:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2c3c:	4817      	ldr	r0, [pc, #92]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c3e:	f00a fea3 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2c42:	4918      	ldr	r1, [pc, #96]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2c44:	4815      	ldr	r0, [pc, #84]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c46:	f7fd fe61 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c4a:	4928      	ldr	r1, [pc, #160]	; (2cec <LEDDebug(LEDStruct&)+0xb54>)
    2c4c:	4813      	ldr	r0, [pc, #76]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c4e:	f7fd fe4f 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c52:	2300      	movs	r3, #0
    2c54:	220a      	movs	r2, #10
    2c56:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2c5a:	4810      	ldr	r0, [pc, #64]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c5c:	f00a fe94 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    2c60:	4910      	ldr	r1, [pc, #64]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2c62:	480e      	ldr	r0, [pc, #56]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c64:	f7fd fe52 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c68:	4921      	ldr	r1, [pc, #132]	; (2cf0 <LEDDebug(LEDStruct&)+0xb58>)
    2c6a:	480c      	ldr	r0, [pc, #48]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c6c:	f7fd fe40 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c70:	2300      	movs	r3, #0
    2c72:	220a      	movs	r2, #10
    2c74:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2c78:	4808      	ldr	r0, [pc, #32]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c7a:	f00a fe85 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    2c7e:	4909      	ldr	r1, [pc, #36]	; (2ca4 <LEDDebug(LEDStruct&)+0xb0c>)
    2c80:	4806      	ldr	r0, [pc, #24]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c82:	f7fd fe43 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c86:	491b      	ldr	r1, [pc, #108]	; (2cf4 <LEDDebug(LEDStruct&)+0xb5c>)
    2c88:	4804      	ldr	r0, [pc, #16]	; (2c9c <LEDDebug(LEDStruct&)+0xb04>)
    2c8a:	f7fd fe31 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c8e:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2c92:	f7ff bb99 	b.w	23c8 <LEDDebug(LEDStruct&)+0x230>
    2c96:	bf00      	nop
    2c98:	00010388 	.word	0x00010388
    2c9c:	1fff878c 	.word	0x1fff878c
    2ca0:	0000fad0 	.word	0x0000fad0
    2ca4:	0000f9f4 	.word	0x0000f9f4
    2ca8:	000103ac 	.word	0x000103ac
    2cac:	000103c4 	.word	0x000103c4
    2cb0:	000103e0 	.word	0x000103e0
    2cb4:	000103fc 	.word	0x000103fc
    2cb8:	00010414 	.word	0x00010414
    2cbc:	00010438 	.word	0x00010438
    2cc0:	00010450 	.word	0x00010450
    2cc4:	00010468 	.word	0x00010468
    2cc8:	0000fdb4 	.word	0x0000fdb4
    2ccc:	0000fdd8 	.word	0x0000fdd8
    2cd0:	0000fdfc 	.word	0x0000fdfc
    2cd4:	0000fee4 	.word	0x0000fee4
    2cd8:	0000ff08 	.word	0x0000ff08
    2cdc:	0000ff1c 	.word	0x0000ff1c
    2ce0:	0000ff30 	.word	0x0000ff30
    2ce4:	0000ff44 	.word	0x0000ff44
    2ce8:	0000ff58 	.word	0x0000ff58
    2cec:	0000ff6c 	.word	0x0000ff6c
    2cf0:	0000ff80 	.word	0x0000ff80
    2cf4:	0000ff94 	.word	0x0000ff94
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2cf8:	49ae      	ldr	r1, [pc, #696]	; (2fb4 <LEDDebug(LEDStruct&)+0xe1c>)
    2cfa:	48af      	ldr	r0, [pc, #700]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2cfc:	f7fd fe06 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d00:	49ae      	ldr	r1, [pc, #696]	; (2fbc <LEDDebug(LEDStruct&)+0xe24>)
    2d02:	48ad      	ldr	r0, [pc, #692]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d04:	f7fd fdf4 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d08:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2d0c:	48aa      	ldr	r0, [pc, #680]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d0e:	f00a fe7b 	bl	da08 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2d12:	49ab      	ldr	r1, [pc, #684]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2d14:	48a8      	ldr	r0, [pc, #672]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d16:	f7fd fdf9 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d1a:	49aa      	ldr	r1, [pc, #680]	; (2fc4 <LEDDebug(LEDStruct&)+0xe2c>)
    2d1c:	48a6      	ldr	r0, [pc, #664]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d1e:	f7fd fde7 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d22:	2300      	movs	r3, #0
    2d24:	220a      	movs	r2, #10
    2d26:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    2d2a:	48a3      	ldr	r0, [pc, #652]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d2c:	f00a fe2c 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    2d30:	49a3      	ldr	r1, [pc, #652]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2d32:	48a1      	ldr	r0, [pc, #644]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d34:	f7fd fdea 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d38:	49a3      	ldr	r1, [pc, #652]	; (2fc8 <LEDDebug(LEDStruct&)+0xe30>)
    2d3a:	489f      	ldr	r0, [pc, #636]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d3c:	f7fd fdd8 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d40:	2300      	movs	r3, #0
    2d42:	220a      	movs	r2, #10
    2d44:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2d48:	489b      	ldr	r0, [pc, #620]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d4a:	f00a fe1d 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    2d4e:	499c      	ldr	r1, [pc, #624]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2d50:	4899      	ldr	r0, [pc, #612]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d52:	f7fd fddb 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d56:	499d      	ldr	r1, [pc, #628]	; (2fcc <LEDDebug(LEDStruct&)+0xe34>)
    2d58:	4897      	ldr	r0, [pc, #604]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d5a:	f7fd fdc9 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d5e:	2300      	movs	r3, #0
    2d60:	220a      	movs	r2, #10
    2d62:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2d66:	4894      	ldr	r0, [pc, #592]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d68:	f00a fe0e 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2d6c:	4994      	ldr	r1, [pc, #592]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2d6e:	4892      	ldr	r0, [pc, #584]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d70:	f7fd fdcc 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d74:	4996      	ldr	r1, [pc, #600]	; (2fd0 <LEDDebug(LEDStruct&)+0xe38>)
    2d76:	4890      	ldr	r0, [pc, #576]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d78:	f7fd fdba 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d7c:	2300      	movs	r3, #0
    2d7e:	220a      	movs	r2, #10
    2d80:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2d84:	488c      	ldr	r0, [pc, #560]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d86:	f00a fdff 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    2d8a:	498d      	ldr	r1, [pc, #564]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2d8c:	488a      	ldr	r0, [pc, #552]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d8e:	f7fd fdbd 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d92:	4990      	ldr	r1, [pc, #576]	; (2fd4 <LEDDebug(LEDStruct&)+0xe3c>)
    2d94:	4888      	ldr	r0, [pc, #544]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2d96:	f7fd fdab 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d9a:	2300      	movs	r3, #0
    2d9c:	220a      	movs	r2, #10
    2d9e:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2da2:	4885      	ldr	r0, [pc, #532]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2da4:	f00a fdf0 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2da8:	4985      	ldr	r1, [pc, #532]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2daa:	4883      	ldr	r0, [pc, #524]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2dac:	f7fd fdae 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2db0:	4989      	ldr	r1, [pc, #548]	; (2fd8 <LEDDebug(LEDStruct&)+0xe40>)
    2db2:	4881      	ldr	r0, [pc, #516]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2db4:	f7fd fd9c 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2db8:	2300      	movs	r3, #0
    2dba:	220a      	movs	r2, #10
    2dbc:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2dc0:	487d      	ldr	r0, [pc, #500]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2dc2:	f00a fde1 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2dc6:	497e      	ldr	r1, [pc, #504]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2dc8:	487b      	ldr	r0, [pc, #492]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2dca:	f7fd fd9f 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dce:	4983      	ldr	r1, [pc, #524]	; (2fdc <LEDDebug(LEDStruct&)+0xe44>)
    2dd0:	4879      	ldr	r0, [pc, #484]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2dd2:	f7fd fd8d 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2dd6:	2300      	movs	r3, #0
    2dd8:	220a      	movs	r2, #10
    2dda:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2dde:	4876      	ldr	r0, [pc, #472]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2de0:	f00a fdd2 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2de4:	4976      	ldr	r1, [pc, #472]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2de6:	4874      	ldr	r0, [pc, #464]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2de8:	f7fd fd90 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dec:	497c      	ldr	r1, [pc, #496]	; (2fe0 <LEDDebug(LEDStruct&)+0xe48>)
    2dee:	4872      	ldr	r0, [pc, #456]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2df0:	f7fd fd7e 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2df4:	2300      	movs	r3, #0
    2df6:	220a      	movs	r2, #10
    2df8:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    2dfc:	486e      	ldr	r0, [pc, #440]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2dfe:	f00a fdc3 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    2e02:	496f      	ldr	r1, [pc, #444]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2e04:	486c      	ldr	r0, [pc, #432]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e06:	f7fd fd81 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e0a:	4976      	ldr	r1, [pc, #472]	; (2fe4 <LEDDebug(LEDStruct&)+0xe4c>)
    2e0c:	486a      	ldr	r0, [pc, #424]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e0e:	f7fd fd6f 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e12:	2300      	movs	r3, #0
    2e14:	220a      	movs	r2, #10
    2e16:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2e1a:	4867      	ldr	r0, [pc, #412]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e1c:	f00a fdb4 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2e20:	4967      	ldr	r1, [pc, #412]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2e22:	4865      	ldr	r0, [pc, #404]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e24:	f7fd fd72 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e28:	496f      	ldr	r1, [pc, #444]	; (2fe8 <LEDDebug(LEDStruct&)+0xe50>)
    2e2a:	4863      	ldr	r0, [pc, #396]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e2c:	f7fd fd60 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e30:	2300      	movs	r3, #0
    2e32:	220a      	movs	r2, #10
    2e34:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2e38:	485f      	ldr	r0, [pc, #380]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e3a:	f00a fda5 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    2e3e:	4960      	ldr	r1, [pc, #384]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2e40:	485d      	ldr	r0, [pc, #372]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e42:	f7fd fd63 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e46:	4969      	ldr	r1, [pc, #420]	; (2fec <LEDDebug(LEDStruct&)+0xe54>)
    2e48:	485b      	ldr	r0, [pc, #364]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e4a:	f7fd fd51 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e4e:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2e52:	f7ff bab9 	b.w	23c8 <LEDDebug(LEDStruct&)+0x230>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2e56:	4966      	ldr	r1, [pc, #408]	; (2ff0 <LEDDebug(LEDStruct&)+0xe58>)
    2e58:	f7ff bbcf 	b.w	25fa <LEDDebug(LEDStruct&)+0x462>
			Serial.println("\t||");
			break;


		default:
			Serial.println("");
    2e5c:	4965      	ldr	r1, [pc, #404]	; (2ff4 <LEDDebug(LEDStruct&)+0xe5c>)
    2e5e:	4856      	ldr	r0, [pc, #344]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e60:	f7fd fd54 	bl	90c <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2e64:	4964      	ldr	r1, [pc, #400]	; (2ff8 <LEDDebug(LEDStruct&)+0xe60>)
    2e66:	4854      	ldr	r0, [pc, #336]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e68:	f7fd fd50 	bl	90c <Print::println(char const*)>
			Serial.println("");
    2e6c:	4961      	ldr	r1, [pc, #388]	; (2ff4 <LEDDebug(LEDStruct&)+0xe5c>)
    2e6e:	4852      	ldr	r0, [pc, #328]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e70:	f7fd fd4c 	bl	90c <Print::println(char const*)>
			break;
    2e74:	f7ff bab1 	b.w	23da <LEDDebug(LEDStruct&)+0x242>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2e78:	4960      	ldr	r1, [pc, #384]	; (2ffc <LEDDebug(LEDStruct&)+0xe64>)
    2e7a:	484f      	ldr	r0, [pc, #316]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e7c:	f7fd fd46 	bl	90c <Print::println(char const*)>
    2e80:	f7ff b9a2 	b.w	21c8 <LEDDebug(LEDStruct&)+0x30>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2e84:	495e      	ldr	r1, [pc, #376]	; (3000 <LEDDebug(LEDStruct&)+0xe68>)
    2e86:	484c      	ldr	r0, [pc, #304]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e88:	f7fd fd40 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e8c:	495d      	ldr	r1, [pc, #372]	; (3004 <LEDDebug(LEDStruct&)+0xe6c>)
    2e8e:	484a      	ldr	r0, [pc, #296]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e90:	f7fd fd2e 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e94:	2300      	movs	r3, #0
    2e96:	220a      	movs	r2, #10
    2e98:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2e9c:	4846      	ldr	r0, [pc, #280]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2e9e:	f00a fd73 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2ea2:	4947      	ldr	r1, [pc, #284]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2ea4:	4844      	ldr	r0, [pc, #272]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2ea6:	f7fd fd31 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2eaa:	4957      	ldr	r1, [pc, #348]	; (3008 <LEDDebug(LEDStruct&)+0xe70>)
    2eac:	4842      	ldr	r0, [pc, #264]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2eae:	f7fd fd1f 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2eb2:	2300      	movs	r3, #0
    2eb4:	220a      	movs	r2, #10
    2eb6:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2eba:	483f      	ldr	r0, [pc, #252]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2ebc:	f00a fd64 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2ec0:	493f      	ldr	r1, [pc, #252]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2ec2:	483d      	ldr	r0, [pc, #244]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2ec4:	f7fd fd22 	bl	90c <Print::println(char const*)>
			if (!leds.fire_sync) {
    2ec8:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2ecc:	b1d5      	cbz	r5, 2f04 <LEDDebug(LEDStruct&)+0xd6c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ece:	494f      	ldr	r1, [pc, #316]	; (300c <LEDDebug(LEDStruct&)+0xe74>)
    2ed0:	4839      	ldr	r0, [pc, #228]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2ed2:	f7fd fd0d 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ed6:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2eda:	4837      	ldr	r0, [pc, #220]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2edc:	f00a fd94 	bl	da08 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2ee0:	4937      	ldr	r1, [pc, #220]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2ee2:	4835      	ldr	r0, [pc, #212]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2ee4:	f7fd fd12 	bl	90c <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2ee8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2eec:	3b0f      	subs	r3, #15
    2eee:	2b01      	cmp	r3, #1
    2ef0:	f63f aa73 	bhi.w	23da <LEDDebug(LEDStruct&)+0x242>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ef4:	4946      	ldr	r1, [pc, #280]	; (3010 <LEDDebug(LEDStruct&)+0xe78>)
    2ef6:	4830      	ldr	r0, [pc, #192]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2ef8:	f7fd fcfa 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2efc:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2f00:	f7ff ba62 	b.w	23c8 <LEDDebug(LEDStruct&)+0x230>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f04:	4943      	ldr	r1, [pc, #268]	; (3014 <LEDDebug(LEDStruct&)+0xe7c>)
    2f06:	482c      	ldr	r0, [pc, #176]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f08:	f7fd fcf2 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f0c:	462b      	mov	r3, r5
    2f0e:	220a      	movs	r2, #10
    2f10:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2f14:	4828      	ldr	r0, [pc, #160]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f16:	f00a fd37 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2f1a:	4929      	ldr	r1, [pc, #164]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2f1c:	4826      	ldr	r0, [pc, #152]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f1e:	f7fd fcf5 	bl	90c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f22:	493d      	ldr	r1, [pc, #244]	; (3018 <LEDDebug(LEDStruct&)+0xe80>)
    2f24:	4824      	ldr	r0, [pc, #144]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f26:	f7fd fce3 	bl	8f0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f2a:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2f2e:	4822      	ldr	r0, [pc, #136]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f30:	462b      	mov	r3, r5
    2f32:	220a      	movs	r2, #10
    2f34:	f00a fd28 	bl	d988 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2f38:	4921      	ldr	r1, [pc, #132]	; (2fc0 <LEDDebug(LEDStruct&)+0xe28>)
    2f3a:	481f      	ldr	r0, [pc, #124]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f3c:	f7fd fce6 	bl	90c <Print::println(char const*)>
    2f40:	e7c5      	b.n	2ece <LEDDebug(LEDStruct&)+0xd36>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f42:	4936      	ldr	r1, [pc, #216]	; (301c <LEDDebug(LEDStruct&)+0xe84>)
    2f44:	481c      	ldr	r0, [pc, #112]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f46:	f7fd fcd3 	bl	8f0 <Print::write(char const*)>
    2f4a:	e541      	b.n	29d0 <LEDDebug(LEDStruct&)+0x838>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    2f4c:	4934      	ldr	r1, [pc, #208]	; (3020 <LEDDebug(LEDStruct&)+0xe88>)
    2f4e:	481a      	ldr	r0, [pc, #104]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f50:	f7fd fcdc 	bl	90c <Print::println(char const*)>
    2f54:	f7ff bafe 	b.w	2554 <LEDDebug(LEDStruct&)+0x3bc>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2f58:	4932      	ldr	r1, [pc, #200]	; (3024 <LEDDebug(LEDStruct&)+0xe8c>)
    2f5a:	4817      	ldr	r0, [pc, #92]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f5c:	f7fd fcd6 	bl	90c <Print::println(char const*)>
    2f60:	f7ff bb6e 	b.w	2640 <LEDDebug(LEDStruct&)+0x4a8>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2f64:	4930      	ldr	r1, [pc, #192]	; (3028 <LEDDebug(LEDStruct&)+0xe90>)
    2f66:	4814      	ldr	r0, [pc, #80]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f68:	f7fd fcd0 	bl	90c <Print::println(char const*)>
    2f6c:	e78e      	b.n	2e8c <LEDDebug(LEDStruct&)+0xcf4>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2f6e:	492f      	ldr	r1, [pc, #188]	; (302c <LEDDebug(LEDStruct&)+0xe94>)
    2f70:	4811      	ldr	r0, [pc, #68]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f72:	f7fd fccb 	bl	90c <Print::println(char const*)>
    2f76:	e789      	b.n	2e8c <LEDDebug(LEDStruct&)+0xcf4>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2f78:	492d      	ldr	r1, [pc, #180]	; (3030 <LEDDebug(LEDStruct&)+0xe98>)
    2f7a:	480f      	ldr	r0, [pc, #60]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f7c:	f7fd fcc6 	bl	90c <Print::println(char const*)>
    2f80:	e784      	b.n	2e8c <LEDDebug(LEDStruct&)+0xcf4>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2f82:	492c      	ldr	r1, [pc, #176]	; (3034 <LEDDebug(LEDStruct&)+0xe9c>)
    2f84:	480c      	ldr	r0, [pc, #48]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f86:	f7fd fcc1 	bl	90c <Print::println(char const*)>
    2f8a:	e77f      	b.n	2e8c <LEDDebug(LEDStruct&)+0xcf4>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2f8c:	492a      	ldr	r1, [pc, #168]	; (3038 <LEDDebug(LEDStruct&)+0xea0>)
    2f8e:	480a      	ldr	r0, [pc, #40]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f90:	f7fd fcbc 	bl	90c <Print::println(char const*)>
    2f94:	e77a      	b.n	2e8c <LEDDebug(LEDStruct&)+0xcf4>
    2f96:	4929      	ldr	r1, [pc, #164]	; (303c <LEDDebug(LEDStruct&)+0xea4>)
    2f98:	4807      	ldr	r0, [pc, #28]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2f9a:	f7fd fca9 	bl	8f0 <Print::write(char const*)>
    2f9e:	e517      	b.n	29d0 <LEDDebug(LEDStruct&)+0x838>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    2fa0:	4927      	ldr	r1, [pc, #156]	; (3040 <LEDDebug(LEDStruct&)+0xea8>)
    2fa2:	4805      	ldr	r0, [pc, #20]	; (2fb8 <LEDDebug(LEDStruct&)+0xe20>)
    2fa4:	f7fd fcb2 	bl	90c <Print::println(char const*)>
    2fa8:	f7ff bad4 	b.w	2554 <LEDDebug(LEDStruct&)+0x3bc>
    2fac:	4925      	ldr	r1, [pc, #148]	; (3044 <LEDDebug(LEDStruct&)+0xeac>)
    2fae:	f7ff bb40 	b.w	2632 <LEDDebug(LEDStruct&)+0x49a>
    2fb2:	bf00      	nop
    2fb4:	0000ffa8 	.word	0x0000ffa8
    2fb8:	1fff878c 	.word	0x1fff878c
    2fbc:	0000fad0 	.word	0x0000fad0
    2fc0:	0000f9f4 	.word	0x0000f9f4
    2fc4:	0000ffcc 	.word	0x0000ffcc
    2fc8:	0000ffe0 	.word	0x0000ffe0
    2fcc:	0000fff4 	.word	0x0000fff4
    2fd0:	00010008 	.word	0x00010008
    2fd4:	0001001c 	.word	0x0001001c
    2fd8:	00010030 	.word	0x00010030
    2fdc:	00010044 	.word	0x00010044
    2fe0:	00010058 	.word	0x00010058
    2fe4:	0001006c 	.word	0x0001006c
    2fe8:	00010080 	.word	0x00010080
    2fec:	00010094 	.word	0x00010094
    2ff0:	0000fd90 	.word	0x0000fd90
    2ff4:	0000fb0c 	.word	0x0000fb0c
    2ff8:	00010508 	.word	0x00010508
    2ffc:	0000f9bc 	.word	0x0000f9bc
    3000:	0000fc8c 	.word	0x0000fc8c
    3004:	0000fcf8 	.word	0x0000fcf8
    3008:	0000fd0c 	.word	0x0000fd0c
    300c:	0000fd48 	.word	0x0000fd48
    3010:	0000fd58 	.word	0x0000fd58
    3014:	0000fd20 	.word	0x0000fd20
    3018:	0000fd34 	.word	0x0000fd34
    301c:	00010370 	.word	0x00010370
    3020:	0000fb90 	.word	0x0000fb90
    3024:	0000fe5c 	.word	0x0000fe5c
    3028:	0000fc44 	.word	0x0000fc44
    302c:	0000fc20 	.word	0x0000fc20
    3030:	0000fcd4 	.word	0x0000fcd4
    3034:	0000fcb0 	.word	0x0000fcb0
    3038:	0000fc68 	.word	0x0000fc68
    303c:	0000fe58 	.word	0x0000fe58
    3040:	0000fbb4 	.word	0x0000fbb4
    3044:	0000fe54 	.word	0x0000fe54

00003048 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    3048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    304c:	b08d      	sub	sp, #52	; 0x34
    304e:	2134      	movs	r1, #52	; 0x34
    3050:	4605      	mov	r5, r0
    3052:	9009      	str	r0, [sp, #36]	; 0x24
    3054:	4846      	ldr	r0, [pc, #280]	; (3170 <change_palette(LEDStruct&) [clone .part.11]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    3056:	4c47      	ldr	r4, [pc, #284]	; (3174 <change_palette(LEDStruct&) [clone .part.11]+0x12c>)
    3058:	f00a fa82 	bl	d560 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    305c:	4846      	ldr	r0, [pc, #280]	; (3178 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    305e:	f00a fc83 	bl	d968 <Print::println()>
    3062:	2133      	movs	r1, #51	; 0x33
    3064:	4845      	ldr	r0, [pc, #276]	; (317c <change_palette(LEDStruct&) [clone .part.11]+0x134>)
    3066:	f00a fa7b 	bl	d560 <usb_serial_write>
    306a:	4843      	ldr	r0, [pc, #268]	; (3178 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    306c:	f00a fc7c 	bl	d968 <Print::println()>
    3070:	2133      	movs	r1, #51	; 0x33
    3072:	4843      	ldr	r0, [pc, #268]	; (3180 <change_palette(LEDStruct&) [clone .part.11]+0x138>)
    3074:	f00a fa74 	bl	d560 <usb_serial_write>
    3078:	483f      	ldr	r0, [pc, #252]	; (3178 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    307a:	f00a fc75 	bl	d968 <Print::println()>
    307e:	4841      	ldr	r0, [pc, #260]	; (3184 <change_palette(LEDStruct&) [clone .part.11]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    3080:	4a41      	ldr	r2, [pc, #260]	; (3188 <change_palette(LEDStruct&) [clone .part.11]+0x140>)
    3082:	8803      	ldrh	r3, [r0, #0]
    3084:	7811      	ldrb	r1, [r2, #0]
    3086:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    308a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    308e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3092:	3319      	adds	r3, #25
    3094:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3096:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    309a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    309c:	fb12 f201 	smulbb	r2, r2, r1
    30a0:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    30a2:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    30a4:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    30a8:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    30ac:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    30ae:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    30b2:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    30b4:	3701      	adds	r7, #1
        } while ( u.index != 255);
    30b6:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    30b8:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    30ba:	d1f8      	bne.n	30ae <change_palette(LEDStruct&) [clone .part.11]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    30bc:	f8d8 3000 	ldr.w	r3, [r8]
    30c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    30c2:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    30c4:	ea4f 6913 	mov.w	r9, r3, lsr #24
    30c8:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    30cc:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    30d0:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    30d4:	f04f 33ff 	mov.w	r3, #4294967295
    30d8:	9207      	str	r2, [sp, #28]
    30da:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    30dc:	2400      	movs	r4, #0
    30de:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    30e0:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    30e4:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    30e6:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    30ea:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    30ee:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    30f2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    30f4:	b2f9      	uxtb	r1, r7
    30f6:	f3c5 6507 	ubfx	r5, r5, #24, #8
    30fa:	9104      	str	r1, [sp, #16]
    30fc:	b2e9      	uxtb	r1, r5
    30fe:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3100:	fa5f f18c 	uxtb.w	r1, ip
    3104:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3106:	9908      	ldr	r1, [sp, #32]
    3108:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    310a:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    310c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3110:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3114:	d80c      	bhi.n	3130 <change_palette(LEDStruct&) [clone .part.11]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3116:	9906      	ldr	r1, [sp, #24]
    3118:	458c      	cmp	ip, r1
    311a:	dc07      	bgt.n	312c <change_palette(LEDStruct&) [clone .part.11]+0xe4>
    311c:	290f      	cmp	r1, #15
    311e:	d005      	beq.n	312c <change_palette(LEDStruct&) [clone .part.11]+0xe4>
                    istart8 = lastSlotUsed + 1;
    3120:	3101      	adds	r1, #1
    3122:	b2c9      	uxtb	r1, r1
    3124:	428b      	cmp	r3, r1
    3126:	9103      	str	r1, [sp, #12]
    3128:	bf38      	it	cc
    312a:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    312c:	b259      	sxtb	r1, r3
    312e:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3130:	a90b      	add	r1, sp, #44	; 0x2c
    3132:	9100      	str	r1, [sp, #0]
    3134:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3136:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    313a:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    313e:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3142:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    3146:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    314a:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    314e:	f008 f963 	bl	b418 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3152:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3154:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3158:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    315c:	46ca      	mov	sl, r9
    315e:	d1bf      	bne.n	30e0 <change_palette(LEDStruct&) [clone .part.11]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    3160:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3162:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    3166:	f7fe fd09 	bl	1b7c <print_palette(unsigned char)>
	}
}
    316a:	b00d      	add	sp, #52	; 0x34
    316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3170:	00010550 	.word	0x00010550
    3174:	00011090 	.word	0x00011090
    3178:	1fff878c 	.word	0x1fff878c
    317c:	00010588 	.word	0x00010588
    3180:	000105bc 	.word	0x000105bc
    3184:	1fff8784 	.word	0x1fff8784
    3188:	1fff8754 	.word	0x1fff8754

0000318c <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    318c:	4b24      	ldr	r3, [pc, #144]	; (3220 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    318e:	4a25      	ldr	r2, [pc, #148]	; (3224 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    3190:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    3192:	2100      	movs	r1, #0
    3194:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3196:	2b07      	cmp	r3, #7
    3198:	d809      	bhi.n	31ae <juggle_update(LEDStruct&)+0x22>
    319a:	e8df f003 	tbb	[pc, r3]
    319e:	1c13      	.short	0x1c13
    31a0:	04342e25 	.word	0x04342e25
    31a4:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    31a6:	4b20      	ldr	r3, [pc, #128]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    31a8:	881b      	ldrh	r3, [r3, #0]
    31aa:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    31ae:	f7fe bff3 	b.w	2198 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    31b2:	4b1d      	ldr	r3, [pc, #116]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    31b4:	881b      	ldrh	r3, [r3, #0]
    31b6:	3300      	adds	r3, #0
    31b8:	bf18      	it	ne
    31ba:	2301      	movne	r3, #1
    31bc:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    31c0:	f7fe bfea 	b.w	2198 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    31c4:	4b18      	ldr	r3, [pc, #96]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    31c6:	881b      	ldrh	r3, [r3, #0]
    31c8:	3300      	adds	r3, #0
    31ca:	bf18      	it	ne
    31cc:	2301      	movne	r3, #1
    31ce:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    31d2:	f7fe bfe1 	b.w	2198 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    31d6:	4b14      	ldr	r3, [pc, #80]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    31d8:	881b      	ldrh	r3, [r3, #0]
    31da:	3300      	adds	r3, #0
    31dc:	bf18      	it	ne
    31de:	2301      	movne	r3, #1
    31e0:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    31e4:	f7fe bfd8 	b.w	2198 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    31e8:	4b0f      	ldr	r3, [pc, #60]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    31ea:	881b      	ldrh	r3, [r3, #0]
    31ec:	3300      	adds	r3, #0
    31ee:	bf18      	it	ne
    31f0:	2301      	movne	r3, #1
    31f2:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    31f6:	f7fe bfcf 	b.w	2198 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    31fa:	4b0b      	ldr	r3, [pc, #44]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    31fc:	881b      	ldrh	r3, [r3, #0]
    31fe:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3202:	f7fe bfc9 	b.w	2198 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    3206:	4b08      	ldr	r3, [pc, #32]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    3208:	881b      	ldrh	r3, [r3, #0]
    320a:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    320e:	f7fe bfc3 	b.w	2198 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    3212:	4b05      	ldr	r3, [pc, #20]	; (3228 <juggle_update(LEDStruct&)+0x9c>)
    3214:	881b      	ldrh	r3, [r3, #0]
    3216:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    321a:	f7fe bfbd 	b.w	2198 <LEDDebug(LEDStruct&)>
    321e:	bf00      	nop
    3220:	1fff9e7c 	.word	0x1fff9e7c
    3224:	1fff9619 	.word	0x1fff9619
    3228:	1fff951a 	.word	0x1fff951a

0000322c <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3230:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    3234:	b089      	sub	sp, #36	; 0x24
    3236:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3238:	2b00      	cmp	r3, #0
    323a:	f040 809d 	bne.w	3378 <juggle(LEDStruct&)+0x14c>
    323e:	4ed4      	ldr	r6, [pc, #848]	; (3590 <juggle(LEDStruct&)+0x364>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3240:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3244:	8833      	ldrh	r3, [r6, #0]
    3246:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    324a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    324e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3252:	3019      	adds	r0, #25
    3254:	b280      	uxth	r0, r0
    3256:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    325a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    325e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3262:	3519      	adds	r5, #25
    3264:	b2ad      	uxth	r5, r5
    3266:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    326a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    326e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3272:	3319      	adds	r3, #25
    3274:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3278:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    327c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3280:	3319      	adds	r3, #25
    3282:	b29b      	uxth	r3, r3
    3284:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3288:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    328c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3290:	3119      	adds	r1, #25
    3292:	b289      	uxth	r1, r1
    3294:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3298:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    329c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    32a0:	3219      	adds	r2, #25
    32a2:	b292      	uxth	r2, r2
    32a4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    32a8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    32ac:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    32b0:	f10e 0e19 	add.w	lr, lr, #25
    32b4:	fa1f fe8e 	uxth.w	lr, lr
    32b8:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    32bc:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    32c0:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    32c4:	f10c 0c19 	add.w	ip, ip, #25
    32c8:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    32cc:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    32d0:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    32d4:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    32d8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    32dc:	b2ff      	uxtb	r7, r7
    32de:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    32e2:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    32e6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    32ea:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    32ee:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    32f0:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    32f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    32f6:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    32fa:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    32fe:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3302:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3306:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3308:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    330c:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3314:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3318:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    331a:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    331e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3322:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3326:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3328:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    332c:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3330:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3334:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3338:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    333a:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    333e:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3342:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3346:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    334a:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    334c:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    334e:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3352:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3356:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    335a:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    335e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3362:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3366:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    336a:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    336e:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3372:	2b00      	cmp	r3, #0
    3374:	f040 8177 	bne.w	3666 <juggle(LEDStruct&)+0x43a>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3378:	4b86      	ldr	r3, [pc, #536]	; (3594 <juggle(LEDStruct&)+0x368>)
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	2b00      	cmp	r3, #0
    337e:	f040 817d 	bne.w	367c <juggle(LEDStruct&)+0x450>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    3382:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3386:	b1d3      	cbz	r3, 33be <juggle(LEDStruct&)+0x192>
    3388:	4b83      	ldr	r3, [pc, #524]	; (3598 <juggle(LEDStruct&)+0x36c>)
    338a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    338e:	2200      	movs	r2, #0
    3390:	f103 0027 	add.w	r0, r3, #39	; 0x27
    3394:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    3398:	e001      	b.n	339e <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    339a:	4283      	cmp	r3, r0
    339c:	d00f      	beq.n	33be <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    339e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    33a2:	428a      	cmp	r2, r1
    33a4:	d1f9      	bne.n	339a <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    33a6:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    33aa:	4a7c      	ldr	r2, [pc, #496]	; (359c <juggle(LEDStruct&)+0x370>)
    33ac:	fba2 2303 	umull	r2, r3, r2, r3
    33b0:	08db      	lsrs	r3, r3, #3
    33b2:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    33b4:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    33b6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    33ba:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    33be:	2196      	movs	r1, #150	; 0x96
    33c0:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    33c4:	4620      	mov	r0, r4
    33c6:	f008 f8b9 	bl	b53c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    33ca:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    33ce:	2900      	cmp	r1, #0
    33d0:	f040 80ec 	bne.w	35ac <juggle(LEDStruct&)+0x380>
		if (leds.juggle_phased) {
    33d4:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    33d8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    33dc:	2f00      	cmp	r7, #0
    33de:	f000 81ac 	beq.w	373a <juggle(LEDStruct&)+0x50e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    33e2:	2b00      	cmp	r3, #0
    33e4:	f000 8273 	beq.w	38ce <juggle(LEDStruct&)+0x6a2>
    33e8:	486d      	ldr	r0, [pc, #436]	; (35a0 <juggle(LEDStruct&)+0x374>)
    33ea:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    33ee:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 35a4 <juggle(LEDStruct&)+0x378>
    33f2:	9003      	str	r0, [sp, #12]
    33f4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 35a8 <juggle(LEDStruct&)+0x37c>
    33f8:	460f      	mov	r7, r1
    33fa:	f10d 0a1c 	add.w	sl, sp, #28
    33fe:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3402:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3406:	e05d      	b.n	34c4 <juggle(LEDStruct&)+0x298>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3408:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    340c:	443b      	add	r3, r7
    340e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3410:	f8d9 1000 	ldr.w	r1, [r9]
    3414:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3416:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3418:	9904      	ldr	r1, [sp, #16]
    341a:	bf98      	it	ls
    341c:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    341e:	f44f 708c 	mov.w	r0, #280	; 0x118
    3422:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3426:	bf98      	it	ls
    3428:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    342a:	fb03 f301 	mul.w	r3, r3, r1
    342e:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3430:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3432:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3436:	d503      	bpl.n	3440 <juggle(LEDStruct&)+0x214>
    3438:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    343c:	3107      	adds	r1, #7
    343e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3440:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3442:	9e03      	ldr	r6, [sp, #12]
    3444:	5c36      	ldrb	r6, [r6, r0]
    3446:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    344a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    344e:	fb06 0101 	mla	r1, r6, r1, r0
    3452:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3454:	041e      	lsls	r6, r3, #16
    3456:	bf48      	it	mi
    3458:	4249      	negmi	r1, r1
    345a:	b20e      	sxth	r6, r1
    345c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3460:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3464:	9100      	str	r1, [sp, #0]
    3466:	4650      	mov	r0, sl
    3468:	4641      	mov	r1, r8
    346a:	f008 f8c7 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    346e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3472:	2296      	movs	r2, #150	; 0x96
    3474:	b29b      	uxth	r3, r3
    3476:	fb02 f303 	mul.w	r3, r2, r3
    347a:	0c1b      	lsrs	r3, r3, #16
    347c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3480:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3482:	5ce2      	ldrb	r2, [r4, r3]
    3484:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3488:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    348c:	54e2      	strb	r2, [r4, r3]
    348e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3492:	784a      	ldrb	r2, [r1, #1]
    3494:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3498:	704a      	strb	r2, [r1, #1]
    349a:	788b      	ldrb	r3, [r1, #2]
    349c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    34a0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    34a4:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    34a6:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    34aa:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    34ae:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    34b2:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    34b4:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    34b6:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    34b8:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    34ba:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    34bc:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    34c0:	f240 8205 	bls.w	38ce <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    34c4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    34c8:	2900      	cmp	r1, #0
    34ca:	d19d      	bne.n	3408 <juggle(LEDStruct&)+0x1dc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    34cc:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    34d0:	443b      	add	r3, r7
    34d2:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34d4:	f8d9 1000 	ldr.w	r1, [r9]
    34d8:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    34da:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    34dc:	9905      	ldr	r1, [sp, #20]
    34de:	bf98      	it	ls
    34e0:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    34e2:	f44f 708c 	mov.w	r0, #280	; 0x118
    34e6:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    34ea:	bf98      	it	ls
    34ec:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    34ee:	fb03 f301 	mul.w	r3, r3, r1
    34f2:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    34f4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    34f6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    34fa:	d503      	bpl.n	3504 <juggle(LEDStruct&)+0x2d8>
    34fc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3500:	3107      	adds	r1, #7
    3502:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3504:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3506:	9e03      	ldr	r6, [sp, #12]
    3508:	5c36      	ldrb	r6, [r6, r0]
    350a:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    350e:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3512:	fb06 0101 	mla	r1, r6, r1, r0
    3516:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3518:	041e      	lsls	r6, r3, #16
    351a:	bf48      	it	mi
    351c:	4249      	negmi	r1, r1
    351e:	b20e      	sxth	r6, r1
    3520:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3524:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3528:	9100      	str	r1, [sp, #0]
    352a:	4650      	mov	r0, sl
    352c:	4641      	mov	r1, r8
    352e:	f008 f865 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3532:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3536:	b29b      	uxth	r3, r3
    3538:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    353c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3540:	0c1b      	lsrs	r3, r3, #16
    3542:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3546:	18e1      	adds	r1, r4, r3
    3548:	5ce2      	ldrb	r2, [r4, r3]
    354a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    354e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3552:	54e2      	strb	r2, [r4, r3]
    3554:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3558:	784a      	ldrb	r2, [r1, #1]
    355a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    355e:	704a      	strb	r2, [r1, #1]
    3560:	788b      	ldrb	r3, [r1, #2]
    3562:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3566:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    356a:	708b      	strb	r3, [r1, #2]
    356c:	4622      	mov	r2, r4
    356e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3570:	7819      	ldrb	r1, [r3, #0]
    3572:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3576:	7859      	ldrb	r1, [r3, #1]
    3578:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    357c:	7899      	ldrb	r1, [r3, #2]
    357e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3582:	3303      	adds	r3, #3
LEDStruct curr_over_leds;
LEDStruct next_over_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    3584:	429d      	cmp	r5, r3
    3586:	f1a2 0203 	sub.w	r2, r2, #3
    358a:	d1f1      	bne.n	3570 <juggle(LEDStruct&)+0x344>
    358c:	e78b      	b.n	34a6 <juggle(LEDStruct&)+0x27a>
    358e:	bf00      	nop
    3590:	1fff8784 	.word	0x1fff8784
    3594:	1fff9619 	.word	0x1fff9619
    3598:	1fff875b 	.word	0x1fff875b
    359c:	cccccccd 	.word	0xcccccccd
    35a0:	00011234 	.word	0x00011234
    35a4:	1fffb184 	.word	0x1fffb184
    35a8:	00010afc 	.word	0x00010afc
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    35ac:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    35b0:	2e00      	cmp	r6, #0
    35b2:	d067      	beq.n	3684 <juggle(LEDStruct&)+0x458>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35b4:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    35b8:	2b00      	cmp	r3, #0
    35ba:	f000 8188 	beq.w	38ce <juggle(LEDStruct&)+0x6a2>
    35be:	2500      	movs	r5, #0
    35c0:	f10d 0a1c 	add.w	sl, sp, #28
    35c4:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    35c8:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    35cc:	e039      	b.n	3642 <juggle(LEDStruct&)+0x416>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    35ce:	fb06 f305 	mul.w	r3, r6, r5
    35d2:	2900      	cmp	r1, #0
    35d4:	f000 81b5 	beq.w	3942 <juggle(LEDStruct&)+0x716>
    35d8:	2295      	movs	r2, #149	; 0x95
    35da:	2100      	movs	r1, #0
    35dc:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    35e0:	f7fc ff68 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    35e4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    35e8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35ec:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35f0:	9100      	str	r1, [sp, #0]
    35f2:	4607      	mov	r7, r0
    35f4:	4641      	mov	r1, r8
    35f6:	4650      	mov	r0, sl
    35f8:	f008 f800 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35fc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3600:	18e1      	adds	r1, r4, r3
    3602:	5ce2      	ldrb	r2, [r4, r3]
    3604:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3608:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    360c:	54e2      	strb	r2, [r4, r3]
    360e:	784a      	ldrb	r2, [r1, #1]
    3610:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3614:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3618:	704a      	strb	r2, [r1, #1]
    361a:	788b      	ldrb	r3, [r1, #2]
    361c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3620:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3624:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3626:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    362a:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    362e:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3632:	3501      	adds	r5, #1
    3634:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3636:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3638:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    363a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    363e:	f240 8146 	bls.w	38ce <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    3642:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3646:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    364a:	2b00      	cmp	r3, #0
    364c:	d1bf      	bne.n	35ce <juggle(LEDStruct&)+0x3a2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    364e:	2900      	cmp	r1, #0
    3650:	f000 81b8 	beq.w	39c4 <juggle(LEDStruct&)+0x798>
    3654:	4619      	mov	r1, r3
    3656:	2295      	movs	r2, #149	; 0x95
    3658:	fb06 f305 	mul.w	r3, r6, r5
    365c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3660:	f7fc ff6a 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3664:	e7be      	b.n	35e4 <juggle(LEDStruct&)+0x3b8>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3666:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    366a:	fa02 f300 	lsl.w	r3, r2, r0
    366e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3672:	4bd0      	ldr	r3, [pc, #832]	; (39b4 <juggle(LEDStruct&)+0x788>)
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	2b00      	cmp	r3, #0
    3678:	f43f ae83 	beq.w	3382 <juggle(LEDStruct&)+0x156>
    367c:	4620      	mov	r0, r4
    367e:	f7ff fd85 	bl	318c <juggle_update(LEDStruct&)>
    3682:	e67e      	b.n	3382 <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3684:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3688:	2900      	cmp	r1, #0
    368a:	f000 8120 	beq.w	38ce <juggle(LEDStruct&)+0x6a2>
    368e:	f10d 0a1c 	add.w	sl, sp, #28
    3692:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3696:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    369a:	e03c      	b.n	3716 <juggle(LEDStruct&)+0x4ea>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    369c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    36a0:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    36a4:	4431      	add	r1, r6
    36a6:	2b00      	cmp	r3, #0
    36a8:	f000 8114 	beq.w	38d4 <juggle(LEDStruct&)+0x6a8>
    36ac:	2300      	movs	r3, #0
    36ae:	4408      	add	r0, r1
    36b0:	2295      	movs	r2, #149	; 0x95
    36b2:	4619      	mov	r1, r3
    36b4:	f7fc fefe 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36b8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    36bc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    36c0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    36c4:	9100      	str	r1, [sp, #0]
    36c6:	4607      	mov	r7, r0
    36c8:	4641      	mov	r1, r8
    36ca:	4650      	mov	r0, sl
    36cc:	f007 ff96 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    36d0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    36d4:	18e1      	adds	r1, r4, r3
    36d6:	5ce2      	ldrb	r2, [r4, r3]
    36d8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    36dc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36e0:	54e2      	strb	r2, [r4, r3]
    36e2:	784a      	ldrb	r2, [r1, #1]
    36e4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    36e8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36ec:	704a      	strb	r2, [r1, #1]
    36ee:	788b      	ldrb	r3, [r1, #2]
    36f0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    36f4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36f8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    36fa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    36fe:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3702:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3706:	3601      	adds	r6, #1
    3708:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    370a:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    370c:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    370e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3712:	f240 80dc 	bls.w	38ce <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    3716:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    371a:	2b00      	cmp	r3, #0
    371c:	d1be      	bne.n	369c <juggle(LEDStruct&)+0x470>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    371e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3722:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3726:	4431      	add	r1, r6
    3728:	4408      	add	r0, r1
    372a:	2a00      	cmp	r2, #0
    372c:	f000 8185 	beq.w	3a3a <juggle(LEDStruct&)+0x80e>
    3730:	4619      	mov	r1, r3
    3732:	2295      	movs	r2, #149	; 0x95
    3734:	f7fc ff00 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3738:	e7be      	b.n	36b8 <juggle(LEDStruct&)+0x48c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    373a:	2b00      	cmp	r3, #0
    373c:	f000 80c7 	beq.w	38ce <juggle(LEDStruct&)+0x6a2>
    3740:	4b9d      	ldr	r3, [pc, #628]	; (39b8 <juggle(LEDStruct&)+0x78c>)
    3742:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3746:	f8df 9274 	ldr.w	r9, [pc, #628]	; 39bc <juggle(LEDStruct&)+0x790>
    374a:	9303      	str	r3, [sp, #12]
    374c:	f8df b270 	ldr.w	fp, [pc, #624]	; 39c0 <juggle(LEDStruct&)+0x794>
    3750:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3754:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3758:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    375c:	e057      	b.n	380e <juggle(LEDStruct&)+0x5e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    375e:	f8d9 3000 	ldr.w	r3, [r9]
    3762:	9306      	str	r3, [sp, #24]
	return ret;
    3764:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3766:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    376a:	fb0a f303 	mul.w	r3, sl, r3
    376e:	0209      	lsls	r1, r1, #8
    3770:	fb03 f301 	mul.w	r3, r3, r1
    3774:	0379      	lsls	r1, r7, #13
    3776:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    377a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    377c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    377e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3782:	d503      	bpl.n	378c <juggle(LEDStruct&)+0x560>
    3784:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3788:	3307      	adds	r3, #7
    378a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    378c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    378e:	9e03      	ldr	r6, [sp, #12]
    3790:	5c36      	ldrb	r6, [r6, r0]
    3792:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3796:	f3c3 0346 	ubfx	r3, r3, #1, #7
    379a:	fb06 0303 	mla	r3, r6, r3, r0
    379e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    37a0:	040e      	lsls	r6, r1, #16
    37a2:	bf48      	it	mi
    37a4:	425b      	negmi	r3, r3
    37a6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    37aa:	b21e      	sxth	r6, r3
    37ac:	a805      	add	r0, sp, #20
    37ae:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    37b2:	9100      	str	r1, [sp, #0]
    37b4:	4641      	mov	r1, r8
    37b6:	f007 ff21 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    37ba:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    37be:	2296      	movs	r2, #150	; 0x96
    37c0:	b29b      	uxth	r3, r3
    37c2:	fb02 f303 	mul.w	r3, r2, r3
    37c6:	0c1b      	lsrs	r3, r3, #16
    37c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    37cc:	18e1      	adds	r1, r4, r3
    37ce:	5ce2      	ldrb	r2, [r4, r3]
    37d0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    37d4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    37d8:	54e2      	strb	r2, [r4, r3]
    37da:	f89d 3015 	ldrb.w	r3, [sp, #21]
    37de:	784a      	ldrb	r2, [r1, #1]
    37e0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    37e4:	704a      	strb	r2, [r1, #1]
    37e6:	788b      	ldrb	r3, [r1, #2]
    37e8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    37ec:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    37f0:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    37f2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    37f6:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    37fa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    37fe:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3800:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3802:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3804:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3806:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3808:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    380c:	d95f      	bls.n	38ce <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    380e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3812:	2b00      	cmp	r3, #0
    3814:	d1a3      	bne.n	375e <juggle(LEDStruct&)+0x532>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3816:	f8d9 3000 	ldr.w	r3, [r9]
    381a:	9307      	str	r3, [sp, #28]
	return ret;
    381c:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    381e:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3822:	fb0a f101 	mul.w	r1, sl, r1
    3826:	021b      	lsls	r3, r3, #8
    3828:	fb03 f301 	mul.w	r3, r3, r1
    382c:	0379      	lsls	r1, r7, #13
    382e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    3832:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3834:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3836:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    383a:	d503      	bpl.n	3844 <juggle(LEDStruct&)+0x618>
    383c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3840:	3307      	adds	r3, #7
    3842:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3844:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3846:	9e03      	ldr	r6, [sp, #12]
    3848:	5c36      	ldrb	r6, [r6, r0]
    384a:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    384e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3852:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    3856:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3858:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    385a:	bf48      	it	mi
    385c:	425b      	negmi	r3, r3
    385e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3862:	b21e      	sxth	r6, r3
    3864:	a805      	add	r0, sp, #20
    3866:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    386a:	9100      	str	r1, [sp, #0]
    386c:	4641      	mov	r1, r8
    386e:	f007 fec5 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3872:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3876:	b29b      	uxth	r3, r3
    3878:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    387c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3880:	0c1b      	lsrs	r3, r3, #16
    3882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3886:	18e1      	adds	r1, r4, r3
    3888:	5ce2      	ldrb	r2, [r4, r3]
    388a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    388e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3892:	54e2      	strb	r2, [r4, r3]
    3894:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3898:	784a      	ldrb	r2, [r1, #1]
    389a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    389e:	704a      	strb	r2, [r1, #1]
    38a0:	788b      	ldrb	r3, [r1, #2]
    38a2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    38a6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    38aa:	708b      	strb	r3, [r1, #2]
    38ac:	4622      	mov	r2, r4
    38ae:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38b0:	7819      	ldrb	r1, [r3, #0]
    38b2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    38b6:	7859      	ldrb	r1, [r3, #1]
    38b8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    38bc:	7899      	ldrb	r1, [r3, #2]
    38be:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    38c2:	3303      	adds	r3, #3
    38c4:	42ab      	cmp	r3, r5
    38c6:	f1a2 0203 	sub.w	r2, r2, #3
    38ca:	d1f1      	bne.n	38b0 <juggle(LEDStruct&)+0x684>
    38cc:	e791      	b.n	37f2 <juggle(LEDStruct&)+0x5c6>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    38ce:	b009      	add	sp, #36	; 0x24
    38d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    38d4:	4408      	add	r0, r1
    38d6:	224a      	movs	r2, #74	; 0x4a
    38d8:	4619      	mov	r1, r3
    38da:	f7fc fdeb 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    38de:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    38e2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    38e6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    38ea:	9100      	str	r1, [sp, #0]
    38ec:	4607      	mov	r7, r0
    38ee:	4641      	mov	r1, r8
    38f0:	4650      	mov	r0, sl
    38f2:	f007 fe83 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38f6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    38fa:	18e1      	adds	r1, r4, r3
    38fc:	5ce2      	ldrb	r2, [r4, r3]
    38fe:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3902:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3906:	54e2      	strb	r2, [r4, r3]
    3908:	f89d 301d 	ldrb.w	r3, [sp, #29]
    390c:	784a      	ldrb	r2, [r1, #1]
    390e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3912:	704a      	strb	r2, [r1, #1]
    3914:	788b      	ldrb	r3, [r1, #2]
    3916:	f89d 201e 	ldrb.w	r2, [sp, #30]
    391a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    391e:	708b      	strb	r3, [r1, #2]
    3920:	4622      	mov	r2, r4
    3922:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3924:	7819      	ldrb	r1, [r3, #0]
    3926:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    392a:	7859      	ldrb	r1, [r3, #1]
    392c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3930:	7899      	ldrb	r1, [r3, #2]
    3932:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3936:	3303      	adds	r3, #3
    3938:	42ab      	cmp	r3, r5
    393a:	f1a2 0203 	sub.w	r2, r2, #3
    393e:	d1f1      	bne.n	3924 <juggle(LEDStruct&)+0x6f8>
    3940:	e6db      	b.n	36fa <juggle(LEDStruct&)+0x4ce>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3942:	224a      	movs	r2, #74	; 0x4a
    3944:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3948:	f7fc fdb4 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    394c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3950:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3954:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3958:	9100      	str	r1, [sp, #0]
    395a:	4607      	mov	r7, r0
    395c:	4641      	mov	r1, r8
    395e:	4650      	mov	r0, sl
    3960:	f007 fe4c 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3964:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3968:	18e1      	adds	r1, r4, r3
    396a:	5ce2      	ldrb	r2, [r4, r3]
    396c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3970:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3974:	54e2      	strb	r2, [r4, r3]
    3976:	f89d 301d 	ldrb.w	r3, [sp, #29]
    397a:	784a      	ldrb	r2, [r1, #1]
    397c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3980:	704a      	strb	r2, [r1, #1]
    3982:	788b      	ldrb	r3, [r1, #2]
    3984:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3988:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    398c:	708b      	strb	r3, [r1, #2]
    398e:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3992:	4623      	mov	r3, r4
    3994:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3996:	7819      	ldrb	r1, [r3, #0]
    3998:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    399c:	7859      	ldrb	r1, [r3, #1]
    399e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    39a2:	7899      	ldrb	r1, [r3, #2]
    39a4:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    39a8:	3303      	adds	r3, #3
    39aa:	4283      	cmp	r3, r0
    39ac:	f1a2 0203 	sub.w	r2, r2, #3
    39b0:	d1f1      	bne.n	3996 <juggle(LEDStruct&)+0x76a>
    39b2:	e638      	b.n	3626 <juggle(LEDStruct&)+0x3fa>
    39b4:	1fff9619 	.word	0x1fff9619
    39b8:	00011234 	.word	0x00011234
    39bc:	1fffb184 	.word	0x1fffb184
    39c0:	00010afc 	.word	0x00010afc
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    39c4:	fb06 f305 	mul.w	r3, r6, r5
    39c8:	224a      	movs	r2, #74	; 0x4a
    39ca:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    39ce:	f7fc fdb3 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    39d2:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39d6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    39da:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    39de:	9100      	str	r1, [sp, #0]
    39e0:	4607      	mov	r7, r0
    39e2:	4641      	mov	r1, r8
    39e4:	4650      	mov	r0, sl
    39e6:	f007 fe09 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39ea:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    39ee:	18e1      	adds	r1, r4, r3
    39f0:	5ce2      	ldrb	r2, [r4, r3]
    39f2:	f89d 001c 	ldrb.w	r0, [sp, #28]
    39f6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    39fa:	54e2      	strb	r2, [r4, r3]
    39fc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3a00:	784a      	ldrb	r2, [r1, #1]
    3a02:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a06:	704a      	strb	r2, [r1, #1]
    3a08:	788b      	ldrb	r3, [r1, #2]
    3a0a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3a0e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a12:	708b      	strb	r3, [r1, #2]
    3a14:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3a18:	4623      	mov	r3, r4
    3a1a:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a1c:	7819      	ldrb	r1, [r3, #0]
    3a1e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3a22:	7859      	ldrb	r1, [r3, #1]
    3a24:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a28:	7899      	ldrb	r1, [r3, #2]
    3a2a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a2e:	3303      	adds	r3, #3
    3a30:	4283      	cmp	r3, r0
    3a32:	f1a2 0203 	sub.w	r2, r2, #3
    3a36:	d1f1      	bne.n	3a1c <juggle(LEDStruct&)+0x7f0>
    3a38:	e5f5      	b.n	3626 <juggle(LEDStruct&)+0x3fa>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3a3a:	4613      	mov	r3, r2
    3a3c:	4611      	mov	r1, r2
    3a3e:	224a      	movs	r2, #74	; 0x4a
    3a40:	f7fc fd7a 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3a44:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3a48:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a4c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a50:	9100      	str	r1, [sp, #0]
    3a52:	4607      	mov	r7, r0
    3a54:	4641      	mov	r1, r8
    3a56:	4650      	mov	r0, sl
    3a58:	f007 fdd0 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a5c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3a60:	18e1      	adds	r1, r4, r3
    3a62:	5ce2      	ldrb	r2, [r4, r3]
    3a64:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3a68:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a6c:	54e2      	strb	r2, [r4, r3]
    3a6e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3a72:	784a      	ldrb	r2, [r1, #1]
    3a74:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a78:	704a      	strb	r2, [r1, #1]
    3a7a:	788b      	ldrb	r3, [r1, #2]
    3a7c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3a80:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a84:	708b      	strb	r3, [r1, #2]
    3a86:	4622      	mov	r2, r4
    3a88:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a8a:	7819      	ldrb	r1, [r3, #0]
    3a8c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3a90:	7859      	ldrb	r1, [r3, #1]
    3a92:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a96:	7899      	ldrb	r1, [r3, #2]
    3a98:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a9c:	3303      	adds	r3, #3
    3a9e:	42ab      	cmp	r3, r5
    3aa0:	f1a2 0203 	sub.w	r2, r2, #3
    3aa4:	d1f1      	bne.n	3a8a <juggle(LEDStruct&)+0x85e>
    3aa6:	e628      	b.n	36fa <juggle(LEDStruct&)+0x4ce>

00003aa8 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3aac:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3ab0:	b08d      	sub	sp, #52	; 0x34
    3ab2:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	f040 809d 	bne.w	3bf4 <juggle_half(LEDStruct&)+0x14c>
    3aba:	4ec5      	ldr	r6, [pc, #788]	; (3dd0 <juggle_half(LEDStruct&)+0x328>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3abc:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3ac0:	8833      	ldrh	r3, [r6, #0]
    3ac2:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3aca:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3ace:	3019      	adds	r0, #25
    3ad0:	b280      	uxth	r0, r0
    3ad2:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3ad6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3ada:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3ade:	3519      	adds	r5, #25
    3ae0:	b2ad      	uxth	r5, r5
    3ae2:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3ae6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3aea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3aee:	3319      	adds	r3, #25
    3af0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3af4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3af8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3afc:	3319      	adds	r3, #25
    3afe:	b29b      	uxth	r3, r3
    3b00:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3b04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3b08:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3b0c:	3119      	adds	r1, #25
    3b0e:	b289      	uxth	r1, r1
    3b10:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3b14:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3b18:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b1c:	3219      	adds	r2, #25
    3b1e:	b292      	uxth	r2, r2
    3b20:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3b24:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3b28:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3b2c:	f10e 0e19 	add.w	lr, lr, #25
    3b30:	fa1f fe8e 	uxth.w	lr, lr
    3b34:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3b38:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3b3c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3b40:	f10c 0c19 	add.w	ip, ip, #25
    3b44:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b48:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b4c:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3b50:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b54:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3b58:	b2ff      	uxtb	r7, r7
    3b5a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3b5e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3b62:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b66:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3b6a:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3b6c:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3b6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3b72:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b76:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3b7a:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3b7e:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3b82:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b84:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3b88:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3b8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b90:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3b94:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3b96:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3b9a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3b9e:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3ba2:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ba4:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3ba8:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3bac:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3bb0:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3bb4:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3bb6:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3bba:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3bbe:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3bc2:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3bc6:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3bc8:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3bca:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3bce:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3bd2:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bd6:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3bda:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3bde:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3be2:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3be6:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3bea:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3bee:	2b00      	cmp	r3, #0
    3bf0:	f040 8290 	bne.w	4114 <juggle_half(LEDStruct&)+0x66c>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3bf4:	4b77      	ldr	r3, [pc, #476]	; (3dd4 <juggle_half(LEDStruct&)+0x32c>)
    3bf6:	781b      	ldrb	r3, [r3, #0]
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	f040 8296 	bne.w	412a <juggle_half(LEDStruct&)+0x682>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3bfe:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3c02:	b113      	cbz	r3, 3c0a <juggle_half(LEDStruct&)+0x162>
    3c04:	2300      	movs	r3, #0
    3c06:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3c0a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3c0e:	2196      	movs	r1, #150	; 0x96
    3c10:	4620      	mov	r0, r4
    3c12:	f007 fc93 	bl	b53c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3c16:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c1a:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3c1e:	2f00      	cmp	r7, #0
    3c20:	f040 8199 	bne.w	3f56 <juggle_half(LEDStruct&)+0x4ae>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c24:	2a00      	cmp	r2, #0
    3c26:	f000 8350 	beq.w	42ca <juggle_half(LEDStruct&)+0x822>
    3c2a:	4b6b      	ldr	r3, [pc, #428]	; (3dd8 <juggle_half(LEDStruct&)+0x330>)
    3c2c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3ddc <juggle_half(LEDStruct&)+0x334>
    3c30:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3de0 <juggle_half(LEDStruct&)+0x338>
    3c34:	9303      	str	r3, [sp, #12]
    3c36:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3c3a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c3e:	b2be      	uxth	r6, r7
    3c40:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c42:	9a03      	ldr	r2, [sp, #12]
    3c44:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3c48:	6812      	ldr	r2, [r2, #0]
    3c4a:	9207      	str	r2, [sp, #28]
    3c4c:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3c4e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3c50:	9a07      	ldr	r2, [sp, #28]
    3c52:	bf98      	it	ls
    3c54:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3c56:	f44f 718c 	mov.w	r1, #280	; 0x118
    3c5a:	bf98      	it	ls
    3c5c:	b29b      	uxthls	r3, r3
    3c5e:	fb01 f202 	mul.w	r2, r1, r2
    3c62:	fb03 f302 	mul.w	r3, r3, r2
    3c66:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3c6a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3c6e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c70:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3c72:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c76:	d503      	bpl.n	3c80 <juggle_half(LEDStruct&)+0x1d8>
    3c78:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3c7c:	3207      	adds	r2, #7
    3c7e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c80:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c82:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3c86:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3c8a:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3c8e:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3c92:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c94:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3c96:	bf48      	it	mi
    3c98:	4255      	negmi	r5, r2
    3c9a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c9e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ca2:	bf54      	ite	pl
    3ca4:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3ca6:	b22d      	sxthmi	r5, r5
    3ca8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3cac:	9100      	str	r1, [sp, #0]
    3cae:	4648      	mov	r0, r9
    3cb0:	4641      	mov	r1, r8
    3cb2:	f007 fca3 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3cb6:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3cba:	2226      	movs	r2, #38	; 0x26
    3cbc:	b29b      	uxth	r3, r3
    3cbe:	fb02 f303 	mul.w	r3, r2, r3
    3cc2:	0c1b      	lsrs	r3, r3, #16
    3cc4:	3325      	adds	r3, #37	; 0x25
    3cc6:	b29b      	uxth	r3, r3
    3cc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ccc:	18e1      	adds	r1, r4, r3
    3cce:	5ce2      	ldrb	r2, [r4, r3]
    3cd0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3cd4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3cd8:	54e2      	strb	r2, [r4, r3]
    3cda:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3cde:	784a      	ldrb	r2, [r1, #1]
    3ce0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ce4:	704a      	strb	r2, [r1, #1]
    3ce6:	788b      	ldrb	r3, [r1, #2]
    3ce8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3cec:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3cf0:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3cf2:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3cf6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3cfa:	4416      	add	r6, r2
    3cfc:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cfe:	9b03      	ldr	r3, [sp, #12]
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	9306      	str	r3, [sp, #24]
    3d04:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3d06:	9a06      	ldr	r2, [sp, #24]
    3d08:	bf98      	it	ls
    3d0a:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3d0c:	f44f 738c 	mov.w	r3, #280	; 0x118
    3d10:	bf98      	it	ls
    3d12:	b2b6      	uxthls	r6, r6
    3d14:	fb03 f202 	mul.w	r2, r3, r2
    3d18:	fb06 f202 	mul.w	r2, r6, r2
    3d1c:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3d20:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d24:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d26:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d2a:	d503      	bpl.n	3d34 <juggle_half(LEDStruct&)+0x28c>
    3d2c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3d30:	3307      	adds	r3, #7
    3d32:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d34:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d36:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3d3a:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d3e:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3d42:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3d46:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d48:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3d4a:	bf48      	it	mi
    3d4c:	425b      	negmi	r3, r3
    3d4e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3d52:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d56:	b21d      	sxth	r5, r3
    3d58:	4648      	mov	r0, r9
    3d5a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3d5e:	9100      	str	r1, [sp, #0]
    3d60:	4641      	mov	r1, r8
    3d62:	f007 fc4b 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d66:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d6a:	2226      	movs	r2, #38	; 0x26
    3d6c:	b29b      	uxth	r3, r3
    3d6e:	fb02 f303 	mul.w	r3, r2, r3
    3d72:	0c1b      	lsrs	r3, r3, #16
    3d74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d78:	18e1      	adds	r1, r4, r3
    3d7a:	5ce2      	ldrb	r2, [r4, r3]
    3d7c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3d80:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d84:	54e2      	strb	r2, [r4, r3]
    3d86:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3d8a:	784a      	ldrb	r2, [r1, #1]
    3d8c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d90:	704a      	strb	r2, [r1, #1]
    3d92:	788b      	ldrb	r3, [r1, #2]
    3d94:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3d98:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d9c:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d9e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3da2:	3701      	adds	r7, #1
    3da4:	b2ff      	uxtb	r7, r7
    3da6:	42bb      	cmp	r3, r7
    3da8:	461a      	mov	r2, r3
    3daa:	f63f af48 	bhi.w	3c3e <juggle_half(LEDStruct&)+0x196>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3dae:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3db2:	2a00      	cmp	r2, #0
    3db4:	f000 819a 	beq.w	40ec <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    3db8:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3dbc:	2f00      	cmp	r7, #0
    3dbe:	f040 81c1 	bne.w	4144 <juggle_half(LEDStruct&)+0x69c>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3dc2:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	f000 80c2 	beq.w	3f50 <juggle_half(LEDStruct&)+0x4a8>
    3dcc:	e00a      	b.n	3de4 <juggle_half(LEDStruct&)+0x33c>
    3dce:	bf00      	nop
    3dd0:	1fff8784 	.word	0x1fff8784
    3dd4:	1fff9619 	.word	0x1fff9619
    3dd8:	1fffb184 	.word	0x1fffb184
    3ddc:	00011234 	.word	0x00011234
    3de0:	00010afc 	.word	0x00010afc
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3de4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3de8:	3301      	adds	r3, #1
    3dea:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dec:	9a03      	ldr	r2, [sp, #12]
    3dee:	b2be      	uxth	r6, r7
    3df0:	6812      	ldr	r2, [r2, #0]
    3df2:	920b      	str	r2, [sp, #44]	; 0x2c
    3df4:	4433      	add	r3, r6
    3df6:	b29b      	uxth	r3, r3
    3df8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3dfc:	bf9c      	itt	ls
    3dfe:	021b      	lslls	r3, r3, #8
    3e00:	b29b      	uxthls	r3, r3
    3e02:	fb09 f202 	mul.w	r2, r9, r2
    3e06:	fb03 f302 	mul.w	r3, r3, r2
    3e0a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3e12:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e14:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e16:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e1a:	d503      	bpl.n	3e24 <juggle_half(LEDStruct&)+0x37c>
    3e1c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e20:	3207      	adds	r2, #7
    3e22:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e24:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e26:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3e2a:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3e2e:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3e32:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3e36:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e38:	b2ad      	uxth	r5, r5
    3e3a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e3e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3e42:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3e46:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3e48:	bf48      	it	mi
    3e4a:	426d      	negmi	r5, r5
    3e4c:	4641      	mov	r1, r8
    3e4e:	a809      	add	r0, sp, #36	; 0x24
    3e50:	b22d      	sxth	r5, r5
    3e52:	f007 fbd3 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e56:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e5a:	2226      	movs	r2, #38	; 0x26
    3e5c:	b29b      	uxth	r3, r3
    3e5e:	fb02 f303 	mul.w	r3, r2, r3
    3e62:	0c1b      	lsrs	r3, r3, #16
    3e64:	3370      	adds	r3, #112	; 0x70
    3e66:	b29b      	uxth	r3, r3
    3e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e6c:	18e1      	adds	r1, r4, r3
    3e6e:	5ce2      	ldrb	r2, [r4, r3]
    3e70:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3e74:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e78:	54e2      	strb	r2, [r4, r3]
    3e7a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3e7e:	784a      	ldrb	r2, [r1, #1]
    3e80:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3e84:	704a      	strb	r2, [r1, #1]
    3e86:	788b      	ldrb	r3, [r1, #2]
    3e88:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3e8c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e90:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e92:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e96:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e9a:	4413      	add	r3, r2
    3e9c:	3301      	adds	r3, #1
    3e9e:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ea0:	9b03      	ldr	r3, [sp, #12]
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	930a      	str	r3, [sp, #40]	; 0x28
    3ea6:	b2b6      	uxth	r6, r6
    3ea8:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3eac:	bf9c      	itt	ls
    3eae:	0236      	lslls	r6, r6, #8
    3eb0:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3eb2:	fb09 f202 	mul.w	r2, r9, r2
    3eb6:	fb06 f202 	mul.w	r2, r6, r2
    3eba:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3ebe:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ec2:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ec4:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ec8:	d503      	bpl.n	3ed2 <juggle_half(LEDStruct&)+0x42a>
    3eca:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3ece:	3307      	adds	r3, #7
    3ed0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ed2:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ed4:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3ed8:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3edc:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3ee0:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3ee4:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ee6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3ee8:	bf48      	it	mi
    3eea:	425b      	negmi	r3, r3
    3eec:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3ef0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ef4:	b21d      	sxth	r5, r3
    3ef6:	a809      	add	r0, sp, #36	; 0x24
    3ef8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3efc:	9100      	str	r1, [sp, #0]
    3efe:	4641      	mov	r1, r8
    3f00:	f007 fb7c 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f04:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3f08:	b29b      	uxth	r3, r3
    3f0a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3f0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f12:	0c1b      	lsrs	r3, r3, #16
    3f14:	334b      	adds	r3, #75	; 0x4b
    3f16:	b29b      	uxth	r3, r3
    3f18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f1c:	18e1      	adds	r1, r4, r3
    3f1e:	5ce2      	ldrb	r2, [r4, r3]
    3f20:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3f24:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f28:	54e2      	strb	r2, [r4, r3]
    3f2a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3f2e:	784a      	ldrb	r2, [r1, #1]
    3f30:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f34:	704a      	strb	r2, [r1, #1]
    3f36:	788b      	ldrb	r3, [r1, #2]
    3f38:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3f3c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f40:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f42:	3701      	adds	r7, #1
    3f44:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f48:	b2ff      	uxtb	r7, r7
    3f4a:	42bb      	cmp	r3, r7
    3f4c:	f63f af4a 	bhi.w	3de4 <juggle_half(LEDStruct&)+0x33c>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3f50:	b00d      	add	sp, #52	; 0x34
    3f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f56:	2a00      	cmp	r2, #0
    3f58:	f000 81b7 	beq.w	42ca <juggle_half(LEDStruct&)+0x822>
    3f5c:	4b75      	ldr	r3, [pc, #468]	; (4134 <juggle_half(LEDStruct&)+0x68c>)
    3f5e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 413c <juggle_half(LEDStruct&)+0x694>
    3f62:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 4140 <juggle_half(LEDStruct&)+0x698>
    3f66:	9303      	str	r3, [sp, #12]
    3f68:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3f6c:	2700      	movs	r7, #0
    3f6e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3f72:	b2be      	uxth	r6, r7
    3f74:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f76:	9a03      	ldr	r2, [sp, #12]
    3f78:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3f7c:	6812      	ldr	r2, [r2, #0]
    3f7e:	9205      	str	r2, [sp, #20]
    3f80:	440b      	add	r3, r1
    3f82:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3f84:	9a05      	ldr	r2, [sp, #20]
    3f86:	bf98      	it	ls
    3f88:	021b      	lslls	r3, r3, #8
    3f8a:	f44f 718c 	mov.w	r1, #280	; 0x118
    3f8e:	bf98      	it	ls
    3f90:	b29b      	uxthls	r3, r3
    3f92:	fb01 f202 	mul.w	r2, r1, r2
    3f96:	fb03 f302 	mul.w	r3, r3, r2
    3f9a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3fa2:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3fa4:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3fa8:	d503      	bpl.n	3fb2 <juggle_half(LEDStruct&)+0x50a>
    3faa:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3fae:	3207      	adds	r2, #7
    3fb0:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3fb2:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3fb4:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3fb8:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3fbc:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3fc0:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3fc4:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3fc6:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3fc8:	bf48      	it	mi
    3fca:	4255      	negmi	r5, r2
    3fcc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3fd0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3fd4:	bf54      	ite	pl
    3fd6:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3fd8:	b22d      	sxthmi	r5, r5
    3fda:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3fde:	9100      	str	r1, [sp, #0]
    3fe0:	4648      	mov	r0, r9
    3fe2:	4641      	mov	r1, r8
    3fe4:	f007 fb0a 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3fe8:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3fec:	2226      	movs	r2, #38	; 0x26
    3fee:	b29b      	uxth	r3, r3
    3ff0:	fb02 f303 	mul.w	r3, r2, r3
    3ff4:	0c1b      	lsrs	r3, r3, #16
    3ff6:	3325      	adds	r3, #37	; 0x25
    3ff8:	b29b      	uxth	r3, r3
    3ffa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ffe:	18e1      	adds	r1, r4, r3
    4000:	5ce2      	ldrb	r2, [r4, r3]
    4002:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4006:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    400a:	54e2      	strb	r2, [r4, r3]
    400c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4010:	784a      	ldrb	r2, [r1, #1]
    4012:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4016:	704a      	strb	r2, [r1, #1]
    4018:	788b      	ldrb	r3, [r1, #2]
    401a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    401e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4022:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4024:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4028:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    402c:	4416      	add	r6, r2
    402e:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4030:	9b03      	ldr	r3, [sp, #12]
    4032:	681b      	ldr	r3, [r3, #0]
    4034:	9304      	str	r3, [sp, #16]
    4036:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    4038:	9b04      	ldr	r3, [sp, #16]
    403a:	bf98      	it	ls
    403c:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    403e:	f44f 728c 	mov.w	r2, #280	; 0x118
    4042:	bf98      	it	ls
    4044:	b2b6      	uxthls	r6, r6
    4046:	fb02 f303 	mul.w	r3, r2, r3
    404a:	fb06 f303 	mul.w	r3, r6, r3
    404e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4052:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4056:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4058:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    405a:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    405e:	d503      	bpl.n	4068 <juggle_half(LEDStruct&)+0x5c0>
    4060:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    4064:	3207      	adds	r2, #7
    4066:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4068:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    406a:	f3c2 0146 	ubfx	r1, r2, #1, #7
    406e:	f81b 5000 	ldrb.w	r5, [fp, r0]
    4072:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    4076:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    407a:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    407c:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    407e:	bf48      	it	mi
    4080:	4252      	negmi	r2, r2
    4082:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4086:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    408a:	b215      	sxth	r5, r2
    408c:	4648      	mov	r0, r9
    408e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4092:	9100      	str	r1, [sp, #0]
    4094:	4641      	mov	r1, r8
    4096:	f007 fab1 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    409a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    409e:	2226      	movs	r2, #38	; 0x26
    40a0:	b29b      	uxth	r3, r3
    40a2:	fb02 f303 	mul.w	r3, r2, r3
    40a6:	0c1b      	lsrs	r3, r3, #16
    40a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40ac:	18e1      	adds	r1, r4, r3
    40ae:	5ce2      	ldrb	r2, [r4, r3]
    40b0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    40b4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    40b8:	54e2      	strb	r2, [r4, r3]
    40ba:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    40be:	784a      	ldrb	r2, [r1, #1]
    40c0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40c4:	704a      	strb	r2, [r1, #1]
    40c6:	788b      	ldrb	r3, [r1, #2]
    40c8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    40cc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40d0:	708b      	strb	r3, [r1, #2]

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40d2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    40d6:	3701      	adds	r7, #1
    40d8:	b2ff      	uxtb	r7, r7
    40da:	42bb      	cmp	r3, r7
    40dc:	461a      	mov	r2, r3
    40de:	f63f af48 	bhi.w	3f72 <juggle_half(LEDStruct&)+0x4ca>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    40e2:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    40e6:	2a00      	cmp	r2, #0
    40e8:	f47f ae66 	bne.w	3db8 <juggle_half(LEDStruct&)+0x310>
    40ec:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40f0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    40f2:	7822      	ldrb	r2, [r4, #0]
    40f4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    40f8:	7862      	ldrb	r2, [r4, #1]
    40fa:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    40fe:	78a2      	ldrb	r2, [r4, #2]
    4100:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4104:	3403      	adds	r4, #3
    4106:	42a1      	cmp	r1, r4
    4108:	f1a3 0303 	sub.w	r3, r3, #3
    410c:	d1f1      	bne.n	40f2 <juggle_half(LEDStruct&)+0x64a>
		}
	}
	else {
		strip_sync(leds);
	}
}
    410e:	b00d      	add	sp, #52	; 0x34
    4110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    4114:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4118:	fa02 f300 	lsl.w	r3, r2, r0
    411c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4120:	4b05      	ldr	r3, [pc, #20]	; (4138 <juggle_half(LEDStruct&)+0x690>)
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	2b00      	cmp	r3, #0
    4126:	f43f ad6a 	beq.w	3bfe <juggle_half(LEDStruct&)+0x156>
    412a:	4620      	mov	r0, r4
    412c:	f7ff f82e 	bl	318c <juggle_update(LEDStruct&)>
    4130:	e565      	b.n	3bfe <juggle_half(LEDStruct&)+0x156>
    4132:	bf00      	nop
    4134:	1fffb184 	.word	0x1fffb184
    4138:	1fff9619 	.word	0x1fff9619
    413c:	00011234 	.word	0x00011234
    4140:	00010afc 	.word	0x00010afc
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4144:	2b00      	cmp	r3, #0
    4146:	f43f af03 	beq.w	3f50 <juggle_half(LEDStruct&)+0x4a8>
    414a:	2700      	movs	r7, #0
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    414c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4150:	3301      	adds	r3, #1
    4152:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4154:	9a03      	ldr	r2, [sp, #12]
    4156:	b2be      	uxth	r6, r7
    4158:	6812      	ldr	r2, [r2, #0]
    415a:	9209      	str	r2, [sp, #36]	; 0x24
    415c:	4433      	add	r3, r6
    415e:	b29b      	uxth	r3, r3
    4160:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4162:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4164:	bf98      	it	ls
    4166:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4168:	f44f 718c 	mov.w	r1, #280	; 0x118
    416c:	bf98      	it	ls
    416e:	b29b      	uxthls	r3, r3
    4170:	fb01 f202 	mul.w	r2, r1, r2
    4174:	fb03 f302 	mul.w	r3, r3, r2
    4178:	f3c3 430e 	ubfx	r3, r3, #16, #15
    417c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4180:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4182:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4186:	d503      	bpl.n	4190 <juggle_half(LEDStruct&)+0x6e8>
    4188:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    418c:	3207      	adds	r2, #7
    418e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4190:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4192:	f3c2 0246 	ubfx	r2, r2, #1, #7
    4196:	f81b 5001 	ldrb.w	r5, [fp, r1]
    419a:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    419e:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    41a2:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    41a4:	b2ad      	uxth	r5, r5
    41a6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    41aa:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    41ae:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    41b2:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    41b4:	bf48      	it	mi
    41b6:	426d      	negmi	r5, r5
    41b8:	4641      	mov	r1, r8
    41ba:	4648      	mov	r0, r9
    41bc:	b22d      	sxth	r5, r5
    41be:	f007 fa1d 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    41c2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    41c6:	2226      	movs	r2, #38	; 0x26
    41c8:	b29b      	uxth	r3, r3
    41ca:	fb02 f303 	mul.w	r3, r2, r3
    41ce:	0c1b      	lsrs	r3, r3, #16
    41d0:	3370      	adds	r3, #112	; 0x70
    41d2:	b29b      	uxth	r3, r3
    41d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    41d8:	18e1      	adds	r1, r4, r3
    41da:	5ce2      	ldrb	r2, [r4, r3]
    41dc:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    41e0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    41e4:	54e2      	strb	r2, [r4, r3]
    41e6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    41ea:	784a      	ldrb	r2, [r1, #1]
    41ec:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    41f0:	704a      	strb	r2, [r1, #1]
    41f2:	788b      	ldrb	r3, [r1, #2]
    41f4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    41f8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41fc:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    41fe:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4202:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4206:	4413      	add	r3, r2
    4208:	3301      	adds	r3, #1
    420a:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    420c:	9b03      	ldr	r3, [sp, #12]
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	9308      	str	r3, [sp, #32]
    4212:	b2b6      	uxth	r6, r6
    4214:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    4216:	9b08      	ldr	r3, [sp, #32]
    4218:	bf98      	it	ls
    421a:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    421c:	f44f 728c 	mov.w	r2, #280	; 0x118
    4220:	bf98      	it	ls
    4222:	b2b6      	uxthls	r6, r6
    4224:	fb02 f303 	mul.w	r3, r2, r3
    4228:	fb06 f303 	mul.w	r3, r6, r3
    422c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4230:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4234:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4236:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4238:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    423c:	d503      	bpl.n	4246 <juggle_half(LEDStruct&)+0x79e>
    423e:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    4242:	3207      	adds	r2, #7
    4244:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4246:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4248:	f3c2 0246 	ubfx	r2, r2, #1, #7
    424c:	f81b 5001 	ldrb.w	r5, [fp, r1]
    4250:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    4254:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4258:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    425a:	b2ad      	uxth	r5, r5
    425c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4260:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4264:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4268:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    426a:	bf48      	it	mi
    426c:	426d      	negmi	r5, r5
    426e:	4641      	mov	r1, r8
    4270:	4648      	mov	r0, r9
    4272:	b22d      	sxth	r5, r5
    4274:	f007 f9c2 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4278:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    427c:	b29b      	uxth	r3, r3
    427e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    4282:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4286:	0c1b      	lsrs	r3, r3, #16
    4288:	334b      	adds	r3, #75	; 0x4b
    428a:	b29b      	uxth	r3, r3
    428c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4290:	18e1      	adds	r1, r4, r3
    4292:	5ce2      	ldrb	r2, [r4, r3]
    4294:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4298:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    429c:	54e2      	strb	r2, [r4, r3]
    429e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    42a2:	784a      	ldrb	r2, [r1, #1]
    42a4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    42a8:	704a      	strb	r2, [r1, #1]
    42aa:	788b      	ldrb	r3, [r1, #2]
    42ac:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    42b0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    42b4:	708b      	strb	r3, [r1, #2]
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    42b6:	3701      	adds	r7, #1
    42b8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    42bc:	b2ff      	uxtb	r7, r7
    42be:	42bb      	cmp	r3, r7
    42c0:	f63f af44 	bhi.w	414c <juggle_half(LEDStruct&)+0x6a4>
		}
	}
	else {
		strip_sync(leds);
	}
}
    42c4:	b00d      	add	sp, #52	; 0x34
    42c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    42ca:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    42ce:	2b00      	cmp	r3, #0
    42d0:	f43f af0c 	beq.w	40ec <juggle_half(LEDStruct&)+0x644>
    42d4:	e63c      	b.n	3f50 <juggle_half(LEDStruct&)+0x4a8>
    42d6:	bf00      	nop

000042d8 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    42d8:	4b1a      	ldr	r3, [pc, #104]	; (4344 <rainbow_update(LEDStruct&)+0x6c>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    42da:	4a1b      	ldr	r2, [pc, #108]	; (4348 <rainbow_update(LEDStruct&)+0x70>)
	switch (update_var) {
    42dc:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    42de:	2100      	movs	r1, #0
    42e0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    42e2:	2b04      	cmp	r3, #4
    42e4:	d808      	bhi.n	42f8 <rainbow_update(LEDStruct&)+0x20>
    42e6:	e8df f003 	tbb	[pc, r3]
    42ea:	1e0f      	.short	0x1e0f
    42ec:	2703      	.short	0x2703
    42ee:	09          	.byte	0x09
    42ef:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    42f0:	4b16      	ldr	r3, [pc, #88]	; (434c <rainbow_update(LEDStruct&)+0x74>)
    42f2:	881b      	ldrh	r3, [r3, #0]
    42f4:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    42f8:	f7fd bf4e 	b.w	2198 <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    42fc:	4b13      	ldr	r3, [pc, #76]	; (434c <rainbow_update(LEDStruct&)+0x74>)
    42fe:	881b      	ldrh	r3, [r3, #0]
    4300:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		default:	break;
	}
	LEDDebug(leds);
    4304:	f7fd bf48 	b.w	2198 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    4308:	4b10      	ldr	r3, [pc, #64]	; (434c <rainbow_update(LEDStruct&)+0x74>)
    430a:	881b      	ldrh	r3, [r3, #0]
    430c:	2b00      	cmp	r3, #0
    430e:	bf14      	ite	ne
    4310:	2301      	movne	r3, #1
    4312:	2300      	moveq	r3, #0
    4314:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4318:	bf14      	ite	ne
    431a:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    431c:	234b      	moveq	r3, #75	; 0x4b
    431e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4322:	f7fd bf39 	b.w	2198 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    4326:	4b09      	ldr	r3, [pc, #36]	; (434c <rainbow_update(LEDStruct&)+0x74>)
    4328:	881b      	ldrh	r3, [r3, #0]
    432a:	3300      	adds	r3, #0
    432c:	bf18      	it	ne
    432e:	2301      	movne	r3, #1
    4330:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4334:	f7fd bf30 	b.w	2198 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    4338:	4b04      	ldr	r3, [pc, #16]	; (434c <rainbow_update(LEDStruct&)+0x74>)
    433a:	881b      	ldrh	r3, [r3, #0]
    433c:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4340:	f7fd bf2a 	b.w	2198 <LEDDebug(LEDStruct&)>
    4344:	1fff9e7c 	.word	0x1fff9e7c
    4348:	1fff9619 	.word	0x1fff9619
    434c:	1fff951a 	.word	0x1fff951a

00004350 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4350:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4358:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    435a:	2b00      	cmp	r3, #0
    435c:	d15c      	bne.n	4418 <rainbow_march(LEDStruct&)+0xc8>
    435e:	4869      	ldr	r0, [pc, #420]	; (4504 <rainbow_march(LEDStruct&)+0x1b4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4360:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4364:	8803      	ldrh	r3, [r0, #0]
    4366:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    436a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    436e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4372:	3319      	adds	r3, #25
    4374:	b29b      	uxth	r3, r3
    4376:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    437a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    437e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4382:	3219      	adds	r2, #25
    4384:	b292      	uxth	r2, r2
    4386:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    438a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    438e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4392:	3119      	adds	r1, #25
    4394:	b289      	uxth	r1, r1
    4396:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    439a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    439e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43a2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43a6:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43a8:	3619      	adds	r6, #25
    43aa:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43ac:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43b0:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43b4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    43b8:	b2ed      	uxtb	r5, r5
    43ba:	121b      	asrs	r3, r3, #8
    43bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    43c0:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    43c2:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43c6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43ca:	11ed      	asrs	r5, r5, #7
    43cc:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    43ce:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43d2:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43d4:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    43d6:	2606      	movs	r6, #6
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    43d8:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43da:	4573      	cmp	r3, lr
    43dc:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    43de:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    43e2:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    43e6:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    43ea:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    43ee:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43f2:	f000 8085 	beq.w	4500 <rainbow_march(LEDStruct&)+0x1b0>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43f6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43fa:	b2d2      	uxtb	r2, r2
    43fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4400:	1212      	asrs	r2, r2, #8
    4402:	4472      	add	r2, lr
    4404:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    4406:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    440a:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    440e:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    4412:	4620      	mov	r0, r4
    4414:	f7fd fec0 	bl	2198 <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4418:	4b3b      	ldr	r3, [pc, #236]	; (4508 <rainbow_march(LEDStruct&)+0x1b8>)
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	2b00      	cmp	r3, #0
    441e:	d16b      	bne.n	44f8 <rainbow_march(LEDStruct&)+0x1a8>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4420:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4424:	bb43      	cbnz	r3, 4478 <rainbow_march(LEDStruct&)+0x128>
    4426:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    442a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    442e:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    4430:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4434:	b2d2      	uxtb	r2, r2
    4436:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    443a:	bb4b      	cbnz	r3, 4490 <rainbow_march(LEDStruct&)+0x140>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    443c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4440:	2b00      	cmp	r3, #0
    4442:	d151      	bne.n	44e8 <rainbow_march(LEDStruct&)+0x198>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4444:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4448:	214b      	movs	r1, #75	; 0x4b
    444a:	4620      	mov	r0, r4
    444c:	f006 ffc4 	bl	b3d8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4450:	4620      	mov	r0, r4
    4452:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4456:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4458:	7802      	ldrb	r2, [r0, #0]
    445a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    445e:	7842      	ldrb	r2, [r0, #1]
    4460:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4464:	7882      	ldrb	r2, [r0, #2]
    4466:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    446a:	3003      	adds	r0, #3
    446c:	4288      	cmp	r0, r1
    446e:	f1a3 0303 	sub.w	r3, r3, #3
    4472:	d1f1      	bne.n	4458 <rainbow_march(LEDStruct&)+0x108>
    4474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4478:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    447c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4480:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    4482:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4486:	b2d2      	uxtb	r2, r2
    4488:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    448c:	2b00      	cmp	r3, #0
    448e:	d0d5      	beq.n	443c <rainbow_march(LEDStruct&)+0xec>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4490:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4494:	2125      	movs	r1, #37	; 0x25
    4496:	4620      	mov	r0, r4
    4498:	f006 ff9e 	bl	b3d8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    449c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    44a0:	4623      	mov	r3, r4
    44a2:	4621      	mov	r1, r4
    44a4:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    44a6:	7810      	ldrb	r0, [r2, #0]
    44a8:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    44ac:	7850      	ldrb	r0, [r2, #1]
    44ae:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    44b2:	7890      	ldrb	r0, [r2, #2]
    44b4:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    44b8:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    44ba:	42aa      	cmp	r2, r5
    44bc:	f1a1 0103 	sub.w	r1, r1, #3
    44c0:	d1f1      	bne.n	44a6 <rainbow_march(LEDStruct&)+0x156>
    44c2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    44c6:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    44c8:	7802      	ldrb	r2, [r0, #0]
    44ca:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    44ce:	7842      	ldrb	r2, [r0, #1]
    44d0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    44d4:	7882      	ldrb	r2, [r0, #2]
    44d6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    44da:	3003      	adds	r0, #3
    44dc:	4288      	cmp	r0, r1
    44de:	f1a3 0303 	sub.w	r3, r3, #3
    44e2:	d1f1      	bne.n	44c8 <rainbow_march(LEDStruct&)+0x178>
    44e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    44e8:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    44ec:	4620      	mov	r0, r4
    44ee:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    44f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    44f4:	f006 bf70 	b.w	b3d8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    44f8:	4620      	mov	r0, r4
    44fa:	f7ff feed 	bl	42d8 <rainbow_update(LEDStruct&)>
    44fe:	e78f      	b.n	4420 <rainbow_march(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4500:	461a      	mov	r2, r3
    4502:	e780      	b.n	4406 <rainbow_march(LEDStruct&)+0xb6>
    4504:	1fff8784 	.word	0x1fff8784
    4508:	1fff9619 	.word	0x1fff9619

0000450c <rainbow_march_beat(LEDStruct&)>:
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    450c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    450e:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    4512:	b083      	sub	sp, #12
    4514:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4516:	2b00      	cmp	r3, #0
    4518:	d15c      	bne.n	45d4 <rainbow_march_beat(LEDStruct&)+0xc8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    451a:	489c      	ldr	r0, [pc, #624]	; (478c <rainbow_march_beat(LEDStruct&)+0x280>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    451c:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4520:	8803      	ldrh	r3, [r0, #0]
    4522:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4526:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    452a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    452e:	3319      	adds	r3, #25
    4530:	b29b      	uxth	r3, r3
    4532:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4536:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    453a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    453e:	3219      	adds	r2, #25
    4540:	b292      	uxth	r2, r2
    4542:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4546:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    454a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    454e:	3119      	adds	r1, #25
    4550:	b289      	uxth	r1, r1
    4552:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4556:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    455a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    455e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4562:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4564:	3619      	adds	r6, #25
    4566:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4568:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    456c:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4570:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4574:	b2ed      	uxtb	r5, r5
    4576:	121b      	asrs	r3, r3, #8
    4578:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    457c:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    457e:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4582:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4586:	11ed      	asrs	r5, r5, #7
    4588:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    458a:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    458e:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4590:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4592:	2606      	movs	r6, #6
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4594:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4596:	4573      	cmp	r3, lr
    4598:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    459a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    459e:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    45a2:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    45a6:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    45aa:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    45ae:	f000 80eb 	beq.w	4788 <rainbow_march_beat(LEDStruct&)+0x27c>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45b2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45b6:	b2d2      	uxtb	r2, r2
    45b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    45bc:	1212      	asrs	r2, r2, #8
    45be:	4472      	add	r2, lr
    45c0:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    45c2:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    45c6:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    45ca:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    45ce:	4620      	mov	r0, r4
    45d0:	f7fd fde2 	bl	2198 <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    45d4:	4b6e      	ldr	r3, [pc, #440]	; (4790 <rainbow_march_beat(LEDStruct&)+0x284>)
    45d6:	781b      	ldrb	r3, [r3, #0]
    45d8:	2b00      	cmp	r3, #0
    45da:	f040 80c9 	bne.w	4770 <rainbow_march_beat(LEDStruct&)+0x264>

	if (leds.this_dir == 0) {
    45de:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45e2:	4a6c      	ldr	r2, [pc, #432]	; (4794 <rainbow_march_beat(LEDStruct&)+0x288>)
    45e4:	2b00      	cmp	r3, #0
    45e6:	d161      	bne.n	46ac <rainbow_march_beat(LEDStruct&)+0x1a0>
    45e8:	6812      	ldr	r2, [r2, #0]
    45ea:	9200      	str	r2, [sp, #0]
	return ret;
    45ec:	9900      	ldr	r1, [sp, #0]
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    45ee:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    45f2:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    45f6:	f44f 728c 	mov.w	r2, #280	; 0x118
    45fa:	fb02 f201 	mul.w	r2, r2, r1
    45fe:	021b      	lsls	r3, r3, #8
    4600:	fb03 f302 	mul.w	r3, r3, r2
    4604:	0e1b      	lsrs	r3, r3, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    4606:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    4608:	0648      	lsls	r0, r1, #25
    460a:	f100 80a9 	bmi.w	4760 <rainbow_march_beat(LEDStruct&)+0x254>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    460e:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4612:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    4616:	4960      	ldr	r1, [pc, #384]	; (4798 <rainbow_march_beat(LEDStruct&)+0x28c>)
    4618:	1112      	asrs	r2, r2, #4
    461a:	0052      	lsls	r2, r2, #1
    461c:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    461e:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4620:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4622:	fb12 f000 	smulbb	r0, r2, r0
    4626:	eb01 1120 	add.w	r1, r1, r0, asr #4
    462a:	b2ca      	uxtb	r2, r1
    if( theta & 0x80 ) y = -y;
    462c:	0619      	lsls	r1, r3, #24
    462e:	bf48      	it	mi
    4630:	4252      	negmi	r2, r2
    4632:	b252      	sxtb	r2, r2
    4634:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

    y += 128;
    4638:	3a80      	subs	r2, #128	; 0x80
    463a:	b2d2      	uxtb	r2, r2
    463c:	442b      	add	r3, r5
    463e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4642:	eb03 12e2 	add.w	r2, r3, r2, asr #7
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4646:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    464a:	b2d2      	uxtb	r2, r2
    464c:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4650:	2b00      	cmp	r3, #0
    4652:	d060      	beq.n	4716 <rainbow_march_beat(LEDStruct&)+0x20a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4654:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4658:	2125      	movs	r1, #37	; 0x25
    465a:	4620      	mov	r0, r4
    465c:	f006 febc 	bl	b3d8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4660:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4664:	4623      	mov	r3, r4
    4666:	4621      	mov	r1, r4
    4668:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    466a:	7810      	ldrb	r0, [r2, #0]
    466c:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    4670:	7850      	ldrb	r0, [r2, #1]
    4672:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4676:	7890      	ldrb	r0, [r2, #2]
    4678:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    467c:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    467e:	42aa      	cmp	r2, r5
    4680:	f1a1 0103 	sub.w	r1, r1, #3
    4684:	d1f1      	bne.n	466a <rainbow_march_beat(LEDStruct&)+0x15e>
    4686:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    468a:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    468c:	781a      	ldrb	r2, [r3, #0]
    468e:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4692:	785a      	ldrb	r2, [r3, #1]
    4694:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4698:	789a      	ldrb	r2, [r3, #2]
    469a:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    469e:	3303      	adds	r3, #3
    46a0:	428b      	cmp	r3, r1
    46a2:	f1a0 0003 	sub.w	r0, r0, #3
    46a6:	d1f1      	bne.n	468c <rainbow_march_beat(LEDStruct&)+0x180>
		strip_sync(leds);
	}
}
    46a8:	b003      	add	sp, #12
    46aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46ac:	6812      	ldr	r2, [r2, #0]
    46ae:	9201      	str	r2, [sp, #4]
	return ret;
    46b0:	9901      	ldr	r1, [sp, #4]

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    46b2:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    46b6:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    46ba:	f44f 728c 	mov.w	r2, #280	; 0x118
    46be:	fb02 f201 	mul.w	r2, r2, r1
    46c2:	021b      	lsls	r3, r3, #8
    46c4:	fb03 f302 	mul.w	r3, r3, r2
    46c8:	0e1b      	lsrs	r3, r3, #24
    46ca:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    46cc:	064a      	lsls	r2, r1, #25
    46ce:	d43f      	bmi.n	4750 <rainbow_march_beat(LEDStruct&)+0x244>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    46d0:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    46d4:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    46d8:	492f      	ldr	r1, [pc, #188]	; (4798 <rainbow_march_beat(LEDStruct&)+0x28c>)
    46da:	1112      	asrs	r2, r2, #4
    46dc:	0052      	lsls	r2, r2, #1
    46de:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    46e0:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    46e2:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    46e4:	fb12 f000 	smulbb	r0, r2, r0
    46e8:	eb01 1120 	add.w	r1, r1, r0, asr #4
    46ec:	b2ca      	uxtb	r2, r1
    if( theta & 0x80 ) y = -y;
    46ee:	061b      	lsls	r3, r3, #24
    46f0:	bf48      	it	mi
    46f2:	4252      	negmi	r2, r2
    46f4:	b252      	sxtb	r2, r2
    46f6:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

    y += 128;
    46fa:	3a80      	subs	r2, #128	; 0x80
    46fc:	b2d2      	uxtb	r2, r2
    46fe:	1b5b      	subs	r3, r3, r5
    4700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4704:	eba3 12e2 	sub.w	r2, r3, r2, asr #7
	}

	if (!leds.rainbow_split) {
    4708:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    470c:	b2d2      	uxtb	r2, r2
    470e:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}

	if (!leds.rainbow_split) {
    4712:	2b00      	cmp	r3, #0
    4714:	d19e      	bne.n	4654 <rainbow_march_beat(LEDStruct&)+0x148>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4716:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    471a:	bb6b      	cbnz	r3, 4778 <rainbow_march_beat(LEDStruct&)+0x26c>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    471c:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4720:	214b      	movs	r1, #75	; 0x4b
    4722:	4620      	mov	r0, r4
    4724:	f006 fe58 	bl	b3d8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4728:	4620      	mov	r0, r4
    472a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    472e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4730:	781a      	ldrb	r2, [r3, #0]
    4732:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4736:	785a      	ldrb	r2, [r3, #1]
    4738:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    473c:	789a      	ldrb	r2, [r3, #2]
    473e:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4742:	3303      	adds	r3, #3
    4744:	4299      	cmp	r1, r3
    4746:	f1a0 0003 	sub.w	r0, r0, #3
    474a:	d1f1      	bne.n	4730 <rainbow_march_beat(LEDStruct&)+0x224>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    474c:	b003      	add	sp, #12
    474e:	bdf0      	pop	{r4, r5, r6, r7, pc}
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4750:	43c9      	mvns	r1, r1
    4752:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4754:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4758:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    475a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    475e:	e7bb      	b.n	46d8 <rainbow_march_beat(LEDStruct&)+0x1cc>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4760:	43c9      	mvns	r1, r1
    4762:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4764:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4768:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    476a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    476e:	e752      	b.n	4616 <rainbow_march_beat(LEDStruct&)+0x10a>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4770:	4620      	mov	r0, r4
    4772:	f7ff fdb1 	bl	42d8 <rainbow_update(LEDStruct&)>
    4776:	e732      	b.n	45de <rainbow_march_beat(LEDStruct&)+0xd2>
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4778:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    477c:	4620      	mov	r0, r4
    477e:	2196      	movs	r1, #150	; 0x96
    4780:	f006 fe2a 	bl	b3d8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4784:	b003      	add	sp, #12
    4786:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4788:	461a      	mov	r2, r3
    478a:	e71a      	b.n	45c2 <rainbow_march_beat(LEDStruct&)+0xb6>
    478c:	1fff8784 	.word	0x1fff8784
    4790:	1fff9619 	.word	0x1fff9619
    4794:	1fffb184 	.word	0x1fffb184
    4798:	00010c9c 	.word	0x00010c9c

0000479c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    479c:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    479e:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    47a2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    47a6:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    47aa:	250b      	movs	r5, #11
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    47ac:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    47ae:	3c0f      	subs	r4, #15
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    47b0:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    47b4:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    47b6:	f04f 050f 	mov.w	r5, #15
    47ba:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    47be:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    47c2:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    47c6:	d93d      	bls.n	4844 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    47c8:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    47ca:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    47cc:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    47d0:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    47d4:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    47d8:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    47dc:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    47e0:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    47e4:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    47e8:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47ec:	4c1f      	ldr	r4, [pc, #124]	; (486c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    47ee:	8823      	ldrh	r3, [r4, #0]
    47f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    47f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    47f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    47fc:	3319      	adds	r3, #25
    47fe:	b29b      	uxth	r3, r3
    4800:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4804:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4808:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    480c:	3219      	adds	r2, #25
    480e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4810:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4814:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4818:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    481a:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    481c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4824:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4826:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4828:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    482c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4830:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    4834:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4838:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    483c:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    483e:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    4842:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4844:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4848:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    484c:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4850:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4854:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4858:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    485c:	b112      	cbz	r2, 4864 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    485e:	2225      	movs	r2, #37	; 0x25
    4860:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    4864:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    4868:	e7c0      	b.n	47ec <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    486a:	bf00      	nop
    486c:	1fff8784 	.word	0x1fff8784

00004870 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4870:	4b19      	ldr	r3, [pc, #100]	; (48d8 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4872:	4a1a      	ldr	r2, [pc, #104]	; (48dc <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    4874:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4876:	2100      	movs	r1, #0
    4878:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    487a:	2b05      	cmp	r3, #5
    487c:	d808      	bhi.n	4890 <fire_update(LEDStruct&)+0x20>
    487e:	e8df f003 	tbb	[pc, r3]
    4882:	150f      	.short	0x150f
    4884:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4888:	4b15      	ldr	r3, [pc, #84]	; (48e0 <fire_update(LEDStruct&)+0x70>)
    488a:	881b      	ldrh	r3, [r3, #0]
    488c:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4890:	f7fd bc82 	b.w	2198 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    4894:	4b12      	ldr	r3, [pc, #72]	; (48e0 <fire_update(LEDStruct&)+0x70>)
    4896:	881b      	ldrh	r3, [r3, #0]
    4898:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    489c:	f7fd bc7c 	b.w	2198 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    48a0:	4b0f      	ldr	r3, [pc, #60]	; (48e0 <fire_update(LEDStruct&)+0x70>)
    48a2:	881b      	ldrh	r3, [r3, #0]
    48a4:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    48a8:	f7fd bc76 	b.w	2198 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    48ac:	4b0c      	ldr	r3, [pc, #48]	; (48e0 <fire_update(LEDStruct&)+0x70>)
    48ae:	881b      	ldrh	r3, [r3, #0]
    48b0:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    48b4:	f7fd bc70 	b.w	2198 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    48b8:	4b09      	ldr	r3, [pc, #36]	; (48e0 <fire_update(LEDStruct&)+0x70>)
    48ba:	881b      	ldrh	r3, [r3, #0]
    48bc:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    48c0:	f7fd bc6a 	b.w	2198 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    48c4:	4b06      	ldr	r3, [pc, #24]	; (48e0 <fire_update(LEDStruct&)+0x70>)
    48c6:	881b      	ldrh	r3, [r3, #0]
    48c8:	3300      	adds	r3, #0
    48ca:	bf18      	it	ne
    48cc:	2301      	movne	r3, #1
    48ce:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    48d2:	f7fd bc61 	b.w	2198 <LEDDebug(LEDStruct&)>
    48d6:	bf00      	nop
    48d8:	1fff9e7c 	.word	0x1fff9e7c
    48dc:	1fff9619 	.word	0x1fff9619
    48e0:	1fff951a 	.word	0x1fff951a

000048e4 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    48e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    48e8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    48ec:	4dc5      	ldr	r5, [pc, #788]	; (4c04 <fire(LEDStruct&)+0x320>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    48ee:	b087      	sub	sp, #28
    48f0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    48f2:	2b00      	cmp	r3, #0
    48f4:	f000 8210 	beq.w	4d18 <fire(LEDStruct&)+0x434>
	if (keyboard_update) { fire_update(leds); }
    48f8:	4bc3      	ldr	r3, [pc, #780]	; (4c08 <fire(LEDStruct&)+0x324>)
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	2b00      	cmp	r3, #0
    48fe:	f040 8207 	bne.w	4d10 <fire(LEDStruct&)+0x42c>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4902:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4906:	2b00      	cmp	r3, #0
    4908:	f000 82ba 	beq.w	4e80 <fire(LEDStruct&)+0x59c>
    490c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4910:	882a      	ldrh	r2, [r5, #0]
    4912:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4916:	004f      	lsls	r7, r1, #1
    4918:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    491c:	fb97 f7f3 	sdiv	r7, r7, r3
    4920:	3702      	adds	r7, #2
    4922:	b2ff      	uxtb	r7, r7
    4924:	44a6      	add	lr, r4
    4926:	f204 267f 	addw	r6, r4, #639	; 0x27f
    492a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    492e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4932:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4936:	3219      	adds	r2, #25
    4938:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    493a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    493e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4942:	b2c9      	uxtb	r1, r1
    4944:	fb11 f107 	smulbb	r1, r1, r7
    4948:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    494c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4950:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4952:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4954:	d1e9      	bne.n	492a <fire(LEDStruct&)+0x46>
    4956:	802a      	strh	r2, [r5, #0]
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4958:	1edf      	subs	r7, r3, #3
    495a:	2f01      	cmp	r7, #1
    495c:	dd16      	ble.n	498c <fire(LEDStruct&)+0xa8>
    495e:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    4962:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4966:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 4c0c <fire(LEDStruct&)+0x328>
    496a:	4420      	add	r0, r4
    496c:	44a6      	add	lr, r4
    496e:	f504 7820 	add.w	r8, r4, #640	; 0x280
    4972:	7801      	ldrb	r1, [r0, #0]
    4974:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4978:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    497c:	fb8c 9601 	smull	r9, r6, ip, r1
    4980:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4984:	4540      	cmp	r0, r8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4986:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    498a:	d1f2      	bne.n	4972 <fire(LEDStruct&)+0x8e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    498c:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4990:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4994:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4998:	3219      	adds	r2, #25
    499a:	b292      	uxth	r2, r2
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    499c:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    49a0:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    49a4:	802a      	strh	r2, [r5, #0]
    49a6:	b2c9      	uxtb	r1, r1
    49a8:	428e      	cmp	r6, r1
    49aa:	4896      	ldr	r0, [pc, #600]	; (4c04 <fire(LEDStruct&)+0x320>)
    49ac:	d926      	bls.n	49fc <fire(LEDStruct&)+0x118>
    49ae:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    49b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    49b6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    49ba:	3219      	adds	r2, #25
    49bc:	b292      	uxth	r2, r2
    49be:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    49c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    49c6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    49ca:	3619      	adds	r6, #25
    49cc:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49ce:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    49d2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    49d6:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    49d8:	b2d2      	uxtb	r2, r2
    49da:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    49de:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    49e2:	eb04 2222 	add.w	r2, r4, r2, asr #8
    49e6:	ebc1 114e 	rsb	r1, r1, lr, lsl #5
    49ea:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49ec:	8006      	strh	r6, [r0, #0]
    49ee:	3960      	subs	r1, #96	; 0x60
    49f0:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    49f4:	fa80 f051 	uqadd8	r0, r0, r1
    49f8:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    49fc:	f894 c318 	ldrb.w	ip, [r4, #792]	; 0x318
    4a00:	f1bc 0f00 	cmp.w	ip, #0
    4a04:	d17a      	bne.n	4afc <fire(LEDStruct&)+0x218>
		for (int i = 0; i < leds.heat_length; i++) {
    4a06:	2b00      	cmp	r3, #0
    4a08:	f000 822f 	beq.w	4e6a <fire(LEDStruct&)+0x586>
    4a0c:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4a10:	882a      	ldrh	r2, [r5, #0]
    4a12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4a16:	004e      	lsls	r6, r1, #1
    4a18:	f203 2eca 	addw	lr, r3, #714	; 0x2ca
    4a1c:	fb96 f6f3 	sdiv	r6, r6, r3
    4a20:	3602      	adds	r6, #2
    4a22:	b2f6      	uxtb	r6, r6
    4a24:	44a6      	add	lr, r4
    4a26:	f204 20ca 	addw	r0, r4, #714	; 0x2ca
    4a2a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4a2e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4a32:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a36:	3219      	adds	r2, #25
    4a38:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a3a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4a3e:	f810 8f01 	ldrb.w	r8, [r0, #1]!
    4a42:	b2c9      	uxtb	r1, r1
    4a44:	fb11 f106 	smulbb	r1, r1, r6
    4a48:	eba8 2111 	sub.w	r1, r8, r1, lsr #8
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4a4c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4a50:	4570      	cmp	r0, lr
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4a52:	7001      	strb	r1, [r0, #0]
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4a54:	d1e9      	bne.n	4a2a <fire(LEDStruct&)+0x146>
    4a56:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4a58:	2f01      	cmp	r7, #1
    4a5a:	dd16      	ble.n	4a8a <fire(LEDStruct&)+0x1a6>
    4a5c:	f203 20c7 	addw	r0, r3, #711	; 0x2c7
    4a60:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4a64:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4c0c <fire(LEDStruct&)+0x328>
    4a68:	4420      	add	r0, r4
    4a6a:	4427      	add	r7, r4
    4a6c:	f204 28cb 	addw	r8, r4, #715	; 0x2cb
    4a70:	7801      	ldrb	r1, [r0, #0]
    4a72:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4a76:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    4a7a:	fb8e 9601 	smull	r9, r6, lr, r1
    4a7e:	eba6 71e1 	sub.w	r1, r6, r1, asr #31

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4a82:	4580      	cmp	r8, r0
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4a84:	f807 1d01 	strb.w	r1, [r7, #-1]!

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4a88:	d1f2      	bne.n	4a70 <fire(LEDStruct&)+0x18c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a8a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4a8e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4a92:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a96:	3219      	adds	r2, #25
    4a98:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4a9a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4a9e:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4aa2:	802a      	strh	r2, [r5, #0]
    4aa4:	b2c9      	uxtb	r1, r1
    4aa6:	428e      	cmp	r6, r1
    4aa8:	4856      	ldr	r0, [pc, #344]	; (4c04 <fire(LEDStruct&)+0x320>)
    4aaa:	d927      	bls.n	4afc <fire(LEDStruct&)+0x218>
    4aac:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4ab0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4ab4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ab8:	3219      	adds	r2, #25
    4aba:	b292      	uxth	r2, r2
    4abc:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4ac0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4ac4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4ac8:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4aca:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ace:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ad0:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ad2:	eb05 2115 	add.w	r1, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ad6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4ada:	b2c9      	uxtb	r1, r1
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4adc:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4ae0:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    4ae4:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
    4ae8:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4aec:	8005      	strh	r5, [r0, #0]
    4aee:	1209      	asrs	r1, r1, #8
    4af0:	3960      	subs	r1, #96	; 0x60
    4af2:	4630      	mov	r0, r6
    4af4:	fa80 f051 	uqadd8	r0, r0, r1
    4af8:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4afc:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4b00:	2a00      	cmp	r2, #0
    4b02:	d15e      	bne.n	4bc2 <fire(LEDStruct&)+0x2de>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4b04:	2b00      	cmp	r3, #0
    4b06:	f000 80d3 	beq.w	4cb0 <fire(LEDStruct&)+0x3cc>
    4b0a:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4b0e:	4690      	mov	r8, r2
    4b10:	46b9      	mov	r9, r7
    4b12:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    4b14:	3b01      	subs	r3, #1
    4b16:	ebc8 0503 	rsb	r5, r8, r3
    4b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4b1e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4b22:	4630      	mov	r0, r6
    4b24:	f006 fd48 	bl	b5b8 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b28:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4b2c:	5563      	strb	r3, [r4, r5]
    4b2e:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4b30:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4b34:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4b38:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4b3a:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4b3c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4b40:	f108 0801 	add.w	r8, r8, #1
    4b44:	4543      	cmp	r3, r8
    4b46:	dce5      	bgt.n	4b14 <fire(LEDStruct&)+0x230>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4b48:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4b4c:	b30a      	cbz	r2, 4b92 <fire(LEDStruct&)+0x2ae>
		if (leds.this_dir) {
    4b4e:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4b52:	2a00      	cmp	r2, #0
    4b54:	f040 8149 	bne.w	4dea <fire(LEDStruct&)+0x506>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4b58:	4690      	mov	r8, r2
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	f000 818a 	beq.w	4e74 <fire(LEDStruct&)+0x590>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    4b60:	eb08 0503 	add.w	r5, r8, r3
    4b64:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4b68:	4630      	mov	r0, r6
    4b6a:	f006 fd25 	bl	b5b8 <HeatColor(unsigned char)>
    4b6e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b72:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4b76:	54e2      	strb	r2, [r4, r3]
    4b78:	4423      	add	r3, r4
        g = rhs.g;
    4b7a:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    4b7e:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4b82:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    4b84:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4b86:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4b8a:	f108 0801 	add.w	r8, r8, #1
    4b8e:	4543      	cmp	r3, r8
    4b90:	dce6      	bgt.n	4b60 <fire(LEDStruct&)+0x27c>
    4b92:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4b96:	2a00      	cmp	r2, #0
    4b98:	d03a      	beq.n	4c10 <fire(LEDStruct&)+0x32c>
    4b9a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4b9e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ba0:	7822      	ldrb	r2, [r4, #0]
    4ba2:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4ba6:	7862      	ldrb	r2, [r4, #1]
    4ba8:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4bac:	78a2      	ldrb	r2, [r4, #2]
    4bae:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4bb2:	3403      	adds	r4, #3
    4bb4:	42a1      	cmp	r1, r4
    4bb6:	f1a3 0303 	sub.w	r3, r3, #3
    4bba:	d1f1      	bne.n	4ba0 <fire(LEDStruct&)+0x2bc>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4bbc:	b007      	add	sp, #28
    4bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	f000 8153 	beq.w	4e6e <fire(LEDStruct&)+0x58a>
    4bc8:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4bcc:	46b9      	mov	r9, r7
    4bce:	4625      	mov	r5, r4
    4bd0:	f04f 0800 	mov.w	r8, #0
    4bd4:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4bd6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4bda:	4630      	mov	r0, r6
    4bdc:	f006 fcec 	bl	b5b8 <HeatColor(unsigned char)>
    4be0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4be4:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4be8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4bec:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4bee:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4bf0:	70ab      	strb	r3, [r5, #2]
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4bf2:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4bf6:	f108 0801 	add.w	r8, r8, #1
    4bfa:	4543      	cmp	r3, r8
    4bfc:	f105 0503 	add.w	r5, r5, #3
    4c00:	dce9      	bgt.n	4bd6 <fire(LEDStruct&)+0x2f2>
    4c02:	e7a1      	b.n	4b48 <fire(LEDStruct&)+0x264>
    4c04:	1fff8784 	.word	0x1fff8784
    4c08:	1fff9619 	.word	0x1fff9619
    4c0c:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4c10:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4c14:	2a00      	cmp	r2, #0
    4c16:	d056      	beq.n	4cc6 <fire(LEDStruct&)+0x3e2>
			for (int j = 0; j < leds.heat_length; j++) {
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d0cf      	beq.n	4bbc <fire(LEDStruct&)+0x2d8>
    4c1c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4c20:	46b9      	mov	r9, r7
    4c22:	4625      	mov	r5, r4
    4c24:	f04f 0800 	mov.w	r8, #0
    4c28:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4c2a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4c2e:	4630      	mov	r0, r6
    4c30:	f006 fcc2 	bl	b5b8 <HeatColor(unsigned char)>
    4c34:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c38:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4c3c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c40:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4c44:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    4c48:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4c4c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4c50:	f108 0801 	add.w	r8, r8, #1
    4c54:	4543      	cmp	r3, r8
    4c56:	f1a5 0503 	sub.w	r5, r5, #3
    4c5a:	dce6      	bgt.n	4c2a <fire(LEDStruct&)+0x346>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    4c5c:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4c60:	2a00      	cmp	r2, #0
    4c62:	d0ab      	beq.n	4bbc <fire(LEDStruct&)+0x2d8>
			if (leds.this_dir) {
    4c64:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4c68:	2a00      	cmp	r2, #0
    4c6a:	f000 80dd 	beq.w	4e28 <fire(LEDStruct&)+0x544>
				for (int j = 0; j < leds.heat_length; j++) {
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d0a4      	beq.n	4bbc <fire(LEDStruct&)+0x2d8>
    4c72:	4625      	mov	r5, r4
    4c74:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4c78:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4c7c:	4630      	mov	r0, r6
    4c7e:	f006 fc9b 	bl	b5b8 <HeatColor(unsigned char)>
    4c82:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c86:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4c8a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c8e:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    4c92:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    4c96:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    4c9a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4c9e:	f108 0801 	add.w	r8, r8, #1
    4ca2:	4543      	cmp	r3, r8
    4ca4:	f105 0503 	add.w	r5, r5, #3
    4ca8:	dce6      	bgt.n	4c78 <fire(LEDStruct&)+0x394>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4caa:	b007      	add	sp, #28
    4cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4cb0:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	f040 80dd 	bne.w	4e74 <fire(LEDStruct&)+0x590>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4cba:	f1bc 0f00 	cmp.w	ip, #0
    4cbe:	f47f af6c 	bne.w	4b9a <fire(LEDStruct&)+0x2b6>
    4cc2:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	f43f af78 	beq.w	4bbc <fire(LEDStruct&)+0x2d8>
    4ccc:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4cd0:	46b9      	mov	r9, r7
    4cd2:	f04f 0800 	mov.w	r8, #0
    4cd6:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    4cd8:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    4cdc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4ce0:	354b      	adds	r5, #75	; 0x4b
    4ce2:	4445      	add	r5, r8
    4ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4ce8:	4630      	mov	r0, r6
    4cea:	f006 fc65 	bl	b5b8 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4cee:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4cf2:	5563      	strb	r3, [r4, r5]
    4cf4:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4cf6:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4cfa:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4cfe:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4d00:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4d02:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d06:	f108 0801 	add.w	r8, r8, #1
    4d0a:	4543      	cmp	r3, r8
    4d0c:	dce4      	bgt.n	4cd8 <fire(LEDStruct&)+0x3f4>
    4d0e:	e7a5      	b.n	4c5c <fire(LEDStruct&)+0x378>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4d10:	4620      	mov	r0, r4
    4d12:	f7ff fdad 	bl	4870 <fire_update(LEDStruct&)>
    4d16:	e5f4      	b.n	4902 <fire(LEDStruct&)+0x1e>
    4d18:	882b      	ldrh	r3, [r5, #0]
    4d1a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4d1e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4d22:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4d26:	3119      	adds	r1, #25
    4d28:	b289      	uxth	r1, r1
    4d2a:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4d2e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4d32:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4d36:	3219      	adds	r2, #25
    4d38:	b292      	uxth	r2, r2
    4d3a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4d3e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4d42:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4d46:	f10e 0e19 	add.w	lr, lr, #25
    4d4a:	fa1f fe8e 	uxth.w	lr, lr
    4d4e:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4d52:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    4d56:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4d5a:	3619      	adds	r6, #25
    4d5c:	b2b6      	uxth	r6, r6
    4d5e:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4d62:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4d66:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d6a:	3319      	adds	r3, #25
    4d6c:	b29b      	uxth	r3, r3
    4d6e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4d72:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d76:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4d7a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d7e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d82:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4d86:	b2f6      	uxtb	r6, r6
    4d88:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d8c:	3719      	adds	r7, #25
    4d8e:	b2db      	uxtb	r3, r3
    4d90:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4d94:	b2bf      	uxth	r7, r7
    4d96:	11b6      	asrs	r6, r6, #6
    4d98:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    4d9c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4da0:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4da4:	119b      	asrs	r3, r3, #6
    4da6:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4daa:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    4dae:	333c      	adds	r3, #60	; 0x3c
    4db0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4db4:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4db8:	fa5f f883 	uxtb.w	r8, r3
    4dbc:	fa5f fc8c 	uxtb.w	ip, ip
    4dc0:	3601      	adds	r6, #1
    4dc2:	f10e 0314 	add.w	r3, lr, #20
    4dc6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4dca:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4dce:	f8cd c000 	str.w	ip, [sp]
    4dd2:	f8cd 8004 	str.w	r8, [sp, #4]
    4dd6:	9602      	str	r6, [sp, #8]
    4dd8:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4ddc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    4de0:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4de2:	802f      	strh	r7, [r5, #0]
    4de4:	f7ff fcda 	bl	479c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4de8:	e586      	b.n	48f8 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4dea:	2b00      	cmp	r3, #0
    4dec:	d042      	beq.n	4e74 <fire(LEDStruct&)+0x590>
    4dee:	4625      	mov	r5, r4
    4df0:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4df4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4df8:	4630      	mov	r0, r6
    4dfa:	f006 fbdd 	bl	b5b8 <HeatColor(unsigned char)>
    4dfe:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e02:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4e06:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e0a:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    4e0e:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4e12:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4e16:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4e1a:	f108 0801 	add.w	r8, r8, #1
    4e1e:	4543      	cmp	r3, r8
    4e20:	f1a5 0503 	sub.w	r5, r5, #3
    4e24:	dce6      	bgt.n	4df4 <fire(LEDStruct&)+0x510>
    4e26:	e6b4      	b.n	4b92 <fire(LEDStruct&)+0x2ae>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4e28:	4690      	mov	r8, r2
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	f43f aec6 	beq.w	4bbc <fire(LEDStruct&)+0x2d8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4e30:	334b      	adds	r3, #75	; 0x4b
    4e32:	ebc8 0503 	rsb	r5, r8, r3
    4e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4e3a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4e3e:	4630      	mov	r0, r6
    4e40:	f006 fbba 	bl	b5b8 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e44:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4e48:	5563      	strb	r3, [r4, r5]
    4e4a:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4e4c:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4e50:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4e54:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4e56:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4e58:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4e5c:	f108 0801 	add.w	r8, r8, #1
    4e60:	4543      	cmp	r3, r8
    4e62:	dce5      	bgt.n	4e30 <fire(LEDStruct&)+0x54c>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4e64:	b007      	add	sp, #28
    4e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4e6a:	882a      	ldrh	r2, [r5, #0]
    4e6c:	e5f4      	b.n	4a58 <fire(LEDStruct&)+0x174>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4e6e:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4e72:	b13b      	cbz	r3, 4e84 <fire(LEDStruct&)+0x5a0>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4e74:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    4e78:	2b00      	cmp	r3, #0
    4e7a:	f47f ae8e 	bne.w	4b9a <fire(LEDStruct&)+0x2b6>
    4e7e:	e69d      	b.n	4bbc <fire(LEDStruct&)+0x2d8>
    4e80:	882a      	ldrh	r2, [r5, #0]
    4e82:	e569      	b.n	4958 <fire(LEDStruct&)+0x74>
    4e84:	f1bc 0f00 	cmp.w	ip, #0
    4e88:	f47f ae87 	bne.w	4b9a <fire(LEDStruct&)+0x2b6>
    4e8c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4e90:	e6c2      	b.n	4c18 <fire(LEDStruct&)+0x334>
    4e92:	bf00      	nop

00004e94 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    4e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4e98:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4e9c:	4dd0      	ldr	r5, [pc, #832]	; (51e0 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    4e9e:	b087      	sub	sp, #28
    4ea0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	f000 81da 	beq.w	525c <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    4ea8:	4bce      	ldr	r3, [pc, #824]	; (51e4 <torch(LEDStruct&)+0x350>)
    4eaa:	781b      	ldrb	r3, [r3, #0]
    4eac:	2b00      	cmp	r3, #0
    4eae:	f040 8242 	bne.w	5336 <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4eb2:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    4eb6:	4663      	mov	r3, ip
    4eb8:	f1bc 0f00 	cmp.w	ip, #0
    4ebc:	f000 823f 	beq.w	533e <torch(LEDStruct&)+0x4aa>
    4ec0:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4ec4:	882a      	ldrh	r2, [r5, #0]
    4ec6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4eca:	004f      	lsls	r7, r1, #1
    4ecc:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    4ed0:	fb97 f7fc 	sdiv	r7, r7, ip
    4ed4:	3702      	adds	r7, #2
    4ed6:	b2ff      	uxtb	r7, r7
    4ed8:	44a6      	add	lr, r4
    4eda:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4ede:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4ee2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4ee6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4eea:	3219      	adds	r2, #25
    4eec:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4eee:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4ef2:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4ef6:	b2c9      	uxtb	r1, r1
    4ef8:	fb11 f107 	smulbb	r1, r1, r7
    4efc:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4f00:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4f04:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4f06:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4f08:	d1e9      	bne.n	4ede <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4f0a:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4f0e:	802a      	strh	r2, [r5, #0]
    4f10:	2e00      	cmp	r6, #0
    4f12:	f000 816b 	beq.w	51ec <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4f16:	f1ac 0703 	sub.w	r7, ip, #3
    4f1a:	2f01      	cmp	r7, #1
    4f1c:	f04f 0901 	mov.w	r9, #1
    4f20:	dd1a      	ble.n	4f58 <torch(LEDStruct&)+0xc4>
    4f22:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    4f26:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4f2a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 51e8 <torch(LEDStruct&)+0x354>
    4f2e:	4420      	add	r0, r4
    4f30:	4426      	add	r6, r4
    4f32:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    4f36:	7801      	ldrb	r1, [r0, #0]
    4f38:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    4f3c:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    4f40:	fb88 ba01 	smull	fp, sl, r8, r1
    4f44:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4f48:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4f4a:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4f4e:	d1f2      	bne.n	4f36 <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    4f50:	f1b9 0f00 	cmp.w	r9, #0
    4f54:	f000 812c 	beq.w	51b0 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f58:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4f5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4f60:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4f64:	3219      	adds	r2, #25
    4f66:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    4f68:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4f6c:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4f70:	802a      	strh	r2, [r5, #0]
    4f72:	b2c0      	uxtb	r0, r0
    4f74:	4286      	cmp	r6, r0
    4f76:	499a      	ldr	r1, [pc, #616]	; (51e0 <torch(LEDStruct&)+0x34c>)
    4f78:	d928      	bls.n	4fcc <torch(LEDStruct&)+0x138>
    4f7a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4f7e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4f82:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4f86:	3219      	adds	r2, #25
    4f88:	b292      	uxth	r2, r2
    4f8a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4f8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4f92:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4f96:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f98:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f9c:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4f9e:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fa0:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fa4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4fa8:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4faa:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4fae:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fb2:	800e      	strh	r6, [r1, #0]
    4fb4:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4fb8:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    4fbc:	1200      	asrs	r0, r0, #8
    4fbe:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    4fc2:	4630      	mov	r0, r6
    4fc4:	fa80 f051 	uqadd8	r0, r0, r1
    4fc8:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    4fcc:	f1b9 0f00 	cmp.w	r9, #0
    4fd0:	d112      	bne.n	4ff8 <torch(LEDStruct&)+0x164>
    4fd2:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4fd4:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4fd8:	4981      	ldr	r1, [pc, #516]	; (51e0 <torch(LEDStruct&)+0x34c>)
    4fda:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4fde:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4fe2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4fe6:	3219      	adds	r2, #25
    4fe8:	b292      	uxth	r2, r2
    4fea:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4fee:	b2c0      	uxtb	r0, r0
    4ff0:	4286      	cmp	r6, r0
    4ff2:	802a      	strh	r2, [r5, #0]
    4ff4:	f200 80af 	bhi.w	5156 <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4ff8:	f1bc 0f00 	cmp.w	ip, #0
    4ffc:	f000 81a4 	beq.w	5348 <torch(LEDStruct&)+0x4b4>
    5000:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5004:	2600      	movs	r6, #0
    5006:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    500a:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    500e:	199d      	adds	r5, r3, r6
    5010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5014:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5018:	4648      	mov	r0, r9
    501a:	f006 facd 	bl	b5b8 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    501e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5022:	5563      	strb	r3, [r4, r5]
    5024:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5026:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    502a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    502e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    5030:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    5032:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5036:	3601      	adds	r6, #1
    5038:	42b3      	cmp	r3, r6
    503a:	dce6      	bgt.n	500a <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    503c:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    5040:	2e00      	cmp	r6, #0
    5042:	d175      	bne.n	5130 <torch(LEDStruct&)+0x29c>
    5044:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5048:	2b00      	cmp	r3, #0
    504a:	f000 8183 	beq.w	5354 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    504e:	334a      	adds	r3, #74	; 0x4a
    5050:	1b9d      	subs	r5, r3, r6
    5052:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5056:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    505a:	4648      	mov	r0, r9
    505c:	f006 faac 	bl	b5b8 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5060:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5064:	5563      	strb	r3, [r4, r5]
    5066:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5068:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    506c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    5070:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    5072:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5074:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5078:	3601      	adds	r6, #1
    507a:	42b3      	cmp	r3, r6
    507c:	dce7      	bgt.n	504e <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    507e:	2b4b      	cmp	r3, #75	; 0x4b
    5080:	d047      	beq.n	5112 <torch(LEDStruct&)+0x27e>
    5082:	f10d 0914 	add.w	r9, sp, #20
    5086:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    508a:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    508c:	4626      	mov	r6, r4
    508e:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    5090:	f04f 0a01 	mov.w	sl, #1
    5094:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    5098:	f8cd a000 	str.w	sl, [sp]
    509c:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    50a0:	fb98 f3f3 	sdiv	r3, r8, r3
    50a4:	441a      	add	r2, r3
    50a6:	b2d2      	uxtb	r2, r2
    50a8:	23ff      	movs	r3, #255	; 0xff
    50aa:	4659      	mov	r1, fp
    50ac:	4648      	mov	r0, r9
    50ae:	f006 faa5 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    50b2:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    50b6:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    50ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    50be:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    50c0:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    50c2:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    50c4:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    50c8:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    50cc:	fb98 f8f2 	sdiv	r8, r8, r2
    50d0:	eb08 0203 	add.w	r2, r8, r3
    50d4:	b2d2      	uxtb	r2, r2
    50d6:	23ff      	movs	r3, #255	; 0xff
    50d8:	4659      	mov	r1, fp
    50da:	f8cd a000 	str.w	sl, [sp]
    50de:	4648      	mov	r0, r9
    50e0:	f006 fa8c 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    50e4:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    50e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    50ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    50f0:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    50f4:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    50f8:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    50fc:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5100:	3501      	adds	r5, #1
    5102:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    5106:	42aa      	cmp	r2, r5
    5108:	f106 0603 	add.w	r6, r6, #3
    510c:	f1a7 0703 	sub.w	r7, r7, #3
    5110:	dcc0      	bgt.n	5094 <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    5112:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5116:	2b00      	cmp	r3, #0
    5118:	f040 8096 	bne.w	5248 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    511c:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    5120:	f894 231b 	ldrb.w	r2, [r4, #795]	; 0x31b
    5124:	1a9b      	subs	r3, r3, r2
    5126:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
}
    512a:	b007      	add	sp, #28
    512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5130:	4621      	mov	r1, r4
    5132:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5136:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5138:	7810      	ldrb	r0, [r2, #0]
    513a:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    513e:	7850      	ldrb	r0, [r2, #1]
    5140:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    5144:	7890      	ldrb	r0, [r2, #2]
    5146:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    514a:	3203      	adds	r2, #3
    514c:	4295      	cmp	r5, r2
    514e:	f1a1 0103 	sub.w	r1, r1, #3
    5152:	d1f1      	bne.n	5138 <torch(LEDStruct&)+0x2a4>
    5154:	e793      	b.n	507e <torch(LEDStruct&)+0x1ea>
    5156:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    515a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    515e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5162:	3219      	adds	r2, #25
    5164:	b292      	uxth	r2, r2
    5166:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    516a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    516e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5172:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5174:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5178:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    517a:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    517c:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5180:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    5184:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    5186:	eb04 2222 	add.w	r2, r4, r2, asr #8
    518a:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    518e:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    5192:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5196:	800d      	strh	r5, [r1, #0]
    5198:	1201      	asrs	r1, r0, #8
    519a:	3960      	subs	r1, #96	; 0x60
    519c:	4630      	mov	r0, r6
    519e:	fa80 f051 	uqadd8	r0, r0, r1
    51a2:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    51a6:	f1bc 0f00 	cmp.w	ip, #0
    51aa:	f47f af29 	bne.w	5000 <torch(LEDStruct&)+0x16c>
    51ae:	e0cf      	b.n	5350 <torch(LEDStruct&)+0x4bc>
    51b0:	f20c 26c7 	addw	r6, ip, #711	; 0x2c7
    51b4:	f20c 2ec9 	addw	lr, ip, #713	; 0x2c9
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    51b8:	f8df 802c 	ldr.w	r8, [pc, #44]	; 51e8 <torch(LEDStruct&)+0x354>
    51bc:	4426      	add	r6, r4
    51be:	44a6      	add	lr, r4
    51c0:	7831      	ldrb	r1, [r6, #0]
    51c2:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    51c6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    51ca:	fb88 a001 	smull	sl, r0, r8, r1
    51ce:	3f01      	subs	r7, #1
    51d0:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    51d4:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    51d6:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    51da:	d1f1      	bne.n	51c0 <torch(LEDStruct&)+0x32c>
    51dc:	e6bc      	b.n	4f58 <torch(LEDStruct&)+0xc4>
    51de:	bf00      	nop
    51e0:	1fff8784 	.word	0x1fff8784
    51e4:	1fff9619 	.word	0x1fff9619
    51e8:	55555556 	.word	0x55555556
    51ec:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    51f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    51f4:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    51f8:	fb9e fefc 	sdiv	lr, lr, ip
    51fc:	f10e 0e02 	add.w	lr, lr, #2
    5200:	fa5f fe8e 	uxtb.w	lr, lr
    5204:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    5208:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    520c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5210:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5214:	3219      	adds	r2, #25
    5216:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5218:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    521c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    5220:	b2c9      	uxtb	r1, r1
    5222:	fb11 f10e 	smulbb	r1, r1, lr
    5226:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    522a:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    522c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    5230:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    5232:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    5234:	dbe8      	blt.n	5208 <torch(LEDStruct&)+0x374>
    5236:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5238:	f1ac 0703 	sub.w	r7, ip, #3
    523c:	2f01      	cmp	r7, #1
    523e:	f04f 0900 	mov.w	r9, #0
    5242:	f73f ae6e 	bgt.w	4f22 <torch(LEDStruct&)+0x8e>
    5246:	e687      	b.n	4f58 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    5248:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    524c:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    5250:	4413      	add	r3, r2
    5252:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
	else			   { leds.torch_index -= leds.torch_diff; }
}
    5256:	b007      	add	sp, #28
    5258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    525c:	882b      	ldrh	r3, [r5, #0]
    525e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    5262:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5266:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    526a:	3119      	adds	r1, #25
    526c:	b289      	uxth	r1, r1
    526e:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    5272:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5276:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    527a:	3219      	adds	r2, #25
    527c:	b292      	uxth	r2, r2
    527e:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    5282:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5286:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    528a:	f10e 0e19 	add.w	lr, lr, #25
    528e:	fa1f fe8e 	uxth.w	lr, lr
    5292:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    5296:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    529a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    529e:	3619      	adds	r6, #25
    52a0:	b2b6      	uxth	r6, r6
    52a2:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    52a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    52aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52ae:	3319      	adds	r3, #25
    52b0:	b29b      	uxth	r3, r3
    52b2:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    52b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52ba:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    52be:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    52c2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52c6:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    52ca:	b2f6      	uxtb	r6, r6
    52cc:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    52d0:	3719      	adds	r7, #25
    52d2:	b2db      	uxtb	r3, r3
    52d4:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    52d8:	b2bf      	uxth	r7, r7
    52da:	11b6      	asrs	r6, r6, #6
    52dc:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    52e0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    52e4:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    52e8:	119b      	asrs	r3, r3, #6
    52ea:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52ee:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    52f2:	333c      	adds	r3, #60	; 0x3c
    52f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    52f8:	f3c6 1681 	ubfx	r6, r6, #6, #2
    52fc:	fa5f fc8c 	uxtb.w	ip, ip
    5300:	fa5f f883 	uxtb.w	r8, r3
    5304:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5308:	f10e 0314 	add.w	r3, lr, #20
    530c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    5310:	3601      	adds	r6, #1
    5312:	f8cd c000 	str.w	ip, [sp]
    5316:	f8cd 8004 	str.w	r8, [sp, #4]
    531a:	9602      	str	r6, [sp, #8]
    531c:	b2db      	uxtb	r3, r3
    531e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    5322:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5326:	802f      	strh	r7, [r5, #0]
    5328:	f7ff fa38 	bl	479c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    532c:	4b0b      	ldr	r3, [pc, #44]	; (535c <torch(LEDStruct&)+0x4c8>)
    532e:	781b      	ldrb	r3, [r3, #0]
    5330:	2b00      	cmp	r3, #0
    5332:	f43f adbe 	beq.w	4eb2 <torch(LEDStruct&)+0x1e>
    5336:	4620      	mov	r0, r4
    5338:	f7ff fa9a 	bl	4870 <fire_update(LEDStruct&)>
    533c:	e5b9      	b.n	4eb2 <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    533e:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    5342:	b14a      	cbz	r2, 5358 <torch(LEDStruct&)+0x4c4>
    5344:	882a      	ldrh	r2, [r5, #0]
    5346:	e5e6      	b.n	4f16 <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5348:	f1b9 0f00 	cmp.w	r9, #0
    534c:	f47f aef0 	bne.w	5130 <torch(LEDStruct&)+0x29c>
    5350:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5354:	2300      	movs	r3, #0
    5356:	e696      	b.n	5086 <torch(LEDStruct&)+0x1f2>
    5358:	882a      	ldrh	r2, [r5, #0]
    535a:	e76d      	b.n	5238 <torch(LEDStruct&)+0x3a4>
    535c:	1fff9619 	.word	0x1fff9619

00005360 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5360:	4b0e      	ldr	r3, [pc, #56]	; (539c <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5362:	4a0f      	ldr	r2, [pc, #60]	; (53a0 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    5364:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5366:	2100      	movs	r1, #0
    5368:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    536a:	b13b      	cbz	r3, 537c <confetti_update(LEDStruct&)+0x1c>
    536c:	2b01      	cmp	r3, #1
    536e:	d103      	bne.n	5378 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    5370:	4b0c      	ldr	r3, [pc, #48]	; (53a4 <confetti_update(LEDStruct&)+0x44>)
    5372:	881b      	ldrh	r3, [r3, #0]
    5374:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    5378:	f7fc bf0e 	b.w	2198 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    537c:	4b09      	ldr	r3, [pc, #36]	; (53a4 <confetti_update(LEDStruct&)+0x44>)
    537e:	881b      	ldrh	r3, [r3, #0]
    5380:	2b00      	cmp	r3, #0
    5382:	bf14      	ite	ne
    5384:	2301      	movne	r3, #1
    5386:	2300      	moveq	r3, #0
    5388:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    538c:	bf14      	ite	ne
    538e:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5390:	234b      	moveq	r3, #75	; 0x4b
    5392:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    5396:	f7fc beff 	b.w	2198 <LEDDebug(LEDStruct&)>
    539a:	bf00      	nop
    539c:	1fff9e7c 	.word	0x1fff9e7c
    53a0:	1fff9619 	.word	0x1fff9619
    53a4:	1fff951a 	.word	0x1fff951a

000053a8 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    53a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    53aa:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    53ae:	4e4b      	ldr	r6, [pc, #300]	; (54dc <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    53b0:	b085      	sub	sp, #20
    53b2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    53b4:	bb8b      	cbnz	r3, 541a <confetti(LEDStruct&)+0x72>
    53b6:	8833      	ldrh	r3, [r6, #0]
    53b8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    53bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    53c0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    53c4:	3319      	adds	r3, #25
    53c6:	b29b      	uxth	r3, r3
    53c8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    53cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    53d0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    53d4:	3119      	adds	r1, #25
    53d6:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53d8:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53dc:	b2d2      	uxtb	r2, r2
    53de:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    53e2:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53e4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    53e8:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53ea:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    53f0:	2714      	movs	r7, #20
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    53f2:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53f4:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53f6:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    53f8:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    53fc:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    5400:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    5404:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5408:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    540c:	2b00      	cmp	r3, #0
    540e:	d15c      	bne.n	54ca <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    5410:	234b      	movs	r3, #75	; 0x4b
    5412:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.confetti_fade		= cf;
    5416:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    541a:	4b31      	ldr	r3, [pc, #196]	; (54e0 <confetti(LEDStruct&)+0x138>)
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2b00      	cmp	r3, #0
    5420:	d157      	bne.n	54d2 <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    5422:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    5426:	4620      	mov	r0, r4
    5428:	2196      	movs	r1, #150	; 0x96
    542a:	f006 f887 	bl	b53c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    542e:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5430:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5434:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5438:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    543c:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    5440:	3319      	adds	r3, #25
    5442:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5444:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    544c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5450:	3719      	adds	r7, #25
    5452:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5454:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5458:	fb03 f305 	mul.w	r3, r3, r5
    545c:	2101      	movs	r1, #1
    545e:	0c1d      	lsrs	r5, r3, #16
    5460:	9100      	str	r1, [sp, #0]
    5462:	a803      	add	r0, sp, #12
    5464:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    5468:	b2d2      	uxtb	r2, r2
    546a:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    546c:	8037      	strh	r7, [r6, #0]
    546e:	f006 f8c5 	bl	b5fc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5472:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5476:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    5478:	5ce2      	ldrb	r2, [r4, r3]
    547a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    547e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5482:	54e2      	strb	r2, [r4, r3]
    5484:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5488:	784a      	ldrb	r2, [r1, #1]
    548a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    548e:	704a      	strb	r2, [r1, #1]
    5490:	788b      	ldrb	r3, [r1, #2]
    5492:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5496:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    549a:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    549c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    54a0:	b98b      	cbnz	r3, 54c6 <confetti(LEDStruct&)+0x11e>
    54a2:	4620      	mov	r0, r4
    54a4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    54a8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54aa:	781a      	ldrb	r2, [r3, #0]
    54ac:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    54b0:	785a      	ldrb	r2, [r3, #1]
    54b2:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    54b6:	789a      	ldrb	r2, [r3, #2]
    54b8:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    54bc:	3303      	adds	r3, #3
    54be:	428b      	cmp	r3, r1
    54c0:	f1a0 0003 	sub.w	r0, r0, #3
    54c4:	d1f1      	bne.n	54aa <confetti(LEDStruct&)+0x102>
}
    54c6:	b005      	add	sp, #20
    54c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    54ca:	2396      	movs	r3, #150	; 0x96
    54cc:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    54d0:	e7a1      	b.n	5416 <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    54d2:	4620      	mov	r0, r4
    54d4:	f7ff ff44 	bl	5360 <confetti_update(LEDStruct&)>
    54d8:	e7a3      	b.n	5422 <confetti(LEDStruct&)+0x7a>
    54da:	bf00      	nop
    54dc:	1fff8784 	.word	0x1fff8784
    54e0:	1fff9619 	.word	0x1fff9619

000054e4 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    54e4:	4b24      	ldr	r3, [pc, #144]	; (5578 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    54e6:	4a25      	ldr	r2, [pc, #148]	; (557c <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    54e8:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    54ea:	2100      	movs	r1, #0
    54ec:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    54ee:	2b09      	cmp	r3, #9
    54f0:	d80a      	bhi.n	5508 <one_sin_update(LEDStruct&)+0x24>
    54f2:	e8df f003 	tbb	[pc, r3]
    54f6:	1e10      	.short	0x1e10
    54f8:	322d2823 	.word	0x322d2823
    54fc:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    5500:	4b1f      	ldr	r3, [pc, #124]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5502:	881b      	ldrh	r3, [r3, #0]
    5504:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5508:	f7fc be46 	b.w	2198 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    550c:	4b1c      	ldr	r3, [pc, #112]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    550e:	881b      	ldrh	r3, [r3, #0]
    5510:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    5514:	e7f8      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5516:	4b1a      	ldr	r3, [pc, #104]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5518:	881b      	ldrh	r3, [r3, #0]
    551a:	2b00      	cmp	r3, #0
    551c:	bf14      	ite	ne
    551e:	2301      	movne	r3, #1
    5520:	2300      	moveq	r3, #0
    5522:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5526:	bf14      	ite	ne
    5528:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    552a:	234b      	moveq	r3, #75	; 0x4b
    552c:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    5530:	e7ea      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    5532:	4b13      	ldr	r3, [pc, #76]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5534:	881b      	ldrh	r3, [r3, #0]
    5536:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    553a:	e7e5      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    553c:	4b10      	ldr	r3, [pc, #64]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    553e:	881b      	ldrh	r3, [r3, #0]
    5540:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    5544:	e7e0      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    5546:	4b0e      	ldr	r3, [pc, #56]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5548:	881b      	ldrh	r3, [r3, #0]
    554a:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    554e:	e7db      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    5550:	4b0b      	ldr	r3, [pc, #44]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5552:	881b      	ldrh	r3, [r3, #0]
    5554:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5558:	e7d6      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    555a:	4b09      	ldr	r3, [pc, #36]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    555c:	881b      	ldrh	r3, [r3, #0]
    555e:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    5562:	e7d1      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    5564:	4b06      	ldr	r3, [pc, #24]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5566:	881b      	ldrh	r3, [r3, #0]
    5568:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    556c:	e7cc      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    556e:	4b04      	ldr	r3, [pc, #16]	; (5580 <one_sin_update(LEDStruct&)+0x9c>)
    5570:	881b      	ldrh	r3, [r3, #0]
    5572:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    5576:	e7c7      	b.n	5508 <one_sin_update(LEDStruct&)+0x24>
    5578:	1fff9e7c 	.word	0x1fff9e7c
    557c:	1fff9619 	.word