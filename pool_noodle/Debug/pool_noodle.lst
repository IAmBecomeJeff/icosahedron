
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 d5 9a 00 00 8d 9a 00 00     ... ............
      10:	8d 9a 00 00 8d 9a 00 00 8d 9a 00 00 8d 9a 00 00     ................
      20:	8d 9a 00 00 8d 9a 00 00 8d 9a 00 00 d5 9a 00 00     ................
      30:	d5 9a 00 00 8d 9a 00 00 01 af 00 00 05 b0 00 00     ................
      40:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      50:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      60:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      70:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      80:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      90:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      a0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      b0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      c0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      d0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      e0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
      f0:	d5 9a 00 00 5d b3 00 00 d5 9a 00 00 89 b4 00 00     ....]...........
     100:	d5 9a 00 00 b5 b5 00 00 d5 9a 00 00 d5 9a 00 00     ................
     110:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     120:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     130:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     140:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     150:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     160:	d5 9a 00 00 1d 9f 00 00 d5 9a 00 00 d5 9a 00 00     ................
     170:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     180:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     190:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     1a0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00 d5 9a 00 00     ................
     1b0:	d5 9a 00 00 d5 9a 00 00 d5 9a 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f009 fc84 	bl	9adc <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f009 fcd8 	bl	9c88 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f009 fc49 	bl	9b78 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f009 fc3a 	bl	9b78 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00c f93c 	bl	c584 <__libc_init_array>

	startup_late_hook();
     30c:	f009 fbec 	bl	9ae8 <startup_late_hook>
	main();
     310:	f00a fe80 	bl	b014 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c44 	.word	0x1fff8c44
     33c:	0000f7a4 	.word	0x0000f7a4
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c44 	.word	0x1fff8c44
     348:	1fffa344 	.word	0x1fffa344
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e32f70d 	.word	0x5e32f70d
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c44 	.word	0x1fff8c44
     42c:	00000000 	.word	0x00000000
     430:	0000f7a8 	.word	0x0000f7a8

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c48 	.word	0x1fff8c48
     460:	0000f7a8 	.word	0x0000f7a8
     464:	1fff8c44 	.word	0x1fff8c44
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     490:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     492:	4b18      	ldr	r3, [pc, #96]	; (4f4 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x64>)
     494:	b083      	sub	sp, #12
     496:	681b      	ldr	r3, [r3, #0]
     498:	9301      	str	r3, [sp, #4]
	return ret;
     49a:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     49c:	f44f 738c 	mov.w	r3, #280	; 0x118
     4a0:	fb03 f606 	mul.w	r6, r3, r6
     4a4:	fb00 f006 	mul.w	r0, r0, r6
     4a8:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4aa:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4ac:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4b0:	d503      	bpl.n	4ba <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x2a>
     4b2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4b6:	3307      	adds	r3, #7
     4b8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4ba:	0a18      	lsrs	r0, r3, #8
     4bc:	4d0e      	ldr	r5, [pc, #56]	; (4f8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x68>)
    uint8_t  m   = slope[section];
     4be:	4c0f      	ldr	r4, [pc, #60]	; (4fc <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4c0:	5c24      	ldrb	r4, [r4, r0]
     4c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     4c6:	f3c3 0546 	ubfx	r5, r3, #1, #7
     4ca:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     4ce:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4d0:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     4d2:	bf48      	it	mi
     4d4:	4264      	negmi	r4, r4
     4d6:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     4d8:	1a53      	subs	r3, r2, r1
     4da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     4de:	b29a      	uxth	r2, r3
     4e0:	b2a3      	uxth	r3, r4
     4e2:	fb02 3303 	mla	r3, r2, r3, r3
     4e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     4ea:	b280      	uxth	r0, r0
     4ec:	b003      	add	sp, #12
     4ee:	bc70      	pop	{r4, r5, r6}
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	1fffa080 	.word	0x1fffa080
     4f8:	0000da90 	.word	0x0000da90
     4fc:	0000e5f4 	.word	0x0000e5f4

00000500 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     500:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     502:	2101      	movs	r1, #1
     504:	4604      	mov	r4, r0
     506:	200e      	movs	r0, #14
     508:	f009 fb48 	bl	9b9c <pinMode>
     50c:	2007      	movs	r0, #7
     50e:	2101      	movs	r1, #1
     510:	f009 fb44 	bl	9b9c <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     514:	69a0      	ldr	r0, [r4, #24]
     516:	b158      	cbz	r0, 530 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     518:	6803      	ldr	r3, [r0, #0]
     51a:	4a07      	ldr	r2, [pc, #28]	; (538 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	4293      	cmp	r3, r2
     520:	d107      	bne.n	532 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     522:	6842      	ldr	r2, [r0, #4]
     524:	7b01      	ldrb	r1, [r0, #12]
     526:	7813      	ldrb	r3, [r2, #0]
     528:	ea23 0301 	bic.w	r3, r3, r1
     52c:	7013      	strb	r3, [r2, #0]
     52e:	bd10      	pop	{r4, pc}
     530:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     536:	4718      	bx	r3
     538:	00000481 	.word	0x00000481

0000053c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     540:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     542:	6805      	ldr	r5, [r0, #0]
     544:	f88d 3004 	strb.w	r3, [sp, #4]
     548:	f88d 3005 	strb.w	r3, [sp, #5]
     54c:	f88d 3006 	strb.w	r3, [sp, #6]
     550:	682e      	ldr	r6, [r5, #0]
     552:	4a37      	ldr	r2, [pc, #220]	; (630 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     554:	f88d 3008 	strb.w	r3, [sp, #8]
     558:	4296      	cmp	r6, r2
     55a:	f88d 3009 	strb.w	r3, [sp, #9]
     55e:	f88d 300a 	strb.w	r3, [sp, #10]
     562:	d15f      	bne.n	624 <CLEDController::clearLeds(int)+0xe8>
     564:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     566:	9104      	str	r1, [sp, #16]
     568:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     56a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     56c:	a801      	add	r0, sp, #4
     56e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     570:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     574:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     578:	f88d 3020 	strb.w	r3, [sp, #32]
     57c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     57e:	d015      	beq.n	5ac <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     580:	f88d 301d 	strb.w	r3, [sp, #29]
     584:	f88d 301c 	strb.w	r3, [sp, #28]
     588:	f88d 301b 	strb.w	r3, [sp, #27]
     58c:	f88d 301a 	strb.w	r3, [sp, #26]
     590:	f88d 3019 	strb.w	r3, [sp, #25]
     594:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     598:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     59a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     59c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     5a2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a4:	a903      	add	r1, sp, #12
     5a6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5a8:	b00b      	add	sp, #44	; 0x2c
     5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     5ac:	4a21      	ldr	r2, [pc, #132]	; (634 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5ae:	7813      	ldrb	r3, [r2, #0]
     5b0:	3301      	adds	r3, #1
     5b2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     5b6:	f013 0f01 	tst.w	r3, #1
     5ba:	bf14      	ite	ne
     5bc:	2180      	movne	r1, #128	; 0x80
     5be:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5c0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     5c2:	079a      	lsls	r2, r3, #30
     5c4:	bf44      	itt	mi
     5c6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     5ca:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     5cc:	075b      	lsls	r3, r3, #29
     5ce:	bf48      	it	mi
     5d0:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     5d4:	3110      	adds	r1, #16
     5d6:	2200      	movs	r2, #0
     5d8:	b2c9      	uxtb	r1, r1
     5da:	f10d 031b 	add.w	r3, sp, #27
     5de:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5e2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5e6:	b1aa      	cbz	r2, 614 <CLEDController::clearLeds(int)+0xd8>
     5e8:	fb9e f2f2 	sdiv	r2, lr, r2
     5ec:	b2d2      	uxtb	r2, r2
     5ee:	1c50      	adds	r0, r2, #1
     5f0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5f2:	fb00 1501 	mla	r5, r0, r1, r1
     5f6:	122d      	asrs	r5, r5, #8
     5f8:	7018      	strb	r0, [r3, #0]
     5fa:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5fc:	b105      	cbz	r5, 600 <CLEDController::clearLeds(int)+0xc4>
     5fe:	3e01      	subs	r6, #1
     600:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     604:	b100      	cbz	r0, 608 <CLEDController::clearLeds(int)+0xcc>
     606:	701a      	strb	r2, [r3, #0]
     608:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     60a:	429f      	cmp	r7, r3
     60c:	d008      	beq.n	620 <CLEDController::clearLeds(int)+0xe4>
     60e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     610:	2a00      	cmp	r2, #0
     612:	d1e9      	bne.n	5e8 <CLEDController::clearLeds(int)+0xac>
     614:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     616:	f803 2c03 	strb.w	r2, [r3, #-3]
     61a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     61c:	429f      	cmp	r7, r3
     61e:	d1f6      	bne.n	60e <CLEDController::clearLeds(int)+0xd2>
     620:	6825      	ldr	r5, [r4, #0]
     622:	e7b9      	b.n	598 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     624:	460a      	mov	r2, r1
     626:	ab02      	add	r3, sp, #8
     628:	a901      	add	r1, sp, #4
     62a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     62c:	b00b      	add	sp, #44	; 0x2c
     62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     630:	00000639 	.word	0x00000639
     634:	1fff8c60 	.word	0x1fff8c60

00000638 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     63c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     63e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     640:	789b      	ldrb	r3, [r3, #2]
     642:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     644:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     646:	9101      	str	r1, [sp, #4]
     648:	9202      	str	r2, [sp, #8]
     64a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     64c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     650:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     658:	d016      	beq.n	688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     65a:	2300      	movs	r3, #0
     65c:	f88d 3015 	strb.w	r3, [sp, #21]
     660:	f88d 3014 	strb.w	r3, [sp, #20]
     664:	f88d 3013 	strb.w	r3, [sp, #19]
     668:	f88d 3012 	strb.w	r3, [sp, #18]
     66c:	f88d 3011 	strb.w	r3, [sp, #17]
     670:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     674:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     676:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     678:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     67a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     67e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     680:	a901      	add	r1, sp, #4
     682:	4790      	blx	r2
  }
     684:	b009      	add	sp, #36	; 0x24
     686:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     688:	4a1b      	ldr	r2, [pc, #108]	; (6f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     68a:	7813      	ldrb	r3, [r2, #0]
     68c:	3301      	adds	r3, #1
     68e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     692:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     696:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     698:	bf14      	ite	ne
     69a:	2280      	movne	r2, #128	; 0x80
     69c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     69e:	0799      	lsls	r1, r3, #30
     6a0:	bf44      	itt	mi
     6a2:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6a6:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6a8:	075b      	lsls	r3, r3, #29
     6aa:	bf48      	it	mi
     6ac:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6b0:	3210      	adds	r2, #16
     6b2:	b2d2      	uxtb	r2, r2
     6b4:	f10d 0313 	add.w	r3, sp, #19
     6b8:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6bc:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6c0:	b1ac      	cbz	r4, 6ee <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     6c2:	fb9e f4f4 	sdiv	r4, lr, r4
     6c6:	b2e4      	uxtb	r4, r4
     6c8:	1c61      	adds	r1, r4, #1
     6ca:	b2c9      	uxtb	r1, r1
     6cc:	fb01 2502 	mla	r5, r1, r2, r2
     6d0:	122d      	asrs	r5, r5, #8
     6d2:	7019      	strb	r1, [r3, #0]
     6d4:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6d6:	b105      	cbz	r5, 6da <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     6d8:	3e01      	subs	r6, #1
     6da:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6de:	b101      	cbz	r1, 6e2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     6e0:	701c      	strb	r4, [r3, #0]
     6e2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6e4:	42bb      	cmp	r3, r7
     6e6:	d0c5      	beq.n	674 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     6e8:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6ea:	2c00      	cmp	r4, #0
     6ec:	d1e9      	bne.n	6c2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     6ee:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6f0:	f803 4c03 	strb.w	r4, [r3, #-3]
     6f4:	e7f5      	b.n	6e2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     6f6:	bf00      	nop
     6f8:	1fff8c60 	.word	0x1fff8c60

000006fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     700:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     702:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     704:	789b      	ldrb	r3, [r3, #2]
     706:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     708:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     70a:	9101      	str	r1, [sp, #4]
     70c:	9202      	str	r2, [sp, #8]
     70e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     710:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     714:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     718:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     71c:	d017      	beq.n	74e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71e:	2300      	movs	r3, #0
     720:	f88d 3015 	strb.w	r3, [sp, #21]
     724:	f88d 3014 	strb.w	r3, [sp, #20]
     728:	f88d 3013 	strb.w	r3, [sp, #19]
     72c:	f88d 3012 	strb.w	r3, [sp, #18]
     730:	f88d 3011 	strb.w	r3, [sp, #17]
     734:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     738:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     73a:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     73c:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     73e:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     740:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     744:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     746:	a901      	add	r1, sp, #4
     748:	4798      	blx	r3
  }
     74a:	b009      	add	sp, #36	; 0x24
     74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     74e:	4a1b      	ldr	r2, [pc, #108]	; (7bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     750:	7813      	ldrb	r3, [r2, #0]
     752:	3301      	adds	r3, #1
     754:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     758:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     75c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     75e:	bf14      	ite	ne
     760:	2280      	movne	r2, #128	; 0x80
     762:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     764:	0799      	lsls	r1, r3, #30
     766:	bf44      	itt	mi
     768:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     76c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     76e:	075b      	lsls	r3, r3, #29
     770:	bf48      	it	mi
     772:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     776:	3210      	adds	r2, #16
     778:	b2d2      	uxtb	r2, r2
     77a:	f10d 0313 	add.w	r3, sp, #19
     77e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     782:	f44f 7e80 	mov.w	lr, #256	; 0x100
     786:	b1ac      	cbz	r4, 7b4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     788:	fb9e f4f4 	sdiv	r4, lr, r4
     78c:	b2e4      	uxtb	r4, r4
     78e:	1c61      	adds	r1, r4, #1
     790:	b2c9      	uxtb	r1, r1
     792:	fb01 2502 	mla	r5, r1, r2, r2
     796:	122d      	asrs	r5, r5, #8
     798:	7019      	strb	r1, [r3, #0]
     79a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     79c:	b105      	cbz	r5, 7a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     79e:	3e01      	subs	r6, #1
     7a0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7a4:	b101      	cbz	r1, 7a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     7a6:	701c      	strb	r4, [r3, #0]
     7a8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7aa:	42bb      	cmp	r3, r7
     7ac:	d0c4      	beq.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     7ae:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7b0:	2c00      	cmp	r4, #0
     7b2:	d1e9      	bne.n	788 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     7b4:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b6:	f803 4c03 	strb.w	r4, [r3, #-3]
     7ba:	e7f5      	b.n	7a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     7bc:	1fff8c60 	.word	0x1fff8c60

000007c0 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4604      	mov	r4, r0
     7c4:	4608      	mov	r0, r1
     7c6:	460d      	mov	r5, r1
     7c8:	f00b ff7a 	bl	c6c0 <strlen>
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	4602      	mov	r2, r0
     7d0:	4629      	mov	r1, r5
     7d2:	4620      	mov	r0, r4
     7d4:	685b      	ldr	r3, [r3, #4]
     7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     7da:	4718      	bx	r3

000007dc <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7dc:	b538      	push	{r3, r4, r5, lr}
     7de:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7e2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e4:	f00b ff6c 	bl	c6c0 <strlen>
     7e8:	6823      	ldr	r3, [r4, #0]
     7ea:	4602      	mov	r2, r0
     7ec:	4629      	mov	r1, r5
     7ee:	685b      	ldr	r3, [r3, #4]
     7f0:	4620      	mov	r0, r4
     7f2:	4798      	blx	r3
     7f4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7f6:	4620      	mov	r0, r4
     7f8:	f00a fc14 	bl	b024 <Print::println()>
     7fc:	4428      	add	r0, r5
     7fe:	bd38      	pop	{r3, r4, r5, pc}

00000800 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     804:	780d      	ldrb	r5, [r1, #0]
     806:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     808:	784d      	ldrb	r5, [r1, #1]
     80a:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     80c:	7889      	ldrb	r1, [r1, #2]
     80e:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     810:	7811      	ldrb	r1, [r2, #0]
     812:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     814:	7851      	ldrb	r1, [r2, #1]
     816:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     818:	7892      	ldrb	r2, [r2, #2]
     81a:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     81c:	781a      	ldrb	r2, [r3, #0]
     81e:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     820:	785a      	ldrb	r2, [r3, #1]
     822:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     824:	789b      	ldrb	r3, [r3, #2]
     826:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     82a:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     82c:	f89a b000 	ldrb.w	fp, [sl]
     830:	f880 b009 	strb.w	fp, [r0, #9]
     834:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     838:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     83c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     840:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     842:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     844:	9d10      	ldr	r5, [sp, #64]	; 0x40
     846:	9911      	ldr	r1, [sp, #68]	; 0x44
     848:	9a12      	ldr	r2, [sp, #72]	; 0x48
     84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     84c:	f89a b001 	ldrb.w	fp, [sl, #1]
     850:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     854:	f89a a002 	ldrb.w	sl, [sl, #2]
     858:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     85c:	f899 a000 	ldrb.w	sl, [r9]
     860:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     864:	f899 a001 	ldrb.w	sl, [r9, #1]
     868:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     86c:	f899 9002 	ldrb.w	r9, [r9, #2]
     870:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     874:	f898 9000 	ldrb.w	r9, [r8]
     878:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     87c:	f898 9001 	ldrb.w	r9, [r8, #1]
     880:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     884:	f898 8002 	ldrb.w	r8, [r8, #2]
     888:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     88c:	f89c 8000 	ldrb.w	r8, [ip]
     890:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     894:	f89c 8001 	ldrb.w	r8, [ip, #1]
     898:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     89c:	f89c c002 	ldrb.w	ip, [ip, #2]
     8a0:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8a4:	f89e c000 	ldrb.w	ip, [lr]
     8a8:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     8ac:	f89e c001 	ldrb.w	ip, [lr, #1]
     8b0:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     8b4:	f89e e002 	ldrb.w	lr, [lr, #2]
     8b8:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8bc:	f897 e000 	ldrb.w	lr, [r7]
     8c0:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     8c4:	f897 e001 	ldrb.w	lr, [r7, #1]
     8c8:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     8cc:	78bf      	ldrb	r7, [r7, #2]
     8ce:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d0:	7837      	ldrb	r7, [r6, #0]
     8d2:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     8d4:	7877      	ldrb	r7, [r6, #1]
     8d6:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     8d8:	78b6      	ldrb	r6, [r6, #2]
     8da:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8dc:	782e      	ldrb	r6, [r5, #0]
     8de:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     8e0:	786e      	ldrb	r6, [r5, #1]
     8e2:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     8e4:	78ad      	ldrb	r5, [r5, #2]
     8e6:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ea:	780d      	ldrb	r5, [r1, #0]
     8ec:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     8f0:	784d      	ldrb	r5, [r1, #1]
     8f2:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     8f6:	7889      	ldrb	r1, [r1, #2]
     8f8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     902:	7851      	ldrb	r1, [r2, #1]
     904:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     908:	7892      	ldrb	r2, [r2, #2]
     90a:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     90e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     910:	7812      	ldrb	r2, [r2, #0]
     912:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     918:	7852      	ldrb	r2, [r2, #1]
     91a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     91e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     920:	7892      	ldrb	r2, [r2, #2]
     922:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     926:	9a14      	ldr	r2, [sp, #80]	; 0x50
     928:	7812      	ldrb	r2, [r2, #0]
     92a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     92e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     930:	7852      	ldrb	r2, [r2, #1]
     932:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     936:	9a14      	ldr	r2, [sp, #80]	; 0x50
     938:	7892      	ldrb	r2, [r2, #2]
     93a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     93e:	781a      	ldrb	r2, [r3, #0]
     940:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     944:	785a      	ldrb	r2, [r3, #1]
     946:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     94a:	789b      	ldrb	r3, [r3, #2]
     94c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000954 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     958:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     95a:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     95c:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     95e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     962:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     964:	3701      	adds	r7, #1
        } while ( u.index != 255);
     966:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     968:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     96a:	d1f8      	bne.n	95e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     96c:	680b      	ldr	r3, [r1, #0]
     96e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     970:	ea4f 6813 	mov.w	r8, r3, lsr #24
     974:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     978:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     97c:	f04f 33ff 	mov.w	r3, #4294967295
     980:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     982:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     984:	9305      	str	r3, [sp, #20]
     986:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     988:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     98c:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     98e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     992:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     996:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     99a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     99c:	b2f9      	uxtb	r1, r7
     99e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     9a2:	9103      	str	r1, [sp, #12]
     9a4:	b2e9      	uxtb	r1, r5
     9a6:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     9a8:	fa5f f18c 	uxtb.w	r1, ip
     9ac:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     9ae:	9907      	ldr	r1, [sp, #28]
     9b0:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9b2:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     9b4:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9b8:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9bc:	d80c      	bhi.n	9d8 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     9be:	9905      	ldr	r1, [sp, #20]
     9c0:	458c      	cmp	ip, r1
     9c2:	dc07      	bgt.n	9d4 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     9c4:	290f      	cmp	r1, #15
     9c6:	d005      	beq.n	9d4 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     9c8:	3101      	adds	r1, #1
     9ca:	b2c9      	uxtb	r1, r1
     9cc:	428b      	cmp	r3, r1
     9ce:	9102      	str	r1, [sp, #8]
     9d0:	bf38      	it	cc
     9d2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     9d4:	b259      	sxtb	r1, r3
     9d6:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9d8:	a909      	add	r1, sp, #36	; 0x24
     9da:	9100      	str	r1, [sp, #0]
     9dc:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9de:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     9e2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     9e6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ea:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     9ee:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     9f2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     9f6:	f008 f86f 	bl	8ad8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     9fa:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     9fc:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a00:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     a04:	46d1      	mov	r9, sl
     a06:	d1bf      	bne.n	988 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     a08:	9806      	ldr	r0, [sp, #24]
     a0a:	b00b      	add	sp, #44	; 0x2c
     a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a10 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     a10:	4b48      	ldr	r3, [pc, #288]	; (b34 <updatePaletteIndex(LEDStruct&)+0x124>)
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	2b00      	cmp	r3, #0
     a16:	f000 808b 	beq.w	b30 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a1e:	b09b      	sub	sp, #108	; 0x6c
     a20:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     a24:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     a26:	2300      	movs	r3, #0
     a28:	4a43      	ldr	r2, [pc, #268]	; (b38 <updatePaletteIndex(LEDStruct&)+0x128>)
     a2a:	9307      	str	r3, [sp, #28]
     a2c:	f8df 910c 	ldr.w	r9, [pc, #268]	; b3c <updatePaletteIndex(LEDStruct&)+0x12c>
     a30:	9009      	str	r0, [sp, #36]	; 0x24
     a32:	f200 2326 	addw	r3, r0, #550	; 0x226
     a36:	9208      	str	r2, [sp, #32]
     a38:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a3a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a3c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a40:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a42:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a44:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a46:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a48:	d1f8      	bne.n	a3c <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a4a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a4e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a50:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a54:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a58:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a5a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a5e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     a62:	2400      	movs	r4, #0
     a64:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a66:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a6a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     a6e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a72:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a76:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a78:	b2f1      	uxtb	r1, r6
     a7a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a7e:	9103      	str	r1, [sp, #12]
     a80:	b2e9      	uxtb	r1, r5
     a82:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a84:	fa5f f18c 	uxtb.w	r1, ip
     a88:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     a8a:	9906      	ldr	r1, [sp, #24]
     a8c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a8e:	aa0c      	add	r2, sp, #48	; 0x30
     a90:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a92:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a96:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a9a:	d80c      	bhi.n	ab6 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a9c:	9905      	ldr	r1, [sp, #20]
     a9e:	458c      	cmp	ip, r1
     aa0:	dc07      	bgt.n	ab2 <updatePaletteIndex(LEDStruct&)+0xa2>
     aa2:	290f      	cmp	r1, #15
     aa4:	d005      	beq.n	ab2 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     aa6:	3101      	adds	r1, #1
     aa8:	b2c9      	uxtb	r1, r1
     aaa:	428b      	cmp	r3, r1
     aac:	9102      	str	r1, [sp, #8]
     aae:	bf38      	it	cc
     ab0:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     ab2:	b259      	sxtb	r1, r3
     ab4:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ab6:	a90d      	add	r1, sp, #52	; 0x34
     ab8:	9100      	str	r1, [sp, #0]
     aba:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     abc:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     ac0:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     ac4:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac8:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     acc:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     ad0:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     ad4:	f008 f800 	bl	8ad8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ad8:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ada:	46d3      	mov	fp, sl
        g = rhs.g;
     adc:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ae0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     ae4:	d1bf      	bne.n	a66 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ae8:	aa0e      	add	r2, sp, #56	; 0x38
     aea:	4293      	cmp	r3, r2
     aec:	d018      	beq.n	b20 <updatePaletteIndex(LEDStruct&)+0x110>
     aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     af2:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     af6:	e001      	b.n	afc <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     af8:	42a3      	cmp	r3, r4
     afa:	d011      	beq.n	b20 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     afc:	f812 1b01 	ldrb.w	r1, [r2], #1
     b00:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     b04:	4288      	cmp	r0, r1
     b06:	d0f7      	beq.n	af8 <updatePaletteIndex(LEDStruct&)+0xe8>
     b08:	4b0a      	ldr	r3, [pc, #40]	; (b34 <updatePaletteIndex(LEDStruct&)+0x124>)
     b0a:	9a07      	ldr	r2, [sp, #28]
     b0c:	781b      	ldrb	r3, [r3, #0]
     b0e:	3201      	adds	r2, #1
     b10:	4293      	cmp	r3, r2
     b12:	9207      	str	r2, [sp, #28]
     b14:	dd09      	ble.n	b2a <updatePaletteIndex(LEDStruct&)+0x11a>
     b16:	9b08      	ldr	r3, [sp, #32]
     b18:	f853 9f04 	ldr.w	r9, [r3, #4]!
     b1c:	9308      	str	r3, [sp, #32]
     b1e:	e78c      	b.n	a3a <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b22:	f89d 201c 	ldrb.w	r2, [sp, #28]
     b26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     b2a:	b01b      	add	sp, #108	; 0x6c
     b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b30:	4770      	bx	lr
     b32:	bf00      	nop
     b34:	1fff874c 	.word	0x1fff874c
     b38:	0000e438 	.word	0x0000e438
     b3c:	0000efdc 	.word	0x0000efdc

00000b40 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     b40:	b530      	push	{r4, r5, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b42:	4d29      	ldr	r5, [pc, #164]	; (be8 <initialize()+0xa8>)
		}
	}
}

// Initialization function
void initialize() {
     b44:	b083      	sub	sp, #12
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b46:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b48:	2400      	movs	r4, #0
     b4a:	4628      	mov	r0, r5
     b4c:	2196      	movs	r1, #150	; 0x96
     b4e:	f88d 4004 	strb.w	r4, [sp, #4]
     b52:	f88d 4005 	strb.w	r4, [sp, #5]
     b56:	f88d 4006 	strb.w	r4, [sp, #6]
     b5a:	f007 ff8d 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     b5e:	4923      	ldr	r1, [pc, #140]	; (bec <initialize()+0xac>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     b60:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     b64:	f205 10c7 	addw	r0, r5, #455	; 0x1c7
     b68:	f7ff fef4 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     b6c:	4920      	ldr	r1, [pc, #128]	; (bf0 <initialize()+0xb0>)
     b6e:	f205 10f7 	addw	r0, r5, #503	; 0x1f7
     b72:	f7ff feef 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     b76:	4628      	mov	r0, r5
     b78:	f7ff ff4a 	bl	a10 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     b7c:	4b1d      	ldr	r3, [pc, #116]	; (bf4 <initialize()+0xb4>)
     b7e:	4a1e      	ldr	r2, [pc, #120]	; (bf8 <initialize()+0xb8>)
     b80:	7818      	ldrb	r0, [r3, #0]
     b82:	f885 022b 	strb.w	r0, [r5, #555]	; 0x22b
     b86:	4623      	mov	r3, r4
     b88:	e001      	b.n	b8e <initialize()+0x4e>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     b8a:	2b1a      	cmp	r3, #26
     b8c:	d008      	beq.n	ba0 <initialize()+0x60>
		if (leds.mode_name == ModeList[i]) {
     b8e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     b92:	4281      	cmp	r1, r0
     b94:	b2dc      	uxtb	r4, r3
     b96:	f103 0301 	add.w	r3, r3, #1
     b9a:	d1f6      	bne.n	b8a <initialize()+0x4a>
			leds.mode_number = i;
     b9c:	f885 422a 	strb.w	r4, [r5, #554]	; 0x22a
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     ba0:	4c16      	ldr	r4, [pc, #88]	; (bfc <initialize()+0xbc>)
     ba2:	aa01      	add	r2, sp, #4
     ba4:	2300      	movs	r3, #0
     ba6:	4620      	mov	r0, r4
     ba8:	2196      	movs	r1, #150	; 0x96
     baa:	f88d 3004 	strb.w	r3, [sp, #4]
     bae:	f88d 3005 	strb.w	r3, [sp, #5]
     bb2:	f88d 3006 	strb.w	r3, [sp, #6]
     bb6:	f007 ff5f 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     bba:	2301      	movs	r3, #1
	next_leds.current_palette	= bhw3_21_gp;
     bbc:	f204 10c7 	addw	r0, r4, #455	; 0x1c7
     bc0:	490f      	ldr	r1, [pc, #60]	; (c00 <initialize()+0xc0>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     bc2:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	next_leds.current_palette	= bhw3_21_gp;
     bc6:	f7ff fec5 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= bhw3_30_gp;
     bca:	490e      	ldr	r1, [pc, #56]	; (c04 <initialize()+0xc4>)
     bcc:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
     bd0:	f7ff fec0 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     bd4:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
     bd8:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
	updatePaletteIndex(next_leds);
     bdc:	4620      	mov	r0, r4
     bde:	f7ff ff17 	bl	a10 <updatePaletteIndex(LEDStruct&)>
}
     be2:	b003      	add	sp, #12
     be4:	bd30      	pop	{r4, r5, pc}
     be6:	bf00      	nop
     be8:	1fff9614 	.word	0x1fff9614
     bec:	0000f310 	.word	0x0000f310
     bf0:	0000ea98 	.word	0x0000ea98
     bf4:	1fff8749 	.word	0x1fff8749
     bf8:	1fff8727 	.word	0x1fff8727
     bfc:	1fff8c90 	.word	0x1fff8c90
     c00:	0000e78c 	.word	0x0000e78c
     c04:	0000e9dc 	.word	0x0000e9dc

00000c08 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     c08:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c0a:	2112      	movs	r1, #18
     c0c:	4826      	ldr	r0, [pc, #152]	; (ca8 <global_debug()+0xa0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c0e:	4c27      	ldr	r4, [pc, #156]	; (cac <global_debug()+0xa4>)
     c10:	f00a f804 	bl	ac1c <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     c14:	4b26      	ldr	r3, [pc, #152]	; (cb0 <global_debug()+0xa8>)
     c16:	4620      	mov	r0, r4
     c18:	7819      	ldrb	r1, [r3, #0]
     c1a:	f00a fa53 	bl	b0c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c1e:	4620      	mov	r0, r4
     c20:	f00a fa00 	bl	b024 <Print::println()>
     c24:	2111      	movs	r1, #17
     c26:	4823      	ldr	r0, [pc, #140]	; (cb4 <global_debug()+0xac>)
     c28:	f009 fff8 	bl	ac1c <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     c2c:	4b22      	ldr	r3, [pc, #136]	; (cb8 <global_debug()+0xb0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c2e:	4620      	mov	r0, r4
     c30:	7819      	ldrb	r1, [r3, #0]
     c32:	f00a fa47 	bl	b0c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c36:	4620      	mov	r0, r4
     c38:	f00a f9f4 	bl	b024 <Print::println()>
     c3c:	2115      	movs	r1, #21
     c3e:	481f      	ldr	r0, [pc, #124]	; (cbc <global_debug()+0xb4>)
     c40:	f009 ffec 	bl	ac1c <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     c44:	4b1e      	ldr	r3, [pc, #120]	; (cc0 <global_debug()+0xb8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c46:	4620      	mov	r0, r4
     c48:	7819      	ldrb	r1, [r3, #0]
     c4a:	f00a fa3b 	bl	b0c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c4e:	4620      	mov	r0, r4
     c50:	f00a f9e8 	bl	b024 <Print::println()>
     c54:	2114      	movs	r1, #20
     c56:	481b      	ldr	r0, [pc, #108]	; (cc4 <global_debug()+0xbc>)
     c58:	f009 ffe0 	bl	ac1c <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     c5c:	4b1a      	ldr	r3, [pc, #104]	; (cc8 <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c5e:	4620      	mov	r0, r4
     c60:	8819      	ldrh	r1, [r3, #0]
     c62:	f00a fa2f 	bl	b0c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c66:	4620      	mov	r0, r4
     c68:	f00a f9dc 	bl	b024 <Print::println()>
     c6c:	210f      	movs	r1, #15
     c6e:	4817      	ldr	r0, [pc, #92]	; (ccc <global_debug()+0xc4>)
     c70:	f009 ffd4 	bl	ac1c <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     c74:	4b16      	ldr	r3, [pc, #88]	; (cd0 <global_debug()+0xc8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c76:	4620      	mov	r0, r4
     c78:	8819      	ldrh	r1, [r3, #0]
     c7a:	f00a fa23 	bl	b0c4 <Print::print(long)>
     c7e:	2102      	movs	r1, #2
     c80:	4814      	ldr	r0, [pc, #80]	; (cd4 <global_debug()+0xcc>)
     c82:	f009 ffcb 	bl	ac1c <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     c86:	4b14      	ldr	r3, [pc, #80]	; (cd8 <global_debug()+0xd0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     c88:	4620      	mov	r0, r4
     c8a:	7819      	ldrb	r1, [r3, #0]
     c8c:	220a      	movs	r2, #10
     c8e:	2300      	movs	r3, #0
     c90:	f00a f9d8 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     c94:	2101      	movs	r1, #1
     c96:	4811      	ldr	r0, [pc, #68]	; (cdc <global_debug()+0xd4>)
     c98:	f009 ffc0 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c9c:	4620      	mov	r0, r4
	Serial.println("s");
}
     c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ca2:	f00a b9bf 	b.w	b024 <Print::println()>
     ca6:	bf00      	nop
     ca8:	0000c94c 	.word	0x0000c94c
     cac:	1fff8764 	.word	0x1fff8764
     cb0:	1fff8759 	.word	0x1fff8759
     cb4:	0000c960 	.word	0x0000c960
     cb8:	1fff9508 	.word	0x1fff9508
     cbc:	0000c974 	.word	0x0000c974
     cc0:	1fff8758 	.word	0x1fff8758
     cc4:	0000c98c 	.word	0x0000c98c
     cc8:	1fff8c84 	.word	0x1fff8c84
     ccc:	0000c9a4 	.word	0x0000c9a4
     cd0:	1fff95e8 	.word	0x1fff95e8
     cd4:	0000c9b4 	.word	0x0000c9b4
     cd8:	1fff9528 	.word	0x1fff9528
     cdc:	0000c9b8 	.word	0x0000c9b8

00000ce0 <begin_transition()>:

// Transition functions
void begin_transition() {
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ce2:	4c2a      	ldr	r4, [pc, #168]	; (d8c <begin_transition()+0xac>)
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     ce4:	4e2a      	ldr	r6, [pc, #168]	; (d90 <begin_transition()+0xb0>)
     ce6:	8823      	ldrh	r3, [r4, #0]
     ce8:	4d2a      	ldr	r5, [pc, #168]	; (d94 <begin_transition()+0xb4>)
	transition_speed = random8(3, 7);
     cea:	482b      	ldr	r0, [pc, #172]	; (d98 <begin_transition()+0xb8>)
	Serial.println("s");
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     cec:	492b      	ldr	r1, [pc, #172]	; (d9c <begin_transition()+0xbc>)
     cee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     cf2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     cf6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     cfa:	3319      	adds	r3, #25
     cfc:	b29b      	uxth	r3, r3
     cfe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     d02:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     d06:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     d0a:	3219      	adds	r2, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     d0c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d10:	b292      	uxth	r2, r2
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     d12:	f3c3 1381 	ubfx	r3, r3, #6, #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     d16:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     d1a:	5cf6      	ldrb	r6, [r6, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d1c:	8022      	strh	r2, [r4, #0]
	transition_speed = random8(3, 7);
     d1e:	f3c7 1381 	ubfx	r3, r7, #6, #2
     d22:	3303      	adds	r3, #3
	Serial.println("s");
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     d24:	2701      	movs	r7, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     d26:	702e      	strb	r6, [r5, #0]
	transition_speed = random8(3, 7);
     d28:	7003      	strb	r3, [r0, #0]
	Serial.println("s");
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     d2a:	700f      	strb	r7, [r1, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 7);
	switch (transition_type) {
     d2c:	2e03      	cmp	r6, #3
     d2e:	d803      	bhi.n	d38 <begin_transition()+0x58>
     d30:	e8df f006 	tbb	[pc, r6]
     d34:	03202428 	.word	0x03202428
     d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3a:	eb02 2342 	add.w	r3, r2, r2, lsl #9
     d3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     d42:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     d46:	3219      	adds	r2, #25
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
     d48:	4b15      	ldr	r3, [pc, #84]	; (da0 <begin_transition()+0xc0>)
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
     d4a:	4d16      	ldr	r5, [pc, #88]	; (da4 <begin_transition()+0xc4>)
     d4c:	4e16      	ldr	r6, [pc, #88]	; (da8 <begin_transition()+0xc8>)
     d4e:	4917      	ldr	r1, [pc, #92]	; (dac <begin_transition()+0xcc>)
     d50:	b292      	uxth	r2, r2
     d52:	eb02 2e12 	add.w	lr, r2, r2, lsr #8
     d56:	8022      	strh	r2, [r4, #0]
        s = rhs.s;
     d58:	22ff      	movs	r2, #255	; 0xff
     d5a:	2400      	movs	r4, #0
     d5c:	2701      	movs	r7, #1
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
     d5e:	f883 e000 	strb.w	lr, [r3]
        s = rhs.s;
     d62:	705a      	strb	r2, [r3, #1]
        v = rhs.v;
     d64:	709a      	strb	r2, [r3, #2]
     d66:	702c      	strb	r4, [r5, #0]
     d68:	7037      	strb	r7, [r6, #0]
     d6a:	4618      	mov	r0, r3
	}
}
     d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	transition_speed = random8(3, 7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
     d70:	f008 b9a0 	b.w	90b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     d74:	4b0e      	ldr	r3, [pc, #56]	; (db0 <begin_transition()+0xd0>)
     d76:	2200      	movs	r2, #0
     d78:	701a      	strb	r2, [r3, #0]
     d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     d7c:	4b0c      	ldr	r3, [pc, #48]	; (db0 <begin_transition()+0xd0>)
     d7e:	224a      	movs	r2, #74	; 0x4a
     d80:	701a      	strb	r2, [r3, #0]
     d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     d84:	4b07      	ldr	r3, [pc, #28]	; (da4 <begin_transition()+0xc4>)
     d86:	2200      	movs	r2, #0
     d88:	701a      	strb	r2, [r3, #0]
     d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d8c:	1fff875a 	.word	0x1fff875a
     d90:	1fff8750 	.word	0x1fff8750
     d94:	1fff94e1 	.word	0x1fff94e1
     d98:	1fff95f8 	.word	0x1fff95f8
     d9c:	1fff94c8 	.word	0x1fff94c8
     da0:	1fff9608 	.word	0x1fff9608
     da4:	1fff8c86 	.word	0x1fff8c86
     da8:	1fff94e0 	.word	0x1fff94e0
     dac:	1fffa000 	.word	0x1fffa000
     db0:	1fff9500 	.word	0x1fff9500

00000db4 <finish_transition()>:
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
     db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     db6:	4cef      	ldr	r4, [pc, #956]	; (1174 <finish_transition()+0x3c0>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     db8:	48ef      	ldr	r0, [pc, #956]	; (1178 <finish_transition()+0x3c4>)
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
     dba:	b083      	sub	sp, #12
	in_transition = 0;
     dbc:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     dbe:	aa01      	add	r2, sp, #4
     dc0:	2196      	movs	r1, #150	; 0x96
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
     dc2:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     dc4:	f88d 3004 	strb.w	r3, [sp, #4]
     dc8:	f88d 3005 	strb.w	r3, [sp, #5]
     dcc:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     dd0:	f007 fe52 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
     dd4:	4be9      	ldr	r3, [pc, #932]	; (117c <finish_transition()+0x3c8>)
     dd6:	4aea      	ldr	r2, [pc, #936]	; (1180 <finish_transition()+0x3cc>)
     dd8:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ddc:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     de0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     de4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     de8:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     dec:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     df0:	f803 1c01 	strb.w	r1, [r3, #-1]
     df4:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     df6:	429d      	cmp	r5, r3
     df8:	f102 0203 	add.w	r2, r2, #3
     dfc:	d1ee      	bne.n	ddc <finish_transition()+0x28>
     dfe:	48e1      	ldr	r0, [pc, #900]	; (1184 <finish_transition()+0x3d0>)
     e00:	4fdd      	ldr	r7, [pc, #884]	; (1178 <finish_transition()+0x3c4>)
     e02:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
     e06:	f890 21c5 	ldrb.w	r2, [r0, #453]	; 0x1c5
     e0a:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
     e0e:	f890 51c2 	ldrb.w	r5, [r0, #450]	; 0x1c2
     e12:	f890 41c3 	ldrb.w	r4, [r0, #451]	; 0x1c3
     e16:	f887 11c4 	strb.w	r1, [r7, #452]	; 0x1c4
     e1a:	f887 21c5 	strb.w	r2, [r7, #453]	; 0x1c5
     e1e:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
     e22:	f887 51c2 	strb.w	r5, [r7, #450]	; 0x1c2
     e26:	f887 41c3 	strb.w	r4, [r7, #451]	; 0x1c3
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     e2a:	f200 13c7 	addw	r3, r0, #455	; 0x1c7
     e2e:	f207 12c7 	addw	r2, r7, #455	; 0x1c7
     e32:	f200 11f7 	addw	r1, r0, #503	; 0x1f7
     e36:	681d      	ldr	r5, [r3, #0]
     e38:	685c      	ldr	r4, [r3, #4]
     e3a:	6015      	str	r5, [r2, #0]
     e3c:	689d      	ldr	r5, [r3, #8]
     e3e:	6054      	str	r4, [r2, #4]
     e40:	68dc      	ldr	r4, [r3, #12]
     e42:	60d4      	str	r4, [r2, #12]
     e44:	3310      	adds	r3, #16
     e46:	428b      	cmp	r3, r1
     e48:	6095      	str	r5, [r2, #8]
     e4a:	f102 0210 	add.w	r2, r2, #16
     e4e:	d1f2      	bne.n	e36 <finish_transition()+0x82>
     e50:	4bcd      	ldr	r3, [pc, #820]	; (1188 <finish_transition()+0x3d4>)
     e52:	4ace      	ldr	r2, [pc, #824]	; (118c <finish_transition()+0x3d8>)
     e54:	f103 0130 	add.w	r1, r3, #48	; 0x30
     e58:	681d      	ldr	r5, [r3, #0]
     e5a:	685c      	ldr	r4, [r3, #4]
     e5c:	6015      	str	r5, [r2, #0]
     e5e:	689d      	ldr	r5, [r3, #8]
     e60:	6054      	str	r4, [r2, #4]
     e62:	68dc      	ldr	r4, [r3, #12]
     e64:	60d4      	str	r4, [r2, #12]
     e66:	3310      	adds	r3, #16
     e68:	428b      	cmp	r3, r1
     e6a:	6095      	str	r5, [r2, #8]
     e6c:	f102 0210 	add.w	r2, r2, #16
     e70:	d1f2      	bne.n	e58 <finish_transition()+0xa4>
     e72:	f890 2227 	ldrb.w	r2, [r0, #551]	; 0x227
     e76:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
     e7a:	f890 5229 	ldrb.w	r5, [r0, #553]	; 0x229
     e7e:	f890 422a 	ldrb.w	r4, [r0, #554]	; 0x22a
     e82:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
     e86:	f887 2227 	strb.w	r2, [r7, #551]	; 0x227
     e8a:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
     e8e:	f890 222c 	ldrb.w	r2, [r0, #556]	; 0x22c
     e92:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
     e96:	f887 5229 	strb.w	r5, [r7, #553]	; 0x229
     e9a:	f887 422a 	strb.w	r4, [r7, #554]	; 0x22a
     e9e:	f890 522e 	ldrb.w	r5, [r0, #558]	; 0x22e
     ea2:	f890 422f 	ldrb.w	r4, [r0, #559]	; 0x22f
     ea6:	f887 122b 	strb.w	r1, [r7, #555]	; 0x22b
     eaa:	f887 222c 	strb.w	r2, [r7, #556]	; 0x22c
     eae:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     eb2:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231
     eb6:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
     eba:	f890 3232 	ldrb.w	r3, [r0, #562]	; 0x232
     ebe:	f887 522e 	strb.w	r5, [r7, #558]	; 0x22e
     ec2:	f887 422f 	strb.w	r4, [r7, #559]	; 0x22f
     ec6:	f890 5233 	ldrb.w	r5, [r0, #563]	; 0x233
     eca:	f890 4234 	ldrb.w	r4, [r0, #564]	; 0x234
     ece:	f887 1230 	strb.w	r1, [r7, #560]	; 0x230
     ed2:	f887 2231 	strb.w	r2, [r7, #561]	; 0x231
     ed6:	f890 1235 	ldrb.w	r1, [r0, #565]	; 0x235
     eda:	f890 2236 	ldrb.w	r2, [r0, #566]	; 0x236
     ede:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
     ee2:	4bab      	ldr	r3, [pc, #684]	; (1190 <finish_transition()+0x3dc>)
     ee4:	f887 4234 	strb.w	r4, [r7, #564]	; 0x234
     ee8:	f887 1235 	strb.w	r1, [r7, #565]	; 0x235
     eec:	f887 2236 	strb.w	r2, [r7, #566]	; 0x236
     ef0:	f887 5233 	strb.w	r5, [r7, #563]	; 0x233
     ef4:	4aa7      	ldr	r2, [pc, #668]	; (1194 <finish_transition()+0x3e0>)
     ef6:	f890 5237 	ldrb.w	r5, [r0, #567]	; 0x237
     efa:	f890 4238 	ldrb.w	r4, [r0, #568]	; 0x238
     efe:	f890 1239 	ldrb.w	r1, [r0, #569]	; 0x239
     f02:	f887 5237 	strb.w	r5, [r7, #567]	; 0x237
     f06:	f103 063c 	add.w	r6, r3, #60	; 0x3c
     f0a:	f887 4238 	strb.w	r4, [r7, #568]	; 0x238
     f0e:	f887 1239 	strb.w	r1, [r7, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f12:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
     f16:	f812 4c02 	ldrb.w	r4, [r2, #-2]
        b = rhs.b;
     f1a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f1e:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
     f22:	f803 4c02 	strb.w	r4, [r3, #-2]
        b = rhs.b;
     f26:	f803 1c01 	strb.w	r1, [r3, #-1]
     f2a:	3303      	adds	r3, #3
     f2c:	429e      	cmp	r6, r3
     f2e:	f102 0203 	add.w	r2, r2, #3
     f32:	d1ee      	bne.n	f12 <finish_transition()+0x15e>
     f34:	f890 2276 	ldrb.w	r2, [r0, #630]	; 0x276
     f38:	f890 4277 	ldrb.w	r4, [r0, #631]	; 0x277
     f3c:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
     f40:	f887 2276 	strb.w	r2, [r7, #630]	; 0x276
     f44:	f890 2279 	ldrb.w	r2, [r0, #633]	; 0x279
     f48:	4b93      	ldr	r3, [pc, #588]	; (1198 <finish_transition()+0x3e4>)
     f4a:	f887 4277 	strb.w	r4, [r7, #631]	; 0x277
     f4e:	f887 1278 	strb.w	r1, [r7, #632]	; 0x278
     f52:	f890 427a 	ldrb.w	r4, [r0, #634]	; 0x27a
     f56:	f890 127b 	ldrb.w	r1, [r0, #635]	; 0x27b
     f5a:	f887 2279 	strb.w	r2, [r7, #633]	; 0x279
     f5e:	f890 227c 	ldrb.w	r2, [r0, #636]	; 0x27c
     f62:	f887 427a 	strb.w	r4, [r7, #634]	; 0x27a
     f66:	f887 127b 	strb.w	r1, [r7, #635]	; 0x27b
     f6a:	f890 427d 	ldrb.w	r4, [r0, #637]	; 0x27d
     f6e:	f890 127e 	ldrb.w	r1, [r0, #638]	; 0x27e
     f72:	f887 227c 	strb.w	r2, [r7, #636]	; 0x27c
     f76:	4a89      	ldr	r2, [pc, #548]	; (119c <finish_transition()+0x3e8>)
     f78:	f887 427d 	strb.w	r4, [r7, #637]	; 0x27d
     f7c:	f887 127e 	strb.w	r1, [r7, #638]	; 0x27e
     f80:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     f84:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     f88:	f803 1b01 	strb.w	r1, [r3], #1
     f8c:	42a3      	cmp	r3, r4
     f8e:	d1f9      	bne.n	f84 <finish_transition()+0x1d0>
     f90:	4983      	ldr	r1, [pc, #524]	; (11a0 <finish_transition()+0x3ec>)
     f92:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     f96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     f9a:	f803 2b01 	strb.w	r2, [r3], #1
     f9e:	42a3      	cmp	r3, r4
     fa0:	4a75      	ldr	r2, [pc, #468]	; (1178 <finish_transition()+0x3c4>)
     fa2:	d1f8      	bne.n	f96 <finish_transition()+0x1e2>
     fa4:	f890 3315 	ldrb.w	r3, [r0, #789]	; 0x315
     fa8:	f890 6316 	ldrb.w	r6, [r0, #790]	; 0x316
     fac:	f890 5317 	ldrb.w	r5, [r0, #791]	; 0x317
     fb0:	f890 4318 	ldrb.w	r4, [r0, #792]	; 0x318
     fb4:	f890 1319 	ldrb.w	r1, [r0, #793]	; 0x319
     fb8:	f882 3315 	strb.w	r3, [r2, #789]	; 0x315
     fbc:	f890 331a 	ldrb.w	r3, [r0, #794]	; 0x31a
     fc0:	f882 6316 	strb.w	r6, [r2, #790]	; 0x316
     fc4:	f882 5317 	strb.w	r5, [r2, #791]	; 0x317
     fc8:	f8b0 631c 	ldrh.w	r6, [r0, #796]	; 0x31c
     fcc:	f8b0 531e 	ldrh.w	r5, [r0, #798]	; 0x31e
     fd0:	f882 4318 	strb.w	r4, [r2, #792]	; 0x318
     fd4:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
     fd8:	f8b0 4320 	ldrh.w	r4, [r0, #800]	; 0x320
     fdc:	f890 1322 	ldrb.w	r1, [r0, #802]	; 0x322
     fe0:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
     fe4:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
     fe8:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
     fec:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
     ff0:	f890 6324 	ldrb.w	r6, [r0, #804]	; 0x324
     ff4:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
     ff8:	f8a2 4320 	strh.w	r4, [r2, #800]	; 0x320
     ffc:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
    1000:	f890 4326 	ldrb.w	r4, [r0, #806]	; 0x326
    1004:	f890 1327 	ldrb.w	r1, [r0, #807]	; 0x327
    1008:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
    100c:	f8b0 3328 	ldrh.w	r3, [r0, #808]	; 0x328
    1010:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    1014:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    1018:	f882 4326 	strb.w	r4, [r2, #806]	; 0x326
    101c:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    1020:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    1024:	f8b0 332a 	ldrh.w	r3, [r0, #810]	; 0x32a
    1028:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    102c:	f8b0 632c 	ldrh.w	r6, [r0, #812]	; 0x32c
    1030:	f8b0 532e 	ldrh.w	r5, [r0, #814]	; 0x32e
    1034:	f8b0 4330 	ldrh.w	r4, [r0, #816]	; 0x330
    1038:	f8b0 1332 	ldrh.w	r1, [r0, #818]	; 0x332
    103c:	f8b0 3334 	ldrh.w	r3, [r0, #820]	; 0x334
    1040:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1044:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    1048:	f8b0 6336 	ldrh.w	r6, [r0, #822]	; 0x336
    104c:	f8b0 5338 	ldrh.w	r5, [r0, #824]	; 0x338
    1050:	f8a2 4330 	strh.w	r4, [r2, #816]	; 0x330
    1054:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    1058:	f8b0 433a 	ldrh.w	r4, [r0, #826]	; 0x33a
    105c:	f8b0 133c 	ldrh.w	r1, [r0, #828]	; 0x33c
    1060:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    1064:	f890 333e 	ldrb.w	r3, [r0, #830]	; 0x33e
    1068:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    106c:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    1070:	f890 633f 	ldrb.w	r6, [r0, #831]	; 0x33f
    1074:	f890 5340 	ldrb.w	r5, [r0, #832]	; 0x340
    1078:	f8a2 433a 	strh.w	r4, [r2, #826]	; 0x33a
    107c:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    1080:	f890 4341 	ldrb.w	r4, [r0, #833]	; 0x341
    1084:	f890 1342 	ldrb.w	r1, [r0, #834]	; 0x342
    1088:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    108c:	f890 3343 	ldrb.w	r3, [r0, #835]	; 0x343
    1090:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    1094:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    1098:	f882 4341 	strb.w	r4, [r2, #833]	; 0x341
    109c:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    10a0:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    10a4:	f890 3344 	ldrb.w	r3, [r0, #836]	; 0x344
    10a8:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    10ac:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
    10b0:	f890 5346 	ldrb.w	r5, [r0, #838]	; 0x346
    10b4:	f890 4347 	ldrb.w	r4, [r0, #839]	; 0x347
    10b8:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
    10bc:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
    10c0:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    10c4:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    10c8:	f890 634a 	ldrb.w	r6, [r0, #842]	; 0x34a
    10cc:	f890 534b 	ldrb.w	r5, [r0, #843]	; 0x34b
    10d0:	f882 4347 	strb.w	r4, [r2, #839]	; 0x347
    10d4:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    10d8:	f890 434c 	ldrb.w	r4, [r0, #844]	; 0x34c
    10dc:	f890 134d 	ldrb.w	r1, [r0, #845]	; 0x34d
    10e0:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    10e4:	f890 334e 	ldrb.w	r3, [r0, #846]	; 0x34e
    10e8:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    10ec:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    10f0:	f882 434c 	strb.w	r4, [r2, #844]	; 0x34c
    10f4:	f890 5350 	ldrb.w	r5, [r0, #848]	; 0x350
    10f8:	f890 4351 	ldrb.w	r4, [r0, #849]	; 0x351
    10fc:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    1100:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    1104:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
    1108:	f890 3353 	ldrb.w	r3, [r0, #851]	; 0x353
    110c:	f890 634f 	ldrb.w	r6, [r0, #847]	; 0x34f
    1110:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    1114:	f882 4351 	strb.w	r4, [r2, #849]	; 0x351
    1118:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    111c:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    1120:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    1124:	491f      	ldr	r1, [pc, #124]	; (11a4 <finish_transition()+0x3f0>)
    1126:	f890 6354 	ldrb.w	r6, [r0, #852]	; 0x354
    112a:	f890 335d 	ldrb.w	r3, [r0, #861]	; 0x35d
    112e:	f8d0 5358 	ldr.w	r5, [r0, #856]	; 0x358
    1132:	f890 435c 	ldrb.w	r4, [r0, #860]	; 0x35c
    1136:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    113a:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    113e:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    1142:	f882 435c 	strb.w	r4, [r2, #860]	; 0x35c
    1146:	f502 7358 	add.w	r3, r2, #864	; 0x360
    114a:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    114e:	f851 4f04 	ldr.w	r4, [r1, #4]!
    1152:	f843 4b04 	str.w	r4, [r3], #4
    1156:	4293      	cmp	r3, r2
    1158:	d1f9      	bne.n	114e <finish_transition()+0x39a>
    115a:	4a13      	ldr	r2, [pc, #76]	; (11a8 <finish_transition()+0x3f4>)
    115c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    1160:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1164:	f843 1b04 	str.w	r1, [r3], #4
    1168:	42a3      	cmp	r3, r4
    116a:	d1f9      	bne.n	1160 <finish_transition()+0x3ac>
    116c:	4a0f      	ldr	r2, [pc, #60]	; (11ac <finish_transition()+0x3f8>)
    116e:	f103 043c 	add.w	r4, r3, #60	; 0x3c
    1172:	e01d      	b.n	11b0 <finish_transition()+0x3fc>
    1174:	1fff94c8 	.word	0x1fff94c8
    1178:	1fff9614 	.word	0x1fff9614
    117c:	1fff9617 	.word	0x1fff9617
    1180:	1fff8c93 	.word	0x1fff8c93
    1184:	1fff8c90 	.word	0x1fff8c90
    1188:	1fff8e87 	.word	0x1fff8e87
    118c:	1fff980b 	.word	0x1fff980b
    1190:	1fff9851 	.word	0x1fff9851
    1194:	1fff8ecd 	.word	0x1fff8ecd
    1198:	1fff9893 	.word	0x1fff9893
    119c:	1fff8f0e 	.word	0x1fff8f0e
    11a0:	1fff8f59 	.word	0x1fff8f59
    11a4:	1fff8fec 	.word	0x1fff8fec
    11a8:	1fff90dc 	.word	0x1fff90dc
    11ac:	1fff91cf 	.word	0x1fff91cf
    11b0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11b4:	f803 1b01 	strb.w	r1, [r3], #1
    11b8:	42a3      	cmp	r3, r4
    11ba:	d1f9      	bne.n	11b0 <finish_transition()+0x3fc>
    11bc:	4a3f      	ldr	r2, [pc, #252]	; (12bc <finish_transition()+0x508>)
    11be:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    11c2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    11c6:	f843 1b04 	str.w	r1, [r3], #4
    11ca:	42a3      	cmp	r3, r4
    11cc:	d1f9      	bne.n	11c2 <finish_transition()+0x40e>
    11ce:	4a3c      	ldr	r2, [pc, #240]	; (12c0 <finish_transition()+0x50c>)
    11d0:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    11d4:	f852 1f04 	ldr.w	r1, [r2, #4]!
    11d8:	f843 1b04 	str.w	r1, [r3], #4
    11dc:	42a3      	cmp	r3, r4
    11de:	4939      	ldr	r1, [pc, #228]	; (12c4 <finish_transition()+0x510>)
    11e0:	d1f8      	bne.n	11d4 <finish_transition()+0x420>
    11e2:	f890 575c 	ldrb.w	r5, [r0, #1884]	; 0x75c
    11e6:	f890 475d 	ldrb.w	r4, [r0, #1885]	; 0x75d
    11ea:	f890 375e 	ldrb.w	r3, [r0, #1886]	; 0x75e
    11ee:	f8b0 2760 	ldrh.w	r2, [r0, #1888]	; 0x760
    11f2:	f881 575c 	strb.w	r5, [r1, #1884]	; 0x75c
    11f6:	f881 475d 	strb.w	r4, [r1, #1885]	; 0x75d
    11fa:	f881 375e 	strb.w	r3, [r1, #1886]	; 0x75e
    11fe:	f8a1 2760 	strh.w	r2, [r1, #1888]	; 0x760
    1202:	f890 3767 	ldrb.w	r3, [r0, #1895]	; 0x767
    1206:	f8b0 7762 	ldrh.w	r7, [r0, #1890]	; 0x762
    120a:	f890 6764 	ldrb.w	r6, [r0, #1892]	; 0x764
    120e:	f890 5765 	ldrb.w	r5, [r0, #1893]	; 0x765
    1212:	f890 4766 	ldrb.w	r4, [r0, #1894]	; 0x766
    1216:	4a2c      	ldr	r2, [pc, #176]	; (12c8 <finish_transition()+0x514>)
    1218:	f881 3767 	strb.w	r3, [r1, #1895]	; 0x767
    121c:	f8a1 7762 	strh.w	r7, [r1, #1890]	; 0x762
    1220:	f881 6764 	strb.w	r6, [r1, #1892]	; 0x764
    1224:	f881 5765 	strb.w	r5, [r1, #1893]	; 0x765
    1228:	f881 4766 	strb.w	r4, [r1, #1894]	; 0x766
    122c:	f501 63ed 	add.w	r3, r1, #1896	; 0x768
    1230:	f501 61f1 	add.w	r1, r1, #1928	; 0x788
    1234:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1238:	f843 0b04 	str.w	r0, [r3], #4
    123c:	428b      	cmp	r3, r1
    123e:	d1f9      	bne.n	1234 <finish_transition()+0x480>
    1240:	4a22      	ldr	r2, [pc, #136]	; (12cc <finish_transition()+0x518>)
    1242:	f103 0020 	add.w	r0, r3, #32
    1246:	f852 1f04 	ldr.w	r1, [r2, #4]!
    124a:	f843 1b04 	str.w	r1, [r3], #4
    124e:	4283      	cmp	r3, r0
    1250:	d1f9      	bne.n	1246 <finish_transition()+0x492>
    1252:	4a1f      	ldr	r2, [pc, #124]	; (12d0 <finish_transition()+0x51c>)
    1254:	f103 0020 	add.w	r0, r3, #32
    1258:	f852 1f04 	ldr.w	r1, [r2, #4]!
    125c:	f843 1b04 	str.w	r1, [r3], #4
    1260:	4283      	cmp	r3, r0
    1262:	d1f9      	bne.n	1258 <finish_transition()+0x4a4>
    1264:	4a1b      	ldr	r2, [pc, #108]	; (12d4 <finish_transition()+0x520>)
    1266:	f103 0020 	add.w	r0, r3, #32
    126a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    126e:	f843 1b04 	str.w	r1, [r3], #4
    1272:	4283      	cmp	r3, r0
    1274:	d1f9      	bne.n	126a <finish_transition()+0x4b6>
    1276:	4a18      	ldr	r2, [pc, #96]	; (12d8 <finish_transition()+0x524>)
    1278:	f103 0020 	add.w	r0, r3, #32
    127c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1280:	f843 1b04 	str.w	r1, [r3], #4
    1284:	4283      	cmp	r3, r0
    1286:	d1f9      	bne.n	127c <finish_transition()+0x4c8>
    1288:	4a14      	ldr	r2, [pc, #80]	; (12dc <finish_transition()+0x528>)
    128a:	f103 0020 	add.w	r0, r3, #32
    128e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1292:	f843 1b04 	str.w	r1, [r3], #4
    1296:	4283      	cmp	r3, r0
    1298:	4c0a      	ldr	r4, [pc, #40]	; (12c4 <finish_transition()+0x510>)
    129a:	d1f8      	bne.n	128e <finish_transition()+0x4da>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    129c:	2500      	movs	r5, #0
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    129e:	aa01      	add	r2, sp, #4
    12a0:	2196      	movs	r1, #150	; 0x96
    12a2:	480f      	ldr	r0, [pc, #60]	; (12e0 <finish_transition()+0x52c>)
    12a4:	f88d 5004 	strb.w	r5, [sp, #4]
    12a8:	f88d 5005 	strb.w	r5, [sp, #5]
    12ac:	f88d 5006 	strb.w	r5, [sp, #6]
    12b0:	f007 fbe2 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    12b4:	f884 51c6 	strb.w	r5, [r4, #454]	; 0x1c6
}
    12b8:	b003      	add	sp, #12
    12ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12bc:	1fff9208 	.word	0x1fff9208
    12c0:	1fff92f8 	.word	0x1fff92f8
    12c4:	1fff9614 	.word	0x1fff9614
    12c8:	1fff93f4 	.word	0x1fff93f4
    12cc:	1fff9414 	.word	0x1fff9414
    12d0:	1fff9434 	.word	0x1fff9434
    12d4:	1fff9454 	.word	0x1fff9454
    12d8:	1fff9474 	.word	0x1fff9474
    12dc:	1fff9494 	.word	0x1fff9494
    12e0:	1fff8c90 	.word	0x1fff8c90

000012e4 <blending()>:

void blending() {
    12e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12e8:	4d2f      	ldr	r5, [pc, #188]	; (13a8 <blending()+0xc4>)
    12ea:	4e30      	ldr	r6, [pc, #192]	; (13ac <blending()+0xc8>)
    12ec:	4c30      	ldr	r4, [pc, #192]	; (13b0 <blending()+0xcc>)
    12ee:	4f31      	ldr	r7, [pc, #196]	; (13b4 <blending()+0xd0>)
    12f0:	b085      	sub	sp, #20
    12f2:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    12f6:	4632      	mov	r2, r6
    12f8:	4629      	mov	r1, r5
    12fa:	783b      	ldrb	r3, [r7, #0]
    12fc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 13b4 <blending()+0xd0>
    1300:	a803      	add	r0, sp, #12
    1302:	3503      	adds	r5, #3
    1304:	f007 fcaa 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1308:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    130c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1310:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1314:	7021      	strb	r1, [r4, #0]
    1316:	4545      	cmp	r5, r8
        g = rhs.g;
    1318:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    131a:	70a3      	strb	r3, [r4, #2]
    131c:	f106 0603 	add.w	r6, r6, #3
    1320:	f104 0403 	add.w	r4, r4, #3
    1324:	d1e7      	bne.n	12f6 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1326:	4e24      	ldr	r6, [pc, #144]	; (13b8 <blending()+0xd4>)
    1328:	6833      	ldr	r3, [r6, #0]
    132a:	07db      	lsls	r3, r3, #31
    132c:	d51f      	bpl.n	136e <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    132e:	4d23      	ldr	r5, [pc, #140]	; (13bc <blending()+0xd8>)
    1330:	4c23      	ldr	r4, [pc, #140]	; (13c0 <blending()+0xdc>)
    1332:	682b      	ldr	r3, [r5, #0]
    1334:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1336:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    133a:	9b03      	ldr	r3, [sp, #12]
    133c:	1a5b      	subs	r3, r3, r1
    133e:	4293      	cmp	r3, r2
    1340:	d30c      	bcc.n	135c <blending()+0x78>
    1342:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1344:	682a      	ldr	r2, [r5, #0]
    1346:	9202      	str	r2, [sp, #8]
    1348:	3301      	adds	r3, #1
	return ret;
    134a:	9a02      	ldr	r2, [sp, #8]
    134c:	6022      	str	r2, [r4, #0]
    134e:	b2db      	uxtb	r3, r3
    1350:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    1352:	2bff      	cmp	r3, #255	; 0xff
    1354:	d006      	beq.n	1364 <blending()+0x80>
		finish_transition();
	}
}
    1356:	b005      	add	sp, #20
    1358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    135c:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1360:	2bff      	cmp	r3, #255	; 0xff
    1362:	d1f8      	bne.n	1356 <blending()+0x72>
		finish_transition();
    1364:	f7ff fd26 	bl	db4 <finish_transition()>
	}
}
    1368:	b005      	add	sp, #20
    136a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    136e:	4630      	mov	r0, r6
    1370:	f008 fbbc 	bl	9aec <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1374:	4d11      	ldr	r5, [pc, #68]	; (13bc <blending()+0xd8>)
    1376:	b950      	cbnz	r0, 138e <blending()+0xaa>
    1378:	4c11      	ldr	r4, [pc, #68]	; (13c0 <blending()+0xdc>)
    137a:	682b      	ldr	r3, [r5, #0]
    137c:	9303      	str	r3, [sp, #12]
    137e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1382:	9b03      	ldr	r3, [sp, #12]
    1384:	1a5b      	subs	r3, r3, r1
    1386:	4293      	cmp	r3, r2
    1388:	d2db      	bcs.n	1342 <blending()+0x5e>
    138a:	783b      	ldrb	r3, [r7, #0]
    138c:	e7e1      	b.n	1352 <blending()+0x6e>
    138e:	4b0d      	ldr	r3, [pc, #52]	; (13c4 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1390:	682a      	ldr	r2, [r5, #0]
    1392:	781b      	ldrb	r3, [r3, #0]
    1394:	4c0a      	ldr	r4, [pc, #40]	; (13c0 <blending()+0xdc>)
    1396:	9201      	str	r2, [sp, #4]
	return ret;
    1398:	9a01      	ldr	r2, [sp, #4]
    139a:	6022      	str	r2, [r4, #0]
    139c:	009b      	lsls	r3, r3, #2
    139e:	4630      	mov	r0, r6
    13a0:	6063      	str	r3, [r4, #4]
    13a2:	f008 fba9 	bl	9af8 <__cxa_guard_release>
    13a6:	e7e8      	b.n	137a <blending()+0x96>
    13a8:	1fff9614 	.word	0x1fff9614
    13ac:	1fff8c90 	.word	0x1fff8c90
    13b0:	1fff9e3c 	.word	0x1fff9e3c
    13b4:	1fff8c86 	.word	0x1fff8c86
    13b8:	1fff95c0 	.word	0x1fff95c0
    13bc:	1fffa080 	.word	0x1fffa080
    13c0:	1fff95e0 	.word	0x1fff95e0
    13c4:	1fff95f8 	.word	0x1fff95f8

000013c8 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    13c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    13cc:	4e95      	ldr	r6, [pc, #596]	; (1624 <wipedown()+0x25c>)
    13ce:	f896 c000 	ldrb.w	ip, [r6]
    13d2:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    13d6:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    13d8:	2b00      	cmp	r3, #0
    13da:	f000 8120 	beq.w	161e <wipedown()+0x256>
    13de:	f103 3bff 	add.w	fp, r3, #4294967295
    13e2:	fa1f fb8b 	uxth.w	fp, fp
    13e6:	4890      	ldr	r0, [pc, #576]	; (1628 <wipedown()+0x260>)
    13e8:	4990      	ldr	r1, [pc, #576]	; (162c <wipedown()+0x264>)
    13ea:	f10b 0b01 	add.w	fp, fp, #1
    13ee:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    13f2:	4483      	add	fp, r0
    13f4:	4602      	mov	r2, r0
    13f6:	460d      	mov	r5, r1
    13f8:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    13fa:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    13fc:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1400:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1404:	7027      	strb	r7, [r4, #0]
    1406:	3203      	adds	r2, #3
    1408:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    140c:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    1410:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1414:	f884 a001 	strb.w	sl, [r4, #1]
    1418:	455a      	cmp	r2, fp
        b = rhs.b;
    141a:	f884 9002 	strb.w	r9, [r4, #2]
    141e:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1422:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1426:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    142a:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    142e:	f104 0403 	add.w	r4, r4, #3
    1432:	f1a1 0103 	sub.w	r1, r1, #3
    1436:	d1e0      	bne.n	13fa <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1438:	2b4a      	cmp	r3, #74	; 0x4a
    143a:	d827      	bhi.n	148c <wipedown()+0xc4>
    143c:	487c      	ldr	r0, [pc, #496]	; (1630 <wipedown()+0x268>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    143e:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1442:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1446:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    144a:	eb00 0801 	add.w	r8, r0, r1
    144e:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1452:	3301      	adds	r3, #1
    1454:	186f      	adds	r7, r5, r1
    1456:	f810 b001 	ldrb.w	fp, [r0, r1]
    145a:	f805 b001 	strb.w	fp, [r5, r1]
    145e:	18ac      	adds	r4, r5, r2
    1460:	b29b      	uxth	r3, r3
        g = rhs.g;
    1462:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1466:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    146a:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    146e:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1472:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1476:	f887 a001 	strb.w	sl, [r7, #1]
    147a:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    147c:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1480:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    1484:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1488:	70a1      	strb	r1, [r4, #2]
    148a:	d1d8      	bne.n	143e <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    148c:	f10c 3aff 	add.w	sl, ip, #4294967295
    1490:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1494:	2480      	movs	r4, #128	; 0x80
    1496:	eb05 0b0a 	add.w	fp, r5, sl
    149a:	4659      	mov	r1, fp
    149c:	4623      	mov	r3, r4
    149e:	a803      	add	r0, sp, #12
    14a0:	aa02      	add	r2, sp, #8
    14a2:	2700      	movs	r7, #0
    14a4:	f88d 4009 	strb.w	r4, [sp, #9]
    14a8:	f88d 400a 	strb.w	r4, [sp, #10]
    14ac:	f88d 7008 	strb.w	r7, [sp, #8]
    14b0:	f007 fbd4 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    14b4:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    14bc:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    14c0:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14c4:	f805 300a 	strb.w	r3, [r5, sl]
    14c8:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    14cc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    14d0:	eb05 0908 	add.w	r9, r5, r8
    14d4:	4649      	mov	r1, r9
    14d6:	4623      	mov	r3, r4
        g = rhs.g;
    14d8:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    14dc:	f88b 0002 	strb.w	r0, [fp, #2]
    14e0:	aa02      	add	r2, sp, #8
    14e2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14e4:	f88d 7008 	strb.w	r7, [sp, #8]
    14e8:	f88d 4009 	strb.w	r4, [sp, #9]
    14ec:	f88d 400a 	strb.w	r4, [sp, #10]
    14f0:	f007 fbb4 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    14f4:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14f6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    14fa:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    14fe:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    1502:	f89d 000d 	ldrb.w	r0, [sp, #13]
    1506:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    150a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    150e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1512:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1516:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    151a:	eb05 0e0c 	add.w	lr, r5, ip
    151e:	1868      	adds	r0, r5, r1
    1520:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    1522:	2a4a      	cmp	r2, #74	; 0x4a
    1524:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1528:	f8df 8100 	ldr.w	r8, [pc, #256]	; 162c <wipedown()+0x264>
        g = (colorcode >>  8) & 0xFF;
    152c:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1530:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1534:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1624 <wipedown()+0x25c>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1538:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    153a:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    153c:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    153e:	d830      	bhi.n	15a2 <wipedown()+0x1da>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos--; }		// 1000 / 75
    1540:	4f3c      	ldr	r7, [pc, #240]	; (1634 <wipedown()+0x26c>)
    1542:	683b      	ldr	r3, [r7, #0]
    1544:	07db      	lsls	r3, r3, #31
    1546:	d517      	bpl.n	1578 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1548:	4d3b      	ldr	r5, [pc, #236]	; (1638 <wipedown()+0x270>)
    154a:	4c3c      	ldr	r4, [pc, #240]	; (163c <wipedown()+0x274>)
    154c:	682b      	ldr	r3, [r5, #0]
    154e:	9303      	str	r3, [sp, #12]
    1550:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	1a5b      	subs	r3, r3, r1
    1558:	4293      	cmp	r3, r2
    155a:	7833      	ldrb	r3, [r6, #0]
    155c:	d306      	bcc.n	156c <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    155e:	682a      	ldr	r2, [r5, #0]
    1560:	9202      	str	r2, [sp, #8]
    1562:	3b01      	subs	r3, #1
	return ret;
    1564:	9a02      	ldr	r2, [sp, #8]
    1566:	6022      	str	r2, [r4, #0]
    1568:	b2db      	uxtb	r3, r3
    156a:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    156c:	b90b      	cbnz	r3, 1572 <wipedown()+0x1aa>
		finish_transition();
    156e:	f7ff fc21 	bl	db4 <finish_transition()>
	}
}
    1572:	b005      	add	sp, #20
    1574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos--; }		// 1000 / 75
    1578:	4638      	mov	r0, r7
    157a:	f008 fab7 	bl	9aec <__cxa_guard_acquire>
    157e:	2800      	cmp	r0, #0
    1580:	d0e2      	beq.n	1548 <wipedown()+0x180>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1582:	4d2d      	ldr	r5, [pc, #180]	; (1638 <wipedown()+0x270>)
    1584:	4b2e      	ldr	r3, [pc, #184]	; (1640 <wipedown()+0x278>)
    1586:	682a      	ldr	r2, [r5, #0]
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	9201      	str	r2, [sp, #4]
    158c:	4c2b      	ldr	r4, [pc, #172]	; (163c <wipedown()+0x274>)
	return ret;
    158e:	9a01      	ldr	r2, [sp, #4]
    1590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1594:	005b      	lsls	r3, r3, #1
    1596:	4638      	mov	r0, r7
    1598:	e884 000c 	stmia.w	r4, {r2, r3}
    159c:	f008 faac 	bl	9af8 <__cxa_guard_release>
    15a0:	e7d4      	b.n	154c <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    15a2:	1c55      	adds	r5, r2, #1
    15a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    15a8:	eb08 0a05 	add.w	sl, r8, r5
    15ac:	4651      	mov	r1, sl
    15ae:	4623      	mov	r3, r4
    15b0:	aa02      	add	r2, sp, #8
    15b2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    15b4:	f88d 7008 	strb.w	r7, [sp, #8]
    15b8:	f88d 4009 	strb.w	r4, [sp, #9]
    15bc:	f88d 400a 	strb.w	r4, [sp, #10]
    15c0:	f007 fb4c 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    15c4:	f899 3000 	ldrb.w	r3, [r9]
    15c8:	f88d 7008 	strb.w	r7, [sp, #8]
    15cc:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    15d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    15d4:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15d8:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    15dc:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    15e0:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15e4:	f808 c005 	strb.w	ip, [r8, r5]
    15e8:	aa02      	add	r2, sp, #8
    15ea:	4623      	mov	r3, r4
    15ec:	4649      	mov	r1, r9
    15ee:	a803      	add	r0, sp, #12
        g = rhs.g;
    15f0:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    15f4:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    15f8:	f88d 4009 	strb.w	r4, [sp, #9]
    15fc:	f88d 400a 	strb.w	r4, [sp, #10]
    1600:	f007 fb2c 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1604:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1608:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    160c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1610:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    1614:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    1618:	f889 3002 	strb.w	r3, [r9, #2]
    161c:	e790      	b.n	1540 <wipedown()+0x178>
    161e:	4d03      	ldr	r5, [pc, #12]	; (162c <wipedown()+0x264>)
    1620:	e70c      	b.n	143c <wipedown()+0x74>
    1622:	bf00      	nop
    1624:	1fff9500 	.word	0x1fff9500
    1628:	1fff9614 	.word	0x1fff9614
    162c:	1fff9e3c 	.word	0x1fff9e3c
    1630:	1fff8c90 	.word	0x1fff8c90
    1634:	1fff95bc 	.word	0x1fff95bc
    1638:	1fffa080 	.word	0x1fffa080
    163c:	1fff94e4 	.word	0x1fff94e4
    1640:	1fff95f8 	.word	0x1fff95f8

00001644 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1648:	4ba4      	ldr	r3, [pc, #656]	; (18dc <wipeup()+0x298>)
    164a:	781d      	ldrb	r5, [r3, #0]
    164c:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    164e:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1650:	2b00      	cmp	r3, #0
    1652:	f000 8130 	beq.w	18b6 <wipeup()+0x272>
    1656:	f103 3bff 	add.w	fp, r3, #4294967295
    165a:	fa1f fb8b 	uxth.w	fp, fp
    165e:	48a0      	ldr	r0, [pc, #640]	; (18e0 <wipeup()+0x29c>)
    1660:	49a0      	ldr	r1, [pc, #640]	; (18e4 <wipeup()+0x2a0>)
    1662:	f10b 0b01 	add.w	fp, fp, #1
    1666:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    166a:	4483      	add	fp, r0
    166c:	4602      	mov	r2, r0
    166e:	460c      	mov	r4, r1
    1670:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1672:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1676:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    167a:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    167e:	f886 e000 	strb.w	lr, [r6]
    1682:	3203      	adds	r2, #3
    1684:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1688:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    168c:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1690:	f886 a001 	strb.w	sl, [r6, #1]
    1694:	455a      	cmp	r2, fp
        b = rhs.b;
    1696:	f886 9002 	strb.w	r9, [r6, #2]
    169a:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    169e:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    16a2:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    16a6:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    16aa:	f106 0603 	add.w	r6, r6, #3
    16ae:	f1a1 0103 	sub.w	r1, r1, #3
    16b2:	d1de      	bne.n	1672 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16b4:	2b4a      	cmp	r3, #74	; 0x4a
    16b6:	d828      	bhi.n	170a <wipeup()+0xc6>
    16b8:	488b      	ldr	r0, [pc, #556]	; (18e8 <wipeup()+0x2a4>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    16ba:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16be:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16c6:	eb00 0801 	add.w	r8, r0, r1
    16ca:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16ce:	3301      	adds	r3, #1
    16d0:	eb04 0e01 	add.w	lr, r4, r1
    16d4:	f810 b001 	ldrb.w	fp, [r0, r1]
    16d8:	f804 b001 	strb.w	fp, [r4, r1]
    16dc:	18a6      	adds	r6, r4, r2
    16de:	b29b      	uxth	r3, r3
        g = rhs.g;
    16e0:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    16e4:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16e8:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ec:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    16f0:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16f4:	f88e a001 	strb.w	sl, [lr, #1]
    16f8:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    16fa:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16fe:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    1702:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    1706:	70b1      	strb	r1, [r6, #2]
    1708:	d1d7      	bne.n	16ba <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    170a:	2d00      	cmp	r5, #0
    170c:	f040 808f 	bne.w	182e <wipeup()+0x1ea>
    1710:	f10d 0a0c 	add.w	sl, sp, #12
    1714:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1718:	4b70      	ldr	r3, [pc, #448]	; (18dc <wipeup()+0x298>)
    171a:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    171c:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1720:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1724:	1c5a      	adds	r2, r3, #1
    1726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    172a:	eb04 0e03 	add.w	lr, r4, r3
    172e:	1825      	adds	r5, r4, r0
    1730:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1734:	2680      	movs	r6, #128	; 0x80
    1736:	eb04 0902 	add.w	r9, r4, r2
    173a:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    173c:	22ff      	movs	r2, #255	; 0xff
    173e:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1740:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1744:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1748:	f88e 2002 	strb.w	r2, [lr, #2]
    174c:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    174e:	5422      	strb	r2, [r4, r0]
    1750:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1752:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1754:	70aa      	strb	r2, [r5, #2]
    1756:	4650      	mov	r0, sl
    1758:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    175a:	f88d 6009 	strb.w	r6, [sp, #9]
    175e:	f88d 600a 	strb.w	r6, [sp, #10]
    1762:	f88d 8008 	strb.w	r8, [sp, #8]
    1766:	f007 fa79 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    176a:	4b5c      	ldr	r3, [pc, #368]	; (18dc <wipeup()+0x298>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    176c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1770:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1772:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1776:	f88d 8008 	strb.w	r8, [sp, #8]
    177a:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    177e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1782:	eb04 0805 	add.w	r8, r4, r5
    1786:	4633      	mov	r3, r6
    1788:	f88d 6009 	strb.w	r6, [sp, #9]
    178c:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1790:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1794:	55e1      	strb	r1, [r4, r7]
    1796:	465a      	mov	r2, fp
    1798:	4650      	mov	r0, sl
    179a:	4641      	mov	r1, r8
        g = rhs.g;
    179c:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    17a0:	f889 6002 	strb.w	r6, [r9, #2]
    17a4:	f007 fa5a 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos++; }
    17a8:	4b50      	ldr	r3, [pc, #320]	; (18ec <wipeup()+0x2a8>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
    17ae:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    17b0:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    17b4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17b8:	5560      	strb	r0, [r4, r5]
    17ba:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    17bc:	4847      	ldr	r0, [pc, #284]	; (18dc <wipeup()+0x298>)
        g = rhs.g;
    17be:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    17c2:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos++; }
    17c6:	d520      	bpl.n	180a <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17c8:	4d49      	ldr	r5, [pc, #292]	; (18f0 <wipeup()+0x2ac>)
    17ca:	4c4a      	ldr	r4, [pc, #296]	; (18f4 <wipeup()+0x2b0>)
    17cc:	682b      	ldr	r3, [r5, #0]
    17ce:	9303      	str	r3, [sp, #12]
    17d0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    17d4:	9b03      	ldr	r3, [sp, #12]
    17d6:	1a5b      	subs	r3, r3, r1
    17d8:	4293      	cmp	r3, r2
    17da:	d30e      	bcc.n	17fa <wipeup()+0x1b6>
    17dc:	4b3f      	ldr	r3, [pc, #252]	; (18dc <wipeup()+0x298>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17de:	682a      	ldr	r2, [r5, #0]
    17e0:	781b      	ldrb	r3, [r3, #0]
    17e2:	9202      	str	r2, [sp, #8]
	return ret;
    17e4:	9a02      	ldr	r2, [sp, #8]
    17e6:	6022      	str	r2, [r4, #0]
    17e8:	3301      	adds	r3, #1
    17ea:	4a3c      	ldr	r2, [pc, #240]	; (18dc <wipeup()+0x298>)
    17ec:	b2db      	uxtb	r3, r3
    17ee:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    17f0:	2b4a      	cmp	r3, #74	; 0x4a
    17f2:	d005      	beq.n	1800 <wipeup()+0x1bc>
		finish_transition();
	}
}
    17f4:	b005      	add	sp, #20
    17f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17fa:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    17fc:	2b4a      	cmp	r3, #74	; 0x4a
    17fe:	d1f9      	bne.n	17f4 <wipeup()+0x1b0>
		finish_transition();
    1800:	f7ff fad8 	bl	db4 <finish_transition()>
	}
}
    1804:	b005      	add	sp, #20
    1806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos++; }
    180a:	4838      	ldr	r0, [pc, #224]	; (18ec <wipeup()+0x2a8>)
    180c:	f008 f96e 	bl	9aec <__cxa_guard_acquire>
    1810:	2800      	cmp	r0, #0
    1812:	d152      	bne.n	18ba <wipeup()+0x276>
    1814:	4d36      	ldr	r5, [pc, #216]	; (18f0 <wipeup()+0x2ac>)
    1816:	4c37      	ldr	r4, [pc, #220]	; (18f4 <wipeup()+0x2b0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1818:	682b      	ldr	r3, [r5, #0]
    181a:	9303      	str	r3, [sp, #12]
    181c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1820:	9b03      	ldr	r3, [sp, #12]
    1822:	1a5b      	subs	r3, r3, r1
    1824:	4293      	cmp	r3, r2
    1826:	d2d9      	bcs.n	17dc <wipeup()+0x198>
    1828:	4b2c      	ldr	r3, [pc, #176]	; (18dc <wipeup()+0x298>)
    182a:	781b      	ldrb	r3, [r3, #0]
    182c:	e7e0      	b.n	17f0 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    182e:	3d01      	subs	r5, #1
    1830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1834:	2680      	movs	r6, #128	; 0x80
    1836:	eb04 0905 	add.w	r9, r4, r5
    183a:	f10d 0a0c 	add.w	sl, sp, #12
    183e:	f10d 0b08 	add.w	fp, sp, #8
    1842:	f04f 0800 	mov.w	r8, #0
    1846:	4649      	mov	r1, r9
    1848:	4633      	mov	r3, r6
    184a:	4650      	mov	r0, sl
    184c:	465a      	mov	r2, fp
    184e:	f88d 8008 	strb.w	r8, [sp, #8]
    1852:	f88d 6009 	strb.w	r6, [sp, #9]
    1856:	f88d 600a 	strb.w	r6, [sp, #10]
    185a:	f007 f9ff 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    185e:	4b1f      	ldr	r3, [pc, #124]	; (18dc <wipeup()+0x298>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1860:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1864:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1866:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    186a:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    186e:	f88d 8008 	strb.w	r8, [sp, #8]
    1872:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1876:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    187a:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    187e:	5562      	strb	r2, [r4, r5]
    1880:	461f      	mov	r7, r3
    1882:	4641      	mov	r1, r8
    1884:	4633      	mov	r3, r6
    1886:	465a      	mov	r2, fp
    1888:	4650      	mov	r0, sl
        g = rhs.g;
    188a:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    188e:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1892:	f88d 6009 	strb.w	r6, [sp, #9]
    1896:	f88d 600a 	strb.w	r6, [sp, #10]
    189a:	f007 f9df 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    189e:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    18a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    18a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18aa:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    18ac:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    18b0:	f888 3002 	strb.w	r3, [r8, #2]
    18b4:	e730      	b.n	1718 <wipeup()+0xd4>
    18b6:	4c0b      	ldr	r4, [pc, #44]	; (18e4 <wipeup()+0x2a0>)
    18b8:	e6fe      	b.n	16b8 <wipeup()+0x74>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18ba:	4d0d      	ldr	r5, [pc, #52]	; (18f0 <wipeup()+0x2ac>)
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 10) { wipe_pos++; }
    18bc:	4b0e      	ldr	r3, [pc, #56]	; (18f8 <wipeup()+0x2b4>)
    18be:	682a      	ldr	r2, [r5, #0]
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	9201      	str	r2, [sp, #4]
    18c4:	4c0b      	ldr	r4, [pc, #44]	; (18f4 <wipeup()+0x2b0>)
	return ret;
    18c6:	9a01      	ldr	r2, [sp, #4]
    18c8:	4808      	ldr	r0, [pc, #32]	; (18ec <wipeup()+0x2a8>)
    18ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    18ce:	005b      	lsls	r3, r3, #1
    18d0:	e884 000c 	stmia.w	r4, {r2, r3}
    18d4:	f008 f910 	bl	9af8 <__cxa_guard_release>
    18d8:	e79e      	b.n	1818 <wipeup()+0x1d4>
    18da:	bf00      	nop
    18dc:	1fff9500 	.word	0x1fff9500
    18e0:	1fff8c90 	.word	0x1fff8c90
    18e4:	1fff9e3c 	.word	0x1fff9e3c
    18e8:	1fff9614 	.word	0x1fff9614
    18ec:	1fff95cc 	.word	0x1fff95cc
    18f0:	1fffa080 	.word	0x1fffa080
    18f4:	1fff95fc 	.word	0x1fff95fc
    18f8:	1fff95f8 	.word	0x1fff95f8

000018fc <colorfade()>:
	if (wipe_pos == ONE_SIDE - 1) {
		finish_transition();
	}
}

void colorfade() {
    18fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (color_up) {
    1900:	f8df 9160 	ldr.w	r9, [pc, #352]	; 1a64 <colorfade()+0x168>
    1904:	f899 3000 	ldrb.w	r3, [r9]
	if (wipe_pos == ONE_SIDE - 1) {
		finish_transition();
	}
}

void colorfade() {
    1908:	b087      	sub	sp, #28
	if (color_up) {
    190a:	2b00      	cmp	r3, #0
    190c:	d034      	beq.n	1978 <colorfade()+0x7c>
    190e:	4d4a      	ldr	r5, [pc, #296]	; (1a38 <colorfade()+0x13c>)
    1910:	4c4a      	ldr	r4, [pc, #296]	; (1a3c <colorfade()+0x140>)
    1912:	4e4b      	ldr	r6, [pc, #300]	; (1a40 <colorfade()+0x144>)
    1914:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
    1918:	af05      	add	r7, sp, #20
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio); }
    191a:	4629      	mov	r1, r5
    191c:	7833      	ldrb	r3, [r6, #0]
    191e:	4a49      	ldr	r2, [pc, #292]	; (1a44 <colorfade()+0x148>)
    1920:	4638      	mov	r0, r7
    1922:	3503      	adds	r5, #3
    1924:	f007 f99a 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1928:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    192c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    1930:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1934:	7021      	strb	r1, [r4, #0]
    1936:	4545      	cmp	r5, r8
        g = rhs.g;
    1938:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    193a:	70a3      	strb	r3, [r4, #2]
    193c:	f104 0403 	add.w	r4, r4, #3
    1940:	d1eb      	bne.n	191a <colorfade()+0x1e>
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
    1942:	4f41      	ldr	r7, [pc, #260]	; (1a48 <colorfade()+0x14c>)
    1944:	683b      	ldr	r3, [r7, #0]
    1946:	07da      	lsls	r2, r3, #31
    1948:	d55f      	bpl.n	1a0a <colorfade()+0x10e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    194a:	4c40      	ldr	r4, [pc, #256]	; (1a4c <colorfade()+0x150>)
    194c:	4d40      	ldr	r5, [pc, #256]	; (1a50 <colorfade()+0x154>)
    194e:	6823      	ldr	r3, [r4, #0]
    1950:	9302      	str	r3, [sp, #8]
    1952:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    1956:	9b02      	ldr	r3, [sp, #8]
    1958:	1a5b      	subs	r3, r3, r1
    195a:	4293      	cmp	r3, r2
    195c:	d309      	bcc.n	1972 <colorfade()+0x76>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    195e:	6822      	ldr	r2, [r4, #0]
    1960:	7833      	ldrb	r3, [r6, #0]
    1962:	9201      	str	r2, [sp, #4]
	return ret;
    1964:	9a01      	ldr	r2, [sp, #4]
    1966:	602a      	str	r2, [r5, #0]
    1968:	2bff      	cmp	r3, #255	; 0xff
    196a:	f103 0201 	add.w	r2, r3, #1
    196e:	7032      	strb	r2, [r6, #0]
    1970:	d05e      	beq.n	1a30 <colorfade()+0x134>
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio); }
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
	}
}
    1972:	b007      	add	sp, #28
    1974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1978:	4d36      	ldr	r5, [pc, #216]	; (1a54 <colorfade()+0x158>)
    197a:	4c30      	ldr	r4, [pc, #192]	; (1a3c <colorfade()+0x140>)
    197c:	4e30      	ldr	r6, [pc, #192]	; (1a40 <colorfade()+0x144>)
    197e:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
    1982:	af05      	add	r7, sp, #20
	if (color_up) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio); }
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio); }
    1984:	4629      	mov	r1, r5
    1986:	7833      	ldrb	r3, [r6, #0]
    1988:	4a2e      	ldr	r2, [pc, #184]	; (1a44 <colorfade()+0x148>)
    198a:	4638      	mov	r0, r7
    198c:	3503      	adds	r5, #3
    198e:	f007 f965 	bl	8c5c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1992:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    1996:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    199a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    199e:	7021      	strb	r1, [r4, #0]
    19a0:	4545      	cmp	r5, r8
        g = rhs.g;
    19a2:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    19a4:	70a3      	strb	r3, [r4, #2]
    19a6:	f104 0403 	add.w	r4, r4, #3
    19aa:	d1eb      	bne.n	1984 <colorfade()+0x88>
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
    19ac:	4f2a      	ldr	r7, [pc, #168]	; (1a58 <colorfade()+0x15c>)
    19ae:	683b      	ldr	r3, [r7, #0]
    19b0:	07db      	lsls	r3, r3, #31
    19b2:	d517      	bpl.n	19e4 <colorfade()+0xe8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19b4:	4c25      	ldr	r4, [pc, #148]	; (1a4c <colorfade()+0x150>)
    19b6:	4d29      	ldr	r5, [pc, #164]	; (1a5c <colorfade()+0x160>)
    19b8:	6823      	ldr	r3, [r4, #0]
    19ba:	9305      	str	r3, [sp, #20]
    19bc:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    19c0:	9b05      	ldr	r3, [sp, #20]
    19c2:	1a5b      	subs	r3, r3, r1
    19c4:	4293      	cmp	r3, r2
    19c6:	d3d4      	bcc.n	1972 <colorfade()+0x76>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19c8:	6822      	ldr	r2, [r4, #0]
    19ca:	7833      	ldrb	r3, [r6, #0]
    19cc:	9204      	str	r2, [sp, #16]
	return ret;
    19ce:	9a04      	ldr	r2, [sp, #16]
    19d0:	602a      	str	r2, [r5, #0]
    19d2:	1e5a      	subs	r2, r3, #1
    19d4:	7032      	strb	r2, [r6, #0]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d1cb      	bne.n	1972 <colorfade()+0x76>
    19da:	f7ff f9eb 	bl	db4 <finish_transition()>
	}
}
    19de:	b007      	add	sp, #28
    19e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio); }
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio); }
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
    19e4:	4638      	mov	r0, r7
    19e6:	f008 f881 	bl	9aec <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19ea:	4c18      	ldr	r4, [pc, #96]	; (1a4c <colorfade()+0x150>)
    19ec:	2800      	cmp	r0, #0
    19ee:	d0e2      	beq.n	19b6 <colorfade()+0xba>
    19f0:	4b1b      	ldr	r3, [pc, #108]	; (1a60 <colorfade()+0x164>)
    19f2:	6822      	ldr	r2, [r4, #0]
    19f4:	781b      	ldrb	r3, [r3, #0]
    19f6:	4d19      	ldr	r5, [pc, #100]	; (1a5c <colorfade()+0x160>)
    19f8:	9203      	str	r2, [sp, #12]
	return ret;
    19fa:	9a03      	ldr	r2, [sp, #12]
    19fc:	602a      	str	r2, [r5, #0]
    19fe:	009b      	lsls	r3, r3, #2
    1a00:	4638      	mov	r0, r7
    1a02:	606b      	str	r3, [r5, #4]
    1a04:	f008 f878 	bl	9af8 <__cxa_guard_release>
    1a08:	e7d6      	b.n	19b8 <colorfade()+0xbc>
}

void colorfade() {
	if (color_up) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio); }
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
    1a0a:	4638      	mov	r0, r7
    1a0c:	f008 f86e 	bl	9aec <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a10:	4c0e      	ldr	r4, [pc, #56]	; (1a4c <colorfade()+0x150>)
    1a12:	2800      	cmp	r0, #0
    1a14:	d09a      	beq.n	194c <colorfade()+0x50>
    1a16:	4b12      	ldr	r3, [pc, #72]	; (1a60 <colorfade()+0x164>)
    1a18:	6822      	ldr	r2, [r4, #0]
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	4d0c      	ldr	r5, [pc, #48]	; (1a50 <colorfade()+0x154>)
    1a1e:	9200      	str	r2, [sp, #0]
	return ret;
    1a20:	9a00      	ldr	r2, [sp, #0]
    1a22:	602a      	str	r2, [r5, #0]
    1a24:	009b      	lsls	r3, r3, #2
    1a26:	4638      	mov	r0, r7
    1a28:	606b      	str	r3, [r5, #4]
    1a2a:	f008 f865 	bl	9af8 <__cxa_guard_release>
    1a2e:	e78e      	b.n	194e <colorfade()+0x52>
    1a30:	2300      	movs	r3, #0
    1a32:	f889 3000 	strb.w	r3, [r9]
    1a36:	e79c      	b.n	1972 <colorfade()+0x76>
    1a38:	1fff9614 	.word	0x1fff9614
    1a3c:	1fff9e3c 	.word	0x1fff9e3c
    1a40:	1fff8c86 	.word	0x1fff8c86
    1a44:	1fffa000 	.word	0x1fffa000
    1a48:	1fff95ec 	.word	0x1fff95ec
    1a4c:	1fffa080 	.word	0x1fffa080
    1a50:	1fff95d4 	.word	0x1fff95d4
    1a54:	1fff8c90 	.word	0x1fff8c90
    1a58:	1fff9604 	.word	0x1fff9604
    1a5c:	1fff95c4 	.word	0x1fff95c4
    1a60:	1fff95f8 	.word	0x1fff95f8
    1a64:	1fff94e0 	.word	0x1fff94e0

00001a68 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
	}
}

void switch_transition(TransitionType tt) {
	switch (tt) {
    1a68:	2803      	cmp	r0, #3
    1a6a:	d803      	bhi.n	1a74 <switch_transition(TransitionType)+0xc>
    1a6c:	e8df f000 	tbb	[pc, r0]
    1a70:	08040602 	.word	0x08040602
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
		case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1a74:	f7ff bc36 	b.w	12e4 <blending()>

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1a78:	f7ff bde4 	b.w	1644 <wipeup()>
}

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1a7c:	f7ff bca4 	b.w	13c8 <wipedown()>
		case WIPEUP:	wipeup();		break;
		case COLORFADE: colorfade();	break;
    1a80:	f7ff bf3c 	b.w	18fc <colorfade()>

00001a84 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1a84:	b510      	push	{r4, lr}
    1a86:	2110      	movs	r1, #16
    1a88:	4604      	mov	r4, r0
    1a8a:	4894      	ldr	r0, [pc, #592]	; (1cdc <print_palette(unsigned char)+0x258>)
    1a8c:	f009 f8c6 	bl	ac1c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a90:	4621      	mov	r1, r4
    1a92:	2300      	movs	r3, #0
    1a94:	220a      	movs	r2, #10
    1a96:	4892      	ldr	r0, [pc, #584]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1a98:	f009 fad4 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a9c:	2102      	movs	r1, #2
    1a9e:	4891      	ldr	r0, [pc, #580]	; (1ce4 <print_palette(unsigned char)+0x260>)
    1aa0:	f009 f8bc 	bl	ac1c <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1aa4:	2c5c      	cmp	r4, #92	; 0x5c
    1aa6:	f200 8281 	bhi.w	1fac <print_palette(unsigned char)+0x528>
    1aaa:	e8df f014 	tbh	[pc, r4, lsl #1]
    1aae:	027a      	.short	0x027a
    1ab0:	02700275 	.word	0x02700275
    1ab4:	0266026b 	.word	0x0266026b
    1ab8:	025c0261 	.word	0x025c0261
    1abc:	02520257 	.word	0x02520257
    1ac0:	0248024d 	.word	0x0248024d
    1ac4:	023e0243 	.word	0x023e0243
    1ac8:	02340239 	.word	0x02340239
    1acc:	022a022f 	.word	0x022a022f
    1ad0:	02200225 	.word	0x02200225
    1ad4:	0216021b 	.word	0x0216021b
    1ad8:	020c0211 	.word	0x020c0211
    1adc:	02020207 	.word	0x02020207
    1ae0:	01f801fd 	.word	0x01f801fd
    1ae4:	01ee01f3 	.word	0x01ee01f3
    1ae8:	01e401e9 	.word	0x01e401e9
    1aec:	01da01df 	.word	0x01da01df
    1af0:	01d001d5 	.word	0x01d001d5
    1af4:	01c601cb 	.word	0x01c601cb
    1af8:	01bc01c1 	.word	0x01bc01c1
    1afc:	01b201b7 	.word	0x01b201b7
    1b00:	01a801ad 	.word	0x01a801ad
    1b04:	019e01a3 	.word	0x019e01a3
    1b08:	01940199 	.word	0x01940199
    1b0c:	018a018f 	.word	0x018a018f
    1b10:	01800185 	.word	0x01800185
    1b14:	0176017b 	.word	0x0176017b
    1b18:	016c0171 	.word	0x016c0171
    1b1c:	01110167 	.word	0x01110167
    1b20:	0107010c 	.word	0x0107010c
    1b24:	00fd0102 	.word	0x00fd0102
    1b28:	00f300f8 	.word	0x00f300f8
    1b2c:	00e900ee 	.word	0x00e900ee
    1b30:	00df00e4 	.word	0x00df00e4
    1b34:	00d500da 	.word	0x00d500da
    1b38:	00cb00d0 	.word	0x00cb00d0
    1b3c:	00c100c6 	.word	0x00c100c6
    1b40:	00b700bc 	.word	0x00b700bc
    1b44:	00ad00b2 	.word	0x00ad00b2
    1b48:	00a300a8 	.word	0x00a300a8
    1b4c:	0099009e 	.word	0x0099009e
    1b50:	008f0094 	.word	0x008f0094
    1b54:	0085008a 	.word	0x0085008a
    1b58:	007b0080 	.word	0x007b0080
    1b5c:	00710076 	.word	0x00710076
    1b60:	0067006c 	.word	0x0067006c
    1b64:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1b68:	495f      	ldr	r1, [pc, #380]	; (1ce8 <print_palette(unsigned char)+0x264>)
    1b6a:	485d      	ldr	r0, [pc, #372]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1b6c:	f7fe fe36 	bl	7dc <Print::println(char const*)>
    1b70:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1b72:	495e      	ldr	r1, [pc, #376]	; (1cec <print_palette(unsigned char)+0x268>)
    1b74:	485a      	ldr	r0, [pc, #360]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1b76:	f7fe fe31 	bl	7dc <Print::println(char const*)>
    1b7a:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1b7c:	495c      	ldr	r1, [pc, #368]	; (1cf0 <print_palette(unsigned char)+0x26c>)
    1b7e:	4858      	ldr	r0, [pc, #352]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1b80:	f7fe fe2c 	bl	7dc <Print::println(char const*)>
    1b84:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1b86:	495b      	ldr	r1, [pc, #364]	; (1cf4 <print_palette(unsigned char)+0x270>)
    1b88:	4855      	ldr	r0, [pc, #340]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1b8a:	f7fe fe27 	bl	7dc <Print::println(char const*)>
    1b8e:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1b90:	4959      	ldr	r1, [pc, #356]	; (1cf8 <print_palette(unsigned char)+0x274>)
    1b92:	4853      	ldr	r0, [pc, #332]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1b94:	f7fe fe22 	bl	7dc <Print::println(char const*)>
    1b98:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1b9a:	4958      	ldr	r1, [pc, #352]	; (1cfc <print_palette(unsigned char)+0x278>)
    1b9c:	4850      	ldr	r0, [pc, #320]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1b9e:	f7fe fe1d 	bl	7dc <Print::println(char const*)>
    1ba2:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1ba4:	4956      	ldr	r1, [pc, #344]	; (1d00 <print_palette(unsigned char)+0x27c>)
    1ba6:	484e      	ldr	r0, [pc, #312]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1ba8:	f7fe fe18 	bl	7dc <Print::println(char const*)>
    1bac:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1bae:	4955      	ldr	r1, [pc, #340]	; (1d04 <print_palette(unsigned char)+0x280>)
    1bb0:	484b      	ldr	r0, [pc, #300]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bb2:	f7fe fe13 	bl	7dc <Print::println(char const*)>
    1bb6:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1bb8:	4953      	ldr	r1, [pc, #332]	; (1d08 <print_palette(unsigned char)+0x284>)
    1bba:	4849      	ldr	r0, [pc, #292]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bbc:	f7fe fe0e 	bl	7dc <Print::println(char const*)>
    1bc0:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1bc2:	4952      	ldr	r1, [pc, #328]	; (1d0c <print_palette(unsigned char)+0x288>)
    1bc4:	4846      	ldr	r0, [pc, #280]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bc6:	f7fe fe09 	bl	7dc <Print::println(char const*)>
    1bca:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1bcc:	4950      	ldr	r1, [pc, #320]	; (1d10 <print_palette(unsigned char)+0x28c>)
    1bce:	4844      	ldr	r0, [pc, #272]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bd0:	f7fe fe04 	bl	7dc <Print::println(char const*)>
    1bd4:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1bd6:	494f      	ldr	r1, [pc, #316]	; (1d14 <print_palette(unsigned char)+0x290>)
    1bd8:	4841      	ldr	r0, [pc, #260]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bda:	f7fe fdff 	bl	7dc <Print::println(char const*)>
    1bde:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1be0:	494d      	ldr	r1, [pc, #308]	; (1d18 <print_palette(unsigned char)+0x294>)
    1be2:	483f      	ldr	r0, [pc, #252]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1be4:	f7fe fdfa 	bl	7dc <Print::println(char const*)>
    1be8:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1bea:	494c      	ldr	r1, [pc, #304]	; (1d1c <print_palette(unsigned char)+0x298>)
    1bec:	483c      	ldr	r0, [pc, #240]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bee:	f7fe fdf5 	bl	7dc <Print::println(char const*)>
    1bf2:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1bf4:	494a      	ldr	r1, [pc, #296]	; (1d20 <print_palette(unsigned char)+0x29c>)
    1bf6:	483a      	ldr	r0, [pc, #232]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1bf8:	f7fe fdf0 	bl	7dc <Print::println(char const*)>
    1bfc:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1bfe:	4949      	ldr	r1, [pc, #292]	; (1d24 <print_palette(unsigned char)+0x2a0>)
    1c00:	4837      	ldr	r0, [pc, #220]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c02:	f7fe fdeb 	bl	7dc <Print::println(char const*)>
    1c06:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1c08:	4947      	ldr	r1, [pc, #284]	; (1d28 <print_palette(unsigned char)+0x2a4>)
    1c0a:	4835      	ldr	r0, [pc, #212]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c0c:	f7fe fde6 	bl	7dc <Print::println(char const*)>
    1c10:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1c12:	4946      	ldr	r1, [pc, #280]	; (1d2c <print_palette(unsigned char)+0x2a8>)
    1c14:	4832      	ldr	r0, [pc, #200]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c16:	f7fe fde1 	bl	7dc <Print::println(char const*)>
    1c1a:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1c1c:	4944      	ldr	r1, [pc, #272]	; (1d30 <print_palette(unsigned char)+0x2ac>)
    1c1e:	4830      	ldr	r0, [pc, #192]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c20:	f7fe fddc 	bl	7dc <Print::println(char const*)>
    1c24:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1c26:	4943      	ldr	r1, [pc, #268]	; (1d34 <print_palette(unsigned char)+0x2b0>)
    1c28:	482d      	ldr	r0, [pc, #180]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c2a:	f7fe fdd7 	bl	7dc <Print::println(char const*)>
    1c2e:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1c30:	4941      	ldr	r1, [pc, #260]	; (1d38 <print_palette(unsigned char)+0x2b4>)
    1c32:	482b      	ldr	r0, [pc, #172]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c34:	f7fe fdd2 	bl	7dc <Print::println(char const*)>
    1c38:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1c3a:	4940      	ldr	r1, [pc, #256]	; (1d3c <print_palette(unsigned char)+0x2b8>)
    1c3c:	4828      	ldr	r0, [pc, #160]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c3e:	f7fe fdcd 	bl	7dc <Print::println(char const*)>
    1c42:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1c44:	493e      	ldr	r1, [pc, #248]	; (1d40 <print_palette(unsigned char)+0x2bc>)
    1c46:	4826      	ldr	r0, [pc, #152]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c48:	f7fe fdc8 	bl	7dc <Print::println(char const*)>
    1c4c:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1c4e:	493d      	ldr	r1, [pc, #244]	; (1d44 <print_palette(unsigned char)+0x2c0>)
    1c50:	4823      	ldr	r0, [pc, #140]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c52:	f7fe fdc3 	bl	7dc <Print::println(char const*)>
    1c56:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1c58:	493b      	ldr	r1, [pc, #236]	; (1d48 <print_palette(unsigned char)+0x2c4>)
    1c5a:	4821      	ldr	r0, [pc, #132]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c5c:	f7fe fdbe 	bl	7dc <Print::println(char const*)>
    1c60:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1c62:	493a      	ldr	r1, [pc, #232]	; (1d4c <print_palette(unsigned char)+0x2c8>)
    1c64:	481e      	ldr	r0, [pc, #120]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c66:	f7fe fdb9 	bl	7dc <Print::println(char const*)>
    1c6a:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1c6c:	4938      	ldr	r1, [pc, #224]	; (1d50 <print_palette(unsigned char)+0x2cc>)
    1c6e:	481c      	ldr	r0, [pc, #112]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c70:	f7fe fdb4 	bl	7dc <Print::println(char const*)>
    1c74:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1c76:	4937      	ldr	r1, [pc, #220]	; (1d54 <print_palette(unsigned char)+0x2d0>)
    1c78:	4819      	ldr	r0, [pc, #100]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c7a:	f7fe fdaf 	bl	7dc <Print::println(char const*)>
    1c7e:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1c80:	4935      	ldr	r1, [pc, #212]	; (1d58 <print_palette(unsigned char)+0x2d4>)
    1c82:	4817      	ldr	r0, [pc, #92]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c84:	f7fe fdaa 	bl	7dc <Print::println(char const*)>
    1c88:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1c8a:	4934      	ldr	r1, [pc, #208]	; (1d5c <print_palette(unsigned char)+0x2d8>)
    1c8c:	4814      	ldr	r0, [pc, #80]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c8e:	f7fe fda5 	bl	7dc <Print::println(char const*)>
    1c92:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1c94:	4932      	ldr	r1, [pc, #200]	; (1d60 <print_palette(unsigned char)+0x2dc>)
    1c96:	4812      	ldr	r0, [pc, #72]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1c98:	f7fe fda0 	bl	7dc <Print::println(char const*)>
    1c9c:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1c9e:	4931      	ldr	r1, [pc, #196]	; (1d64 <print_palette(unsigned char)+0x2e0>)
    1ca0:	480f      	ldr	r0, [pc, #60]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1ca2:	f7fe fd9b 	bl	7dc <Print::println(char const*)>
    1ca6:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1ca8:	492f      	ldr	r1, [pc, #188]	; (1d68 <print_palette(unsigned char)+0x2e4>)
    1caa:	480d      	ldr	r0, [pc, #52]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1cac:	f7fe fd96 	bl	7dc <Print::println(char const*)>
    1cb0:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1cb2:	492e      	ldr	r1, [pc, #184]	; (1d6c <print_palette(unsigned char)+0x2e8>)
    1cb4:	480a      	ldr	r0, [pc, #40]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1cb6:	f7fe fd91 	bl	7dc <Print::println(char const*)>
    1cba:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1cbc:	492c      	ldr	r1, [pc, #176]	; (1d70 <print_palette(unsigned char)+0x2ec>)
    1cbe:	4808      	ldr	r0, [pc, #32]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1cc0:	f7fe fd8c 	bl	7dc <Print::println(char const*)>
    1cc4:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1cc6:	492b      	ldr	r1, [pc, #172]	; (1d74 <print_palette(unsigned char)+0x2f0>)
    1cc8:	4805      	ldr	r0, [pc, #20]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1cca:	f7fe fd87 	bl	7dc <Print::println(char const*)>
    1cce:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1cd0:	4929      	ldr	r1, [pc, #164]	; (1d78 <print_palette(unsigned char)+0x2f4>)
    1cd2:	4803      	ldr	r0, [pc, #12]	; (1ce0 <print_palette(unsigned char)+0x25c>)
    1cd4:	f7fe fd82 	bl	7dc <Print::println(char const*)>
    1cd8:	bd10      	pop	{r4, pc}
    1cda:	bf00      	nop
    1cdc:	0000c9bc 	.word	0x0000c9bc
    1ce0:	1fff8764 	.word	0x1fff8764
    1ce4:	0000c9d0 	.word	0x0000c9d0
    1ce8:	0000cf64 	.word	0x0000cf64
    1cec:	0000cf58 	.word	0x0000cf58
    1cf0:	0000cf48 	.word	0x0000cf48
    1cf4:	0000cf38 	.word	0x0000cf38
    1cf8:	0000cf24 	.word	0x0000cf24
    1cfc:	0000cf0c 	.word	0x0000cf0c
    1d00:	0000cef4 	.word	0x0000cef4
    1d04:	0000cee4 	.word	0x0000cee4
    1d08:	0000cecc 	.word	0x0000cecc
    1d0c:	0000cec0 	.word	0x0000cec0
    1d10:	0000ceb4 	.word	0x0000ceb4
    1d14:	0000ce9c 	.word	0x0000ce9c
    1d18:	0000ce90 	.word	0x0000ce90
    1d1c:	0000ce84 	.word	0x0000ce84
    1d20:	0000ce78 	.word	0x0000ce78
    1d24:	0000ce6c 	.word	0x0000ce6c
    1d28:	0000ce5c 	.word	0x0000ce5c
    1d2c:	0000ce50 	.word	0x0000ce50
    1d30:	0000ce3c 	.word	0x0000ce3c
    1d34:	0000ce30 	.word	0x0000ce30
    1d38:	0000ce20 	.word	0x0000ce20
    1d3c:	0000ce14 	.word	0x0000ce14
    1d40:	0000ce08 	.word	0x0000ce08
    1d44:	0000ce00 	.word	0x0000ce00
    1d48:	0000cdec 	.word	0x0000cdec
    1d4c:	0000cddc 	.word	0x0000cddc
    1d50:	0000cdc8 	.word	0x0000cdc8
    1d54:	0000cdbc 	.word	0x0000cdbc
    1d58:	0000cdb0 	.word	0x0000cdb0
    1d5c:	0000cda4 	.word	0x0000cda4
    1d60:	0000cd94 	.word	0x0000cd94
    1d64:	0000cd80 	.word	0x0000cd80
    1d68:	0000cd74 	.word	0x0000cd74
    1d6c:	0000cd64 	.word	0x0000cd64
    1d70:	0000cd58 	.word	0x0000cd58
    1d74:	0000cd48 	.word	0x0000cd48
    1d78:	0000cd3c 	.word	0x0000cd3c
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1d7c:	498e      	ldr	r1, [pc, #568]	; (1fb8 <print_palette(unsigned char)+0x534>)
    1d7e:	488f      	ldr	r0, [pc, #572]	; (1fbc <print_palette(unsigned char)+0x538>)
    1d80:	f7fe fd2c 	bl	7dc <Print::println(char const*)>
    1d84:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1d86:	498e      	ldr	r1, [pc, #568]	; (1fc0 <print_palette(unsigned char)+0x53c>)
    1d88:	488c      	ldr	r0, [pc, #560]	; (1fbc <print_palette(unsigned char)+0x538>)
    1d8a:	f7fe fd27 	bl	7dc <Print::println(char const*)>
    1d8e:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1d90:	498c      	ldr	r1, [pc, #560]	; (1fc4 <print_palette(unsigned char)+0x540>)
    1d92:	488a      	ldr	r0, [pc, #552]	; (1fbc <print_palette(unsigned char)+0x538>)
    1d94:	f7fe fd22 	bl	7dc <Print::println(char const*)>
    1d98:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1d9a:	498b      	ldr	r1, [pc, #556]	; (1fc8 <print_palette(unsigned char)+0x544>)
    1d9c:	4887      	ldr	r0, [pc, #540]	; (1fbc <print_palette(unsigned char)+0x538>)
    1d9e:	f7fe fd1d 	bl	7dc <Print::println(char const*)>
    1da2:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1da4:	4989      	ldr	r1, [pc, #548]	; (1fcc <print_palette(unsigned char)+0x548>)
    1da6:	4885      	ldr	r0, [pc, #532]	; (1fbc <print_palette(unsigned char)+0x538>)
    1da8:	f7fe fd18 	bl	7dc <Print::println(char const*)>
    1dac:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1dae:	4988      	ldr	r1, [pc, #544]	; (1fd0 <print_palette(unsigned char)+0x54c>)
    1db0:	4882      	ldr	r0, [pc, #520]	; (1fbc <print_palette(unsigned char)+0x538>)
    1db2:	f7fe fd13 	bl	7dc <Print::println(char const*)>
    1db6:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1db8:	4986      	ldr	r1, [pc, #536]	; (1fd4 <print_palette(unsigned char)+0x550>)
    1dba:	4880      	ldr	r0, [pc, #512]	; (1fbc <print_palette(unsigned char)+0x538>)
    1dbc:	f7fe fd0e 	bl	7dc <Print::println(char const*)>
    1dc0:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1dc2:	4985      	ldr	r1, [pc, #532]	; (1fd8 <print_palette(unsigned char)+0x554>)
    1dc4:	487d      	ldr	r0, [pc, #500]	; (1fbc <print_palette(unsigned char)+0x538>)
    1dc6:	f7fe fd09 	bl	7dc <Print::println(char const*)>
    1dca:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1dcc:	4983      	ldr	r1, [pc, #524]	; (1fdc <print_palette(unsigned char)+0x558>)
    1dce:	487b      	ldr	r0, [pc, #492]	; (1fbc <print_palette(unsigned char)+0x538>)
    1dd0:	f7fe fd04 	bl	7dc <Print::println(char const*)>
    1dd4:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1dd6:	4982      	ldr	r1, [pc, #520]	; (1fe0 <print_palette(unsigned char)+0x55c>)
    1dd8:	4878      	ldr	r0, [pc, #480]	; (1fbc <print_palette(unsigned char)+0x538>)
    1dda:	f7fe fcff 	bl	7dc <Print::println(char const*)>
    1dde:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1de0:	4980      	ldr	r1, [pc, #512]	; (1fe4 <print_palette(unsigned char)+0x560>)
    1de2:	4876      	ldr	r0, [pc, #472]	; (1fbc <print_palette(unsigned char)+0x538>)
    1de4:	f7fe fcfa 	bl	7dc <Print::println(char const*)>
    1de8:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1dea:	497f      	ldr	r1, [pc, #508]	; (1fe8 <print_palette(unsigned char)+0x564>)
    1dec:	4873      	ldr	r0, [pc, #460]	; (1fbc <print_palette(unsigned char)+0x538>)
    1dee:	f7fe fcf5 	bl	7dc <Print::println(char const*)>
    1df2:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1df4:	497d      	ldr	r1, [pc, #500]	; (1fec <print_palette(unsigned char)+0x568>)
    1df6:	4871      	ldr	r0, [pc, #452]	; (1fbc <print_palette(unsigned char)+0x538>)
    1df8:	f7fe fcf0 	bl	7dc <Print::println(char const*)>
    1dfc:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1dfe:	497c      	ldr	r1, [pc, #496]	; (1ff0 <print_palette(unsigned char)+0x56c>)
    1e00:	486e      	ldr	r0, [pc, #440]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e02:	f7fe fceb 	bl	7dc <Print::println(char const*)>
    1e06:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1e08:	497a      	ldr	r1, [pc, #488]	; (1ff4 <print_palette(unsigned char)+0x570>)
    1e0a:	486c      	ldr	r0, [pc, #432]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e0c:	f7fe fce6 	bl	7dc <Print::println(char const*)>
    1e10:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1e12:	4979      	ldr	r1, [pc, #484]	; (1ff8 <print_palette(unsigned char)+0x574>)
    1e14:	4869      	ldr	r0, [pc, #420]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e16:	f7fe fce1 	bl	7dc <Print::println(char const*)>
    1e1a:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1e1c:	4977      	ldr	r1, [pc, #476]	; (1ffc <print_palette(unsigned char)+0x578>)
    1e1e:	4867      	ldr	r0, [pc, #412]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e20:	f7fe fcdc 	bl	7dc <Print::println(char const*)>
    1e24:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1e26:	4976      	ldr	r1, [pc, #472]	; (2000 <print_palette(unsigned char)+0x57c>)
    1e28:	4864      	ldr	r0, [pc, #400]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e2a:	f7fe fcd7 	bl	7dc <Print::println(char const*)>
    1e2e:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1e30:	4974      	ldr	r1, [pc, #464]	; (2004 <print_palette(unsigned char)+0x580>)
    1e32:	4862      	ldr	r0, [pc, #392]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e34:	f7fe fcd2 	bl	7dc <Print::println(char const*)>
    1e38:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1e3a:	4973      	ldr	r1, [pc, #460]	; (2008 <print_palette(unsigned char)+0x584>)
    1e3c:	485f      	ldr	r0, [pc, #380]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e3e:	f7fe fccd 	bl	7dc <Print::println(char const*)>
    1e42:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1e44:	4971      	ldr	r1, [pc, #452]	; (200c <print_palette(unsigned char)+0x588>)
    1e46:	485d      	ldr	r0, [pc, #372]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e48:	f7fe fcc8 	bl	7dc <Print::println(char const*)>
    1e4c:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1e4e:	4970      	ldr	r1, [pc, #448]	; (2010 <print_palette(unsigned char)+0x58c>)
    1e50:	485a      	ldr	r0, [pc, #360]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e52:	f7fe fcc3 	bl	7dc <Print::println(char const*)>
    1e56:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1e58:	496e      	ldr	r1, [pc, #440]	; (2014 <print_palette(unsigned char)+0x590>)
    1e5a:	4858      	ldr	r0, [pc, #352]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e5c:	f7fe fcbe 	bl	7dc <Print::println(char const*)>
    1e60:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1e62:	496d      	ldr	r1, [pc, #436]	; (2018 <print_palette(unsigned char)+0x594>)
    1e64:	4855      	ldr	r0, [pc, #340]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e66:	f7fe fcb9 	bl	7dc <Print::println(char const*)>
    1e6a:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1e6c:	496b      	ldr	r1, [pc, #428]	; (201c <print_palette(unsigned char)+0x598>)
    1e6e:	4853      	ldr	r0, [pc, #332]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e70:	f7fe fcb4 	bl	7dc <Print::println(char const*)>
    1e74:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1e76:	496a      	ldr	r1, [pc, #424]	; (2020 <print_palette(unsigned char)+0x59c>)
    1e78:	4850      	ldr	r0, [pc, #320]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e7a:	f7fe fcaf 	bl	7dc <Print::println(char const*)>
    1e7e:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1e80:	4968      	ldr	r1, [pc, #416]	; (2024 <print_palette(unsigned char)+0x5a0>)
    1e82:	484e      	ldr	r0, [pc, #312]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e84:	f7fe fcaa 	bl	7dc <Print::println(char const*)>
    1e88:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1e8a:	4967      	ldr	r1, [pc, #412]	; (2028 <print_palette(unsigned char)+0x5a4>)
    1e8c:	484b      	ldr	r0, [pc, #300]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e8e:	f7fe fca5 	bl	7dc <Print::println(char const*)>
    1e92:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1e94:	4965      	ldr	r1, [pc, #404]	; (202c <print_palette(unsigned char)+0x5a8>)
    1e96:	4849      	ldr	r0, [pc, #292]	; (1fbc <print_palette(unsigned char)+0x538>)
    1e98:	f7fe fca0 	bl	7dc <Print::println(char const*)>
    1e9c:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1e9e:	4964      	ldr	r1, [pc, #400]	; (2030 <print_palette(unsigned char)+0x5ac>)
    1ea0:	4846      	ldr	r0, [pc, #280]	; (1fbc <print_palette(unsigned char)+0x538>)
    1ea2:	f7fe fc9b 	bl	7dc <Print::println(char const*)>
    1ea6:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1ea8:	4962      	ldr	r1, [pc, #392]	; (2034 <print_palette(unsigned char)+0x5b0>)
    1eaa:	4844      	ldr	r0, [pc, #272]	; (1fbc <print_palette(unsigned char)+0x538>)
    1eac:	f7fe fc96 	bl	7dc <Print::println(char const*)>
    1eb0:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1eb2:	4961      	ldr	r1, [pc, #388]	; (2038 <print_palette(unsigned char)+0x5b4>)
    1eb4:	4841      	ldr	r0, [pc, #260]	; (1fbc <print_palette(unsigned char)+0x538>)
    1eb6:	f7fe fc91 	bl	7dc <Print::println(char const*)>
    1eba:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1ebc:	495f      	ldr	r1, [pc, #380]	; (203c <print_palette(unsigned char)+0x5b8>)
    1ebe:	483f      	ldr	r0, [pc, #252]	; (1fbc <print_palette(unsigned char)+0x538>)
    1ec0:	f7fe fc8c 	bl	7dc <Print::println(char const*)>
    1ec4:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1ec6:	495e      	ldr	r1, [pc, #376]	; (2040 <print_palette(unsigned char)+0x5bc>)
    1ec8:	483c      	ldr	r0, [pc, #240]	; (1fbc <print_palette(unsigned char)+0x538>)
    1eca:	f7fe fc87 	bl	7dc <Print::println(char const*)>
    1ece:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1ed0:	495c      	ldr	r1, [pc, #368]	; (2044 <print_palette(unsigned char)+0x5c0>)
    1ed2:	483a      	ldr	r0, [pc, #232]	; (1fbc <print_palette(unsigned char)+0x538>)
    1ed4:	f7fe fc82 	bl	7dc <Print::println(char const*)>
    1ed8:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1eda:	495b      	ldr	r1, [pc, #364]	; (2048 <print_palette(unsigned char)+0x5c4>)
    1edc:	4837      	ldr	r0, [pc, #220]	; (1fbc <print_palette(unsigned char)+0x538>)
    1ede:	f7fe fc7d 	bl	7dc <Print::println(char const*)>
    1ee2:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1ee4:	4959      	ldr	r1, [pc, #356]	; (204c <print_palette(unsigned char)+0x5c8>)
    1ee6:	4835      	ldr	r0, [pc, #212]	; (1fbc <print_palette(unsigned char)+0x538>)
    1ee8:	f7fe fc78 	bl	7dc <Print::println(char const*)>
    1eec:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    1eee:	4958      	ldr	r1, [pc, #352]	; (2050 <print_palette(unsigned char)+0x5cc>)
    1ef0:	4832      	ldr	r0, [pc, #200]	; (1fbc <print_palette(unsigned char)+0x538>)
    1ef2:	f7fe fc73 	bl	7dc <Print::println(char const*)>
    1ef6:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    1ef8:	4956      	ldr	r1, [pc, #344]	; (2054 <print_palette(unsigned char)+0x5d0>)
    1efa:	4830      	ldr	r0, [pc, #192]	; (1fbc <print_palette(unsigned char)+0x538>)
    1efc:	f7fe fc6e 	bl	7dc <Print::println(char const*)>
    1f00:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    1f02:	4955      	ldr	r1, [pc, #340]	; (2058 <print_palette(unsigned char)+0x5d4>)
    1f04:	482d      	ldr	r0, [pc, #180]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f06:	f7fe fc69 	bl	7dc <Print::println(char const*)>
    1f0a:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    1f0c:	4953      	ldr	r1, [pc, #332]	; (205c <print_palette(unsigned char)+0x5d8>)
    1f0e:	482b      	ldr	r0, [pc, #172]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f10:	f7fe fc64 	bl	7dc <Print::println(char const*)>
    1f14:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    1f16:	4952      	ldr	r1, [pc, #328]	; (2060 <print_palette(unsigned char)+0x5dc>)
    1f18:	4828      	ldr	r0, [pc, #160]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f1a:	f7fe fc5f 	bl	7dc <Print::println(char const*)>
    1f1e:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    1f20:	4950      	ldr	r1, [pc, #320]	; (2064 <print_palette(unsigned char)+0x5e0>)
    1f22:	4826      	ldr	r0, [pc, #152]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f24:	f7fe fc5a 	bl	7dc <Print::println(char const*)>
    1f28:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    1f2a:	494f      	ldr	r1, [pc, #316]	; (2068 <print_palette(unsigned char)+0x5e4>)
    1f2c:	4823      	ldr	r0, [pc, #140]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f2e:	f7fe fc55 	bl	7dc <Print::println(char const*)>
    1f32:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    1f34:	494d      	ldr	r1, [pc, #308]	; (206c <print_palette(unsigned char)+0x5e8>)
    1f36:	4821      	ldr	r0, [pc, #132]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f38:	f7fe fc50 	bl	7dc <Print::println(char const*)>
    1f3c:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    1f3e:	494c      	ldr	r1, [pc, #304]	; (2070 <print_palette(unsigned char)+0x5ec>)
    1f40:	481e      	ldr	r0, [pc, #120]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f42:	f7fe fc4b 	bl	7dc <Print::println(char const*)>
    1f46:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    1f48:	494a      	ldr	r1, [pc, #296]	; (2074 <print_palette(unsigned char)+0x5f0>)
    1f4a:	481c      	ldr	r0, [pc, #112]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f4c:	f7fe fc46 	bl	7dc <Print::println(char const*)>
    1f50:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    1f52:	4949      	ldr	r1, [pc, #292]	; (2078 <print_palette(unsigned char)+0x5f4>)
    1f54:	4819      	ldr	r0, [pc, #100]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f56:	f7fe fc41 	bl	7dc <Print::println(char const*)>
    1f5a:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    1f5c:	4947      	ldr	r1, [pc, #284]	; (207c <print_palette(unsigned char)+0x5f8>)
    1f5e:	4817      	ldr	r0, [pc, #92]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f60:	f7fe fc3c 	bl	7dc <Print::println(char const*)>
    1f64:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    1f66:	4946      	ldr	r1, [pc, #280]	; (2080 <print_palette(unsigned char)+0x5fc>)
    1f68:	4814      	ldr	r0, [pc, #80]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f6a:	f7fe fc37 	bl	7dc <Print::println(char const*)>
    1f6e:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    1f70:	4944      	ldr	r1, [pc, #272]	; (2084 <print_palette(unsigned char)+0x600>)
    1f72:	4812      	ldr	r0, [pc, #72]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f74:	f7fe fc32 	bl	7dc <Print::println(char const*)>
    1f78:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    1f7a:	4943      	ldr	r1, [pc, #268]	; (2088 <print_palette(unsigned char)+0x604>)
    1f7c:	480f      	ldr	r0, [pc, #60]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f7e:	f7fe fc2d 	bl	7dc <Print::println(char const*)>
    1f82:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    1f84:	4941      	ldr	r1, [pc, #260]	; (208c <print_palette(unsigned char)+0x608>)
    1f86:	480d      	ldr	r0, [pc, #52]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f88:	f7fe fc28 	bl	7dc <Print::println(char const*)>
    1f8c:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    1f8e:	4940      	ldr	r1, [pc, #256]	; (2090 <print_palette(unsigned char)+0x60c>)
    1f90:	480a      	ldr	r0, [pc, #40]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f92:	f7fe fc23 	bl	7dc <Print::println(char const*)>
    1f96:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    1f98:	493e      	ldr	r1, [pc, #248]	; (2094 <print_palette(unsigned char)+0x610>)
    1f9a:	4808      	ldr	r0, [pc, #32]	; (1fbc <print_palette(unsigned char)+0x538>)
    1f9c:	f7fe fc1e 	bl	7dc <Print::println(char const*)>
    1fa0:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    1fa2:	493d      	ldr	r1, [pc, #244]	; (2098 <print_palette(unsigned char)+0x614>)
    1fa4:	4805      	ldr	r0, [pc, #20]	; (1fbc <print_palette(unsigned char)+0x538>)
    1fa6:	f7fe fc19 	bl	7dc <Print::println(char const*)>
    1faa:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    1fac:	493b      	ldr	r1, [pc, #236]	; (209c <print_palette(unsigned char)+0x618>)
    1fae:	4803      	ldr	r0, [pc, #12]	; (1fbc <print_palette(unsigned char)+0x538>)
    1fb0:	f7fe fc14 	bl	7dc <Print::println(char const*)>
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	bf00      	nop
    1fb8:	0000cd28 	.word	0x0000cd28
    1fbc:	1fff8764 	.word	0x1fff8764
    1fc0:	0000cd18 	.word	0x0000cd18
    1fc4:	0000cd0c 	.word	0x0000cd0c
    1fc8:	0000cd00 	.word	0x0000cd00
    1fcc:	0000ccf4 	.word	0x0000ccf4
    1fd0:	0000cce0 	.word	0x0000cce0
    1fd4:	0000ccd4 	.word	0x0000ccd4
    1fd8:	0000ccc8 	.word	0x0000ccc8
    1fdc:	0000ccbc 	.word	0x0000ccbc
    1fe0:	0000cca4 	.word	0x0000cca4
    1fe4:	0000cc9c 	.word	0x0000cc9c
    1fe8:	0000cd34 	.word	0x0000cd34
    1fec:	0000cc90 	.word	0x0000cc90
    1ff0:	0000cc84 	.word	0x0000cc84
    1ff4:	0000cc70 	.word	0x0000cc70
    1ff8:	0000cc5c 	.word	0x0000cc5c
    1ffc:	0000cc4c 	.word	0x0000cc4c
    2000:	0000cc40 	.word	0x0000cc40
    2004:	0000cc34 	.word	0x0000cc34
    2008:	0000cc28 	.word	0x0000cc28
    200c:	0000cc1c 	.word	0x0000cc1c
    2010:	0000cc10 	.word	0x0000cc10
    2014:	0000cc04 	.word	0x0000cc04
    2018:	0000cbf8 	.word	0x0000cbf8
    201c:	0000cbec 	.word	0x0000cbec
    2020:	0000cbe0 	.word	0x0000cbe0
    2024:	0000cbd4 	.word	0x0000cbd4
    2028:	0000cbc8 	.word	0x0000cbc8
    202c:	0000cbb8 	.word	0x0000cbb8
    2030:	0000cba4 	.word	0x0000cba4
    2034:	0000cb88 	.word	0x0000cb88
    2038:	0000cb70 	.word	0x0000cb70
    203c:	0000cb54 	.word	0x0000cb54
    2040:	0000cb44 	.word	0x0000cb44
    2044:	0000cb34 	.word	0x0000cb34
    2048:	0000cb20 	.word	0x0000cb20
    204c:	0000cb10 	.word	0x0000cb10
    2050:	0000cb08 	.word	0x0000cb08
    2054:	0000cb00 	.word	0x0000cb00
    2058:	0000cae8 	.word	0x0000cae8
    205c:	0000cad8 	.word	0x0000cad8
    2060:	0000cad0 	.word	0x0000cad0
    2064:	0000cac0 	.word	0x0000cac0
    2068:	0000cab0 	.word	0x0000cab0
    206c:	0000caa0 	.word	0x0000caa0
    2070:	0000ca8c 	.word	0x0000ca8c
    2074:	0000ca78 	.word	0x0000ca78
    2078:	0000ca64 	.word	0x0000ca64
    207c:	0000ca4c 	.word	0x0000ca4c
    2080:	0000ca34 	.word	0x0000ca34
    2084:	0000ca24 	.word	0x0000ca24
    2088:	0000ca10 	.word	0x0000ca10
    208c:	0000c9fc 	.word	0x0000c9fc
    2090:	0000c9ec 	.word	0x0000c9ec
    2094:	0000c9e0 	.word	0x0000c9e0
    2098:	0000c9d4 	.word	0x0000c9d4
    209c:	0000cf7c 	.word	0x0000cf7c

000020a0 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    20a0:	b538      	push	{r3, r4, r5, lr}
    20a2:	2100      	movs	r1, #0
    20a4:	4604      	mov	r4, r0
    20a6:	48ac      	ldr	r0, [pc, #688]	; (2358 <LEDDebug(LEDStruct&)+0x2b8>)
    20a8:	f008 fdb8 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20ac:	48ab      	ldr	r0, [pc, #684]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    20ae:	f008 ffb9 	bl	b024 <Print::println()>
    20b2:	2122      	movs	r1, #34	; 0x22
    20b4:	48aa      	ldr	r0, [pc, #680]	; (2360 <LEDDebug(LEDStruct&)+0x2c0>)
    20b6:	f008 fdb1 	bl	ac1c <usb_serial_write>
    20ba:	48a8      	ldr	r0, [pc, #672]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    20bc:	f008 ffb2 	bl	b024 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    20c0:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    20c4:	2b00      	cmp	r3, #0
    20c6:	f000 809c 	beq.w	2202 <LEDDebug(LEDStruct&)+0x162>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    20ca:	2b01      	cmp	r3, #1
    20cc:	f000 84a3 	beq.w	2a16 <LEDDebug(LEDStruct&)+0x976>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    20d0:	2b02      	cmp	r3, #2
    20d2:	f000 84a6 	beq.w	2a22 <LEDDebug(LEDStruct&)+0x982>
    20d6:	2113      	movs	r1, #19
    20d8:	48a2      	ldr	r0, [pc, #648]	; (2364 <LEDDebug(LEDStruct&)+0x2c4>)
    20da:	f008 fd9f 	bl	ac1c <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    20de:	4ba2      	ldr	r3, [pc, #648]	; (2368 <LEDDebug(LEDStruct&)+0x2c8>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    20e0:	489e      	ldr	r0, [pc, #632]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    20e2:	7819      	ldrb	r1, [r3, #0]
    20e4:	220a      	movs	r2, #10
    20e6:	2300      	movs	r3, #0
    20e8:	f008 ffac 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    20ec:	2103      	movs	r1, #3
    20ee:	489f      	ldr	r0, [pc, #636]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    20f0:	f008 fd94 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20f4:	4899      	ldr	r0, [pc, #612]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    20f6:	f008 ff95 	bl	b024 <Print::println()>
    20fa:	2113      	movs	r1, #19
    20fc:	489c      	ldr	r0, [pc, #624]	; (2370 <LEDDebug(LEDStruct&)+0x2d0>)
    20fe:	f008 fd8d 	bl	ac1c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2102:	2300      	movs	r3, #0
    2104:	220a      	movs	r2, #10
    2106:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    210a:	4894      	ldr	r0, [pc, #592]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    210c:	f008 ff9a 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2110:	2103      	movs	r1, #3
    2112:	4896      	ldr	r0, [pc, #600]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2114:	f008 fd82 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2118:	4890      	ldr	r0, [pc, #576]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    211a:	f008 ff83 	bl	b024 <Print::println()>
    211e:	2111      	movs	r1, #17
    2120:	4894      	ldr	r0, [pc, #592]	; (2374 <LEDDebug(LEDStruct&)+0x2d4>)
    2122:	f008 fd7b 	bl	ac1c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2126:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    212a:	488c      	ldr	r0, [pc, #560]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    212c:	f008 ffca 	bl	b0c4 <Print::print(long)>
    2130:	2103      	movs	r1, #3
    2132:	488e      	ldr	r0, [pc, #568]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2134:	f008 fd72 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2138:	4888      	ldr	r0, [pc, #544]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    213a:	f008 ff73 	bl	b024 <Print::println()>
    213e:	2114      	movs	r1, #20
    2140:	488d      	ldr	r0, [pc, #564]	; (2378 <LEDDebug(LEDStruct&)+0x2d8>)
    2142:	f008 fd6b 	bl	ac1c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2146:	2300      	movs	r3, #0
    2148:	220a      	movs	r2, #10
    214a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    214e:	4883      	ldr	r0, [pc, #524]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2150:	f008 ff78 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2154:	2103      	movs	r1, #3
    2156:	4885      	ldr	r0, [pc, #532]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2158:	f008 fd60 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    215c:	487f      	ldr	r0, [pc, #508]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    215e:	f008 ff61 	bl	b024 <Print::println()>
    2162:	2115      	movs	r1, #21
    2164:	4885      	ldr	r0, [pc, #532]	; (237c <LEDDebug(LEDStruct&)+0x2dc>)
    2166:	f008 fd59 	bl	ac1c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    216a:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    216e:	487b      	ldr	r0, [pc, #492]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2170:	f008 ffa8 	bl	b0c4 <Print::print(long)>
    2174:	2103      	movs	r1, #3
    2176:	487d      	ldr	r0, [pc, #500]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2178:	f008 fd50 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    217c:	4877      	ldr	r0, [pc, #476]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    217e:	f008 ff51 	bl	b024 <Print::println()>
    2182:	2111      	movs	r1, #17
    2184:	487e      	ldr	r0, [pc, #504]	; (2380 <LEDDebug(LEDStruct&)+0x2e0>)
    2186:	f008 fd49 	bl	ac1c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    218a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    218e:	4873      	ldr	r0, [pc, #460]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2190:	f008 ff98 	bl	b0c4 <Print::print(long)>
    2194:	2103      	movs	r1, #3
    2196:	4875      	ldr	r0, [pc, #468]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2198:	f008 fd40 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    219c:	486f      	ldr	r0, [pc, #444]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    219e:	f008 ff41 	bl	b024 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    21a2:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    21a6:	bb3b      	cbnz	r3, 21f8 <LEDDebug(LEDStruct&)+0x158>
    21a8:	2122      	movs	r1, #34	; 0x22
    21aa:	486d      	ldr	r0, [pc, #436]	; (2360 <LEDDebug(LEDStruct&)+0x2c0>)
    21ac:	f008 fd36 	bl	ac1c <usb_serial_write>
    21b0:	486a      	ldr	r0, [pc, #424]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    21b2:	f008 ff37 	bl	b024 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    21b6:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    21ba:	2b19      	cmp	r3, #25
    21bc:	f200 841e 	bhi.w	29fc <LEDDebug(LEDStruct&)+0x95c>
    21c0:	e8df f013 	tbh	[pc, r3, lsl #1]
    21c4:	041c005c 	.word	0x041c005c
    21c8:	041c041c 	.word	0x041c041c
    21cc:	00fe041c 	.word	0x00fe041c
    21d0:	041c041c 	.word	0x041c041c
    21d4:	041c0137 	.word	0x041c0137
    21d8:	041c041c 	.word	0x041c041c
    21dc:	041c041c 	.word	0x041c041c
    21e0:	0146041c 	.word	0x0146041c
    21e4:	01530151 	.word	0x01530151
    21e8:	01760155 	.word	0x01760155
    21ec:	02d00222 	.word	0x02d00222
    21f0:	0362031d 	.word	0x0362031d
    21f4:	002403c6 	.word	0x002403c6
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    21f8:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    21fc:	f7ff fc42 	bl	1a84 <print_palette(unsigned char)>
    2200:	e7d2      	b.n	21a8 <LEDDebug(LEDStruct&)+0x108>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2202:	4960      	ldr	r1, [pc, #384]	; (2384 <LEDDebug(LEDStruct&)+0x2e4>)
    2204:	4855      	ldr	r0, [pc, #340]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2206:	f7fe fae9 	bl	7dc <Print::println(char const*)>
    220a:	e764      	b.n	20d6 <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    220c:	495e      	ldr	r1, [pc, #376]	; (2388 <LEDDebug(LEDStruct&)+0x2e8>)
    220e:	4853      	ldr	r0, [pc, #332]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2210:	f7fe fae4 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2214:	495d      	ldr	r1, [pc, #372]	; (238c <LEDDebug(LEDStruct&)+0x2ec>)
    2216:	4851      	ldr	r0, [pc, #324]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2218:	f7fe fad2 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    221c:	2300      	movs	r3, #0
    221e:	220a      	movs	r2, #10
    2220:	f894 1766 	ldrb.w	r1, [r4, #1894]	; 0x766
    2224:	484d      	ldr	r0, [pc, #308]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2226:	f008 ff0d 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    222a:	4950      	ldr	r1, [pc, #320]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    222c:	484b      	ldr	r0, [pc, #300]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    222e:	f7fe fad5 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2232:	4957      	ldr	r1, [pc, #348]	; (2390 <LEDDebug(LEDStruct&)+0x2f0>)
    2234:	4849      	ldr	r0, [pc, #292]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2236:	f7fe fac3 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    223a:	2300      	movs	r3, #0
    223c:	220a      	movs	r2, #10
    223e:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2242:	4846      	ldr	r0, [pc, #280]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2244:	f008 fefe 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2248:	4948      	ldr	r1, [pc, #288]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    224a:	4844      	ldr	r0, [pc, #272]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    224c:	f7fe fac6 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2250:	4950      	ldr	r1, [pc, #320]	; (2394 <LEDDebug(LEDStruct&)+0x2f4>)
    2252:	4842      	ldr	r0, [pc, #264]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2254:	f7fe fab4 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2258:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    225c:	483f      	ldr	r0, [pc, #252]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    225e:	f008 ff31 	bl	b0c4 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2262:	4942      	ldr	r1, [pc, #264]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2264:	483d      	ldr	r0, [pc, #244]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2266:	f7fe fab9 	bl	7dc <Print::println(char const*)>
    226a:	2123      	movs	r1, #35	; 0x23
    226c:	484a      	ldr	r0, [pc, #296]	; (2398 <LEDDebug(LEDStruct&)+0x2f8>)
    226e:	f008 fcd5 	bl	ac1c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2272:	483a      	ldr	r0, [pc, #232]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    2274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2278:	f008 bed4 	b.w	b024 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("==============JUGGLE=============="); // 34 characters
    227c:	4947      	ldr	r1, [pc, #284]	; (239c <LEDDebug(LEDStruct&)+0x2fc>)
    227e:	4837      	ldr	r0, [pc, #220]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2280:	f7fe faac 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2284:	4946      	ldr	r1, [pc, #280]	; (23a0 <LEDDebug(LEDStruct&)+0x300>)
    2286:	4835      	ldr	r0, [pc, #212]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2288:	f7fe fa9a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    228c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2290:	4832      	ldr	r0, [pc, #200]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2292:	f008 ff17 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2296:	4935      	ldr	r1, [pc, #212]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2298:	4830      	ldr	r0, [pc, #192]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    229a:	f7fe fa9f 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    229e:	4941      	ldr	r1, [pc, #260]	; (23a4 <LEDDebug(LEDStruct&)+0x304>)
    22a0:	482e      	ldr	r0, [pc, #184]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22a2:	f7fe fa8d 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22a6:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    22aa:	482c      	ldr	r0, [pc, #176]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22ac:	f008 ff0a 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    22b0:	492e      	ldr	r1, [pc, #184]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    22b2:	482a      	ldr	r0, [pc, #168]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22b4:	f7fe fa92 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22b8:	493b      	ldr	r1, [pc, #236]	; (23a8 <LEDDebug(LEDStruct&)+0x308>)
    22ba:	4828      	ldr	r0, [pc, #160]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22bc:	f7fe fa80 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22c0:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    22c4:	4825      	ldr	r0, [pc, #148]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22c6:	f008 fefd 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    22ca:	4928      	ldr	r1, [pc, #160]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    22cc:	4823      	ldr	r0, [pc, #140]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22ce:	f7fe fa85 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22d2:	4936      	ldr	r1, [pc, #216]	; (23ac <LEDDebug(LEDStruct&)+0x30c>)
    22d4:	4821      	ldr	r0, [pc, #132]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22d6:	f7fe fa73 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22da:	2300      	movs	r3, #0
    22dc:	220a      	movs	r2, #10
    22de:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    22e2:	481e      	ldr	r0, [pc, #120]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22e4:	f008 feae 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    22e8:	4920      	ldr	r1, [pc, #128]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    22ea:	481c      	ldr	r0, [pc, #112]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22ec:	f7fe fa76 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22f0:	492f      	ldr	r1, [pc, #188]	; (23b0 <LEDDebug(LEDStruct&)+0x310>)
    22f2:	481a      	ldr	r0, [pc, #104]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    22f4:	f7fe fa64 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22f8:	2300      	movs	r3, #0
    22fa:	220a      	movs	r2, #10
    22fc:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2300:	4816      	ldr	r0, [pc, #88]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2302:	f008 fe9f 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2306:	4919      	ldr	r1, [pc, #100]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2308:	4814      	ldr	r0, [pc, #80]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    230a:	f7fe fa67 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    230e:	4929      	ldr	r1, [pc, #164]	; (23b4 <LEDDebug(LEDStruct&)+0x314>)
    2310:	4812      	ldr	r0, [pc, #72]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2312:	f7fe fa55 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2316:	2300      	movs	r3, #0
    2318:	220a      	movs	r2, #10
    231a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    231e:	480f      	ldr	r0, [pc, #60]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2320:	f008 fe90 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2324:	4911      	ldr	r1, [pc, #68]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2326:	480d      	ldr	r0, [pc, #52]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2328:	f7fe fa58 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    232c:	4922      	ldr	r1, [pc, #136]	; (23b8 <LEDDebug(LEDStruct&)+0x318>)
    232e:	480b      	ldr	r0, [pc, #44]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2330:	f7fe fa46 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2334:	2300      	movs	r3, #0
    2336:	220a      	movs	r2, #10
    2338:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    233c:	4807      	ldr	r0, [pc, #28]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    233e:	f008 fe81 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2342:	490a      	ldr	r1, [pc, #40]	; (236c <LEDDebug(LEDStruct&)+0x2cc>)
    2344:	4805      	ldr	r0, [pc, #20]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    2346:	f7fe fa49 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    234a:	491c      	ldr	r1, [pc, #112]	; (23bc <LEDDebug(LEDStruct&)+0x31c>)
    234c:	4803      	ldr	r0, [pc, #12]	; (235c <LEDDebug(LEDStruct&)+0x2bc>)
    234e:	f7fe fa37 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2352:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2356:	e781      	b.n	225c <LEDDebug(LEDStruct&)+0x1bc>
    2358:	0000d108 	.word	0x0000d108
    235c:	1fff8764 	.word	0x1fff8764
    2360:	0000cf94 	.word	0x0000cf94
    2364:	0000d024 	.word	0x0000d024
    2368:	1fff8722 	.word	0x1fff8722
    236c:	0000d038 	.word	0x0000d038
    2370:	0000d03c 	.word	0x0000d03c
    2374:	0000d050 	.word	0x0000d050
    2378:	0000d064 	.word	0x0000d064
    237c:	0000d07c 	.word	0x0000d07c
    2380:	0000d094 	.word	0x0000d094
    2384:	0000cfb8 	.word	0x0000cfb8
    2388:	0000d810 	.word	0x0000d810
    238c:	0000d834 	.word	0x0000d834
    2390:	0000d844 	.word	0x0000d844
    2394:	0000d860 	.word	0x0000d860
    2398:	0000d89c 	.word	0x0000d89c
    239c:	0000d0a8 	.word	0x0000d0a8
    23a0:	0000d0cc 	.word	0x0000d0cc
    23a4:	0000d0e4 	.word	0x0000d0e4
    23a8:	0000d0f8 	.word	0x0000d0f8
    23ac:	0000d10c 	.word	0x0000d10c
    23b0:	0000d120 	.word	0x0000d120
    23b4:	0000d130 	.word	0x0000d130
    23b8:	0000d140 	.word	0x0000d140
    23bc:	0000d150 	.word	0x0000d150
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    23c0:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    23c4:	2b00      	cmp	r3, #0
    23c6:	f000 8371 	beq.w	2aac <LEDDebug(LEDStruct&)+0xa0c>
			else					 { Serial.println("=======RAINBOW MARCH SPLIT========"); }
    23ca:	497a      	ldr	r1, [pc, #488]	; (25b4 <LEDDebug(LEDStruct&)+0x514>)
    23cc:	487a      	ldr	r0, [pc, #488]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    23ce:	f7fe fa05 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23d2:	497a      	ldr	r1, [pc, #488]	; (25bc <LEDDebug(LEDStruct&)+0x51c>)
    23d4:	4878      	ldr	r0, [pc, #480]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    23d6:	f7fe f9f3 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23da:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    23de:	4876      	ldr	r0, [pc, #472]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    23e0:	f008 fe70 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    23e4:	4976      	ldr	r1, [pc, #472]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    23e6:	4874      	ldr	r0, [pc, #464]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    23e8:	f7fe f9f8 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ec:	4975      	ldr	r1, [pc, #468]	; (25c4 <LEDDebug(LEDStruct&)+0x524>)
    23ee:	4872      	ldr	r0, [pc, #456]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    23f0:	f7fe f9e6 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23f4:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
    23f8:	486f      	ldr	r0, [pc, #444]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    23fa:	f008 fe63 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    23fe:	4970      	ldr	r1, [pc, #448]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    2400:	486d      	ldr	r0, [pc, #436]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2402:	f7fe f9eb 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2406:	4970      	ldr	r1, [pc, #448]	; (25c8 <LEDDebug(LEDStruct&)+0x528>)
    2408:	486b      	ldr	r0, [pc, #428]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    240a:	f7fe f9d9 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    240e:	2300      	movs	r3, #0
    2410:	220a      	movs	r2, #10
    2412:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    2416:	4868      	ldr	r0, [pc, #416]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2418:	f008 fe14 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    241c:	4968      	ldr	r1, [pc, #416]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    241e:	4866      	ldr	r0, [pc, #408]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2420:	f7fe f9dc 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2424:	4969      	ldr	r1, [pc, #420]	; (25cc <LEDDebug(LEDStruct&)+0x52c>)
    2426:	4864      	ldr	r0, [pc, #400]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2428:	f7fe f9ca 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    242c:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2430:	e034      	b.n	249c <LEDDebug(LEDStruct&)+0x3fc>
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
    2432:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2436:	3b08      	subs	r3, #8
    2438:	2b06      	cmp	r3, #6
    243a:	f200 82fc 	bhi.w	2a36 <LEDDebug(LEDStruct&)+0x996>
    243e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2442:	0374      	.short	0x0374
    2444:	02f6036f 	.word	0x02f6036f
    2448:	0365036a 	.word	0x0365036a
    244c:	035b0360 	.word	0x035b0360
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    2450:	495f      	ldr	r1, [pc, #380]	; (25d0 <LEDDebug(LEDStruct&)+0x530>)
    2452:	4859      	ldr	r0, [pc, #356]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2454:	f7fe f9c2 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2458:	4958      	ldr	r1, [pc, #352]	; (25bc <LEDDebug(LEDStruct&)+0x51c>)
    245a:	4857      	ldr	r0, [pc, #348]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    245c:	f7fe f9b0 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2460:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2464:	e6fa      	b.n	225c <LEDDebug(LEDStruct&)+0x1bc>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2466:	495b      	ldr	r1, [pc, #364]	; (25d4 <LEDDebug(LEDStruct&)+0x534>)
    2468:	e7f3      	b.n	2452 <LEDDebug(LEDStruct&)+0x3b2>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    246a:	495b      	ldr	r1, [pc, #364]	; (25d8 <LEDDebug(LEDStruct&)+0x538>)
    246c:	e7f1      	b.n	2452 <LEDDebug(LEDStruct&)+0x3b2>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    246e:	495b      	ldr	r1, [pc, #364]	; (25dc <LEDDebug(LEDStruct&)+0x53c>)
    2470:	4851      	ldr	r0, [pc, #324]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2472:	f7fe f9b3 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2476:	4951      	ldr	r1, [pc, #324]	; (25bc <LEDDebug(LEDStruct&)+0x51c>)
    2478:	484f      	ldr	r0, [pc, #316]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    247a:	f7fe f9a1 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    247e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2482:	484d      	ldr	r0, [pc, #308]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2484:	f008 fe1e 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2488:	494d      	ldr	r1, [pc, #308]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    248a:	484b      	ldr	r0, [pc, #300]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    248c:	f7fe f9a6 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2490:	4953      	ldr	r1, [pc, #332]	; (25e0 <LEDDebug(LEDStruct&)+0x540>)
    2492:	4849      	ldr	r0, [pc, #292]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2494:	f7fe f994 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2498:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    249c:	4846      	ldr	r0, [pc, #280]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    249e:	2300      	movs	r3, #0
    24a0:	220a      	movs	r2, #10
    24a2:	f008 fdcf 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    24a6:	4946      	ldr	r1, [pc, #280]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    24a8:	4843      	ldr	r0, [pc, #268]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24aa:	f7fe f997 	bl	7dc <Print::println(char const*)>
    24ae:	e6dc      	b.n	226a <LEDDebug(LEDStruct&)+0x1ca>
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    24b0:	494c      	ldr	r1, [pc, #304]	; (25e4 <LEDDebug(LEDStruct&)+0x544>)
    24b2:	4841      	ldr	r0, [pc, #260]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24b4:	f7fe f992 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24b8:	4940      	ldr	r1, [pc, #256]	; (25bc <LEDDebug(LEDStruct&)+0x51c>)
    24ba:	483f      	ldr	r0, [pc, #252]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24bc:	f7fe f980 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24c0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    24c4:	483c      	ldr	r0, [pc, #240]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24c6:	f008 fdfd 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24ca:	493d      	ldr	r1, [pc, #244]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    24cc:	483a      	ldr	r0, [pc, #232]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24ce:	f7fe f985 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24d2:	4945      	ldr	r1, [pc, #276]	; (25e8 <LEDDebug(LEDStruct&)+0x548>)
    24d4:	4838      	ldr	r0, [pc, #224]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24d6:	f7fe f973 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24da:	2300      	movs	r3, #0
    24dc:	220a      	movs	r2, #10
    24de:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    24e2:	4835      	ldr	r0, [pc, #212]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24e4:	f008 fdae 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    24e8:	4935      	ldr	r1, [pc, #212]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    24ea:	4833      	ldr	r0, [pc, #204]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24ec:	f7fe f976 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24f0:	493e      	ldr	r1, [pc, #248]	; (25ec <LEDDebug(LEDStruct&)+0x54c>)
    24f2:	4831      	ldr	r0, [pc, #196]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    24f4:	f7fe f964 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24f8:	2300      	movs	r3, #0
    24fa:	220a      	movs	r2, #10
    24fc:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2500:	482d      	ldr	r0, [pc, #180]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2502:	f008 fd9f 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2506:	492e      	ldr	r1, [pc, #184]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    2508:	482b      	ldr	r0, [pc, #172]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    250a:	f7fe f967 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    250e:	4938      	ldr	r1, [pc, #224]	; (25f0 <LEDDebug(LEDStruct&)+0x550>)
    2510:	4829      	ldr	r0, [pc, #164]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2512:	f7fe f955 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2516:	2300      	movs	r3, #0
    2518:	220a      	movs	r2, #10
    251a:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    251e:	4826      	ldr	r0, [pc, #152]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2520:	f008 fd90 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2524:	4926      	ldr	r1, [pc, #152]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    2526:	4824      	ldr	r0, [pc, #144]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2528:	f7fe f958 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    252c:	4931      	ldr	r1, [pc, #196]	; (25f4 <LEDDebug(LEDStruct&)+0x554>)
    252e:	4822      	ldr	r0, [pc, #136]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2530:	f7fe f946 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2534:	2300      	movs	r3, #0
    2536:	220a      	movs	r2, #10
    2538:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    253c:	481e      	ldr	r0, [pc, #120]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    253e:	f008 fd81 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2542:	491f      	ldr	r1, [pc, #124]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    2544:	481c      	ldr	r0, [pc, #112]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2546:	f7fe f949 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    254a:	492b      	ldr	r1, [pc, #172]	; (25f8 <LEDDebug(LEDStruct&)+0x558>)
    254c:	481a      	ldr	r0, [pc, #104]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    254e:	f7fe f937 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2552:	2300      	movs	r3, #0
    2554:	220a      	movs	r2, #10
    2556:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    255a:	4817      	ldr	r0, [pc, #92]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    255c:	f008 fd72 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2560:	4917      	ldr	r1, [pc, #92]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    2562:	4815      	ldr	r0, [pc, #84]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2564:	f7fe f93a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2568:	4924      	ldr	r1, [pc, #144]	; (25fc <LEDDebug(LEDStruct&)+0x55c>)
    256a:	4813      	ldr	r0, [pc, #76]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    256c:	f7fe f928 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2570:	2300      	movs	r3, #0
    2572:	220a      	movs	r2, #10
    2574:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2578:	480f      	ldr	r0, [pc, #60]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    257a:	f008 fd63 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    257e:	4910      	ldr	r1, [pc, #64]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    2580:	480d      	ldr	r0, [pc, #52]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2582:	f7fe f92b 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2586:	491e      	ldr	r1, [pc, #120]	; (2600 <LEDDebug(LEDStruct&)+0x560>)
    2588:	480b      	ldr	r0, [pc, #44]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    258a:	f7fe f919 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    258e:	2300      	movs	r3, #0
    2590:	220a      	movs	r2, #10
    2592:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2596:	4808      	ldr	r0, [pc, #32]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    2598:	f008 fd54 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    259c:	4908      	ldr	r1, [pc, #32]	; (25c0 <LEDDebug(LEDStruct&)+0x520>)
    259e:	4806      	ldr	r0, [pc, #24]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    25a0:	f7fe f91c 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25a4:	4917      	ldr	r1, [pc, #92]	; (2604 <LEDDebug(LEDStruct&)+0x564>)
    25a6:	4804      	ldr	r0, [pc, #16]	; (25b8 <LEDDebug(LEDStruct&)+0x518>)
    25a8:	f7fe f90a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25ac:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    25b0:	e774      	b.n	249c <LEDDebug(LEDStruct&)+0x3fc>
    25b2:	bf00      	nop
    25b4:	0000d18c 	.word	0x0000d18c
    25b8:	1fff8764 	.word	0x1fff8764
    25bc:	0000d0cc 	.word	0x0000d0cc
    25c0:	0000d038 	.word	0x0000d038
    25c4:	0000d1b0 	.word	0x0000d1b0
    25c8:	0000d1c0 	.word	0x0000d1c0
    25cc:	0000d1d0 	.word	0x0000d1d0
    25d0:	0000d354 	.word	0x0000d354
    25d4:	0000d378 	.word	0x0000d378
    25d8:	0000d39c 	.word	0x0000d39c
    25dc:	0000d3c0 	.word	0x0000d3c0
    25e0:	0000d3e4 	.word	0x0000d3e4
    25e4:	0000d4b4 	.word	0x0000d4b4
    25e8:	0000d4d8 	.word	0x0000d4d8
    25ec:	0000d4ec 	.word	0x0000d4ec
    25f0:	0000d500 	.word	0x0000d500
    25f4:	0000d514 	.word	0x0000d514
    25f8:	0000d528 	.word	0x0000d528
    25fc:	0000d53c 	.word	0x0000d53c
    2600:	0000d550 	.word	0x0000d550
    2604:	0000d564 	.word	0x0000d564
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2608:	49b2      	ldr	r1, [pc, #712]	; (28d4 <LEDDebug(LEDStruct&)+0x834>)
    260a:	48b3      	ldr	r0, [pc, #716]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    260c:	f7fe f8e6 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2610:	49b2      	ldr	r1, [pc, #712]	; (28dc <LEDDebug(LEDStruct&)+0x83c>)
    2612:	48b1      	ldr	r0, [pc, #708]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2614:	f7fe f8d4 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2618:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    261c:	48ae      	ldr	r0, [pc, #696]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    261e:	f008 fd51 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2622:	49af      	ldr	r1, [pc, #700]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2624:	48ac      	ldr	r0, [pc, #688]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2626:	f7fe f8d9 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    262a:	49ae      	ldr	r1, [pc, #696]	; (28e4 <LEDDebug(LEDStruct&)+0x844>)
    262c:	48aa      	ldr	r0, [pc, #680]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    262e:	f7fe f8c7 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2632:	2300      	movs	r3, #0
    2634:	220a      	movs	r2, #10
    2636:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    263a:	48a7      	ldr	r0, [pc, #668]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    263c:	f008 fd02 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    2640:	49a7      	ldr	r1, [pc, #668]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2642:	48a5      	ldr	r0, [pc, #660]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2644:	f7fe f8ca 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2648:	49a7      	ldr	r1, [pc, #668]	; (28e8 <LEDDebug(LEDStruct&)+0x848>)
    264a:	48a3      	ldr	r0, [pc, #652]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    264c:	f7fe f8b8 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2650:	2300      	movs	r3, #0
    2652:	220a      	movs	r2, #10
    2654:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2658:	489f      	ldr	r0, [pc, #636]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    265a:	f008 fcf3 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    265e:	49a0      	ldr	r1, [pc, #640]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2660:	489d      	ldr	r0, [pc, #628]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2662:	f7fe f8bb 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2666:	49a1      	ldr	r1, [pc, #644]	; (28ec <LEDDebug(LEDStruct&)+0x84c>)
    2668:	489b      	ldr	r0, [pc, #620]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    266a:	f7fe f8a9 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    266e:	2300      	movs	r3, #0
    2670:	220a      	movs	r2, #10
    2672:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2676:	4898      	ldr	r0, [pc, #608]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2678:	f008 fce4 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    267c:	4998      	ldr	r1, [pc, #608]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    267e:	4896      	ldr	r0, [pc, #600]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2680:	f7fe f8ac 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2684:	499a      	ldr	r1, [pc, #616]	; (28f0 <LEDDebug(LEDStruct&)+0x850>)
    2686:	4894      	ldr	r0, [pc, #592]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2688:	f7fe f89a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    268c:	2300      	movs	r3, #0
    268e:	220a      	movs	r2, #10
    2690:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2694:	4890      	ldr	r0, [pc, #576]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2696:	f008 fcd5 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    269a:	4991      	ldr	r1, [pc, #580]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    269c:	488e      	ldr	r0, [pc, #568]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    269e:	f7fe f89d 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26a2:	4994      	ldr	r1, [pc, #592]	; (28f4 <LEDDebug(LEDStruct&)+0x854>)
    26a4:	488c      	ldr	r0, [pc, #560]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26a6:	f7fe f88b 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26aa:	2300      	movs	r3, #0
    26ac:	220a      	movs	r2, #10
    26ae:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    26b2:	4889      	ldr	r0, [pc, #548]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26b4:	f008 fcc6 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    26b8:	4989      	ldr	r1, [pc, #548]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    26ba:	4887      	ldr	r0, [pc, #540]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26bc:	f7fe f88e 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26c0:	498d      	ldr	r1, [pc, #564]	; (28f8 <LEDDebug(LEDStruct&)+0x858>)
    26c2:	4885      	ldr	r0, [pc, #532]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26c4:	f7fe f87c 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26c8:	2300      	movs	r3, #0
    26ca:	220a      	movs	r2, #10
    26cc:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    26d0:	4881      	ldr	r0, [pc, #516]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26d2:	f008 fcb7 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    26d6:	4982      	ldr	r1, [pc, #520]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    26d8:	487f      	ldr	r0, [pc, #508]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26da:	f7fe f87f 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26de:	4987      	ldr	r1, [pc, #540]	; (28fc <LEDDebug(LEDStruct&)+0x85c>)
    26e0:	487d      	ldr	r0, [pc, #500]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26e2:	f7fe f86d 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26e6:	2300      	movs	r3, #0
    26e8:	220a      	movs	r2, #10
    26ea:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    26ee:	487a      	ldr	r0, [pc, #488]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26f0:	f008 fca8 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    26f4:	497a      	ldr	r1, [pc, #488]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    26f6:	4878      	ldr	r0, [pc, #480]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    26f8:	f7fe f870 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26fc:	4980      	ldr	r1, [pc, #512]	; (2900 <LEDDebug(LEDStruct&)+0x860>)
    26fe:	4876      	ldr	r0, [pc, #472]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2700:	f7fe f85e 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2704:	2300      	movs	r3, #0
    2706:	220a      	movs	r2, #10
    2708:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    270c:	4872      	ldr	r0, [pc, #456]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    270e:	f008 fc99 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    2712:	4973      	ldr	r1, [pc, #460]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2714:	4870      	ldr	r0, [pc, #448]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2716:	f7fe f861 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    271a:	497a      	ldr	r1, [pc, #488]	; (2904 <LEDDebug(LEDStruct&)+0x864>)
    271c:	486e      	ldr	r0, [pc, #440]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    271e:	f7fe f84f 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2722:	2300      	movs	r3, #0
    2724:	220a      	movs	r2, #10
    2726:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    272a:	486b      	ldr	r0, [pc, #428]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    272c:	f008 fc8a 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j)  sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2730:	496b      	ldr	r1, [pc, #428]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2732:	4869      	ldr	r0, [pc, #420]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2734:	f7fe f852 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2738:	4973      	ldr	r1, [pc, #460]	; (2908 <LEDDebug(LEDStruct&)+0x868>)
    273a:	4867      	ldr	r0, [pc, #412]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    273c:	f7fe f840 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2740:	2300      	movs	r3, #0
    2742:	220a      	movs	r2, #10
    2744:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2748:	4863      	ldr	r0, [pc, #396]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    274a:	f008 fc7b 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    274e:	4964      	ldr	r1, [pc, #400]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2750:	4861      	ldr	r0, [pc, #388]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2752:	f7fe f843 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2756:	496d      	ldr	r1, [pc, #436]	; (290c <LEDDebug(LEDStruct&)+0x86c>)
    2758:	485f      	ldr	r0, [pc, #380]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    275a:	f7fe f831 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    275e:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2762:	e69b      	b.n	249c <LEDDebug(LEDStruct&)+0x3fc>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    2764:	496a      	ldr	r1, [pc, #424]	; (2910 <LEDDebug(LEDStruct&)+0x870>)
    2766:	485c      	ldr	r0, [pc, #368]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2768:	f7fe f838 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    276c:	4969      	ldr	r1, [pc, #420]	; (2914 <LEDDebug(LEDStruct&)+0x874>)
    276e:	485a      	ldr	r0, [pc, #360]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2770:	f7fe f826 	bl	7c0 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    2774:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2778:	2b01      	cmp	r3, #1
    277a:	f000 81db 	beq.w	2b34 <LEDDebug(LEDStruct&)+0xa94>
    277e:	f0c0 81b9 	bcc.w	2af4 <LEDDebug(LEDStruct&)+0xa54>
    2782:	2b02      	cmp	r3, #2
    2784:	d107      	bne.n	2796 <LEDDebug(LEDStruct&)+0x6f6>
    2786:	4964      	ldr	r1, [pc, #400]	; (2918 <LEDDebug(LEDStruct&)+0x878>)
    2788:	4853      	ldr	r0, [pc, #332]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    278a:	f7fe f819 	bl	7c0 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    278e:	4954      	ldr	r1, [pc, #336]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2790:	4851      	ldr	r0, [pc, #324]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2792:	f7fe f823 	bl	7dc <Print::println(char const*)>
    2796:	4961      	ldr	r1, [pc, #388]	; (291c <LEDDebug(LEDStruct&)+0x87c>)
    2798:	484f      	ldr	r0, [pc, #316]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    279a:	f7fe f811 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    279e:	2300      	movs	r3, #0
    27a0:	220a      	movs	r2, #10
    27a2:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    27a6:	484c      	ldr	r0, [pc, #304]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27a8:	f008 fc4c 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    27ac:	494c      	ldr	r1, [pc, #304]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    27ae:	484a      	ldr	r0, [pc, #296]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27b0:	f7fe f814 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27b4:	495a      	ldr	r1, [pc, #360]	; (2920 <LEDDebug(LEDStruct&)+0x880>)
    27b6:	4848      	ldr	r0, [pc, #288]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27b8:	f7fe f802 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27bc:	2300      	movs	r3, #0
    27be:	220a      	movs	r2, #10
    27c0:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    27c4:	4844      	ldr	r0, [pc, #272]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27c6:	f008 fc3d 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    27ca:	4945      	ldr	r1, [pc, #276]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    27cc:	4842      	ldr	r0, [pc, #264]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27ce:	f7fe f805 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27d2:	4954      	ldr	r1, [pc, #336]	; (2924 <LEDDebug(LEDStruct&)+0x884>)
    27d4:	4840      	ldr	r0, [pc, #256]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27d6:	f7fd fff3 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27da:	2300      	movs	r3, #0
    27dc:	220a      	movs	r2, #10
    27de:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    27e2:	483d      	ldr	r0, [pc, #244]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27e4:	f008 fc2e 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    27e8:	493d      	ldr	r1, [pc, #244]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    27ea:	483b      	ldr	r0, [pc, #236]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27ec:	f7fd fff6 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27f0:	494d      	ldr	r1, [pc, #308]	; (2928 <LEDDebug(LEDStruct&)+0x888>)
    27f2:	4839      	ldr	r0, [pc, #228]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    27f4:	f7fd ffe4 	bl	7c0 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    27f8:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    27fc:	e64e      	b.n	249c <LEDDebug(LEDStruct&)+0x3fc>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    27fe:	494b      	ldr	r1, [pc, #300]	; (292c <LEDDebug(LEDStruct&)+0x88c>)
    2800:	4835      	ldr	r0, [pc, #212]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2802:	f7fd ffeb 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2806:	494a      	ldr	r1, [pc, #296]	; (2930 <LEDDebug(LEDStruct&)+0x890>)
    2808:	4833      	ldr	r0, [pc, #204]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    280a:	f7fd ffd9 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    280e:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2812:	4831      	ldr	r0, [pc, #196]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2814:	f008 fc56 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2818:	4931      	ldr	r1, [pc, #196]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    281a:	482f      	ldr	r0, [pc, #188]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    281c:	f7fd ffde 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2820:	4944      	ldr	r1, [pc, #272]	; (2934 <LEDDebug(LEDStruct&)+0x894>)
    2822:	482d      	ldr	r0, [pc, #180]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2824:	f7fd ffcc 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2828:	2300      	movs	r3, #0
    282a:	220a      	movs	r2, #10
    282c:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    2830:	4829      	ldr	r0, [pc, #164]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2832:	f008 fc07 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    2836:	492a      	ldr	r1, [pc, #168]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2838:	4827      	ldr	r0, [pc, #156]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    283a:	f7fd ffcf 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    283e:	493e      	ldr	r1, [pc, #248]	; (2938 <LEDDebug(LEDStruct&)+0x898>)
    2840:	4825      	ldr	r0, [pc, #148]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2842:	f7fd ffbd 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2846:	2300      	movs	r3, #0
    2848:	220a      	movs	r2, #10
    284a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    284e:	4822      	ldr	r0, [pc, #136]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2850:	f008 fbf8 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2854:	4922      	ldr	r1, [pc, #136]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2856:	4820      	ldr	r0, [pc, #128]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2858:	f7fd ffc0 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    285c:	4937      	ldr	r1, [pc, #220]	; (293c <LEDDebug(LEDStruct&)+0x89c>)
    285e:	481e      	ldr	r0, [pc, #120]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2860:	f7fd ffae 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2864:	2300      	movs	r3, #0
    2866:	220a      	movs	r2, #10
    2868:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    286c:	481a      	ldr	r0, [pc, #104]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    286e:	f008 fbe9 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2872:	491b      	ldr	r1, [pc, #108]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    2874:	4818      	ldr	r0, [pc, #96]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2876:	f7fd ffb1 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    287a:	4931      	ldr	r1, [pc, #196]	; (2940 <LEDDebug(LEDStruct&)+0x8a0>)
    287c:	4816      	ldr	r0, [pc, #88]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    287e:	f7fd ff9f 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2882:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2886:	e609      	b.n	249c <LEDDebug(LEDStruct&)+0x3fc>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2888:	492e      	ldr	r1, [pc, #184]	; (2944 <LEDDebug(LEDStruct&)+0x8a4>)
    288a:	4813      	ldr	r0, [pc, #76]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    288c:	f7fd ffa6 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2890:	4912      	ldr	r1, [pc, #72]	; (28dc <LEDDebug(LEDStruct&)+0x83c>)
    2892:	4811      	ldr	r0, [pc, #68]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    2894:	f7fd ff94 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2898:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    289c:	480e      	ldr	r0, [pc, #56]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    289e:	f008 fc11 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    28a2:	490f      	ldr	r1, [pc, #60]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    28a4:	480c      	ldr	r0, [pc, #48]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    28a6:	f7fd ff99 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28aa:	4927      	ldr	r1, [pc, #156]	; (2948 <LEDDebug(LEDStruct&)+0x8a8>)
    28ac:	480a      	ldr	r0, [pc, #40]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    28ae:	f7fd ff87 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    28b2:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    28b6:	4808      	ldr	r0, [pc, #32]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    28b8:	f008 fc04 	bl	b0c4 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    28bc:	4908      	ldr	r1, [pc, #32]	; (28e0 <LEDDebug(LEDStruct&)+0x840>)
    28be:	4806      	ldr	r0, [pc, #24]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    28c0:	f7fd ff8c 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28c4:	4921      	ldr	r1, [pc, #132]	; (294c <LEDDebug(LEDStruct&)+0x8ac>)
    28c6:	4804      	ldr	r0, [pc, #16]	; (28d8 <LEDDebug(LEDStruct&)+0x838>)
    28c8:	f7fd ff7a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    28cc:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    28d0:	e4c4      	b.n	225c <LEDDebug(LEDStruct&)+0x1bc>
    28d2:	bf00      	nop
    28d4:	0000d578 	.word	0x0000d578
    28d8:	1fff8764 	.word	0x1fff8764
    28dc:	0000d0cc 	.word	0x0000d0cc
    28e0:	0000d038 	.word	0x0000d038
    28e4:	0000d59c 	.word	0x0000d59c
    28e8:	0000d5b0 	.word	0x0000d5b0
    28ec:	0000d5c4 	.word	0x0000d5c4
    28f0:	0000d5d8 	.word	0x0000d5d8
    28f4:	0000d5ec 	.word	0x0000d5ec
    28f8:	0000d600 	.word	0x0000d600
    28fc:	0000d614 	.word	0x0000d614
    2900:	0000d628 	.word	0x0000d628
    2904:	0000d63c 	.word	0x0000d63c
    2908:	0000d650 	.word	0x0000d650
    290c:	0000d664 	.word	0x0000d664
    2910:	0000d3fc 	.word	0x0000d3fc
    2914:	0000d420 	.word	0x0000d420
    2918:	0000d434 	.word	0x0000d434
    291c:	0000d450 	.word	0x0000d450
    2920:	0000d468 	.word	0x0000d468
    2924:	0000d480 	.word	0x0000d480
    2928:	0000d498 	.word	0x0000d498
    292c:	0000d678 	.word	0x0000d678
    2930:	0000d69c 	.word	0x0000d69c
    2934:	0000d6b4 	.word	0x0000d6b4
    2938:	0000d6c8 	.word	0x0000d6c8
    293c:	0000d6e0 	.word	0x0000d6e0
    2940:	0000d6f8 	.word	0x0000d6f8
    2944:	0000d710 	.word	0x0000d710
    2948:	0000d734 	.word	0x0000d734
    294c:	0000d74c 	.word	0x0000d74c
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2950:	497b      	ldr	r1, [pc, #492]	; (2b40 <LEDDebug(LEDStruct&)+0xaa0>)
    2952:	487c      	ldr	r0, [pc, #496]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2954:	f7fd ff42 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2958:	497b      	ldr	r1, [pc, #492]	; (2b48 <LEDDebug(LEDStruct&)+0xaa8>)
    295a:	487a      	ldr	r0, [pc, #488]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    295c:	f7fd ff30 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2960:	2300      	movs	r3, #0
    2962:	220a      	movs	r2, #10
    2964:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2968:	4876      	ldr	r0, [pc, #472]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    296a:	f008 fb6b 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    296e:	4977      	ldr	r1, [pc, #476]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    2970:	4874      	ldr	r0, [pc, #464]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2972:	f7fd ff33 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2976:	4976      	ldr	r1, [pc, #472]	; (2b50 <LEDDebug(LEDStruct&)+0xab0>)
    2978:	4872      	ldr	r0, [pc, #456]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    297a:	f7fd ff21 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    297e:	2300      	movs	r3, #0
    2980:	220a      	movs	r2, #10
    2982:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    2986:	486f      	ldr	r0, [pc, #444]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2988:	f008 fb5c 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    298c:	496f      	ldr	r1, [pc, #444]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    298e:	486d      	ldr	r0, [pc, #436]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2990:	f7fd ff24 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2994:	496f      	ldr	r1, [pc, #444]	; (2b54 <LEDDebug(LEDStruct&)+0xab4>)
    2996:	486b      	ldr	r0, [pc, #428]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2998:	f7fd ff12 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    299c:	2300      	movs	r3, #0
    299e:	220a      	movs	r2, #10
    29a0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    29a4:	4867      	ldr	r0, [pc, #412]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29a6:	f008 fb4d 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    29aa:	4968      	ldr	r1, [pc, #416]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    29ac:	4865      	ldr	r0, [pc, #404]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29ae:	f7fd ff15 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b2:	4969      	ldr	r1, [pc, #420]	; (2b58 <LEDDebug(LEDStruct&)+0xab8>)
    29b4:	4863      	ldr	r0, [pc, #396]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29b6:	f7fd ff03 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29ba:	2300      	movs	r3, #0
    29bc:	220a      	movs	r2, #10
    29be:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    29c2:	4860      	ldr	r0, [pc, #384]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29c4:	f008 fb3e 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    29c8:	4960      	ldr	r1, [pc, #384]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    29ca:	485e      	ldr	r0, [pc, #376]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29cc:	f7fd ff06 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29d0:	4962      	ldr	r1, [pc, #392]	; (2b5c <LEDDebug(LEDStruct&)+0xabc>)
    29d2:	485c      	ldr	r0, [pc, #368]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29d4:	f7fd fef4 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29d8:	2300      	movs	r3, #0
    29da:	220a      	movs	r2, #10
    29dc:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    29e0:	4858      	ldr	r0, [pc, #352]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29e2:	f008 fb2f 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    29e6:	4959      	ldr	r1, [pc, #356]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    29e8:	4856      	ldr	r0, [pc, #344]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29ea:	f7fd fef7 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29ee:	495c      	ldr	r1, [pc, #368]	; (2b60 <LEDDebug(LEDStruct&)+0xac0>)
    29f0:	4854      	ldr	r0, [pc, #336]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    29f2:	f7fd fee5 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29f6:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    29fa:	e42f      	b.n	225c <LEDDebug(LEDStruct&)+0x1bc>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    29fc:	4959      	ldr	r1, [pc, #356]	; (2b64 <LEDDebug(LEDStruct&)+0xac4>)
    29fe:	4851      	ldr	r0, [pc, #324]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a00:	f7fd feec 	bl	7dc <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2a04:	4958      	ldr	r1, [pc, #352]	; (2b68 <LEDDebug(LEDStruct&)+0xac8>)
    2a06:	484f      	ldr	r0, [pc, #316]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a08:	f7fd fee8 	bl	7dc <Print::println(char const*)>
			Serial.println("");
    2a0c:	4955      	ldr	r1, [pc, #340]	; (2b64 <LEDDebug(LEDStruct&)+0xac4>)
    2a0e:	484d      	ldr	r0, [pc, #308]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a10:	f7fd fee4 	bl	7dc <Print::println(char const*)>
			break;
    2a14:	e429      	b.n	226a <LEDDebug(LEDStruct&)+0x1ca>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2a16:	4955      	ldr	r1, [pc, #340]	; (2b6c <LEDDebug(LEDStruct&)+0xacc>)
    2a18:	484a      	ldr	r0, [pc, #296]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a1a:	f7fd fedf 	bl	7dc <Print::println(char const*)>
    2a1e:	f7ff bb5a 	b.w	20d6 <LEDDebug(LEDStruct&)+0x36>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2a22:	4953      	ldr	r1, [pc, #332]	; (2b70 <LEDDebug(LEDStruct&)+0xad0>)
    2a24:	4847      	ldr	r0, [pc, #284]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a26:	f7fd fed9 	bl	7dc <Print::println(char const*)>
    2a2a:	f7ff bb54 	b.w	20d6 <LEDDebug(LEDStruct&)+0x36>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2a2e:	4951      	ldr	r1, [pc, #324]	; (2b74 <LEDDebug(LEDStruct&)+0xad4>)
    2a30:	4844      	ldr	r0, [pc, #272]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a32:	f7fd fed3 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a36:	4950      	ldr	r1, [pc, #320]	; (2b78 <LEDDebug(LEDStruct&)+0xad8>)
    2a38:	4842      	ldr	r0, [pc, #264]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a3a:	f7fd fec1 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a3e:	2300      	movs	r3, #0
    2a40:	220a      	movs	r2, #10
    2a42:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    2a46:	483f      	ldr	r0, [pc, #252]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a48:	f008 fafc 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;

			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2a4c:	493f      	ldr	r1, [pc, #252]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    2a4e:	483d      	ldr	r0, [pc, #244]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a50:	f7fd fec4 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a54:	4949      	ldr	r1, [pc, #292]	; (2b7c <LEDDebug(LEDStruct&)+0xadc>)
    2a56:	483b      	ldr	r0, [pc, #236]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a58:	f7fd feb2 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a5c:	2300      	movs	r3, #0
    2a5e:	220a      	movs	r2, #10
    2a60:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2a64:	4837      	ldr	r0, [pc, #220]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a66:	f008 faed 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2a6a:	4938      	ldr	r1, [pc, #224]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    2a6c:	4835      	ldr	r0, [pc, #212]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a6e:	f7fd feb5 	bl	7dc <Print::println(char const*)>
			if (!leds.fire_sync) {
    2a72:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    2a76:	b1f5      	cbz	r5, 2ab6 <LEDDebug(LEDStruct&)+0xa16>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a78:	4941      	ldr	r1, [pc, #260]	; (2b80 <LEDDebug(LEDStruct&)+0xae0>)
    2a7a:	4832      	ldr	r0, [pc, #200]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a7c:	f7fd fea0 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a80:	f894 1317 	ldrb.w	r1, [r4, #791]	; 0x317
    2a84:	482f      	ldr	r0, [pc, #188]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a86:	f008 fb1d 	bl	b0c4 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2a8a:	4930      	ldr	r1, [pc, #192]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    2a8c:	482d      	ldr	r0, [pc, #180]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2a8e:	f7fd fea5 	bl	7dc <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2a92:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2a96:	3b0d      	subs	r3, #13
    2a98:	2b01      	cmp	r3, #1
    2a9a:	f63f abe6 	bhi.w	226a <LEDDebug(LEDStruct&)+0x1ca>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a9e:	4939      	ldr	r1, [pc, #228]	; (2b84 <LEDDebug(LEDStruct&)+0xae4>)
    2aa0:	4828      	ldr	r0, [pc, #160]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2aa2:	f7fd fe8d 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2aa6:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    2aaa:	e4f7      	b.n	249c <LEDDebug(LEDStruct&)+0x3fc>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2aac:	4936      	ldr	r1, [pc, #216]	; (2b88 <LEDDebug(LEDStruct&)+0xae8>)
    2aae:	4825      	ldr	r0, [pc, #148]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2ab0:	f7fd fe94 	bl	7dc <Print::println(char const*)>
    2ab4:	e48d      	b.n	23d2 <LEDDebug(LEDStruct&)+0x332>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ab6:	4935      	ldr	r1, [pc, #212]	; (2b8c <LEDDebug(LEDStruct&)+0xaec>)
    2ab8:	4822      	ldr	r0, [pc, #136]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2aba:	f7fd fe81 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2abe:	462b      	mov	r3, r5
    2ac0:	220a      	movs	r2, #10
    2ac2:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2ac6:	481f      	ldr	r0, [pc, #124]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2ac8:	f008 fabc 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2acc:	491f      	ldr	r1, [pc, #124]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    2ace:	481d      	ldr	r0, [pc, #116]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2ad0:	f7fd fe84 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ad4:	492e      	ldr	r1, [pc, #184]	; (2b90 <LEDDebug(LEDStruct&)+0xaf0>)
    2ad6:	481b      	ldr	r0, [pc, #108]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2ad8:	f7fd fe72 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2adc:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2ae0:	4818      	ldr	r0, [pc, #96]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2ae2:	462b      	mov	r3, r5
    2ae4:	220a      	movs	r2, #10
    2ae6:	f008 faad 	bl	b044 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2aea:	4918      	ldr	r1, [pc, #96]	; (2b4c <LEDDebug(LEDStruct&)+0xaac>)
    2aec:	4815      	ldr	r0, [pc, #84]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2aee:	f7fd fe75 	bl	7dc <Print::println(char const*)>
    2af2:	e7c1      	b.n	2a78 <LEDDebug(LEDStruct&)+0x9d8>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2af4:	4927      	ldr	r1, [pc, #156]	; (2b94 <LEDDebug(LEDStruct&)+0xaf4>)
    2af6:	e647      	b.n	2788 <LEDDebug(LEDStruct&)+0x6e8>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2af8:	4927      	ldr	r1, [pc, #156]	; (2b98 <LEDDebug(LEDStruct&)+0xaf8>)
    2afa:	4812      	ldr	r0, [pc, #72]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2afc:	f7fd fe6e 	bl	7dc <Print::println(char const*)>
    2b00:	e799      	b.n	2a36 <LEDDebug(LEDStruct&)+0x996>
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2b02:	4926      	ldr	r1, [pc, #152]	; (2b9c <LEDDebug(LEDStruct&)+0xafc>)
    2b04:	480f      	ldr	r0, [pc, #60]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2b06:	f7fd fe69 	bl	7dc <Print::println(char const*)>
    2b0a:	e794      	b.n	2a36 <LEDDebug(LEDStruct&)+0x996>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				case FIRE_RANDOM:		Serial.println("===========FIRE RANDOM============"); break;
    2b0c:	4924      	ldr	r1, [pc, #144]	; (2ba0 <LEDDebug(LEDStruct&)+0xb00>)
    2b0e:	480d      	ldr	r0, [pc, #52]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2b10:	f7fd fe64 	bl	7dc <Print::println(char const*)>
    2b14:	e78f      	b.n	2a36 <LEDDebug(LEDStruct&)+0x996>
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2b16:	4923      	ldr	r1, [pc, #140]	; (2ba4 <LEDDebug(LEDStruct&)+0xb04>)
    2b18:	480a      	ldr	r0, [pc, #40]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2b1a:	f7fd fe5f 	bl	7dc <Print::println(char const*)>
    2b1e:	e78a      	b.n	2a36 <LEDDebug(LEDStruct&)+0x996>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2b20:	4921      	ldr	r1, [pc, #132]	; (2ba8 <LEDDebug(LEDStruct&)+0xb08>)
    2b22:	4808      	ldr	r0, [pc, #32]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2b24:	f7fd fe5a 	bl	7dc <Print::println(char const*)>
    2b28:	e785      	b.n	2a36 <LEDDebug(LEDStruct&)+0x996>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2b2a:	4920      	ldr	r1, [pc, #128]	; (2bac <LEDDebug(LEDStruct&)+0xb0c>)
    2b2c:	4805      	ldr	r0, [pc, #20]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2b2e:	f7fd fe55 	bl	7dc <Print::println(char const*)>
    2b32:	e780      	b.n	2a36 <LEDDebug(LEDStruct&)+0x996>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2b34:	491e      	ldr	r1, [pc, #120]	; (2bb0 <LEDDebug(LEDStruct&)+0xb10>)
    2b36:	4803      	ldr	r0, [pc, #12]	; (2b44 <LEDDebug(LEDStruct&)+0xaa4>)
    2b38:	f7fd fe50 	bl	7dc <Print::println(char const*)>
    2b3c:	e62b      	b.n	2796 <LEDDebug(LEDStruct&)+0x6f6>
    2b3e:	bf00      	nop
    2b40:	0000d760 	.word	0x0000d760
    2b44:	1fff8764 	.word	0x1fff8764
    2b48:	0000d784 	.word	0x0000d784
    2b4c:	0000d038 	.word	0x0000d038
    2b50:	0000d79c 	.word	0x0000d79c
    2b54:	0000d7b4 	.word	0x0000d7b4
    2b58:	0000d7cc 	.word	0x0000d7cc
    2b5c:	0000d7e4 	.word	0x0000d7e4
    2b60:	0000d7f8 	.word	0x0000d7f8
    2b64:	0000d108 	.word	0x0000d108
    2b68:	0000d878 	.word	0x0000d878
    2b6c:	0000cfdc 	.word	0x0000cfdc
    2b70:	0000d000 	.word	0x0000d000
    2b74:	0000d270 	.word	0x0000d270
    2b78:	0000d2dc 	.word	0x0000d2dc
    2b7c:	0000d2f0 	.word	0x0000d2f0
    2b80:	0000d32c 	.word	0x0000d32c
    2b84:	0000d33c 	.word	0x0000d33c
    2b88:	0000d168 	.word	0x0000d168
    2b8c:	0000d304 	.word	0x0000d304
    2b90:	0000d318 	.word	0x0000d318
    2b94:	0000d43c 	.word	0x0000d43c
    2b98:	0000d204 	.word	0x0000d204
    2b9c:	0000d1e0 	.word	0x0000d1e0
    2ba0:	0000d2b8 	.word	0x0000d2b8
    2ba4:	0000d294 	.word	0x0000d294
    2ba8:	0000d24c 	.word	0x0000d24c
    2bac:	0000d228 	.word	0x0000d228
    2bb0:	0000d444 	.word	0x0000d444

00002bb4 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2bb4:	b538      	push	{r3, r4, r5, lr}
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2bb6:	4d1c      	ldr	r5, [pc, #112]	; (2c28 <change_palette(LEDStruct&) [clone .part.11]+0x74>)
    2bb8:	4604      	mov	r4, r0
    2bba:	2134      	movs	r1, #52	; 0x34
    2bbc:	481b      	ldr	r0, [pc, #108]	; (2c2c <change_palette(LEDStruct&) [clone .part.11]+0x78>)
    2bbe:	f008 f82d 	bl	ac1c <usb_serial_write>
    2bc2:	4628      	mov	r0, r5
    2bc4:	f008 fa2e 	bl	b024 <Print::println()>
    2bc8:	2133      	movs	r1, #51	; 0x33
    2bca:	4819      	ldr	r0, [pc, #100]	; (2c30 <change_palette(LEDStruct&) [clone .part.11]+0x7c>)
    2bcc:	f008 f826 	bl	ac1c <usb_serial_write>
    2bd0:	4628      	mov	r0, r5
    2bd2:	f008 fa27 	bl	b024 <Print::println()>
    2bd6:	2133      	movs	r1, #51	; 0x33
    2bd8:	4816      	ldr	r0, [pc, #88]	; (2c34 <change_palette(LEDStruct&) [clone .part.11]+0x80>)
    2bda:	f008 f81f 	bl	ac1c <usb_serial_write>
    2bde:	4628      	mov	r0, r5
    2be0:	f008 fa20 	bl	b024 <Print::println()>
    2be4:	4814      	ldr	r0, [pc, #80]	; (2c38 <change_palette(LEDStruct&) [clone .part.11]+0x84>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2be6:	4a15      	ldr	r2, [pc, #84]	; (2c3c <change_palette(LEDStruct&) [clone .part.11]+0x88>)
    2be8:	8803      	ldrh	r3, [r0, #0]
    2bea:	7811      	ldrb	r1, [r2, #0]
		leds.target_palette = palettes[leds.palette_index];
    2bec:	4d14      	ldr	r5, [pc, #80]	; (2c40 <change_palette(LEDStruct&) [clone .part.11]+0x8c>)
    2bee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2bf2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2bf6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2bfa:	3319      	adds	r3, #25
    2bfc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2bfe:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2c02:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2c04:	fb12 f201 	smulbb	r2, r2, r1
    2c08:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c0a:	8003      	strh	r3, [r0, #0]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2c0c:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
		leds.target_palette = palettes[leds.palette_index];
    2c10:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    2c14:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
    2c18:	f7fd fe9c 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
		if (DEBUG) { print_palette(leds.palette_index); }
    2c1c:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
	}
}
    2c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2c24:	f7fe bf2e 	b.w	1a84 <print_palette(unsigned char)>
    2c28:	1fff8764 	.word	0x1fff8764
    2c2c:	0000d8c0 	.word	0x0000d8c0
    2c30:	0000d8f8 	.word	0x0000d8f8
    2c34:	0000d92c 	.word	0x0000d92c
    2c38:	1fff875a 	.word	0x1fff875a
    2c3c:	1fff874c 	.word	0x1fff874c
    2c40:	0000e438 	.word	0x0000e438

00002c44 <juggle_update(LEDStruct&)>:
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    2c44:	4b24      	ldr	r3, [pc, #144]	; (2cd8 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2c46:	4a25      	ldr	r2, [pc, #148]	; (2cdc <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    2c48:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2c4a:	2100      	movs	r1, #0
    2c4c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    2c4e:	2b07      	cmp	r3, #7
    2c50:	d809      	bhi.n	2c66 <juggle_update(LEDStruct&)+0x22>
    2c52:	e8df f003 	tbb	[pc, r3]
    2c56:	1c13      	.short	0x1c13
    2c58:	04342e25 	.word	0x04342e25
    2c5c:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    2c5e:	4b20      	ldr	r3, [pc, #128]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2c60:	881b      	ldrh	r3, [r3, #0]
    2c62:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2c66:	f7ff ba1b 	b.w	20a0 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    2c6a:	4b1d      	ldr	r3, [pc, #116]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2c6c:	881b      	ldrh	r3, [r3, #0]
    2c6e:	3300      	adds	r3, #0
    2c70:	bf18      	it	ne
    2c72:	2301      	movne	r3, #1
    2c74:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			default:	break;
	}
	LEDDebug(leds);
    2c78:	f7ff ba12 	b.w	20a0 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    2c7c:	4b18      	ldr	r3, [pc, #96]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2c7e:	881b      	ldrh	r3, [r3, #0]
    2c80:	3300      	adds	r3, #0
    2c82:	bf18      	it	ne
    2c84:	2301      	movne	r3, #1
    2c86:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2c8a:	f7ff ba09 	b.w	20a0 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    2c8e:	4b14      	ldr	r3, [pc, #80]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2c90:	881b      	ldrh	r3, [r3, #0]
    2c92:	3300      	adds	r3, #0
    2c94:	bf18      	it	ne
    2c96:	2301      	movne	r3, #1
    2c98:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2c9c:	f7ff ba00 	b.w	20a0 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
    2ca0:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2ca2:	881b      	ldrh	r3, [r3, #0]
    2ca4:	3300      	adds	r3, #0
    2ca6:	bf18      	it	ne
    2ca8:	2301      	movne	r3, #1
    2caa:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2cae:	f7ff b9f7 	b.w	20a0 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    2cb2:	4b0b      	ldr	r3, [pc, #44]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2cb4:	881b      	ldrh	r3, [r3, #0]
    2cb6:	f880 322f 	strb.w	r3, [r0, #559]	; 0x22f
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2cba:	f7ff b9f1 	b.w	20a0 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    2cbe:	4b08      	ldr	r3, [pc, #32]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2cc0:	881b      	ldrh	r3, [r3, #0]
    2cc2:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2cc6:	f7ff b9eb 	b.w	20a0 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    2cca:	4b05      	ldr	r3, [pc, #20]	; (2ce0 <juggle_update(LEDStruct&)+0x9c>)
    2ccc:	881b      	ldrh	r3, [r3, #0]
    2cce:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2cd2:	f7ff b9e5 	b.w	20a0 <LEDDebug(LEDStruct&)>
    2cd6:	bf00      	nop
    2cd8:	1fff95f2 	.word	0x1fff95f2
    2cdc:	1fff95dc 	.word	0x1fff95dc
    2ce0:	1fff95f0 	.word	0x1fff95f0

00002ce4 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2ce8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2cec:	b091      	sub	sp, #68	; 0x44
    2cee:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	f040 8096 	bne.w	2e22 <juggle(LEDStruct&)+0x13e>
    2cf6:	4dd2      	ldr	r5, [pc, #840]	; (3040 <juggle(LEDStruct&)+0x35c>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2cf8:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    2cfc:	882b      	ldrh	r3, [r5, #0]
    2cfe:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2d02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2d06:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2d0a:	3119      	adds	r1, #25
    2d0c:	b289      	uxth	r1, r1
    2d0e:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    2d12:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2d16:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2d1a:	3019      	adds	r0, #25
    2d1c:	b280      	uxth	r0, r0
    2d1e:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    2d22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2d26:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d2a:	3319      	adds	r3, #25
    2d2c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2d30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2d34:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d38:	3319      	adds	r3, #25
    2d3a:	b29b      	uxth	r3, r3
    2d3c:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    2d40:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    2d44:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2d48:	3619      	adds	r6, #25
    2d4a:	b2b6      	uxth	r6, r6
    2d4c:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    2d50:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    2d54:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2d58:	3219      	adds	r2, #25
    2d5a:	b292      	uxth	r2, r2
    2d5c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2d60:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2d64:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2d68:	f10e 0e19 	add.w	lr, lr, #25
    2d6c:	fa1f fe8e 	uxth.w	lr, lr
    2d70:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    2d74:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    2d78:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    2d7c:	f10c 0c19 	add.w	ip, ip, #25
    2d80:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d84:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d88:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d8c:	eb03 2713 	add.w	r7, r3, r3, lsr #8
    2d90:	eb06 2616 	add.w	r6, r6, r6, lsr #8

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2d94:	b2d3      	uxtb	r3, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d96:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2d9a:	b2f2      	uxtb	r2, r6
    2d9c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2da0:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2da2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2da6:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2daa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	leds.juggle_beat		 = jb;
    2dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.juggle_fade		 = jf;
    2db2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2db6:	fa1f f688 	uxth.w	r6, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2dba:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2dbe:	ea4f 18e7 	mov.w	r8, r7, asr #7
    2dc2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    2dc6:	1197      	asrs	r7, r2, #6
	leds.juggle_fade		 = jf;
    2dc8:	119a      	asrs	r2, r3, #6
    2dca:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.juggle_diff		 = jd;
    2dce:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2dd2:	f3c0 19c0 	ubfx	r9, r0, #7, #1
    2dd6:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    2dda:	f108 0001 	add.w	r0, r8, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2dde:	f1a2 0874 	sub.w	r8, r2, #116	; 0x74
    2de2:	eb06 2216 	add.w	r2, r6, r6, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2de6:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2dea:	3708      	adds	r7, #8
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2dec:	1c59      	adds	r1, r3, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2dee:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2df2:	f3cc 13c0 	ubfx	r3, ip, #7, #1
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2df6:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2df8:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
    2dfc:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    2e00:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2e04:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_fade		 = jf;
    2e08:	f884 8231 	strb.w	r8, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2e0c:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e10:	802e      	strh	r6, [r5, #0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2e12:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2e16:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2e1a:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2e1e:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    2e22:	4b88      	ldr	r3, [pc, #544]	; (3044 <juggle(LEDStruct&)+0x360>)
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	2b00      	cmp	r3, #0
    2e28:	f040 84a8 	bne.w	377c <juggle(LEDStruct&)+0xa98>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    2e2c:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    2e30:	b113      	cbz	r3, 2e38 <juggle(LEDStruct&)+0x154>
    2e32:	2300      	movs	r3, #0
    2e34:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    2e38:	2196      	movs	r1, #150	; 0x96
    2e3a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    2e3e:	4620      	mov	r0, r4
    2e40:	f005 fedc 	bl	8bfc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    2e44:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    2e48:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2e4c:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    2e50:	2900      	cmp	r1, #0
    2e52:	f040 80de 	bne.w	3012 <juggle(LEDStruct&)+0x32e>
		if (leds.juggle_phased) {
    2e56:	2f00      	cmp	r7, #0
    2e58:	f000 821f 	beq.w	329a <juggle(LEDStruct&)+0x5b6>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	f000 82ef 	beq.w	3440 <juggle(LEDStruct&)+0x75c>
    2e62:	4879      	ldr	r0, [pc, #484]	; (3048 <juggle(LEDStruct&)+0x364>)
    2e64:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2e68:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 304c <juggle(LEDStruct&)+0x368>
    2e6c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3050 <juggle(LEDStruct&)+0x36c>
    2e70:	9002      	str	r0, [sp, #8]
    2e72:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2e76:	460f      	mov	r7, r1
    2e78:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2e7c:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2e80:	9503      	str	r5, [sp, #12]
    2e82:	e05e      	b.n	2f42 <juggle(LEDStruct&)+0x25e>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2e84:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2e88:	443b      	add	r3, r7
    2e8a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e8c:	f8d9 1000 	ldr.w	r1, [r9]
    2e90:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2e92:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2e94:	9904      	ldr	r1, [sp, #16]
    2e96:	bf98      	it	ls
    2e98:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2e9a:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2e9e:	bf98      	it	ls
    2ea0:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2ea2:	fb00 f101 	mul.w	r1, r0, r1
    2ea6:	fb03 f301 	mul.w	r3, r3, r1
    2eaa:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2eac:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2eae:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2eb2:	d503      	bpl.n	2ebc <juggle(LEDStruct&)+0x1d8>
    2eb4:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2eb8:	3107      	adds	r1, #7
    2eba:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ebc:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2ebe:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ec0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2ec4:	f818 6000 	ldrb.w	r6, [r8, r0]
    2ec8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2ecc:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2ed0:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ed2:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2ed4:	bf48      	it	mi
    2ed6:	4249      	negmi	r1, r1
    2ed8:	b20e      	sxth	r6, r1
    2eda:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2ede:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2ee2:	9100      	str	r1, [sp, #0]
    2ee4:	4650      	mov	r0, sl
    2ee6:	4659      	mov	r1, fp
    2ee8:	f005 fee8 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2eec:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2ef0:	2296      	movs	r2, #150	; 0x96
    2ef2:	b29b      	uxth	r3, r3
    2ef4:	fb02 f303 	mul.w	r3, r2, r3
    2ef8:	0c1b      	lsrs	r3, r3, #16
    2efa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2efe:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2f00:	5ce2      	ldrb	r2, [r4, r3]
    2f02:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2f06:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2f0a:	54e2      	strb	r2, [r4, r3]
    2f0c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2f10:	784a      	ldrb	r2, [r1, #1]
    2f12:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2f16:	704a      	strb	r2, [r1, #1]
    2f18:	788b      	ldrb	r3, [r1, #2]
    2f1a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2f1e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2f22:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2f24:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2f28:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2f2c:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    2f30:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2f32:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2f34:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2f36:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2f38:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2f3a:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2f3e:	f240 827f 	bls.w	3440 <juggle(LEDStruct&)+0x75c>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2f42:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2f46:	2900      	cmp	r1, #0
    2f48:	d19c      	bne.n	2e84 <juggle(LEDStruct&)+0x1a0>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2f4a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2f4e:	443b      	add	r3, r7
    2f50:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f52:	f8d9 1000 	ldr.w	r1, [r9]
    2f56:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2f58:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2f5a:	9905      	ldr	r1, [sp, #20]
    2f5c:	bf98      	it	ls
    2f5e:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2f60:	f44f 708c 	mov.w	r0, #280	; 0x118
    2f64:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2f68:	bf98      	it	ls
    2f6a:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2f6c:	fb03 f301 	mul.w	r3, r3, r1
    2f70:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f72:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2f74:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f78:	d503      	bpl.n	2f82 <juggle(LEDStruct&)+0x29e>
    2f7a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2f7e:	3107      	adds	r1, #7
    2f80:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2f82:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f84:	9d02      	ldr	r5, [sp, #8]
    2f86:	f818 6000 	ldrb.w	r6, [r8, r0]
    2f8a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2f8e:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2f92:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2f96:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f98:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2f9a:	bf48      	it	mi
    2f9c:	4249      	negmi	r1, r1
    2f9e:	b20e      	sxth	r6, r1
    2fa0:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2fa4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2fa8:	9100      	str	r1, [sp, #0]
    2faa:	4650      	mov	r0, sl
    2fac:	4659      	mov	r1, fp
    2fae:	f005 fe85 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2fb2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2fb6:	b29b      	uxth	r3, r3
    2fb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fbc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2fc0:	0c1b      	lsrs	r3, r3, #16
    2fc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2fc6:	18e1      	adds	r1, r4, r3
    2fc8:	5ce2      	ldrb	r2, [r4, r3]
    2fca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2fce:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2fd2:	54e2      	strb	r2, [r4, r3]
    2fd4:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2fd8:	784a      	ldrb	r2, [r1, #1]
    2fda:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2fde:	704a      	strb	r2, [r1, #1]
    2fe0:	788b      	ldrb	r3, [r1, #2]
    2fe2:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2fe6:	fa83 f352 	uqadd8	r3, r3, r2
    2fea:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2fec:	708b      	strb	r3, [r1, #2]
    2fee:	4622      	mov	r2, r4
    2ff0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ff2:	7819      	ldrb	r1, [r3, #0]
    2ff4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2ff8:	7859      	ldrb	r1, [r3, #1]
    2ffa:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2ffe:	7899      	ldrb	r1, [r3, #2]
    3000:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3004:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    3006:	429d      	cmp	r5, r3
    3008:	f1a2 0203 	sub.w	r2, r2, #3
    300c:	d1f1      	bne.n	2ff2 <juggle(LEDStruct&)+0x30e>
    300e:	9503      	str	r5, [sp, #12]
    3010:	e788      	b.n	2f24 <juggle(LEDStruct&)+0x240>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    3012:	2f00      	cmp	r7, #0
    3014:	f000 80a7 	beq.w	3166 <juggle(LEDStruct&)+0x482>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3018:	2b00      	cmp	r3, #0
    301a:	f000 8211 	beq.w	3440 <juggle(LEDStruct&)+0x75c>
    301e:	4b0a      	ldr	r3, [pc, #40]	; (3048 <juggle(LEDStruct&)+0x364>)
    3020:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3024:	f8df 9024 	ldr.w	r9, [pc, #36]	; 304c <juggle(LEDStruct&)+0x368>
    3028:	f8df 8024 	ldr.w	r8, [pc, #36]	; 3050 <juggle(LEDStruct&)+0x36c>
    302c:	9302      	str	r3, [sp, #8]
    302e:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3032:	2700      	movs	r7, #0
    3034:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    3038:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    303c:	9503      	str	r5, [sp, #12]
    303e:	e06e      	b.n	311e <juggle(LEDStruct&)+0x43a>
    3040:	1fff875a 	.word	0x1fff875a
    3044:	1fff95dc 	.word	0x1fff95dc
    3048:	0000da90 	.word	0x0000da90
    304c:	1fffa080 	.word	0x1fffa080
    3050:	0000e5f4 	.word	0x0000e5f4
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3054:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3058:	2b00      	cmp	r3, #0
    305a:	f000 825f 	beq.w	351c <juggle(LEDStruct&)+0x838>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    305e:	f8d9 3000 	ldr.w	r3, [r9]
    3062:	9308      	str	r3, [sp, #32]
	return ret;
    3064:	9908      	ldr	r1, [sp, #32]
    3066:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    306a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    306e:	fb00 1117 	mls	r1, r0, r7, r1
    3072:	021b      	lsls	r3, r3, #8
    3074:	f44f 708c 	mov.w	r0, #280	; 0x118
    3078:	fb00 f303 	mul.w	r3, r0, r3
    307c:	fb03 f301 	mul.w	r3, r3, r1
    3080:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3084:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3088:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    308a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    308e:	d503      	bpl.n	3098 <juggle(LEDStruct&)+0x3b4>
    3090:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3094:	3107      	adds	r1, #7
    3096:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3098:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    309a:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    309c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    30a0:	f818 6000 	ldrb.w	r6, [r8, r0]
    30a4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    30a8:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    30ac:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30ae:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    30b0:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    30b4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    30b8:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    30ba:	bf48      	it	mi
    30bc:	4276      	negmi	r6, r6
    30be:	4659      	mov	r1, fp
    30c0:	4650      	mov	r0, sl
    30c2:	b236      	sxth	r6, r6
    30c4:	f005 fdfa 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    30c8:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    30cc:	b29a      	uxth	r2, r3
    30ce:	2396      	movs	r3, #150	; 0x96
    30d0:	fb03 f302 	mul.w	r3, r3, r2
    30d4:	0c1b      	lsrs	r3, r3, #16
    30d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30da:	18e1      	adds	r1, r4, r3
    30dc:	5ce2      	ldrb	r2, [r4, r3]
    30de:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    30e2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    30e6:	54e2      	strb	r2, [r4, r3]
    30e8:	784a      	ldrb	r2, [r1, #1]
    30ea:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    30ee:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    30f2:	704a      	strb	r2, [r1, #1]
    30f4:	788b      	ldrb	r3, [r1, #2]
    30f6:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    30fa:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    30fe:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3100:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3104:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3108:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    310c:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    310e:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3110:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3112:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3114:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3116:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    311a:	f240 8191 	bls.w	3440 <juggle(LEDStruct&)+0x75c>
				if (leds.this_dir) {
    311e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3122:	2b00      	cmp	r3, #0
    3124:	d196      	bne.n	3054 <juggle(LEDStruct&)+0x370>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3126:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    312a:	2b00      	cmp	r3, #0
    312c:	f000 82c0 	beq.w	36b0 <juggle(LEDStruct&)+0x9cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3130:	f8d9 3000 	ldr.w	r3, [r9]
    3134:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    3136:	990a      	ldr	r1, [sp, #40]	; 0x28
    3138:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    313c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3140:	fb00 1117 	mls	r1, r0, r7, r1
    3144:	021b      	lsls	r3, r3, #8
    3146:	f44f 708c 	mov.w	r0, #280	; 0x118
    314a:	fb00 f303 	mul.w	r3, r0, r3
    314e:	fb03 f301 	mul.w	r3, r3, r1
    3152:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3156:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    315a:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    315c:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    315e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3162:	d599      	bpl.n	3098 <juggle(LEDStruct&)+0x3b4>
    3164:	e794      	b.n	3090 <juggle(LEDStruct&)+0x3ac>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3166:	2b00      	cmp	r3, #0
    3168:	f000 816a 	beq.w	3440 <juggle(LEDStruct&)+0x75c>
    316c:	49b6      	ldr	r1, [pc, #728]	; (3448 <juggle(LEDStruct&)+0x764>)
    316e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3172:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 344c <juggle(LEDStruct&)+0x768>
    3176:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 3450 <juggle(LEDStruct&)+0x76c>
    317a:	9102      	str	r1, [sp, #8]
    317c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3180:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3184:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3188:	9503      	str	r5, [sp, #12]
    318a:	e063      	b.n	3254 <juggle(LEDStruct&)+0x570>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    318c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3190:	2900      	cmp	r1, #0
    3192:	f000 815f 	beq.w	3454 <juggle(LEDStruct&)+0x770>
    3196:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    319a:	443b      	add	r3, r7
    319c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    319e:	f8d9 1000 	ldr.w	r1, [r9]
    31a2:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    31a4:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    31a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    31a8:	bf9c      	itt	ls
    31aa:	021b      	lslls	r3, r3, #8
    31ac:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    31ae:	fb0a f101 	mul.w	r1, sl, r1
    31b2:	fb03 f301 	mul.w	r3, r3, r1
    31b6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    31ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    31be:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    31c0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    31c4:	d503      	bpl.n	31ce <juggle(LEDStruct&)+0x4ea>
    31c6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    31ca:	3107      	adds	r1, #7
    31cc:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    31ce:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    31d0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    31d2:	f3c1 0146 	ubfx	r1, r1, #1, #7
    31d6:	f818 6000 	ldrb.w	r6, [r8, r0]
    31da:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    31de:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    31e2:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    31e4:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    31e6:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    31ea:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    31ee:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    31f0:	bf48      	it	mi
    31f2:	4276      	negmi	r6, r6
    31f4:	4659      	mov	r1, fp
    31f6:	a80b      	add	r0, sp, #44	; 0x2c
    31f8:	b236      	sxth	r6, r6
    31fa:	f005 fd5f 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    31fe:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3202:	2296      	movs	r2, #150	; 0x96
    3204:	b29b      	uxth	r3, r3
    3206:	fb02 f303 	mul.w	r3, r2, r3
    320a:	0c1b      	lsrs	r3, r3, #16
    320c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3210:	18e1      	adds	r1, r4, r3
    3212:	5ce2      	ldrb	r2, [r4, r3]
    3214:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3218:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    321c:	54e2      	strb	r2, [r4, r3]
    321e:	784a      	ldrb	r2, [r1, #1]
    3220:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3224:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3228:	704a      	strb	r2, [r1, #1]
    322a:	788b      	ldrb	r3, [r1, #2]
    322c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3230:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3234:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3236:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    323a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    323e:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    3242:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3244:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3246:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3248:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    324a:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    324c:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3250:	f240 80f6 	bls.w	3440 <juggle(LEDStruct&)+0x75c>
				if (leds.this_dir) {
    3254:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    3258:	2900      	cmp	r1, #0
    325a:	d197      	bne.n	318c <juggle(LEDStruct&)+0x4a8>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    325c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3260:	2900      	cmp	r1, #0
    3262:	f000 81c0 	beq.w	35e6 <juggle(LEDStruct&)+0x902>
    3266:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    326a:	443b      	add	r3, r7
    326c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    326e:	f8d9 1000 	ldr.w	r1, [r9]
    3272:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3274:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3276:	990e      	ldr	r1, [sp, #56]	; 0x38
    3278:	bf9c      	itt	ls
    327a:	021b      	lslls	r3, r3, #8
    327c:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    327e:	fb0a f101 	mul.w	r1, sl, r1
    3282:	fb03 f301 	mul.w	r3, r3, r1
    3286:	f3c3 430e 	ubfx	r3, r3, #16, #15
    328a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    328e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3290:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3292:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3296:	d59a      	bpl.n	31ce <juggle(LEDStruct&)+0x4ea>
    3298:	e795      	b.n	31c6 <juggle(LEDStruct&)+0x4e2>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    329a:	2b00      	cmp	r3, #0
    329c:	f000 80d0 	beq.w	3440 <juggle(LEDStruct&)+0x75c>
    32a0:	4b69      	ldr	r3, [pc, #420]	; (3448 <juggle(LEDStruct&)+0x764>)
    32a2:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    32a6:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 344c <juggle(LEDStruct&)+0x768>
    32aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 3450 <juggle(LEDStruct&)+0x76c>
    32ae:	9302      	str	r3, [sp, #8]
    32b0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    32b4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    32b8:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    32bc:	9503      	str	r5, [sp, #12]
    32be:	e05a      	b.n	3376 <juggle(LEDStruct&)+0x692>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32c0:	f8d9 3000 	ldr.w	r3, [r9]
    32c4:	9306      	str	r3, [sp, #24]
	return ret;
    32c6:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32c8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    32cc:	f44f 708c 	mov.w	r0, #280	; 0x118
    32d0:	0209      	lsls	r1, r1, #8
    32d2:	fb00 f303 	mul.w	r3, r0, r3
    32d6:	fb03 f301 	mul.w	r3, r3, r1
    32da:	0379      	lsls	r1, r7, #13
    32dc:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    32e0:	b299      	uxth	r1, r3
    32e2:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    32e4:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    32e8:	d503      	bpl.n	32f2 <juggle(LEDStruct&)+0x60e>
    32ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    32ee:	3307      	adds	r3, #7
    32f0:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    32f2:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    32f4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    32f6:	f3c3 0346 	ubfx	r3, r3, #1, #7
    32fa:	f818 6000 	ldrb.w	r6, [r8, r0]
    32fe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3302:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    3306:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3308:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    330a:	bf48      	it	mi
    330c:	425b      	negmi	r3, r3
    330e:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3312:	b21e      	sxth	r6, r3
    3314:	4650      	mov	r0, sl
    3316:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    331a:	9100      	str	r1, [sp, #0]
    331c:	4659      	mov	r1, fp
    331e:	f005 fccd 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3322:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3326:	2296      	movs	r2, #150	; 0x96
    3328:	b29b      	uxth	r3, r3
    332a:	fb02 f303 	mul.w	r3, r2, r3
    332e:	0c1b      	lsrs	r3, r3, #16
    3330:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3334:	18e1      	adds	r1, r4, r3
    3336:	5ce2      	ldrb	r2, [r4, r3]
    3338:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    333c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3340:	54e2      	strb	r2, [r4, r3]
    3342:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    3346:	784a      	ldrb	r2, [r1, #1]
    3348:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    334c:	704a      	strb	r2, [r1, #1]
    334e:	788b      	ldrb	r3, [r1, #2]
    3350:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    3354:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3358:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    335a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    335e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3362:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3366:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3368:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    336a:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    336c:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    336e:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3370:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3374:	d964      	bls.n	3440 <juggle(LEDStruct&)+0x75c>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3376:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    337a:	2b00      	cmp	r3, #0
    337c:	d1a0      	bne.n	32c0 <juggle(LEDStruct&)+0x5dc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    337e:	f8d9 3000 	ldr.w	r3, [r9]
    3382:	9307      	str	r3, [sp, #28]
	return ret;
    3384:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3386:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    338a:	f44f 708c 	mov.w	r0, #280	; 0x118
    338e:	fb00 f303 	mul.w	r3, r0, r3
    3392:	0209      	lsls	r1, r1, #8
    3394:	fb03 f301 	mul.w	r3, r3, r1
    3398:	0379      	lsls	r1, r7, #13
    339a:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    339e:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33a0:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33a2:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33a6:	d503      	bpl.n	33b0 <juggle(LEDStruct&)+0x6cc>
    33a8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    33ac:	3307      	adds	r3, #7
    33ae:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33b0:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33b2:	9d02      	ldr	r5, [sp, #8]
    33b4:	f818 6000 	ldrb.w	r6, [r8, r0]
    33b8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    33bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    33c0:	fb06 0303 	mla	r3, r6, r3, r0
    33c4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    33c6:	040e      	lsls	r6, r1, #16
    33c8:	bf48      	it	mi
    33ca:	425b      	negmi	r3, r3
    33cc:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    33d0:	b21e      	sxth	r6, r3
    33d2:	4650      	mov	r0, sl
    33d4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    33d8:	9100      	str	r1, [sp, #0]
    33da:	4659      	mov	r1, fp
    33dc:	f005 fc6e 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33e0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    33e4:	b29b      	uxth	r3, r3
    33e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    33ea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    33ee:	0c1b      	lsrs	r3, r3, #16
    33f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    33f4:	18e1      	adds	r1, r4, r3
    33f6:	5ce2      	ldrb	r2, [r4, r3]
    33f8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    33fc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3400:	54e2      	strb	r2, [r4, r3]
    3402:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    3406:	784a      	ldrb	r2, [r1, #1]
    3408:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    340c:	704a      	strb	r2, [r1, #1]
    340e:	788b      	ldrb	r3, [r1, #2]
    3410:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    3414:	fa83 f352 	uqadd8	r3, r3, r2
    3418:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    341a:	708b      	strb	r3, [r1, #2]
    341c:	4622      	mov	r2, r4
    341e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3420:	7819      	ldrb	r1, [r3, #0]
    3422:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3426:	7859      	ldrb	r1, [r3, #1]
    3428:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    342c:	7899      	ldrb	r1, [r3, #2]
    342e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3432:	3303      	adds	r3, #3
    3434:	42ab      	cmp	r3, r5
    3436:	f1a2 0203 	sub.w	r2, r2, #3
    343a:	d1f1      	bne.n	3420 <juggle(LEDStruct&)+0x73c>
    343c:	9503      	str	r5, [sp, #12]
    343e:	e78c      	b.n	335a <juggle(LEDStruct&)+0x676>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    3440:	b011      	add	sp, #68	; 0x44
    3442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3446:	bf00      	nop
    3448:	0000da90 	.word	0x0000da90
    344c:	1fffa080 	.word	0x1fffa080
    3450:	0000e5f4 	.word	0x0000e5f4
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3454:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3458:	443b      	add	r3, r7
    345a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    345c:	f8d9 1000 	ldr.w	r1, [r9]
    3460:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3462:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3464:	990d      	ldr	r1, [sp, #52]	; 0x34
    3466:	bf9c      	itt	ls
    3468:	021b      	lslls	r3, r3, #8
    346a:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    346c:	fb0a f101 	mul.w	r1, sl, r1
    3470:	fb03 f301 	mul.w	r3, r3, r1
    3474:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3478:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    347c:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    347e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3482:	d503      	bpl.n	348c <juggle(LEDStruct&)+0x7a8>
    3484:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3488:	3107      	adds	r1, #7
    348a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    348c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    348e:	9d02      	ldr	r5, [sp, #8]
    3490:	f818 6000 	ldrb.w	r6, [r8, r0]
    3494:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3498:	f3c1 0146 	ubfx	r1, r1, #1, #7
    349c:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    34a0:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    34a2:	b2b6      	uxth	r6, r6
    34a4:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    34a8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34ac:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    34ae:	bf48      	it	mi
    34b0:	4276      	negmi	r6, r6
    34b2:	4659      	mov	r1, fp
    34b4:	a80b      	add	r0, sp, #44	; 0x2c
    34b6:	b236      	sxth	r6, r6
    34b8:	f005 fc00 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34bc:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    34c0:	b29b      	uxth	r3, r3
    34c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34c6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    34ca:	0c1b      	lsrs	r3, r3, #16
    34cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34d0:	18e1      	adds	r1, r4, r3
    34d2:	5ce2      	ldrb	r2, [r4, r3]
    34d4:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    34d8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34dc:	54e2      	strb	r2, [r4, r3]
    34de:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    34e2:	784a      	ldrb	r2, [r1, #1]
    34e4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34e8:	704a      	strb	r2, [r1, #1]
    34ea:	788b      	ldrb	r3, [r1, #2]
    34ec:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    34f0:	fa83 f352 	uqadd8	r3, r3, r2
    34f4:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    34f6:	708b      	strb	r3, [r1, #2]
    34f8:	4622      	mov	r2, r4
    34fa:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    34fc:	7819      	ldrb	r1, [r3, #0]
    34fe:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3502:	7859      	ldrb	r1, [r3, #1]
    3504:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3508:	7899      	ldrb	r1, [r3, #2]
    350a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    350e:	3303      	adds	r3, #3
    3510:	42ab      	cmp	r3, r5
    3512:	f1a2 0203 	sub.w	r2, r2, #3
    3516:	d1f1      	bne.n	34fc <juggle(LEDStruct&)+0x818>
    3518:	9503      	str	r5, [sp, #12]
    351a:	e68c      	b.n	3236 <juggle(LEDStruct&)+0x552>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    351c:	f8d9 3000 	ldr.w	r3, [r9]
    3520:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3522:	9909      	ldr	r1, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3524:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    352c:	fb00 1117 	mls	r1, r0, r7, r1
    3530:	021b      	lsls	r3, r3, #8
    3532:	f44f 708c 	mov.w	r0, #280	; 0x118
    3536:	fb00 f303 	mul.w	r3, r0, r3
    353a:	fb03 f301 	mul.w	r3, r3, r1
    353e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3542:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3546:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3548:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    354c:	d503      	bpl.n	3556 <juggle(LEDStruct&)+0x872>
    354e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3552:	3107      	adds	r1, #7
    3554:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3556:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3558:	9d02      	ldr	r5, [sp, #8]
    355a:	f818 6000 	ldrb.w	r6, [r8, r0]
    355e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3562:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3566:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    356a:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    356c:	b2b6      	uxth	r6, r6
    356e:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3572:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3576:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3578:	bf48      	it	mi
    357a:	4276      	negmi	r6, r6
    357c:	4659      	mov	r1, fp
    357e:	4650      	mov	r0, sl
    3580:	b236      	sxth	r6, r6
    3582:	f005 fb9b 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3586:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    358a:	b29b      	uxth	r3, r3
    358c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3590:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3594:	0c1b      	lsrs	r3, r3, #16
    3596:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    359a:	18e1      	adds	r1, r4, r3
    359c:	5ce2      	ldrb	r2, [r4, r3]
    359e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    35a2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35a6:	54e2      	strb	r2, [r4, r3]
    35a8:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    35ac:	784a      	ldrb	r2, [r1, #1]
    35ae:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35b2:	704a      	strb	r2, [r1, #1]
    35b4:	788b      	ldrb	r3, [r1, #2]
    35b6:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    35ba:	fa83 f352 	uqadd8	r3, r3, r2
    35be:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    35c0:	708b      	strb	r3, [r1, #2]
    35c2:	4622      	mov	r2, r4
    35c4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35c6:	7819      	ldrb	r1, [r3, #0]
    35c8:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35cc:	7859      	ldrb	r1, [r3, #1]
    35ce:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35d2:	7899      	ldrb	r1, [r3, #2]
    35d4:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35d8:	3303      	adds	r3, #3
    35da:	42ab      	cmp	r3, r5
    35dc:	f1a2 0203 	sub.w	r2, r2, #3
    35e0:	d1f1      	bne.n	35c6 <juggle(LEDStruct&)+0x8e2>
    35e2:	9503      	str	r5, [sp, #12]
    35e4:	e58c      	b.n	3100 <juggle(LEDStruct&)+0x41c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    35e6:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    35ea:	443b      	add	r3, r7
    35ec:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35ee:	f8d9 1000 	ldr.w	r1, [r9]
    35f2:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    35f4:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    35f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    35f8:	bf9c      	itt	ls
    35fa:	021b      	lslls	r3, r3, #8
    35fc:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    35fe:	fb0a f101 	mul.w	r1, sl, r1
    3602:	fb03 f301 	mul.w	r3, r3, r1
    3606:	f3c3 430e 	ubfx	r3, r3, #16, #15
    360a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    360e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3610:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3612:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3616:	d503      	bpl.n	3620 <juggle(LEDStruct&)+0x93c>
    3618:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    361c:	3107      	adds	r1, #7
    361e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3620:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3622:	9d02      	ldr	r5, [sp, #8]
    3624:	f818 6000 	ldrb.w	r6, [r8, r0]
    3628:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    362c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3630:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3634:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3636:	b2b6      	uxth	r6, r6
    3638:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    363c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3640:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3642:	bf48      	it	mi
    3644:	4276      	negmi	r6, r6
    3646:	4659      	mov	r1, fp
    3648:	a80b      	add	r0, sp, #44	; 0x2c
    364a:	b236      	sxth	r6, r6
    364c:	f005 fb36 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3650:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3654:	b29b      	uxth	r3, r3
    3656:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    365a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    365e:	0c1b      	lsrs	r3, r3, #16
    3660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3664:	18e1      	adds	r1, r4, r3
    3666:	5ce2      	ldrb	r2, [r4, r3]
    3668:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    366c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3670:	54e2      	strb	r2, [r4, r3]
    3672:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3676:	784a      	ldrb	r2, [r1, #1]
    3678:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    367c:	704a      	strb	r2, [r1, #1]
    367e:	788b      	ldrb	r3, [r1, #2]
    3680:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3684:	fa83 f352 	uqadd8	r3, r3, r2
    3688:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    368a:	708b      	strb	r3, [r1, #2]
    368c:	4622      	mov	r2, r4
    368e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3690:	7819      	ldrb	r1, [r3, #0]
    3692:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3696:	7859      	ldrb	r1, [r3, #1]
    3698:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    369c:	7899      	ldrb	r1, [r3, #2]
    369e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36a2:	3303      	adds	r3, #3
    36a4:	42ab      	cmp	r3, r5
    36a6:	f1a2 0203 	sub.w	r2, r2, #3
    36aa:	d1f1      	bne.n	3690 <juggle(LEDStruct&)+0x9ac>
    36ac:	9503      	str	r5, [sp, #12]
    36ae:	e5c2      	b.n	3236 <juggle(LEDStruct&)+0x552>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36b0:	f8d9 3000 	ldr.w	r3, [r9]
    36b4:	930b      	str	r3, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    36b6:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	return ret;
    36ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    36bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    36c0:	fb00 3317 	mls	r3, r0, r7, r3
    36c4:	0209      	lsls	r1, r1, #8
    36c6:	f44f 708c 	mov.w	r0, #280	; 0x118
    36ca:	fb00 f101 	mul.w	r1, r0, r1
    36ce:	fb03 f301 	mul.w	r3, r3, r1
    36d2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    36d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    36da:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    36dc:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    36de:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    36e2:	d503      	bpl.n	36ec <juggle(LEDStruct&)+0xa08>
    36e4:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    36e8:	3107      	adds	r1, #7
    36ea:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    36ec:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36ee:	9d02      	ldr	r5, [sp, #8]
    36f0:	f818 6000 	ldrb.w	r6, [r8, r0]
    36f4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    36f8:	f3c1 0146 	ubfx	r1, r1, #1, #7
    36fc:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3700:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3702:	b2b6      	uxth	r6, r6
    3704:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3708:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    370c:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    370e:	bf48      	it	mi
    3710:	4276      	negmi	r6, r6
    3712:	4659      	mov	r1, fp
    3714:	4650      	mov	r0, sl
    3716:	b236      	sxth	r6, r6
    3718:	f005 fad0 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    371c:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3720:	b29b      	uxth	r3, r3
    3722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3726:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    372a:	0c1b      	lsrs	r3, r3, #16
    372c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3730:	18e1      	adds	r1, r4, r3
    3732:	5ce2      	ldrb	r2, [r4, r3]
    3734:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3738:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    373c:	54e2      	strb	r2, [r4, r3]
    373e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    3742:	784a      	ldrb	r2, [r1, #1]
    3744:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3748:	704a      	strb	r2, [r1, #1]
    374a:	788b      	ldrb	r3, [r1, #2]
    374c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    3750:	fa83 f352 	uqadd8	r3, r3, r2
    3754:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    3756:	708b      	strb	r3, [r1, #2]
    3758:	4622      	mov	r2, r4
    375a:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    375c:	7819      	ldrb	r1, [r3, #0]
    375e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3762:	7859      	ldrb	r1, [r3, #1]
    3764:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3768:	7899      	ldrb	r1, [r3, #2]
    376a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    376e:	3303      	adds	r3, #3
    3770:	42ab      	cmp	r3, r5
    3772:	f1a2 0203 	sub.w	r2, r2, #3
    3776:	d1f1      	bne.n	375c <juggle(LEDStruct&)+0xa78>
    3778:	9503      	str	r5, [sp, #12]
    377a:	e4c1      	b.n	3100 <juggle(LEDStruct&)+0x41c>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    377c:	4620      	mov	r0, r4
    377e:	f7ff fa61 	bl	2c44 <juggle_update(LEDStruct&)>
    3782:	f7ff bb53 	b.w	2e2c <juggle(LEDStruct&)+0x148>
    3786:	bf00      	nop

00003788 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3788:	4b17      	ldr	r3, [pc, #92]	; (37e8 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    378a:	4a18      	ldr	r2, [pc, #96]	; (37ec <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    378c:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    378e:	2100      	movs	r1, #0
    3790:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3792:	2b03      	cmp	r3, #3
    3794:	d80a      	bhi.n	37ac <rainbow_update(LEDStruct&)+0x24>
    3796:	e8df f003 	tbb	[pc, r3]
    379a:	0217      	.short	0x0217
    379c:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    379e:	4b14      	ldr	r3, [pc, #80]	; (37f0 <rainbow_update(LEDStruct&)+0x68>)
    37a0:	881b      	ldrh	r3, [r3, #0]
    37a2:	3300      	adds	r3, #0
    37a4:	bf18      	it	ne
    37a6:	2301      	movne	r3, #1
    37a8:	f880 327a 	strb.w	r3, [r0, #634]	; 0x27a
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    37ac:	f7fe bc78 	b.w	20a0 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    37b0:	4b0f      	ldr	r3, [pc, #60]	; (37f0 <rainbow_update(LEDStruct&)+0x68>)
    37b2:	881b      	ldrh	r3, [r3, #0]
    37b4:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    37b8:	f7fe bc72 	b.w	20a0 <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    37bc:	4b0c      	ldr	r3, [pc, #48]	; (37f0 <rainbow_update(LEDStruct&)+0x68>)
    37be:	881b      	ldrh	r3, [r3, #0]
    37c0:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    37c4:	f7fe bc6c 	b.w	20a0 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    37c8:	4b09      	ldr	r3, [pc, #36]	; (37f0 <rainbow_update(LEDStruct&)+0x68>)
    37ca:	881b      	ldrh	r3, [r3, #0]
    37cc:	2b00      	cmp	r3, #0
    37ce:	bf14      	ite	ne
    37d0:	2301      	movne	r3, #1
    37d2:	2300      	moveq	r3, #0
    37d4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    37d8:	bf14      	ite	ne
    37da:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    37dc:	234b      	moveq	r3, #75	; 0x4b
    37de:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    37e2:	f7fe bc5d 	b.w	20a0 <LEDDebug(LEDStruct&)>
    37e6:	bf00      	nop
    37e8:	1fff95f2 	.word	0x1fff95f2
    37ec:	1fff95dc 	.word	0x1fff95dc
    37f0:	1fff95f0 	.word	0x1fff95f0

000037f4 <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    37f4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    37f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37fc:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    37fe:	2b00      	cmp	r3, #0
    3800:	d073      	beq.n	38ea <rainbow_march(LEDStruct&)+0xf6>
	if (keyboard_update) { rainbow_update(leds); }
    3802:	4b5a      	ldr	r3, [pc, #360]	; (396c <rainbow_march(LEDStruct&)+0x178>)
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	2b00      	cmp	r3, #0
    3808:	d16b      	bne.n	38e2 <rainbow_march(LEDStruct&)+0xee>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    380a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    380e:	bb43      	cbnz	r3, 3862 <rainbow_march(LEDStruct&)+0x6e>
    3810:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    3814:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    3818:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    381a:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    381e:	b2d2      	uxtb	r2, r2
    3820:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    3824:	bb4b      	cbnz	r3, 387a <rainbow_march(LEDStruct&)+0x86>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    3826:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    382a:	2b00      	cmp	r3, #0
    382c:	d151      	bne.n	38d2 <rainbow_march(LEDStruct&)+0xde>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    382e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    3832:	214b      	movs	r1, #75	; 0x4b
    3834:	4620      	mov	r0, r4
    3836:	f005 f92f 	bl	8a98 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    383a:	4620      	mov	r0, r4
    383c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3840:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3842:	7802      	ldrb	r2, [r0, #0]
    3844:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3848:	7842      	ldrb	r2, [r0, #1]
    384a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    384e:	7882      	ldrb	r2, [r0, #2]
    3850:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3854:	3003      	adds	r0, #3
    3856:	4288      	cmp	r0, r1
    3858:	f1a3 0303 	sub.w	r3, r3, #3
    385c:	d1f1      	bne.n	3842 <rainbow_march(LEDStruct&)+0x4e>
    385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3862:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    3866:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    386a:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    386c:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3870:	b2d2      	uxtb	r2, r2
    3872:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    3876:	2b00      	cmp	r3, #0
    3878:	d0d5      	beq.n	3826 <rainbow_march(LEDStruct&)+0x32>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    387a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    387e:	2125      	movs	r1, #37	; 0x25
    3880:	4620      	mov	r0, r4
    3882:	f005 f909 	bl	8a98 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    3886:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    388a:	4623      	mov	r3, r4
    388c:	4621      	mov	r1, r4
    388e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3890:	7810      	ldrb	r0, [r2, #0]
    3892:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    3896:	7850      	ldrb	r0, [r2, #1]
    3898:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    389c:	7890      	ldrb	r0, [r2, #2]
    389e:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    38a2:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    38a4:	42aa      	cmp	r2, r5
    38a6:	f1a1 0103 	sub.w	r1, r1, #3
    38aa:	d1f1      	bne.n	3890 <rainbow_march(LEDStruct&)+0x9c>
    38ac:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    38b0:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38b2:	7802      	ldrb	r2, [r0, #0]
    38b4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    38b8:	7842      	ldrb	r2, [r0, #1]
    38ba:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    38be:	7882      	ldrb	r2, [r0, #2]
    38c0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    38c4:	3003      	adds	r0, #3
    38c6:	4288      	cmp	r0, r1
    38c8:	f1a3 0303 	sub.w	r3, r3, #3
    38cc:	d1f1      	bne.n	38b2 <rainbow_march(LEDStruct&)+0xbe>
    38ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    38d2:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    38d6:	4620      	mov	r0, r4
    38d8:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    38da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    38de:	f005 b8db 	b.w	8a98 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    38e2:	4620      	mov	r0, r4
    38e4:	f7ff ff50 	bl	3788 <rainbow_update(LEDStruct&)>
    38e8:	e78f      	b.n	380a <rainbow_march(LEDStruct&)+0x16>
    38ea:	4921      	ldr	r1, [pc, #132]	; (3970 <rainbow_march(LEDStruct&)+0x17c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    38ec:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    38f0:	880b      	ldrh	r3, [r1, #0]
    38f2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    38f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    38fa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    38fe:	3319      	adds	r3, #25
    3900:	b29b      	uxth	r3, r3
    3902:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3906:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    390a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    390e:	3219      	adds	r2, #25
    3910:	b292      	uxth	r2, r2
    3912:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3916:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    391a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    391e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3922:	eb02 2212 	add.w	r2, r2, r2, lsr #8

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3926:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3928:	3519      	adds	r5, #25
    leds.rainbow_rot    = rr;
    392a:	b2d2      	uxtb	r2, r2
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    392c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3930:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    3932:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3936:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3938:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    393c:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    393e:	1212      	asrs	r2, r2, #8
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3940:	2701      	movs	r7, #1
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3942:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3946:	3201      	adds	r2, #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3948:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    394c:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    394e:	f880 61c4 	strb.w	r6, [r0, #452]	; 0x1c4

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    3952:	f880 2277 	strb.w	r2, [r0, #631]	; 0x277
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3956:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    395a:	f880 727a 	strb.w	r7, [r0, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    395e:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3962:	800d      	strh	r5, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    3964:	f7fe fb9c 	bl	20a0 <LEDDebug(LEDStruct&)>
    3968:	e74b      	b.n	3802 <rainbow_march(LEDStruct&)+0xe>
    396a:	bf00      	nop
    396c:	1fff95dc 	.word	0x1fff95dc
    3970:	1fff875a 	.word	0x1fff875a

00003974 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    3974:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3976:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    397a:	f89d 6014 	ldrb.w	r6, [sp, #20]
    397e:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    3982:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3984:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    3986:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3988:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    398a:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    398e:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    3992:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3996:	d93f      	bls.n	3a18 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
	else { leds.use_palette = 0; }
    3998:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    399a:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    399e:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    39a2:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    39a6:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    39aa:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    39ae:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    39b2:	2a00      	cmp	r2, #0
    39b4:	d13e      	bne.n	3a34 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    39b6:	234b      	movs	r3, #75	; 0x4b
    39b8:	f880 2316 	strb.w	r2, [r0, #790]	; 0x316
    39bc:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
    39c0:	4c1f      	ldr	r4, [pc, #124]	; (3a40 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xcc>)
    39c2:	8823      	ldrh	r3, [r4, #0]
    39c4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    39c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    39cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39d0:	3319      	adds	r3, #25
    39d2:	b29b      	uxth	r3, r3
    39d4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    39d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    39dc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    39e0:	3219      	adds	r2, #25
    39e2:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    39e4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    39e8:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    39ec:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    39ee:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    39f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    39f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    39f8:	3e0a      	subs	r6, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    39fa:	3d0a      	subs	r5, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    39fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    3a00:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    3a04:	eb06 2323 	add.w	r3, r6, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    3a08:	eb05 2121 	add.w	r1, r5, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    3a0c:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a10:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    3a12:	f880 127e 	strb.w	r1, [r0, #638]	; 0x27e
    3a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3a18:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    3a1c:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    3a20:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    3a24:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    3a28:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    3a2c:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    3a30:	2a00      	cmp	r2, #0
    3a32:	d0c3      	beq.n	39bc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    3a34:	2325      	movs	r3, #37	; 0x25
    3a36:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
    3a3a:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    3a3e:	e7bf      	b.n	39c0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    3a40:	1fff875a 	.word	0x1fff875a

00003a44 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3a44:	4b19      	ldr	r3, [pc, #100]	; (3aac <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    3a46:	4a1a      	ldr	r2, [pc, #104]	; (3ab0 <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    3a48:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    3a4a:	2100      	movs	r1, #0
    3a4c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3a4e:	2b05      	cmp	r3, #5
    3a50:	d808      	bhi.n	3a64 <fire_update(LEDStruct&)+0x20>
    3a52:	e8df f003 	tbb	[pc, r3]
    3a56:	150f      	.short	0x150f
    3a58:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
    3a5c:	4b15      	ldr	r3, [pc, #84]	; (3ab4 <fire_update(LEDStruct&)+0x70>)
    3a5e:	881b      	ldrh	r3, [r3, #0]
    3a60:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3a64:	f7fe bb1c 	b.w	20a0 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    3a68:	4b12      	ldr	r3, [pc, #72]	; (3ab4 <fire_update(LEDStruct&)+0x70>)
    3a6a:	881b      	ldrh	r3, [r3, #0]
    3a6c:	f880 331a 	strb.w	r3, [r0, #794]	; 0x31a
		default:	break;
	}
	LEDDebug(leds);
    3a70:	f7fe bb16 	b.w	20a0 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    3a74:	4b0f      	ldr	r3, [pc, #60]	; (3ab4 <fire_update(LEDStruct&)+0x70>)
    3a76:	881b      	ldrh	r3, [r3, #0]
    3a78:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3a7c:	f7fe bb10 	b.w	20a0 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    3a80:	4b0c      	ldr	r3, [pc, #48]	; (3ab4 <fire_update(LEDStruct&)+0x70>)
    3a82:	881b      	ldrh	r3, [r3, #0]
    3a84:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3a88:	f7fe bb0a 	b.w	20a0 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    3a8c:	4b09      	ldr	r3, [pc, #36]	; (3ab4 <fire_update(LEDStruct&)+0x70>)
    3a8e:	881b      	ldrh	r3, [r3, #0]
    3a90:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3a94:	f7fe bb04 	b.w	20a0 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    3a98:	4b06      	ldr	r3, [pc, #24]	; (3ab4 <fire_update(LEDStruct&)+0x70>)
    3a9a:	881b      	ldrh	r3, [r3, #0]
    3a9c:	3300      	adds	r3, #0
    3a9e:	bf18      	it	ne
    3aa0:	2301      	movne	r3, #1
    3aa2:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3aa6:	f7fe bafb 	b.w	20a0 <LEDDebug(LEDStruct&)>
    3aaa:	bf00      	nop
    3aac:	1fff95f2 	.word	0x1fff95f2
    3ab0:	1fff95dc 	.word	0x1fff95dc
    3ab4:	1fff95f0 	.word	0x1fff95f0

00003ab8 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    3ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3abc:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3ac0:	4dd0      	ldr	r5, [pc, #832]	; (3e04 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    3ac2:	b086      	sub	sp, #24
    3ac4:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	f000 8229 	beq.w	3f1e <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    3acc:	4bce      	ldr	r3, [pc, #824]	; (3e08 <fire(LEDStruct&)+0x350>)
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	f040 8220 	bne.w	3f16 <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3ad6:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3ada:	2b00      	cmp	r3, #0
    3adc:	f000 82d1 	beq.w	4082 <fire(LEDStruct&)+0x5ca>
    3ae0:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3ae4:	882a      	ldrh	r2, [r5, #0]
    3ae6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3aea:	004f      	lsls	r7, r1, #1
    3aec:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
    3af0:	fb97 f7f3 	sdiv	r7, r7, r3
    3af4:	3702      	adds	r7, #2
    3af6:	b2ff      	uxtb	r7, r7
    3af8:	44a6      	add	lr, r4
    3afa:	f204 267e 	addw	r6, r4, #638	; 0x27e
    3afe:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3b02:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3b06:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b0a:	3219      	adds	r2, #25
    3b0c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b0e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3b12:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3b16:	b2c9      	uxtb	r1, r1
    3b18:	fb11 f107 	smulbb	r1, r1, r7
    3b1c:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3b20:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3b24:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3b26:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3b28:	d1e9      	bne.n	3afe <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    3b2a:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    3b2e:	802a      	strh	r2, [r5, #0]
    3b30:	2e00      	cmp	r6, #0
    3b32:	f000 80f5 	beq.w	3d20 <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3b36:	f1a3 0e03 	sub.w	lr, r3, #3
    3b3a:	f1be 0f01 	cmp.w	lr, #1
    3b3e:	f04f 0c01 	mov.w	ip, #1
    3b42:	dd1a      	ble.n	3b7a <fire(LEDStruct&)+0xc2>
    3b44:	f203 207b 	addw	r0, r3, #635	; 0x27b
    3b48:	f203 277d 	addw	r7, r3, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3b4c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 3e0c <fire(LEDStruct&)+0x354>
    3b50:	4420      	add	r0, r4
    3b52:	4427      	add	r7, r4
    3b54:	f204 287f 	addw	r8, r4, #639	; 0x27f
    3b58:	7801      	ldrb	r1, [r0, #0]
    3b5a:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    3b5e:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    3b62:	fb89 a601 	smull	sl, r6, r9, r1
    3b66:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3b6a:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3b6c:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3b70:	d1f2      	bne.n	3b58 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    3b72:	f1bc 0f00 	cmp.w	ip, #0
    3b76:	f000 8102 	beq.w	3d7e <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b7a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3b7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3b82:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b86:	3219      	adds	r2, #25
    3b88:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    3b8a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    3b8e:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    3b92:	802a      	strh	r2, [r5, #0]
    3b94:	b2c9      	uxtb	r1, r1
    3b96:	428e      	cmp	r6, r1
    3b98:	489a      	ldr	r0, [pc, #616]	; (3e04 <fire(LEDStruct&)+0x34c>)
    3b9a:	d926      	bls.n	3bea <fire(LEDStruct&)+0x132>
    3b9c:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3ba0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3ba4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3ba8:	3219      	adds	r2, #25
    3baa:	b292      	uxth	r2, r2
    3bac:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3bb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3bb4:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3bb8:	3619      	adds	r6, #25
    3bba:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bbc:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    3bc0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3bc4:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3bc6:	b2d2      	uxtb	r2, r2
    3bc8:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    3bcc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    3bd0:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3bd4:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    3bd8:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bda:	8006      	strh	r6, [r0, #0]
    3bdc:	3960      	subs	r1, #96	; 0x60
    3bde:	f892 027f 	ldrb.w	r0, [r2, #639]	; 0x27f
    3be2:	fa80 f051 	uqadd8	r0, r0, r1
    3be6:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}

	if (!leds.fire_sync) {
    3bea:	f1bc 0f00 	cmp.w	ip, #0
    3bee:	d112      	bne.n	3c16 <fire(LEDStruct&)+0x15e>
    3bf0:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    3bf2:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    3bf6:	4983      	ldr	r1, [pc, #524]	; (3e04 <fire(LEDStruct&)+0x34c>)
    3bf8:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3bfc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3c00:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c04:	3219      	adds	r2, #25
    3c06:	b292      	uxth	r2, r2
    3c08:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3c0c:	b2c0      	uxtb	r0, r0
    3c0e:	4286      	cmp	r6, r0
    3c10:	802a      	strh	r2, [r5, #0]
    3c12:	f200 80cd 	bhi.w	3db0 <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    3c16:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3c1a:	2a00      	cmp	r2, #0
    3c1c:	d15f      	bne.n	3cde <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3c1e:	2b00      	cmp	r3, #0
    3c20:	f000 8226 	beq.w	4070 <fire(LEDStruct&)+0x5b8>
    3c24:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3c28:	4690      	mov	r8, r2
    3c2a:	46b9      	mov	r9, r7
    3c2c:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    3c2e:	3b01      	subs	r3, #1
    3c30:	ebc8 0503 	rsb	r5, r8, r3
    3c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3c38:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3c3c:	4630      	mov	r0, r6
    3c3e:	f005 f81b 	bl	8c78 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c42:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3c46:	5563      	strb	r3, [r4, r5]
    3c48:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3c4a:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3c4e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3c52:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3c54:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3c56:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3c5a:	f108 0801 	add.w	r8, r8, #1
    3c5e:	4543      	cmp	r3, r8
    3c60:	dce5      	bgt.n	3c2e <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3c62:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3c66:	b30a      	cbz	r2, 3cac <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    3c68:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3c6c:	2a00      	cmp	r2, #0
    3c6e:	f040 81bf 	bne.w	3ff0 <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3c72:	4690      	mov	r8, r2
    3c74:	2b00      	cmp	r3, #0
    3c76:	f000 81fe 	beq.w	4076 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    3c7a:	eb08 0503 	add.w	r5, r8, r3
    3c7e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3c82:	4630      	mov	r0, r6
    3c84:	f004 fff8 	bl	8c78 <HeatColor(unsigned char)>
    3c88:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c8c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3c90:	54e2      	strb	r2, [r4, r3]
    3c92:	4423      	add	r3, r4
        g = rhs.g;
    3c94:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    3c98:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3c9c:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    3c9e:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3ca0:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3ca4:	f108 0801 	add.w	r8, r8, #1
    3ca8:	4543      	cmp	r3, r8
    3caa:	dce6      	bgt.n	3c7a <fire(LEDStruct&)+0x1c2>
    3cac:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3cb0:	2a00      	cmp	r2, #0
    3cb2:	f000 80ad 	beq.w	3e10 <fire(LEDStruct&)+0x358>
    3cb6:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3cba:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3cbc:	781a      	ldrb	r2, [r3, #0]
    3cbe:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    3cc2:	785a      	ldrb	r2, [r3, #1]
    3cc4:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    3cc8:	789a      	ldrb	r2, [r3, #2]
    3cca:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    3cce:	3303      	adds	r3, #3
    3cd0:	4299      	cmp	r1, r3
    3cd2:	f1a4 0403 	sub.w	r4, r4, #3
    3cd6:	d1f1      	bne.n	3cbc <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3cd8:	b006      	add	sp, #24
    3cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    3cde:	2b00      	cmp	r3, #0
    3ce0:	f000 80ea 	beq.w	3eb8 <fire(LEDStruct&)+0x400>
    3ce4:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3ce8:	46b9      	mov	r9, r7
    3cea:	4625      	mov	r5, r4
    3cec:	f04f 0800 	mov.w	r8, #0
    3cf0:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    3cf2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3cf6:	4630      	mov	r0, r6
    3cf8:	f004 ffbe 	bl	8c78 <HeatColor(unsigned char)>
    3cfc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d00:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3d04:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d08:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    3d0a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3d0c:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    3d0e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3d12:	f108 0801 	add.w	r8, r8, #1
    3d16:	4543      	cmp	r3, r8
    3d18:	f105 0503 	add.w	r5, r5, #3
    3d1c:	dce9      	bgt.n	3cf2 <fire(LEDStruct&)+0x23a>
    3d1e:	e7a0      	b.n	3c62 <fire(LEDStruct&)+0x1aa>
    3d20:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    3d24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3d28:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3d2c:	fb9e fef3 	sdiv	lr, lr, r3
    3d30:	f10e 0e02 	add.w	lr, lr, #2
    3d34:	fa5f fe8e 	uxtb.w	lr, lr
    3d38:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3d3c:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3d40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3d44:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3d48:	3219      	adds	r2, #25
    3d4a:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d4c:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3d50:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3d54:	b2c9      	uxtb	r1, r1
    3d56:	fb11 f10e 	smulbb	r1, r1, lr
    3d5a:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3d5e:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3d60:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3d64:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3d66:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3d68:	dbe8      	blt.n	3d3c <fire(LEDStruct&)+0x284>
    3d6a:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3d6c:	f1a3 0e03 	sub.w	lr, r3, #3
    3d70:	f1be 0f01 	cmp.w	lr, #1
    3d74:	f04f 0c00 	mov.w	ip, #0
    3d78:	f73f aee4 	bgt.w	3b44 <fire(LEDStruct&)+0x8c>
    3d7c:	e6fd      	b.n	3b7a <fire(LEDStruct&)+0xc2>
    3d7e:	f203 26c6 	addw	r6, r3, #710	; 0x2c6
    3d82:	f503 7732 	add.w	r7, r3, #712	; 0x2c8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3d86:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3e0c <fire(LEDStruct&)+0x354>
    3d8a:	4426      	add	r6, r4
    3d8c:	4427      	add	r7, r4
    3d8e:	7831      	ldrb	r1, [r6, #0]
    3d90:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3d94:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3d98:	fb88 9001 	smull	r9, r0, r8, r1
    3d9c:	f10e 3eff 	add.w	lr, lr, #4294967295
    3da0:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3da4:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3da8:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3dac:	d1ef      	bne.n	3d8e <fire(LEDStruct&)+0x2d6>
    3dae:	e6e4      	b.n	3b7a <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3db0:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3db4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3db8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3dbc:	3219      	adds	r2, #25
    3dbe:	b292      	uxth	r2, r2
    3dc0:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3dc4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3dc8:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3dcc:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3dce:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3dd2:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3dd4:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3dd6:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3dda:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3dde:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3de0:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3de4:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3de8:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3dec:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3df0:	800d      	strh	r5, [r1, #0]
    3df2:	1201      	asrs	r1, r0, #8
    3df4:	3960      	subs	r1, #96	; 0x60
    3df6:	4630      	mov	r0, r6
    3df8:	fa80 f051 	uqadd8	r0, r0, r1
    3dfc:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
    3e00:	e709      	b.n	3c16 <fire(LEDStruct&)+0x15e>
    3e02:	bf00      	nop
    3e04:	1fff875a 	.word	0x1fff875a
    3e08:	1fff95dc 	.word	0x1fff95dc
    3e0c:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    3e10:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3e14:	2a00      	cmp	r2, #0
    3e16:	d15a      	bne.n	3ece <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3e18:	2b00      	cmp	r3, #0
    3e1a:	f43f af5d 	beq.w	3cd8 <fire(LEDStruct&)+0x220>
    3e1e:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3e22:	46b9      	mov	r9, r7
    3e24:	f04f 0800 	mov.w	r8, #0
    3e28:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    3e2a:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    3e2e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3e32:	354b      	adds	r5, #75	; 0x4b
    3e34:	4445      	add	r5, r8
    3e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3e3a:	4630      	mov	r0, r6
    3e3c:	f004 ff1c 	bl	8c78 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e40:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3e44:	5563      	strb	r3, [r4, r5]
    3e46:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3e48:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3e4c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3e50:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3e52:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3e54:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3e58:	f108 0801 	add.w	r8, r8, #1
    3e5c:	4543      	cmp	r3, r8
    3e5e:	dce4      	bgt.n	3e2a <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    3e60:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3e64:	2a00      	cmp	r2, #0
    3e66:	f43f af37 	beq.w	3cd8 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    3e6a:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3e6e:	2a00      	cmp	r2, #0
    3e70:	f000 80dd 	beq.w	402e <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    3e74:	2b00      	cmp	r3, #0
    3e76:	f43f af2f 	beq.w	3cd8 <fire(LEDStruct&)+0x220>
    3e7a:	4625      	mov	r5, r4
    3e7c:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    3e80:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3e84:	4630      	mov	r0, r6
    3e86:	f004 fef7 	bl	8c78 <HeatColor(unsigned char)>
    3e8a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e8e:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3e92:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e96:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    3e9a:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    3e9e:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    3ea2:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3ea6:	f108 0801 	add.w	r8, r8, #1
    3eaa:	4543      	cmp	r3, r8
    3eac:	f105 0503 	add.w	r5, r5, #3
    3eb0:	dce6      	bgt.n	3e80 <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3eb2:	b006      	add	sp, #24
    3eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3eb8:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	f040 80da 	bne.w	4076 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3ec2:	f1bc 0f00 	cmp.w	ip, #0
    3ec6:	f47f aef6 	bne.w	3cb6 <fire(LEDStruct&)+0x1fe>
    3eca:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3ece:	2b00      	cmp	r3, #0
    3ed0:	f43f af02 	beq.w	3cd8 <fire(LEDStruct&)+0x220>
    3ed4:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3ed8:	46b9      	mov	r9, r7
    3eda:	4625      	mov	r5, r4
    3edc:	f04f 0800 	mov.w	r8, #0
    3ee0:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    3ee2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3ee6:	4630      	mov	r0, r6
    3ee8:	f004 fec6 	bl	8c78 <HeatColor(unsigned char)>
    3eec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ef0:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3ef4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ef8:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    3efc:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    3f00:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3f04:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3f08:	f108 0801 	add.w	r8, r8, #1
    3f0c:	4543      	cmp	r3, r8
    3f0e:	f1a5 0503 	sub.w	r5, r5, #3
    3f12:	dce6      	bgt.n	3ee2 <fire(LEDStruct&)+0x42a>
    3f14:	e7a4      	b.n	3e60 <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    3f16:	4620      	mov	r0, r4
    3f18:	f7ff fd94 	bl	3a44 <fire_update(LEDStruct&)>
    3f1c:	e5db      	b.n	3ad6 <fire(LEDStruct&)+0x1e>
    3f1e:	882b      	ldrh	r3, [r5, #0]
    3f20:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3f24:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3f28:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3f2c:	3119      	adds	r1, #25
    3f2e:	b289      	uxth	r1, r1
    3f30:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3f34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3f38:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f3c:	3219      	adds	r2, #25
    3f3e:	b292      	uxth	r2, r2
    3f40:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3f44:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3f48:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3f4c:	f10e 0e19 	add.w	lr, lr, #25
    3f50:	fa1f fe8e 	uxth.w	lr, lr
    3f54:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3f58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3f5c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3f60:	3619      	adds	r6, #25
    3f62:	b2b6      	uxth	r6, r6
    3f64:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3f68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f6c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f70:	3319      	adds	r3, #25
    3f72:	b29b      	uxth	r3, r3
    3f74:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3f78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f7c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3f80:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f84:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f88:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3f8c:	b2f6      	uxtb	r6, r6
    3f8e:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f92:	3719      	adds	r7, #25
    3f94:	b2db      	uxtb	r3, r3
    3f96:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3f9a:	b2bf      	uxth	r7, r7
    3f9c:	11b6      	asrs	r6, r6, #6
    3f9e:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3fa2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3fa6:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3faa:	119b      	asrs	r3, r3, #6
    3fac:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3fb0:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3fb4:	333c      	adds	r3, #60	; 0x3c
    3fb6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3fba:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3fbe:	fa5f f883 	uxtb.w	r8, r3
    3fc2:	fa5f fc8c 	uxtb.w	ip, ip
    3fc6:	3601      	adds	r6, #1
    3fc8:	f10e 0314 	add.w	r3, lr, #20
    3fcc:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3fd0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3fd4:	f8cd c000 	str.w	ip, [sp]
    3fd8:	f8cd 8004 	str.w	r8, [sp, #4]
    3fdc:	9602      	str	r6, [sp, #8]
    3fde:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3fe2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3fe6:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fe8:	802f      	strh	r7, [r5, #0]
    3fea:	f7ff fcc3 	bl	3974 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3fee:	e56d      	b.n	3acc <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	d040      	beq.n	4076 <fire(LEDStruct&)+0x5be>
    3ff4:	4625      	mov	r5, r4
    3ff6:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    3ffa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3ffe:	4630      	mov	r0, r6
    4000:	f004 fe3a 	bl	8c78 <HeatColor(unsigned char)>
    4004:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4008:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    400c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4010:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    4014:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4018:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    401c:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    4020:	f108 0801 	add.w	r8, r8, #1
    4024:	4543      	cmp	r3, r8
    4026:	f1a5 0503 	sub.w	r5, r5, #3
    402a:	dce6      	bgt.n	3ffa <fire(LEDStruct&)+0x542>
    402c:	e63e      	b.n	3cac <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    402e:	4690      	mov	r8, r2
    4030:	2b00      	cmp	r3, #0
    4032:	f43f ae51 	beq.w	3cd8 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4036:	334b      	adds	r3, #75	; 0x4b
    4038:	ebc8 0503 	rsb	r5, r8, r3
    403c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4040:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4044:	4630      	mov	r0, r6
    4046:	f004 fe17 	bl	8c78 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    404a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    404e:	5563      	strb	r3, [r4, r5]
    4050:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4052:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4056:	f89d 2015 	ldrb.w	r2, [sp, #21]
    405a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    405c:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    405e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    4062:	f108 0801 	add.w	r8, r8, #1
    4066:	4543      	cmp	r3, r8
    4068:	dce5      	bgt.n	4036 <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    406a:	b006      	add	sp, #24
    406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4070:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    4074:	b163      	cbz	r3, 4090 <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4076:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    407a:	2b00      	cmp	r3, #0
    407c:	f47f ae1b 	bne.w	3cb6 <fire(LEDStruct&)+0x1fe>
    4080:	e62a      	b.n	3cd8 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4082:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    4086:	b10a      	cbz	r2, 408c <fire(LEDStruct&)+0x5d4>
    4088:	882a      	ldrh	r2, [r5, #0]
    408a:	e554      	b.n	3b36 <fire(LEDStruct&)+0x7e>
    408c:	882a      	ldrh	r2, [r5, #0]
    408e:	e66d      	b.n	3d6c <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4090:	f1bc 0f00 	cmp.w	ip, #0
    4094:	f47f ae0f 	bne.w	3cb6 <fire(LEDStruct&)+0x1fe>
    4098:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    409c:	e6bc      	b.n	3e18 <fire(LEDStruct&)+0x360>
    409e:	bf00      	nop

000040a0 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    40a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    40a4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    40a8:	4dd0      	ldr	r5, [pc, #832]	; (43ec <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    40aa:	b087      	sub	sp, #28
    40ac:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    40ae:	2b00      	cmp	r3, #0
    40b0:	f000 81da 	beq.w	4468 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    40b4:	4bce      	ldr	r3, [pc, #824]	; (43f0 <torch(LEDStruct&)+0x350>)
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	2b00      	cmp	r3, #0
    40ba:	f040 8242 	bne.w	4542 <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    40be:	f894 c315 	ldrb.w	ip, [r4, #789]	; 0x315
    40c2:	4663      	mov	r3, ip
    40c4:	f1bc 0f00 	cmp.w	ip, #0
    40c8:	f000 823f 	beq.w	454a <torch(LEDStruct&)+0x4aa>
    40cc:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    40d0:	882a      	ldrh	r2, [r5, #0]
    40d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    40d6:	004f      	lsls	r7, r1, #1
    40d8:	f20c 2e7e 	addw	lr, ip, #638	; 0x27e
    40dc:	fb97 f7fc 	sdiv	r7, r7, ip
    40e0:	3702      	adds	r7, #2
    40e2:	b2ff      	uxtb	r7, r7
    40e4:	44a6      	add	lr, r4
    40e6:	f204 267e 	addw	r6, r4, #638	; 0x27e
    40ea:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    40ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    40f2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    40f6:	3219      	adds	r2, #25
    40f8:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40fa:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    40fe:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4102:	b2c9      	uxtb	r1, r1
    4104:	fb11 f107 	smulbb	r1, r1, r7
    4108:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    410c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4110:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4112:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4114:	d1e9      	bne.n	40ea <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4116:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    411a:	802a      	strh	r2, [r5, #0]
    411c:	2e00      	cmp	r6, #0
    411e:	f000 816b 	beq.w	43f8 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4122:	f1ac 0703 	sub.w	r7, ip, #3
    4126:	2f01      	cmp	r7, #1
    4128:	f04f 0901 	mov.w	r9, #1
    412c:	dd1a      	ble.n	4164 <torch(LEDStruct&)+0xc4>
    412e:	f20c 207b 	addw	r0, ip, #635	; 0x27b
    4132:	f20c 267d 	addw	r6, ip, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4136:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 43f4 <torch(LEDStruct&)+0x354>
    413a:	4420      	add	r0, r4
    413c:	4426      	add	r6, r4
    413e:	f204 2e7f 	addw	lr, r4, #639	; 0x27f
    4142:	7801      	ldrb	r1, [r0, #0]
    4144:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    4148:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    414c:	fb88 ba01 	smull	fp, sl, r8, r1
    4150:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4154:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4156:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    415a:	d1f2      	bne.n	4142 <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    415c:	f1b9 0f00 	cmp.w	r9, #0
    4160:	f000 812c 	beq.w	43bc <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4164:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4168:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    416c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4170:	3219      	adds	r2, #25
    4172:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    4174:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4178:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    417c:	802a      	strh	r2, [r5, #0]
    417e:	b2c0      	uxtb	r0, r0
    4180:	4286      	cmp	r6, r0
    4182:	499a      	ldr	r1, [pc, #616]	; (43ec <torch(LEDStruct&)+0x34c>)
    4184:	d928      	bls.n	41d8 <torch(LEDStruct&)+0x138>
    4186:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    418a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    418e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4192:	3219      	adds	r2, #25
    4194:	b292      	uxth	r2, r2
    4196:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    419a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    419e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    41a2:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41a4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41a8:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41aa:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41ac:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    41b4:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    41b6:	eb04 2222 	add.w	r2, r4, r2, asr #8
    41ba:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41be:	800e      	strh	r6, [r1, #0]
    41c0:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    41c4:	f892 627f 	ldrb.w	r6, [r2, #639]	; 0x27f
    41c8:	1200      	asrs	r0, r0, #8
    41ca:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    41ce:	4630      	mov	r0, r6
    41d0:	fa80 f051 	uqadd8	r0, r0, r1
    41d4:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}
	if (!leds.fire_sync) {
    41d8:	f1b9 0f00 	cmp.w	r9, #0
    41dc:	d112      	bne.n	4204 <torch(LEDStruct&)+0x164>
    41de:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    41e0:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    41e4:	4981      	ldr	r1, [pc, #516]	; (43ec <torch(LEDStruct&)+0x34c>)
    41e6:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    41ea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    41ee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    41f2:	3219      	adds	r2, #25
    41f4:	b292      	uxth	r2, r2
    41f6:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    41fa:	b2c0      	uxtb	r0, r0
    41fc:	4286      	cmp	r6, r0
    41fe:	802a      	strh	r2, [r5, #0]
    4200:	f200 80af 	bhi.w	4362 <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4204:	f1bc 0f00 	cmp.w	ip, #0
    4208:	f000 81a4 	beq.w	4554 <torch(LEDStruct&)+0x4b4>
    420c:	f204 277e 	addw	r7, r4, #638	; 0x27e
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4210:	2600      	movs	r6, #0
    4212:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    4216:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    421a:	199d      	adds	r5, r3, r6
    421c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4220:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4224:	4648      	mov	r0, r9
    4226:	f004 fd27 	bl	8c78 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    422a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    422e:	5563      	strb	r3, [r4, r5]
    4230:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4232:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4236:	f89d 2015 	ldrb.w	r2, [sp, #21]
    423a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    423c:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    423e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    4242:	3601      	adds	r6, #1
    4244:	42b3      	cmp	r3, r6
    4246:	dce6      	bgt.n	4216 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4248:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    424c:	2e00      	cmp	r6, #0
    424e:	d175      	bne.n	433c <torch(LEDStruct&)+0x29c>
    4250:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4254:	2b00      	cmp	r3, #0
    4256:	f000 8183 	beq.w	4560 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    425a:	334a      	adds	r3, #74	; 0x4a
    425c:	1b9d      	subs	r5, r3, r6
    425e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4262:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4266:	4648      	mov	r0, r9
    4268:	f004 fd06 	bl	8c78 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    426c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4270:	5563      	strb	r3, [r4, r5]
    4272:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4274:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4278:	f89d 2015 	ldrb.w	r2, [sp, #21]
    427c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    427e:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4280:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    4284:	3601      	adds	r6, #1
    4286:	42b3      	cmp	r3, r6
    4288:	dce7      	bgt.n	425a <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    428a:	2b4b      	cmp	r3, #75	; 0x4b
    428c:	d047      	beq.n	431e <torch(LEDStruct&)+0x27e>
    428e:	f10d 0914 	add.w	r9, sp, #20
    4292:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    4296:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4298:	4626      	mov	r6, r4
    429a:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    429c:	f04f 0a01 	mov.w	sl, #1
    42a0:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    42a4:	f8cd a000 	str.w	sl, [sp]
    42a8:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    42ac:	fb98 f3f3 	sdiv	r3, r8, r3
    42b0:	441a      	add	r2, r3
    42b2:	b2d2      	uxtb	r2, r2
    42b4:	23ff      	movs	r3, #255	; 0xff
    42b6:	4659      	mov	r1, fp
    42b8:	4648      	mov	r0, r9
    42ba:	f004 fcff 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42be:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    42c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    42c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42ca:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    42cc:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    42ce:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    42d0:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    42d4:	f894 2315 	ldrb.w	r2, [r4, #789]	; 0x315
    42d8:	fb98 f8f2 	sdiv	r8, r8, r2
    42dc:	eb08 0203 	add.w	r2, r8, r3
    42e0:	b2d2      	uxtb	r2, r2
    42e2:	23ff      	movs	r3, #255	; 0xff
    42e4:	4659      	mov	r1, fp
    42e6:	f8cd a000 	str.w	sl, [sp]
    42ea:	4648      	mov	r0, r9
    42ec:	f004 fce6 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    42f0:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    42f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42f8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    42fc:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4300:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    4304:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4308:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    430c:	3501      	adds	r5, #1
    430e:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    4312:	42aa      	cmp	r2, r5
    4314:	f106 0603 	add.w	r6, r6, #3
    4318:	f1a7 0703 	sub.w	r7, r7, #3
    431c:	dcc0      	bgt.n	42a0 <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    431e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4322:	2b00      	cmp	r3, #0
    4324:	f040 8096 	bne.w	4454 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    4328:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    432c:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4330:	1a9b      	subs	r3, r3, r2
    4332:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
}
    4336:	b007      	add	sp, #28
    4338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    433c:	4621      	mov	r1, r4
    433e:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4342:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4344:	7810      	ldrb	r0, [r2, #0]
    4346:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    434a:	7850      	ldrb	r0, [r2, #1]
    434c:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    4350:	7890      	ldrb	r0, [r2, #2]
    4352:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    4356:	3203      	adds	r2, #3
    4358:	4295      	cmp	r5, r2
    435a:	f1a1 0103 	sub.w	r1, r1, #3
    435e:	d1f1      	bne.n	4344 <torch(LEDStruct&)+0x2a4>
    4360:	e793      	b.n	428a <torch(LEDStruct&)+0x1ea>
    4362:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4366:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    436a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    436e:	3219      	adds	r2, #25
    4370:	b292      	uxth	r2, r2
    4372:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4376:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    437a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    437e:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4380:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4384:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4386:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4388:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    438c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4390:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4392:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4396:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    439a:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    439e:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43a2:	800d      	strh	r5, [r1, #0]
    43a4:	1201      	asrs	r1, r0, #8
    43a6:	3960      	subs	r1, #96	; 0x60
    43a8:	4630      	mov	r0, r6
    43aa:	fa80 f051 	uqadd8	r0, r0, r1
    43ae:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    43b2:	f1bc 0f00 	cmp.w	ip, #0
    43b6:	f47f af29 	bne.w	420c <torch(LEDStruct&)+0x16c>
    43ba:	e0cf      	b.n	455c <torch(LEDStruct&)+0x4bc>
    43bc:	f20c 26c6 	addw	r6, ip, #710	; 0x2c6
    43c0:	f50c 7e32 	add.w	lr, ip, #712	; 0x2c8
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    43c4:	f8df 802c 	ldr.w	r8, [pc, #44]	; 43f4 <torch(LEDStruct&)+0x354>
    43c8:	4426      	add	r6, r4
    43ca:	44a6      	add	lr, r4
    43cc:	7831      	ldrb	r1, [r6, #0]
    43ce:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    43d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    43d6:	fb88 a001 	smull	sl, r0, r8, r1
    43da:	3f01      	subs	r7, #1
    43dc:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    43e0:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    43e2:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    43e6:	d1f1      	bne.n	43cc <torch(LEDStruct&)+0x32c>
    43e8:	e6bc      	b.n	4164 <torch(LEDStruct&)+0xc4>
    43ea:	bf00      	nop
    43ec:	1fff875a 	.word	0x1fff875a
    43f0:	1fff95dc 	.word	0x1fff95dc
    43f4:	55555556 	.word	0x55555556
    43f8:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    43fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4400:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4404:	fb9e fefc 	sdiv	lr, lr, ip
    4408:	f10e 0e02 	add.w	lr, lr, #2
    440c:	fa5f fe8e 	uxtb.w	lr, lr
    4410:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    4414:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4418:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    441c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4420:	3219      	adds	r2, #25
    4422:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4424:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4428:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    442c:	b2c9      	uxtb	r1, r1
    442e:	fb11 f10e 	smulbb	r1, r1, lr
    4432:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4436:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4438:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    443c:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    443e:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4440:	dbe8      	blt.n	4414 <torch(LEDStruct&)+0x374>
    4442:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4444:	f1ac 0703 	sub.w	r7, ip, #3
    4448:	2f01      	cmp	r7, #1
    444a:	f04f 0900 	mov.w	r9, #0
    444e:	f73f ae6e 	bgt.w	412e <torch(LEDStruct&)+0x8e>
    4452:	e687      	b.n	4164 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    4454:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4458:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    445c:	4413      	add	r3, r2
    445e:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
	else			   { leds.torch_index -= leds.torch_diff; }
}
    4462:	b007      	add	sp, #28
    4464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4468:	882b      	ldrh	r3, [r5, #0]
    446a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    446e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4472:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4476:	3119      	adds	r1, #25
    4478:	b289      	uxth	r1, r1
    447a:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    447e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4482:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4486:	3219      	adds	r2, #25
    4488:	b292      	uxth	r2, r2
    448a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    448e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4492:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4496:	f10e 0e19 	add.w	lr, lr, #25
    449a:	fa1f fe8e 	uxth.w	lr, lr
    449e:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    44a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    44a6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    44aa:	3619      	adds	r6, #25
    44ac:	b2b6      	uxth	r6, r6
    44ae:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    44b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    44b6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44ba:	3319      	adds	r3, #25
    44bc:	b29b      	uxth	r3, r3
    44be:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    44c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    44c6:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    44ca:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44ce:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    44d2:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    44d6:	b2f6      	uxtb	r6, r6
    44d8:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44dc:	3719      	adds	r7, #25
    44de:	b2db      	uxtb	r3, r3
    44e0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    44e4:	b2bf      	uxth	r7, r7
    44e6:	11b6      	asrs	r6, r6, #6
    44e8:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    44ec:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    44f0:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    44f4:	119b      	asrs	r3, r3, #6
    44f6:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    44fa:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    44fe:	333c      	adds	r3, #60	; 0x3c
    4500:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4504:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4508:	fa5f fc8c 	uxtb.w	ip, ip
    450c:	fa5f f883 	uxtb.w	r8, r3
    4510:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4514:	f10e 0314 	add.w	r3, lr, #20
    4518:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    451c:	3601      	adds	r6, #1
    451e:	f8cd c000 	str.w	ip, [sp]
    4522:	f8cd 8004 	str.w	r8, [sp, #4]
    4526:	9602      	str	r6, [sp, #8]
    4528:	b2db      	uxtb	r3, r3
    452a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    452e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4532:	802f      	strh	r7, [r5, #0]
    4534:	f7ff fa1e 	bl	3974 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    4538:	4b0b      	ldr	r3, [pc, #44]	; (4568 <torch(LEDStruct&)+0x4c8>)
    453a:	781b      	ldrb	r3, [r3, #0]
    453c:	2b00      	cmp	r3, #0
    453e:	f43f adbe 	beq.w	40be <torch(LEDStruct&)+0x1e>
    4542:	4620      	mov	r0, r4
    4544:	f7ff fa7e 	bl	3a44 <fire_update(LEDStruct&)>
    4548:	e5b9      	b.n	40be <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    454a:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    454e:	b14a      	cbz	r2, 4564 <torch(LEDStruct&)+0x4c4>
    4550:	882a      	ldrh	r2, [r5, #0]
    4552:	e5e6      	b.n	4122 <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4554:	f1b9 0f00 	cmp.w	r9, #0
    4558:	f47f aef0 	bne.w	433c <torch(LEDStruct&)+0x29c>
    455c:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4560:	2300      	movs	r3, #0
    4562:	e696      	b.n	4292 <torch(LEDStruct&)+0x1f2>
    4564:	882a      	ldrh	r2, [r5, #0]
    4566:	e76d      	b.n	4444 <torch(LEDStruct&)+0x3a4>
    4568:	1fff95dc 	.word	0x1fff95dc

0000456c <confetti_update(LEDStruct&)>:
	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    456c:	4b0e      	ldr	r3, [pc, #56]	; (45a8 <confetti_update(LEDStruct&)+0x3c>)

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    456e:	4a0f      	ldr	r2, [pc, #60]	; (45ac <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    4570:	781b      	ldrb	r3, [r3, #0]

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    4572:	2100      	movs	r1, #0
    4574:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4576:	b13b      	cbz	r3, 4588 <confetti_update(LEDStruct&)+0x1c>
    4578:	2b01      	cmp	r3, #1
    457a:	d103      	bne.n	4584 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    457c:	4b0c      	ldr	r3, [pc, #48]	; (45b0 <confetti_update(LEDStruct&)+0x44>)
    457e:	881b      	ldrh	r3, [r3, #0]
    4580:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    4584:	f7fd bd8c 	b.w	20a0 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    4588:	4b09      	ldr	r3, [pc, #36]	; (45b0 <confetti_update(LEDStruct&)+0x44>)
    458a:	881b      	ldrh	r3, [r3, #0]
    458c:	2b00      	cmp	r3, #0
    458e:	bf14      	ite	ne
    4590:	2301      	movne	r3, #1
    4592:	2300      	moveq	r3, #0
    4594:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4598:	bf14      	ite	ne
    459a:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    459c:	234b      	moveq	r3, #75	; 0x4b
    459e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    45a2:	f7fd bd7d 	b.w	20a0 <LEDDebug(LEDStruct&)>
    45a6:	bf00      	nop
    45a8:	1fff95f2 	.word	0x1fff95f2
    45ac:	1fff95dc 	.word	0x1fff95dc
    45b0:	1fff95f0 	.word	0x1fff95f0

000045b4 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    45b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    45b6:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    45ba:	4e4a      	ldr	r6, [pc, #296]	; (46e4 <confetti(LEDStruct&)+0x130>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    45bc:	b085      	sub	sp, #20
    45be:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    45c0:	bb83      	cbnz	r3, 4624 <confetti(LEDStruct&)+0x70>
    45c2:	8833      	ldrh	r3, [r6, #0]
    45c4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    45c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    45cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    45d0:	3319      	adds	r3, #25
    45d2:	b29b      	uxth	r3, r3
    45d4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    45d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    45dc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    45e0:	3119      	adds	r1, #25
    45e2:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45e4:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45e8:	b2d2      	uxtb	r2, r2
    45ea:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    45ee:	eb02 0240 	add.w	r2, r2, r0, lsl #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45f2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45f6:	11d2      	asrs	r2, r2, #7
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    45f8:	2001      	movs	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    45fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45fe:	320a      	adds	r2, #10
	leds.mode_type = CONFETTI;
    4600:	2512      	movs	r5, #18
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4602:	8031      	strh	r1, [r6, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    4604:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4608:	b2d2      	uxtb	r2, r2
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    460a:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    460e:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    4612:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4616:	2b00      	cmp	r3, #0
    4618:	d15c      	bne.n	46d4 <confetti(LEDStruct&)+0x120>
	else { leds.strip_range = ONE_SIDE; }
    461a:	234b      	movs	r3, #75	; 0x4b
    461c:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

	leds.confetti_fade = cf;
    4620:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    4624:	4b30      	ldr	r3, [pc, #192]	; (46e8 <confetti(LEDStruct&)+0x134>)
    4626:	781b      	ldrb	r3, [r3, #0]
    4628:	2b00      	cmp	r3, #0
    462a:	d157      	bne.n	46dc <confetti(LEDStruct&)+0x128>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    462c:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    4630:	4620      	mov	r0, r4
    4632:	2196      	movs	r1, #150	; 0x96
    4634:	f004 fae2 	bl	8bfc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4638:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    463a:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    463e:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    4642:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4646:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    464a:	3319      	adds	r3, #25
    464c:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    464e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4652:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    4656:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    465a:	3719      	adds	r7, #25
    465c:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    465e:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    4662:	fb03 f305 	mul.w	r3, r3, r5
    4666:	2101      	movs	r1, #1
    4668:	0c1d      	lsrs	r5, r3, #16
    466a:	9100      	str	r1, [sp, #0]
    466c:	a803      	add	r0, sp, #12
    466e:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    4672:	b2d2      	uxtb	r2, r2
    4674:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4676:	8037      	strh	r7, [r6, #0]
    4678:	f004 fb20 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    467c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4680:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4682:	5ce2      	ldrb	r2, [r4, r3]
    4684:	f89d 000c 	ldrb.w	r0, [sp, #12]
    4688:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    468c:	54e2      	strb	r2, [r4, r3]
    468e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4692:	784a      	ldrb	r2, [r1, #1]
    4694:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4698:	704a      	strb	r2, [r1, #1]
    469a:	788b      	ldrb	r3, [r1, #2]
    469c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    46a0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    46a4:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    46a6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    46aa:	b98b      	cbnz	r3, 46d0 <confetti(LEDStruct&)+0x11c>
    46ac:	4620      	mov	r0, r4
    46ae:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    46b2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46b4:	781a      	ldrb	r2, [r3, #0]
    46b6:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    46ba:	785a      	ldrb	r2, [r3, #1]
    46bc:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    46c0:	789a      	ldrb	r2, [r3, #2]
    46c2:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    46c6:	3303      	adds	r3, #3
    46c8:	428b      	cmp	r3, r1
    46ca:	f1a0 0003 	sub.w	r0, r0, #3
    46ce:	d1f1      	bne.n	46b4 <confetti(LEDStruct&)+0x100>
}
    46d0:	b005      	add	sp, #20
    46d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    46d4:	2396      	movs	r3, #150	; 0x96
    46d6:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    46da:	e7a1      	b.n	4620 <confetti(LEDStruct&)+0x6c>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    46dc:	4620      	mov	r0, r4
    46de:	f7ff ff45 	bl	456c <confetti_update(LEDStruct&)>
    46e2:	e7a3      	b.n	462c <confetti(LEDStruct&)+0x78>
    46e4:	1fff875a 	.word	0x1fff875a
    46e8:	1fff95dc 	.word	0x1fff95dc

000046ec <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    46ec:	4b24      	ldr	r3, [pc, #144]	; (4780 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    46ee:	4a25      	ldr	r2, [pc, #148]	; (4784 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    46f0:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    46f2:	2100      	movs	r1, #0
    46f4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    46f6:	2b09      	cmp	r3, #9
    46f8:	d80a      	bhi.n	4710 <one_sin_update(LEDStruct&)+0x24>
    46fa:	e8df f003 	tbb	[pc, r3]
    46fe:	1e10      	.short	0x1e10
    4700:	322d2823 	.word	0x322d2823
    4704:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    4708:	4b1f      	ldr	r3, [pc, #124]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    470a:	881b      	ldrh	r3, [r3, #0]
    470c:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    4710:	f7fd bcc6 	b.w	20a0 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    4714:	4b1c      	ldr	r3, [pc, #112]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    4716:	881b      	ldrh	r3, [r3, #0]
    4718:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    471c:	e7f8      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    471e:	4b1a      	ldr	r3, [pc, #104]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    4720:	881b      	ldrh	r3, [r3, #0]
    4722:	2b00      	cmp	r3, #0
    4724:	bf14      	ite	ne
    4726:	2301      	movne	r3, #1
    4728:	2300      	moveq	r3, #0
    472a:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    472e:	bf14      	ite	ne
    4730:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    4732:	234b      	moveq	r3, #75	; 0x4b
    4734:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    4738:	e7ea      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    473a:	4b13      	ldr	r3, [pc, #76]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    473c:	881b      	ldrh	r3, [r3, #0]
    473e:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    4742:	e7e5      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    4744:	4b10      	ldr	r3, [pc, #64]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    4746:	881b      	ldrh	r3, [r3, #0]
    4748:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    474c:	e7e0      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    474e:	4b0e      	ldr	r3, [pc, #56]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    4750:	881b      	ldrh	r3, [r3, #0]
    4752:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    4756:	e7db      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    4758:	4b0b      	ldr	r3, [pc, #44]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    475a:	881b      	ldrh	r3, [r3, #0]
    475c:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    4760:	e7d6      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    4762:	4b09      	ldr	r3, [pc, #36]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    4764:	881b      	ldrh	r3, [r3, #0]
    4766:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    476a:	e7d1      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    476c:	4b06      	ldr	r3, [pc, #24]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    476e:	881b      	ldrh	r3, [r3, #0]
    4770:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    4774:	e7cc      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    4776:	4b04      	ldr	r3, [pc, #16]	; (4788 <one_sin_update(LEDStruct&)+0x9c>)
    4778:	881b      	ldrh	r3, [r3, #0]
    477a:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    477e:	e7c7      	b.n	4710 <one_sin_update(LEDStruct&)+0x24>
    4780:	1fff95f2 	.word	0x1fff95f2
    4784:	1fff95dc 	.word	0x1fff95dc
    4788:	1fff95f0 	.word	0x1fff95f0

0000478c <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4790:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    4794:	b085      	sub	sp, #20
    4796:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4798:	2b00      	cmp	r3, #0
    479a:	f040 80b0 	bne.w	48fe <one_sin(LEDStruct&)+0x172>
    479e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 4a44 <one_sin(LEDStruct&)+0x2b8>
    47a2:	f8b8 3000 	ldrh.w	r3, [r8]
    47a6:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    47aa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    47ae:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    47b2:	3519      	adds	r5, #25
    47b4:	b2ad      	uxth	r5, r5
    47b6:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    47ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    47be:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    47c2:	3319      	adds	r3, #25
    47c4:	b29b      	uxth	r3, r3
    47c6:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    47ca:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    47ce:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    47d2:	f10e 0e19 	add.w	lr, lr, #25
    47d6:	fa1f fe8e 	uxth.w	lr, lr
    47da:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    47de:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    47e2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    47e6:	3119      	adds	r1, #25
    47e8:	b289      	uxth	r1, r1
    47ea:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    47ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    47f2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    47f6:	3719      	adds	r7, #25
    47f8:	b2bf      	uxth	r7, r7
    47fa:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    47fe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    4802:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4806:	3019      	adds	r0, #25
    4808:	b280      	uxth	r0, r0
    480a:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    480e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    4812:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4816:	3619      	adds	r6, #25
    4818:	b2b6      	uxth	r6, r6
    481a:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    481e:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    4822:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    4826:	f10c 0c19 	add.w	ip, ip, #25
    482a:	fa1f fc8c 	uxth.w	ip, ip
    482e:	eb0c 294c 	add.w	r9, ip, ip, lsl #9
    4832:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
    4836:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    483a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    483e:	f109 0919 	add.w	r9, r9, #25
    4842:	fa1f f989 	uxth.w	r9, r9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4846:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4848:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    484c:	b2cb      	uxtb	r3, r1
    484e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4852:	eb09 2119 	add.w	r1, r9, r9, lsr #8
    4856:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    485a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    485e:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4860:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4864:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4868:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    486c:	b2c0      	uxtb	r0, r0
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    486e:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4872:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4874:	f8a8 9000 	strh.w	r9, [r8]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4878:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    487c:	f04f 0801 	mov.w	r8, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4880:	3201      	adds	r2, #1
    4882:	f3ce 1e81 	ubfx	lr, lr, #6, #2
    4886:	f3c3 1307 	ubfx	r3, r3, #4, #8
    488a:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    488e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4892:	f3c6 1642 	ubfx	r6, r6, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4896:	eb01 0181 	add.w	r1, r1, r1, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    489a:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.mode_type = ONE_SIN;
    489e:	f04f 0913 	mov.w	r9, #19
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    48a2:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    48a6:	b2d2      	uxtb	r2, r2
    48a8:	f10e 0e01 	add.w	lr, lr, #1
    48ac:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    48b0:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    48b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    48b6:	3601      	adds	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    48b8:	f3c1 11c7 	ubfx	r1, r1, #7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    48bc:	fa5f fc8c 	uxtb.w	ip, ip
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    48c0:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    48c4:	f884 8229 	strb.w	r8, [r4, #553]	; 0x229
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    48c8:	f884 922c 	strb.w	r9, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    48cc:	2d00      	cmp	r5, #0
    48ce:	f040 80ae 	bne.w	4a2e <one_sin(LEDStruct&)+0x2a2>
	else { leds.strip_range = ONE_SIDE; }
    48d2:	254b      	movs	r5, #75	; 0x4b
    48d4:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    48d8:	2500      	movs	r5, #0
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    48da:	f884 233f 	strb.w	r2, [r4, #831]	; 0x33f
	leds.sin_speed		= ss;
    48de:	f884 e340 	strb.w	lr, [r4, #832]	; 0x340
	leds.sin_cutoff		= sc;
    48e2:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    48e6:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    48ea:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    48ee:	f884 6343 	strb.w	r6, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    48f2:	f884 c34f 	strb.w	ip, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    48f6:	f884 1350 	strb.w	r1, [r4, #848]	; 0x350
	leds.sin_start		= 0;
    48fa:	f884 5345 	strb.w	r5, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    48fe:	4b50      	ldr	r3, [pc, #320]	; (4a40 <one_sin(LEDStruct&)+0x2b4>)
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	2b00      	cmp	r3, #0
    4904:	f040 8097 	bne.w	4a36 <one_sin(LEDStruct&)+0x2aa>

	leds.sin_start += leds.sin_inc;
    4908:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    490c:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    4910:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    4914:	440b      	add	r3, r1
    4916:	b2db      	uxtb	r3, r3
    4918:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    491c:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    4920:	2a00      	cmp	r2, #0
    4922:	d07c      	beq.n	4a1e <one_sin(LEDStruct&)+0x292>
		leds.sin_phase += leds.sin_speed;
    4924:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    4928:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    492c:	4413      	add	r3, r2
    492e:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4932:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    4936:	2b00      	cmp	r3, #0
    4938:	d06e      	beq.n	4a18 <one_sin(LEDStruct&)+0x28c>
    493a:	f204 19c7 	addw	r9, r4, #455	; 0x1c7
    493e:	4625      	mov	r5, r4
    4940:	1c67      	adds	r7, r4, #1
    4942:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4944:	f04f 08ff 	mov.w	r8, #255	; 0xff
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    4948:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    494c:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    4950:	f894 b341 	ldrb.w	fp, [r4, #833]	; 0x341
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    4954:	f894 e350 	ldrb.w	lr, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4958:	f88d e00e 	strb.w	lr, [sp, #14]
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    495c:	fa5f fa86 	uxtb.w	sl, r6
    4960:	fb03 230a 	mla	r3, r3, sl, r2
    4964:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4966:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    4968:	bf44      	itt	mi
    496a:	43db      	mvnmi	r3, r3
    496c:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    496e:	005b      	lsls	r3, r3, #1
    4970:	b2db      	uxtb	r3, r3
    4972:	1c5a      	adds	r2, r3, #1
    4974:	fb02 f303 	mul.w	r3, r2, r3
    4978:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    497a:	fb03 f202 	mul.w	r2, r3, r2
    497e:	1212      	asrs	r2, r2, #8
    4980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4984:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    4988:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    498a:	05da      	lsls	r2, r3, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    498c:	bf54      	ite	pl
    498e:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4990:	23ff      	movmi	r3, #255	; 0xff
    4992:	f894 234f 	ldrb.w	r2, [r4, #847]	; 0x34f
    4996:	f88d 200c 	strb.w	r2, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    499a:	4629      	mov	r1, r5
    499c:	a803      	add	r0, sp, #12
    499e:	459b      	cmp	fp, r3
    49a0:	bf34      	ite	cc
    49a2:	f04f 0bff 	movcc.w	fp, #255	; 0xff
    49a6:	f04f 0b00 	movcs.w	fp, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    49aa:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    49ae:	f004 fb81 	bl	90b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    49b2:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    49b6:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    49ba:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    49be:	9100      	str	r1, [sp, #0]
    49c0:	fb02 320a 	mla	r2, r2, sl, r3
    49c4:	b2d2      	uxtb	r2, r2
    49c6:	465b      	mov	r3, fp
    49c8:	4649      	mov	r1, r9
    49ca:	a803      	add	r0, sp, #12
    49cc:	f004 f976 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    49d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    49d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
    49d8:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    49dc:	f807 3c01 	strb.w	r3, [r7, #-1]
    49e0:	786a      	ldrb	r2, [r5, #1]
    49e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    49e6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    49ea:	706a      	strb	r2, [r5, #1]
    49ec:	78ab      	ldrb	r3, [r5, #2]
    49ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
    49f2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    49f6:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    49f8:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    49fc:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4a00:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    4a04:	3601      	adds	r6, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    4a06:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4a08:	42b2      	cmp	r2, r6
    4a0a:	f105 0503 	add.w	r5, r5, #3
    4a0e:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    4a12:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4a16:	dc97      	bgt.n	4948 <one_sin(LEDStruct&)+0x1bc>
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    4a18:	b005      	add	sp, #20
    4a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    4a1e:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    4a22:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    4a26:	1a9b      	subs	r3, r3, r2
    4a28:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    4a2c:	e781      	b.n	4932 <one_sin(LEDStruct&)+0x1a6>
void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4a2e:	2596      	movs	r5, #150	; 0x96
    4a30:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    4a34:	e750      	b.n	48d8 <one_sin(LEDStruct&)+0x14c>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    4a36:	4620      	mov	r0, r4
    4a38:	f7ff fe58 	bl	46ec <one_sin_update(LEDStruct&)>
    4a3c:	e764      	b.n	4908 <one_sin(LEDStruct&)+0x17c>
    4a3e:	bf00      	nop
    4a40:	1fff95dc 	.word	0x1fff95dc
    4a44:	1fff875a 	.word	0x1fff875a

00004a48 <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    4a48:	b570      	push	{r4, r5, r6, lr}
    4a4a:	4604      	mov	r4, r0
    4a4c:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    4a4e:	4d1b      	ldr	r5, [pc, #108]	; (4abc <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    4a50:	2002      	movs	r0, #2
    4a52:	f004 ff9d 	bl	9990 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a56:	882b      	ldrh	r3, [r5, #0]
    4a58:	4418      	add	r0, r3
    4a5a:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    4a5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4a62:	f243 6319 	movw	r3, #13849	; 0x3619
    4a66:	4418      	add	r0, r3
    4a68:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a6a:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a6e:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    4a72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4a76:	b2d2      	uxtb	r2, r2
    4a78:	4403      	add	r3, r0
    4a7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4a7e:	b29b      	uxth	r3, r3
    4a80:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    4a82:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    4a84:	eb03 2113 	add.w	r1, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4a88:	321b      	adds	r2, #27
    4a8a:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    4a8e:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    4a92:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    4a96:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    4a9a:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4a9e:	4620      	mov	r0, r4
    4aa0:	aa01      	add	r2, sp, #4
    4aa2:	2196      	movs	r1, #150	; 0x96
    4aa4:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4aa6:	f88d 6004 	strb.w	r6, [sp, #4]
    4aaa:	f88d 6005 	strb.w	r6, [sp, #5]
    4aae:	f88d 6006 	strb.w	r6, [sp, #6]
    4ab2:	f003 ffe1 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
}
    4ab6:	b002      	add	sp, #8
    4ab8:	bd70      	pop	{r4, r5, r6, pc}
    4aba:	bf00      	nop
    4abc:	1fff875a 	.word	0x1fff875a

00004ac0 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    4ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    4ac4:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    4ac8:	b087      	sub	sp, #28
    4aca:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    4acc:	2b00      	cmp	r3, #0
    4ace:	f000 8089 	beq.w	4be4 <fadeup(LEDStruct&)+0x124>
    4ad2:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    4ad6:	9303      	str	r3, [sp, #12]
    4ad8:	4606      	mov	r6, r0
    4ada:	4618      	mov	r0, r3
    4adc:	4b5d      	ldr	r3, [pc, #372]	; (4c54 <fadeup(LEDStruct&)+0x194>)
    4ade:	881b      	ldrh	r3, [r3, #0]
    4ae0:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4ae4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4ae8:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4aec:	3419      	adds	r4, #25
    4aee:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4af0:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4af4:	b2db      	uxtb	r3, r3
    4af6:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    4afa:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    4afe:	ea4f 2929 	mov.w	r9, r9, asr #8
    4b02:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    4b06:	2301      	movs	r3, #1
    4b08:	fa5f f989 	uxtb.w	r9, r9
    4b0c:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    4b10:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    4b14:	f007 fad2 	bl	c0bc <__aeabi_ui2f>
    4b18:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    4b1c:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4b20:	465b      	mov	r3, fp
    4b22:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    4b26:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    4b2a:	46d3      	mov	fp, sl
    4b2c:	9001      	str	r0, [sp, #4]
    4b2e:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    4b32:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4b34:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b36:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4b3a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4b3e:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4b42:	3419      	adds	r4, #25
    4b44:	b2a4      	uxth	r4, r4
    4b46:	2373      	movs	r3, #115	; 0x73
    4b48:	fb03 f004 	mul.w	r0, r3, r4
    4b4c:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    4b4e:	9b01      	ldr	r3, [sp, #4]
    4b50:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4b54:	300a      	adds	r0, #10
    4b56:	b280      	uxth	r0, r0
    4b58:	f007 fab0 	bl	c0bc <__aeabi_ui2f>
    4b5c:	493e      	ldr	r1, [pc, #248]	; (4c58 <fadeup(LEDStruct&)+0x198>)
    4b5e:	f007 fbb9 	bl	c2d4 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b62:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4b66:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4b6a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b6e:	3319      	adds	r3, #25
    4b70:	b29b      	uxth	r3, r3
    4b72:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4b76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4b7a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4b7e:	3419      	adds	r4, #25
    4b80:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b82:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4b86:	b2c9      	uxtb	r1, r1
    4b88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4b8c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4b90:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    4b92:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    4b96:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4b98:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    4b9c:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    4ba0:	b2c8      	uxtb	r0, r1
    4ba2:	f007 fa8b 	bl	c0bc <__aeabi_ui2f>
    4ba6:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4ba8:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4baa:	4a2c      	ldr	r2, [pc, #176]	; (4c5c <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4bac:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4bb0:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4bb2:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4bb6:	d8be      	bhi.n	4b36 <fadeup(LEDStruct&)+0x76>
    4bb8:	9a03      	ldr	r2, [sp, #12]
    4bba:	9e02      	ldr	r6, [sp, #8]
    4bbc:	4f25      	ldr	r7, [pc, #148]	; (4c54 <fadeup(LEDStruct&)+0x194>)
    4bbe:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    4bc2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    4bc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4bca:	18f5      	adds	r5, r6, r3
    4bcc:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    4bce:	22ff      	movs	r2, #255	; 0xff
    4bd0:	803c      	strh	r4, [r7, #0]
    4bd2:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    4bd4:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    4bd6:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    4bd8:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    4bda:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    4bdc:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    4bde:	b007      	add	sp, #28
    4be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4be4:	9d02      	ldr	r5, [sp, #8]
    4be6:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4bea:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4bee:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    4bf2:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4bf6:	3305      	adds	r3, #5
    4bf8:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4bfa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4bfe:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4c02:	4429      	add	r1, r5
    4c04:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4c06:	24ff      	movs	r4, #255	; 0xff
    4c08:	f88d 3016 	strb.w	r3, [sp, #22]
    4c0c:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4c10:	f004 fa50 	bl	90b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4c14:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4c18:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4c1c:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    4c20:	f88d 3014 	strb.w	r3, [sp, #20]
    4c24:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    4c28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4c2c:	a805      	add	r0, sp, #20
    4c2e:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4c30:	f88d 4015 	strb.w	r4, [sp, #21]
    4c34:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4c38:	f004 fa3c 	bl	90b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    4c3c:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    4c40:	2bff      	cmp	r3, #255	; 0xff
    4c42:	d1cc      	bne.n	4bde <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    4c44:	9a02      	ldr	r2, [sp, #8]
    4c46:	2301      	movs	r3, #1
    4c48:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    4c4c:	b007      	add	sp, #28
    4c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c52:	bf00      	nop
    4c54:	1fff875a 	.word	0x1fff875a
    4c58:	42c80000 	.word	0x42c80000
    4c5c:	437f0000 	.word	0x437f0000

00004c60 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    4c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4c64:	4b65      	ldr	r3, [pc, #404]	; (4dfc <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    4c66:	4605      	mov	r5, r0
    4c68:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4c6a:	781a      	ldrb	r2, [r3, #0]
    4c6c:	2196      	movs	r1, #150	; 0x96
    4c6e:	f003 ffc5 	bl	8bfc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4c72:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    4c76:	2600      	movs	r6, #0
    4c78:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4c7c:	2c00      	cmp	r4, #0
    4c7e:	d07e      	beq.n	4d7e <explosion(LEDStruct&)+0x11e>
    4c80:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4e14 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4c84:	f04f 08ff 	mov.w	r8, #255	; 0xff
    4c88:	e03b      	b.n	4d02 <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4c8a:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    4c8e:	4650      	mov	r0, sl
    4c90:	f007 f964 	bl	bf5c <__addsf3>
    4c94:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4c96:	2100      	movs	r1, #0
    4c98:	4638      	mov	r0, r7
    4c9a:	f007 fc05 	bl	c4a8 <__aeabi_fcmplt>
    4c9e:	4958      	ldr	r1, [pc, #352]	; (4e00 <explosion(LEDStruct&)+0x1a0>)
    4ca0:	2800      	cmp	r0, #0
    4ca2:	d168      	bne.n	4d76 <explosion(LEDStruct&)+0x116>
    4ca4:	4638      	mov	r0, r7
    4ca6:	f007 fc1d 	bl	c4e4 <__aeabi_fcmpgt>
    4caa:	b100      	cbz	r0, 4cae <explosion(LEDStruct&)+0x4e>
    4cac:	4f54      	ldr	r7, [pc, #336]	; (4e00 <explosion(LEDStruct&)+0x1a0>)
    4cae:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    4cb2:	4651      	mov	r1, sl
    4cb4:	f8d9 0000 	ldr.w	r0, [r9]
    4cb8:	f007 fa58 	bl	c16c <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    4cbc:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    4cc0:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    4cc4:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    4cc8:	f007 fa50 	bl	c16c <__aeabi_fmul>
    4ccc:	4601      	mov	r1, r0
    4cce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    4cd2:	f007 f941 	bl	bf58 <__aeabi_fsub>
    4cd6:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    4cda:	f007 fa47 	bl	c16c <__aeabi_fmul>
    4cde:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4ce2:	f007 fc2f 	bl	c544 <__aeabi_f2uiz>
    4ce6:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    4cea:	b2c0      	uxtb	r0, r0
    4cec:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4cee:	f106 0601 	add.w	r6, r6, #1
    4cf2:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4cf6:	bf38      	it	cc
    4cf8:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4cfc:	b2f6      	uxtb	r6, r6
    4cfe:	42b3      	cmp	r3, r6
    4d00:	d93b      	bls.n	4d7a <explosion(LEDStruct&)+0x11a>
    4d02:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    4d06:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4d0a:	f007 fbf5 	bl	c4f8 <__aeabi_f2iz>
    4d0e:	4607      	mov	r7, r0
    4d10:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    4d14:	f007 fc16 	bl	c544 <__aeabi_f2uiz>
    4d18:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4d1c:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4d20:	a901      	add	r1, sp, #4
    4d22:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4d24:	f88d 3000 	strb.w	r3, [sp]
    4d28:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4d2c:	f004 f9c2 	bl	90b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    4d30:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    4d34:	1829      	adds	r1, r5, r0
    4d36:	5c2b      	ldrb	r3, [r5, r0]
    4d38:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4d3c:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4d40:	542b      	strb	r3, [r5, r0]
    4d42:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4d46:	784a      	ldrb	r2, [r1, #1]
    4d48:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4d4c:	704a      	strb	r2, [r1, #1]
    4d4e:	788b      	ldrb	r3, [r1, #2]
    4d50:	f89d 2006 	ldrb.w	r2, [sp, #6]
    4d54:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4d58:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    4d5a:	708b      	strb	r3, [r1, #2]
    4d5c:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    4d60:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    4d64:	2b00      	cmp	r3, #0
    4d66:	d190      	bne.n	4c8a <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    4d68:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4d6c:	4651      	mov	r1, sl
    4d6e:	f007 f8f3 	bl	bf58 <__aeabi_fsub>
    4d72:	4607      	mov	r7, r0
    4d74:	e78f      	b.n	4c96 <explosion(LEDStruct&)+0x36>
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4d76:	2700      	movs	r7, #0
    4d78:	e799      	b.n	4cae <explosion(LEDStruct&)+0x4e>
    4d7a:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    4d7e:	462a      	mov	r2, r5
    4d80:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4d84:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d86:	7819      	ldrb	r1, [r3, #0]
    4d88:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4d8c:	7859      	ldrb	r1, [r3, #1]
    4d8e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    4d92:	7899      	ldrb	r1, [r3, #2]
    4d94:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    4d98:	3303      	adds	r3, #3
    4d9a:	4283      	cmp	r3, r0
    4d9c:	f1a2 0203 	sub.w	r2, r2, #3
    4da0:	d1f1      	bne.n	4d86 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    4da2:	bb44      	cbnz	r4, 4df6 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4da4:	aa01      	add	r2, sp, #4
    4da6:	2196      	movs	r1, #150	; 0x96
    4da8:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4daa:	f88d 4004 	strb.w	r4, [sp, #4]
    4dae:	f88d 4005 	strb.w	r4, [sp, #5]
    4db2:	f88d 4006 	strb.w	r4, [sp, #6]
    4db6:	f003 fe5f 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4dba:	4812      	ldr	r0, [pc, #72]	; (4e04 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4dbc:	4c12      	ldr	r4, [pc, #72]	; (4e08 <explosion(LEDStruct&)+0x1a8>)
    4dbe:	8803      	ldrh	r3, [r0, #0]
    4dc0:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    4dc2:	4912      	ldr	r1, [pc, #72]	; (4e0c <explosion(LEDStruct&)+0x1ac>)
    4dc4:	4a12      	ldr	r2, [pc, #72]	; (4e10 <explosion(LEDStruct&)+0x1b0>)
    4dc6:	9401      	str	r4, [sp, #4]
    4dc8:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4dcc:	8809      	ldrh	r1, [r1, #0]
    4dce:	8812      	ldrh	r2, [r2, #0]
    4dd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4dd4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4dd8:	440a      	add	r2, r1
    4dda:	3319      	adds	r3, #25
    4ddc:	b29b      	uxth	r3, r3
    4dde:	b292      	uxth	r2, r2
	return ret;
    4de0:	9901      	ldr	r1, [sp, #4]
    4de2:	8003      	strh	r3, [r0, #0]
    4de4:	fb03 f302 	mul.w	r3, r3, r2
    4de8:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    4dec:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    4dee:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    4df2:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    4df6:	b002      	add	sp, #8
    4df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dfc:	1fff8748 	.word	0x1fff8748
    4e00:	42940000 	.word	0x42940000
    4e04:	1fff875a 	.word	0x1fff875a
    4e08:	1fffa080 	.word	0x1fffa080
    4e0c:	1fff8724 	.word	0x1fff8724
    4e10:	1fff874a 	.word	0x1fff874a
    4e14:	1fff8754 	.word	0x1fff8754

00004e18 <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    4e18:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4e1a:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    4e1e:	b082      	sub	sp, #8
    4e20:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4e22:	bb03      	cbnz	r3, 4e66 <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4e24:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    4e26:	2115      	movs	r1, #21
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4e28:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    4e2a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4e2e:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = FIREWORKS;
    4e32:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4e36:	f884 2354 	strb.w	r2, [r4, #852]	; 0x354
    4e3a:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4e3c:	aa01      	add	r2, sp, #4
    4e3e:	2196      	movs	r1, #150	; 0x96
    4e40:	4620      	mov	r0, r4
    4e42:	f88d 3004 	strb.w	r3, [sp, #4]
    4e46:	f88d 3005 	strb.w	r3, [sp, #5]
    4e4a:	f88d 3006 	strb.w	r3, [sp, #6]
    4e4e:	f003 fe13 	bl	8a78 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4e52:	4a0f      	ldr	r2, [pc, #60]	; (4e90 <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    4e54:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    4e58:	6812      	ldr	r2, [r2, #0]
    4e5a:	9201      	str	r2, [sp, #4]
	return ret;
    4e5c:	9a01      	ldr	r2, [sp, #4]
    4e5e:	429a      	cmp	r2, r3
    4e60:	d212      	bcs.n	4e88 <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4e62:	b002      	add	sp, #8
    4e64:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4e66:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    4e6a:	2b01      	cmp	r3, #1
    4e6c:	d004      	beq.n	4e78 <fireworks(LEDStruct&)+0x60>
    4e6e:	d207      	bcs.n	4e80 <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    4e70:	f7ff fe26 	bl	4ac0 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4e74:	b002      	add	sp, #8
    4e76:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    4e78:	f7ff fef2 	bl	4c60 <explosion(LEDStruct&)>
			break;
	}
}
    4e7c:	b002      	add	sp, #8
    4e7e:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4e80:	2b02      	cmp	r3, #2
    4e82:	d0da      	beq.n	4e3a <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4e84:	b002      	add	sp, #8
    4e86:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    4e88:	4620      	mov	r0, r4
    4e8a:	f7ff fddd 	bl	4a48 <prepare_for_explosion(LEDStruct&)>
    4e8e:	e7e8      	b.n	4e62 <fireworks(LEDStruct&)+0x4a>
    4e90:	1fffa080 	.word	0x1fffa080

00004e94 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4e94:	4b18      	ldr	r3, [pc, #96]	; (4ef8 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    4e96:	4a19      	ldr	r2, [pc, #100]	; (4efc <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    4e98:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    4e9a:	2100      	movs	r1, #0
    4e9c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4e9e:	2b04      	cmp	r3, #4
    4ea0:	d80d      	bhi.n	4ebe <shooting_pole_update(LEDStruct&)+0x2a>
    4ea2:	e8df f003 	tbb	[pc, r3]
    4ea6:	1403      	.short	0x1403
    4ea8:	201a      	.short	0x201a
    4eaa:	0e          	.byte	0x0e
    4eab:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    4eac:	4b14      	ldr	r3, [pc, #80]	; (4f00 <shooting_pole_update(LEDStruct&)+0x6c>)
    4eae:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    4eb0:	2b09      	cmp	r3, #9
    4eb2:	d91e      	bls.n	4ef2 <shooting_pole_update(LEDStruct&)+0x5e>
    4eb4:	2b41      	cmp	r3, #65	; 0x41
    4eb6:	bfa8      	it	ge
    4eb8:	2341      	movge	r3, #65	; 0x41
    4eba:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4ebe:	f7fd b8ef 	b.w	20a0 <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    4ec2:	4b0f      	ldr	r3, [pc, #60]	; (4f00 <shooting_pole_update(LEDStruct&)+0x6c>)
    4ec4:	881b      	ldrh	r3, [r3, #0]
    4ec6:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		default:	break;
	}
	LEDDebug(leds);
    4eca:	f7fd b8e9 	b.w	20a0 <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    4ece:	4b0c      	ldr	r3, [pc, #48]	; (4f00 <shooting_pole_update(LEDStruct&)+0x6c>)
    4ed0:	881b      	ldrh	r3, [r3, #0]
    4ed2:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4ed6:	f7fd b8e3 	b.w	20a0 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    4eda:	4b09      	ldr	r3, [pc, #36]	; (4f00 <shooting_pole_update(LEDStruct&)+0x6c>)
    4edc:	881b      	ldrh	r3, [r3, #0]
    4ede:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4ee2:	f7fd b8dd 	b.w	20a0 <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    4ee6:	4b06      	ldr	r3, [pc, #24]	; (4f00 <shooting_pole_update(LEDStruct&)+0x6c>)
    4ee8:	881b      	ldrh	r3, [r3, #0]
    4eea:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4eee:	f7fd b8d7 	b.w	20a0 <LEDDebug(LEDStruct&)>
    4ef2:	230a      	movs	r3, #10
    4ef4:	e7e1      	b.n	4eba <shooting_pole_update(LEDStruct&)+0x26>
    4ef6:	bf00      	nop
    4ef8:	1fff95f2 	.word	0x1fff95f2
    4efc:	1fff95dc 	.word	0x1fff95dc
    4f00:	1fff95f0 	.word	0x1fff95f0

00004f04 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    4f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4f08:	f890 622d 	ldrb.w	r6, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    4f0c:	b087      	sub	sp, #28
    4f0e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4f10:	2e00      	cmp	r6, #0
    4f12:	f000 80f7 	beq.w	5104 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    4f16:	4bbb      	ldr	r3, [pc, #748]	; (5204 <shooting_pole(LEDStruct&)+0x300>)
    4f18:	781b      	ldrb	r3, [r3, #0]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	f040 815f 	bne.w	51de <shooting_pole(LEDStruct&)+0x2da>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4f20:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    4f24:	f204 17c7 	addw	r7, r4, #455	; 0x1c7
    4f28:	b311      	cbz	r1, 4f70 <shooting_pole(LEDStruct&)+0x6c>
    4f2a:	4626      	mov	r6, r4
    4f2c:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    4f2e:	f04f 0801 	mov.w	r8, #1
    4f32:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4f36:	f8cd 8000 	str.w	r8, [sp]
    4f3a:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    4f3e:	fb92 f2f1 	sdiv	r2, r2, r1
    4f42:	441a      	add	r2, r3
    4f44:	b2d2      	uxtb	r2, r2
    4f46:	23ff      	movs	r3, #255	; 0xff
    4f48:	4639      	mov	r1, r7
    4f4a:	a805      	add	r0, sp, #20
    4f4c:	f003 feb6 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f50:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4f54:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4f58:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f5c:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4f5e:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4f60:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4f62:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    4f66:	3501      	adds	r5, #1
    4f68:	42a9      	cmp	r1, r5
    4f6a:	f106 0603 	add.w	r6, r6, #3
    4f6e:	dce0      	bgt.n	4f32 <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    4f70:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4f74:	2b00      	cmp	r3, #0
    4f76:	f000 80bd 	beq.w	50f4 <shooting_pole(LEDStruct&)+0x1f0>
    4f7a:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    4f7e:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    4f82:	4413      	add	r3, r2
    4f84:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    4f88:	294a      	cmp	r1, #74	; 0x4a
    4f8a:	f300 812c 	bgt.w	51e6 <shooting_pole(LEDStruct&)+0x2e2>
    4f8e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    4f92:	18a3      	adds	r3, r4, r2
    4f94:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4f98:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4f9c:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4f9e:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4fa0:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4fa4:	43c9      	mvns	r1, r1
    4fa6:	b2c9      	uxtb	r1, r1
    4fa8:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4faa:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4fae:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4fb2:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4fb6:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4fb8:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4fba:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4fbc:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4fbe:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4fc0:	709a      	strb	r2, [r3, #2]
    4fc2:	3303      	adds	r3, #3
    4fc4:	42ab      	cmp	r3, r5
    4fc6:	d1e7      	bne.n	4f98 <shooting_pole(LEDStruct&)+0x94>
    4fc8:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4fcc:	f8df 8248 	ldr.w	r8, [pc, #584]	; 5218 <shooting_pole(LEDStruct&)+0x314>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4fd0:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4fd4:	f8d8 2000 	ldr.w	r2, [r8]
    4fd8:	9205      	str	r2, [sp, #20]
	return ret;
    4fda:	9805      	ldr	r0, [sp, #20]
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4fdc:	f44f 728c 	mov.w	r2, #280	; 0x118
    4fe0:	fb02 f200 	mul.w	r2, r2, r0
    4fe4:	021b      	lsls	r3, r3, #8
    4fe6:	fb03 f202 	mul.w	r2, r3, r2
    4fea:	f3c2 420e 	ubfx	r2, r2, #16, #15
    4fee:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    4ff2:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4ff4:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4ff6:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4ffa:	d503      	bpl.n	5004 <shooting_pole(LEDStruct&)+0x100>
    4ffc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5000:	3307      	adds	r3, #7
    5002:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5004:	0a18      	lsrs	r0, r3, #8
    5006:	f8df e214 	ldr.w	lr, [pc, #532]	; 521c <shooting_pole(LEDStruct&)+0x318>
    uint8_t  m   = slope[section];
    500a:	4e7f      	ldr	r6, [pc, #508]	; (5208 <shooting_pole(LEDStruct&)+0x304>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    500c:	5c36      	ldrb	r6, [r6, r0]
    500e:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    5012:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5016:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    501a:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    501c:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    501e:	bf48      	it	mi
    5020:	4276      	negmi	r6, r6
    5022:	b236      	sxth	r6, r6
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5024:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    5028:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    502c:	b29b      	uxth	r3, r3
    502e:	b2b6      	uxth	r6, r6
    5030:	fb03 6606 	mla	r6, r3, r6, r6
    5034:	f894 0227 	ldrb.w	r0, [r4, #551]	; 0x227
    5038:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    503c:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    5040:	9000      	str	r0, [sp, #0]
    5042:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    5046:	a804      	add	r0, sp, #16
    5048:	4639      	mov	r1, r7
    504a:	b2b6      	uxth	r6, r6
    504c:	f003 fe36 	bl	8cbc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5050:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5054:	18e1      	adds	r1, r4, r3
    5056:	5ce2      	ldrb	r2, [r4, r3]
    5058:	f89d 0010 	ldrb.w	r0, [sp, #16]
    505c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5060:	54e2      	strb	r2, [r4, r3]
    5062:	f89d 3011 	ldrb.w	r3, [sp, #17]
    5066:	784a      	ldrb	r2, [r1, #1]
    5068:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    506c:	704a      	strb	r2, [r1, #1]
    506e:	788b      	ldrb	r3, [r1, #2]
    5070:	f89d 2012 	ldrb.w	r2, [sp, #18]
    5074:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5078:	4f64      	ldr	r7, [pc, #400]	; (520c <shooting_pole(LEDStruct&)+0x308>)
        b = qadd8( b, rhs.b);
    507a:	708b      	strb	r3, [r1, #2]
    507c:	683b      	ldr	r3, [r7, #0]
    507e:	07db      	lsls	r3, r3, #31
    5080:	d51b      	bpl.n	50ba <shooting_pole(LEDStruct&)+0x1b6>
    5082:	4e63      	ldr	r6, [pc, #396]	; (5210 <shooting_pole(LEDStruct&)+0x30c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5084:	f8d8 3000 	ldr.w	r3, [r8]
    5088:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    508a:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    508e:	9b04      	ldr	r3, [sp, #16]
    5090:	1a5b      	subs	r3, r3, r1
    5092:	429a      	cmp	r2, r3
    5094:	d921      	bls.n	50da <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    5096:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5098:	781a      	ldrb	r2, [r3, #0]
    509a:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    509e:	785a      	ldrb	r2, [r3, #1]
    50a0:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    50a4:	789a      	ldrb	r2, [r3, #2]
    50a6:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    50aa:	3303      	adds	r3, #3
    50ac:	429d      	cmp	r5, r3
    50ae:	f1a4 0403 	sub.w	r4, r4, #3
    50b2:	d1f1      	bne.n	5098 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    50b4:	b007      	add	sp, #28
    50b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    50ba:	4638      	mov	r0, r7
    50bc:	f004 fd16 	bl	9aec <__cxa_guard_acquire>
    50c0:	2800      	cmp	r0, #0
    50c2:	f040 8093 	bne.w	51ec <shooting_pole(LEDStruct&)+0x2e8>
    50c6:	4e52      	ldr	r6, [pc, #328]	; (5210 <shooting_pole(LEDStruct&)+0x30c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    50c8:	f8d8 3000 	ldr.w	r3, [r8]
    50cc:	9304      	str	r3, [sp, #16]
    50ce:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    50d2:	9b04      	ldr	r3, [sp, #16]
    50d4:	1a5b      	subs	r3, r3, r1
    50d6:	4293      	cmp	r3, r2
    50d8:	d3dd      	bcc.n	5096 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    50da:	f8d8 1000 	ldr.w	r1, [r8]
    50de:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    50e2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    50e6:	9103      	str	r1, [sp, #12]
	return ret;
    50e8:	9903      	ldr	r1, [sp, #12]
    50ea:	6031      	str	r1, [r6, #0]
    50ec:	4413      	add	r3, r2
    50ee:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    50f2:	e7d0      	b.n	5096 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    50f4:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    50f8:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    50fc:	1a9b      	subs	r3, r3, r2
    50fe:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    5102:	e741      	b.n	4f88 <shooting_pole(LEDStruct&)+0x84>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5104:	4f43      	ldr	r7, [pc, #268]	; (5214 <shooting_pole(LEDStruct&)+0x310>)
    5106:	883b      	ldrh	r3, [r7, #0]
    5108:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    510c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5110:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5114:	3319      	adds	r3, #25
    5116:	b29b      	uxth	r3, r3
    5118:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    511c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5120:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5124:	3219      	adds	r2, #25
    5126:	b292      	uxth	r2, r2
    5128:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    512c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5130:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5134:	f10e 0e19 	add.w	lr, lr, #25
    5138:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    513c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5140:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
    5144:	2146      	movs	r1, #70	; 0x46
    5146:	2032      	movs	r0, #50	; 0x32
    5148:	b2dd      	uxtb	r5, r3
    514a:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    514e:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5152:	fa5f f982 	uxtb.w	r9, r2
    5156:	f006 f873 	bl	b240 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    515a:	883b      	ldrh	r3, [r7, #0]
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    515c:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
    5160:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    5164:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    5168:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    516c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5170:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5174:	3119      	adds	r1, #25
    5176:	121b      	asrs	r3, r3, #8
    5178:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    517a:	fa5f f888 	uxtb.w	r8, r8
    517e:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    5182:	b2db      	uxtb	r3, r3
    5184:	eb01 2011 	add.w	r0, r1, r1, lsr #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5188:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    518c:	b2c0      	uxtb	r0, r0
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    518e:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    5192:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5196:	4b1b      	ldr	r3, [pc, #108]	; (5204 <shooting_pole(LEDStruct&)+0x300>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;
    5198:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    519c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    51a0:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    51a4:	ea4f 10e8 	mov.w	r0, r8, asr #7
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    51a8:	ea4f 2e22 	mov.w	lr, r2, asr #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    51ac:	122d      	asrs	r5, r5, #8
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    51ae:	f100 0232 	add.w	r2, r0, #50	; 0x32
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    51b2:	781b      	ldrb	r3, [r3, #0]
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    51b4:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    51b8:	1c68      	adds	r0, r5, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    51ba:	f10e 0e01 	add.w	lr, lr, #1
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    51be:	2501      	movs	r5, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
    51c0:	2216      	movs	r2, #22
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    51c2:	f884 e75e 	strb.w	lr, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51c6:	8039      	strh	r1, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    51c8:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    51cc:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    51d0:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
	leds.mode_type = SHOOTING_POLE;
    51d4:	f884 222c 	strb.w	r2, [r4, #556]	; 0x22c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    51d8:	2b00      	cmp	r3, #0
    51da:	f43f aea1 	beq.w	4f20 <shooting_pole(LEDStruct&)+0x1c>
    51de:	4620      	mov	r0, r4
    51e0:	f7ff fe58 	bl	4e94 <shooting_pole_update(LEDStruct&)>
    51e4:	e69c      	b.n	4f20 <shooting_pole(LEDStruct&)+0x1c>
    51e6:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    51ea:	e6ef      	b.n	4fcc <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    51ec:	f8d8 3000 	ldr.w	r3, [r8]
    51f0:	4e07      	ldr	r6, [pc, #28]	; (5210 <shooting_pole(LEDStruct&)+0x30c>)
    51f2:	9302      	str	r3, [sp, #8]
	return ret;
    51f4:	9b02      	ldr	r3, [sp, #8]
    51f6:	6033      	str	r3, [r6, #0]
    51f8:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    51fa:	4638      	mov	r0, r7
    51fc:	6073      	str	r3, [r6, #4]
    51fe:	f004 fc7b 	bl	9af8 <__cxa_guard_release>
    5202:	e761      	b.n	50c8 <shooting_pole(LEDStruct&)+0x1c4>
    5204:	1fff95dc 	.word	0x1fff95dc
    5208:	0000e5f4 	.word	0x0000e5f4
    520c:	1fff8c88 	.word	0x1fff8c88
    5210:	1fff94d8 	.word	0x1fff94d8
    5214:	1fff875a 	.word	0x1fff875a
    5218:	1fffa080 	.word	0x1fffa080
    521c:	0000da90 	.word	0x0000da90

00005220 <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5220:	4b2a      	ldr	r3, [pc, #168]	; (52cc <two_sin_update(LEDStruct&)+0xac>)
	leds.two_phase  = 0;
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5222:	4a2b      	ldr	r2, [pc, #172]	; (52d0 <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    5224:	781b      	ldrb	r3, [r3, #0]
	leds.two_phase  = 0;
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5226:	2100      	movs	r1, #0
    5228:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    522a:	2b0b      	cmp	r3, #11
    522c:	d80b      	bhi.n	5246 <two_sin_update(LEDStruct&)+0x26>
    522e:	e8df f003 	tbb	[pc, r3]
    5232:	1f11      	.short	0x1f11
    5234:	332e2924 	.word	0x332e2924
    5238:	06423d38 	.word	0x06423d38
    523c:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    523e:	4b25      	ldr	r3, [pc, #148]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    5240:	881b      	ldrh	r3, [r3, #0]
    5242:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    5246:	f7fc bf2b 	b.w	20a0 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    524a:	4b22      	ldr	r3, [pc, #136]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    524c:	881b      	ldrh	r3, [r3, #0]
    524e:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5252:	e7f8      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5254:	4b1f      	ldr	r3, [pc, #124]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    5256:	881b      	ldrh	r3, [r3, #0]
    5258:	2b00      	cmp	r3, #0
    525a:	bf14      	ite	ne
    525c:	2301      	movne	r3, #1
    525e:	2300      	moveq	r3, #0
    5260:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5264:	bf14      	ite	ne
    5266:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5268:	234b      	moveq	r3, #75	; 0x4b
    526a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    526e:	e7ea      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    5270:	4b18      	ldr	r3, [pc, #96]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    5272:	881b      	ldrh	r3, [r3, #0]
    5274:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    5278:	e7e5      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    527a:	4b16      	ldr	r3, [pc, #88]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    527c:	881b      	ldrh	r3, [r3, #0]
    527e:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    5282:	e7e0      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5284:	4b13      	ldr	r3, [pc, #76]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    528c:	e7db      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    528e:	4b11      	ldr	r3, [pc, #68]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    5290:	881b      	ldrh	r3, [r3, #0]
    5292:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    5296:	e7d6      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5298:	4b0e      	ldr	r3, [pc, #56]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    529a:	881b      	ldrh	r3, [r3, #0]
    529c:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    52a0:	e7d1      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    52a2:	4b0c      	ldr	r3, [pc, #48]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    52a4:	881b      	ldrh	r3, [r3, #0]
    52a6:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    52aa:	e7cc      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    52ac:	4b09      	ldr	r3, [pc, #36]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    52ae:	881b      	ldrh	r3, [r3, #0]
    52b0:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    52b4:	e7c7      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    52b6:	4b07      	ldr	r3, [pc, #28]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    52b8:	881b      	ldrh	r3, [r3, #0]
    52ba:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    52be:	e7c2      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    52c0:	4b04      	ldr	r3, [pc, #16]	; (52d4 <two_sin_update(LEDStruct&)+0xb4>)
    52c2:	881b      	ldrh	r3, [r3, #0]
    52c4:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    52c8:	e7bd      	b.n	5246 <two_sin_update(LEDStruct&)+0x26>
    52ca:	bf00      	nop
    52cc:	1fff95f2 	.word	0x1fff95f2
    52d0:	1fff95dc 	.word	0x1fff95dc
    52d4:	1fff95f0 	.word	0x1fff95f0

000052d8 <two_sin(LEDStruct&)>:
	LEDDebug(leds);
}



void two_sin(LEDStruct& leds) {
    52d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    52dc:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void two_sin(LEDStruct& leds) {
    52e0:	b083      	sub	sp, #12
    52e2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    52e4:	2b00      	cmp	r3, #0
    52e6:	f040 80c4 	bne.w	5472 <two_sin(LEDStruct&)+0x19a>
    52ea:	4dd9      	ldr	r5, [pc, #868]	; (5650 <two_sin(LEDStruct&)+0x378>)
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
    52ec:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    52f0:	882b      	ldrh	r3, [r5, #0]
    52f2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    52f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    52fa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52fe:	3319      	adds	r3, #25
    5300:	b298      	uxth	r0, r3
    5302:	eb00 2e40 	add.w	lr, r0, r0, lsl #9
    5306:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
    530a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    530e:	f10e 0e19 	add.w	lr, lr, #25
    5312:	fa1f fe8e 	uxth.w	lr, lr
    5316:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    531a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    531e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5322:	3719      	adds	r7, #25
    5324:	b2bf      	uxth	r7, r7
    5326:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
    532a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
    532e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    5332:	f10c 0c19 	add.w	ip, ip, #25
    5336:	fa1f fc8c 	uxth.w	ip, ip
    533a:	eb0c 264c 	add.w	r6, ip, ip, lsl #9
    533e:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    5342:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5346:	3619      	adds	r6, #25
    5348:	b2b6      	uxth	r6, r6
    534a:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    534e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5352:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5356:	3119      	adds	r1, #25
    5358:	b289      	uxth	r1, r1
    535a:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    535e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5362:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5366:	3219      	adds	r2, #25
    5368:	b292      	uxth	r2, r2
    536a:	eb02 2842 	add.w	r8, r2, r2, lsl #9
    536e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    5372:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    5376:	f108 0819 	add.w	r8, r8, #25
    537a:	fa1f f888 	uxth.w	r8, r8
    537e:	eb08 2348 	add.w	r3, r8, r8, lsl #9
    5382:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    5386:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    538a:	3319      	adds	r3, #25
    538c:	b29b      	uxth	r3, r3
    538e:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    5392:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5396:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    539a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    539e:	eb08 2818 	add.w	r8, r8, r8, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53a2:	f109 0919 	add.w	r9, r9, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53a6:	eb02 2a12 	add.w	sl, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53aa:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53ae:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53b2:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53b4:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53b8:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53bc:	eb00 2310 	add.w	r3, r0, r0, lsr #8
    53c0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53c4:	fa5f fb81 	uxtb.w	fp, r1
    53c8:	fa5f fc8c 	uxtb.w	ip, ip
    53cc:	fa5f f18a 	uxtb.w	r1, sl
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53d0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53d4:	eb09 2a19 	add.w	sl, r9, r9, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53d8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    53dc:	f3c6 1081 	ubfx	r0, r6, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53e0:	f8a5 9000 	strh.w	r9, [r5]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    53e8:	f04f 0901 	mov.w	r9, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53ec:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    53f0:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53f4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    53f8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    53fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5400:	f3c8 1807 	ubfx	r8, r8, #4, #8
    5404:	f3ca 1642 	ubfx	r6, sl, #5, #3
    5408:	f3c2 1247 	ubfx	r2, r2, #5, #8
	leds.mode_type = TWO_SIN;
    540c:	2514      	movs	r5, #20
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    540e:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5412:	fa5f fe8e 	uxtb.w	lr, lr
    5416:	b2ff      	uxtb	r7, r7
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5418:	f3cc 2c07 	ubfx	ip, ip, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    541c:	3001      	adds	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    541e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
    5422:	f3c1 2107 	ubfx	r1, r1, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5426:	f088 0880 	eor.w	r8, r8, #128	; 0x80
    542a:	444e      	add	r6, r9
    542c:	f082 0280 	eor.w	r2, r2, #128	; 0x80

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    5430:	f884 922d 	strb.w	r9, [r4, #557]	; 0x22d
	leds.mode_type = TWO_SIN;
    5434:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5438:	2b00      	cmp	r3, #0
    543a:	f040 811c 	bne.w	5676 <two_sin(LEDStruct&)+0x39e>
	else					 { leds.strip_range = ONE_SIDE; }
    543e:	234b      	movs	r3, #75	; 0x4b
    5440:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.sin_rot	= sr;
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;
	leds.two_cutoff = tc;
	leds.sin_all_freq = saf;
	leds.sin_phase  = 0;
    5444:	2300      	movs	r3, #0
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue	= sh;
    5446:	f884 e347 	strb.w	lr, [r4, #839]	; 0x347
	leds.two_hue	= th;
    544a:	f884 734d 	strb.w	r7, [r4, #845]	; 0x34d
	leds.sin_speed	= ss;
    544e:	f884 c340 	strb.w	ip, [r4, #832]	; 0x340
	leds.two_speed	= ts;
    5452:	f884 0349 	strb.w	r0, [r4, #841]	; 0x349
	leds.sin_rot	= sr;
    5456:	f884 b342 	strb.w	fp, [r4, #834]	; 0x342
	leds.two_rot	= tr;
    545a:	f884 134a 	strb.w	r1, [r4, #842]	; 0x34a
	leds.sin_cutoff = sc;
    545e:	f884 8341 	strb.w	r8, [r4, #833]	; 0x341
	leds.two_cutoff = tc;
    5462:	f884 234b 	strb.w	r2, [r4, #843]	; 0x34b
	leds.sin_all_freq = saf;
    5466:	f884 6343 	strb.w	r6, [r4, #835]	; 0x343
	leds.sin_phase  = 0;
    546a:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	leds.two_phase  = 0;
    546e:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c



void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5472:	4b78      	ldr	r3, [pc, #480]	; (5654 <two_sin(LEDStruct&)+0x37c>)
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	2b00      	cmp	r3, #0
    5478:	f040 8101 	bne.w	567e <two_sin(LEDStruct&)+0x3a6>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    547c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5480:	2b00      	cmp	r3, #0
    5482:	f040 80e9 	bne.w	5658 <two_sin(LEDStruct&)+0x380>
    5486:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    548a:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    548e:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    5492:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    5496:	4402      	add	r2, r0
    5498:	440b      	add	r3, r1
    549a:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    549e:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    54a2:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    54a6:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    54aa:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    54ae:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range - 1; k++) {
    54b2:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    54b6:	4494      	add	ip, r2
    54b8:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    54bc:	4403      	add	r3, r0

	for (int k = 0; k < leds.strip_range - 1; k++) {
    54be:	2901      	cmp	r1, #1
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    54c0:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    54c4:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range - 1; k++) {
    54c8:	f340 80bf 	ble.w	564a <two_sin(LEDStruct&)+0x372>
    54cc:	4626      	mov	r6, r4
    54ce:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    54d0:	25ff      	movs	r5, #255	; 0xff
    54d2:	e08c      	b.n	55ee <two_sin(LEDStruct&)+0x316>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    54d4:	2b00      	cmp	r3, #0
        in = 255 - in;
    54d6:	bfbc      	itt	lt
    54d8:	43c9      	mvnlt	r1, r1
    54da:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    54dc:	0049      	lsls	r1, r1, #1
    54de:	b2c9      	uxtb	r1, r1
    54e0:	1c4b      	adds	r3, r1, #1
    54e2:	fb03 f101 	mul.w	r1, r3, r1
    54e6:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    54e8:	fb01 f303 	mul.w	r3, r1, r3
    54ec:	121b      	asrs	r3, r3, #8
    54ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    54f2:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    54f6:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    54f8:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    54fa:	bf54      	ite	pl
    54fc:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5500:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    5504:	ebc8 0e0e 	rsb	lr, r8, lr
    5508:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    550c:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    5510:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5514:	3b80      	subs	r3, #128	; 0x80
    5516:	4403      	add	r3, r0
    5518:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    551a:	b259      	sxtb	r1, r3
    551c:	2900      	cmp	r1, #0
        in = 255 - in;
    551e:	bfba      	itte	lt
    5520:	43da      	mvnlt	r2, r3
    5522:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5524:	461a      	movge	r2, r3
    5526:	0052      	lsls	r2, r2, #1
    5528:	b2d2      	uxtb	r2, r2
    552a:	1c50      	adds	r0, r2, #1
    552c:	fb00 f202 	mul.w	r2, r0, r2
    5530:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5532:	fb02 f000 	mul.w	r0, r2, r0
    5536:	1200      	asrs	r0, r0, #8
    5538:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    553c:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    5540:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5542:	05d0      	lsls	r0, r2, #23
    5544:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5548:	bf54      	ite	pl
    554a:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    554c:	22ff      	movmi	r2, #255	; 0xff
    554e:	4290      	cmp	r0, r2
    5550:	d279      	bcs.n	5646 <two_sin(LEDStruct&)+0x36e>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5552:	2900      	cmp	r1, #0
        in = 255 - in;
    5554:	bfbc      	itt	lt
    5556:	43db      	mvnlt	r3, r3
    5558:	b2db      	uxtblt	r3, r3
    555a:	005a      	lsls	r2, r3, #1
    555c:	b2d2      	uxtb	r2, r2
    555e:	1c53      	adds	r3, r2, #1
    5560:	fb03 f202 	mul.w	r2, r3, r2
    5564:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5566:	fb02 f303 	mul.w	r3, r2, r3
    556a:	121b      	asrs	r3, r3, #8
    556c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5570:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5574:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5576:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5578:	bf54      	ite	pl
    557a:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    557c:	23ff      	movmi	r3, #255	; 0xff
    557e:	1a1b      	subs	r3, r3, r0
    5580:	b2db      	uxtb	r3, r3
    5582:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5586:	4631      	mov	r1, r6
    5588:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    558a:	f88d c004 	strb.w	ip, [sp, #4]
    558e:	f88d e006 	strb.w	lr, [sp, #6]
    5592:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5596:	f003 fd8d 	bl	90b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    559a:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    559e:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    55a2:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(