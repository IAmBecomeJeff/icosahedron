
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 95 1d 00 00 4d 1d 00 00     ... ........M...
      10:	4d 1d 00 00 4d 1d 00 00 4d 1d 00 00 4d 1d 00 00     M...M...M...M...
      20:	4d 1d 00 00 4d 1d 00 00 4d 1d 00 00 95 1d 00 00     M...M...M.......
      30:	95 1d 00 00 4d 1d 00 00 c1 31 00 00 c5 32 00 00     ....M....1...2..
      40:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      50:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      60:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      70:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      80:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      90:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      a0:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      b0:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      c0:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      d0:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      e0:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
      f0:	95 1d 00 00 bd 34 00 00 95 1d 00 00 e9 35 00 00     .....4.......5..
     100:	95 1d 00 00 15 37 00 00 95 1d 00 00 95 1d 00 00     .....7..........
     110:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     120:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     130:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     140:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     150:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     160:	95 1d 00 00 dd 21 00 00 95 1d 00 00 95 1d 00 00     .....!..........
     170:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     180:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     190:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     1a0:	95 1d 00 00 95 1d 00 00 95 1d 00 00 95 1d 00 00     ................
     1b0:	95 1d 00 00 95 1d 00 00 95 1d 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f001 fde4 	bl	1d9c <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f001 fe38 	bl	1f48 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f001 fda9 	bl	1e38 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f001 fd9a 	bl	1e38 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f003 fab8 	bl	387c <__libc_init_array>

	startup_late_hook();
     30c:	f001 fd4c 	bl	1da8 <startup_late_hook>
	main();
     310:	f002 ffe0 	bl	32d4 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c0c 	.word	0x1fff8c0c
     33c:	00003d0c 	.word	0x00003d0c
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c0c 	.word	0x1fff8c0c
     348:	1fff95f8 	.word	0x1fff95f8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e21d439 	.word	0x5e21d439
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c0c 	.word	0x1fff8c0c
     42c:	00000000 	.word	0x00000000
     430:	00003d10 	.word	0x00003d10

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c10 	.word	0x1fff8c10
     460:	00003d10 	.word	0x00003d10
     464:	1fff8c0c 	.word	0x1fff8c0c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b508      	push	{r3, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	2007      	movs	r0, #7
     496:	f001 fce1 	bl	1e5c <pinMode>
     49a:	2101      	movs	r1, #1
     49c:	200e      	movs	r0, #14
     49e:	f001 fcdd 	bl	1e5c <pinMode>
		// set the pins to output
		FastPin<_DATA_PIN>::setOutput();
		FastPin<_CLOCK_PIN>::setOutput();

		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
     4a2:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x40>)
     4a4:	6813      	ldr	r3, [r2, #0]
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
     4a6:	04d9      	lsls	r1, r3, #19
     4a8:	d405      	bmi.n	4b6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x26>
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     4aa:	490a      	ldr	r1, [pc, #40]	; (4d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     4ac:	480a      	ldr	r0, [pc, #40]	; (4d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x48>)
		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
     4ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4b2:	6013      	str	r3, [r2, #0]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     4b4:	60c8      	str	r0, [r1, #12]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
			}
		}

		// Configure SPI as the master and enable
		SPIX.MCR |= SPI_MCR_MSTR; // | SPI_MCR_CONT_SCKE);
     4b6:	4a07      	ldr	r2, [pc, #28]	; (4d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     4b8:	6813      	ldr	r3, [r2, #0]
     4ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4be:	6013      	str	r3, [r2, #0]
		SPIX.MCR &= ~(SPI_MCR_MDIS | SPI_MCR_HALT);
     4c0:	6813      	ldr	r3, [r2, #0]
     4c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     4c6:	f023 0301 	bic.w	r3, r3, #1
     4ca:	6013      	str	r3, [r2, #0]
     4cc:	bd08      	pop	{r3, pc}
     4ce:	bf00      	nop
     4d0:	4004803c 	.word	0x4004803c
     4d4:	4002c000 	.word	0x4002c000
     4d8:	38010001 	.word	0x38010001

000004dc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4e0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4e2:	6805      	ldr	r5, [r0, #0]
     4e4:	f88d 3004 	strb.w	r3, [sp, #4]
     4e8:	f88d 3005 	strb.w	r3, [sp, #5]
     4ec:	f88d 3006 	strb.w	r3, [sp, #6]
     4f0:	682e      	ldr	r6, [r5, #0]
     4f2:	4a37      	ldr	r2, [pc, #220]	; (5d0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4f4:	f88d 3008 	strb.w	r3, [sp, #8]
     4f8:	4296      	cmp	r6, r2
     4fa:	f88d 3009 	strb.w	r3, [sp, #9]
     4fe:	f88d 300a 	strb.w	r3, [sp, #10]
     502:	d15f      	bne.n	5c4 <CLEDController::clearLeds(int)+0xe8>
     504:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     506:	9104      	str	r1, [sp, #16]
     508:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     50c:	a801      	add	r0, sp, #4
     50e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     510:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     514:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     518:	f88d 3020 	strb.w	r3, [sp, #32]
     51c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     51e:	d015      	beq.n	54c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     520:	f88d 301d 	strb.w	r3, [sp, #29]
     524:	f88d 301c 	strb.w	r3, [sp, #28]
     528:	f88d 301b 	strb.w	r3, [sp, #27]
     52c:	f88d 301a 	strb.w	r3, [sp, #26]
     530:	f88d 3019 	strb.w	r3, [sp, #25]
     534:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     538:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     53a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     53c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     540:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     542:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     544:	a903      	add	r1, sp, #12
     546:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     548:	b00b      	add	sp, #44	; 0x2c
     54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     54c:	4a21      	ldr	r2, [pc, #132]	; (5d4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     54e:	7813      	ldrb	r3, [r2, #0]
     550:	3301      	adds	r3, #1
     552:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     556:	f013 0f01 	tst.w	r3, #1
     55a:	bf14      	ite	ne
     55c:	2180      	movne	r1, #128	; 0x80
     55e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     560:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     562:	079a      	lsls	r2, r3, #30
     564:	bf44      	itt	mi
     566:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     56a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     56c:	075b      	lsls	r3, r3, #29
     56e:	bf48      	it	mi
     570:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     574:	3110      	adds	r1, #16
     576:	2200      	movs	r2, #0
     578:	b2c9      	uxtb	r1, r1
     57a:	f10d 031b 	add.w	r3, sp, #27
     57e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     582:	f44f 7e80 	mov.w	lr, #256	; 0x100
     586:	b1aa      	cbz	r2, 5b4 <CLEDController::clearLeds(int)+0xd8>
     588:	fb9e f2f2 	sdiv	r2, lr, r2
     58c:	b2d2      	uxtb	r2, r2
     58e:	1c50      	adds	r0, r2, #1
     590:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     592:	fb00 1501 	mla	r5, r0, r1, r1
     596:	122d      	asrs	r5, r5, #8
     598:	7018      	strb	r0, [r3, #0]
     59a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     59c:	b105      	cbz	r5, 5a0 <CLEDController::clearLeds(int)+0xc4>
     59e:	3e01      	subs	r6, #1
     5a0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     5a4:	b100      	cbz	r0, 5a8 <CLEDController::clearLeds(int)+0xcc>
     5a6:	701a      	strb	r2, [r3, #0]
     5a8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5aa:	429f      	cmp	r7, r3
     5ac:	d008      	beq.n	5c0 <CLEDController::clearLeds(int)+0xe4>
     5ae:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5b0:	2a00      	cmp	r2, #0
     5b2:	d1e9      	bne.n	588 <CLEDController::clearLeds(int)+0xac>
     5b4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5b6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5ba:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5bc:	429f      	cmp	r7, r3
     5be:	d1f6      	bne.n	5ae <CLEDController::clearLeds(int)+0xd2>
     5c0:	6825      	ldr	r5, [r4, #0]
     5c2:	e7b9      	b.n	538 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5c4:	460a      	mov	r2, r1
     5c6:	ab02      	add	r3, sp, #8
     5c8:	a901      	add	r1, sp, #4
     5ca:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5cc:	b00b      	add	sp, #44	; 0x2c
     5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5d0:	000008e1 	.word	0x000008e1
     5d4:	1fff8c28 	.word	0x1fff8c28

000005d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
     5d8:	4b7d      	ldr	r3, [pc, #500]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
     5da:	4a7e      	ldr	r2, [pc, #504]	; (7d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
     5e0:	68df      	ldr	r7, [r3, #12]
     5e2:	61c7      	str	r7, [r0, #28]
		gState._ctar1 = SPIX.CTAR1;
     5e4:	691b      	ldr	r3, [r3, #16]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     5e6:	4e7c      	ldr	r6, [pc, #496]	; (7d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;
     5e8:	6203      	str	r3, [r0, #32]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     5ea:	6833      	ldr	r3, [r6, #0]
		gState.pins[1] = CORE_PIN11_CONFIG;
     5ec:	4d7b      	ldr	r5, [pc, #492]	; (7dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     5ee:	6243      	str	r3, [r0, #36]	; 0x24
		gState.pins[1] = CORE_PIN11_CONFIG;
     5f0:	682b      	ldr	r3, [r5, #0]
		gState.pins[2] = CORE_PIN13_CONFIG;
     5f2:	4c7b      	ldr	r4, [pc, #492]	; (7e0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
     5f4:	6283      	str	r3, [r0, #40]	; 0x28
		gState.pins[2] = CORE_PIN13_CONFIG;
     5f6:	6823      	ldr	r3, [r4, #0]
     5f8:	62c3      	str	r3, [r0, #44]	; 0x2c
     5fa:	4680      	mov	r8, r0
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     5fc:	6980      	ldr	r0, [r0, #24]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
     5fe:	6813      	ldr	r3, [r2, #0]
     600:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
     604:	b083      	sub	sp, #12
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     606:	b150      	cbz	r0, 61e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
     608:	6803      	ldr	r3, [r0, #0]
     60a:	4a76      	ldr	r2, [pc, #472]	; (7e4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	4293      	cmp	r3, r2
     610:	f040 8153 	bne.w	8ba <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e2>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     614:	6842      	ldr	r2, [r0, #4]
     616:	7b00      	ldrb	r0, [r0, #12]
     618:	7813      	ldrb	r3, [r2, #0]
     61a:	4303      	orrs	r3, r0
     61c:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     61e:	4b6c      	ldr	r3, [pc, #432]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     620:	68da      	ldr	r2, [r3, #12]
     622:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
     626:	f000 812b 	beq.w	880 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a8>
		uint32_t mcr = SPIX.MCR;
     62a:	4b69      	ldr	r3, [pc, #420]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     62c:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     62e:	0455      	lsls	r5, r2, #17
     630:	f100 8130 	bmi.w	894 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2bc>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     634:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
     638:	f040 0001 	orr.w	r0, r0, #1
			SPIX.CTAR0 = ctar0;
     63c:	f04f 5560 	mov.w	r5, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
     640:	f04f 44f0 	mov.w	r4, #2013265920	; 0x78000000
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     644:	6018      	str	r0, [r3, #0]
			SPIX.CTAR0 = ctar0;
     646:	60dd      	str	r5, [r3, #12]
			SPIX.CTAR1 = ctar1;
     648:	611c      	str	r4, [r3, #16]
			SPIX.MCR = mcr;
     64a:	601a      	str	r2, [r3, #0]
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     64c:	4b62      	ldr	r3, [pc, #392]	; (7d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     64e:	4d61      	ldr	r5, [pc, #388]	; (7d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     650:	4c63      	ldr	r4, [pc, #396]	; (7e0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     652:	4e62      	ldr	r6, [pc, #392]	; (7dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     654:	485e      	ldr	r0, [pc, #376]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     656:	f44f 7210 	mov.w	r2, #576	; 0x240
     65a:	601a      	str	r2, [r3, #0]
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     65c:	f44f 73a2 	mov.w	r3, #324	; 0x144
     660:	6033      	str	r3, [r6, #0]
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     662:	602a      	str	r2, [r5, #0]
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     664:	6023      	str	r3, [r4, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     666:	7d0c      	ldrb	r4, [r1, #20]
     668:	7ccd      	ldrb	r5, [r1, #19]
     66a:	f891 b012 	ldrb.w	fp, [r1, #18]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     66e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     670:	4b57      	ldr	r3, [pc, #348]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     672:	0457      	lsls	r7, r2, #17
     674:	d4fb      	bmi.n	66e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x96>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     676:	b672      	cpsid	i
     678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     67c:	635a      	str	r2, [r3, #52]	; 0x34
     67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     680:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     684:	62da      	str	r2, [r3, #44]	; 0x2c
     686:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     68a:	4851      	ldr	r0, [pc, #324]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     68c:	0456      	lsls	r6, r2, #17
     68e:	d4fb      	bmi.n	688 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     690:	b672      	cpsid	i
     692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     696:	6343      	str	r3, [r0, #52]	; 0x34
     698:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     69a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     69e:	62c3      	str	r3, [r0, #44]	; 0x2c
     6a0:	b662      	cpsie	i
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     6a2:	688b      	ldr	r3, [r1, #8]
     6a4:	2b00      	cmp	r3, #0
     6a6:	dd5a      	ble.n	75e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x186>
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     6a8:	4603      	mov	r3, r0
     6aa:	1c68      	adds	r0, r5, #1
     6ac:	4607      	mov	r7, r0
     6ae:	1c60      	adds	r0, r4, #1
     6b0:	4604      	mov	r4, r0
     6b2:	680a      	ldr	r2, [r1, #0]
     6b4:	f8cd 8004 	str.w	r8, [sp, #4]
     6b8:	f10b 0b01 	add.w	fp, fp, #1
     6bc:	4618      	mov	r0, r3
     6be:	46a2      	mov	sl, r4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     6c0:	698c      	ldr	r4, [r1, #24]
     6c2:	1915      	adds	r5, r2, r4
     6c4:	5d14      	ldrb	r4, [r2, r4]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     6c6:	78ae      	ldrb	r6, [r5, #2]
     6c8:	786a      	ldrb	r2, [r5, #1]
     6ca:	fb0a f606 	mul.w	r6, sl, r6
     6ce:	fb0b f404 	mul.w	r4, fp, r4
     6d2:	f3c6 2607 	ubfx	r6, r6, #8, #8
     6d6:	fb07 f202 	mul.w	r2, r7, r2
     6da:	1224      	asrs	r4, r4, #8
     6dc:	f446 467f 	orr.w	r6, r6, #65280	; 0xff00
     6e0:	1215      	asrs	r5, r2, #8
     6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     6e4:	0452      	lsls	r2, r2, #17
     6e6:	d4fc      	bmi.n	6e2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     6e8:	b672      	cpsid	i
     6ea:	f046 5280 	orr.w	r2, r6, #268435456	; 0x10000000
     6ee:	6342      	str	r2, [r0, #52]	; 0x34
     6f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     6f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     6f6:	62c2      	str	r2, [r0, #44]	; 0x2c
     6f8:	b662      	cpsie	i
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
     6fa:	022a      	lsls	r2, r5, #8
     6fc:	b292      	uxth	r2, r2
		w |= b2;
     6fe:	4322      	orrs	r2, r4
     700:	b294      	uxth	r4, r2
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     704:	0452      	lsls	r2, r2, #17
     706:	d4fc      	bmi.n	702 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     708:	b672      	cpsid	i
     70a:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
     70e:	6342      	str	r2, [r0, #52]	; 0x34
     710:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     712:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     716:	62c2      	str	r2, [r0, #44]	; 0x2c
     718:	b662      	cpsie	i

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     71a:	688c      	ldr	r4, [r1, #8]
     71c:	9400      	str	r4, [sp, #0]
     71e:	f991 2015 	ldrsb.w	r2, [r1, #21]
     722:	680c      	ldr	r4, [r1, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     724:	f891 900c 	ldrb.w	r9, [r1, #12]
                d[1] = e[1] - d[1];
     728:	7b4e      	ldrb	r6, [r1, #13]
                d[2] = e[2] - d[2];
     72a:	7b8d      	ldrb	r5, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     72c:	f891 e00f 	ldrb.w	lr, [r1, #15]
                d[1] = e[1] - d[1];
     730:	f891 8010 	ldrb.w	r8, [r1, #16]
                d[2] = e[2] - d[2];
     734:	f891 c011 	ldrb.w	ip, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     738:	4422      	add	r2, r4
     73a:	9c00      	ldr	r4, [sp, #0]
     73c:	600a      	str	r2, [r1, #0]
     73e:	3c01      	subs	r4, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     740:	ebc9 0e0e 	rsb	lr, r9, lr
                d[1] = e[1] - d[1];
     744:	ebc6 0608 	rsb	r6, r6, r8
                d[2] = e[2] - d[2];
     748:	ebc5 050c 	rsb	r5, r5, ip
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     74c:	2c00      	cmp	r4, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     74e:	f881 e00c 	strb.w	lr, [r1, #12]
                d[1] = e[1] - d[1];
     752:	734e      	strb	r6, [r1, #13]
                d[2] = e[2] - d[2];
     754:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     756:	608c      	str	r4, [r1, #8]
     758:	dcb2      	bgt.n	6c0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
     75a:	f8dd 8004 	ldr.w	r8, [sp, #4]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     75e:	6848      	ldr	r0, [r1, #4]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     760:	4a1b      	ldr	r2, [pc, #108]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     762:	2800      	cmp	r0, #0
     764:	bfb8      	it	lt
     766:	301f      	addlt	r0, #31
     768:	1140      	asrs	r0, r0, #5
     76a:	4611      	mov	r1, r2
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     76c:	24ff      	movs	r4, #255	; 0xff
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     76e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     770:	045e      	lsls	r6, r3, #17
     772:	d4fc      	bmi.n	76e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     774:	b672      	cpsid	i
     776:	634c      	str	r4, [r1, #52]	; 0x34
     778:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     77a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     77e:	62cb      	str	r3, [r1, #44]	; 0x2c
     780:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     782:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     784:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     788:	d1fb      	bne.n	782 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1aa>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     78a:	b672      	cpsid	i
     78c:	634b      	str	r3, [r1, #52]	; 0x34
     78e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     794:	62cb      	str	r3, [r1, #44]	; 0x2c
     796:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     798:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     79a:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     79e:	d1fb      	bne.n	798 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c0>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     7a0:	b672      	cpsid	i
     7a2:	634b      	str	r3, [r1, #52]	; 0x34
     7a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     7a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7aa:	62cb      	str	r3, [r1, #44]	; 0x2c
     7ac:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     7ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     7b0:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     7b4:	d1fb      	bne.n	7ae <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d6>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     7b6:	b672      	cpsid	i
     7b8:	634b      	str	r3, [r1, #52]	; 0x34
     7ba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     7bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7c0:	62cb      	str	r3, [r1, #44]	; 0x2c
     7c2:	b662      	cpsie	i
     7c4:	f110 30ff 	adds.w	r0, r0, #4294967295
     7c8:	d2d1      	bcs.n	76e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
			cli();
			if ((SPIX.SR & 0xF000) > 0) {
     7ca:	4a01      	ldr	r2, [pc, #4]	; (7d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     7cc:	e013      	b.n	7f6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
     7ce:	bf00      	nop
     7d0:	4002c000 	.word	0x4002c000
     7d4:	4004c004 	.word	0x4004c004
     7d8:	4004c008 	.word	0x4004c008
     7dc:	4004b018 	.word	0x4004b018
     7e0:	4004b014 	.word	0x4004b014
     7e4:	00000475 	.word	0x00000475
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
     7e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     7ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7ee:	62d3      	str	r3, [r2, #44]	; 0x2c
     7f0:	2300      	movs	r3, #0
			} else {
				empty = true;
			}
			sei();
     7f2:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
     7f4:	b943      	cbnz	r3, 808 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x230>
			cli();
     7f6:	b672      	cpsid	i
			if ((SPIX.SR & 0xF000) > 0) {
     7f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     7fa:	f413 4f70 	tst.w	r3, #61440	; 0xf000
     7fe:	d1f3      	bne.n	7e8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
			} else {
				empty = true;
     800:	2301      	movs	r3, #1
			}
			sei();
     802:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
     804:	2b00      	cmp	r3, #0
     806:	d0f6      	beq.n	7f6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
			}
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
     808:	492f      	ldr	r1, [pc, #188]	; (8c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     80a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     80c:	4a2e      	ldr	r2, [pc, #184]	; (8c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     80e:	2b00      	cmp	r3, #0
     810:	dafb      	bge.n	80a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x232>
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
     812:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     814:	4e2d      	ldr	r6, [pc, #180]	; (8cc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     816:	f8d8 0018 	ldr.w	r0, [r8, #24]
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     81a:	4d2d      	ldr	r5, [pc, #180]	; (8d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
     81c:	4c2d      	ldr	r4, [pc, #180]	; (8d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)
     81e:	492e      	ldr	r1, [pc, #184]	; (8d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
     820:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     824:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     826:	f44f 73a2 	mov.w	r3, #324	; 0x144
     82a:	6033      	str	r3, [r6, #0]
     82c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     830:	602a      	str	r2, [r5, #0]
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
     832:	6023      	str	r3, [r4, #0]
     834:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
     838:	600b      	str	r3, [r1, #0]
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     83a:	b150      	cbz	r0, 852 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
     83c:	6803      	ldr	r3, [r0, #0]
     83e:	4a27      	ldr	r2, [pc, #156]	; (8dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
     840:	685b      	ldr	r3, [r3, #4]
     842:	4293      	cmp	r3, r2
     844:	d13d      	bne.n	8c2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ea>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     846:	6842      	ldr	r2, [r0, #4]
     848:	7b01      	ldrb	r1, [r0, #12]
     84a:	7813      	ldrb	r3, [r2, #0]
     84c:	ea23 0301 	bic.w	r3, r3, r1
     850:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     852:	4b1d      	ldr	r3, [pc, #116]	; (8c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
     854:	f8d8 201c 	ldr.w	r2, [r8, #28]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     858:	68d9      	ldr	r1, [r3, #12]
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
     85a:	f8d8 0020 	ldr.w	r0, [r8, #32]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     85e:	428a      	cmp	r2, r1
     860:	d01f      	beq.n	8a2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ca>
		uint32_t mcr = SPIX.MCR;
     862:	4b19      	ldr	r3, [pc, #100]	; (8c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     864:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     866:	044c      	lsls	r4, r1, #17
     868:	d422      	bmi.n	8b0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2d8>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     86a:	f441 4480 	orr.w	r4, r1, #16384	; 0x4000
     86e:	f044 0401 	orr.w	r4, r4, #1
     872:	601c      	str	r4, [r3, #0]
			SPIX.CTAR0 = ctar0;
     874:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
     876:	6118      	str	r0, [r3, #16]
			SPIX.MCR = mcr;
     878:	6019      	str	r1, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
     87a:	b003      	add	sp, #12
     87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     880:	691b      	ldr	r3, [r3, #16]
     882:	f1b3 4ff0 	cmp.w	r3, #2013265920	; 0x78000000
     886:	f43f aee1 	beq.w	64c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
		uint32_t mcr = SPIX.MCR;
     88a:	4b0f      	ldr	r3, [pc, #60]	; (8c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     88c:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     88e:	0455      	lsls	r5, r2, #17
     890:	f57f aed0 	bpl.w	634 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5c>
			SPIX.CTAR0 = ctar0;
     894:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
     898:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
     89c:	60d8      	str	r0, [r3, #12]
			SPIX.CTAR1 = ctar1;
     89e:	611a      	str	r2, [r3, #16]
     8a0:	e6d4      	b.n	64c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     8a2:	691b      	ldr	r3, [r3, #16]
     8a4:	4298      	cmp	r0, r3
     8a6:	d0e8      	beq.n	87a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a2>
		uint32_t mcr = SPIX.MCR;
     8a8:	4b07      	ldr	r3, [pc, #28]	; (8c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     8aa:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     8ac:	044c      	lsls	r4, r1, #17
     8ae:	d5dc      	bpl.n	86a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x292>
			SPIX.CTAR0 = ctar0;
     8b0:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
     8b2:	6118      	str	r0, [r3, #16]
     8b4:	b003      	add	sp, #12
     8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ba:	9100      	str	r1, [sp, #0]
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     8bc:	4798      	blx	r3
     8be:	9900      	ldr	r1, [sp, #0]
     8c0:	e6ad      	b.n	61e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     8c2:	4798      	blx	r3
     8c4:	e7c5      	b.n	852 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
     8c6:	bf00      	nop
     8c8:	4002c000 	.word	0x4002c000
     8cc:	4004c008 	.word	0x4004c008
     8d0:	4004b018 	.word	0x4004b018
     8d4:	4004c004 	.word	0x4004c004
     8d8:	4004b014 	.word	0x4004b014
     8dc:	00000481 	.word	0x00000481

000008e0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e2:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8e4:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     8e6:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     8e8:	789b      	ldrb	r3, [r3, #2]
     8ea:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8ec:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     8ee:	9101      	str	r1, [sp, #4]
     8f0:	9202      	str	r2, [sp, #8]
     8f2:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8f4:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     8f8:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     8fc:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     900:	d016      	beq.n	930 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     902:	2300      	movs	r3, #0
     904:	f88d 3015 	strb.w	r3, [sp, #21]
     908:	f88d 3014 	strb.w	r3, [sp, #20]
     90c:	f88d 3013 	strb.w	r3, [sp, #19]
     910:	f88d 3012 	strb.w	r3, [sp, #18]
     914:	f88d 3011 	strb.w	r3, [sp, #17]
     918:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     91c:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     91e:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     920:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     922:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     926:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     928:	a901      	add	r1, sp, #4
     92a:	4790      	blx	r2
  }
     92c:	b009      	add	sp, #36	; 0x24
     92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     930:	4a1b      	ldr	r2, [pc, #108]	; (9a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     932:	7813      	ldrb	r3, [r2, #0]
     934:	3301      	adds	r3, #1
     936:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     93a:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     93e:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     940:	bf14      	ite	ne
     942:	2280      	movne	r2, #128	; 0x80
     944:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     946:	0799      	lsls	r1, r3, #30
     948:	bf44      	itt	mi
     94a:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     94e:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     950:	075b      	lsls	r3, r3, #29
     952:	bf48      	it	mi
     954:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     958:	3210      	adds	r2, #16
     95a:	b2d2      	uxtb	r2, r2
     95c:	f10d 0313 	add.w	r3, sp, #19
     960:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     964:	f44f 7e80 	mov.w	lr, #256	; 0x100
     968:	b1ac      	cbz	r4, 996 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     96a:	fb9e f4f4 	sdiv	r4, lr, r4
     96e:	b2e4      	uxtb	r4, r4
     970:	1c61      	adds	r1, r4, #1
     972:	b2c9      	uxtb	r1, r1
     974:	fb01 2502 	mla	r5, r1, r2, r2
     978:	122d      	asrs	r5, r5, #8
     97a:	7019      	strb	r1, [r3, #0]
     97c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     97e:	b105      	cbz	r5, 982 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     980:	3e01      	subs	r6, #1
     982:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     986:	b101      	cbz	r1, 98a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     988:	701c      	strb	r4, [r3, #0]
     98a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     98c:	42bb      	cmp	r3, r7
     98e:	d0c5      	beq.n	91c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     990:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     992:	2c00      	cmp	r4, #0
     994:	d1e9      	bne.n	96a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     996:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     998:	f803 4c03 	strb.w	r4, [r3, #-3]
     99c:	e7f5      	b.n	98a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     99e:	bf00      	nop
     9a0:	1fff8c28 	.word	0x1fff8c28

000009a4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a6:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9a8:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     9aa:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     9ac:	789b      	ldrb	r3, [r3, #2]
     9ae:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     9b0:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     9b2:	9101      	str	r1, [sp, #4]
     9b4:	9202      	str	r2, [sp, #8]
     9b6:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9b8:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     9bc:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     9c0:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     9c4:	d017      	beq.n	9f6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     9c6:	2300      	movs	r3, #0
     9c8:	f88d 3015 	strb.w	r3, [sp, #21]
     9cc:	f88d 3014 	strb.w	r3, [sp, #20]
     9d0:	f88d 3013 	strb.w	r3, [sp, #19]
     9d4:	f88d 3012 	strb.w	r3, [sp, #18]
     9d8:	f88d 3011 	strb.w	r3, [sp, #17]
     9dc:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     9e0:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     9e2:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     9e4:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     9e6:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     9e8:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     9ec:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     9ee:	a901      	add	r1, sp, #4
     9f0:	4798      	blx	r3
  }
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     9f6:	4a1b      	ldr	r2, [pc, #108]	; (a64 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     9f8:	7813      	ldrb	r3, [r2, #0]
     9fa:	3301      	adds	r3, #1
     9fc:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a00:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a04:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a06:	bf14      	ite	ne
     a08:	2280      	movne	r2, #128	; 0x80
     a0a:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     a0c:	0799      	lsls	r1, r3, #30
     a0e:	bf44      	itt	mi
     a10:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     a14:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     a16:	075b      	lsls	r3, r3, #29
     a18:	bf48      	it	mi
     a1a:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     a1e:	3210      	adds	r2, #16
     a20:	b2d2      	uxtb	r2, r2
     a22:	f10d 0313 	add.w	r3, sp, #19
     a26:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a2a:	f44f 7e80 	mov.w	lr, #256	; 0x100
     a2e:	b1ac      	cbz	r4, a5c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     a30:	fb9e f4f4 	sdiv	r4, lr, r4
     a34:	b2e4      	uxtb	r4, r4
     a36:	1c61      	adds	r1, r4, #1
     a38:	b2c9      	uxtb	r1, r1
     a3a:	fb01 2502 	mla	r5, r1, r2, r2
     a3e:	122d      	asrs	r5, r5, #8
     a40:	7019      	strb	r1, [r3, #0]
     a42:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     a44:	b105      	cbz	r5, a48 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     a46:	3e01      	subs	r6, #1
     a48:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     a4c:	b101      	cbz	r1, a50 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     a4e:	701c      	strb	r4, [r3, #0]
     a50:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     a52:	42bb      	cmp	r3, r7
     a54:	d0c4      	beq.n	9e0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     a56:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a58:	2c00      	cmp	r4, #0
     a5a:	d1e9      	bne.n	a30 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     a5c:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     a5e:	f803 4c03 	strb.w	r4, [r3, #-3]
     a62:	e7f5      	b.n	a50 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     a64:	1fff8c28 	.word	0x1fff8c28

00000a68 <juggle(LEDStruct&)>:
	leds.juggle_index_reset = jir;
}



void juggle(LEDStruct& leds) {
     a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
     a6c:	f890 222a 	ldrb.w	r2, [r0, #554]	; 0x22a
	leds.juggle_index_reset = jir;
}



void juggle(LEDStruct& leds) {
     a70:	b089      	sub	sp, #36	; 0x24
     a72:	4606      	mov	r6, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
     a74:	2a00      	cmp	r2, #0
     a76:	f000 80e4 	beq.w	c42 <juggle(LEDStruct&)+0x1da>
     a7a:	f890 e230 	ldrb.w	lr, [r0, #560]	; 0x230
     a7e:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
     a82:	f1be 0f00 	cmp.w	lr, #0
     a86:	d002      	beq.n	a8e <juggle(LEDStruct&)+0x26>
     a88:	2300      	movs	r3, #0
     a8a:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
     a8e:	2196      	movs	r1, #150	; 0x96
     a90:	4630      	mov	r0, r6
     a92:	f000 fbe7 	bl	1264 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
     a96:	f896 322c 	ldrb.w	r3, [r6, #556]	; 0x22c
     a9a:	2b00      	cmp	r3, #0
     a9c:	f000 80ce 	beq.w	c3c <juggle(LEDStruct&)+0x1d4>
     aa0:	f106 04e1 	add.w	r4, r6, #225	; 0xe1
     aa4:	f896 222b 	ldrb.w	r2, [r6, #555]	; 0x22b
     aa8:	f8df b260 	ldr.w	fp, [pc, #608]	; d0c <juggle(LEDStruct&)+0x2a4>
     aac:	f8df a260 	ldr.w	sl, [pc, #608]	; d10 <juggle(LEDStruct&)+0x2a8>
     ab0:	9403      	str	r4, [sp, #12]
     ab2:	2700      	movs	r7, #0
     ab4:	f506 78e2 	add.w	r8, r6, #452	; 0x1c4
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     ab8:	f44f 798c 	mov.w	r9, #280	; 0x118
     abc:	e05a      	b.n	b74 <juggle(LEDStruct&)+0x10c>
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)]	 += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
     abe:	f896 122d 	ldrb.w	r1, [r6, #557]	; 0x22d
     ac2:	443b      	add	r3, r7
     ac4:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ac6:	f8db 1000 	ldr.w	r1, [fp]
     aca:	9106      	str	r1, [sp, #24]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     acc:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     ace:	9906      	ldr	r1, [sp, #24]
     ad0:	bf9c      	itt	ls
     ad2:	021b      	lslls	r3, r3, #8
     ad4:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     ad6:	fb09 f101 	mul.w	r1, r9, r1
     ada:	fb03 f301 	mul.w	r3, r3, r1
     ade:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     ae0:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     ae2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     ae6:	d503      	bpl.n	af0 <juggle(LEDStruct&)+0x88>
     ae8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
     aec:	3107      	adds	r1, #7
     aee:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     af0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     af2:	4c84      	ldr	r4, [pc, #528]	; (d04 <juggle(LEDStruct&)+0x29c>)
     af4:	f81a 5000 	ldrb.w	r5, [sl, r0]
     af8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
     afc:	f3c1 0146 	ubfx	r1, r1, #1, #7
     b00:	fb05 0101 	mla	r1, r5, r1, r0

    if( theta & 0x8000 ) y = -y;
     b04:	041c      	lsls	r4, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     b06:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
     b08:	bf48      	it	mi
     b0a:	4249      	negmi	r1, r1
     b0c:	b20d      	sxth	r5, r1
     b0e:	f896 1224 	ldrb.w	r1, [r6, #548]	; 0x224
     b12:	f896 31c2 	ldrb.w	r3, [r6, #450]	; 0x1c2
     b16:	9100      	str	r1, [sp, #0]
     b18:	a805      	add	r0, sp, #20
     b1a:	4641      	mov	r1, r8
     b1c:	f000 fbe0 	bl	12e0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     b20:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
     b24:	b29a      	uxth	r2, r3
     b26:	2397      	movs	r3, #151	; 0x97
     b28:	fb03 f302 	mul.w	r3, r3, r2
     b2c:	0c1b      	lsrs	r3, r3, #16
     b2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b32:	18f1      	adds	r1, r6, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     b34:	5cf2      	ldrb	r2, [r6, r3]
     b36:	f89d 0014 	ldrb.w	r0, [sp, #20]
     b3a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     b3e:	54f2      	strb	r2, [r6, r3]
     b40:	f89d 3015 	ldrb.w	r3, [sp, #21]
     b44:	784a      	ldrb	r2, [r1, #1]
     b46:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     b4a:	704a      	strb	r2, [r1, #1]
     b4c:	788b      	ldrb	r3, [r1, #2]
     b4e:	f89d 2016 	ldrb.w	r2, [sp, #22]
     b52:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     b56:	708b      	strb	r3, [r1, #2]
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, STRIP_LENGTH)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
     b58:	f896 122b 	ldrb.w	r1, [r6, #555]	; 0x22b
     b5c:	f896 222f 	ldrb.w	r2, [r6, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
     b60:	f896 322c 	ldrb.w	r3, [r6, #556]	; 0x22c
     b64:	3701      	adds	r7, #1
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)]	 += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, STRIP_LENGTH)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
     b66:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
     b68:	b2ff      	uxtb	r7, r7
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)]	 += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, STRIP_LENGTH)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
     b6a:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
     b6c:	42bb      	cmp	r3, r7
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)]	 += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, STRIP_LENGTH)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
     b6e:	f886 222b 	strb.w	r2, [r6, #555]	; 0x22b

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
     b72:	d963      	bls.n	c3c <juggle(LEDStruct&)+0x1d4>
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)]	 += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
     b74:	f896 1226 	ldrb.w	r1, [r6, #550]	; 0x226
     b78:	2900      	cmp	r1, #0
     b7a:	d1a0      	bne.n	abe <juggle(LEDStruct&)+0x56>
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, STRIP_LENGTH)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
     b7c:	f896 122d 	ldrb.w	r1, [r6, #557]	; 0x22d
     b80:	443b      	add	r3, r7
     b82:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b84:	f8db 1000 	ldr.w	r1, [fp]
     b88:	9107      	str	r1, [sp, #28]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     b8a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     b8c:	9907      	ldr	r1, [sp, #28]
     b8e:	bf9c      	itt	ls
     b90:	021b      	lslls	r3, r3, #8
     b92:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     b94:	fb09 f101 	mul.w	r1, r9, r1
     b98:	fb03 f301 	mul.w	r3, r3, r1
     b9c:	0c19      	lsrs	r1, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     b9e:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     ba0:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     ba4:	d503      	bpl.n	bae <juggle(LEDStruct&)+0x146>
     ba6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     baa:	3307      	adds	r3, #7
     bac:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     bae:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     bb0:	4c54      	ldr	r4, [pc, #336]	; (d04 <juggle(LEDStruct&)+0x29c>)
     bb2:	f81a 5000 	ldrb.w	r5, [sl, r0]
     bb6:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
     bba:	f3c3 0346 	ubfx	r3, r3, #1, #7
     bbe:	fb05 0303 	mla	r3, r5, r3, r0

    if( theta & 0x8000 ) y = -y;
     bc2:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     bc4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     bc6:	bf48      	it	mi
     bc8:	425b      	negmi	r3, r3
     bca:	f896 1224 	ldrb.w	r1, [r6, #548]	; 0x224
     bce:	b21d      	sxth	r5, r3
     bd0:	a805      	add	r0, sp, #20
     bd2:	f896 31c2 	ldrb.w	r3, [r6, #450]	; 0x1c2
     bd6:	9100      	str	r1, [sp, #0]
     bd8:	4641      	mov	r1, r8
     bda:	f000 fb81 	bl	12e0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     bde:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
     be2:	224c      	movs	r2, #76	; 0x4c
     be4:	b29b      	uxth	r3, r3
     be6:	fb02 f303 	mul.w	r3, r2, r3
     bea:	0c1b      	lsrs	r3, r3, #16
     bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     bf0:	18f1      	adds	r1, r6, r3
     bf2:	5cf2      	ldrb	r2, [r6, r3]
     bf4:	f89d 0014 	ldrb.w	r0, [sp, #20]
     bf8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     bfc:	54f2      	strb	r2, [r6, r3]
     bfe:	f89d 3015 	ldrb.w	r3, [sp, #21]
     c02:	784a      	ldrb	r2, [r1, #1]
     c04:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     c08:	704a      	strb	r2, [r1, #1]
     c0a:	788b      	ldrb	r3, [r1, #2]
     c0c:	f89d 2016 	ldrb.w	r2, [sp, #22]
     c10:	fa83 f352 	uqadd8	r3, r3, r2
     c14:	9c03      	ldr	r4, [sp, #12]
        b = qadd8( b, rhs.b);
     c16:	708b      	strb	r3, [r1, #2]
     c18:	4632      	mov	r2, r6
     c1a:	4633      	mov	r3, r6
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c1c:	7819      	ldrb	r1, [r3, #0]
     c1e:	f882 10de 	strb.w	r1, [r2, #222]	; 0xde
        g = rhs.g;
     c22:	7859      	ldrb	r1, [r3, #1]
     c24:	f882 10df 	strb.w	r1, [r2, #223]	; 0xdf
        b = rhs.b;
     c28:	7899      	ldrb	r1, [r3, #2]
     c2a:	f882 10e0 	strb.w	r1, [r2, #224]	; 0xe0
     c2e:	3303      	adds	r3, #3
LEDStruct current_leds;
LEDStruct next_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < STRIP_LENGTH; i++) {
     c30:	429c      	cmp	r4, r3
     c32:	f1a2 0203 	sub.w	r2, r2, #3
     c36:	d1f1      	bne.n	c1c <juggle(LEDStruct&)+0x1b4>
     c38:	9403      	str	r4, [sp, #12]
     c3a:	e78d      	b.n	b58 <juggle(LEDStruct&)+0xf0>
		leds.juggle_index += leds.juggle_diff;
	}
}
     c3c:	b009      	add	sp, #36	; 0x24
     c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c42:	4931      	ldr	r1, [pc, #196]	; (d08 <juggle(LEDStruct&)+0x2a0>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1,7), uint8_t jb = random8(8,20), uint8_t jf = random8(140,240), uint8_t jd = random8(1,9), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_name			= JUGGLE;
     c44:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
     c48:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
     c4a:	f880 222b 	strb.w	r2, [r0, #555]	; 0x22b
     c4e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     c52:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     c56:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     c5a:	3219      	adds	r2, #25
     c5c:	b292      	uxth	r2, r2
     c5e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
     c62:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     c66:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     c6a:	3019      	adds	r0, #25
     c6c:	b280      	uxth	r0, r0
     c6e:	eb00 2340 	add.w	r3, r0, r0, lsl #9
     c72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     c76:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     c7a:	3319      	adds	r3, #25
     c7c:	b29b      	uxth	r3, r3
     c7e:	eb03 2543 	add.w	r5, r3, r3, lsl #9
     c82:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     c86:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
     c8a:	3519      	adds	r5, #25
     c8c:	b2ad      	uxth	r5, r5
     c8e:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c92:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c96:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c9a:	eb02 2412 	add.w	r4, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     c9e:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ca0:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     ca4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ca8:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_numdots		= jn;
     cac:	b2e4      	uxtb	r4, r4
	leds.juggle_beat		= jb;
     cae:	b2c2      	uxtb	r2, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     cb4:	3719      	adds	r7, #25
	leds.mode_initialized	= 1;
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
     cb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	leds.juggle_beat		= jb;
     cba:	eb02 0042 	add.w	r0, r2, r2, lsl #1
     cbe:	b2bf      	uxth	r7, r7
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cc0:	119a      	asrs	r2, r3, #6
	leds.mode_initialized	= 1;
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
     cc2:	11e4      	asrs	r4, r4, #7
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cc4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.juggle_beat		= jb;
     cc8:	1183      	asrs	r3, r0, #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cca:	3a74      	subs	r2, #116	; 0x74
	leds.mode_initialized	= 1;
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
     ccc:	1c60      	adds	r0, r4, #1
	leds.juggle_beat		= jb;
	leds.juggle_fade		= jf;
	leds.juggle_diff		= jd;
     cce:	f3c5 1542 	ubfx	r5, r5, #5, #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     cd2:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
	leds.juggle_beat		= jb;
     cd6:	3308      	adds	r3, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
     cd8:	b2d2      	uxtb	r2, r2



void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
     cda:	f3ce 1ec0 	ubfx	lr, lr, #7, #1

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
	leds.juggle_beat		= jb;
	leds.juggle_fade		= jf;
	leds.juggle_diff		= jd;
     cde:	1c6c      	adds	r4, r5, #1
	leds.mode_initialized	= 1;
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
     ce0:	f886 022c 	strb.w	r0, [r6, #556]	; 0x22c
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1,7), uint8_t jb = random8(8,20), uint8_t jf = random8(140,240), uint8_t jd = random8(1,9), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
     ce4:	2001      	movs	r0, #1
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
	leds.juggle_beat		= jb;
     ce6:	f886 322d 	strb.w	r3, [r6, #557]	; 0x22d
	leds.juggle_fade		= jf;
     cea:	f886 222e 	strb.w	r2, [r6, #558]	; 0x22e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     cee:	800f      	strh	r7, [r1, #0]
	leds.juggle_diff		= jd;
	leds.juggle_index_reset = jir;
     cf0:	f886 e230 	strb.w	lr, [r6, #560]	; 0x230

	leds.juggle_index		= ji;
	leds.juggle_numdots		= jn;
	leds.juggle_beat		= jb;
	leds.juggle_fade		= jf;
	leds.juggle_diff		= jd;
     cf4:	f886 422f 	strb.w	r4, [r6, #559]	; 0x22f
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1,7), uint8_t jb = random8(8,20), uint8_t jf = random8(140,240), uint8_t jd = random8(1,9), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
     cf8:	f886 022a 	strb.w	r0, [r6, #554]	; 0x22a
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;
     cfc:	f886 0225 	strb.w	r0, [r6, #549]	; 0x225
     d00:	e6bf      	b.n	a82 <juggle(LEDStruct&)+0x1a>
     d02:	bf00      	nop
     d04:	00003a08 	.word	0x00003a08
     d08:	1fff8720 	.word	0x1fff8720
     d0c:	1fff9338 	.word	0x1fff9338
     d10:	00003a18 	.word	0x00003a18

00000d14 <setup>:
// Includes
#include "includes.h"



void setup() {
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	f640 31b8 	movw	r1, #3000	; 0xbb8
     d1a:	b08f      	sub	sp, #60	; 0x3c
     d1c:	488d      	ldr	r0, [pc, #564]	; (f54 <setup+0x240>)
     d1e:	f000 fdab 	bl	1878 <VisualMicroDebug::init(unsigned long)>
     d22:	f44f 4161 	mov.w	r1, #57600	; 0xe100
     d26:	488b      	ldr	r0, [pc, #556]	; (f54 <setup+0x240>)
     d28:	f000 fda2 	bl	1870 <VisualMicroDebug::begin(unsigned long)>
     d2c:	2101      	movs	r1, #1
     d2e:	4889      	ldr	r0, [pc, #548]	; (f54 <setup+0x240>)
     d30:	f000 fd78 	bl	1824 <VisualMicroDebug::outPacketStart(bool)>
     d34:	2800      	cmp	r0, #0
     d36:	f040 80fe 	bne.w	f36 <setup+0x222>
     d3a:	2201      	movs	r2, #1
     d3c:	2100      	movs	r1, #0
     d3e:	4885      	ldr	r0, [pc, #532]	; (f54 <setup+0x240>)
     d40:	f000 fe46 	bl	19d0 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) {
		Serial.begin(57600);
		Serial.setTimeout(1500);
     d44:	f240 51dc 	movw	r1, #1500	; 0x5dc
     d48:	4883      	ldr	r0, [pc, #524]	; (f58 <setup+0x244>)
     d4a:	f002 fb1b 	bl	3384 <Stream::setTimeout(unsigned long)>
	}

	delay(1000);
     d4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d52:	f001 f8ab 	bl	1eac <delay>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d56:	2108      	movs	r1, #8
     d58:	4880      	ldr	r0, [pc, #512]	; (f5c <setup+0x248>)
     d5a:	f002 f8bf 	bl	2edc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d5e:	487e      	ldr	r0, [pc, #504]	; (f58 <setup+0x244>)
     d60:	f002 fac0 	bl	32e4 <Print::println()>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     d64:	487e      	ldr	r0, [pc, #504]	; (f60 <setup+0x24c>)
     d66:	6803      	ldr	r3, [r0, #0]
     d68:	f013 0401 	ands.w	r4, r3, #1
     d6c:	f000 80c1 	beq.w	ef2 <setup+0x1de>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     d70:	4e7c      	ldr	r6, [pc, #496]	; (f64 <setup+0x250>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     d72:	497d      	ldr	r1, [pc, #500]	; (f68 <setup+0x254>)
     d74:	487d      	ldr	r0, [pc, #500]	; (f6c <setup+0x258>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
     d76:	4c7e      	ldr	r4, [pc, #504]	; (f70 <setup+0x25c>)
     d78:	2300      	movs	r3, #0
     d7a:	2296      	movs	r2, #150	; 0x96
     d7c:	f000 fb38 	bl	13f0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     d80:	25b0      	movs	r5, #176	; 0xb0
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     d82:	23ff      	movs	r3, #255	; 0xff
     d84:	22f0      	movs	r2, #240	; 0xf0

	if (DEBUG) { Serial.println("DEBUG ON"); }

	LEDS.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	LEDS.setBrightness(MAX_BRIGHT);
	LEDS.setCorrection(TypicalLEDStrip);
     d86:	4630      	mov	r0, r6
     d88:	a902      	add	r1, sp, #8
     d8a:	f88d 200a 	strb.w	r2, [sp, #10]
     d8e:	7033      	strb	r3, [r6, #0]
     d90:	f88d 3008 	strb.w	r3, [sp, #8]
     d94:	f88d 5009 	strb.w	r5, [sp, #9]
     d98:	f000 fb6a 	bl	1470 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
     d9c:	f640 31b8 	movw	r1, #3000	; 0xbb8
     da0:	2005      	movs	r0, #5
     da2:	f000 fd21 	bl	17e8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
     da6:	210a      	movs	r1, #10
     da8:	4872      	ldr	r0, [pc, #456]	; (f74 <setup+0x260>)
     daa:	f002 f897 	bl	2edc <usb_serial_write>
     dae:	486a      	ldr	r0, [pc, #424]	; (f58 <setup+0x244>)
     db0:	f002 fa98 	bl	32e4 <Print::println()>
     db4:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
	if (DEBUG) { Serial.println("LEDs ADDED"); }

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
     db8:	2002      	movs	r0, #2
     dba:	8023      	strh	r3, [r4, #0]
     dbc:	f000 ff48 	bl	1c50 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
     dc0:	8825      	ldrh	r5, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     dc2:	2300      	movs	r3, #0
     dc4:	4405      	add	r5, r0
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
     dc6:	aa01      	add	r2, sp, #4
     dc8:	a802      	add	r0, sp, #8
     dca:	2110      	movs	r1, #16
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     dcc:	af02      	add	r7, sp, #8
     dce:	8025      	strh	r5, [r4, #0]
     dd0:	f88d 3004 	strb.w	r3, [sp, #4]
     dd4:	f88d 3005 	strb.w	r3, [sp, #5]
     dd8:	f88d 3006 	strb.w	r3, [sp, #6]
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
     ddc:	f000 fa0e 	bl	11fc <fill_solid(CRGB*, int, CRGB const&)>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     de0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     de2:	4c65      	ldr	r4, [pc, #404]	; (f78 <setup+0x264>)
     de4:	4d65      	ldr	r5, [pc, #404]	; (f7c <setup+0x268>)
     de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     de8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     dec:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     df0:	f5a4 77f2 	sub.w	r7, r4, #484	; 0x1e4
     df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     df8:	f5a4 74da 	sub.w	r4, r4, #436	; 0x1b4
     dfc:	463b      	mov	r3, r7
        }
    }
    CRGBPalette16& operator=( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
     dfe:	f855 2f04 	ldr.w	r2, [r5, #4]!
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
     e02:	f883 21f6 	strb.w	r2, [r3, #502]	; 0x1f6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     e06:	0c11      	lsrs	r1, r2, #16
        g = (colorcode >>  8) & 0xFF;
     e08:	0a12      	lsrs	r2, r2, #8
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
     e0a:	f883 11f4 	strb.w	r1, [r3, #500]	; 0x1f4
        g = (colorcode >>  8) & 0xFF;
     e0e:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
     e12:	3303      	adds	r3, #3
            entries[i] =  FL_PGM_READ_DWORD_NEAR( rhs + i);
        }
    }
    CRGBPalette16& operator=( const TProgmemRGBPalette16& rhs)
    {
        for( uint8_t i = 0; i < 16; i++) {
     e14:	42a3      	cmp	r3, r4
     e16:	d1f2      	bne.n	dfe <setup+0xea>

	current_leds.current_palette = CRGBPalette16(CRGB::Black);
	current_leds.target_palette = RainbowColors_p;
	current_leds.mode_name = JUGGLE;
	current_leds.delay_time = 10;
     e18:	230a      	movs	r3, #10
	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));

	current_leds.current_palette = CRGBPalette16(CRGB::Black);
	current_leds.target_palette = RainbowColors_p;
	current_leds.mode_name = JUGGLE;
     e1a:	2400      	movs	r4, #0
     e1c:	211d      	movs	r1, #29
     e1e:	4858      	ldr	r0, [pc, #352]	; (f80 <setup+0x26c>)
	current_leds.delay_time = 10;
     e20:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));

	current_leds.current_palette = CRGBPalette16(CRGB::Black);
	current_leds.target_palette = RainbowColors_p;
	current_leds.mode_name = JUGGLE;
     e24:	f887 4229 	strb.w	r4, [r7, #553]	; 0x229
     e28:	f002 f858 	bl	2edc <usb_serial_write>
     e2c:	484a      	ldr	r0, [pc, #296]	; (f58 <setup+0x244>)
     e2e:	f002 fa59 	bl	32e4 <Print::println()>
	current_leds.delay_time = 10;
	
	if (DEBUG) { Serial.println("CURRENT_LED ARRAY INITIALIZED"); }

	FastLED.clear(); FastLED.show(); FastLED.delay(5);
     e32:	4621      	mov	r1, r4
     e34:	484b      	ldr	r0, [pc, #300]	; (f64 <setup+0x250>)
     e36:	f000 fc2d 	bl	1694 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     e3a:	7831      	ldrb	r1, [r6, #0]
     e3c:	4849      	ldr	r0, [pc, #292]	; (f64 <setup+0x250>)
     e3e:	f000 fb4f 	bl	14e0 <CFastLED::show(unsigned char)>
     e42:	2105      	movs	r1, #5
     e44:	4847      	ldr	r0, [pc, #284]	; (f64 <setup+0x250>)
     e46:	f000 fbad 	bl	15a4 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     e4a:	25ff      	movs	r5, #255	; 0xff
	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.show(); LEDS.delay(500);
     e4c:	aa02      	add	r2, sp, #8
     e4e:	2196      	movs	r1, #150	; 0x96
     e50:	4845      	ldr	r0, [pc, #276]	; (f68 <setup+0x254>)
     e52:	f88d 4009 	strb.w	r4, [sp, #9]
     e56:	f88d 400a 	strb.w	r4, [sp, #10]
     e5a:	f88d 5008 	strb.w	r5, [sp, #8]
     e5e:	f000 f9cd 	bl	11fc <fill_solid(CRGB*, int, CRGB const&)>
     e62:	7831      	ldrb	r1, [r6, #0]
     e64:	483f      	ldr	r0, [pc, #252]	; (f64 <setup+0x250>)
     e66:	f000 fb3b 	bl	14e0 <CFastLED::show(unsigned char)>
     e6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     e6e:	483d      	ldr	r0, [pc, #244]	; (f64 <setup+0x250>)
     e70:	f000 fb98 	bl	15a4 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.show(); LEDS.delay(500);
     e74:	aa02      	add	r2, sp, #8
     e76:	2196      	movs	r1, #150	; 0x96
     e78:	483b      	ldr	r0, [pc, #236]	; (f68 <setup+0x254>)
     e7a:	f88d 500a 	strb.w	r5, [sp, #10]
     e7e:	f88d 4008 	strb.w	r4, [sp, #8]
     e82:	f88d 4009 	strb.w	r4, [sp, #9]
     e86:	f000 f9b9 	bl	11fc <fill_solid(CRGB*, int, CRGB const&)>
     e8a:	7831      	ldrb	r1, [r6, #0]
     e8c:	4835      	ldr	r0, [pc, #212]	; (f64 <setup+0x250>)
     e8e:	f000 fb27 	bl	14e0 <CFastLED::show(unsigned char)>
     e92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     e96:	4833      	ldr	r0, [pc, #204]	; (f64 <setup+0x250>)
     e98:	f000 fb84 	bl	15a4 <CFastLED::delay(unsigned long)>
     e9c:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.show(); LEDS.delay(500);
     e9e:	aa02      	add	r2, sp, #8
     ea0:	2196      	movs	r1, #150	; 0x96
     ea2:	4831      	ldr	r0, [pc, #196]	; (f68 <setup+0x254>)
     ea4:	f88d 3009 	strb.w	r3, [sp, #9]
     ea8:	f88d 4008 	strb.w	r4, [sp, #8]
     eac:	f88d 400a 	strb.w	r4, [sp, #10]
     eb0:	f000 f9a4 	bl	11fc <fill_solid(CRGB*, int, CRGB const&)>
     eb4:	7831      	ldrb	r1, [r6, #0]
     eb6:	482b      	ldr	r0, [pc, #172]	; (f64 <setup+0x250>)
     eb8:	f000 fb12 	bl	14e0 <CFastLED::show(unsigned char)>
     ebc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     ec0:	4828      	ldr	r0, [pc, #160]	; (f64 <setup+0x250>)
     ec2:	f000 fb6f 	bl	15a4 <CFastLED::delay(unsigned long)>
		LEDS.clear();									FastLED.show(); LEDS.delay(500);
     ec6:	4621      	mov	r1, r4
     ec8:	4826      	ldr	r0, [pc, #152]	; (f64 <setup+0x250>)
     eca:	f000 fbe3 	bl	1694 <CFastLED::clear(bool)>
     ece:	7831      	ldrb	r1, [r6, #0]
     ed0:	4824      	ldr	r0, [pc, #144]	; (f64 <setup+0x250>)
     ed2:	f000 fb05 	bl	14e0 <CFastLED::show(unsigned char)>
     ed6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     eda:	4822      	ldr	r0, [pc, #136]	; (f64 <setup+0x250>)
     edc:	f000 fb62 	bl	15a4 <CFastLED::delay(unsigned long)>
     ee0:	210e      	movs	r1, #14
     ee2:	4828      	ldr	r0, [pc, #160]	; (f84 <setup+0x270>)
     ee4:	f001 fffa 	bl	2edc <usb_serial_write>
     ee8:	481b      	ldr	r0, [pc, #108]	; (f58 <setup+0x244>)
     eea:	f002 f9fb 	bl	32e4 <Print::println()>
	}
	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
     eee:	b00f      	add	sp, #60	; 0x3c
     ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     ef2:	f000 ff5b 	bl	1dac <__cxa_guard_acquire>
     ef6:	2800      	cmp	r0, #0
     ef8:	f43f af3a 	beq.w	d70 <setup+0x5c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     efc:	4922      	ldr	r1, [pc, #136]	; (f88 <setup+0x274>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     efe:	4b1b      	ldr	r3, [pc, #108]	; (f6c <setup+0x258>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     f00:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     f02:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     f04:	22ff      	movs	r2, #255	; 0xff
     f06:	2501      	movs	r5, #1
     f08:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
     f0a:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     f0c:	749d      	strb	r5, [r3, #18]
     f0e:	731a      	strb	r2, [r3, #12]
     f10:	735a      	strb	r2, [r3, #13]
     f12:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     f14:	73da      	strb	r2, [r3, #15]
     f16:	741a      	strb	r2, [r3, #16]
     f18:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     f1a:	b1c0      	cbz	r0, f4e <setup+0x23a>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     f1c:	4a1b      	ldr	r2, [pc, #108]	; (f8c <setup+0x278>)
     f1e:	6811      	ldr	r1, [r2, #0]
     f20:	b101      	cbz	r1, f24 <setup+0x210>
     f22:	608b      	str	r3, [r1, #8]
        m_pTail = this;
     f24:	6013      	str	r3, [r2, #0]
		// CORE_PIN14_CONFIG = gState.pins[3];
	}


public:
	ARMHardwareSPIOutput() { m_pSelect = NULL; }
     f26:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
     f28:	4919      	ldr	r1, [pc, #100]	; (f90 <setup+0x27c>)
     f2a:	480d      	ldr	r0, [pc, #52]	; (f60 <setup+0x24c>)
     f2c:	619a      	str	r2, [r3, #24]
     f2e:	6019      	str	r1, [r3, #0]
     f30:	f000 ff42 	bl	1db8 <__cxa_guard_release>
     f34:	e71c      	b.n	d70 <setup+0x5c>
     f36:	2110      	movs	r1, #16
     f38:	4816      	ldr	r0, [pc, #88]	; (f94 <setup+0x280>)
     f3a:	f001 ffcf 	bl	2edc <usb_serial_write>
// Includes
#include "includes.h"



void setup() {
     f3e:	210a      	movs	r1, #10
     f40:	4804      	ldr	r0, [pc, #16]	; (f54 <setup+0x240>)
     f42:	f000 fc5d 	bl	1800 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     f46:	4803      	ldr	r0, [pc, #12]	; (f54 <setup+0x240>)
     f48:	f000 fc90 	bl	186c <VisualMicroDebug::outPacketEnd()>
     f4c:	e6f5      	b.n	d3a <setup+0x26>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     f4e:	600b      	str	r3, [r1, #0]
     f50:	e7e4      	b.n	f1c <setup+0x208>
     f52:	bf00      	nop
     f54:	1fff92e8 	.word	0x1fff92e8
     f58:	1fff8728 	.word	0x1fff8728
     f5c:	00003a34 	.word	0x00003a34
     f60:	1fff8c2c 	.word	0x1fff8c2c
     f64:	1fff92c0 	.word	0x1fff92c0
     f68:	1fff90f0 	.word	0x1fff90f0
     f6c:	1fff8c30 	.word	0x1fff8c30
     f70:	1fff8720 	.word	0x1fff8720
     f74:	00003a40 	.word	0x00003a40
     f78:	1fff9070 	.word	0x1fff9070
     f7c:	00003a78 	.word	0x00003a78
     f80:	00003a4c 	.word	0x00003a4c
     f84:	00003a6c 	.word	0x00003a6c
     f88:	1fff92d0 	.word	0x1fff92d0
     f8c:	1fff92e0 	.word	0x1fff92e0
     f90:	000039ec 	.word	0x000039ec
     f94:	00003a20 	.word	0x00003a20

00000f98 <loop>:
		LEDS.clear();									FastLED.show(); LEDS.delay(500);
	}
	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}

void loop() {
     f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f9c:	b08c      	sub	sp, #48	; 0x30
	random16_add_entropy(random());
     f9e:	f002 fce3 	bl	3968 <random>
     fa2:	4a79      	ldr	r2, [pc, #484]	; (1188 <loop+0x1f0>)

	EVERY_N_MILLISECONDS(50) {
     fa4:	4e79      	ldr	r6, [pc, #484]	; (118c <loop+0x1f4>)
     fa6:	8813      	ldrh	r3, [r2, #0]
     fa8:	6831      	ldr	r1, [r6, #0]
     faa:	4418      	add	r0, r3
     fac:	8010      	strh	r0, [r2, #0]
     fae:	07c8      	lsls	r0, r1, #31
     fb0:	d57e      	bpl.n	10b0 <loop+0x118>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fb2:	4c77      	ldr	r4, [pc, #476]	; (1190 <loop+0x1f8>)
     fb4:	4d77      	ldr	r5, [pc, #476]	; (1194 <loop+0x1fc>)
     fb6:	6823      	ldr	r3, [r4, #0]
     fb8:	9305      	str	r3, [sp, #20]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     fba:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
     fbe:	9b05      	ldr	r3, [sp, #20]
     fc0:	1a5b      	subs	r3, r3, r1
     fc2:	429a      	cmp	r2, r3
     fc4:	f240 8084 	bls.w	10d0 <loop+0x138>
	// Update delay times
	current_delay = current_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(current_timer, current_delay) {
     fc8:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 11c0 <loop+0x228>
		nblendPaletteTowardPalette(current_leds.current_palette, current_leds.target_palette, 24);
	}
	
	// Update delay times
	current_delay = current_leds.delay_time;
	next_delay = next_leds.delay_time;
     fcc:	4f72      	ldr	r7, [pc, #456]	; (1198 <loop+0x200>)
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_leds.current_palette, current_leds.target_palette, 24);
	}
	
	// Update delay times
	current_delay = current_leds.delay_time;
     fce:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 11ac <loop+0x214>
	next_delay = next_leds.delay_time;
     fd2:	4e72      	ldr	r6, [pc, #456]	; (119c <loop+0x204>)

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(current_timer, current_delay) {
     fd4:	f8d9 3000 	ldr.w	r3, [r9]
		nblendPaletteTowardPalette(current_leds.current_palette, current_leds.target_palette, 24);
	}
	
	// Update delay times
	current_delay = current_leds.delay_time;
	next_delay = next_leds.delay_time;
     fd8:	f897 11c3 	ldrb.w	r1, [r7, #451]	; 0x1c3
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_leds.current_palette, current_leds.target_palette, 24);
	}
	
	// Update delay times
	current_delay = current_leds.delay_time;
     fdc:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 11c4 <loop+0x22c>
     fe0:	f898 21c3 	ldrb.w	r2, [r8, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
     fe4:	7031      	strb	r1, [r6, #0]

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(current_timer, current_delay) {
     fe6:	07d9      	lsls	r1, r3, #31
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(current_leds.current_palette, current_leds.target_palette, 24);
	}
	
	// Update delay times
	current_delay = current_leds.delay_time;
     fe8:	f88a 2000 	strb.w	r2, [sl]
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(current_timer, current_delay) {
     fec:	d536      	bpl.n	105c <loop+0xc4>
     fee:	4d6c      	ldr	r5, [pc, #432]	; (11a0 <loop+0x208>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ff0:	6823      	ldr	r3, [r4, #0]
     ff2:	9308      	str	r3, [sp, #32]
     ff4:	e895 0003 	ldmia.w	r5, {r0, r1}
	return ret;
     ff8:	9b08      	ldr	r3, [sp, #32]
     ffa:	1a1b      	subs	r3, r3, r0
     ffc:	428b      	cmp	r3, r1
     ffe:	d23d      	bcs.n	107c <loop+0xe4>
		current_timer.setPeriod(current_delay);
		switch_mode(current_leds);
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    1000:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 11c8 <loop+0x230>
    1004:	f8d8 3000 	ldr.w	r3, [r8]
    1008:	07db      	lsls	r3, r3, #31
    100a:	d549      	bpl.n	10a0 <loop+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    100c:	6823      	ldr	r3, [r4, #0]
    100e:	4d65      	ldr	r5, [pc, #404]	; (11a4 <loop+0x20c>)
    1010:	930b      	str	r3, [sp, #44]	; 0x2c
    1012:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    1016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1018:	1a5b      	subs	r3, r3, r1
    101a:	4293      	cmp	r3, r2
		if(in_transition){
    101c:	4b62      	ldr	r3, [pc, #392]	; (11a8 <loop+0x210>)
    101e:	d36c      	bcc.n	10fa <loop+0x162>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1020:	6822      	ldr	r2, [r4, #0]
    1022:	920a      	str	r2, [sp, #40]	; 0x28
    1024:	781a      	ldrb	r2, [r3, #0]
	return ret;
    1026:	990a      	ldr	r1, [sp, #40]	; 0x28
    1028:	6029      	str	r1, [r5, #0]
    102a:	495e      	ldr	r1, [pc, #376]	; (11a4 <loop+0x20c>)
    102c:	2a00      	cmp	r2, #0
    102e:	d15a      	bne.n	10e6 <loop+0x14e>
    1030:	4b5e      	ldr	r3, [pc, #376]	; (11ac <loop+0x214>)
    1032:	4a5f      	ldr	r2, [pc, #380]	; (11b0 <loop+0x218>)
    1034:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1038:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    103a:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    103c:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    103e:	7014      	strb	r4, [r2, #0]
    1040:	3303      	adds	r3, #3
			case BLENDING:	
				for(uint16_t i = 0; i < NUM_LEDS; i++){	master_leds[i] = blend(current_leds.led_data[i], next_leds.led_data[i], blending_ratio); }
				break;
		}
	}else{
		for(uint16_t i = 0; i < NUM_LEDS; i++){ master_leds[i] = current_leds.led_data[i] ;}
    1042:	42ab      	cmp	r3, r5
        g = rhs.g;
    1044:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    1046:	7091      	strb	r1, [r2, #2]
    1048:	f102 0203 	add.w	r2, r2, #3
    104c:	d1f4      	bne.n	1038 <loop+0xa0>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    104e:	4859      	ldr	r0, [pc, #356]	; (11b4 <loop+0x21c>)
    1050:	7801      	ldrb	r1, [r0, #0]
    1052:	f000 fa45 	bl	14e0 <CFastLED::show(unsigned char)>
	}

	FastLED.show();
    1056:	b00c      	add	sp, #48	; 0x30
    1058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	// Update delay times
	current_delay = current_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(current_timer, current_delay) {
    105c:	4648      	mov	r0, r9
    105e:	f000 fea5 	bl	1dac <__cxa_guard_acquire>
    1062:	2800      	cmp	r0, #0
    1064:	d179      	bne.n	115a <loop+0x1c2>
    1066:	4d4e      	ldr	r5, [pc, #312]	; (11a0 <loop+0x208>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1068:	6823      	ldr	r3, [r4, #0]
    106a:	9308      	str	r3, [sp, #32]
	return ret;
    106c:	9908      	ldr	r1, [sp, #32]
    106e:	682b      	ldr	r3, [r5, #0]
    1070:	686a      	ldr	r2, [r5, #4]
    1072:	1acb      	subs	r3, r1, r3
    1074:	4293      	cmp	r3, r2
    1076:	d3c3      	bcc.n	1000 <loop+0x68>
    1078:	f89a 2000 	ldrb.w	r2, [sl]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    107c:	6821      	ldr	r1, [r4, #0]
    107e:	9107      	str	r1, [sp, #28]
	return ret;
    1080:	9907      	ldr	r1, [sp, #28]
#ifndef SWITCH_MODE_H
#define SWITCH_MODE_H

void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {
    1082:	f898 3229 	ldrb.w	r3, [r8, #553]	; 0x229
    1086:	e885 0006 	stmia.w	r5, {r1, r2}
    108a:	2b00      	cmp	r3, #0
    108c:	d1b8      	bne.n	1000 <loop+0x68>
		current_timer.setPeriod(current_delay);
		switch_mode(current_leds);
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    108e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 11c8 <loop+0x230>
		case JUGGLE:
			juggle(leds);
    1092:	4846      	ldr	r0, [pc, #280]	; (11ac <loop+0x214>)
    1094:	f7ff fce8 	bl	a68 <juggle(LEDStruct&)>
    1098:	f8d8 3000 	ldr.w	r3, [r8]
    109c:	07db      	lsls	r3, r3, #31
    109e:	d4b5      	bmi.n	100c <loop+0x74>
    10a0:	4640      	mov	r0, r8
    10a2:	f000 fe83 	bl	1dac <__cxa_guard_acquire>
    10a6:	2800      	cmp	r0, #0
    10a8:	d163      	bne.n	1172 <loop+0x1da>
    10aa:	4d3e      	ldr	r5, [pc, #248]	; (11a4 <loop+0x20c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10ac:	6823      	ldr	r3, [r4, #0]
    10ae:	e7af      	b.n	1010 <loop+0x78>
}

void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    10b0:	4630      	mov	r0, r6
    10b2:	f000 fe7b 	bl	1dac <__cxa_guard_acquire>
    10b6:	4c36      	ldr	r4, [pc, #216]	; (1190 <loop+0x1f8>)
    10b8:	4d36      	ldr	r5, [pc, #216]	; (1194 <loop+0x1fc>)
    10ba:	2800      	cmp	r0, #0
    10bc:	d143      	bne.n	1146 <loop+0x1ae>
    10be:	6823      	ldr	r3, [r4, #0]
    10c0:	9305      	str	r3, [sp, #20]
    10c2:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    10c6:	9b05      	ldr	r3, [sp, #20]
    10c8:	1a5b      	subs	r3, r3, r1
    10ca:	4293      	cmp	r3, r2
    10cc:	f4ff af7c 	bcc.w	fc8 <loop+0x30>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10d0:	6823      	ldr	r3, [r4, #0]
		nblendPaletteTowardPalette(current_leds.current_palette, current_leds.target_palette, 24);
    10d2:	4939      	ldr	r1, [pc, #228]	; (11b8 <loop+0x220>)
    10d4:	9304      	str	r3, [sp, #16]
	return ret;
    10d6:	9b04      	ldr	r3, [sp, #16]
    10d8:	602b      	str	r3, [r5, #0]
    10da:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    10de:	2218      	movs	r2, #24
    10e0:	f000 f95e 	bl	13a0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    10e4:	e770      	b.n	fc8 <loop+0x30>
#ifndef SWITCH_MODE_H
#define SWITCH_MODE_H

void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {
    10e6:	f897 2229 	ldrb.w	r2, [r7, #553]	; 0x229
    10ea:	7830      	ldrb	r0, [r6, #0]
    10ec:	6048      	str	r0, [r1, #4]
    10ee:	b93a      	cbnz	r2, 1100 <loop+0x168>
		case JUGGLE:
			juggle(leds);
    10f0:	4829      	ldr	r0, [pc, #164]	; (1198 <loop+0x200>)
    10f2:	9301      	str	r3, [sp, #4]
    10f4:	f7ff fcb8 	bl	a68 <juggle(LEDStruct&)>
    10f8:	9b01      	ldr	r3, [sp, #4]
    10fa:	781b      	ldrb	r3, [r3, #0]
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
		}
	}
	
	if(in_transition){
    10fc:	2b00      	cmp	r3, #0
    10fe:	d097      	beq.n	1030 <loop+0x98>
		switch(transition_type){
    1100:	4b2e      	ldr	r3, [pc, #184]	; (11bc <loop+0x224>)
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	2b00      	cmp	r3, #0
    1106:	d1a2      	bne.n	104e <loop+0xb6>
    1108:	4d28      	ldr	r5, [pc, #160]	; (11ac <loop+0x214>)
    110a:	4e23      	ldr	r6, [pc, #140]	; (1198 <loop+0x200>)
    110c:	4c28      	ldr	r4, [pc, #160]	; (11b0 <loop+0x218>)
    110e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 11cc <loop+0x234>
    1112:	f505 77e1 	add.w	r7, r5, #450	; 0x1c2
			case BLENDING:	
				for(uint16_t i = 0; i < NUM_LEDS; i++){	master_leds[i] = blend(current_leds.led_data[i], next_leds.led_data[i], blending_ratio); }
    1116:	4632      	mov	r2, r6
    1118:	4629      	mov	r1, r5
    111a:	f898 3000 	ldrb.w	r3, [r8]
    111e:	a802      	add	r0, sp, #8
    1120:	3503      	adds	r5, #3
    1122:	f000 f8cf 	bl	12c4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1126:	f89d 1008 	ldrb.w	r1, [sp, #8]
        g = rhs.g;
    112a:	f89d 2009 	ldrb.w	r2, [sp, #9]
        b = rhs.b;
    112e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1132:	7021      	strb	r1, [r4, #0]
    1134:	42bd      	cmp	r5, r7
        g = rhs.g;
    1136:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1138:	70a3      	strb	r3, [r4, #2]
    113a:	f106 0603 	add.w	r6, r6, #3
    113e:	f104 0403 	add.w	r4, r4, #3
    1142:	d1e8      	bne.n	1116 <loop+0x17e>
    1144:	e783      	b.n	104e <loop+0xb6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1146:	6823      	ldr	r3, [r4, #0]
    1148:	9303      	str	r3, [sp, #12]
	return ret;
    114a:	9b03      	ldr	r3, [sp, #12]
    114c:	602b      	str	r3, [r5, #0]
    114e:	2332      	movs	r3, #50	; 0x32
}

void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    1150:	4630      	mov	r0, r6
    1152:	606b      	str	r3, [r5, #4]
    1154:	f000 fe30 	bl	1db8 <__cxa_guard_release>
    1158:	e7b1      	b.n	10be <loop+0x126>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    115a:	6823      	ldr	r3, [r4, #0]
    115c:	9306      	str	r3, [sp, #24]
    115e:	4d10      	ldr	r5, [pc, #64]	; (11a0 <loop+0x208>)
	return ret;
    1160:	9a06      	ldr	r2, [sp, #24]
	// Update delay times
	current_delay = current_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(current_timer, current_delay) {
    1162:	f89a 3000 	ldrb.w	r3, [sl]
    1166:	602a      	str	r2, [r5, #0]
    1168:	4648      	mov	r0, r9
    116a:	606b      	str	r3, [r5, #4]
    116c:	f000 fe24 	bl	1db8 <__cxa_guard_release>
    1170:	e77a      	b.n	1068 <loop+0xd0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1172:	6823      	ldr	r3, [r4, #0]
    1174:	9309      	str	r3, [sp, #36]	; 0x24
    1176:	4d0b      	ldr	r5, [pc, #44]	; (11a4 <loop+0x20c>)
	return ret;
    1178:	9a09      	ldr	r2, [sp, #36]	; 0x24
		current_timer.setPeriod(current_delay);
		switch_mode(current_leds);
	}

	// Apply effect to next LEDs if in transition
	EVERY_N_MILLIS_I(next_timer, next_delay){
    117a:	7833      	ldrb	r3, [r6, #0]
    117c:	602a      	str	r2, [r5, #0]
    117e:	4640      	mov	r0, r8
    1180:	606b      	str	r3, [r5, #4]
    1182:	f000 fe19 	bl	1db8 <__cxa_guard_release>
    1186:	e791      	b.n	10ac <loop+0x114>
    1188:	1fff8720 	.word	0x1fff8720
    118c:	1fff90e0 	.word	0x1fff90e0
    1190:	1fff9338 	.word	0x1fff9338
    1194:	1fff8ea4 	.word	0x1fff8ea4
    1198:	1fff8c64 	.word	0x1fff8c64
    119c:	1fff90e4 	.word	0x1fff90e4
    11a0:	1fff90e8 	.word	0x1fff90e8
    11a4:	1fff8e98 	.word	0x1fff8e98
    11a8:	1fff8ea0 	.word	0x1fff8ea0
    11ac:	1fff8eac 	.word	0x1fff8eac
    11b0:	1fff90f0 	.word	0x1fff90f0
    11b4:	1fff92c0 	.word	0x1fff92c0
    11b8:	1fff90a0 	.word	0x1fff90a0
    11bc:	1fff8ea1 	.word	0x1fff8ea1
    11c0:	1fff92b4 	.word	0x1fff92b4
    11c4:	1fff92b8 	.word	0x1fff92b8
    11c8:	1fff92bc 	.word	0x1fff92bc
    11cc:	1fff92b2 	.word	0x1fff92b2

000011d0 <_GLOBAL__sub_I_master_leds>:
#ifndef LED_STRUCT_H
#define LED_STRUCT_H

// LED structure

struct LEDStruct {
    11d0:	4908      	ldr	r1, [pc, #32]	; (11f4 <_GLOBAL__sub_I_master_leds+0x24>)
    11d2:	4a09      	ldr	r2, [pc, #36]	; (11f8 <_GLOBAL__sub_I_master_leds+0x28>)
    11d4:	2300      	movs	r3, #0
    11d6:	2001      	movs	r0, #1
    11d8:	f881 0224 	strb.w	r0, [r1, #548]	; 0x224
    11dc:	f882 0224 	strb.w	r0, [r2, #548]	; 0x224
    11e0:	f881 3226 	strb.w	r3, [r1, #550]	; 0x226
    11e4:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
    11e8:	f882 3226 	strb.w	r3, [r2, #550]	; 0x226
    11ec:	f882 322a 	strb.w	r3, [r2, #554]	; 0x22a
    11f0:	4770      	bx	lr
    11f2:	bf00      	nop
    11f4:	1fff8eac 	.word	0x1fff8eac
    11f8:	1fff8c64 	.word	0x1fff8c64

000011fc <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    11fc:	2900      	cmp	r1, #0
    11fe:	dd0b      	ble.n	1218 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    1200:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1204:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1206:	7813      	ldrb	r3, [r2, #0]
    1208:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    120a:	7853      	ldrb	r3, [r2, #1]
    120c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    120e:	7893      	ldrb	r3, [r2, #2]
    1210:	7083      	strb	r3, [r0, #2]
    1212:	3003      	adds	r0, #3
    1214:	4288      	cmp	r0, r1
    1216:	d1f6      	bne.n	1206 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    1218:	4770      	bx	lr
    121a:	bf00      	nop

0000121c <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    121c:	b309      	cbz	r1, 1262 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    121e:	b430      	push	{r4, r5}
    1220:	1e4d      	subs	r5, r1, #1
    1222:	b2ad      	uxth	r5, r5
    1224:	43d2      	mvns	r2, r2
    1226:	3501      	adds	r5, #1
    1228:	b2d2      	uxtb	r2, r2
    122a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    122e:	4405      	add	r5, r0
    1230:	3201      	adds	r2, #1
    1232:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    1234:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    1238:	fb02 f303 	mul.w	r3, r2, r3
    123c:	121b      	asrs	r3, r3, #8
    123e:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    1242:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    1244:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    1246:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    124a:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    124e:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    1250:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    1252:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    1254:	7083      	strb	r3, [r0, #2]
    1256:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    1258:	4285      	cmp	r5, r0
    125a:	f104 0403 	add.w	r4, r4, #3
    125e:	d1e9      	bne.n	1234 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    1260:	bc30      	pop	{r4, r5}
    1262:	4770      	bx	lr

00001264 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    1264:	f7ff bfda 	b.w	121c <fade_raw(CRGB*, unsigned short, unsigned char)>

00001268 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    1268:	b322      	cbz	r2, 12b4 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    126a:	2aff      	cmp	r2, #255	; 0xff
    126c:	d023      	beq.n	12b6 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    126e:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1270:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1272:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    1274:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    1276:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    1278:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    127a:	43d2      	mvns	r2, r2
    127c:	fb06 7605 	mla	r6, r6, r5, r7
    1280:	b2d2      	uxtb	r2, r2
    1282:	fb04 6402 	mla	r4, r4, r2, r6
    1286:	f3c4 2407 	ubfx	r4, r4, #8, #8
    128a:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    128c:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    128e:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    1290:	191f      	adds	r7, r3, r4
    1292:	fb04 7405 	mla	r4, r4, r5, r7
    1296:	fb03 4302 	mla	r3, r3, r2, r4
    129a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    129e:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    12a0:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    12a2:	18f1      	adds	r1, r6, r3
    12a4:	fb03 1505 	mla	r5, r3, r5, r1
    12a8:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    12ac:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    12ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
    12b2:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    12b4:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12b6:	780b      	ldrb	r3, [r1, #0]
    12b8:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    12ba:	784b      	ldrb	r3, [r1, #1]
    12bc:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    12be:	788b      	ldrb	r3, [r1, #2]
    12c0:	7083      	strb	r3, [r0, #2]
    12c2:	4770      	bx	lr

000012c4 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    12c4:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12c6:	780d      	ldrb	r5, [r1, #0]
    12c8:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    12ca:	784d      	ldrb	r5, [r1, #1]
    12cc:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    12ce:	7889      	ldrb	r1, [r1, #2]
    12d0:	7081      	strb	r1, [r0, #2]
    12d2:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    12d4:	4611      	mov	r1, r2
    12d6:	461a      	mov	r2, r3
    12d8:	f7ff ffc6 	bl	1268 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    12dc:	4620      	mov	r0, r4
    12de:	bd38      	pop	{r3, r4, r5, pc}

000012e0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    12e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    12e4:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    12e6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    12ea:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    12ee:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    12f0:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    12f4:	d000      	beq.n	12f8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    12f6:	b9e6      	cbnz	r6, 1332 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    12f8:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    12fa:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    12fc:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    12fe:	2bff      	cmp	r3, #255	; 0xff
    1300:	d012      	beq.n	1328 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    1302:	2b00      	cmp	r3, #0
    1304:	d043      	beq.n	138e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    1306:	3301      	adds	r3, #1
    1308:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    130a:	b11c      	cbz	r4, 1314 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    130c:	fb03 4404 	mla	r4, r3, r4, r4
    1310:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    1314:	b119      	cbz	r1, 131e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    1316:	fb03 1101 	mla	r1, r3, r1, r1
    131a:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    131e:	b11a      	cbz	r2, 1328 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    1320:	fb03 2202 	mla	r2, r3, r2, r2
    1324:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1328:	7004      	strb	r4, [r0, #0]
    132a:	7041      	strb	r1, [r0, #1]
    132c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    132e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    1332:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    1334:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    1336:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    133a:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    133c:	d000      	beq.n	1340 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    133e:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    1340:	0112      	lsls	r2, r2, #4
    1342:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    1346:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1348:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    134c:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1350:	f891 8002 	ldrb.w	r8, [r1, #2]
    1354:	fb04 f606 	mul.w	r6, r4, r6
    1358:	1c51      	adds	r1, r2, #1
    135a:	fb04 f509 	mul.w	r5, r4, r9
    135e:	fb04 f407 	mul.w	r4, r4, r7
    1362:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1366:	f3c6 2707 	ubfx	r7, r6, #8, #8
    136a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    136e:	fb01 f60c 	mul.w	r6, r1, ip
    1372:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1376:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    137a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    137e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1382:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1386:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1388:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    138a:	b2d2      	uxtb	r2, r2
    138c:	e7b7      	b.n	12fe <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    138e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    1390:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    1392:	461c      	mov	r4, r3
    1394:	7004      	strb	r4, [r0, #0]
    1396:	7041      	strb	r1, [r0, #1]
    1398:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    139a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    139e:	bf00      	nop

000013a0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	3901      	subs	r1, #1
    13a4:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    13a6:	2500      	movs	r5, #0
    13a8:	302f      	adds	r0, #47	; 0x2f
    13aa:	e001      	b.n	13b0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    13ac:	4284      	cmp	r4, r0
    13ae:	d01e      	beq.n	13ee <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    13b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    13b4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    13b8:	42b3      	cmp	r3, r6
    13ba:	d0f7      	beq.n	13ac <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    13bc:	f103 0701 	add.w	r7, r3, #1
    13c0:	d204      	bcs.n	13cc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    13c2:	b2fb      	uxtb	r3, r7
    13c4:	7023      	strb	r3, [r4, #0]
    13c6:	3501      	adds	r5, #1
    13c8:	780e      	ldrb	r6, [r1, #0]
    13ca:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    13cc:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    13ce:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    13d0:	b2ff      	uxtb	r7, r7
    13d2:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    13d6:	d208      	bcs.n	13ea <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    13d8:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    13da:	780e      	ldrb	r6, [r1, #0]
    13dc:	42be      	cmp	r6, r7
    13de:	bf38      	it	cc
    13e0:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    13e2:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    13e6:	bf38      	it	cc
    13e8:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    13ea:	4295      	cmp	r5, r2
    13ec:	d3de      	bcc.n	13ac <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    13ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000013f0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    13f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    13f2:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    13f4:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    13f6:	4604      	mov	r4, r0
    13f8:	bfcc      	ite	gt
    13fa:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    13fe:	2500      	movle	r5, #0
    1400:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    1402:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    1404:	bfd8      	it	le
    1406:	4616      	movle	r6, r2

	pLed->init();
    1408:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    140a:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    140c:	6823      	ldr	r3, [r4, #0]
    140e:	6062      	str	r2, [r4, #4]
    1410:	695b      	ldr	r3, [r3, #20]
    1412:	4a0a      	ldr	r2, [pc, #40]	; (143c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    1414:	6166      	str	r6, [r4, #20]
    1416:	4293      	cmp	r3, r2
    1418:	d101      	bne.n	141e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    141a:	4620      	mov	r0, r4
    141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    141e:	4620      	mov	r0, r4
    1420:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    1422:	2800      	cmp	r0, #0
    1424:	d0f9      	beq.n	141a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    1426:	4a06      	ldr	r2, [pc, #24]	; (1440 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    1428:	4b06      	ldr	r3, [pc, #24]	; (1444 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    142a:	6851      	ldr	r1, [r2, #4]
    142c:	fb93 f0f0 	sdiv	r0, r3, r0
    1430:	4288      	cmp	r0, r1
    1432:	bf38      	it	cc
    1434:	4608      	movcc	r0, r1
    1436:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    1438:	4620      	mov	r0, r4
    143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    143c:	00000471 	.word	0x00000471
    1440:	1fff92c0 	.word	0x1fff92c0
    1444:	000f4240 	.word	0x000f4240

00001448 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    144a:	b510      	push	{r4, lr}
    144c:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    144e:	b15c      	cbz	r4, 1468 <CFastLED::clearData()+0x20>
    1450:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    1452:	2100      	movs	r1, #0
    1454:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    1456:	b123      	cbz	r3, 1462 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    1458:	6962      	ldr	r2, [r4, #20]
    145a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    145e:	f002 fa35 	bl	38cc <memset>
    1462:	68a4      	ldr	r4, [r4, #8]
    1464:	2c00      	cmp	r4, #0
    1466:	d1f3      	bne.n	1450 <CFastLED::clearData()+0x8>
    1468:	bd10      	pop	{r4, pc}
    146a:	bf00      	nop
    146c:	1fff92d0 	.word	0x1fff92d0

00001470 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1470:	4b07      	ldr	r3, [pc, #28]	; (1490 <CFastLED::setCorrection(CRGB const&)+0x20>)
    1472:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1474:	b153      	cbz	r3, 148c <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    1476:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1478:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    147a:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    147c:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    147e:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1480:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    1482:	735a      	strb	r2, [r3, #13]
    1484:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1486:	2b00      	cmp	r3, #0
    1488:	d1f6      	bne.n	1478 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    148a:	bc10      	pop	{r4}
    148c:	4770      	bx	lr
    148e:	bf00      	nop
    1490:	1fff92d0 	.word	0x1fff92d0

00001494 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1494:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1496:	4c0f      	ldr	r4, [pc, #60]	; (14d4 <CFastLED::countFPS(int)+0x40>)
    1498:	6822      	ldr	r2, [r4, #0]
    149a:	1c53      	adds	r3, r2, #1
    149c:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    149e:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    14a0:	6023      	str	r3, [r4, #0]
    14a2:	db13      	blt.n	14cc <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14a4:	4d0c      	ldr	r5, [pc, #48]	; (14d8 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    14a6:	4a0d      	ldr	r2, [pc, #52]	; (14dc <CFastLED::countFPS(int)+0x48>)
    14a8:	6829      	ldr	r1, [r5, #0]
    14aa:	9101      	str	r1, [sp, #4]
	return ret;
    14ac:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ae:	682d      	ldr	r5, [r5, #0]
    14b0:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    14b2:	6816      	ldr	r6, [r2, #0]
	return ret;
    14b4:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    14b6:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    14b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    14bc:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    14be:	1b89      	subs	r1, r1, r6
    14c0:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    14c4:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    14c6:	fbb3 f3f1 	udiv	r3, r3, r1
    14ca:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    14cc:	b003      	add	sp, #12
    14ce:	bc70      	pop	{r4, r5, r6}
    14d0:	4770      	bx	lr
    14d2:	bf00      	nop
    14d4:	1fff92d4 	.word	0x1fff92d4
    14d8:	1fff9338 	.word	0x1fff9338
    14dc:	1fff92dc 	.word	0x1fff92dc

000014e0 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    14e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14e4:	6843      	ldr	r3, [r0, #4]
    14e6:	4c2d      	ldr	r4, [pc, #180]	; (159c <CFastLED::show(unsigned char)+0xbc>)
    14e8:	b083      	sub	sp, #12
    14ea:	4606      	mov	r6, r0
    14ec:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    14ee:	2b00      	cmp	r3, #0
    14f0:	d14b      	bne.n	158a <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    14f2:	f000 fcb9 	bl	1e68 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    14f6:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    14f8:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    14fa:	b11b      	cbz	r3, 1504 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    14fc:	4648      	mov	r0, r9
    14fe:	68b1      	ldr	r1, [r6, #8]
    1500:	4798      	blx	r3
    1502:	4681      	mov	r9, r0
    1504:	4b26      	ldr	r3, [pc, #152]	; (15a0 <CFastLED::show(unsigned char)+0xc0>)
    1506:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1508:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    150a:	2c00      	cmp	r4, #0
    150c:	d036      	beq.n	157c <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    150e:	8873      	ldrh	r3, [r6, #2]
    1510:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1512:	6861      	ldr	r1, [r4, #4]
    1514:	6962      	ldr	r2, [r4, #20]
    1516:	2b63      	cmp	r3, #99	; 0x63
    1518:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    151a:	bf98      	it	ls
    151c:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    151e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1522:	f88d 5004 	strb.w	r5, [sp, #4]
    1526:	f88d 5005 	strb.w	r5, [sp, #5]
    152a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    152e:	f1b9 0f00 	cmp.w	r9, #0
    1532:	d01c      	beq.n	156e <CFastLED::show(unsigned char)+0x8e>
    1534:	f104 030b 	add.w	r3, r4, #11
    1538:	f10d 0e04 	add.w	lr, sp, #4
    153c:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1540:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1544:	f1bb 0f00 	cmp.w	fp, #0
    1548:	d00d      	beq.n	1566 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    154a:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    154e:	f10a 0001 	add.w	r0, sl, #1
    1552:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1556:	f1ba 0f00 	cmp.w	sl, #0
    155a:	d004      	beq.n	1566 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    155c:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1560:	0c00      	lsrs	r0, r0, #16
    1562:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1566:	4563      	cmp	r3, ip
    1568:	f10e 0e01 	add.w	lr, lr, #1
    156c:	d1e8      	bne.n	1540 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    156e:	4620      	mov	r0, r4
    1570:	ab01      	add	r3, sp, #4
    1572:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1574:	74a7      	strb	r7, [r4, #18]
    1576:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1578:	2c00      	cmp	r4, #0
    157a:	d1c8      	bne.n	150e <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    157c:	4630      	mov	r0, r6
    157e:	2119      	movs	r1, #25
    1580:	f7ff ff88 	bl	1494 <CFastLED::countFPS(int)>
}
    1584:	b003      	add	sp, #12
    1586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    158a:	f000 fc6d 	bl	1e68 <micros>
    158e:	6822      	ldr	r2, [r4, #0]
    1590:	6873      	ldr	r3, [r6, #4]
    1592:	1a80      	subs	r0, r0, r2
    1594:	4298      	cmp	r0, r3
    1596:	d3aa      	bcc.n	14ee <CFastLED::show(unsigned char)+0xe>
    1598:	e7ab      	b.n	14f2 <CFastLED::show(unsigned char)+0x12>
    159a:	bf00      	nop
    159c:	1fff92d8 	.word	0x1fff92d8
    15a0:	1fff92d0 	.word	0x1fff92d0

000015a4 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    15a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15a6:	4d0a      	ldr	r5, [pc, #40]	; (15d0 <CFastLED::delay(unsigned long)+0x2c>)
    15a8:	b083      	sub	sp, #12
    15aa:	682b      	ldr	r3, [r5, #0]
    15ac:	9300      	str	r3, [sp, #0]
	return ret;
    15ae:	9f00      	ldr	r7, [sp, #0]
    15b0:	4604      	mov	r4, r0
    15b2:	460e      	mov	r6, r1
    15b4:	7821      	ldrb	r1, [r4, #0]
    15b6:	4620      	mov	r0, r4
    15b8:	f7ff ff92 	bl	14e0 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    15bc:	f001 fefa 	bl	33b4 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15c0:	682b      	ldr	r3, [r5, #0]
    15c2:	9301      	str	r3, [sp, #4]
	return ret;
    15c4:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    15c6:	1bdb      	subs	r3, r3, r7
    15c8:	42b3      	cmp	r3, r6
    15ca:	d3f3      	bcc.n	15b4 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    15cc:	b003      	add	sp, #12
    15ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15d0:	1fff9338 	.word	0x1fff9338

000015d4 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    15d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15d8:	6843      	ldr	r3, [r0, #4]
    15da:	4c2c      	ldr	r4, [pc, #176]	; (168c <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    15dc:	b083      	sub	sp, #12
    15de:	4606      	mov	r6, r0
    15e0:	468a      	mov	sl, r1
    15e2:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    15e4:	2b00      	cmp	r3, #0
    15e6:	d149      	bne.n	167c <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    15e8:	f000 fc3e 	bl	1e68 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    15ec:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    15ee:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    15f0:	b11b      	cbz	r3, 15fa <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    15f2:	4648      	mov	r0, r9
    15f4:	68b1      	ldr	r1, [r6, #8]
    15f6:	4798      	blx	r3
    15f8:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    15fa:	4b25      	ldr	r3, [pc, #148]	; (1690 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    15fc:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    15fe:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1600:	2c00      	cmp	r4, #0
    1602:	d034      	beq.n	166e <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1604:	8873      	ldrh	r3, [r6, #2]
    1606:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    1608:	6962      	ldr	r2, [r4, #20]
    160a:	2b63      	cmp	r3, #99	; 0x63
    160c:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    160e:	bf98      	it	ls
    1610:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    1612:	f8d3 8000 	ldr.w	r8, [r3]
    1616:	f88d 5004 	strb.w	r5, [sp, #4]
    161a:	f88d 5005 	strb.w	r5, [sp, #5]
    161e:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1622:	f1b9 0f00 	cmp.w	r9, #0
    1626:	d01a      	beq.n	165e <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    1628:	f104 030b 	add.w	r3, r4, #11
    162c:	a801      	add	r0, sp, #4
    162e:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1632:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1636:	f1bb 0f00 	cmp.w	fp, #0
    163a:	d00c      	beq.n	1656 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    163c:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1640:	f10c 0101 	add.w	r1, ip, #1
    1644:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1648:	f1bc 0f00 	cmp.w	ip, #0
    164c:	d003      	beq.n	1656 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    164e:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1652:	0c09      	lsrs	r1, r1, #16
    1654:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1656:	4573      	cmp	r3, lr
    1658:	f100 0001 	add.w	r0, r0, #1
    165c:	d1e9      	bne.n	1632 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    165e:	4620      	mov	r0, r4
    1660:	ab01      	add	r3, sp, #4
    1662:	4651      	mov	r1, sl
    1664:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1666:	74a7      	strb	r7, [r4, #18]
    1668:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    166a:	2c00      	cmp	r4, #0
    166c:	d1ca      	bne.n	1604 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    166e:	4630      	mov	r0, r6
    1670:	2119      	movs	r1, #25
    1672:	f7ff ff0f 	bl	1494 <CFastLED::countFPS(int)>
}
    1676:	b003      	add	sp, #12
    1678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    167c:	f000 fbf4 	bl	1e68 <micros>
    1680:	6822      	ldr	r2, [r4, #0]
    1682:	6873      	ldr	r3, [r6, #4]
    1684:	1a80      	subs	r0, r0, r2
    1686:	4298      	cmp	r0, r3
    1688:	d3ac      	bcc.n	15e4 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    168a:	e7ad      	b.n	15e8 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    168c:	1fff92d8 	.word	0x1fff92d8
    1690:	1fff92d0 	.word	0x1fff92d0

00001694 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    1694:	b510      	push	{r4, lr}
    1696:	4604      	mov	r4, r0
    1698:	b082      	sub	sp, #8
	if(writeData) {
    169a:	b151      	cbz	r1, 16b2 <CFastLED::clear(bool)+0x1e>
    169c:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    169e:	461a      	mov	r2, r3
    16a0:	a901      	add	r1, sp, #4
    16a2:	f88d 3004 	strb.w	r3, [sp, #4]
    16a6:	f88d 3005 	strb.w	r3, [sp, #5]
    16aa:	f88d 3006 	strb.w	r3, [sp, #6]
    16ae:	f7ff ff91 	bl	15d4 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    16b2:	4620      	mov	r0, r4
    16b4:	f7ff fec8 	bl	1448 <CFastLED::clearData()>
}
    16b8:	b002      	add	sp, #8
    16ba:	bd10      	pop	{r4, pc}

000016bc <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    16bc:	2000      	movs	r0, #0
    16be:	4770      	bx	lr

000016c0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    16c0:	4b04      	ldr	r3, [pc, #16]	; (16d4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    16c2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    16c4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    16c6:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    16ca:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    16cc:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    16ce:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    16d0:	60da      	str	r2, [r3, #12]
    16d2:	4770      	bx	lr
    16d4:	1fff92c0 	.word	0x1fff92c0

000016d8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    16d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    16da:	b361      	cbz	r1, 1736 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    16dc:	f101 3eff 	add.w	lr, r1, #4294967295
    16e0:	fa1f fe8e 	uxth.w	lr, lr
    16e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    16e8:	2200      	movs	r2, #0
    16ea:	f10e 0e06 	add.w	lr, lr, #6
    16ee:	4486      	add	lr, r0
    16f0:	1cc3      	adds	r3, r0, #3
    16f2:	4615      	mov	r5, r2
    16f4:	4614      	mov	r4, r2
        red32   += *p++;
    16f6:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    16fa:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    16fe:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    1702:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    1704:	4573      	cmp	r3, lr
        red32   += *p++;
    1706:	443c      	add	r4, r7
        green32 += *p++;
    1708:	4405      	add	r5, r0
        blue32  += *p++;
    170a:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    170c:	d1f3      	bne.n	16f6 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    170e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1712:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1716:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    171a:	f3c4 1317 	ubfx	r3, r4, #4, #24
    171e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    1722:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    1726:	0a12      	lsrs	r2, r2, #8
    1728:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    172c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1730:	1910      	adds	r0, r2, r4
}
    1732:	4408      	add	r0, r1
    1734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    1736:	460c      	mov	r4, r1
    1738:	460a      	mov	r2, r1
    173a:	e7f7      	b.n	172c <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

0000173c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    173c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1740:	4b25      	ldr	r3, [pc, #148]	; (17d8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    1742:	681c      	ldr	r4, [r3, #0]
    1744:	b085      	sub	sp, #20
    1746:	4607      	mov	r7, r0
    1748:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    174a:	b19c      	cbz	r4, 1774 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    174c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17e4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    1750:	257d      	movs	r5, #125	; 0x7d
    1752:	e007      	b.n	1764 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    1754:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    1756:	b281      	uxth	r1, r0
    1758:	4630      	mov	r0, r6
    175a:	f7ff ffbd 	bl	16d8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    175e:	68a4      	ldr	r4, [r4, #8]
    1760:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1762:	b144      	cbz	r4, 1776 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    1764:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    1768:	691b      	ldr	r3, [r3, #16]
    176a:	454b      	cmp	r3, r9
    176c:	d0f2      	beq.n	1754 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    176e:	4620      	mov	r0, r4
    1770:	4798      	blx	r3
    1772:	e7f0      	b.n	1756 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    1774:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    1776:	fb05 f507 	mul.w	r5, r5, r7
    177a:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    177c:	4b17      	ldr	r3, [pc, #92]	; (17dc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    177e:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    1780:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    1782:	d210      	bcs.n	17a6 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    1784:	b323      	cbz	r3, 17d0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    1786:	4a16      	ldr	r2, [pc, #88]	; (17e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    1788:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    178a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    178e:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    1792:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1796:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    1798:	4638      	mov	r0, r7
    179a:	ea23 0301 	bic.w	r3, r3, r1
    179e:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    17a0:	b005      	add	sp, #20
    17a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    17a6:	fb08 f707 	mul.w	r7, r8, r7
    17aa:	fbb7 f0f5 	udiv	r0, r7, r5
    17ae:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    17b0:	b173      	cbz	r3, 17d0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    17b2:	4a0b      	ldr	r2, [pc, #44]	; (17e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    17b4:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    17b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    17ba:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    17be:	f89d 100c 	ldrb.w	r1, [sp, #12]
    17c2:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    17c4:	4638      	mov	r0, r7
    17c6:	430b      	orrs	r3, r1
    17c8:	7013      	strb	r3, [r2, #0]
}
    17ca:	b005      	add	sp, #20
    17cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    17d0:	4638      	mov	r0, r7
}
    17d2:	b005      	add	sp, #20
    17d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17d8:	1fff92d0 	.word	0x1fff92d0
    17dc:	1fff92e4 	.word	0x1fff92e4
    17e0:	00003b58 	.word	0x00003b58
    17e4:	0000046d 	.word	0x0000046d

000017e8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    17e8:	4b03      	ldr	r3, [pc, #12]	; (17f8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    17ea:	4a04      	ldr	r2, [pc, #16]	; (17fc <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    17ec:	60da      	str	r2, [r3, #12]
    17ee:	fb01 f100 	mul.w	r1, r1, r0
    17f2:	6099      	str	r1, [r3, #8]
    17f4:	4770      	bx	lr
    17f6:	bf00      	nop
    17f8:	1fff92c0 	.word	0x1fff92c0
    17fc:	0000173d 	.word	0x0000173d

00001800 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1800:	4807      	ldr	r0, [pc, #28]	; (1820 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    1802:	b082      	sub	sp, #8
    1804:	6803      	ldr	r3, [r0, #0]
    1806:	9301      	str	r3, [sp, #4]
	return ret;
    1808:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    180a:	4411      	add	r1, r2
    180c:	e001      	b.n	1812 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    180e:	4299      	cmp	r1, r3
    1810:	d304      	bcc.n	181c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1812:	6803      	ldr	r3, [r0, #0]
    1814:	9300      	str	r3, [sp, #0]
	return ret;
    1816:	9b00      	ldr	r3, [sp, #0]
    1818:	429a      	cmp	r2, r3
    181a:	d9f8      	bls.n	180e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    181c:	b002      	add	sp, #8
    181e:	4770      	bx	lr
    1820:	1fff9338 	.word	0x1fff9338

00001824 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1824:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1826:	4a10      	ldr	r2, [pc, #64]	; (1868 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    1828:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    182a:	b9a1      	cbnz	r1, 1856 <VisualMicroDebug::outPacketStart(bool)+0x32>
    182c:	6813      	ldr	r3, [r2, #0]
    182e:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1830:	6841      	ldr	r1, [r0, #4]
	return ret;
    1832:	9b00      	ldr	r3, [sp, #0]
    1834:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    1836:	2931      	cmp	r1, #49	; 0x31
    1838:	d80d      	bhi.n	1856 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    183a:	6813      	ldr	r3, [r2, #0]
    183c:	9302      	str	r3, [sp, #8]
	return ret;
    183e:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1840:	f104 0332 	add.w	r3, r4, #50	; 0x32
    1844:	1a59      	subs	r1, r3, r1
    1846:	e001      	b.n	184c <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1848:	4299      	cmp	r1, r3
    184a:	d304      	bcc.n	1856 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    184c:	6813      	ldr	r3, [r2, #0]
    184e:	9301      	str	r3, [sp, #4]
	return ret;
    1850:	9b01      	ldr	r3, [sp, #4]
    1852:	429c      	cmp	r4, r3
    1854:	d9f8      	bls.n	1848 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1856:	6813      	ldr	r3, [r2, #0]
    1858:	9303      	str	r3, [sp, #12]
	return ret;
    185a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    185c:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    185e:	2001      	movs	r0, #1
    1860:	b005      	add	sp, #20
    1862:	bc10      	pop	{r4}
    1864:	4770      	bx	lr
    1866:	bf00      	nop
    1868:	1fff9338 	.word	0x1fff9338

0000186c <VisualMicroDebug::outPacketEnd()>:
    186c:	4770      	bx	lr
    186e:	bf00      	nop

00001870 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    1870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1874:	f000 bb1a 	b.w	1eac <delay>

00001878 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    1878:	2300      	movs	r3, #0
    187a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    187c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    187e:	b171      	cbz	r1, 189e <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1880:	4807      	ldr	r0, [pc, #28]	; (18a0 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    1882:	b082      	sub	sp, #8
    1884:	6803      	ldr	r3, [r0, #0]
    1886:	9301      	str	r3, [sp, #4]
	return ret;
    1888:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    188a:	4411      	add	r1, r2
    188c:	e001      	b.n	1892 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    188e:	4299      	cmp	r1, r3
    1890:	d304      	bcc.n	189c <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1892:	6803      	ldr	r3, [r0, #0]
    1894:	9300      	str	r3, [sp, #0]
	return ret;
    1896:	9b00      	ldr	r3, [sp, #0]
    1898:	429a      	cmp	r2, r3
    189a:	d9f8      	bls.n	188e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    189c:	b002      	add	sp, #8
    189e:	4770      	bx	lr
    18a0:	1fff9338 	.word	0x1fff9338

000018a4 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    18a4:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18a6:	4c13      	ldr	r4, [pc, #76]	; (18f4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    18a8:	b085      	sub	sp, #20
    18aa:	6823      	ldr	r3, [r4, #0]
    18ac:	9303      	str	r3, [sp, #12]
	return ret;
    18ae:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    18b0:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    18b2:	460d      	mov	r5, r1
    18b4:	4810      	ldr	r0, [pc, #64]	; (18f8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    18b6:	2106      	movs	r1, #6
    18b8:	f001 fb10 	bl	2edc <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    18bc:	2300      	movs	r3, #0
    18be:	220a      	movs	r2, #10
    18c0:	4629      	mov	r1, r5
    18c2:	480e      	ldr	r0, [pc, #56]	; (18fc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    18c4:	f001 fd1e 	bl	3304 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18c8:	2106      	movs	r1, #6
    18ca:	480d      	ldr	r0, [pc, #52]	; (1900 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    18cc:	f001 fb06 	bl	2edc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    18d0:	480a      	ldr	r0, [pc, #40]	; (18fc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    18d2:	f001 fd07 	bl	32e4 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18d6:	6823      	ldr	r3, [r4, #0]
    18d8:	9302      	str	r3, [sp, #8]
	return ret;
    18da:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    18dc:	f102 0132 	add.w	r1, r2, #50	; 0x32
    18e0:	e001      	b.n	18e6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    18e2:	4299      	cmp	r1, r3
    18e4:	d304      	bcc.n	18f0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18e6:	6823      	ldr	r3, [r4, #0]
    18e8:	9301      	str	r3, [sp, #4]
	return ret;
    18ea:	9b01      	ldr	r3, [sp, #4]
    18ec:	429a      	cmp	r2, r3
    18ee:	d9f8      	bls.n	18e2 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    18f0:	b005      	add	sp, #20
    18f2:	bd30      	pop	{r4, r5, pc}
    18f4:	1fff9338 	.word	0x1fff9338
    18f8:	00003ad4 	.word	0x00003ad4
    18fc:	1fff8728 	.word	0x1fff8728
    1900:	00003adc 	.word	0x00003adc

00001904 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    1904:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    1906:	7e03      	ldrb	r3, [r0, #24]
    1908:	b90b      	cbnz	r3, 190e <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    190a:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    190c:	bd38      	pop	{r3, r4, r5, pc}
    190e:	460d      	mov	r5, r1
    1910:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1912:	f001 fab9 	bl	2e88 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    1916:	f010 0fff 	tst.w	r0, #255	; 0xff
    191a:	d101      	bne.n	1920 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    191c:	2065      	movs	r0, #101	; 0x65
    191e:	bd38      	pop	{r3, r4, r5, pc}
    1920:	f001 fab2 	bl	2e88 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    1924:	f010 0fff 	tst.w	r0, #255	; 0xff
    1928:	d0f8      	beq.n	191c <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    192a:	f001 fa71 	bl	2e10 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    192e:	b2c0      	uxtb	r0, r0
    1930:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    1934:	2b1e      	cmp	r3, #30
    1936:	d8f3      	bhi.n	1920 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1938:	a201      	add	r2, pc, #4	; (adr r2, 1940 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    193e:	bf00      	nop
    1940:	000019c9 	.word	0x000019c9
    1944:	00001921 	.word	0x00001921
    1948:	00001921 	.word	0x00001921
    194c:	00001921 	.word	0x00001921
    1950:	00001921 	.word	0x00001921
    1954:	00001921 	.word	0x00001921
    1958:	00001921 	.word	0x00001921
    195c:	00001921 	.word	0x00001921
    1960:	00001921 	.word	0x00001921
    1964:	00001921 	.word	0x00001921
    1968:	00001921 	.word	0x00001921
    196c:	000019bd 	.word	0x000019bd
    1970:	00001921 	.word	0x00001921
    1974:	00001921 	.word	0x00001921
    1978:	00001921 	.word	0x00001921
    197c:	00001921 	.word	0x00001921
    1980:	0000190b 	.word	0x0000190b
    1984:	00001921 	.word	0x00001921
    1988:	00001921 	.word	0x00001921
    198c:	00001921 	.word	0x00001921
    1990:	00001921 	.word	0x00001921
    1994:	00001921 	.word	0x00001921
    1998:	00001921 	.word	0x00001921
    199c:	00001921 	.word	0x00001921
    19a0:	00001921 	.word	0x00001921
    19a4:	0000190b 	.word	0x0000190b
    19a8:	00001921 	.word	0x00001921
    19ac:	00001921 	.word	0x00001921
    19b0:	00001921 	.word	0x00001921
    19b4:	00001921 	.word	0x00001921
    19b8:	0000190d 	.word	0x0000190d
		{

		case 'c':
			sendContinuedACK(breakPointId);
    19bc:	4620      	mov	r0, r4
    19be:	4629      	mov	r1, r5
    19c0:	f7ff ff70 	bl	18a4 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    19c4:	2063      	movs	r0, #99	; 0x63
    19c6:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    19c8:	2300      	movs	r3, #0
    19ca:	7623      	strb	r3, [r4, #24]
			return 'c';
    19cc:	2063      	movs	r0, #99	; 0x63
    19ce:	bd38      	pop	{r3, r4, r5, pc}

000019d0 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    19d0:	b570      	push	{r4, r5, r6, lr}
    19d2:	4605      	mov	r5, r0
    19d4:	b082      	sub	sp, #8
    19d6:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    19d8:	b1c9      	cbz	r1, 1a0e <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    19da:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19dc:	4c0d      	ldr	r4, [pc, #52]	; (1a14 <VisualMicroDebug::start(bool, bool)+0x44>)
    19de:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    19e0:	2100      	movs	r1, #0
    19e2:	4628      	mov	r0, r5
    19e4:	f7ff ff8e 	bl	1904 <VisualMicroDebug::breakWait(unsigned char)>
    19e8:	2863      	cmp	r0, #99	; 0x63
    19ea:	d010      	beq.n	1a0e <VisualMicroDebug::start(bool, bool)+0x3e>
    19ec:	6823      	ldr	r3, [r4, #0]
    19ee:	9301      	str	r3, [sp, #4]
	return ret;
    19f0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    19f2:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19f4:	6823      	ldr	r3, [r4, #0]
    19f6:	9300      	str	r3, [sp, #0]
	return ret;
    19f8:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    19fa:	429a      	cmp	r2, r3
    19fc:	d8f0      	bhi.n	19e0 <VisualMicroDebug::start(bool, bool)+0x10>
    19fe:	4299      	cmp	r1, r3
    1a00:	d2f8      	bcs.n	19f4 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1a02:	2100      	movs	r1, #0
    1a04:	4628      	mov	r0, r5
    1a06:	f7ff ff7d 	bl	1904 <VisualMicroDebug::breakWait(unsigned char)>
    1a0a:	2863      	cmp	r0, #99	; 0x63
    1a0c:	d1ee      	bne.n	19ec <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    1a0e:	762e      	strb	r6, [r5, #24]
#endif

}
    1a10:	b002      	add	sp, #8
    1a12:	bd70      	pop	{r4, r5, r6, pc}
    1a14:	1fff9338 	.word	0x1fff9338

00001a18 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    1a18:	4b03      	ldr	r3, [pc, #12]	; (1a28 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    1a1a:	2200      	movs	r2, #0
    1a1c:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    1a1e:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    1a20:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    1a22:	615a      	str	r2, [r3, #20]
    1a24:	4770      	bx	lr
    1a26:	bf00      	nop
    1a28:	1fff92e8 	.word	0x1fff92e8

00001a2c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1a2c:	4a37      	ldr	r2, [pc, #220]	; (1b0c <wait_for_cal+0xe0>)
    1a2e:	4938      	ldr	r1, [pc, #224]	; (1b10 <wait_for_cal+0xe4>)
    1a30:	6813      	ldr	r3, [r2, #0]
    1a32:	061b      	lsls	r3, r3, #24
    1a34:	d4fc      	bmi.n	1a30 <wait_for_cal+0x4>
    1a36:	680b      	ldr	r3, [r1, #0]
    1a38:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1a3c:	d1f8      	bne.n	1a30 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1a3e:	b672      	cpsid	i
	if (calibrating) {
    1a40:	4934      	ldr	r1, [pc, #208]	; (1b14 <wait_for_cal+0xe8>)
    1a42:	780a      	ldrb	r2, [r1, #0]
    1a44:	2a00      	cmp	r2, #0
    1a46:	d05f      	beq.n	1b08 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1a48:	4a33      	ldr	r2, [pc, #204]	; (1b18 <wait_for_cal+0xec>)
    1a4a:	4834      	ldr	r0, [pc, #208]	; (1b1c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1a4c:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1a4e:	4c34      	ldr	r4, [pc, #208]	; (1b20 <wait_for_cal+0xf4>)
    1a50:	6817      	ldr	r7, [r2, #0]
    1a52:	6806      	ldr	r6, [r0, #0]
    1a54:	6825      	ldr	r5, [r4, #0]
    1a56:	68d4      	ldr	r4, [r2, #12]
    1a58:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1a5a:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1a5c:	3214      	adds	r2, #20
    1a5e:	6800      	ldr	r0, [r0, #0]
    1a60:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1a62:	4f30      	ldr	r7, [pc, #192]	; (1b24 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1a64:	4435      	add	r5, r6
    1a66:	442c      	add	r4, r5
    1a68:	4420      	add	r0, r4
    1a6a:	4402      	add	r2, r0
    1a6c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1a70:	4e2d      	ldr	r6, [pc, #180]	; (1b28 <wait_for_cal+0xfc>)
    1a72:	482e      	ldr	r0, [pc, #184]	; (1b2c <wait_for_cal+0x100>)
    1a74:	4d2e      	ldr	r5, [pc, #184]	; (1b30 <wait_for_cal+0x104>)
    1a76:	4c2f      	ldr	r4, [pc, #188]	; (1b34 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1a7c:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1a7e:	6837      	ldr	r7, [r6, #0]
    1a80:	6806      	ldr	r6, [r0, #0]
    1a82:	682d      	ldr	r5, [r5, #0]
    1a84:	4a2c      	ldr	r2, [pc, #176]	; (1b38 <wait_for_cal+0x10c>)
    1a86:	6824      	ldr	r4, [r4, #0]
    1a88:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1a8a:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1a8c:	6800      	ldr	r0, [r0, #0]
    1a8e:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1a90:	4f2a      	ldr	r7, [pc, #168]	; (1b3c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1a92:	4435      	add	r5, r6
    1a94:	442c      	add	r4, r5
    1a96:	4420      	add	r0, r4
    1a98:	4402      	add	r2, r0
    1a9a:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1a9e:	4e28      	ldr	r6, [pc, #160]	; (1b40 <wait_for_cal+0x114>)
    1aa0:	4828      	ldr	r0, [pc, #160]	; (1b44 <wait_for_cal+0x118>)
    1aa2:	4d29      	ldr	r5, [pc, #164]	; (1b48 <wait_for_cal+0x11c>)
    1aa4:	4c29      	ldr	r4, [pc, #164]	; (1b4c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1aaa:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1aac:	6837      	ldr	r7, [r6, #0]
    1aae:	6806      	ldr	r6, [r0, #0]
    1ab0:	682d      	ldr	r5, [r5, #0]
    1ab2:	4a27      	ldr	r2, [pc, #156]	; (1b50 <wait_for_cal+0x124>)
    1ab4:	6824      	ldr	r4, [r4, #0]
    1ab6:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1ab8:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1aba:	6800      	ldr	r0, [r0, #0]
    1abc:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1abe:	4f25      	ldr	r7, [pc, #148]	; (1b54 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1ac0:	4435      	add	r5, r6
    1ac2:	442c      	add	r4, r5
    1ac4:	4420      	add	r0, r4
    1ac6:	4402      	add	r2, r0
    1ac8:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1acc:	4e22      	ldr	r6, [pc, #136]	; (1b58 <wait_for_cal+0x12c>)
    1ace:	4823      	ldr	r0, [pc, #140]	; (1b5c <wait_for_cal+0x130>)
    1ad0:	4d23      	ldr	r5, [pc, #140]	; (1b60 <wait_for_cal+0x134>)
    1ad2:	4c24      	ldr	r4, [pc, #144]	; (1b64 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1ad8:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1ada:	6837      	ldr	r7, [r6, #0]
    1adc:	6806      	ldr	r6, [r0, #0]
    1ade:	682d      	ldr	r5, [r5, #0]
    1ae0:	4a21      	ldr	r2, [pc, #132]	; (1b68 <wait_for_cal+0x13c>)
    1ae2:	6824      	ldr	r4, [r4, #0]
    1ae4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1ae6:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1ae8:	6800      	ldr	r0, [r0, #0]
    1aea:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1aec:	4435      	add	r5, r6
    1aee:	442c      	add	r4, r5
    1af0:	4420      	add	r0, r4
    1af2:	4402      	add	r2, r0
    1af4:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1af8:	481c      	ldr	r0, [pc, #112]	; (1b6c <wait_for_cal+0x140>)
    1afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1afe:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1b00:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    1b02:	b662      	cpsie	i
}
    1b04:	bcf0      	pop	{r4, r5, r6, r7}
    1b06:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1b08:	b662      	cpsie	i
    1b0a:	4770      	bx	lr
    1b0c:	4003b024 	.word	0x4003b024
    1b10:	400bb024 	.word	0x400bb024
    1b14:	1fff9331 	.word	0x1fff9331
    1b18:	4003b038 	.word	0x4003b038
    1b1c:	4003b03c 	.word	0x4003b03c
    1b20:	4003b040 	.word	0x4003b040
    1b24:	4003b02c 	.word	0x4003b02c
    1b28:	4003b058 	.word	0x4003b058
    1b2c:	4003b05c 	.word	0x4003b05c
    1b30:	4003b060 	.word	0x4003b060
    1b34:	4003b064 	.word	0x4003b064
    1b38:	4003b06c 	.word	0x4003b06c
    1b3c:	4003b030 	.word	0x4003b030
    1b40:	400bb038 	.word	0x400bb038
    1b44:	400bb03c 	.word	0x400bb03c
    1b48:	400bb040 	.word	0x400bb040
    1b4c:	400bb044 	.word	0x400bb044
    1b50:	400bb04c 	.word	0x400bb04c
    1b54:	400bb02c 	.word	0x400bb02c
    1b58:	400bb058 	.word	0x400bb058
    1b5c:	400bb05c 	.word	0x400bb05c
    1b60:	400bb060 	.word	0x400bb060
    1b64:	400bb064 	.word	0x400bb064
    1b68:	400bb06c 	.word	0x400bb06c
    1b6c:	400bb030 	.word	0x400bb030

00001b70 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1b70:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1b72:	4829      	ldr	r0, [pc, #164]	; (1c18 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1b74:	4a29      	ldr	r2, [pc, #164]	; (1c1c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1b76:	4b2a      	ldr	r3, [pc, #168]	; (1c20 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1b78:	4d2a      	ldr	r5, [pc, #168]	; (1c24 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1b7a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1b7c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1b7e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1b80:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1b82:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1b84:	4c28      	ldr	r4, [pc, #160]	; (1c28 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1b86:	2b08      	cmp	r3, #8
    1b88:	d030      	beq.n	1bec <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1b8a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1b8c:	4827      	ldr	r0, [pc, #156]	; (1c2c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1b8e:	4928      	ldr	r1, [pc, #160]	; (1c30 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1b90:	d037      	beq.n	1c02 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1b92:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1b94:	bf0c      	ite	eq
    1b96:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1b98:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1b9a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1b9c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1b9e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1ba0:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1ba2:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1ba4:	4b23      	ldr	r3, [pc, #140]	; (1c34 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1ba6:	4924      	ldr	r1, [pc, #144]	; (1c38 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1ba8:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1baa:	4a24      	ldr	r2, [pc, #144]	; (1c3c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1bac:	b1bb      	cbz	r3, 1bde <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1bae:	2301      	movs	r3, #1
    1bb0:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1bb2:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1bb4:	4b22      	ldr	r3, [pc, #136]	; (1c40 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1bb6:	4923      	ldr	r1, [pc, #140]	; (1c44 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1bb8:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1bba:	4a23      	ldr	r2, [pc, #140]	; (1c48 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1bbc:	2b01      	cmp	r3, #1
    1bbe:	d926      	bls.n	1c0e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1bc0:	2b04      	cmp	r3, #4
    1bc2:	d90f      	bls.n	1be4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1bc4:	2b08      	cmp	r3, #8
    1bc6:	d91e      	bls.n	1c06 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1bc8:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1bca:	bf94      	ite	ls
    1bcc:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1bce:	2387      	movhi	r3, #135	; 0x87
    1bd0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1bd2:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1bd4:	4b1d      	ldr	r3, [pc, #116]	; (1c4c <analog_init+0xdc>)
    1bd6:	2201      	movs	r2, #1
    1bd8:	701a      	strb	r2, [r3, #0]
}
    1bda:	bc30      	pop	{r4, r5}
    1bdc:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1bde:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1be0:	6013      	str	r3, [r2, #0]
    1be2:	e7e7      	b.n	1bb4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1be4:	2384      	movs	r3, #132	; 0x84
    1be6:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1be8:	6013      	str	r3, [r2, #0]
    1bea:	e7f3      	b.n	1bd4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1bec:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1bf0:	490f      	ldr	r1, [pc, #60]	; (1c30 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1bf2:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1bf4:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1bf6:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1bf8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1bfa:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1bfc:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1bfe:	600b      	str	r3, [r1, #0]
    1c00:	e7d0      	b.n	1ba4 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1c02:	2239      	movs	r2, #57	; 0x39
    1c04:	e7f7      	b.n	1bf6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1c06:	2385      	movs	r3, #133	; 0x85
    1c08:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1c0a:	6013      	str	r3, [r2, #0]
    1c0c:	e7e2      	b.n	1bd4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1c0e:	2380      	movs	r3, #128	; 0x80
    1c10:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1c12:	6013      	str	r3, [r2, #0]
    1c14:	e7de      	b.n	1bd4 <analog_init+0x64>
    1c16:	bf00      	nop
    1c18:	40074000 	.word	0x40074000
    1c1c:	40074001 	.word	0x40074001
    1c20:	1fff8722 	.word	0x1fff8722
    1c24:	4003b008 	.word	0x4003b008
    1c28:	4003b00c 	.word	0x4003b00c
    1c2c:	400bb008 	.word	0x400bb008
    1c30:	400bb00c 	.word	0x400bb00c
    1c34:	1fff9334 	.word	0x1fff9334
    1c38:	4003b020 	.word	0x4003b020
    1c3c:	400bb020 	.word	0x400bb020
    1c40:	1fff8723 	.word	0x1fff8723
    1c44:	4003b024 	.word	0x4003b024
    1c48:	400bb024 	.word	0x400bb024
    1c4c:	1fff9331 	.word	0x1fff9331

00001c50 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1c50:	2828      	cmp	r0, #40	; 0x28
    1c52:	d82f      	bhi.n	1cb4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1c54:	4b33      	ldr	r3, [pc, #204]	; (1d24 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1c5a:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1c5c:	2eff      	cmp	r6, #255	; 0xff
    1c5e:	d02b      	beq.n	1cb8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1c60:	4b31      	ldr	r3, [pc, #196]	; (1d28 <analogRead+0xd8>)
    1c62:	781b      	ldrb	r3, [r3, #0]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d12a      	bne.n	1cbe <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1c68:	0632      	lsls	r2, r6, #24
    1c6a:	d42c      	bmi.n	1cc6 <analogRead+0x76>
#endif

	__disable_irq();
    1c6c:	b672      	cpsid	i
    1c6e:	4d2f      	ldr	r5, [pc, #188]	; (1d2c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1c70:	4c2f      	ldr	r4, [pc, #188]	; (1d30 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1c72:	462f      	mov	r7, r5
    1c74:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1c76:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1c78:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    1c7a:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    1c7c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1c7e:	6823      	ldr	r3, [r4, #0]
    1c80:	061b      	lsls	r3, r3, #24
    1c82:	d40c      	bmi.n	1c9e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1c84:	783b      	ldrb	r3, [r7, #0]
    1c86:	b91b      	cbnz	r3, 1c90 <analogRead+0x40>
    1c88:	e7f4      	b.n	1c74 <analogRead+0x24>
    1c8a:	782b      	ldrb	r3, [r5, #0]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d0f1      	beq.n	1c74 <analogRead+0x24>
		__enable_irq();
    1c90:	b662      	cpsie	i
		yield();
    1c92:	f001 fb8f 	bl	33b4 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1c96:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1c98:	6823      	ldr	r3, [r4, #0]
    1c9a:	0618      	lsls	r0, r3, #24
    1c9c:	d5f5      	bpl.n	1c8a <analogRead+0x3a>
			result = ADC0_RA;
    1c9e:	4b25      	ldr	r3, [pc, #148]	; (1d34 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1ca0:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1ca2:	2200      	movs	r2, #0
    1ca4:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    1ca6:	b662      	cpsie	i
			result >>= analog_right_shift;
    1ca8:	4a23      	ldr	r2, [pc, #140]	; (1d38 <analogRead+0xe8>)
    1caa:	7810      	ldrb	r0, [r2, #0]
    1cac:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    1cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1cb4:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1cb6:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1cb8:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1cbe:	f7ff feb5 	bl	1a2c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1cc2:	0632      	lsls	r2, r6, #24
    1cc4:	d5d2      	bpl.n	1c6c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1cc6:	b672      	cpsid	i
    1cc8:	4d1c      	ldr	r5, [pc, #112]	; (1d3c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1cca:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1d48 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1cce:	4c1c      	ldr	r4, [pc, #112]	; (1d40 <analogRead+0xf0>)
    1cd0:	f006 0740 	and.w	r7, r6, #64	; 0x40
    1cd4:	b2ff      	uxtb	r7, r7
    1cd6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1cda:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1cde:	b1df      	cbz	r7, 1d18 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1ce0:	f023 0310 	bic.w	r3, r3, #16
    1ce4:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1ce8:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1cea:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1cec:	4a13      	ldr	r2, [pc, #76]	; (1d3c <analogRead+0xec>)
    1cee:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    1cf0:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    1cf2:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1cf4:	6823      	ldr	r3, [r4, #0]
    1cf6:	0619      	lsls	r1, r3, #24
    1cf8:	d40c      	bmi.n	1d14 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1cfa:	7813      	ldrb	r3, [r2, #0]
    1cfc:	b91b      	cbnz	r3, 1d06 <analogRead+0xb6>
    1cfe:	e7ec      	b.n	1cda <analogRead+0x8a>
    1d00:	782b      	ldrb	r3, [r5, #0]
    1d02:	2b00      	cmp	r3, #0
    1d04:	d0e9      	beq.n	1cda <analogRead+0x8a>
		__enable_irq();
    1d06:	b662      	cpsie	i
		yield();
    1d08:	f001 fb54 	bl	33b4 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1d0c:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1d0e:	6823      	ldr	r3, [r4, #0]
    1d10:	061b      	lsls	r3, r3, #24
    1d12:	d5f5      	bpl.n	1d00 <analogRead+0xb0>
			result = ADC1_RA;
    1d14:	4b0b      	ldr	r3, [pc, #44]	; (1d44 <analogRead+0xf4>)
    1d16:	e7c3      	b.n	1ca0 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1d18:	f043 0310 	orr.w	r3, r3, #16
    1d1c:	f8c8 3000 	str.w	r3, [r8]
    1d20:	e7e2      	b.n	1ce8 <analogRead+0x98>
    1d22:	bf00      	nop
    1d24:	00003b2c 	.word	0x00003b2c
    1d28:	1fff9331 	.word	0x1fff9331
    1d2c:	1fff9333 	.word	0x1fff9333
    1d30:	4003b000 	.word	0x4003b000
    1d34:	4003b010 	.word	0x4003b010
    1d38:	1fff9330 	.word	0x1fff9330
    1d3c:	1fff9332 	.word	0x1fff9332
    1d40:	400bb000 	.word	0x400bb000
    1d44:	400bb010 	.word	0x400bb010
    1d48:	400bb00c 	.word	0x400bb00c

00001d4c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    1d4c:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    1d4e:	4c10      	ldr	r4, [pc, #64]	; (1d90 <fault_isr+0x44>)
    1d50:	e008      	b.n	1d64 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    1d52:	6823      	ldr	r3, [r4, #0]
    1d54:	0559      	lsls	r1, r3, #21
    1d56:	d40d      	bmi.n	1d74 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    1d58:	6823      	ldr	r3, [r4, #0]
    1d5a:	051a      	lsls	r2, r3, #20
    1d5c:	d40f      	bmi.n	1d7e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    1d5e:	6823      	ldr	r3, [r4, #0]
    1d60:	04db      	lsls	r3, r3, #19
    1d62:	d411      	bmi.n	1d88 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    1d64:	6823      	ldr	r3, [r4, #0]
    1d66:	0358      	lsls	r0, r3, #13
    1d68:	d5f3      	bpl.n	1d52 <fault_isr+0x6>
    1d6a:	f000 fa37 	bl	21dc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    1d6e:	6823      	ldr	r3, [r4, #0]
    1d70:	0559      	lsls	r1, r3, #21
    1d72:	d5f1      	bpl.n	1d58 <fault_isr+0xc>
    1d74:	f001 fba2 	bl	34bc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    1d78:	6823      	ldr	r3, [r4, #0]
    1d7a:	051a      	lsls	r2, r3, #20
    1d7c:	d5ef      	bpl.n	1d5e <fault_isr+0x12>
    1d7e:	f001 fc33 	bl	35e8 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    1d82:	6823      	ldr	r3, [r4, #0]
    1d84:	04db      	lsls	r3, r3, #19
    1d86:	d5ed      	bpl.n	1d64 <fault_isr+0x18>
    1d88:	f001 fcc4 	bl	3714 <uart2_status_isr>
    1d8c:	e7ea      	b.n	1d64 <fault_isr+0x18>
    1d8e:	bf00      	nop
    1d90:	40048034 	.word	0x40048034

00001d94 <unused_isr>:
	}
}

void unused_isr(void)
{
    1d94:	b508      	push	{r3, lr}
	fault_isr();
    1d96:	f7ff ffd9 	bl	1d4c <fault_isr>
    1d9a:	bf00      	nop

00001d9c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    1d9c:	4b01      	ldr	r3, [pc, #4]	; (1da4 <startup_early_hook+0x8>)
    1d9e:	2210      	movs	r2, #16
    1da0:	801a      	strh	r2, [r3, #0]
    1da2:	4770      	bx	lr
    1da4:	40052000 	.word	0x40052000

00001da8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    1da8:	4770      	bx	lr
    1daa:	bf00      	nop

00001dac <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    1dac:	7800      	ldrb	r0, [r0, #0]
}
    1dae:	fab0 f080 	clz	r0, r0
    1db2:	0940      	lsrs	r0, r0, #5
    1db4:	4770      	bx	lr
    1db6:	bf00      	nop

00001db8 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    1db8:	2301      	movs	r3, #1
    1dba:	7003      	strb	r3, [r0, #0]
    1dbc:	4770      	bx	lr
    1dbe:	bf00      	nop

00001dc0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1dc0:	4a1c      	ldr	r2, [pc, #112]	; (1e34 <pinMode.part.2+0x74>)
    1dc2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1dc6:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1dc8:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1dca:	d011      	beq.n	1df0 <pinMode.part.2+0x30>
    1dcc:	2904      	cmp	r1, #4
    1dce:	d01b      	beq.n	1e08 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1dd0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    1dd4:	2200      	movs	r2, #0
    1dd6:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1dda:	b129      	cbz	r1, 1de8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1ddc:	2902      	cmp	r1, #2
    1dde:	d020      	beq.n	1e22 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1de0:	2903      	cmp	r1, #3
    1de2:	d022      	beq.n	1e2a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1de4:	601a      	str	r2, [r3, #0]
    1de6:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1de8:	f44f 7280 	mov.w	r2, #256	; 0x100
    1dec:	601a      	str	r2, [r3, #0]
    1dee:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1df0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1df4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1df8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1dfc:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1dfe:	681a      	ldr	r2, [r3, #0]
    1e00:	f022 0220 	bic.w	r2, r2, #32
    1e04:	601a      	str	r2, [r3, #0]
    1e06:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1e08:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1e0c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1e10:	2001      	movs	r0, #1
    1e12:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1e16:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1e18:	681a      	ldr	r2, [r3, #0]
    1e1a:	f042 0220 	orr.w	r2, r2, #32
    1e1e:	601a      	str	r2, [r3, #0]
    1e20:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1e22:	f240 1203 	movw	r2, #259	; 0x103
    1e26:	601a      	str	r2, [r3, #0]
    1e28:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1e2a:	f44f 7281 	mov.w	r2, #258	; 0x102
    1e2e:	601a      	str	r2, [r3, #0]
    1e30:	4770      	bx	lr
    1e32:	bf00      	nop
    1e34:	00003b58 	.word	0x00003b58

00001e38 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1e38:	b430      	push	{r4, r5}
	RTC_SR = 0;
    1e3a:	4b05      	ldr	r3, [pc, #20]	; (1e50 <rtc_set+0x18>)
	RTC_TPR = 0;
    1e3c:	4d05      	ldr	r5, [pc, #20]	; (1e54 <rtc_set+0x1c>)
	RTC_TSR = t;
    1e3e:	4c06      	ldr	r4, [pc, #24]	; (1e58 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1e40:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1e42:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1e44:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    1e46:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    1e48:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1e4a:	6019      	str	r1, [r3, #0]
}
    1e4c:	bc30      	pop	{r4, r5}
    1e4e:	4770      	bx	lr
    1e50:	4003d014 	.word	0x4003d014
    1e54:	4003d004 	.word	0x4003d004
    1e58:	4003d000 	.word	0x4003d000

00001e5c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1e5c:	2821      	cmp	r0, #33	; 0x21
    1e5e:	d801      	bhi.n	1e64 <pinMode+0x8>
    1e60:	f7ff bfae 	b.w	1dc0 <pinMode.part.2>
    1e64:	4770      	bx	lr
    1e66:	bf00      	nop

00001e68 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1e68:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1e6a:	490c      	ldr	r1, [pc, #48]	; (1e9c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1e6c:	4b0c      	ldr	r3, [pc, #48]	; (1ea0 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1e6e:	4a0d      	ldr	r2, [pc, #52]	; (1ea4 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1e70:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1e72:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1e74:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    1e76:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1e78:	0152      	lsls	r2, r2, #5
    1e7a:	d502      	bpl.n	1e82 <micros+0x1a>
    1e7c:	2b32      	cmp	r3, #50	; 0x32
    1e7e:	bf88      	it	hi
    1e80:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1e82:	4909      	ldr	r1, [pc, #36]	; (1ea8 <micros+0x40>)
    1e84:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    1e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e8c:	33ff      	adds	r3, #255	; 0xff
    1e8e:	fba1 1303 	umull	r1, r3, r1, r3
    1e92:	fb02 f000 	mul.w	r0, r2, r0
}
    1e96:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    1e9a:	4770      	bx	lr
    1e9c:	1fff9338 	.word	0x1fff9338
    1ea0:	e000e018 	.word	0xe000e018
    1ea4:	e000ed04 	.word	0xe000ed04
    1ea8:	aaaaaaab 	.word	0xaaaaaaab

00001eac <delay>:

void delay(uint32_t ms)
{
    1eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1eb0:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1eb2:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1eb4:	4f20      	ldr	r7, [pc, #128]	; (1f38 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1eb6:	4b21      	ldr	r3, [pc, #132]	; (1f3c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1eb8:	4a21      	ldr	r2, [pc, #132]	; (1f40 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1eba:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1ebc:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1ebe:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    1ec0:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1ec2:	0152      	lsls	r2, r2, #5
    1ec4:	d502      	bpl.n	1ecc <delay+0x20>
    1ec6:	2b32      	cmp	r3, #50	; 0x32
    1ec8:	bf88      	it	hi
    1eca:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1ecc:	b395      	cbz	r5, 1f34 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1ece:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    1ed2:	4e1c      	ldr	r6, [pc, #112]	; (1f44 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1ed4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1f3c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1ed8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1f40 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1edc:	33ff      	adds	r3, #255	; 0xff
    1ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1ee2:	fba6 1303 	umull	r1, r3, r6, r3
    1ee6:	fb02 f404 	mul.w	r4, r2, r4
    1eea:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1eee:	b672      	cpsid	i
	current = SYST_CVR;
    1ef0:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    1ef4:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1ef6:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    1efa:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1efc:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    1f00:	33ff      	adds	r3, #255	; 0xff
    1f02:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1f06:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1f0a:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    1f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1f12:	d002      	beq.n	1f1a <delay+0x6e>
    1f14:	2932      	cmp	r1, #50	; 0x32
    1f16:	bf88      	it	hi
    1f18:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1f1a:	fb00 3302 	mla	r3, r0, r2, r3
    1f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    1f22:	d304      	bcc.n	1f2e <delay+0x82>
				ms--;
				if (ms == 0) return;
    1f24:	3d01      	subs	r5, #1
    1f26:	d005      	beq.n	1f34 <delay+0x88>
				start += 1000;
    1f28:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    1f2c:	e7df      	b.n	1eee <delay+0x42>
			}
			yield();
    1f2e:	f001 fa41 	bl	33b4 <yield>
		}
    1f32:	e7dc      	b.n	1eee <delay+0x42>
    1f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1f38:	1fff9338 	.word	0x1fff9338
    1f3c:	e000e018 	.word	0xe000e018
    1f40:	e000ed04 	.word	0xe000ed04
    1f44:	aaaaaaab 	.word	0xaaaaaaab

00001f48 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1f4a:	4b2d      	ldr	r3, [pc, #180]	; (2000 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1f4c:	492d      	ldr	r1, [pc, #180]	; (2004 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1f4e:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 2020 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1f52:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 2024 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    1f56:	4e2c      	ldr	r6, [pc, #176]	; (2008 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1f58:	4d2c      	ldr	r5, [pc, #176]	; (200c <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    1f5a:	4c2d      	ldr	r4, [pc, #180]	; (2010 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1f5c:	4a2d      	ldr	r2, [pc, #180]	; (2014 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1f5e:	4f2e      	ldr	r7, [pc, #184]	; (2018 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1f60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    1f64:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1f66:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    1f6a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1f6c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    1f70:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1f72:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    1f76:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1f78:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    1f7c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1f7e:	2000      	movs	r0, #0
    1f80:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1f82:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1f84:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    1f88:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1f8c:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1f90:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    1f92:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    1f94:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    1f96:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    1f98:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1f9a:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    1f9c:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1f9e:	2209      	movs	r2, #9
    1fa0:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    1fa4:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    1fa8:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    1fac:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1fb0:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    1fb4:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    1fb8:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    1fbc:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    1fbe:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1fc2:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1fc6:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    1fca:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1fce:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    1fd0:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1fd4:	4811      	ldr	r0, [pc, #68]	; (201c <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    1fd6:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    1fd8:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    1fdc:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1fe0:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    1fe2:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1fe4:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    1fe6:	f7ff fdc3 	bl	1b70 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    1fea:	2019      	movs	r0, #25
    1fec:	f7ff ff5e 	bl	1eac <delay>
	usb_init();
    1ff0:	f000 fe5c 	bl	2cac <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    1ff4:	f240 1013 	movw	r0, #275	; 0x113
}
    1ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    1ffc:	f7ff bf56 	b.w	1eac <delay>
    2000:	e000e108 	.word	0xe000e108
    2004:	40038004 	.word	0x40038004
    2008:	40038014 	.word	0x40038014
    200c:	40038024 	.word	0x40038024
    2010:	4003802c 	.word	0x4003802c
    2014:	4003801c 	.word	0x4003801c
    2018:	40038034 	.word	0x40038034
    201c:	400b8000 	.word	0x400b8000
    2020:	4003800c 	.word	0x4003800c
    2024:	40038008 	.word	0x40038008

00002028 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2028:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    202a:	2b03      	cmp	r3, #3
    202c:	d814      	bhi.n	2058 <usb_rx+0x30>
	__disable_irq();
    202e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    2030:	490a      	ldr	r1, [pc, #40]	; (205c <usb_rx+0x34>)
    2032:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2036:	b168      	cbz	r0, 2054 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2038:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    203a:	4c09      	ldr	r4, [pc, #36]	; (2060 <usb_rx+0x38>)
    203c:	8805      	ldrh	r5, [r0, #0]
    203e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2042:	6846      	ldr	r6, [r0, #4]
    2044:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2048:	1b52      	subs	r2, r2, r5
    204a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    204e:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2050:	bc70      	pop	{r4, r5, r6}
    2052:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2054:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2056:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2058:	2000      	movs	r0, #0
    205a:	4770      	bx	lr
    205c:	1fff9394 	.word	0x1fff9394
    2060:	1fff95e4 	.word	0x1fff95e4

00002064 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2064:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2066:	2803      	cmp	r0, #3
    2068:	d80b      	bhi.n	2082 <usb_tx_packet_count+0x1e>
	__disable_irq();
    206a:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <usb_tx_packet_count+0x28>)
    206e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2072:	b143      	cbz	r3, 2086 <usb_tx_packet_count+0x22>
    2074:	2000      	movs	r0, #0
    2076:	685b      	ldr	r3, [r3, #4]
    2078:	3001      	adds	r0, #1
    207a:	2b00      	cmp	r3, #0
    207c:	d1fb      	bne.n	2076 <usb_tx_packet_count+0x12>
	__enable_irq();
    207e:	b662      	cpsie	i
	return count;
    2080:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2082:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2084:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2086:	4618      	mov	r0, r3
    2088:	e7f9      	b.n	207e <usb_tx_packet_count+0x1a>
    208a:	bf00      	nop
    208c:	1fff93e8 	.word	0x1fff93e8

00002090 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2090:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2092:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2094:	4a2b      	ldr	r2, [pc, #172]	; (2144 <usb_rx_memory+0xb4>)
    2096:	7813      	ldrb	r3, [r2, #0]
    2098:	071d      	lsls	r5, r3, #28
    209a:	d506      	bpl.n	20aa <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    209c:	4b2a      	ldr	r3, [pc, #168]	; (2148 <usb_rx_memory+0xb8>)
    209e:	6a19      	ldr	r1, [r3, #32]
    20a0:	2900      	cmp	r1, #0
    20a2:	d036      	beq.n	2112 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    20a6:	2900      	cmp	r1, #0
    20a8:	d041      	beq.n	212e <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    20aa:	7853      	ldrb	r3, [r2, #1]
    20ac:	071c      	lsls	r4, r3, #28
    20ae:	d506      	bpl.n	20be <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    20b0:	4b25      	ldr	r3, [pc, #148]	; (2148 <usb_rx_memory+0xb8>)
    20b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    20b4:	2900      	cmp	r1, #0
    20b6:	d03e      	beq.n	2136 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    20ba:	2900      	cmp	r1, #0
    20bc:	d039      	beq.n	2132 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    20be:	7893      	ldrb	r3, [r2, #2]
    20c0:	0719      	lsls	r1, r3, #28
    20c2:	d505      	bpl.n	20d0 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    20c4:	4b20      	ldr	r3, [pc, #128]	; (2148 <usb_rx_memory+0xb8>)
    20c6:	6e19      	ldr	r1, [r3, #96]	; 0x60
    20c8:	2900      	cmp	r1, #0
    20ca:	d036      	beq.n	213a <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20cc:	6e99      	ldr	r1, [r3, #104]	; 0x68
    20ce:	b189      	cbz	r1, 20f4 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    20d0:	78d3      	ldrb	r3, [r2, #3]
    20d2:	071b      	lsls	r3, r3, #28
    20d4:	d507      	bpl.n	20e6 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    20d6:	4b1c      	ldr	r3, [pc, #112]	; (2148 <usb_rx_memory+0xb8>)
    20d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    20dc:	b37a      	cbz	r2, 213e <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    20e2:	2111      	movs	r1, #17
    20e4:	b13a      	cbz	r2, 20f6 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    20e6:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    20e8:	4b18      	ldr	r3, [pc, #96]	; (214c <usb_rx_memory+0xbc>)
    20ea:	2200      	movs	r2, #0
    20ec:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    20ee:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    20f0:	f000 be68 	b.w	2dc4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20f4:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    20f6:	4c15      	ldr	r4, [pc, #84]	; (214c <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    20f8:	4d15      	ldr	r5, [pc, #84]	; (2150 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    20fa:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    20fc:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2100:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2104:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2106:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2108:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    210a:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    210c:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    210e:	bc30      	pop	{r4, r5}
    2110:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2112:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2114:	4c0d      	ldr	r4, [pc, #52]	; (214c <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2116:	4d0f      	ldr	r5, [pc, #60]	; (2154 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    2118:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    211a:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    211e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2122:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2124:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2126:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2128:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    212a:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    212c:	e7ef      	b.n	210e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    212e:	2105      	movs	r1, #5
    2130:	e7e1      	b.n	20f6 <usb_rx_memory+0x66>
    2132:	2109      	movs	r1, #9
    2134:	e7df      	b.n	20f6 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2136:	2208      	movs	r2, #8
    2138:	e7ec      	b.n	2114 <usb_rx_memory+0x84>
    213a:	220c      	movs	r2, #12
    213c:	e7ea      	b.n	2114 <usb_rx_memory+0x84>
    213e:	2210      	movs	r2, #16
    2140:	e7e8      	b.n	2114 <usb_rx_memory+0x84>
    2142:	bf00      	nop
    2144:	00003c94 	.word	0x00003c94
    2148:	1fff8000 	.word	0x1fff8000
    214c:	1fff9411 	.word	0x1fff9411
    2150:	004000c8 	.word	0x004000c8
    2154:	00400088 	.word	0x00400088

00002158 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2158:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    215a:	2b03      	cmp	r3, #3
    215c:	d81d      	bhi.n	219a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    215e:	4a1b      	ldr	r2, [pc, #108]	; (21cc <usb_tx+0x74>)
    2160:	0140      	lsls	r0, r0, #5
    2162:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2166:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2168:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    216a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    216c:	4c18      	ldr	r4, [pc, #96]	; (21d0 <usb_tx+0x78>)
    216e:	5ce2      	ldrb	r2, [r4, r3]
    2170:	2a03      	cmp	r2, #3
    2172:	d81b      	bhi.n	21ac <usb_tx+0x54>
    2174:	e8df f002 	tbb	[pc, r2]
    2178:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    217c:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    217e:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2180:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2182:	f010 0f08 	tst.w	r0, #8
    2186:	bf14      	ite	ne
    2188:	23c8      	movne	r3, #200	; 0xc8
    218a:	2388      	moveq	r3, #136	; 0x88
    218c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2190:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2192:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2194:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2196:	b662      	cpsie	i
}
    2198:	bc30      	pop	{r4, r5}
    219a:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    219c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    219e:	2202      	movs	r2, #2
		break;
    21a0:	e7ed      	b.n	217e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    21a2:	2205      	movs	r2, #5
    21a4:	e7eb      	b.n	217e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    21a6:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    21a8:	2204      	movs	r2, #4
		break;
    21aa:	e7e8      	b.n	217e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    21ac:	4a09      	ldr	r2, [pc, #36]	; (21d4 <usb_tx+0x7c>)
    21ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    21b2:	b138      	cbz	r0, 21c4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    21b4:	4a08      	ldr	r2, [pc, #32]	; (21d8 <usb_tx+0x80>)
    21b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    21ba:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    21bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    21c0:	b662      	cpsie	i
		return;
    21c2:	e7e9      	b.n	2198 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    21c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    21c8:	4a03      	ldr	r2, [pc, #12]	; (21d8 <usb_tx+0x80>)
    21ca:	e7f7      	b.n	21bc <usb_tx+0x64>
    21cc:	1fff8000 	.word	0x1fff8000
    21d0:	1fff9420 	.word	0x1fff9420
    21d4:	1fff93e8 	.word	0x1fff93e8
    21d8:	1fff93f8 	.word	0x1fff93f8

000021dc <usb_isr>:
}



void usb_isr(void)
{
    21dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    21e0:	f8df b30c 	ldr.w	fp, [pc, #780]	; 24f0 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    21e4:	f8df a30c 	ldr.w	sl, [pc, #780]	; 24f4 <usb_isr+0x318>
}



void usb_isr(void)
{
    21e8:	b087      	sub	sp, #28
    21ea:	e044      	b.n	2276 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    21ec:	4fab      	ldr	r7, [pc, #684]	; (249c <usb_isr+0x2c0>)
    21ee:	ea4f 0893 	mov.w	r8, r3, lsr #2
    21f2:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    21f6:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    21f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    21fc:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2200:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2202:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2206:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    220a:	2b00      	cmp	r3, #0
    220c:	f040 8102 	bne.w	2414 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2210:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    2214:	0c1b      	lsrs	r3, r3, #16
    2216:	b299      	uxth	r1, r3
    2218:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    221c:	2b00      	cmp	r3, #0
    221e:	f000 80f0 	beq.w	2402 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2222:	4b9f      	ldr	r3, [pc, #636]	; (24a0 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2224:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2228:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    222c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    2230:	2a00      	cmp	r2, #0
    2232:	f000 82c5 	beq.w	27c0 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2236:	4d9b      	ldr	r5, [pc, #620]	; (24a4 <usb_isr+0x2c8>)
    2238:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    223c:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    223e:	4c9a      	ldr	r4, [pc, #616]	; (24a8 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2240:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2244:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    2248:	4419      	add	r1, r3
    224a:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    224e:	f000 fd99 	bl	2d84 <usb_malloc>
					if (packet) {
    2252:	2800      	cmp	r0, #0
    2254:	f000 82ad 	beq.w	27b2 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2258:	4a94      	ldr	r2, [pc, #592]	; (24ac <usb_isr+0x2d0>)
    225a:	4b95      	ldr	r3, [pc, #596]	; (24b0 <usb_isr+0x2d4>)
    225c:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2260:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2264:	bf18      	it	ne
    2266:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2268:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    226c:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2270:	2308      	movs	r3, #8
    2272:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2276:	f89b 4000 	ldrb.w	r4, [fp]
    227a:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    227c:	0761      	lsls	r1, r4, #29
    227e:	d51a      	bpl.n	22b6 <usb_isr+0xda>
		if (usb_configuration) {
    2280:	4b8c      	ldr	r3, [pc, #560]	; (24b4 <usb_isr+0x2d8>)
    2282:	781b      	ldrb	r3, [r3, #0]
    2284:	b1a3      	cbz	r3, 22b0 <usb_isr+0xd4>
			t = usb_reboot_timer;
    2286:	498c      	ldr	r1, [pc, #560]	; (24b8 <usb_isr+0x2dc>)
    2288:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    228a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    228e:	b122      	cbz	r2, 229a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2290:	3b01      	subs	r3, #1
    2292:	b2db      	uxtb	r3, r3
    2294:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2296:	b903      	cbnz	r3, 229a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2298:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    229a:	4988      	ldr	r1, [pc, #544]	; (24bc <usb_isr+0x2e0>)
    229c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    229e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    22a2:	b12a      	cbz	r2, 22b0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    22a4:	3b01      	subs	r3, #1
    22a6:	b2db      	uxtb	r3, r3
    22a8:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    22aa:	2b00      	cmp	r3, #0
    22ac:	f000 8257 	beq.w	275e <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    22b0:	2304      	movs	r3, #4
    22b2:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    22b6:	f004 0308 	and.w	r3, r4, #8
    22ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    22be:	2b00      	cmp	r3, #0
    22c0:	f000 80cc 	beq.w	245c <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    22c4:	f89a 3000 	ldrb.w	r3, [sl]
    22c8:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    22ca:	091e      	lsrs	r6, r3, #4
    22cc:	d18e      	bne.n	21ec <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    22ce:	089c      	lsrs	r4, r3, #2
    22d0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 249c <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    22d4:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    22d8:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    22dc:	f3c2 0283 	ubfx	r2, r2, #2, #4
    22e0:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    22e2:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    22e4:	2a0c      	cmp	r2, #12
    22e6:	f200 8088 	bhi.w	23fa <usb_isr+0x21e>
    22ea:	e8df f002 	tbb	[pc, r2]
    22ee:	7c7c      	.short	0x7c7c
    22f0:	86868686 	.word	0x86868686
    22f4:	86478686 	.word	0x86478686
    22f8:	8686      	.short	0x8686
    22fa:	07          	.byte	0x07
    22fb:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    22fc:	6808      	ldr	r0, [r1, #0]
    22fe:	4d70      	ldr	r5, [pc, #448]	; (24c0 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    2300:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2302:	4f70      	ldr	r7, [pc, #448]	; (24c4 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2304:	4e70      	ldr	r6, [pc, #448]	; (24c8 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2306:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2308:	b281      	uxth	r1, r0
    230a:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    230e:	4b67      	ldr	r3, [pc, #412]	; (24ac <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2310:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2312:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2316:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2318:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    231a:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    231e:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2320:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2324:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2328:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    232c:	4c5b      	ldr	r4, [pc, #364]	; (249c <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    232e:	f200 80e3 	bhi.w	24f8 <usb_isr+0x31c>
    2332:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    2336:	f080 8346 	bcs.w	29c6 <usb_isr+0x7ea>
    233a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    233e:	f000 82fc 	beq.w	293a <usb_isr+0x75e>
    2342:	f200 828d 	bhi.w	2860 <usb_isr+0x684>
    2346:	2980      	cmp	r1, #128	; 0x80
    2348:	f000 8377 	beq.w	2a3a <usb_isr+0x85e>
    234c:	2982      	cmp	r1, #130	; 0x82
    234e:	f040 82fa 	bne.w	2946 <usb_isr+0x76a>
    2352:	88a9      	ldrh	r1, [r5, #4]
    2354:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2358:	2904      	cmp	r1, #4
    235a:	f200 82f4 	bhi.w	2946 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    235e:	485b      	ldr	r0, [pc, #364]	; (24cc <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2360:	4c5b      	ldr	r4, [pc, #364]	; (24d0 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2362:	0089      	lsls	r1, r1, #2
    2364:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2366:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2368:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    236a:	7802      	ldrb	r2, [r0, #0]
    236c:	0793      	lsls	r3, r2, #30
    236e:	f140 8458 	bpl.w	2c22 <usb_isr+0xa46>
    2372:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    2376:	f04f 0e02 	mov.w	lr, #2
    237a:	e342      	b.n	2a02 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    237c:	4f51      	ldr	r7, [pc, #324]	; (24c4 <usb_isr+0x2e8>)
    237e:	683a      	ldr	r2, [r7, #0]
		if (data) {
    2380:	b332      	cbz	r2, 23d0 <usb_isr+0x1f4>
			size = ep0_tx_len;
    2382:	4b54      	ldr	r3, [pc, #336]	; (24d4 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2384:	4e50      	ldr	r6, [pc, #320]	; (24c8 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2386:	4954      	ldr	r1, [pc, #336]	; (24d8 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2388:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    238a:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    238c:	780d      	ldrb	r5, [r1, #0]
    238e:	2840      	cmp	r0, #64	; 0x40
    2390:	4686      	mov	lr, r0
    2392:	f045 0802 	orr.w	r8, r5, #2
    2396:	bf28      	it	cs
    2398:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    239c:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    239e:	f084 0401 	eor.w	r4, r4, #1
    23a2:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    23a4:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23a8:	bf0c      	ite	eq
    23aa:	2488      	moveq	r4, #136	; 0x88
    23ac:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23ae:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    23b2:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    23b4:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23bc:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    23be:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23c0:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    23c4:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    23c6:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    23c8:	2800      	cmp	r0, #0
    23ca:	f000 8145 	beq.w	2658 <usb_isr+0x47c>
    23ce:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    23d0:	4b3b      	ldr	r3, [pc, #236]	; (24c0 <usb_isr+0x2e4>)
    23d2:	881a      	ldrh	r2, [r3, #0]
    23d4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    23d8:	d10f      	bne.n	23fa <usb_isr+0x21e>
			setup.bRequest = 0;
    23da:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    23dc:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    23de:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    23e0:	4b3e      	ldr	r3, [pc, #248]	; (24dc <usb_isr+0x300>)
    23e2:	701a      	strb	r2, [r3, #0]
    23e4:	e009      	b.n	23fa <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    23e6:	4a36      	ldr	r2, [pc, #216]	; (24c0 <usb_isr+0x2e4>)
    23e8:	8810      	ldrh	r0, [r2, #0]
    23ea:	f242 0221 	movw	r2, #8225	; 0x2021
    23ee:	4290      	cmp	r0, r2
    23f0:	f000 8137 	beq.w	2662 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    23f4:	4a2d      	ldr	r2, [pc, #180]	; (24ac <usb_isr+0x2d0>)
    23f6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    23fa:	4a39      	ldr	r2, [pc, #228]	; (24e0 <usb_isr+0x304>)
    23fc:	2301      	movs	r3, #1
    23fe:	7013      	strb	r3, [r2, #0]
    2400:	e736      	b.n	2270 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2402:	4a2a      	ldr	r2, [pc, #168]	; (24ac <usb_isr+0x2d0>)
    2404:	4b2a      	ldr	r3, [pc, #168]	; (24b0 <usb_isr+0x2d4>)
    2406:	f019 0f08 	tst.w	r9, #8
    240a:	bf18      	it	ne
    240c:	4613      	movne	r3, r2
    240e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    2412:	e72d      	b.n	2270 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2414:	f000 fcd6 	bl	2dc4 <usb_free>
				packet = tx_first[endpoint];
    2418:	4a32      	ldr	r2, [pc, #200]	; (24e4 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    241a:	4933      	ldr	r1, [pc, #204]	; (24e8 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    241c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2420:	2b00      	cmp	r3, #0
    2422:	f000 81d1 	beq.w	27c8 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2426:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2428:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    242a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    242e:	f103 0208 	add.w	r2, r3, #8
    2432:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2436:	2c03      	cmp	r4, #3
    2438:	d805      	bhi.n	2446 <usb_isr+0x26a>
    243a:	e8df f004 	tbb	[pc, r4]
    243e:	022c      	.short	0x022c
    2440:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2442:	2202      	movs	r2, #2
    2444:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2446:	881a      	ldrh	r2, [r3, #0]
    2448:	f019 0f08 	tst.w	r9, #8
    244c:	bf0c      	ite	eq
    244e:	2388      	moveq	r3, #136	; 0x88
    2450:	23c8      	movne	r3, #200	; 0xc8
    2452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    2456:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    245a:	e709      	b.n	2270 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    245c:	07e0      	lsls	r0, r4, #31
    245e:	f100 8181 	bmi.w	2764 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2462:	0621      	lsls	r1, r4, #24
    2464:	f100 81f2 	bmi.w	284c <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2468:	07a2      	lsls	r2, r4, #30
    246a:	d506      	bpl.n	247a <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    246c:	4a1f      	ldr	r2, [pc, #124]	; (24ec <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    246e:	4920      	ldr	r1, [pc, #128]	; (24f0 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2470:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2472:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2474:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2476:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2478:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    247a:	06e3      	lsls	r3, r4, #27
    247c:	d502      	bpl.n	2484 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    247e:	4b1c      	ldr	r3, [pc, #112]	; (24f0 <usb_isr+0x314>)
    2480:	2210      	movs	r2, #16
    2482:	701a      	strb	r2, [r3, #0]
	}

}
    2484:	b007      	add	sp, #28
    2486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    248a:	2204      	movs	r2, #4
    248c:	558a      	strb	r2, [r1, r6]
						break;
    248e:	e7da      	b.n	2446 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2490:	2205      	movs	r2, #5
    2492:	558a      	strb	r2, [r1, r6]
						break;
    2494:	e7d7      	b.n	2446 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2496:	2203      	movs	r2, #3
    2498:	558a      	strb	r2, [r1, r6]
						break;
    249a:	e7d4      	b.n	2446 <usb_isr+0x26a>
    249c:	1fff8000 	.word	0x1fff8000
    24a0:	1fff9394 	.word	0x1fff9394
    24a4:	1fff9340 	.word	0x1fff9340
    24a8:	1fff95e4 	.word	0x1fff95e4
    24ac:	004000c8 	.word	0x004000c8
    24b0:	00400088 	.word	0x00400088
    24b4:	1fff941c 	.word	0x1fff941c
    24b8:	1fff93a5 	.word	0x1fff93a5
    24bc:	1fff9424 	.word	0x1fff9424
    24c0:	1fff9408 	.word	0x1fff9408
    24c4:	1fff933c 	.word	0x1fff933c
    24c8:	1fff93a4 	.word	0x1fff93a4
    24cc:	400720c0 	.word	0x400720c0
    24d0:	1fff9414 	.word	0x1fff9414
    24d4:	1fff9350 	.word	0x1fff9350
    24d8:	1fff9410 	.word	0x1fff9410
    24dc:	40072098 	.word	0x40072098
    24e0:	40072094 	.word	0x40072094
    24e4:	1fff93e8 	.word	0x1fff93e8
    24e8:	1fff9420 	.word	0x1fff9420
    24ec:	40072088 	.word	0x40072088
    24f0:	40072080 	.word	0x40072080
    24f4:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    24f8:	f242 0021 	movw	r0, #8225	; 0x2021
    24fc:	4281      	cmp	r1, r0
    24fe:	f000 812a 	beq.w	2756 <usb_isr+0x57a>
    2502:	f200 80d8 	bhi.w	26b6 <usb_isr+0x4da>
    2506:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    250a:	f000 8276 	beq.w	29fa <usb_isr+0x81e>
    250e:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2512:	f040 8218 	bne.w	2946 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    2516:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2518:	49b3      	ldr	r1, [pc, #716]	; (27e8 <usb_isr+0x60c>)
    251a:	78a8      	ldrb	r0, [r5, #2]
    251c:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    251e:	0612      	lsls	r2, r2, #24
    2520:	f100 833a 	bmi.w	2b98 <usb_isr+0x9bc>
    2524:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    2528:	49b0      	ldr	r1, [pc, #704]	; (27ec <usb_isr+0x610>)
    252a:	0613      	lsls	r3, r2, #24
    252c:	f100 830c 	bmi.w	2b48 <usb_isr+0x96c>
    2530:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    2534:	49ad      	ldr	r1, [pc, #692]	; (27ec <usb_isr+0x610>)
    2536:	0615      	lsls	r5, r2, #24
    2538:	f100 8301 	bmi.w	2b3e <usb_isr+0x962>
    253c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    2540:	49aa      	ldr	r1, [pc, #680]	; (27ec <usb_isr+0x610>)
    2542:	0614      	lsls	r4, r2, #24
    2544:	f100 82f6 	bmi.w	2b34 <usb_isr+0x958>
    2548:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    254c:	49a7      	ldr	r1, [pc, #668]	; (27ec <usb_isr+0x610>)
    254e:	0610      	lsls	r0, r2, #24
    2550:	f100 834a 	bmi.w	2be8 <usb_isr+0xa0c>
    2554:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    2558:	49a4      	ldr	r1, [pc, #656]	; (27ec <usb_isr+0x610>)
    255a:	0612      	lsls	r2, r2, #24
    255c:	f100 833f 	bmi.w	2bde <usb_isr+0xa02>
    2560:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    2564:	49a1      	ldr	r1, [pc, #644]	; (27ec <usb_isr+0x610>)
    2566:	0613      	lsls	r3, r2, #24
    2568:	f100 8334 	bmi.w	2bd4 <usb_isr+0x9f8>
    256c:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    2570:	499e      	ldr	r1, [pc, #632]	; (27ec <usb_isr+0x610>)
    2572:	0615      	lsls	r5, r2, #24
    2574:	f100 8329 	bmi.w	2bca <usb_isr+0x9ee>
    2578:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    257c:	499b      	ldr	r1, [pc, #620]	; (27ec <usb_isr+0x610>)
    257e:	0614      	lsls	r4, r2, #24
    2580:	f100 831e 	bmi.w	2bc0 <usb_isr+0x9e4>
    2584:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    2588:	4998      	ldr	r1, [pc, #608]	; (27ec <usb_isr+0x610>)
    258a:	0610      	lsls	r0, r2, #24
    258c:	f100 8313 	bmi.w	2bb6 <usb_isr+0x9da>
    2590:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    2594:	4995      	ldr	r1, [pc, #596]	; (27ec <usb_isr+0x610>)
    2596:	0612      	lsls	r2, r2, #24
    2598:	f100 8308 	bmi.w	2bac <usb_isr+0x9d0>
    259c:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    25a0:	4992      	ldr	r1, [pc, #584]	; (27ec <usb_isr+0x610>)
    25a2:	0613      	lsls	r3, r2, #24
    25a4:	f100 82fd 	bmi.w	2ba2 <usb_isr+0x9c6>
    25a8:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    25ac:	498f      	ldr	r1, [pc, #572]	; (27ec <usb_isr+0x610>)
    25ae:	0615      	lsls	r5, r2, #24
    25b0:	f100 8331 	bmi.w	2c16 <usb_isr+0xa3a>
    25b4:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    25b8:	498c      	ldr	r1, [pc, #560]	; (27ec <usb_isr+0x610>)
    25ba:	0614      	lsls	r4, r2, #24
    25bc:	f100 8325 	bmi.w	2c0a <usb_isr+0xa2e>
    25c0:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    25c4:	4989      	ldr	r1, [pc, #548]	; (27ec <usb_isr+0x610>)
    25c6:	0610      	lsls	r0, r2, #24
    25c8:	f100 8319 	bmi.w	2bfe <usb_isr+0xa22>
    25cc:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    25d0:	4986      	ldr	r1, [pc, #536]	; (27ec <usb_isr+0x610>)
    25d2:	0612      	lsls	r2, r2, #24
    25d4:	f100 830d 	bmi.w	2bf2 <usb_isr+0xa16>
    25d8:	4885      	ldr	r0, [pc, #532]	; (27f0 <usb_isr+0x614>)
    25da:	4a86      	ldr	r2, [pc, #536]	; (27f4 <usb_isr+0x618>)
    25dc:	4986      	ldr	r1, [pc, #536]	; (27f8 <usb_isr+0x61c>)
    25de:	9001      	str	r0, [sp, #4]
    25e0:	4886      	ldr	r0, [pc, #536]	; (27fc <usb_isr+0x620>)
    25e2:	4d87      	ldr	r5, [pc, #540]	; (2800 <usb_isr+0x624>)
    25e4:	4c87      	ldr	r4, [pc, #540]	; (2804 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    25e6:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    25e8:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    25ea:	9605      	str	r6, [sp, #20]
    25ec:	9502      	str	r5, [sp, #8]
    25ee:	4680      	mov	r8, r0
    25f0:	460f      	mov	r7, r1
    25f2:	4616      	mov	r6, r2
    25f4:	461d      	mov	r5, r3
    25f6:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    25f8:	6830      	ldr	r0, [r6, #0]
			while (p) {
    25fa:	b128      	cbz	r0, 2608 <usb_isr+0x42c>
				n = p->next;
    25fc:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    25fe:	f000 fbe1 	bl	2dc4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2602:	4620      	mov	r0, r4
    2604:	2c00      	cmp	r4, #0
    2606:	d1f9      	bne.n	25fc <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2608:	2300      	movs	r3, #0
    260a:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    260c:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    260e:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2610:	461a      	mov	r2, r3
    2612:	2300      	movs	r3, #0
    2614:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    2618:	b128      	cbz	r0, 2626 <usb_isr+0x44a>
				n = p->next;
    261a:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    261c:	f000 fbd2 	bl	2dc4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2620:	4620      	mov	r0, r4
    2622:	2c00      	cmp	r4, #0
    2624:	d1f9      	bne.n	261a <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2626:	2200      	movs	r2, #0
    2628:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    262a:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    262c:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    2630:	4611      	mov	r1, r2
    2632:	2200      	movs	r2, #0
    2634:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    2638:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    263a:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    263c:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    263e:	f04f 0100 	mov.w	r1, #0
    2642:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    2646:	2b03      	cmp	r3, #3
    2648:	f200 812b 	bhi.w	28a2 <usb_isr+0x6c6>
    264c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2650:	01250170 	.word	0x01250170
    2654:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2658:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    265c:	bf18      	it	ne
    265e:	2200      	movne	r2, #0
    2660:	e6b5      	b.n	23ce <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2662:	4a69      	ldr	r2, [pc, #420]	; (2808 <usb_isr+0x62c>)
    2664:	780d      	ldrb	r5, [r1, #0]
    2666:	7848      	ldrb	r0, [r1, #1]
    2668:	7015      	strb	r5, [r2, #0]
    266a:	7050      	strb	r0, [r2, #1]
    266c:	788d      	ldrb	r5, [r1, #2]
    266e:	78c8      	ldrb	r0, [r1, #3]
    2670:	7095      	strb	r5, [r2, #2]
    2672:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2674:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2676:	790d      	ldrb	r5, [r1, #4]
    2678:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    267a:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    267c:	794d      	ldrb	r5, [r1, #5]
    267e:	7989      	ldrb	r1, [r1, #6]
    2680:	7155      	strb	r5, [r2, #5]
    2682:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2684:	f000 819b 	beq.w	29be <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2688:	4960      	ldr	r1, [pc, #384]	; (280c <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    268a:	4e61      	ldr	r6, [pc, #388]	; (2810 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    268c:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    268e:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2690:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2694:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2696:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    269a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    269c:	bf0c      	ite	eq
    269e:	2188      	moveq	r1, #136	; 0x88
    26a0:	21c8      	movne	r1, #200	; 0xc8
    26a2:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26a6:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    26aa:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26ae:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    26b0:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26b2:	6051      	str	r1, [r2, #4]
    26b4:	e69e      	b.n	23f4 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    26b6:	f242 2021 	movw	r0, #8737	; 0x2221
    26ba:	4281      	cmp	r1, r0
    26bc:	f040 81cb 	bne.w	2a56 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    26c0:	4b54      	ldr	r3, [pc, #336]	; (2814 <usb_isr+0x638>)
    26c2:	4c55      	ldr	r4, [pc, #340]	; (2818 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    26c4:	4955      	ldr	r1, [pc, #340]	; (281c <usb_isr+0x640>)
    26c6:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    26c8:	681d      	ldr	r5, [r3, #0]
    26ca:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    26cc:	f8cd e004 	str.w	lr, [sp, #4]
    26d0:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    26d2:	2000      	movs	r0, #0
    26d4:	9002      	str	r0, [sp, #8]
    26d6:	4680      	mov	r8, r0
    26d8:	4684      	mov	ip, r0
    26da:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26dc:	494b      	ldr	r1, [pc, #300]	; (280c <usb_isr+0x630>)
    26de:	780d      	ldrb	r5, [r1, #0]
    26e0:	f045 0e02 	orr.w	lr, r5, #2
    26e4:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    26e8:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26ea:	9b01      	ldr	r3, [sp, #4]
    26ec:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26ee:	9b03      	ldr	r3, [sp, #12]
    26f0:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26f2:	bf0c      	ite	eq
    26f4:	2488      	moveq	r4, #136	; 0x88
    26f6:	24c8      	movne	r4, #200	; 0xc8
    26f8:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    26fc:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2700:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2704:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2706:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2708:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 27ec <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    270c:	4b40      	ldr	r3, [pc, #256]	; (2810 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    270e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 280c <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2712:	2800      	cmp	r0, #0
    2714:	f040 811e 	bne.w	2954 <usb_isr+0x778>
    2718:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    271c:	d11b      	bne.n	2756 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    271e:	f044 0c02 	orr.w	ip, r4, #2
    2722:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    2726:	9c02      	ldr	r4, [sp, #8]
    2728:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 27ec <usb_isr+0x610>
    272c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    272e:	2a00      	cmp	r2, #0
    2730:	f040 8126 	bne.w	2980 <usb_isr+0x7a4>
    2734:	0402      	lsls	r2, r0, #16
    2736:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    273a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    273e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2742:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2744:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2746:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2748:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    274a:	2840      	cmp	r0, #64	; 0x40
    274c:	d103      	bne.n	2756 <usb_isr+0x57a>
    274e:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2750:	4a33      	ldr	r2, [pc, #204]	; (2820 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2752:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2754:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2756:	4a33      	ldr	r2, [pc, #204]	; (2824 <usb_isr+0x648>)
    2758:	2301      	movs	r3, #1
    275a:	7013      	strb	r3, [r2, #0]
    275c:	e64d      	b.n	23fa <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    275e:	f000 fc9d 	bl	309c <usb_serial_flush_callback>
    2762:	e5a5      	b.n	22b0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2764:	4b21      	ldr	r3, [pc, #132]	; (27ec <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2766:	482f      	ldr	r0, [pc, #188]	; (2824 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    2768:	4928      	ldr	r1, [pc, #160]	; (280c <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    276a:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    276c:	f04f 0e02 	mov.w	lr, #2
    2770:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2774:	4f2c      	ldr	r7, [pc, #176]	; (2828 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2776:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2778:	492c      	ldr	r1, [pc, #176]	; (282c <usb_isr+0x650>)
    277a:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    277c:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    277e:	4e2c      	ldr	r6, [pc, #176]	; (2830 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    2780:	4d2c      	ldr	r5, [pc, #176]	; (2834 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2782:	4c2d      	ldr	r4, [pc, #180]	; (2838 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2784:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2786:	210d      	movs	r1, #13
    2788:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    278a:	21ff      	movs	r1, #255	; 0xff
    278c:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    278e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 2848 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2792:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2794:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2796:	4d29      	ldr	r5, [pc, #164]	; (283c <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2798:	4a29      	ldr	r2, [pc, #164]	; (2840 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    279a:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    279e:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    27a0:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    27a2:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    27a6:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    27a8:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    27aa:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    27ac:	b007      	add	sp, #28
    27ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    27b2:	4a24      	ldr	r2, [pc, #144]	; (2844 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    27b4:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    27b8:	7813      	ldrb	r3, [r2, #0]
    27ba:	3301      	adds	r3, #1
    27bc:	7013      	strb	r3, [r2, #0]
    27be:	e557      	b.n	2270 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    27c0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    27c4:	4d0e      	ldr	r5, [pc, #56]	; (2800 <usb_isr+0x624>)
    27c6:	e53a      	b.n	223e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    27c8:	5d8b      	ldrb	r3, [r1, r6]
    27ca:	2b03      	cmp	r3, #3
    27cc:	f200 80f0 	bhi.w	29b0 <usb_isr+0x7d4>
    27d0:	a201      	add	r2, pc, #4	; (adr r2, 27d8 <usb_isr+0x5fc>)
    27d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    27d6:	bf00      	nop
    27d8:	00002271 	.word	0x00002271
    27dc:	00002271 	.word	0x00002271
    27e0:	00002895 	.word	0x00002895
    27e4:	0000288f 	.word	0x0000288f
    27e8:	1fff941c 	.word	0x1fff941c
    27ec:	1fff8000 	.word	0x1fff8000
    27f0:	1fff93f8 	.word	0x1fff93f8
    27f4:	1fff9394 	.word	0x1fff9394
    27f8:	1fff93e8 	.word	0x1fff93e8
    27fc:	1fff9420 	.word	0x1fff9420
    2800:	1fff9340 	.word	0x1fff9340
    2804:	1fff95e4 	.word	0x1fff95e4
    2808:	1fff95ec 	.word	0x1fff95ec
    280c:	1fff9410 	.word	0x1fff9410
    2810:	1fff93a4 	.word	0x1fff93a4
    2814:	1fff9338 	.word	0x1fff9338
    2818:	1fff95f4 	.word	0x1fff95f4
    281c:	1fff9434 	.word	0x1fff9434
    2820:	1fff9350 	.word	0x1fff9350
    2824:	40072094 	.word	0x40072094
    2828:	400720c0 	.word	0x400720c0
    282c:	00400088 	.word	0x00400088
    2830:	40072088 	.word	0x40072088
    2834:	40072080 	.word	0x40072080
    2838:	40072098 	.word	0x40072098
    283c:	1fff9354 	.word	0x1fff9354
    2840:	1fff93a8 	.word	0x1fff93a8
    2844:	1fff9411 	.word	0x1fff9411
    2848:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    284c:	49c1      	ldr	r1, [pc, #772]	; (2b54 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    284e:	4bc2      	ldr	r3, [pc, #776]	; (2b58 <usb_isr+0x97c>)
    2850:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2852:	200d      	movs	r0, #13
    2854:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2856:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2858:	07a2      	lsls	r2, r4, #30
    285a:	f57f ae0e 	bpl.w	247a <usb_isr+0x29e>
    285e:	e605      	b.n	246c <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2860:	f240 3202 	movw	r2, #770	; 0x302
    2864:	4291      	cmp	r1, r2
    2866:	f040 80ee 	bne.w	2a46 <usb_isr+0x86a>
    286a:	88a9      	ldrh	r1, [r5, #4]
    286c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2870:	2904      	cmp	r1, #4
    2872:	d868      	bhi.n	2946 <usb_isr+0x76a>
    2874:	886a      	ldrh	r2, [r5, #2]
    2876:	2a00      	cmp	r2, #0
    2878:	d165      	bne.n	2946 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    287a:	48b6      	ldr	r0, [pc, #728]	; (2b54 <usb_isr+0x978>)
    287c:	f8cd e004 	str.w	lr, [sp, #4]
    2880:	0089      	lsls	r1, r1, #2
    2882:	4408      	add	r0, r1
    2884:	7801      	ldrb	r1, [r0, #0]
    2886:	f041 0102 	orr.w	r1, r1, #2
    288a:	7001      	strb	r1, [r0, #0]
    288c:	e721      	b.n	26d2 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    288e:	2301      	movs	r3, #1
    2890:	558b      	strb	r3, [r1, r6]
						break;
    2892:	e4ed      	b.n	2270 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2894:	2300      	movs	r3, #0
    2896:	558b      	strb	r3, [r1, r6]
						break;
    2898:	e4ea      	b.n	2270 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    289a:	f04f 0301 	mov.w	r3, #1
    289e:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    28a2:	3501      	adds	r5, #1
    28a4:	2d04      	cmp	r5, #4
    28a6:	f106 0604 	add.w	r6, r6, #4
    28aa:	f107 0704 	add.w	r7, r7, #4
    28ae:	f108 0801 	add.w	r8, r8, #1
    28b2:	f47f aea1 	bne.w	25f8 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    28b6:	4ca9      	ldr	r4, [pc, #676]	; (2b5c <usb_isr+0x980>)
			*reg = epconf;
    28b8:	4ba9      	ldr	r3, [pc, #676]	; (2b60 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    28ba:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    28bc:	4da9      	ldr	r5, [pc, #676]	; (2b64 <usb_isr+0x988>)
    28be:	9f04      	ldr	r7, [sp, #16]
    28c0:	9e05      	ldr	r6, [sp, #20]
    28c2:	2100      	movs	r1, #0
    28c4:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    28c6:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    28c8:	0713      	lsls	r3, r2, #28
    28ca:	f100 8105 	bmi.w	2ad8 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    28ce:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    28d0:	49a5      	ldr	r1, [pc, #660]	; (2b68 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    28d2:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 2b74 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    28d6:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    28d8:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    28da:	f04f 0100 	mov.w	r1, #0
    28de:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    28e2:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    28e6:	f100 80e0 	bmi.w	2aaa <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    28ea:	49a0      	ldr	r1, [pc, #640]	; (2b6c <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    28ec:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    28ee:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    28f0:	2100      	movs	r1, #0
    28f2:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    28f6:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    28fa:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    28fc:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2b74 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2900:	f100 8101 	bmi.w	2b06 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2904:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    2906:	499a      	ldr	r1, [pc, #616]	; (2b70 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2908:	4c9a      	ldr	r4, [pc, #616]	; (2b74 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    290a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    290c:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    290e:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2910:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2914:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2918:	f100 80b0 	bmi.w	2a7c <usb_isr+0x8a0>
    291c:	7833      	ldrb	r3, [r6, #0]
    291e:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2920:	2100      	movs	r1, #0
    2922:	f083 0201 	eor.w	r2, r3, #1
    2926:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    292a:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    292e:	e6d0      	b.n	26d2 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2930:	f04f 0300 	mov.w	r3, #0
    2934:	f888 3000 	strb.w	r3, [r8]
    2938:	e7b3      	b.n	28a2 <usb_isr+0x6c6>
    293a:	88a9      	ldrh	r1, [r5, #4]
    293c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2940:	2904      	cmp	r1, #4
    2942:	f240 808d 	bls.w	2a60 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2946:	4a83      	ldr	r2, [pc, #524]	; (2b54 <usb_isr+0x978>)
    2948:	230f      	movs	r3, #15
    294a:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    294c:	4a8a      	ldr	r2, [pc, #552]	; (2b78 <usb_isr+0x99c>)
    294e:	2301      	movs	r3, #1
    2950:	7013      	strb	r3, [r2, #0]
    2952:	e552      	b.n	23fa <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2954:	2840      	cmp	r0, #64	; 0x40
    2956:	f67f aee2 	bls.w	271e <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    295a:	f044 0402 	orr.w	r4, r4, #2
    295e:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    2962:	9e02      	ldr	r6, [sp, #8]
    2964:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2966:	b1ba      	cbz	r2, 2998 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    2968:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    296c:	4a83      	ldr	r2, [pc, #524]	; (2b7c <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    296e:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2970:	4633      	mov	r3, r6
    2972:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2974:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2978:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    297a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    297e:	e6e7      	b.n	2750 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    2980:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2984:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2986:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2988:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    298a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    298c:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2990:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2992:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    2996:	e6d8      	b.n	274a <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    2998:	f89d 1004 	ldrb.w	r1, [sp, #4]
    299c:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    299e:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    29a0:	4a77      	ldr	r2, [pc, #476]	; (2b80 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    29a2:	f888 5000 	strb.w	r5, [r8]
    29a6:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    29a8:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    29aa:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    29ae:	e6cf      	b.n	2750 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    29b0:	f019 0f08 	tst.w	r9, #8
    29b4:	bf0c      	ite	eq
    29b6:	2302      	moveq	r3, #2
    29b8:	2303      	movne	r3, #3
    29ba:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    29bc:	e458      	b.n	2270 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    29be:	4a71      	ldr	r2, [pc, #452]	; (2b84 <usb_isr+0x9a8>)
    29c0:	210f      	movs	r1, #15
    29c2:	7011      	strb	r1, [r2, #0]
    29c4:	e660      	b.n	2688 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    29c6:	4a70      	ldr	r2, [pc, #448]	; (2b88 <usb_isr+0x9ac>)
    29c8:	6854      	ldr	r4, [r2, #4]
    29ca:	2c00      	cmp	r4, #0
    29cc:	d0bb      	beq.n	2946 <usb_isr+0x76a>
    29ce:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    29d0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    29d4:	e003      	b.n	29de <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    29d6:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    29d8:	6854      	ldr	r4, [r2, #4]
    29da:	2c00      	cmp	r4, #0
    29dc:	d0b3      	beq.n	2946 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    29de:	8813      	ldrh	r3, [r2, #0]
    29e0:	4283      	cmp	r3, r0
    29e2:	d1f8      	bne.n	29d6 <usb_isr+0x7fa>
    29e4:	8853      	ldrh	r3, [r2, #2]
    29e6:	4573      	cmp	r3, lr
    29e8:	d1f5      	bne.n	29d6 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    29ea:	0a00      	lsrs	r0, r0, #8
    29ec:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    29ee:	bf0c      	ite	eq
    29f0:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    29f4:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    29f8:	e003      	b.n	2a02 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    29fa:	4a64      	ldr	r2, [pc, #400]	; (2b8c <usb_isr+0x9b0>)
    29fc:	4c64      	ldr	r4, [pc, #400]	; (2b90 <usb_isr+0x9b4>)
    29fe:	7812      	ldrb	r2, [r2, #0]
    2a00:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2a02:	88e8      	ldrh	r0, [r5, #6]
    2a04:	4570      	cmp	r0, lr
    2a06:	f080 813f 	bcs.w	2c88 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a0a:	4962      	ldr	r1, [pc, #392]	; (2b94 <usb_isr+0x9b8>)
    2a0c:	780d      	ldrb	r5, [r1, #0]
    2a0e:	2840      	cmp	r0, #64	; 0x40
    2a10:	4684      	mov	ip, r0
    2a12:	f045 0e02 	orr.w	lr, r5, #2
    2a16:	bf28      	it	cs
    2a18:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    2a1c:	eb04 030c 	add.w	r3, r4, ip
    2a20:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    2a24:	9302      	str	r3, [sp, #8]
    2a26:	2301      	movs	r3, #1
    2a28:	6054      	str	r4, [r2, #4]
    2a2a:	ebcc 0000 	rsb	r0, ip, r0
    2a2e:	ea4f 480c 	mov.w	r8, ip, lsl #16
    2a32:	2200      	movs	r2, #0
    2a34:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a36:	24c8      	movs	r4, #200	; 0xc8
    2a38:	e65e      	b.n	26f8 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2a3a:	4c55      	ldr	r4, [pc, #340]	; (2b90 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    2a3c:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2a40:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2a42:	7062      	strb	r2, [r4, #1]
    2a44:	e7dd      	b.n	2a02 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2a46:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    2a4a:	f47f af7c 	bne.w	2946 <usb_isr+0x76a>
    2a4e:	2301      	movs	r3, #1
    2a50:	2200      	movs	r2, #0
    2a52:	9301      	str	r3, [sp, #4]
    2a54:	e63d      	b.n	26d2 <usb_isr+0x4f6>
    2a56:	f242 3221 	movw	r2, #8993	; 0x2321
    2a5a:	4291      	cmp	r1, r2
    2a5c:	d0f7      	beq.n	2a4e <usb_isr+0x872>
    2a5e:	e772      	b.n	2946 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2a60:	886a      	ldrh	r2, [r5, #2]
    2a62:	2a00      	cmp	r2, #0
    2a64:	f47f af6f 	bne.w	2946 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2a68:	483a      	ldr	r0, [pc, #232]	; (2b54 <usb_isr+0x978>)
    2a6a:	f8cd e004 	str.w	lr, [sp, #4]
    2a6e:	0089      	lsls	r1, r1, #2
    2a70:	4408      	add	r0, r1
    2a72:	7801      	ldrb	r1, [r0, #0]
    2a74:	f021 0102 	bic.w	r1, r1, #2
    2a78:	7001      	strb	r1, [r0, #0]
    2a7a:	e62a      	b.n	26d2 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2a7c:	f000 f982 	bl	2d84 <usb_malloc>
				if (p) {
    2a80:	2800      	cmp	r0, #0
    2a82:	f000 80ef 	beq.w	2c64 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    2a86:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a88:	4a3d      	ldr	r2, [pc, #244]	; (2b80 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2a8a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a8e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2a92:	f000 f977 	bl	2d84 <usb_malloc>
				if (p) {
    2a96:	2800      	cmp	r0, #0
    2a98:	f000 80de 	beq.w	2c58 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    2a9c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2a9e:	4a37      	ldr	r2, [pc, #220]	; (2b7c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2aa0:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2aa4:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    2aa8:	e738      	b.n	291c <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2aaa:	f000 f96b 	bl	2d84 <usb_malloc>
				if (p) {
    2aae:	2800      	cmp	r0, #0
    2ab0:	f000 80c0 	beq.w	2c34 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    2ab4:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ab6:	4a32      	ldr	r2, [pc, #200]	; (2b80 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2ab8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2abc:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2ac0:	f000 f960 	bl	2d84 <usb_malloc>
				if (p) {
    2ac4:	2800      	cmp	r0, #0
    2ac6:	f000 80af 	beq.w	2c28 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    2aca:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2acc:	4a2b      	ldr	r2, [pc, #172]	; (2b7c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2ace:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ad2:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    2ad6:	e708      	b.n	28ea <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2ad8:	f000 f954 	bl	2d84 <usb_malloc>
				if (p) {
    2adc:	2800      	cmp	r0, #0
    2ade:	f000 80cd 	beq.w	2c7c <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2ae2:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ae4:	4a26      	ldr	r2, [pc, #152]	; (2b80 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2ae6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2aea:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2aee:	f000 f949 	bl	2d84 <usb_malloc>
				if (p) {
    2af2:	2800      	cmp	r0, #0
    2af4:	f000 80bc 	beq.w	2c70 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    2af8:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2afa:	4a20      	ldr	r2, [pc, #128]	; (2b7c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2afc:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b00:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    2b04:	e6e3      	b.n	28ce <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2b06:	f000 f93d 	bl	2d84 <usb_malloc>
				if (p) {
    2b0a:	2800      	cmp	r0, #0
    2b0c:	f000 809e 	beq.w	2c4c <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    2b10:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2b12:	4a1b      	ldr	r2, [pc, #108]	; (2b80 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2b14:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2b18:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2b1c:	f000 f932 	bl	2d84 <usb_malloc>
				if (p) {
    2b20:	2800      	cmp	r0, #0
    2b22:	f000 808d 	beq.w	2c40 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    2b26:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b28:	4a14      	ldr	r2, [pc, #80]	; (2b7c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2b2a:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b2e:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    2b32:	e6e7      	b.n	2904 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2b34:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    2b36:	3808      	subs	r0, #8
    2b38:	f000 f944 	bl	2dc4 <usb_free>
    2b3c:	e504      	b.n	2548 <usb_isr+0x36c>
    2b3e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    2b40:	3808      	subs	r0, #8
    2b42:	f000 f93f 	bl	2dc4 <usb_free>
    2b46:	e4f9      	b.n	253c <usb_isr+0x360>
    2b48:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    2b4a:	3808      	subs	r0, #8
    2b4c:	f000 f93a 	bl	2dc4 <usb_free>
    2b50:	e4ee      	b.n	2530 <usb_isr+0x354>
    2b52:	bf00      	nop
    2b54:	400720c0 	.word	0x400720c0
    2b58:	40072080 	.word	0x40072080
    2b5c:	00003c94 	.word	0x00003c94
    2b60:	400720c4 	.word	0x400720c4
    2b64:	1fff9411 	.word	0x1fff9411
    2b68:	400720c8 	.word	0x400720c8
    2b6c:	400720cc 	.word	0x400720cc
    2b70:	400720d0 	.word	0x400720d0
    2b74:	1fff8000 	.word	0x1fff8000
    2b78:	40072094 	.word	0x40072094
    2b7c:	004000c8 	.word	0x004000c8
    2b80:	00400088 	.word	0x00400088
    2b84:	1fff93a5 	.word	0x1fff93a5
    2b88:	00003c98 	.word	0x00003c98
    2b8c:	1fff941c 	.word	0x1fff941c
    2b90:	1fff9414 	.word	0x1fff9414
    2b94:	1fff9410 	.word	0x1fff9410
    2b98:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2b9a:	3808      	subs	r0, #8
    2b9c:	f000 f912 	bl	2dc4 <usb_free>
    2ba0:	e4c0      	b.n	2524 <usb_isr+0x348>
    2ba2:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    2ba4:	3808      	subs	r0, #8
    2ba6:	f000 f90d 	bl	2dc4 <usb_free>
    2baa:	e4fd      	b.n	25a8 <usb_isr+0x3cc>
    2bac:	6f48      	ldr	r0, [r1, #116]	; 0x74
    2bae:	3808      	subs	r0, #8
    2bb0:	f000 f908 	bl	2dc4 <usb_free>
    2bb4:	e4f2      	b.n	259c <usb_isr+0x3c0>
    2bb6:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    2bb8:	3808      	subs	r0, #8
    2bba:	f000 f903 	bl	2dc4 <usb_free>
    2bbe:	e4e7      	b.n	2590 <usb_isr+0x3b4>
    2bc0:	6e48      	ldr	r0, [r1, #100]	; 0x64
    2bc2:	3808      	subs	r0, #8
    2bc4:	f000 f8fe 	bl	2dc4 <usb_free>
    2bc8:	e4dc      	b.n	2584 <usb_isr+0x3a8>
    2bca:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    2bcc:	3808      	subs	r0, #8
    2bce:	f000 f8f9 	bl	2dc4 <usb_free>
    2bd2:	e4d1      	b.n	2578 <usb_isr+0x39c>
    2bd4:	6d48      	ldr	r0, [r1, #84]	; 0x54
    2bd6:	3808      	subs	r0, #8
    2bd8:	f000 f8f4 	bl	2dc4 <usb_free>
    2bdc:	e4c6      	b.n	256c <usb_isr+0x390>
    2bde:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    2be0:	3808      	subs	r0, #8
    2be2:	f000 f8ef 	bl	2dc4 <usb_free>
    2be6:	e4bb      	b.n	2560 <usb_isr+0x384>
    2be8:	6c48      	ldr	r0, [r1, #68]	; 0x44
    2bea:	3808      	subs	r0, #8
    2bec:	f000 f8ea 	bl	2dc4 <usb_free>
    2bf0:	e4b0      	b.n	2554 <usb_isr+0x378>
    2bf2:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    2bf6:	3808      	subs	r0, #8
    2bf8:	f000 f8e4 	bl	2dc4 <usb_free>
    2bfc:	e4ec      	b.n	25d8 <usb_isr+0x3fc>
    2bfe:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    2c02:	3808      	subs	r0, #8
    2c04:	f000 f8de 	bl	2dc4 <usb_free>
    2c08:	e4e0      	b.n	25cc <usb_isr+0x3f0>
    2c0a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    2c0e:	3808      	subs	r0, #8
    2c10:	f000 f8d8 	bl	2dc4 <usb_free>
    2c14:	e4d4      	b.n	25c0 <usb_isr+0x3e4>
    2c16:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    2c1a:	3808      	subs	r0, #8
    2c1c:	f000 f8d2 	bl	2dc4 <usb_free>
    2c20:	e4c8      	b.n	25b4 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2c22:	f04f 0e02 	mov.w	lr, #2
    2c26:	e6ec      	b.n	2a02 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2c28:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2c2a:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2c2e:	3201      	adds	r2, #1
    2c30:	702a      	strb	r2, [r5, #0]
    2c32:	e65a      	b.n	28ea <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2c34:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2c36:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    2c3a:	3201      	adds	r2, #1
    2c3c:	702a      	strb	r2, [r5, #0]
    2c3e:	e73f      	b.n	2ac0 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2c40:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2c42:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    2c46:	3201      	adds	r2, #1
    2c48:	702a      	strb	r2, [r5, #0]
    2c4a:	e65b      	b.n	2904 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2c4c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2c4e:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2c52:	3201      	adds	r2, #1
    2c54:	702a      	strb	r2, [r5, #0]
    2c56:	e761      	b.n	2b1c <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2c58:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2c5a:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2c5e:	3201      	adds	r2, #1
    2c60:	702a      	strb	r2, [r5, #0]
    2c62:	e65b      	b.n	291c <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2c64:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2c66:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    2c6a:	3201      	adds	r2, #1
    2c6c:	702a      	strb	r2, [r5, #0]
    2c6e:	e710      	b.n	2a92 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2c70:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2c72:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2c76:	3201      	adds	r2, #1
    2c78:	702a      	strb	r2, [r5, #0]
    2c7a:	e628      	b.n	28ce <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2c7c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2c7e:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2c82:	3201      	adds	r2, #1
    2c84:	702a      	strb	r2, [r5, #0]
    2c86:	e732      	b.n	2aee <usb_isr+0x912>
    2c88:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    2c8c:	46f4      	mov	ip, lr
    2c8e:	bf28      	it	cs
    2c90:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    2c94:	eb04 030c 	add.w	r3, r4, ip
    2c98:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2c9a:	2301      	movs	r3, #1
    2c9c:	ebcc 000e 	rsb	r0, ip, lr
    2ca0:	ea4f 480c 	mov.w	r8, ip, lsl #16
    2ca4:	2200      	movs	r2, #0
    2ca6:	9301      	str	r3, [sp, #4]
    2ca8:	e518      	b.n	26dc <usb_isr+0x500>
    2caa:	bf00      	nop

00002cac <usb_init>:
}



void usb_init(void)
{
    2cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2cae:	f000 fd9d 	bl	37ec <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cb2:	4b29      	ldr	r3, [pc, #164]	; (2d58 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2cb4:	4829      	ldr	r0, [pc, #164]	; (2d5c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2cb6:	4c2a      	ldr	r4, [pc, #168]	; (2d60 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2cb8:	4f2a      	ldr	r7, [pc, #168]	; (2d64 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2cba:	4d2b      	ldr	r5, [pc, #172]	; (2d68 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2cbc:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 2d7c <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    2cc0:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 2d80 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2cc4:	4e29      	ldr	r6, [pc, #164]	; (2d6c <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cc6:	2200      	movs	r2, #0
    2cc8:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    2cca:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2ccc:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    2cce:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cd0:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    2cd2:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cd4:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    2cd6:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cd8:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    2cda:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cdc:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    2cde:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2ce0:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    2ce2:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2ce4:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    2ce6:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2ce8:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    2cea:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cec:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    2cee:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cf0:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    2cf2:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cf4:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    2cf6:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cf8:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    2cfa:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2cfc:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    2cfe:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2d00:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    2d02:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2d04:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    2d06:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2d0c:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    2d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2d12:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    2d16:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2d18:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2d1c:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2d1e:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2d22:	4913      	ldr	r1, [pc, #76]	; (2d70 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2d24:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2d26:	0e1b      	lsrs	r3, r3, #24
    2d28:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2d2a:	23ff      	movs	r3, #255	; 0xff
    2d2c:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2d30:	4d10      	ldr	r5, [pc, #64]	; (2d74 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2d32:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2d36:	4810      	ldr	r0, [pc, #64]	; (2d78 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2d38:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2d3a:	2301      	movs	r3, #1
    2d3c:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    2d3e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2d42:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2d44:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2d48:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2d4a:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2d4e:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2d50:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2d52:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    2d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d58:	1fff8000 	.word	0x1fff8000
    2d5c:	40048034 	.word	0x40048034
    2d60:	4007209c 	.word	0x4007209c
    2d64:	400720b0 	.word	0x400720b0
    2d68:	400720b4 	.word	0x400720b4
    2d6c:	40072094 	.word	0x40072094
    2d70:	40072010 	.word	0x40072010
    2d74:	e000e449 	.word	0xe000e449
    2d78:	e000e108 	.word	0xe000e108
    2d7c:	40072080 	.word	0x40072080
    2d80:	40072088 	.word	0x40072088

00002d84 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2d84:	b672      	cpsid	i
	avail = usb_buffer_available;
    2d86:	480d      	ldr	r0, [pc, #52]	; (2dbc <usb_malloc+0x38>)
    2d88:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2d8a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2d8e:	2b0b      	cmp	r3, #11
    2d90:	dc10      	bgt.n	2db4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2d92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    2d96:	40d9      	lsrs	r1, r3
    2d98:	ea22 0201 	bic.w	r2, r2, r1
    2d9c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    2d9e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2da0:	4807      	ldr	r0, [pc, #28]	; (2dc0 <usb_malloc+0x3c>)
    2da2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2da6:	00db      	lsls	r3, r3, #3
    2da8:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2daa:	2100      	movs	r1, #0
    2dac:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2dae:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2db0:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2db2:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2db4:	b662      	cpsie	i
		return NULL;
    2db6:	2000      	movs	r0, #0
    2db8:	4770      	bx	lr
    2dba:	bf00      	nop
    2dbc:	1fff8724 	.word	0x1fff8724
    2dc0:	1fff83bc 	.word	0x1fff83bc

00002dc4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2dc4:	4b0d      	ldr	r3, [pc, #52]	; (2dfc <usb_free+0x38>)
    2dc6:	4a0e      	ldr	r2, [pc, #56]	; (2e00 <usb_free+0x3c>)
    2dc8:	1ac3      	subs	r3, r0, r3
    2dca:	fba2 2303 	umull	r2, r3, r2, r3
    2dce:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2dd0:	2b0b      	cmp	r3, #11
    2dd2:	d80c      	bhi.n	2dee <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2dd4:	4a0b      	ldr	r2, [pc, #44]	; (2e04 <usb_free+0x40>)
    2dd6:	7812      	ldrb	r2, [r2, #0]
    2dd8:	b952      	cbnz	r2, 2df0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2dda:	b672      	cpsid	i
	usb_buffer_available |= mask;
    2ddc:	480a      	ldr	r0, [pc, #40]	; (2e08 <usb_free+0x44>)
    2dde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    2de2:	6802      	ldr	r2, [r0, #0]
    2de4:	fa21 f303 	lsr.w	r3, r1, r3
    2de8:	431a      	orrs	r2, r3
    2dea:	6002      	str	r2, [r0, #0]
	__enable_irq();
    2dec:	b662      	cpsie	i
    2dee:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2df0:	4a06      	ldr	r2, [pc, #24]	; (2e0c <usb_free+0x48>)
    2df2:	7812      	ldrb	r2, [r2, #0]
    2df4:	2a00      	cmp	r2, #0
    2df6:	d0f0      	beq.n	2dda <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2df8:	f7ff b94a 	b.w	2090 <usb_rx_memory>
    2dfc:	1fff83bc 	.word	0x1fff83bc
    2e00:	38e38e39 	.word	0x38e38e39
    2e04:	1fff9411 	.word	0x1fff9411
    2e08:	1fff8724 	.word	0x1fff8724
    2e0c:	1fff941c 	.word	0x1fff941c

00002e10 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2e10:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    2e12:	4d0f      	ldr	r5, [pc, #60]	; (2e50 <usb_serial_getchar+0x40>)
    2e14:	6828      	ldr	r0, [r5, #0]
    2e16:	b178      	cbz	r0, 2e38 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    2e18:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    2e1a:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2e1c:	18c1      	adds	r1, r0, r3
    2e1e:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    2e20:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2e22:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    2e24:	d202      	bcs.n	2e2c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    2e26:	8043      	strh	r3, [r0, #2]
	}
	return c;
    2e28:	4620      	mov	r0, r4
}
    2e2a:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    2e2c:	f7ff ffca 	bl	2dc4 <usb_free>
		rx_packet = NULL;
    2e30:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    2e32:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2e34:	602b      	str	r3, [r5, #0]
    2e36:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2e38:	4b06      	ldr	r3, [pc, #24]	; (2e54 <usb_serial_getchar+0x44>)
    2e3a:	781b      	ldrb	r3, [r3, #0]
    2e3c:	b12b      	cbz	r3, 2e4a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2e3e:	2003      	movs	r0, #3
    2e40:	f7ff f8f2 	bl	2028 <usb_rx>
    2e44:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    2e46:	2800      	cmp	r0, #0
    2e48:	d1e6      	bne.n	2e18 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2e4a:	f04f 30ff 	mov.w	r0, #4294967295
    2e4e:	bd38      	pop	{r3, r4, r5, pc}
    2e50:	1fff9430 	.word	0x1fff9430
    2e54:	1fff941c 	.word	0x1fff941c

00002e58 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2e58:	b510      	push	{r4, lr}
	if (!rx_packet) {
    2e5a:	4c09      	ldr	r4, [pc, #36]	; (2e80 <usb_serial_peekchar+0x28>)
    2e5c:	6820      	ldr	r0, [r4, #0]
    2e5e:	b118      	cbz	r0, 2e68 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    2e60:	8843      	ldrh	r3, [r0, #2]
    2e62:	4418      	add	r0, r3
    2e64:	7a00      	ldrb	r0, [r0, #8]
}
    2e66:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2e68:	4b06      	ldr	r3, [pc, #24]	; (2e84 <usb_serial_peekchar+0x2c>)
    2e6a:	781b      	ldrb	r3, [r3, #0]
    2e6c:	b12b      	cbz	r3, 2e7a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2e6e:	2003      	movs	r0, #3
    2e70:	f7ff f8da 	bl	2028 <usb_rx>
    2e74:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    2e76:	2800      	cmp	r0, #0
    2e78:	d1f2      	bne.n	2e60 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2e7a:	f04f 30ff 	mov.w	r0, #4294967295
    2e7e:	bd10      	pop	{r4, pc}
    2e80:	1fff9430 	.word	0x1fff9430
    2e84:	1fff941c 	.word	0x1fff941c

00002e88 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2e88:	4b04      	ldr	r3, [pc, #16]	; (2e9c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2e8a:	4a05      	ldr	r2, [pc, #20]	; (2ea0 <usb_serial_available+0x18>)
    2e8c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    2e8e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2e90:	b11b      	cbz	r3, 2e9a <usb_serial_available+0x12>
    2e92:	881a      	ldrh	r2, [r3, #0]
    2e94:	885b      	ldrh	r3, [r3, #2]
    2e96:	1ad3      	subs	r3, r2, r3
    2e98:	4418      	add	r0, r3
	return count;
}
    2e9a:	4770      	bx	lr
    2e9c:	1fff9430 	.word	0x1fff9430
    2ea0:	1fff95e4 	.word	0x1fff95e4

00002ea4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2ea4:	4b0b      	ldr	r3, [pc, #44]	; (2ed4 <usb_serial_flush_input+0x30>)
    2ea6:	781b      	ldrb	r3, [r3, #0]
    2ea8:	b19b      	cbz	r3, 2ed2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    2eaa:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2eac:	4c0a      	ldr	r4, [pc, #40]	; (2ed8 <usb_serial_flush_input+0x34>)
    2eae:	6820      	ldr	r0, [r4, #0]
    2eb0:	b148      	cbz	r0, 2ec6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    2eb2:	f7ff ff87 	bl	2dc4 <usb_free>
		rx_packet = NULL;
    2eb6:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2eb8:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2eba:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2ebc:	f7ff f8b4 	bl	2028 <usb_rx>
		if (!rx) break;
    2ec0:	b130      	cbz	r0, 2ed0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    2ec2:	f7ff ff7f 	bl	2dc4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2ec6:	2003      	movs	r0, #3
    2ec8:	f7ff f8ae 	bl	2028 <usb_rx>
		if (!rx) break;
    2ecc:	2800      	cmp	r0, #0
    2ece:	d1f8      	bne.n	2ec2 <usb_serial_flush_input+0x1e>
    2ed0:	bd10      	pop	{r4, pc}
    2ed2:	4770      	bx	lr
    2ed4:	1fff941c 	.word	0x1fff941c
    2ed8:	1fff9430 	.word	0x1fff9430

00002edc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    2ee0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 2fdc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2ee4:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    2ee6:	2201      	movs	r2, #1
    2ee8:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    2eec:	9101      	str	r1, [sp, #4]
    2eee:	b369      	cbz	r1, 2f4c <usb_serial_write+0x70>
    2ef0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 2fe0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2ef4:	4f36      	ldr	r7, [pc, #216]	; (2fd0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2ef6:	9e01      	ldr	r6, [sp, #4]
    2ef8:	4683      	mov	fp, r0
		if (!tx_packet) {
    2efa:	f8d8 0000 	ldr.w	r0, [r8]
    2efe:	b3b0      	cbz	r0, 2f6e <usb_serial_write+0x92>
    2f00:	4d34      	ldr	r5, [pc, #208]	; (2fd4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    2f02:	8844      	ldrh	r4, [r0, #2]
    2f04:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    2f08:	42b1      	cmp	r1, r6
    2f0a:	bf28      	it	cs
    2f0c:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2f0e:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2f12:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2f14:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2f18:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    2f1a:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2f1c:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    2f20:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    2f24:	b151      	cbz	r1, 2f3c <usb_serial_write+0x60>
    2f26:	3c01      	subs	r4, #1
    2f28:	4422      	add	r2, r4
    2f2a:	4459      	add	r1, fp
    2f2c:	f81b 4b01 	ldrb.w	r4, [fp], #1
    2f30:	f802 4f01 	strb.w	r4, [r2, #1]!
    2f34:	458b      	cmp	fp, r1
    2f36:	d1f9      	bne.n	2f2c <usb_serial_write+0x50>
    2f38:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    2f3c:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    2f40:	d80b      	bhi.n	2f5a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2f42:	4a25      	ldr	r2, [pc, #148]	; (2fd8 <usb_serial_write+0xfc>)
    2f44:	2105      	movs	r1, #5
    2f46:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2f48:	2e00      	cmp	r6, #0
    2f4a:	d1d6      	bne.n	2efa <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    2f4c:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    2f4e:	2300      	movs	r3, #0
    2f50:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    2f54:	b003      	add	sp, #12
    2f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    2f5a:	2240      	movs	r2, #64	; 0x40
    2f5c:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2f5e:	4601      	mov	r1, r0
    2f60:	2004      	movs	r0, #4
    2f62:	f7ff f8f9 	bl	2158 <usb_tx>
			tx_packet = NULL;
    2f66:	2200      	movs	r2, #0
    2f68:	f8c8 2000 	str.w	r2, [r8]
    2f6c:	e7e9      	b.n	2f42 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2f6e:	783a      	ldrb	r2, [r7, #0]
    2f70:	b32a      	cbz	r2, 2fbe <usb_serial_write+0xe2>
    2f72:	4d18      	ldr	r5, [pc, #96]	; (2fd4 <usb_serial_write+0xf8>)
    2f74:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2f78:	f04f 0a01 	mov.w	sl, #1
    2f7c:	e007      	b.n	2f8e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2f7e:	3c01      	subs	r4, #1
    2f80:	d016      	beq.n	2fb0 <usb_serial_write+0xd4>
    2f82:	782a      	ldrb	r2, [r5, #0]
    2f84:	b9a2      	cbnz	r2, 2fb0 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2f86:	f000 fa15 	bl	33b4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2f8a:	783a      	ldrb	r2, [r7, #0]
    2f8c:	b1ba      	cbz	r2, 2fbe <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2f8e:	2004      	movs	r0, #4
    2f90:	f7ff f868 	bl	2064 <usb_tx_packet_count>
    2f94:	2807      	cmp	r0, #7
    2f96:	d8f2      	bhi.n	2f7e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    2f98:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    2f9c:	f7ff fef2 	bl	2d84 <usb_malloc>
    2fa0:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    2fa4:	2800      	cmp	r0, #0
    2fa6:	d1ac      	bne.n	2f02 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    2fa8:	4b0c      	ldr	r3, [pc, #48]	; (2fdc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2faa:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    2fac:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2fae:	d1e8      	bne.n	2f82 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    2fb0:	2301      	movs	r3, #1
					return -1;
    2fb2:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2fb6:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2fb8:	b003      	add	sp, #12
    2fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2fbe:	2300      	movs	r3, #0
					return -1;
    2fc0:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2fc4:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2fc8:	b003      	add	sp, #12
    2fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fce:	bf00      	nop
    2fd0:	1fff941c 	.word	0x1fff941c
    2fd4:	1fff942c 	.word	0x1fff942c
    2fd8:	1fff9424 	.word	0x1fff9424
    2fdc:	1fff9425 	.word	0x1fff9425
    2fe0:	1fff9428 	.word	0x1fff9428

00002fe4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2fe4:	b500      	push	{lr}
    2fe6:	b083      	sub	sp, #12
    2fe8:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    2fea:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2fec:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    2ff0:	4618      	mov	r0, r3
    2ff2:	f7ff ff73 	bl	2edc <usb_serial_write>
}
    2ff6:	b003      	add	sp, #12
    2ff8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ffc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    2ffc:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2ffe:	4d0e      	ldr	r5, [pc, #56]	; (3038 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3000:	4c0e      	ldr	r4, [pc, #56]	; (303c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    3002:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3004:	2301      	movs	r3, #1
    3006:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    3008:	b128      	cbz	r0, 3016 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    300a:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    300c:	2300      	movs	r3, #0
    300e:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3010:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    3014:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3016:	4b0a      	ldr	r3, [pc, #40]	; (3040 <usb_serial_write_buffer_free+0x44>)
    3018:	781b      	ldrb	r3, [r3, #0]
    301a:	b913      	cbnz	r3, 3022 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    301c:	2000      	movs	r0, #0
    301e:	7020      	strb	r0, [r4, #0]
			return 0;
    3020:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3022:	2004      	movs	r0, #4
    3024:	f7ff f81e 	bl	2064 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3028:	2807      	cmp	r0, #7
    302a:	d8f7      	bhi.n	301c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    302c:	f7ff feaa 	bl	2d84 <usb_malloc>
    3030:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3032:	2800      	cmp	r0, #0
    3034:	d1e9      	bne.n	300a <usb_serial_write_buffer_free+0xe>
    3036:	e7f1      	b.n	301c <usb_serial_write_buffer_free+0x20>
    3038:	1fff9428 	.word	0x1fff9428
    303c:	1fff9425 	.word	0x1fff9425
    3040:	1fff941c 	.word	0x1fff941c

00003044 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    3044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    3046:	4b11      	ldr	r3, [pc, #68]	; (308c <usb_serial_flush_output+0x48>)
    3048:	781b      	ldrb	r3, [r3, #0]
    304a:	b18b      	cbz	r3, 3070 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    304c:	4e10      	ldr	r6, [pc, #64]	; (3090 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    304e:	4d11      	ldr	r5, [pc, #68]	; (3094 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    3050:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3052:	2701      	movs	r7, #1
    3054:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    3056:	b164      	cbz	r4, 3072 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    3058:	4a0f      	ldr	r2, [pc, #60]	; (3098 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    305a:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    305c:	2700      	movs	r7, #0
    305e:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3060:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    3062:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3064:	2004      	movs	r0, #4
    3066:	f7ff f877 	bl	2158 <usb_tx>
		tx_packet = NULL;
    306a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    306c:	2300      	movs	r3, #0
    306e:	702b      	strb	r3, [r5, #0]
    3070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3072:	f7ff fe87 	bl	2d84 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    3076:	4b08      	ldr	r3, [pc, #32]	; (3098 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    3078:	b128      	cbz	r0, 3086 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    307a:	4601      	mov	r1, r0
    307c:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    307e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    3080:	f7ff f86a 	bl	2158 <usb_tx>
    3084:	e7f2      	b.n	306c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3086:	701f      	strb	r7, [r3, #0]
    3088:	e7f0      	b.n	306c <usb_serial_flush_output+0x28>
    308a:	bf00      	nop
    308c:	1fff941c 	.word	0x1fff941c
    3090:	1fff9428 	.word	0x1fff9428
    3094:	1fff9425 	.word	0x1fff9425
    3098:	1fff9424 	.word	0x1fff9424

0000309c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    309c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    309e:	4b0e      	ldr	r3, [pc, #56]	; (30d8 <usb_serial_flush_callback+0x3c>)
    30a0:	781b      	ldrb	r3, [r3, #0]
    30a2:	b973      	cbnz	r3, 30c2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    30a4:	4c0d      	ldr	r4, [pc, #52]	; (30dc <usb_serial_flush_callback+0x40>)
    30a6:	6821      	ldr	r1, [r4, #0]
    30a8:	b161      	cbz	r1, 30c4 <usb_serial_flush_callback+0x28>
    30aa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    30ae:	884b      	ldrh	r3, [r1, #2]
    30b0:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    30b2:	2004      	movs	r0, #4
    30b4:	f7ff f850 	bl	2158 <usb_tx>
		tx_packet = NULL;
    30b8:	6025      	str	r5, [r4, #0]
    30ba:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    30bc:	4b08      	ldr	r3, [pc, #32]	; (30e0 <usb_serial_flush_callback+0x44>)
    30be:	2201      	movs	r2, #1
    30c0:	701a      	strb	r2, [r3, #0]
    30c2:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    30c4:	f7ff fe5e 	bl	2d84 <usb_malloc>
		if (tx) {
    30c8:	2800      	cmp	r0, #0
    30ca:	d0f7      	beq.n	30bc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    30cc:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    30ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    30d2:	2004      	movs	r0, #4
    30d4:	f7ff b840 	b.w	2158 <usb_tx>
    30d8:	1fff9425 	.word	0x1fff9425
    30dc:	1fff9428 	.word	0x1fff9428
    30e0:	1fff9424 	.word	0x1fff9424

000030e4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    30e4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    30e6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    30ea:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    30ec:	7f43      	ldrb	r3, [r0, #29]
    30ee:	b933      	cbnz	r3, 30fe <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    30f0:	7f01      	ldrb	r1, [r0, #28]
    30f2:	2901      	cmp	r1, #1
    30f4:	d007      	beq.n	3106 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    30f6:	2903      	cmp	r1, #3
    30f8:	d00f      	beq.n	311a <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    30fa:	2301      	movs	r3, #1
    30fc:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    30fe:	b902      	cbnz	r2, 3102 <EventResponder::triggerEventNotImmediate()+0x1e>
    3100:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3102:	bc10      	pop	{r4}
    3104:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3106:	4c12      	ldr	r4, [pc, #72]	; (3150 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3108:	6821      	ldr	r1, [r4, #0]
    310a:	b1a1      	cbz	r1, 3136 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    310c:	4911      	ldr	r1, [pc, #68]	; (3154 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    310e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3110:	680b      	ldr	r3, [r1, #0]
    3112:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3114:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3116:	6158      	str	r0, [r3, #20]
    3118:	e7ef      	b.n	30fa <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    311a:	4c0f      	ldr	r4, [pc, #60]	; (3158 <EventResponder::triggerEventNotImmediate()+0x74>)
    311c:	6821      	ldr	r1, [r4, #0]
    311e:	b181      	cbz	r1, 3142 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3120:	490e      	ldr	r1, [pc, #56]	; (315c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3122:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3124:	680b      	ldr	r3, [r1, #0]
    3126:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3128:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    312a:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    312c:	4b0c      	ldr	r3, [pc, #48]	; (3160 <EventResponder::triggerEventNotImmediate()+0x7c>)
    312e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3132:	6019      	str	r1, [r3, #0]
    3134:	e7e1      	b.n	30fa <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3136:	4b07      	ldr	r3, [pc, #28]	; (3154 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3138:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    313a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    313c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    313e:	6018      	str	r0, [r3, #0]
    3140:	e7db      	b.n	30fa <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3142:	4b06      	ldr	r3, [pc, #24]	; (315c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3144:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3146:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3148:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    314a:	6018      	str	r0, [r3, #0]
    314c:	e7ee      	b.n	312c <EventResponder::triggerEventNotImmediate()+0x48>
    314e:	bf00      	nop
    3150:	1fff9448 	.word	0x1fff9448
    3154:	1fff9444 	.word	0x1fff9444
    3158:	1fff9438 	.word	0x1fff9438
    315c:	1fff943c 	.word	0x1fff943c
    3160:	e000ed04 	.word	0xe000ed04

00003164 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3164:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3166:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3168:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    316a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    316c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    316e:	d002      	beq.n	3176 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3170:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3172:	f7ff bfb7 	b.w	30e4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3176:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3178:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    317a:	4718      	bx	r3

0000317c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    317c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    317e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3182:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3184:	4c0c      	ldr	r4, [pc, #48]	; (31b8 <EventResponder::runFromInterrupt()+0x3c>)
    3186:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3188:	b180      	cbz	r0, 31ac <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    318a:	4e0c      	ldr	r6, [pc, #48]	; (31bc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    318c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    318e:	6943      	ldr	r3, [r0, #20]
    3190:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3192:	b173      	cbz	r3, 31b2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3194:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3196:	b902      	cbnz	r2, 319a <EventResponder::runFromInterrupt()+0x1e>
    3198:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    319a:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    319c:	6883      	ldr	r3, [r0, #8]
    319e:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    31a0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    31a4:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    31a6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    31a8:	2800      	cmp	r0, #0
    31aa:	d1f0      	bne.n	318e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    31ac:	b902      	cbnz	r2, 31b0 <EventResponder::runFromInterrupt()+0x34>
    31ae:	b662      	cpsie	i
    31b0:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    31b2:	6033      	str	r3, [r6, #0]
    31b4:	e7ef      	b.n	3196 <EventResponder::runFromInterrupt()+0x1a>
    31b6:	bf00      	nop
    31b8:	1fff9438 	.word	0x1fff9438
    31bc:	1fff943c 	.word	0x1fff943c

000031c0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    31c0:	f7ff bfdc 	b.w	317c <EventResponder::runFromInterrupt()>

000031c4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    31c4:	4a18      	ldr	r2, [pc, #96]	; (3228 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    31c6:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    31c8:	6814      	ldr	r4, [r2, #0]
    31ca:	2c00      	cmp	r4, #0
    31cc:	d027      	beq.n	321e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    31ce:	6803      	ldr	r3, [r0, #0]
    31d0:	6821      	ldr	r1, [r4, #0]
    31d2:	428b      	cmp	r3, r1
    31d4:	d20e      	bcs.n	31f4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    31d6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    31d8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    31da:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    31dc:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    31de:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    31e0:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    31e2:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    31e4:	2302      	movs	r3, #2
    31e6:	7503      	strb	r3, [r0, #20]
}
    31e8:	bc30      	pop	{r4, r5}
    31ea:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    31ec:	6811      	ldr	r1, [r2, #0]
    31ee:	428b      	cmp	r3, r1
    31f0:	4614      	mov	r4, r2
    31f2:	d308      	bcc.n	3206 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    31f4:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    31f6:	1a5b      	subs	r3, r3, r1
    31f8:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    31fa:	2a00      	cmp	r2, #0
    31fc:	d1f6      	bne.n	31ec <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    31fe:	6082      	str	r2, [r0, #8]
		_prev = timer;
    3200:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    3202:	60a0      	str	r0, [r4, #8]
    3204:	e7ee      	b.n	31e4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3206:	68d2      	ldr	r2, [r2, #12]
    3208:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    320a:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    320c:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    320e:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3210:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    3212:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3214:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3216:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    3218:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    321a:	bc30      	pop	{r4, r5}
    321c:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    321e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3220:	60c4      	str	r4, [r0, #12]
		listActive = this;
    3222:	6010      	str	r0, [r2, #0]
    3224:	e7de      	b.n	31e4 <MillisTimer::addToActiveList()+0x20>
    3226:	bf00      	nop
    3228:	1fff9440 	.word	0x1fff9440

0000322c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    322e:	4e22      	ldr	r6, [pc, #136]	; (32b8 <MillisTimer::runFromTimer()+0x8c>)
    3230:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    3232:	b32c      	cbz	r4, 3280 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3234:	6823      	ldr	r3, [r4, #0]
    3236:	2b00      	cmp	r3, #0
    3238:	d13a      	bne.n	32b0 <MillisTimer::runFromTimer()+0x84>
    323a:	4f20      	ldr	r7, [pc, #128]	; (32bc <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    323c:	461d      	mov	r5, r3
    323e:	e004      	b.n	324a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3240:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3242:	b1ec      	cbz	r4, 3280 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3244:	6823      	ldr	r3, [r4, #0]
    3246:	2b00      	cmp	r3, #0
    3248:	d132      	bne.n	32b0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    324a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    324c:	b103      	cbz	r3, 3250 <MillisTimer::runFromTimer()+0x24>
    324e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3250:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3252:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3254:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3256:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	42bb      	cmp	r3, r7
    325c:	d121      	bne.n	32a2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    325e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3260:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3262:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3264:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3266:	d020      	beq.n	32aa <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3268:	f7ff ff3c 	bl	30e4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    326c:	6863      	ldr	r3, [r4, #4]
    326e:	2b00      	cmp	r3, #0
    3270:	d0e6      	beq.n	3240 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3272:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    3274:	4620      	mov	r0, r4
    3276:	f7ff ffa5 	bl	31c4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    327a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    327c:	2c00      	cmp	r4, #0
    327e:	d1e1      	bne.n	3244 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3280:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    3284:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3286:	4a0e      	ldr	r2, [pc, #56]	; (32c0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3288:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    328a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    328c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    328e:	b903      	cbnz	r3, 3292 <MillisTimer::runFromTimer()+0x66>
    3290:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3292:	b128      	cbz	r0, 32a0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3294:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3296:	f7ff ff95 	bl	31c4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    329a:	4620      	mov	r0, r4
    329c:	2800      	cmp	r0, #0
    329e:	d1f9      	bne.n	3294 <MillisTimer::runFromTimer()+0x68>
    32a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    32a2:	4622      	mov	r2, r4
    32a4:	2100      	movs	r1, #0
    32a6:	4798      	blx	r3
    32a8:	e7e0      	b.n	326c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    32aa:	6883      	ldr	r3, [r0, #8]
    32ac:	4798      	blx	r3
    32ae:	e7dd      	b.n	326c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    32b0:	3b01      	subs	r3, #1
    32b2:	6023      	str	r3, [r4, #0]
			break;
    32b4:	e7e4      	b.n	3280 <MillisTimer::runFromTimer()+0x54>
    32b6:	bf00      	nop
    32b8:	1fff9440 	.word	0x1fff9440
    32bc:	00003165 	.word	0x00003165
    32c0:	1fff9450 	.word	0x1fff9450

000032c4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    32c4:	4a02      	ldr	r2, [pc, #8]	; (32d0 <systick_isr+0xc>)
    32c6:	6813      	ldr	r3, [r2, #0]
    32c8:	3301      	adds	r3, #1
    32ca:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    32cc:	f7ff bfae 	b.w	322c <MillisTimer::runFromTimer()>
    32d0:	1fff9338 	.word	0x1fff9338

000032d4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    32d4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    32d6:	f7fd fd1d 	bl	d14 <setup>
	while (1) {
		loop();
    32da:	f7fd fe5d 	bl	f98 <loop>
		yield();
    32de:	f000 f869 	bl	33b4 <yield>
    32e2:	e7fa      	b.n	32da <main+0x6>

000032e4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    32e4:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    32e6:	4a06      	ldr	r2, [pc, #24]	; (3300 <Print::println()+0x1c>)
	return write(buf, 2);
    32e8:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    32ea:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    32ec:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    32ee:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    32f0:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    32f2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    32f6:	2202      	movs	r2, #2
    32f8:	4798      	blx	r3
}
    32fa:	b003      	add	sp, #12
    32fc:	f85d fb04 	ldr.w	pc, [sp], #4
    3300:	00003c68 	.word	0x00003c68

00003304 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3304:	b5f0      	push	{r4, r5, r6, r7, lr}
    3306:	4607      	mov	r7, r0
    3308:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    330a:	2a00      	cmp	r2, #0
    330c:	d033      	beq.n	3376 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    330e:	2a01      	cmp	r2, #1
    3310:	bf08      	it	eq
    3312:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    3314:	b351      	cbz	r1, 336c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3316:	2421      	movs	r4, #33	; 0x21
    3318:	e000      	b.n	331c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    331a:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    331c:	fbb1 f5f2 	udiv	r5, r1, r2
    3320:	fb02 1115 	mls	r1, r2, r5, r1
    3324:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3326:	2909      	cmp	r1, #9
    3328:	f100 0130 	add.w	r1, r0, #48	; 0x30
    332c:	bf98      	it	ls
    332e:	b2c8      	uxtbls	r0, r1
    3330:	a90a      	add	r1, sp, #40	; 0x28
    3332:	bf88      	it	hi
    3334:	3037      	addhi	r0, #55	; 0x37
    3336:	4421      	add	r1, r4
    3338:	bf88      	it	hi
    333a:	b2c0      	uxtbhi	r0, r0
    333c:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    3340:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    3342:	4629      	mov	r1, r5
    3344:	2d00      	cmp	r5, #0
    3346:	d1e8      	bne.n	331a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3348:	b133      	cbz	r3, 3358 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    334a:	3c01      	subs	r4, #1
    334c:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    334e:	ab0a      	add	r3, sp, #40	; 0x28
    3350:	4423      	add	r3, r4
    3352:	222d      	movs	r2, #45	; 0x2d
    3354:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3358:	683b      	ldr	r3, [r7, #0]
    335a:	aa01      	add	r2, sp, #4
    335c:	1911      	adds	r1, r2, r4
    335e:	685b      	ldr	r3, [r3, #4]
    3360:	4638      	mov	r0, r7
    3362:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    3366:	4798      	blx	r3
}
    3368:	b00b      	add	sp, #44	; 0x2c
    336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    336c:	2230      	movs	r2, #48	; 0x30
    336e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3372:	2421      	movs	r4, #33	; 0x21
    3374:	e7e8      	b.n	3348 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3376:	6803      	ldr	r3, [r0, #0]
    3378:	b2c9      	uxtb	r1, r1
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    337e:	b00b      	add	sp, #44	; 0x2c
    3380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3382:	bf00      	nop

00003384 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    3384:	6081      	str	r1, [r0, #8]
    3386:	4770      	bx	lr

00003388 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3388:	f7ff bd8c 	b.w	2ea4 <usb_serial_flush_input>

0000338c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    338c:	f7ff bd64 	b.w	2e58 <usb_serial_peekchar>

00003390 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3390:	f7ff bd3e 	b.w	2e10 <usb_serial_getchar>

00003394 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3394:	f7ff bd78 	b.w	2e88 <usb_serial_available>

00003398 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3398:	f7ff be54 	b.w	3044 <usb_serial_flush_output>

0000339c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    339c:	f7ff be2e 	b.w	2ffc <usb_serial_write_buffer_free>

000033a0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    33a0:	4608      	mov	r0, r1
    33a2:	4611      	mov	r1, r2
    33a4:	f7ff bd9a 	b.w	2edc <usb_serial_write>

000033a8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    33a8:	4608      	mov	r0, r1
    33aa:	f7ff be1b 	b.w	2fe4 <usb_serial_putchar>
    33ae:	bf00      	nop

000033b0 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    33b0:	4770      	bx	lr
    33b2:	bf00      	nop

000033b4 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    33b4:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    33b6:	4c22      	ldr	r4, [pc, #136]	; (3440 <yield+0x8c>)
    33b8:	7823      	ldrb	r3, [r4, #0]
    33ba:	b103      	cbz	r3, 33be <yield+0xa>
    33bc:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    33be:	2301      	movs	r3, #1
    33c0:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    33c2:	f7ff fd61 	bl	2e88 <usb_serial_available>
	if (Serial.available()) serialEvent();
    33c6:	bb70      	cbnz	r0, 3426 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    33c8:	f000 f868 	bl	349c <serial_available>
	if (Serial1.available()) serialEvent1();
    33cc:	bb40      	cbnz	r0, 3420 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    33ce:	f000 f8fb 	bl	35c8 <serial2_available>
	if (Serial2.available()) serialEvent2();
    33d2:	bb10      	cbnz	r0, 341a <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    33d4:	f000 f98e 	bl	36f4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    33d8:	b9e0      	cbnz	r0, 3414 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    33da:	2300      	movs	r3, #0
    33dc:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    33de:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    33e2:	2b00      	cmp	r3, #0
    33e4:	d1ea      	bne.n	33bc <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    33e6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    33ea:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    33ec:	4b15      	ldr	r3, [pc, #84]	; (3444 <yield+0x90>)
    33ee:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    33f0:	b1e0      	cbz	r0, 342c <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    33f2:	4c15      	ldr	r4, [pc, #84]	; (3448 <yield+0x94>)
    33f4:	7822      	ldrb	r2, [r4, #0]
    33f6:	b9ca      	cbnz	r2, 342c <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    33f8:	6945      	ldr	r5, [r0, #20]
    33fa:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    33fc:	2301      	movs	r3, #1
    33fe:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3400:	b1c5      	cbz	r5, 3434 <yield+0x80>
			firstYield->_prev = nullptr;
    3402:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3404:	b901      	cbnz	r1, 3408 <yield+0x54>
    3406:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3408:	2500      	movs	r5, #0
    340a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    340c:	6883      	ldr	r3, [r0, #8]
    340e:	4798      	blx	r3
		runningFromYield = false;
    3410:	7025      	strb	r5, [r4, #0]
    3412:	e7d3      	b.n	33bc <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    3414:	f000 fa30 	bl	3878 <serialEvent3()>
    3418:	e7df      	b.n	33da <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    341a:	f000 fa2b 	bl	3874 <serialEvent2()>
    341e:	e7d9      	b.n	33d4 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    3420:	f000 fa26 	bl	3870 <serialEvent1()>
    3424:	e7d3      	b.n	33ce <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3426:	f7ff ffc3 	bl	33b0 <serialEvent()>
    342a:	e7cd      	b.n	33c8 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    342c:	2900      	cmp	r1, #0
    342e:	d1c5      	bne.n	33bc <yield+0x8>
    3430:	b662      	cpsie	i
    3432:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3434:	4b05      	ldr	r3, [pc, #20]	; (344c <yield+0x98>)
    3436:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3438:	2900      	cmp	r1, #0
    343a:	d1e5      	bne.n	3408 <yield+0x54>
    343c:	e7e3      	b.n	3406 <yield+0x52>
    343e:	bf00      	nop
    3440:	1fff9454 	.word	0x1fff9454
    3444:	1fff9448 	.word	0x1fff9448
    3448:	1fff944c 	.word	0x1fff944c
    344c:	1fff9444 	.word	0x1fff9444

00003450 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3450:	b4f0      	push	{r4, r5, r6, r7}
    3452:	1e4d      	subs	r5, r1, #1
    3454:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3456:	2400      	movs	r4, #0
    3458:	e000      	b.n	345c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    345a:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    345c:	fbb0 f3f2 	udiv	r3, r0, r2
    3460:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3464:	2809      	cmp	r0, #9
    3466:	f100 0730 	add.w	r7, r0, #48	; 0x30
    346a:	bf8a      	itet	hi
    346c:	3037      	addhi	r0, #55	; 0x37
    346e:	b2f8      	uxtbls	r0, r7
    3470:	b2c0      	uxtbhi	r0, r0
    3472:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3476:	4618      	mov	r0, r3
    3478:	2b00      	cmp	r3, #0
    347a:	d1ee      	bne.n	345a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    347c:	190a      	adds	r2, r1, r4
    347e:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3480:	b14c      	cbz	r4, 3496 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3482:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3484:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3488:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    348a:	3301      	adds	r3, #1
    348c:	1ae0      	subs	r0, r4, r3
    348e:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3490:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3494:	dbf5      	blt.n	3482 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3496:	4608      	mov	r0, r1
    3498:	bcf0      	pop	{r4, r5, r6, r7}
    349a:	4770      	bx	lr

0000349c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    349c:	4a05      	ldr	r2, [pc, #20]	; (34b4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    349e:	4b06      	ldr	r3, [pc, #24]	; (34b8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34a0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    34a2:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34a4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    34a6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    34a8:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    34aa:	bf38      	it	cc
    34ac:	3040      	addcc	r0, #64	; 0x40
    34ae:	1ac0      	subs	r0, r0, r3
}
    34b0:	4770      	bx	lr
    34b2:	bf00      	nop
    34b4:	1fff945c 	.word	0x1fff945c
    34b8:	1fff945d 	.word	0x1fff945d

000034bc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    34bc:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    34be:	4b38      	ldr	r3, [pc, #224]	; (35a0 <uart0_status_isr+0xe4>)
    34c0:	791a      	ldrb	r2, [r3, #4]
    34c2:	f012 0f30 	tst.w	r2, #48	; 0x30
    34c6:	d02c      	beq.n	3522 <uart0_status_isr+0x66>
		__disable_irq();
    34c8:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    34ca:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    34cc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    34d0:	2900      	cmp	r1, #0
    34d2:	d03d      	beq.n	3550 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    34d4:	b662      	cpsie	i
			head = rx_buffer_head;
    34d6:	4f33      	ldr	r7, [pc, #204]	; (35a4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    34d8:	4933      	ldr	r1, [pc, #204]	; (35a8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    34da:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    34dc:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    34de:	4e33      	ldr	r6, [pc, #204]	; (35ac <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    34e0:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    34e2:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    34e4:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    34e6:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    34e8:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    34ea:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    34ec:	bf28      	it	cs
    34ee:	2300      	movcs	r3, #0
				if (newhead != tail) {
    34f0:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    34f2:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    34f6:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    34f8:	bf1c      	itt	ne
    34fa:	54f1      	strbne	r1, [r6, r3]
    34fc:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    34fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3502:	d1f0      	bne.n	34e6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3504:	4b2a      	ldr	r3, [pc, #168]	; (35b0 <uart0_status_isr+0xf4>)
    3506:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3508:	b2c2      	uxtb	r2, r0
    350a:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    350c:	b14b      	cbz	r3, 3522 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    350e:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3510:	bf36      	itet	cc
    3512:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3516:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3518:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    351a:	2827      	cmp	r0, #39	; 0x27
    351c:	bfc4      	itt	gt
    351e:	2201      	movgt	r2, #1
    3520:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3522:	491f      	ldr	r1, [pc, #124]	; (35a0 <uart0_status_isr+0xe4>)
    3524:	78ca      	ldrb	r2, [r1, #3]
    3526:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3528:	0615      	lsls	r5, r2, #24
    352a:	d416      	bmi.n	355a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    352c:	0652      	lsls	r2, r2, #25
    352e:	d50d      	bpl.n	354c <uart0_status_isr+0x90>
    3530:	4b1b      	ldr	r3, [pc, #108]	; (35a0 <uart0_status_isr+0xe4>)
    3532:	791b      	ldrb	r3, [r3, #4]
    3534:	065b      	lsls	r3, r3, #25
    3536:	d509      	bpl.n	354c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3538:	4b1e      	ldr	r3, [pc, #120]	; (35b4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    353a:	491f      	ldr	r1, [pc, #124]	; (35b8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    353c:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    353e:	2200      	movs	r2, #0
    3540:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3542:	b103      	cbz	r3, 3546 <uart0_status_isr+0x8a>
    3544:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3546:	4b16      	ldr	r3, [pc, #88]	; (35a0 <uart0_status_isr+0xe4>)
    3548:	223c      	movs	r2, #60	; 0x3c
    354a:	70da      	strb	r2, [r3, #3]
	}
}
    354c:	bcf0      	pop	{r4, r5, r6, r7}
    354e:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3550:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3552:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3554:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    3556:	b662      	cpsie	i
    3558:	e7e3      	b.n	3522 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    355a:	790b      	ldrb	r3, [r1, #4]
    355c:	061c      	lsls	r4, r3, #24
    355e:	d5e5      	bpl.n	352c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3560:	4b16      	ldr	r3, [pc, #88]	; (35bc <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3562:	4e17      	ldr	r6, [pc, #92]	; (35c0 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3564:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3566:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3568:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    356a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    356c:	429c      	cmp	r4, r3
    356e:	d00e      	beq.n	358e <uart0_status_isr+0xd2>
    3570:	4d14      	ldr	r5, [pc, #80]	; (35c4 <uart0_status_isr+0x108>)
    3572:	e001      	b.n	3578 <uart0_status_isr+0xbc>
    3574:	42a3      	cmp	r3, r4
    3576:	d00a      	beq.n	358e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3578:	3301      	adds	r3, #1
    357a:	2b40      	cmp	r3, #64	; 0x40
    357c:	bf28      	it	cs
    357e:	2300      	movcs	r3, #0
			avail = UART0_S1;
    3580:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3582:	5ce8      	ldrb	r0, [r5, r3]
    3584:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3586:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3588:	7d08      	ldrb	r0, [r1, #20]
    358a:	2807      	cmp	r0, #7
    358c:	d9f2      	bls.n	3574 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    358e:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3590:	4903      	ldr	r1, [pc, #12]	; (35a0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3592:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3594:	790b      	ldrb	r3, [r1, #4]
    3596:	0618      	lsls	r0, r3, #24
    3598:	bf44      	itt	mi
    359a:	237c      	movmi	r3, #124	; 0x7c
    359c:	70cb      	strbmi	r3, [r1, #3]
    359e:	e7c5      	b.n	352c <uart0_status_isr+0x70>
    35a0:	4006a000 	.word	0x4006a000
    35a4:	1fff945c 	.word	0x1fff945c
    35a8:	1fff945d 	.word	0x1fff945d
    35ac:	1fff94a0 	.word	0x1fff94a0
    35b0:	1fff9458 	.word	0x1fff9458
    35b4:	1fff94e4 	.word	0x1fff94e4
    35b8:	1fff94e0 	.word	0x1fff94e0
    35bc:	1fff94e8 	.word	0x1fff94e8
    35c0:	1fff94e1 	.word	0x1fff94e1
    35c4:	1fff9460 	.word	0x1fff9460

000035c8 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35c8:	4a05      	ldr	r2, [pc, #20]	; (35e0 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    35ca:	4b06      	ldr	r3, [pc, #24]	; (35e4 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35cc:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    35ce:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35d0:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    35d2:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    35d4:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    35d6:	bf38      	it	cc
    35d8:	3040      	addcc	r0, #64	; 0x40
    35da:	1ac0      	subs	r0, r0, r3
}
    35dc:	4770      	bx	lr
    35de:	bf00      	nop
    35e0:	1fff955c 	.word	0x1fff955c
    35e4:	1fff94f1 	.word	0x1fff94f1

000035e8 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    35e8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    35ea:	4b38      	ldr	r3, [pc, #224]	; (36cc <uart1_status_isr+0xe4>)
    35ec:	791a      	ldrb	r2, [r3, #4]
    35ee:	f012 0f30 	tst.w	r2, #48	; 0x30
    35f2:	d02c      	beq.n	364e <uart1_status_isr+0x66>
		__disable_irq();
    35f4:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    35f6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    35f8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    35fc:	2900      	cmp	r1, #0
    35fe:	d03d      	beq.n	367c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3600:	b662      	cpsie	i
			head = rx_buffer_head;
    3602:	4f33      	ldr	r7, [pc, #204]	; (36d0 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3604:	4933      	ldr	r1, [pc, #204]	; (36d4 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3606:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3608:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    360a:	4e33      	ldr	r6, [pc, #204]	; (36d8 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    360c:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    360e:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    3610:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3612:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3614:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3616:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3618:	bf28      	it	cs
    361a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    361c:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    361e:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3622:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3624:	bf1c      	itt	ne
    3626:	54f1      	strbne	r1, [r6, r3]
    3628:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    362a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    362e:	d1f0      	bne.n	3612 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3630:	4b2a      	ldr	r3, [pc, #168]	; (36dc <uart1_status_isr+0xf4>)
    3632:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3634:	b2c2      	uxtb	r2, r0
    3636:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    3638:	b14b      	cbz	r3, 364e <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    363a:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    363c:	bf36      	itet	cc
    363e:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3642:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3644:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3646:	2827      	cmp	r0, #39	; 0x27
    3648:	bfc4      	itt	gt
    364a:	2201      	movgt	r2, #1
    364c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    364e:	491f      	ldr	r1, [pc, #124]	; (36cc <uart1_status_isr+0xe4>)
    3650:	78ca      	ldrb	r2, [r1, #3]
    3652:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3654:	0615      	lsls	r5, r2, #24
    3656:	d416      	bmi.n	3686 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3658:	0652      	lsls	r2, r2, #25
    365a:	d50d      	bpl.n	3678 <uart1_status_isr+0x90>
    365c:	4b1b      	ldr	r3, [pc, #108]	; (36cc <uart1_status_isr+0xe4>)
    365e:	791b      	ldrb	r3, [r3, #4]
    3660:	065b      	lsls	r3, r3, #25
    3662:	d509      	bpl.n	3678 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3664:	4b1e      	ldr	r3, [pc, #120]	; (36e0 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3666:	491f      	ldr	r1, [pc, #124]	; (36e4 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3668:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    366a:	2200      	movs	r2, #0
    366c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    366e:	b103      	cbz	r3, 3672 <uart1_status_isr+0x8a>
    3670:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3672:	4b16      	ldr	r3, [pc, #88]	; (36cc <uart1_status_isr+0xe4>)
    3674:	223c      	movs	r2, #60	; 0x3c
    3676:	70da      	strb	r2, [r3, #3]
	}
}
    3678:	bcf0      	pop	{r4, r5, r6, r7}
    367a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    367c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    367e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3680:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    3682:	b662      	cpsie	i
    3684:	e7e3      	b.n	364e <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3686:	790b      	ldrb	r3, [r1, #4]
    3688:	061c      	lsls	r4, r3, #24
    368a:	d5e5      	bpl.n	3658 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    368c:	4b16      	ldr	r3, [pc, #88]	; (36e8 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    368e:	4e17      	ldr	r6, [pc, #92]	; (36ec <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3690:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3692:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3694:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    3696:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    3698:	429c      	cmp	r4, r3
    369a:	d00e      	beq.n	36ba <uart1_status_isr+0xd2>
    369c:	4d14      	ldr	r5, [pc, #80]	; (36f0 <uart1_status_isr+0x108>)
    369e:	e001      	b.n	36a4 <uart1_status_isr+0xbc>
    36a0:	42a3      	cmp	r3, r4
    36a2:	d00a      	beq.n	36ba <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    36a4:	3301      	adds	r3, #1
    36a6:	2b28      	cmp	r3, #40	; 0x28
    36a8:	bf28      	it	cs
    36aa:	2300      	movcs	r3, #0
			avail = UART1_S1;
    36ac:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    36ae:	5ce8      	ldrb	r0, [r5, r3]
    36b0:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    36b2:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    36b4:	7d08      	ldrb	r0, [r1, #20]
    36b6:	2807      	cmp	r0, #7
    36b8:	d9f2      	bls.n	36a0 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    36ba:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    36bc:	4903      	ldr	r1, [pc, #12]	; (36cc <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    36be:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    36c0:	790b      	ldrb	r3, [r1, #4]
    36c2:	0618      	lsls	r0, r3, #24
    36c4:	bf44      	itt	mi
    36c6:	237c      	movmi	r3, #124	; 0x7c
    36c8:	70cb      	strbmi	r3, [r1, #3]
    36ca:	e7c5      	b.n	3658 <uart1_status_isr+0x70>
    36cc:	4006b000 	.word	0x4006b000
    36d0:	1fff955c 	.word	0x1fff955c
    36d4:	1fff94f1 	.word	0x1fff94f1
    36d8:	1fff951c 	.word	0x1fff951c
    36dc:	1fff94ec 	.word	0x1fff94ec
    36e0:	1fff9560 	.word	0x1fff9560
    36e4:	1fff94f0 	.word	0x1fff94f0
    36e8:	1fff9564 	.word	0x1fff9564
    36ec:	1fff955d 	.word	0x1fff955d
    36f0:	1fff94f4 	.word	0x1fff94f4

000036f4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36f4:	4a05      	ldr	r2, [pc, #20]	; (370c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    36f6:	4b06      	ldr	r3, [pc, #24]	; (3710 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36f8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    36fa:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36fc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    36fe:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3700:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3702:	bf38      	it	cc
    3704:	3040      	addcc	r0, #64	; 0x40
    3706:	1ac0      	subs	r0, r0, r3
}
    3708:	4770      	bx	lr
    370a:	bf00      	nop
    370c:	1fff956c 	.word	0x1fff956c
    3710:	1fff956d 	.word	0x1fff956d

00003714 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3714:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3716:	4b2b      	ldr	r3, [pc, #172]	; (37c4 <uart2_status_isr+0xb0>)
    3718:	791a      	ldrb	r2, [r3, #4]
    371a:	0694      	lsls	r4, r2, #26
    371c:	d51f      	bpl.n	375e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    371e:	482a      	ldr	r0, [pc, #168]	; (37c8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3720:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3722:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3724:	4929      	ldr	r1, [pc, #164]	; (37cc <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3726:	3301      	adds	r3, #1
    3728:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    372a:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    372c:	bfc8      	it	gt
    372e:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3730:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3732:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3734:	d003      	beq.n	373e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3736:	4c26      	ldr	r4, [pc, #152]	; (37d0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3738:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    373a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    373c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    373e:	4a25      	ldr	r2, [pc, #148]	; (37d4 <uart2_status_isr+0xc0>)
    3740:	6811      	ldr	r1, [r2, #0]
    3742:	b161      	cbz	r1, 375e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3744:	4a24      	ldr	r2, [pc, #144]	; (37d8 <uart2_status_isr+0xc4>)
    3746:	7812      	ldrb	r2, [r2, #0]
    3748:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    374a:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    374c:	bf36      	itet	cc
    374e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3752:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3754:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3756:	2b27      	cmp	r3, #39	; 0x27
    3758:	bfc4      	itt	gt
    375a:	2301      	movgt	r3, #1
    375c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    375e:	4a19      	ldr	r2, [pc, #100]	; (37c4 <uart2_status_isr+0xb0>)
    3760:	78d3      	ldrb	r3, [r2, #3]
    3762:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3764:	0618      	lsls	r0, r3, #24
    3766:	d411      	bmi.n	378c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3768:	065a      	lsls	r2, r3, #25
    376a:	d50d      	bpl.n	3788 <uart2_status_isr+0x74>
    376c:	4b15      	ldr	r3, [pc, #84]	; (37c4 <uart2_status_isr+0xb0>)
    376e:	791b      	ldrb	r3, [r3, #4]
    3770:	065b      	lsls	r3, r3, #25
    3772:	d509      	bpl.n	3788 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3774:	4b19      	ldr	r3, [pc, #100]	; (37dc <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3776:	491a      	ldr	r1, [pc, #104]	; (37e0 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3778:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    377a:	2200      	movs	r2, #0
    377c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    377e:	b103      	cbz	r3, 3782 <uart2_status_isr+0x6e>
    3780:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3782:	4b10      	ldr	r3, [pc, #64]	; (37c4 <uart2_status_isr+0xb0>)
    3784:	222c      	movs	r2, #44	; 0x2c
    3786:	70da      	strb	r2, [r3, #3]
	}
}
    3788:	bc30      	pop	{r4, r5}
    378a:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    378c:	7911      	ldrb	r1, [r2, #4]
    378e:	0609      	lsls	r1, r1, #24
    3790:	d5ea      	bpl.n	3768 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3792:	4914      	ldr	r1, [pc, #80]	; (37e4 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3794:	4810      	ldr	r0, [pc, #64]	; (37d8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3796:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3798:	7801      	ldrb	r1, [r0, #0]
    379a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    379c:	428c      	cmp	r4, r1
    379e:	d00d      	beq.n	37bc <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    37a0:	1c4a      	adds	r2, r1, #1
    37a2:	2a27      	cmp	r2, #39	; 0x27
    37a4:	bf84      	itt	hi
    37a6:	2100      	movhi	r1, #0
    37a8:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    37aa:	4d0f      	ldr	r5, [pc, #60]	; (37e8 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    37ac:	4c05      	ldr	r4, [pc, #20]	; (37c4 <uart2_status_isr+0xb0>)
    37ae:	bf98      	it	ls
    37b0:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    37b2:	5caa      	ldrb	r2, [r5, r2]
    37b4:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    37b6:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    37b8:	7001      	strb	r1, [r0, #0]
    37ba:	e7d5      	b.n	3768 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    37bc:	216c      	movs	r1, #108	; 0x6c
    37be:	70d1      	strb	r1, [r2, #3]
    37c0:	e7d2      	b.n	3768 <uart2_status_isr+0x54>
    37c2:	bf00      	nop
    37c4:	4006c000 	.word	0x4006c000
    37c8:	1fff956c 	.word	0x1fff956c
    37cc:	1fff956d 	.word	0x1fff956d
    37d0:	1fff9598 	.word	0x1fff9598
    37d4:	1fff9568 	.word	0x1fff9568
    37d8:	1fff95d9 	.word	0x1fff95d9
    37dc:	1fff95dc 	.word	0x1fff95dc
    37e0:	1fff95d8 	.word	0x1fff95d8
    37e4:	1fff95e0 	.word	0x1fff95e0
    37e8:	1fff9570 	.word	0x1fff9570

000037ec <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    37ec:	b570      	push	{r4, r5, r6, lr}
    37ee:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    37f0:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    37f2:	4b19      	ldr	r3, [pc, #100]	; (3858 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    37f4:	4d19      	ldr	r5, [pc, #100]	; (385c <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    37f6:	481a      	ldr	r0, [pc, #104]	; (3860 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    37f8:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    37fa:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    37fc:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    37fe:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3800:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    3802:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3804:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    3806:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3808:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    380a:	7813      	ldrb	r3, [r2, #0]
    380c:	061b      	lsls	r3, r3, #24
    380e:	d5fc      	bpl.n	380a <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    3810:	4b14      	ldr	r3, [pc, #80]	; (3864 <usb_init_serialnumber+0x78>)
    3812:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    3814:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3816:	4b14      	ldr	r3, [pc, #80]	; (3868 <usb_init_serialnumber+0x7c>)
    3818:	4c14      	ldr	r4, [pc, #80]	; (386c <usb_init_serialnumber+0x80>)
    381a:	4298      	cmp	r0, r3
    381c:	bf98      	it	ls
    381e:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    3822:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3824:	bf98      	it	ls
    3826:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    3828:	220a      	movs	r2, #10
    382a:	f7ff fe11 	bl	3450 <ultoa>
    382e:	a901      	add	r1, sp, #4
    3830:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    3832:	2300      	movs	r3, #0
		char c = buf[i];
    3834:	f811 2b01 	ldrb.w	r2, [r1], #1
    3838:	3301      	adds	r3, #1
		if (!c) break;
    383a:	b13a      	cbz	r2, 384c <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    383c:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    383e:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3842:	d1f7      	bne.n	3834 <usb_init_serialnumber+0x48>
    3844:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3846:	7023      	strb	r3, [r4, #0]
}
    3848:	b004      	add	sp, #16
    384a:	bd70      	pop	{r4, r5, r6, pc}
    384c:	005b      	lsls	r3, r3, #1
    384e:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3850:	7023      	strb	r3, [r4, #0]
}
    3852:	b004      	add	sp, #16
    3854:	bd70      	pop	{r4, r5, r6, pc}
    3856:	bf00      	nop
    3858:	40020000 	.word	0x40020000
    385c:	40020007 	.word	0x40020007
    3860:	40020006 	.word	0x40020006
    3864:	40020008 	.word	0x40020008
    3868:	0098967f 	.word	0x0098967f
    386c:	1fff87c4 	.word	0x1fff87c4

00003870 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3870:	4770      	bx	lr
    3872:	bf00      	nop

00003874 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3874:	4770      	bx	lr
    3876:	bf00      	nop

00003878 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3878:	4770      	bx	lr
    387a:	bf00      	nop

0000387c <__libc_init_array>:
    387c:	b570      	push	{r4, r5, r6, lr}
    387e:	4e0f      	ldr	r6, [pc, #60]	; (38bc <__libc_init_array+0x40>)
    3880:	4d0f      	ldr	r5, [pc, #60]	; (38c0 <__libc_init_array+0x44>)
    3882:	1b76      	subs	r6, r6, r5
    3884:	10b6      	asrs	r6, r6, #2
    3886:	bf18      	it	ne
    3888:	2400      	movne	r4, #0
    388a:	d005      	beq.n	3898 <__libc_init_array+0x1c>
    388c:	3401      	adds	r4, #1
    388e:	f855 3b04 	ldr.w	r3, [r5], #4
    3892:	4798      	blx	r3
    3894:	42a6      	cmp	r6, r4
    3896:	d1f9      	bne.n	388c <__libc_init_array+0x10>
    3898:	4e0a      	ldr	r6, [pc, #40]	; (38c4 <__libc_init_array+0x48>)
    389a:	4d0b      	ldr	r5, [pc, #44]	; (38c8 <__libc_init_array+0x4c>)
    389c:	1b76      	subs	r6, r6, r5
    389e:	f000 fa25 	bl	3cec <_init>
    38a2:	10b6      	asrs	r6, r6, #2
    38a4:	bf18      	it	ne
    38a6:	2400      	movne	r4, #0
    38a8:	d006      	beq.n	38b8 <__libc_init_array+0x3c>
    38aa:	3401      	adds	r4, #1
    38ac:	f855 3b04 	ldr.w	r3, [r5], #4
    38b0:	4798      	blx	r3
    38b2:	42a6      	cmp	r6, r4
    38b4:	d1f9      	bne.n	38aa <__libc_init_array+0x2e>
    38b6:	bd70      	pop	{r4, r5, r6, pc}
    38b8:	bd70      	pop	{r4, r5, r6, pc}
    38ba:	bf00      	nop
    38bc:	00003cf8 	.word	0x00003cf8
    38c0:	00003cf8 	.word	0x00003cf8
    38c4:	00003d0c 	.word	0x00003d0c
    38c8:	00003cf8 	.word	0x00003cf8

000038cc <memset>:
    38cc:	b470      	push	{r4, r5, r6}
    38ce:	0784      	lsls	r4, r0, #30
    38d0:	d046      	beq.n	3960 <memset+0x94>
    38d2:	1e54      	subs	r4, r2, #1
    38d4:	2a00      	cmp	r2, #0
    38d6:	d041      	beq.n	395c <memset+0x90>
    38d8:	b2cd      	uxtb	r5, r1
    38da:	4603      	mov	r3, r0
    38dc:	e002      	b.n	38e4 <memset+0x18>
    38de:	1e62      	subs	r2, r4, #1
    38e0:	b3e4      	cbz	r4, 395c <memset+0x90>
    38e2:	4614      	mov	r4, r2
    38e4:	f803 5b01 	strb.w	r5, [r3], #1
    38e8:	079a      	lsls	r2, r3, #30
    38ea:	d1f8      	bne.n	38de <memset+0x12>
    38ec:	2c03      	cmp	r4, #3
    38ee:	d92e      	bls.n	394e <memset+0x82>
    38f0:	b2cd      	uxtb	r5, r1
    38f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    38f6:	2c0f      	cmp	r4, #15
    38f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    38fc:	d919      	bls.n	3932 <memset+0x66>
    38fe:	f103 0210 	add.w	r2, r3, #16
    3902:	4626      	mov	r6, r4
    3904:	3e10      	subs	r6, #16
    3906:	2e0f      	cmp	r6, #15
    3908:	f842 5c10 	str.w	r5, [r2, #-16]
    390c:	f842 5c0c 	str.w	r5, [r2, #-12]
    3910:	f842 5c08 	str.w	r5, [r2, #-8]
    3914:	f842 5c04 	str.w	r5, [r2, #-4]
    3918:	f102 0210 	add.w	r2, r2, #16
    391c:	d8f2      	bhi.n	3904 <memset+0x38>
    391e:	f1a4 0210 	sub.w	r2, r4, #16
    3922:	f022 020f 	bic.w	r2, r2, #15
    3926:	f004 040f 	and.w	r4, r4, #15
    392a:	3210      	adds	r2, #16
    392c:	2c03      	cmp	r4, #3
    392e:	4413      	add	r3, r2
    3930:	d90d      	bls.n	394e <memset+0x82>
    3932:	461e      	mov	r6, r3
    3934:	4622      	mov	r2, r4
    3936:	3a04      	subs	r2, #4
    3938:	2a03      	cmp	r2, #3
    393a:	f846 5b04 	str.w	r5, [r6], #4
    393e:	d8fa      	bhi.n	3936 <memset+0x6a>
    3940:	1f22      	subs	r2, r4, #4
    3942:	f022 0203 	bic.w	r2, r2, #3
    3946:	3204      	adds	r2, #4
    3948:	4413      	add	r3, r2
    394a:	f004 0403 	and.w	r4, r4, #3
    394e:	b12c      	cbz	r4, 395c <memset+0x90>
    3950:	b2c9      	uxtb	r1, r1
    3952:	441c      	add	r4, r3
    3954:	f803 1b01 	strb.w	r1, [r3], #1
    3958:	42a3      	cmp	r3, r4
    395a:	d1fb      	bne.n	3954 <memset+0x88>
    395c:	bc70      	pop	{r4, r5, r6}
    395e:	4770      	bx	lr
    3960:	4614      	mov	r4, r2
    3962:	4603      	mov	r3, r0
    3964:	e7c2      	b.n	38ec <memset+0x20>
    3966:	bf00      	nop

00003968 <random>:
    3968:	b410      	push	{r4}
    396a:	4b0c      	ldr	r3, [pc, #48]	; (399c <random+0x34>)
    396c:	4c0c      	ldr	r4, [pc, #48]	; (39a0 <random+0x38>)
    396e:	6819      	ldr	r1, [r3, #0]
    3970:	4a0c      	ldr	r2, [pc, #48]	; (39a4 <random+0x3c>)
    3972:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    3976:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    397a:	fb04 f403 	mul.w	r4, r4, r3
    397e:	fb02 4000 	mla	r0, r2, r0, r4
    3982:	fba3 2302 	umull	r2, r3, r3, r2
    3986:	4403      	add	r3, r0
    3988:	3201      	adds	r2, #1
    398a:	f143 0300 	adc.w	r3, r3, #0
    398e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    3992:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    3996:	bc10      	pop	{r4}
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	1fff8c08 	.word	0x1fff8c08
    39a0:	5851f42d 	.word	0x5851f42d
    39a4:	4c957f2d 	.word	0x4c957f2d

000039a8 <register_fini>:
    39a8:	4b02      	ldr	r3, [pc, #8]	; (39b4 <register_fini+0xc>)
    39aa:	b113      	cbz	r3, 39b2 <register_fini+0xa>
    39ac:	4802      	ldr	r0, [pc, #8]	; (39b8 <register_fini+0x10>)
    39ae:	f7fd be85 	b.w	16bc <atexit>
    39b2:	4770      	bx	lr
    39b4:	00000000 	.word	0x00000000
    39b8:	000039bd 	.word	0x000039bd

000039bc <__libc_fini_array>:
    39bc:	b538      	push	{r3, r4, r5, lr}
    39be:	4d07      	ldr	r5, [pc, #28]	; (39dc <__libc_fini_array+0x20>)
    39c0:	4c07      	ldr	r4, [pc, #28]	; (39e0 <__libc_fini_array+0x24>)
    39c2:	1b2c      	subs	r4, r5, r4
    39c4:	10a4      	asrs	r4, r4, #2
    39c6:	d005      	beq.n	39d4 <__libc_fini_array+0x18>
    39c8:	3c01      	subs	r4, #1
    39ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    39ce:	4798      	blx	r3
    39d0:	2c00      	cmp	r4, #0
    39d2:	d1f9      	bne.n	39c8 <__libc_fini_array+0xc>
    39d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    39d8:	f000 b998 	b.w	3d0c <__init_array_end>
	...

000039e4 <vtable for APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>>:
	...
    39ec:	08e1 0000 09a5 0000 0491 0000 04dd 0000     ................
    39fc:	046d 0000 0471 0000 05d9 0000               m...q.......

00003a08 <sin16_C(unsigned short)::base>:
    3a08:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00003a18 <sin16_C(unsigned short)::slope>:
    3a18:	3031 262c 171f 040e 4d56 5044 5f56 7c31     10,&....VMDPV_1|
    3a28:	5f31 4d56 5044 0a56 0000 0000 4544 5542     1_VMDPV.....DEBU
    3a38:	2047 4e4f 0000 0000 454c 7344 4120 4444     G ON....LEDs ADD
    3a48:	4445 0000 5543 5252 4e45 5f54 454c 2044     ED..CURRENT_LED 
    3a58:	5241 4152 2059 4e49 5449 4149 494c 455a     ARRAY INITIALIZE
    3a68:	0044 0000 4553 5554 2050 4f43 504d 454c     D...SETUP COMPLE
    3a78:	4554 ff00                                   TE..

00003a7c <RainbowColors_p>:
    3a7c:	0000 00ff 2a00 00d5 5500 00ab 7f00 00ab     .....*...U......
    3a8c:	ab00 00ab d500 0056 ff00 0000 d52a 0000     ......V.....*...
    3a9c:	ab55 0000 56aa 0000 00ff 0000 00d5 002a     U....V........*.
    3aac:	00ab 0055 0081 007f 0055 00ab 002b 00d5     ..U.....U...+...
    3abc:	4d56 5044 5f45 0000 323a 003a 003a 0000     VMDPE_..:2:.:...
    3acc:	565f 444d 4550 0000 4d56 5044 5f43 0000     _VMDPE..VMDPC_..
    3adc:	565f 444d 4350 0000 7245 6f72 3a72 4120     _VMDPC..Error: A
    3aec:	7474 6d65 7470 7420 206f 6573 2074 2061     ttempt to set a 
    3afc:	6572 6461 6f2d 6c6e 2079 6176 6972 6261     read-only variab
    3b0c:	656c 6f20 2072 6164 6174 7420 7079 2065     le or data type 
    3b1c:	6f6e 2074 7573 7070 726f 6574 0d64 000a     not supported...

00003b2c <pin2sc1a>:
    3b2c:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    3b3c:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    3b4c:	ffff 1300 9303 921a ff17 ffff               ............

00003b58 <digital_pin_to_info_PGM>:
    3b58:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    3b68:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    3b78:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    3b88:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    3b98:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    3ba8:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    3bb8:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    3bc8:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    3bd8:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    3be8:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    3bf8:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    3c08:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    3c18:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    3c28:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    3c38:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    3c48:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    3c58:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    3c68:	0a0d ffff                                   ....

00003c6c <vtable for usb_serial_class>:
	...
    3c74:	33a9 0000 33a1 0000 339d 0000 3399 0000     .3...3...3...3..
    3c84:	3395 0000 3391 0000 338d 0000 3389 0000     .3...3...3...3..

00003c94 <usb_endpoint_config_table>:
    3c94:	1500 1519                                   ....

00003c98 <usb_descriptor_list>:
    3c98:	0100 0000 8738 1fff 0012 0000 0200 0000     ....8...........
    3ca8:	8764 1fff 0043 0000 0300 0000 87c0 1fff     d...C...........
    3cb8:	0000 0000 0301 0409 874c 1fff 0000 0000     ........L.......
    3cc8:	0302 0409 87a8 1fff 0000 0000 0303 0409     ................
    3cd8:	87c4 1fff 0000 0000 0000 0000 0000 0000     ................
    3ce8:	0000 0000                                   ....

00003cec <_init>:
    3cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cee:	bf00      	nop
    3cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cf2:	bc08      	pop	{r3}
    3cf4:	469e      	mov	lr, r3
    3cf6:	4770      	bx	lr

00003cf8 <__init_array_start>:
    3cf8:	000039a9 	.word	0x000039a9

00003cfc <__frame_dummy_init_array_entry>:
    3cfc:	00000435 000011d1 000016c1 00001a19     5...............

Disassembly of section .fini:

00003d0c <_fini>:
    3d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d0e:	bf00      	nop
