
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 69 9a 00 00 21 9a 00 00     ... ....i...!...
      10:	21 9a 00 00 21 9a 00 00 21 9a 00 00 21 9a 00 00     !...!...!...!...
      20:	21 9a 00 00 21 9a 00 00 21 9a 00 00 69 9a 00 00     !...!...!...i...
      30:	69 9a 00 00 21 9a 00 00 95 ae 00 00 99 af 00 00     i...!...........
      40:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      50:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      60:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      70:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      80:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      90:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      a0:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      b0:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      c0:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      d0:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      e0:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
      f0:	69 9a 00 00 f1 b2 00 00 69 9a 00 00 1d b4 00 00     i.......i.......
     100:	69 9a 00 00 49 b5 00 00 69 9a 00 00 69 9a 00 00     i...I...i...i...
     110:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     120:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     130:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     140:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     150:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     160:	69 9a 00 00 b1 9e 00 00 69 9a 00 00 69 9a 00 00     i.......i...i...
     170:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     180:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     190:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     1a0:	69 9a 00 00 69 9a 00 00 69 9a 00 00 69 9a 00 00     i...i...i...i...
     1b0:	69 9a 00 00 69 9a 00 00 69 9a 00 00                 i...i...i...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f009 fc4e 	bl	9a70 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f009 fca2 	bl	9c1c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f009 fc13 	bl	9b0c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f009 fc04 	bl	9b0c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00c f906 	bl	c518 <__libc_init_array>

	startup_late_hook();
     30c:	f009 fbb6 	bl	9a7c <startup_late_hook>
	main();
     310:	f00a fe4a 	bl	afa8 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c44 	.word	0x1fff8c44
     33c:	0000f770 	.word	0x0000f770
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c44 	.word	0x1fff8c44
     348:	1fffa314 	.word	0x1fffa314
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e3332f1 	.word	0x5e3332f1
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c44 	.word	0x1fff8c44
     42c:	00000000 	.word	0x00000000
     430:	0000f774 	.word	0x0000f774

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c48 	.word	0x1fff8c48
     460:	0000f774 	.word	0x0000f774
     464:	1fff8c44 	.word	0x1fff8c44
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     490:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     492:	4b18      	ldr	r3, [pc, #96]	; (4f4 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x64>)
     494:	b083      	sub	sp, #12
     496:	681b      	ldr	r3, [r3, #0]
     498:	9301      	str	r3, [sp, #4]
	return ret;
     49a:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     49c:	f44f 738c 	mov.w	r3, #280	; 0x118
     4a0:	fb03 f606 	mul.w	r6, r3, r6
     4a4:	fb00 f006 	mul.w	r0, r0, r6
     4a8:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4aa:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4ac:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4b0:	d503      	bpl.n	4ba <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x2a>
     4b2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4b6:	3307      	adds	r3, #7
     4b8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4ba:	0a18      	lsrs	r0, r3, #8
     4bc:	4d0e      	ldr	r5, [pc, #56]	; (4f8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x68>)
    uint8_t  m   = slope[section];
     4be:	4c0f      	ldr	r4, [pc, #60]	; (4fc <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4c0:	5c24      	ldrb	r4, [r4, r0]
     4c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     4c6:	f3c3 0546 	ubfx	r5, r3, #1, #7
     4ca:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     4ce:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4d0:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     4d2:	bf48      	it	mi
     4d4:	4264      	negmi	r4, r4
     4d6:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     4d8:	1a53      	subs	r3, r2, r1
     4da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     4de:	b29a      	uxth	r2, r3
     4e0:	b2a3      	uxth	r3, r4
     4e2:	fb02 3303 	mla	r3, r2, r3, r3
     4e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     4ea:	b280      	uxth	r0, r0
     4ec:	b003      	add	sp, #12
     4ee:	bc70      	pop	{r4, r5, r6}
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	1fffa050 	.word	0x1fffa050
     4f8:	0000da04 	.word	0x0000da04
     4fc:	0000e538 	.word	0x0000e538

00000500 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     500:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     502:	2101      	movs	r1, #1
     504:	4604      	mov	r4, r0
     506:	200e      	movs	r0, #14
     508:	f009 fb12 	bl	9b30 <pinMode>
     50c:	2007      	movs	r0, #7
     50e:	2101      	movs	r1, #1
     510:	f009 fb0e 	bl	9b30 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     514:	69a0      	ldr	r0, [r4, #24]
     516:	b158      	cbz	r0, 530 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     518:	6803      	ldr	r3, [r0, #0]
     51a:	4a07      	ldr	r2, [pc, #28]	; (538 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	4293      	cmp	r3, r2
     520:	d107      	bne.n	532 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     522:	6842      	ldr	r2, [r0, #4]
     524:	7b01      	ldrb	r1, [r0, #12]
     526:	7813      	ldrb	r3, [r2, #0]
     528:	ea23 0301 	bic.w	r3, r3, r1
     52c:	7013      	strb	r3, [r2, #0]
     52e:	bd10      	pop	{r4, pc}
     530:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     536:	4718      	bx	r3
     538:	00000481 	.word	0x00000481

0000053c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     540:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     542:	6805      	ldr	r5, [r0, #0]
     544:	f88d 3004 	strb.w	r3, [sp, #4]
     548:	f88d 3005 	strb.w	r3, [sp, #5]
     54c:	f88d 3006 	strb.w	r3, [sp, #6]
     550:	682e      	ldr	r6, [r5, #0]
     552:	4a37      	ldr	r2, [pc, #220]	; (630 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     554:	f88d 3008 	strb.w	r3, [sp, #8]
     558:	4296      	cmp	r6, r2
     55a:	f88d 3009 	strb.w	r3, [sp, #9]
     55e:	f88d 300a 	strb.w	r3, [sp, #10]
     562:	d15f      	bne.n	624 <CLEDController::clearLeds(int)+0xe8>
     564:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     566:	9104      	str	r1, [sp, #16]
     568:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     56a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     56c:	a801      	add	r0, sp, #4
     56e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     570:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     574:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     578:	f88d 3020 	strb.w	r3, [sp, #32]
     57c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     57e:	d015      	beq.n	5ac <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     580:	f88d 301d 	strb.w	r3, [sp, #29]
     584:	f88d 301c 	strb.w	r3, [sp, #28]
     588:	f88d 301b 	strb.w	r3, [sp, #27]
     58c:	f88d 301a 	strb.w	r3, [sp, #26]
     590:	f88d 3019 	strb.w	r3, [sp, #25]
     594:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     598:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     59a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     59c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     5a2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a4:	a903      	add	r1, sp, #12
     5a6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5a8:	b00b      	add	sp, #44	; 0x2c
     5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     5ac:	4a21      	ldr	r2, [pc, #132]	; (634 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5ae:	7813      	ldrb	r3, [r2, #0]
     5b0:	3301      	adds	r3, #1
     5b2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     5b6:	f013 0f01 	tst.w	r3, #1
     5ba:	bf14      	ite	ne
     5bc:	2180      	movne	r1, #128	; 0x80
     5be:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5c0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     5c2:	079a      	lsls	r2, r3, #30
     5c4:	bf44      	itt	mi
     5c6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     5ca:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     5cc:	075b      	lsls	r3, r3, #29
     5ce:	bf48      	it	mi
     5d0:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     5d4:	3110      	adds	r1, #16
     5d6:	2200      	movs	r2, #0
     5d8:	b2c9      	uxtb	r1, r1
     5da:	f10d 031b 	add.w	r3, sp, #27
     5de:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5e2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5e6:	b1aa      	cbz	r2, 614 <CLEDController::clearLeds(int)+0xd8>
     5e8:	fb9e f2f2 	sdiv	r2, lr, r2
     5ec:	b2d2      	uxtb	r2, r2
     5ee:	1c50      	adds	r0, r2, #1
     5f0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5f2:	fb00 1501 	mla	r5, r0, r1, r1
     5f6:	122d      	asrs	r5, r5, #8
     5f8:	7018      	strb	r0, [r3, #0]
     5fa:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5fc:	b105      	cbz	r5, 600 <CLEDController::clearLeds(int)+0xc4>
     5fe:	3e01      	subs	r6, #1
     600:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     604:	b100      	cbz	r0, 608 <CLEDController::clearLeds(int)+0xcc>
     606:	701a      	strb	r2, [r3, #0]
     608:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     60a:	429f      	cmp	r7, r3
     60c:	d008      	beq.n	620 <CLEDController::clearLeds(int)+0xe4>
     60e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     610:	2a00      	cmp	r2, #0
     612:	d1e9      	bne.n	5e8 <CLEDController::clearLeds(int)+0xac>
     614:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     616:	f803 2c03 	strb.w	r2, [r3, #-3]
     61a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     61c:	429f      	cmp	r7, r3
     61e:	d1f6      	bne.n	60e <CLEDController::clearLeds(int)+0xd2>
     620:	6825      	ldr	r5, [r4, #0]
     622:	e7b9      	b.n	598 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     624:	460a      	mov	r2, r1
     626:	ab02      	add	r3, sp, #8
     628:	a901      	add	r1, sp, #4
     62a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     62c:	b00b      	add	sp, #44	; 0x2c
     62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     630:	000006fd 	.word	0x000006fd
     634:	1fff8c60 	.word	0x1fff8c60

00000638 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     63c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     63e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     640:	789b      	ldrb	r3, [r3, #2]
     642:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     644:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     646:	9101      	str	r1, [sp, #4]
     648:	9202      	str	r2, [sp, #8]
     64a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     64c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     650:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     658:	d017      	beq.n	68a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     65a:	2300      	movs	r3, #0
     65c:	f88d 3015 	strb.w	r3, [sp, #21]
     660:	f88d 3014 	strb.w	r3, [sp, #20]
     664:	f88d 3013 	strb.w	r3, [sp, #19]
     668:	f88d 3012 	strb.w	r3, [sp, #18]
     66c:	f88d 3011 	strb.w	r3, [sp, #17]
     670:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     674:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     676:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     678:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     67a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     67c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     680:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     682:	a901      	add	r1, sp, #4
     684:	4798      	blx	r3
  }
     686:	b009      	add	sp, #36	; 0x24
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     68a:	4a1b      	ldr	r2, [pc, #108]	; (6f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     68c:	7813      	ldrb	r3, [r2, #0]
     68e:	3301      	adds	r3, #1
     690:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     694:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     698:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     69a:	bf14      	ite	ne
     69c:	2280      	movne	r2, #128	; 0x80
     69e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6a0:	0799      	lsls	r1, r3, #30
     6a2:	bf44      	itt	mi
     6a4:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6a8:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6aa:	075b      	lsls	r3, r3, #29
     6ac:	bf48      	it	mi
     6ae:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6b2:	3210      	adds	r2, #16
     6b4:	b2d2      	uxtb	r2, r2
     6b6:	f10d 0313 	add.w	r3, sp, #19
     6ba:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6be:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6c2:	b1ac      	cbz	r4, 6f0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     6c4:	fb9e f4f4 	sdiv	r4, lr, r4
     6c8:	b2e4      	uxtb	r4, r4
     6ca:	1c61      	adds	r1, r4, #1
     6cc:	b2c9      	uxtb	r1, r1
     6ce:	fb01 2502 	mla	r5, r1, r2, r2
     6d2:	122d      	asrs	r5, r5, #8
     6d4:	7019      	strb	r1, [r3, #0]
     6d6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6d8:	b105      	cbz	r5, 6dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     6da:	3e01      	subs	r6, #1
     6dc:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6e0:	b101      	cbz	r1, 6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6e2:	701c      	strb	r4, [r3, #0]
     6e4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6e6:	42bb      	cmp	r3, r7
     6e8:	d0c4      	beq.n	674 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     6ea:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6ec:	2c00      	cmp	r4, #0
     6ee:	d1e9      	bne.n	6c4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     6f0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6f2:	f803 4c03 	strb.w	r4, [r3, #-3]
     6f6:	e7f5      	b.n	6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6f8:	1fff8c60 	.word	0x1fff8c60

000006fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     700:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     702:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     704:	789b      	ldrb	r3, [r3, #2]
     706:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     708:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     70a:	9101      	str	r1, [sp, #4]
     70c:	9202      	str	r2, [sp, #8]
     70e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     710:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     714:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     718:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     71c:	d016      	beq.n	74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71e:	2300      	movs	r3, #0
     720:	f88d 3015 	strb.w	r3, [sp, #21]
     724:	f88d 3014 	strb.w	r3, [sp, #20]
     728:	f88d 3013 	strb.w	r3, [sp, #19]
     72c:	f88d 3012 	strb.w	r3, [sp, #18]
     730:	f88d 3011 	strb.w	r3, [sp, #17]
     734:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     738:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73a:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     73c:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73e:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     742:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     744:	a901      	add	r1, sp, #4
     746:	4790      	blx	r2
  }
     748:	b009      	add	sp, #36	; 0x24
     74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     74c:	4a1b      	ldr	r2, [pc, #108]	; (7bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     74e:	7813      	ldrb	r3, [r2, #0]
     750:	3301      	adds	r3, #1
     752:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     756:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     75a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     75c:	bf14      	ite	ne
     75e:	2280      	movne	r2, #128	; 0x80
     760:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     762:	0799      	lsls	r1, r3, #30
     764:	bf44      	itt	mi
     766:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     76a:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     76c:	075b      	lsls	r3, r3, #29
     76e:	bf48      	it	mi
     770:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     774:	3210      	adds	r2, #16
     776:	b2d2      	uxtb	r2, r2
     778:	f10d 0313 	add.w	r3, sp, #19
     77c:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     780:	f44f 7e80 	mov.w	lr, #256	; 0x100
     784:	b1ac      	cbz	r4, 7b2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     786:	fb9e f4f4 	sdiv	r4, lr, r4
     78a:	b2e4      	uxtb	r4, r4
     78c:	1c61      	adds	r1, r4, #1
     78e:	b2c9      	uxtb	r1, r1
     790:	fb01 2502 	mla	r5, r1, r2, r2
     794:	122d      	asrs	r5, r5, #8
     796:	7019      	strb	r1, [r3, #0]
     798:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     79a:	b105      	cbz	r5, 79e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     79c:	3e01      	subs	r6, #1
     79e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7a2:	b101      	cbz	r1, 7a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a4:	701c      	strb	r4, [r3, #0]
     7a6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7a8:	42bb      	cmp	r3, r7
     7aa:	d0c5      	beq.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     7ac:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ae:	2c00      	cmp	r4, #0
     7b0:	d1e9      	bne.n	786 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     7b2:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b4:	f803 4c03 	strb.w	r4, [r3, #-3]
     7b8:	e7f5      	b.n	7a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7ba:	bf00      	nop
     7bc:	1fff8c60 	.word	0x1fff8c60

000007c0 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4604      	mov	r4, r0
     7c4:	4608      	mov	r0, r1
     7c6:	460d      	mov	r5, r1
     7c8:	f00b ff5a 	bl	c680 <strlen>
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	4602      	mov	r2, r0
     7d0:	4629      	mov	r1, r5
     7d2:	4620      	mov	r0, r4
     7d4:	685b      	ldr	r3, [r3, #4]
     7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     7da:	4718      	bx	r3

000007dc <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7dc:	b538      	push	{r3, r4, r5, lr}
     7de:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7e2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e4:	f00b ff4c 	bl	c680 <strlen>
     7e8:	6823      	ldr	r3, [r4, #0]
     7ea:	4602      	mov	r2, r0
     7ec:	4629      	mov	r1, r5
     7ee:	685b      	ldr	r3, [r3, #4]
     7f0:	4620      	mov	r0, r4
     7f2:	4798      	blx	r3
     7f4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7f6:	4620      	mov	r0, r4
     7f8:	f00a fbde 	bl	afb8 <Print::println()>
     7fc:	4428      	add	r0, r5
     7fe:	bd38      	pop	{r3, r4, r5, pc}

00000800 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     804:	780d      	ldrb	r5, [r1, #0]
     806:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     808:	784d      	ldrb	r5, [r1, #1]
     80a:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     80c:	7889      	ldrb	r1, [r1, #2]
     80e:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     810:	7811      	ldrb	r1, [r2, #0]
     812:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     814:	7851      	ldrb	r1, [r2, #1]
     816:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     818:	7892      	ldrb	r2, [r2, #2]
     81a:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     81c:	781a      	ldrb	r2, [r3, #0]
     81e:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     820:	785a      	ldrb	r2, [r3, #1]
     822:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     824:	789b      	ldrb	r3, [r3, #2]
     826:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     82a:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     82c:	f89a b000 	ldrb.w	fp, [sl]
     830:	f880 b009 	strb.w	fp, [r0, #9]
     834:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     838:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     83c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     840:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     842:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     844:	9d10      	ldr	r5, [sp, #64]	; 0x40
     846:	9911      	ldr	r1, [sp, #68]	; 0x44
     848:	9a12      	ldr	r2, [sp, #72]	; 0x48
     84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     84c:	f89a b001 	ldrb.w	fp, [sl, #1]
     850:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     854:	f89a a002 	ldrb.w	sl, [sl, #2]
     858:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     85c:	f899 a000 	ldrb.w	sl, [r9]
     860:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     864:	f899 a001 	ldrb.w	sl, [r9, #1]
     868:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     86c:	f899 9002 	ldrb.w	r9, [r9, #2]
     870:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     874:	f898 9000 	ldrb.w	r9, [r8]
     878:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     87c:	f898 9001 	ldrb.w	r9, [r8, #1]
     880:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     884:	f898 8002 	ldrb.w	r8, [r8, #2]
     888:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     88c:	f89c 8000 	ldrb.w	r8, [ip]
     890:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     894:	f89c 8001 	ldrb.w	r8, [ip, #1]
     898:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     89c:	f89c c002 	ldrb.w	ip, [ip, #2]
     8a0:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8a4:	f89e c000 	ldrb.w	ip, [lr]
     8a8:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     8ac:	f89e c001 	ldrb.w	ip, [lr, #1]
     8b0:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     8b4:	f89e e002 	ldrb.w	lr, [lr, #2]
     8b8:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8bc:	f897 e000 	ldrb.w	lr, [r7]
     8c0:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     8c4:	f897 e001 	ldrb.w	lr, [r7, #1]
     8c8:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     8cc:	78bf      	ldrb	r7, [r7, #2]
     8ce:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d0:	7837      	ldrb	r7, [r6, #0]
     8d2:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     8d4:	7877      	ldrb	r7, [r6, #1]
     8d6:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     8d8:	78b6      	ldrb	r6, [r6, #2]
     8da:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8dc:	782e      	ldrb	r6, [r5, #0]
     8de:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     8e0:	786e      	ldrb	r6, [r5, #1]
     8e2:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     8e4:	78ad      	ldrb	r5, [r5, #2]
     8e6:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ea:	780d      	ldrb	r5, [r1, #0]
     8ec:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     8f0:	784d      	ldrb	r5, [r1, #1]
     8f2:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     8f6:	7889      	ldrb	r1, [r1, #2]
     8f8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     902:	7851      	ldrb	r1, [r2, #1]
     904:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     908:	7892      	ldrb	r2, [r2, #2]
     90a:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     90e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     910:	7812      	ldrb	r2, [r2, #0]
     912:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     918:	7852      	ldrb	r2, [r2, #1]
     91a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     91e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     920:	7892      	ldrb	r2, [r2, #2]
     922:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     926:	9a14      	ldr	r2, [sp, #80]	; 0x50
     928:	7812      	ldrb	r2, [r2, #0]
     92a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     92e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     930:	7852      	ldrb	r2, [r2, #1]
     932:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     936:	9a14      	ldr	r2, [sp, #80]	; 0x50
     938:	7892      	ldrb	r2, [r2, #2]
     93a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     93e:	781a      	ldrb	r2, [r3, #0]
     940:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     944:	785a      	ldrb	r2, [r3, #1]
     946:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     94a:	789b      	ldrb	r3, [r3, #2]
     94c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000954 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     958:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     95a:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     95c:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     95e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     962:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     964:	3701      	adds	r7, #1
        } while ( u.index != 255);
     966:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     968:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     96a:	d1f8      	bne.n	95e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     96c:	680b      	ldr	r3, [r1, #0]
     96e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     970:	ea4f 6813 	mov.w	r8, r3, lsr #24
     974:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     978:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     97c:	f04f 33ff 	mov.w	r3, #4294967295
     980:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     982:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     984:	9305      	str	r3, [sp, #20]
     986:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     988:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     98c:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     98e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     992:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     996:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     99a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     99c:	b2f9      	uxtb	r1, r7
     99e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     9a2:	9103      	str	r1, [sp, #12]
     9a4:	b2e9      	uxtb	r1, r5
     9a6:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     9a8:	fa5f f18c 	uxtb.w	r1, ip
     9ac:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     9ae:	9907      	ldr	r1, [sp, #28]
     9b0:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9b2:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     9b4:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9b8:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9bc:	d80c      	bhi.n	9d8 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     9be:	9905      	ldr	r1, [sp, #20]
     9c0:	458c      	cmp	ip, r1
     9c2:	dc07      	bgt.n	9d4 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     9c4:	290f      	cmp	r1, #15
     9c6:	d005      	beq.n	9d4 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     9c8:	3101      	adds	r1, #1
     9ca:	b2c9      	uxtb	r1, r1
     9cc:	428b      	cmp	r3, r1
     9ce:	9102      	str	r1, [sp, #8]
     9d0:	bf38      	it	cc
     9d2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     9d4:	b259      	sxtb	r1, r3
     9d6:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9d8:	a909      	add	r1, sp, #36	; 0x24
     9da:	9100      	str	r1, [sp, #0]
     9dc:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9de:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     9e2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     9e6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ea:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     9ee:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     9f2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     9f6:	f008 f839 	bl	8a6c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     9fa:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     9fc:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a00:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     a04:	46d1      	mov	r9, sl
     a06:	d1bf      	bne.n	988 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     a08:	9806      	ldr	r0, [sp, #24]
     a0a:	b00b      	add	sp, #44	; 0x2c
     a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a10 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     a10:	4b48      	ldr	r3, [pc, #288]	; (b34 <updatePaletteIndex(LEDStruct&)+0x124>)
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	2b00      	cmp	r3, #0
     a16:	f000 808b 	beq.w	b30 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a1e:	b09b      	sub	sp, #108	; 0x6c
     a20:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     a24:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     a26:	2300      	movs	r3, #0
     a28:	4a43      	ldr	r2, [pc, #268]	; (b38 <updatePaletteIndex(LEDStruct&)+0x128>)
     a2a:	9307      	str	r3, [sp, #28]
     a2c:	f8df 910c 	ldr.w	r9, [pc, #268]	; b3c <updatePaletteIndex(LEDStruct&)+0x12c>
     a30:	9009      	str	r0, [sp, #36]	; 0x24
     a32:	f200 2326 	addw	r3, r0, #550	; 0x226
     a36:	9208      	str	r2, [sp, #32]
     a38:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a3a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a3c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a40:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a42:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a44:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a46:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a48:	d1f8      	bne.n	a3c <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a4a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a4e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a50:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a54:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a58:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a5a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a5e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     a62:	2400      	movs	r4, #0
     a64:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a66:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a6a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     a6e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a72:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a76:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a78:	b2f1      	uxtb	r1, r6
     a7a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a7e:	9103      	str	r1, [sp, #12]
     a80:	b2e9      	uxtb	r1, r5
     a82:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a84:	fa5f f18c 	uxtb.w	r1, ip
     a88:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     a8a:	9906      	ldr	r1, [sp, #24]
     a8c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a8e:	aa0c      	add	r2, sp, #48	; 0x30
     a90:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a92:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a96:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a9a:	d80c      	bhi.n	ab6 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a9c:	9905      	ldr	r1, [sp, #20]
     a9e:	458c      	cmp	ip, r1
     aa0:	dc07      	bgt.n	ab2 <updatePaletteIndex(LEDStruct&)+0xa2>
     aa2:	290f      	cmp	r1, #15
     aa4:	d005      	beq.n	ab2 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     aa6:	3101      	adds	r1, #1
     aa8:	b2c9      	uxtb	r1, r1
     aaa:	428b      	cmp	r3, r1
     aac:	9102      	str	r1, [sp, #8]
     aae:	bf38      	it	cc
     ab0:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     ab2:	b259      	sxtb	r1, r3
     ab4:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ab6:	a90d      	add	r1, sp, #52	; 0x34
     ab8:	9100      	str	r1, [sp, #0]
     aba:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     abc:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     ac0:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     ac4:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac8:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     acc:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     ad0:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     ad4:	f007 ffca 	bl	8a6c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ad8:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ada:	46d3      	mov	fp, sl
        g = rhs.g;
     adc:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ae0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     ae4:	d1bf      	bne.n	a66 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ae8:	aa0e      	add	r2, sp, #56	; 0x38
     aea:	4293      	cmp	r3, r2
     aec:	d018      	beq.n	b20 <updatePaletteIndex(LEDStruct&)+0x110>
     aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
     af0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     af2:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     af6:	e001      	b.n	afc <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     af8:	42a3      	cmp	r3, r4
     afa:	d011      	beq.n	b20 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     afc:	f812 1b01 	ldrb.w	r1, [r2], #1
     b00:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     b04:	4288      	cmp	r0, r1
     b06:	d0f7      	beq.n	af8 <updatePaletteIndex(LEDStruct&)+0xe8>
     b08:	4b0a      	ldr	r3, [pc, #40]	; (b34 <updatePaletteIndex(LEDStruct&)+0x124>)
     b0a:	9a07      	ldr	r2, [sp, #28]
     b0c:	781b      	ldrb	r3, [r3, #0]
     b0e:	3201      	adds	r2, #1
     b10:	4293      	cmp	r3, r2
     b12:	9207      	str	r2, [sp, #28]
     b14:	dd09      	ble.n	b2a <updatePaletteIndex(LEDStruct&)+0x11a>
     b16:	9b08      	ldr	r3, [sp, #32]
     b18:	f853 9f04 	ldr.w	r9, [r3, #4]!
     b1c:	9308      	str	r3, [sp, #32]
     b1e:	e78c      	b.n	a3a <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b22:	f89d 201c 	ldrb.w	r2, [sp, #28]
     b26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     b2a:	b01b      	add	sp, #108	; 0x6c
     b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b30:	4770      	bx	lr
     b32:	bf00      	nop
     b34:	1fff874d 	.word	0x1fff874d
     b38:	0000e378 	.word	0x0000e378
     b3c:	0000f318 	.word	0x0000f318

00000b40 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     b40:	b530      	push	{r4, r5, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b42:	4d29      	ldr	r5, [pc, #164]	; (be8 <initialize()+0xa8>)
		}
	}
}

// Initialization function
void initialize() {
     b44:	b083      	sub	sp, #12
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b46:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b48:	2400      	movs	r4, #0
     b4a:	4628      	mov	r0, r5
     b4c:	2196      	movs	r1, #150	; 0x96
     b4e:	f88d 4004 	strb.w	r4, [sp, #4]
     b52:	f88d 4005 	strb.w	r4, [sp, #5]
     b56:	f88d 4006 	strb.w	r4, [sp, #6]
     b5a:	f007 ff57 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     b5e:	4923      	ldr	r1, [pc, #140]	; (bec <initialize()+0xac>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     b60:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     b64:	f205 10c7 	addw	r0, r5, #455	; 0x1c7
     b68:	f7ff fef4 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     b6c:	4920      	ldr	r1, [pc, #128]	; (bf0 <initialize()+0xb0>)
     b6e:	f205 10f7 	addw	r0, r5, #503	; 0x1f7
     b72:	f7ff feef 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     b76:	4628      	mov	r0, r5
     b78:	f7ff ff4a 	bl	a10 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     b7c:	4b1d      	ldr	r3, [pc, #116]	; (bf4 <initialize()+0xb4>)
     b7e:	4a1e      	ldr	r2, [pc, #120]	; (bf8 <initialize()+0xb8>)
     b80:	7818      	ldrb	r0, [r3, #0]
     b82:	f885 022b 	strb.w	r0, [r5, #555]	; 0x22b
     b86:	4623      	mov	r3, r4
     b88:	e001      	b.n	b8e <initialize()+0x4e>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     b8a:	2b1b      	cmp	r3, #27
     b8c:	d008      	beq.n	ba0 <initialize()+0x60>
		if (leds.mode_name == ModeList[i]) {
     b8e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     b92:	4281      	cmp	r1, r0
     b94:	b2dc      	uxtb	r4, r3
     b96:	f103 0301 	add.w	r3, r3, #1
     b9a:	d1f6      	bne.n	b8a <initialize()+0x4a>
			leds.mode_number = i;
     b9c:	f885 422a 	strb.w	r4, [r5, #554]	; 0x22a
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     ba0:	4c16      	ldr	r4, [pc, #88]	; (bfc <initialize()+0xbc>)
     ba2:	aa01      	add	r2, sp, #4
     ba4:	2300      	movs	r3, #0
     ba6:	4620      	mov	r0, r4
     ba8:	2196      	movs	r1, #150	; 0x96
     baa:	f88d 3004 	strb.w	r3, [sp, #4]
     bae:	f88d 3005 	strb.w	r3, [sp, #5]
     bb2:	f88d 3006 	strb.w	r3, [sp, #6]
     bb6:	f007 ff29 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     bba:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     bbc:	f204 10c7 	addw	r0, r4, #455	; 0x1c7
     bc0:	490f      	ldr	r1, [pc, #60]	; (c00 <initialize()+0xc0>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     bc2:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     bc6:	f7ff fec5 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     bca:	490e      	ldr	r1, [pc, #56]	; (c04 <initialize()+0xc4>)
     bcc:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
     bd0:	f7ff fec0 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     bd4:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
     bd8:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
	updatePaletteIndex(next_leds);
     bdc:	4620      	mov	r0, r4
     bde:	f7ff ff17 	bl	a10 <updatePaletteIndex(LEDStruct&)>
}
     be2:	b003      	add	sp, #12
     be4:	bd30      	pop	{r4, r5, pc}
     be6:	bf00      	nop
     be8:	1fff95e8 	.word	0x1fff95e8
     bec:	0000f344 	.word	0x0000f344
     bf0:	0000e9bc 	.word	0x0000e9bc
     bf4:	1fff8749 	.word	0x1fff8749
     bf8:	1fff8727 	.word	0x1fff8727
     bfc:	1fff8c88 	.word	0x1fff8c88
     c00:	0000f0f8 	.word	0x0000f0f8
     c04:	0000e338 	.word	0x0000e338

00000c08 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     c08:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c0a:	2112      	movs	r1, #18
     c0c:	b082      	sub	sp, #8
     c0e:	482e      	ldr	r0, [pc, #184]	; (cc8 <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c10:	4c2e      	ldr	r4, [pc, #184]	; (ccc <global_debug()+0xc4>)
     c12:	f009 ffcd 	bl	abb0 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     c16:	4b2e      	ldr	r3, [pc, #184]	; (cd0 <global_debug()+0xc8>)
     c18:	4620      	mov	r0, r4
     c1a:	7819      	ldrb	r1, [r3, #0]
     c1c:	f00a fa1c 	bl	b058 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c20:	4620      	mov	r0, r4
     c22:	f00a f9c9 	bl	afb8 <Print::println()>
     c26:	2111      	movs	r1, #17
     c28:	482a      	ldr	r0, [pc, #168]	; (cd4 <global_debug()+0xcc>)
     c2a:	f009 ffc1 	bl	abb0 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     c2e:	4b2a      	ldr	r3, [pc, #168]	; (cd8 <global_debug()+0xd0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c30:	4620      	mov	r0, r4
     c32:	7819      	ldrb	r1, [r3, #0]
     c34:	f00a fa10 	bl	b058 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c38:	4620      	mov	r0, r4
     c3a:	f00a f9bd 	bl	afb8 <Print::println()>
     c3e:	2115      	movs	r1, #21
     c40:	4826      	ldr	r0, [pc, #152]	; (cdc <global_debug()+0xd4>)
     c42:	f009 ffb5 	bl	abb0 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     c46:	4b26      	ldr	r3, [pc, #152]	; (ce0 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c48:	4620      	mov	r0, r4
     c4a:	7819      	ldrb	r1, [r3, #0]
     c4c:	f00a fa04 	bl	b058 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c50:	4620      	mov	r0, r4
     c52:	f00a f9b1 	bl	afb8 <Print::println()>
     c56:	2114      	movs	r1, #20
     c58:	4822      	ldr	r0, [pc, #136]	; (ce4 <global_debug()+0xdc>)
     c5a:	f009 ffa9 	bl	abb0 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     c5e:	4b22      	ldr	r3, [pc, #136]	; (ce8 <global_debug()+0xe0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c60:	4620      	mov	r0, r4
     c62:	8819      	ldrh	r1, [r3, #0]
     c64:	f00a f9f8 	bl	b058 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c68:	4620      	mov	r0, r4
     c6a:	f00a f9a5 	bl	afb8 <Print::println()>
     c6e:	210f      	movs	r1, #15
     c70:	481e      	ldr	r0, [pc, #120]	; (cec <global_debug()+0xe4>)
     c72:	f009 ff9d 	bl	abb0 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     c76:	4b1e      	ldr	r3, [pc, #120]	; (cf0 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c78:	4620      	mov	r0, r4
     c7a:	8819      	ldrh	r1, [r3, #0]
     c7c:	f00a f9ec 	bl	b058 <Print::print(long)>
     c80:	2102      	movs	r1, #2
     c82:	481c      	ldr	r0, [pc, #112]	; (cf4 <global_debug()+0xec>)
     c84:	f009 ff94 	bl	abb0 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     c88:	4b1b      	ldr	r3, [pc, #108]	; (cf8 <global_debug()+0xf0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     c8a:	220a      	movs	r2, #10
     c8c:	7819      	ldrb	r1, [r3, #0]
     c8e:	4620      	mov	r0, r4
     c90:	2300      	movs	r3, #0
     c92:	f00a f9a1 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     c96:	2101      	movs	r1, #1
     c98:	4818      	ldr	r0, [pc, #96]	; (cfc <global_debug()+0xf4>)
     c9a:	f009 ff89 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c9e:	4620      	mov	r0, r4
     ca0:	f00a f98a 	bl	afb8 <Print::println()>
     ca4:	210e      	movs	r1, #14
     ca6:	4816      	ldr	r0, [pc, #88]	; (d00 <global_debug()+0xf8>)
     ca8:	f009 ff82 	bl	abb0 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cac:	4b15      	ldr	r3, [pc, #84]	; (d04 <global_debug()+0xfc>)
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	9301      	str	r3, [sp, #4]
	return ret;
     cb2:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cb4:	2300      	movs	r3, #0
     cb6:	220a      	movs	r2, #10
     cb8:	4620      	mov	r0, r4
     cba:	f00a f98d 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cbe:	4620      	mov	r0, r4
     cc0:	f00a f97a 	bl	afb8 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     cc4:	b002      	add	sp, #8
     cc6:	bd10      	pop	{r4, pc}
     cc8:	0000c8b4 	.word	0x0000c8b4
     ccc:	1fff8764 	.word	0x1fff8764
     cd0:	1fff8758 	.word	0x1fff8758
     cd4:	0000c8c8 	.word	0x0000c8c8
     cd8:	1fff874c 	.word	0x1fff874c
     cdc:	0000c8dc 	.word	0x0000c8dc
     ce0:	1fff8722 	.word	0x1fff8722
     ce4:	0000c8f4 	.word	0x0000c8f4
     ce8:	1fff8c84 	.word	0x1fff8c84
     cec:	0000c90c 	.word	0x0000c90c
     cf0:	1fff95c2 	.word	0x1fff95c2
     cf4:	0000c91c 	.word	0x0000c91c
     cf8:	1fff951d 	.word	0x1fff951d
     cfc:	0000c920 	.word	0x0000c920
     d00:	0000c924 	.word	0x0000c924
     d04:	1fffa050 	.word	0x1fffa050

00000d08 <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d08:	491e      	ldr	r1, [pc, #120]	; (d84 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     d0a:	481f      	ldr	r0, [pc, #124]	; (d88 <begin_transition()+0x80>)
     d0c:	880b      	ldrh	r3, [r1, #0]
     d0e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     d12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     d16:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     d1a:	3319      	adds	r3, #25
     d1c:	b29b      	uxth	r3, r3
     d1e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     d22:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     d26:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     d2a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d2e:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     d30:	b2db      	uxtb	r3, r3
     d32:	b292      	uxth	r2, r2
     d34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     d38:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     d3a:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     d3c:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     d40:	4e12      	ldr	r6, [pc, #72]	; (d8c <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     d42:	4d13      	ldr	r5, [pc, #76]	; (d90 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     d44:	5cf3      	ldrb	r3, [r6, r3]
     d46:	4c13      	ldr	r4, [pc, #76]	; (d94 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     d48:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     d4a:	b2ff      	uxtb	r7, r7
     d4c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     d50:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     d52:	123f      	asrs	r7, r7, #8
     d54:	3703      	adds	r7, #3
	switch (transition_type) {
     d56:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     d58:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     d5a:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     d5c:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     d5e:	d00c      	beq.n	d7a <begin_transition()+0x72>
     d60:	d306      	bcc.n	d70 <begin_transition()+0x68>
     d62:	2b02      	cmp	r3, #2
     d64:	d102      	bne.n	d6c <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     d66:	4b0c      	ldr	r3, [pc, #48]	; (d98 <begin_transition()+0x90>)
     d68:	2200      	movs	r2, #0
     d6a:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     d6c:	bcf0      	pop	{r4, r5, r6, r7}
     d6e:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     d70:	4b0a      	ldr	r3, [pc, #40]	; (d9c <begin_transition()+0x94>)
     d72:	2200      	movs	r2, #0
     d74:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     d76:	bcf0      	pop	{r4, r5, r6, r7}
     d78:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     d7a:	4b07      	ldr	r3, [pc, #28]	; (d98 <begin_transition()+0x90>)
     d7c:	224a      	movs	r2, #74	; 0x4a
     d7e:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     d80:	bcf0      	pop	{r4, r5, r6, r7}
     d82:	4770      	bx	lr
     d84:	1fff875a 	.word	0x1fff875a
     d88:	1fff94c0 	.word	0x1fff94c0
     d8c:	1fff8750 	.word	0x1fff8750
     d90:	1fff95d1 	.word	0x1fff95d1
     d94:	1fff94d4 	.word	0x1fff94d4
     d98:	1fff94fc 	.word	0x1fff94fc
     d9c:	1fff8c86 	.word	0x1fff8c86

00000da0 <finish_transition()>:

void finish_transition() {
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     da2:	4cef      	ldr	r4, [pc, #956]	; (1160 <finish_transition()+0x3c0>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     da4:	48ef      	ldr	r0, [pc, #956]	; (1164 <finish_transition()+0x3c4>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
     da6:	b083      	sub	sp, #12
	in_transition = 0;
     da8:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     daa:	aa01      	add	r2, sp, #4
     dac:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
     dae:	7023      	strb	r3, [r4, #0]
     db0:	f88d 3004 	strb.w	r3, [sp, #4]
     db4:	f88d 3005 	strb.w	r3, [sp, #5]
     db8:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     dbc:	f007 fe26 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
     dc0:	4be9      	ldr	r3, [pc, #932]	; (1168 <finish_transition()+0x3c8>)
     dc2:	4aea      	ldr	r2, [pc, #936]	; (116c <finish_transition()+0x3cc>)
     dc4:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dc8:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     dcc:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     dd0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dd4:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     dd8:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     ddc:	f803 1c01 	strb.w	r1, [r3, #-1]
     de0:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     de2:	429d      	cmp	r5, r3
     de4:	f102 0203 	add.w	r2, r2, #3
     de8:	d1ee      	bne.n	dc8 <finish_transition()+0x28>
     dea:	48e1      	ldr	r0, [pc, #900]	; (1170 <finish_transition()+0x3d0>)
     dec:	4fdd      	ldr	r7, [pc, #884]	; (1164 <finish_transition()+0x3c4>)
     dee:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
     df2:	f890 21c5 	ldrb.w	r2, [r0, #453]	; 0x1c5
     df6:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
     dfa:	f890 51c2 	ldrb.w	r5, [r0, #450]	; 0x1c2
     dfe:	f890 41c3 	ldrb.w	r4, [r0, #451]	; 0x1c3
     e02:	f887 11c4 	strb.w	r1, [r7, #452]	; 0x1c4
     e06:	f887 21c5 	strb.w	r2, [r7, #453]	; 0x1c5
     e0a:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
     e0e:	f887 51c2 	strb.w	r5, [r7, #450]	; 0x1c2
     e12:	f887 41c3 	strb.w	r4, [r7, #451]	; 0x1c3
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     e16:	f200 13c7 	addw	r3, r0, #455	; 0x1c7
     e1a:	f207 12c7 	addw	r2, r7, #455	; 0x1c7
     e1e:	f200 11f7 	addw	r1, r0, #503	; 0x1f7
     e22:	681d      	ldr	r5, [r3, #0]
     e24:	685c      	ldr	r4, [r3, #4]
     e26:	6015      	str	r5, [r2, #0]
     e28:	689d      	ldr	r5, [r3, #8]
     e2a:	6054      	str	r4, [r2, #4]
     e2c:	68dc      	ldr	r4, [r3, #12]
     e2e:	60d4      	str	r4, [r2, #12]
     e30:	3310      	adds	r3, #16
     e32:	428b      	cmp	r3, r1
     e34:	6095      	str	r5, [r2, #8]
     e36:	f102 0210 	add.w	r2, r2, #16
     e3a:	d1f2      	bne.n	e22 <finish_transition()+0x82>
     e3c:	4bcd      	ldr	r3, [pc, #820]	; (1174 <finish_transition()+0x3d4>)
     e3e:	4ace      	ldr	r2, [pc, #824]	; (1178 <finish_transition()+0x3d8>)
     e40:	f103 0130 	add.w	r1, r3, #48	; 0x30
     e44:	681d      	ldr	r5, [r3, #0]
     e46:	685c      	ldr	r4, [r3, #4]
     e48:	6015      	str	r5, [r2, #0]
     e4a:	689d      	ldr	r5, [r3, #8]
     e4c:	6054      	str	r4, [r2, #4]
     e4e:	68dc      	ldr	r4, [r3, #12]
     e50:	60d4      	str	r4, [r2, #12]
     e52:	3310      	adds	r3, #16
     e54:	428b      	cmp	r3, r1
     e56:	6095      	str	r5, [r2, #8]
     e58:	f102 0210 	add.w	r2, r2, #16
     e5c:	d1f2      	bne.n	e44 <finish_transition()+0xa4>
     e5e:	f890 2227 	ldrb.w	r2, [r0, #551]	; 0x227
     e62:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
     e66:	f890 5229 	ldrb.w	r5, [r0, #553]	; 0x229
     e6a:	f890 422a 	ldrb.w	r4, [r0, #554]	; 0x22a
     e6e:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
     e72:	f887 2227 	strb.w	r2, [r7, #551]	; 0x227
     e76:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
     e7a:	f890 222c 	ldrb.w	r2, [r0, #556]	; 0x22c
     e7e:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
     e82:	f887 5229 	strb.w	r5, [r7, #553]	; 0x229
     e86:	f887 422a 	strb.w	r4, [r7, #554]	; 0x22a
     e8a:	f890 522e 	ldrb.w	r5, [r0, #558]	; 0x22e
     e8e:	f890 422f 	ldrb.w	r4, [r0, #559]	; 0x22f
     e92:	f887 122b 	strb.w	r1, [r7, #555]	; 0x22b
     e96:	f887 222c 	strb.w	r2, [r7, #556]	; 0x22c
     e9a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     e9e:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231
     ea2:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
     ea6:	f890 3232 	ldrb.w	r3, [r0, #562]	; 0x232
     eaa:	f887 522e 	strb.w	r5, [r7, #558]	; 0x22e
     eae:	f887 422f 	strb.w	r4, [r7, #559]	; 0x22f
     eb2:	f890 5233 	ldrb.w	r5, [r0, #563]	; 0x233
     eb6:	f890 4234 	ldrb.w	r4, [r0, #564]	; 0x234
     eba:	f887 1230 	strb.w	r1, [r7, #560]	; 0x230
     ebe:	f887 2231 	strb.w	r2, [r7, #561]	; 0x231
     ec2:	f890 1235 	ldrb.w	r1, [r0, #565]	; 0x235
     ec6:	f890 2236 	ldrb.w	r2, [r0, #566]	; 0x236
     eca:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
     ece:	4bab      	ldr	r3, [pc, #684]	; (117c <finish_transition()+0x3dc>)
     ed0:	f887 4234 	strb.w	r4, [r7, #564]	; 0x234
     ed4:	f887 1235 	strb.w	r1, [r7, #565]	; 0x235
     ed8:	f887 2236 	strb.w	r2, [r7, #566]	; 0x236
     edc:	f887 5233 	strb.w	r5, [r7, #563]	; 0x233
     ee0:	4aa7      	ldr	r2, [pc, #668]	; (1180 <finish_transition()+0x3e0>)
     ee2:	f890 5237 	ldrb.w	r5, [r0, #567]	; 0x237
     ee6:	f890 4238 	ldrb.w	r4, [r0, #568]	; 0x238
     eea:	f890 1239 	ldrb.w	r1, [r0, #569]	; 0x239
     eee:	f887 5237 	strb.w	r5, [r7, #567]	; 0x237
     ef2:	f103 063c 	add.w	r6, r3, #60	; 0x3c
     ef6:	f887 4238 	strb.w	r4, [r7, #568]	; 0x238
     efa:	f887 1239 	strb.w	r1, [r7, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     efe:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
     f02:	f812 4c02 	ldrb.w	r4, [r2, #-2]
        b = rhs.b;
     f06:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f0a:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
     f0e:	f803 4c02 	strb.w	r4, [r3, #-2]
        b = rhs.b;
     f12:	f803 1c01 	strb.w	r1, [r3, #-1]
     f16:	3303      	adds	r3, #3
     f18:	429e      	cmp	r6, r3
     f1a:	f102 0203 	add.w	r2, r2, #3
     f1e:	d1ee      	bne.n	efe <finish_transition()+0x15e>
     f20:	f890 2276 	ldrb.w	r2, [r0, #630]	; 0x276
     f24:	f890 4277 	ldrb.w	r4, [r0, #631]	; 0x277
     f28:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
     f2c:	f887 2276 	strb.w	r2, [r7, #630]	; 0x276
     f30:	f890 2279 	ldrb.w	r2, [r0, #633]	; 0x279
     f34:	4b93      	ldr	r3, [pc, #588]	; (1184 <finish_transition()+0x3e4>)
     f36:	f887 4277 	strb.w	r4, [r7, #631]	; 0x277
     f3a:	f887 1278 	strb.w	r1, [r7, #632]	; 0x278
     f3e:	f890 427a 	ldrb.w	r4, [r0, #634]	; 0x27a
     f42:	f890 127b 	ldrb.w	r1, [r0, #635]	; 0x27b
     f46:	f887 2279 	strb.w	r2, [r7, #633]	; 0x279
     f4a:	f890 227c 	ldrb.w	r2, [r0, #636]	; 0x27c
     f4e:	f887 427a 	strb.w	r4, [r7, #634]	; 0x27a
     f52:	f887 127b 	strb.w	r1, [r7, #635]	; 0x27b
     f56:	f890 427d 	ldrb.w	r4, [r0, #637]	; 0x27d
     f5a:	f890 127e 	ldrb.w	r1, [r0, #638]	; 0x27e
     f5e:	f887 227c 	strb.w	r2, [r7, #636]	; 0x27c
     f62:	4a89      	ldr	r2, [pc, #548]	; (1188 <finish_transition()+0x3e8>)
     f64:	f887 427d 	strb.w	r4, [r7, #637]	; 0x27d
     f68:	f887 127e 	strb.w	r1, [r7, #638]	; 0x27e
     f6c:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     f70:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     f74:	f803 1b01 	strb.w	r1, [r3], #1
     f78:	42a3      	cmp	r3, r4
     f7a:	d1f9      	bne.n	f70 <finish_transition()+0x1d0>
     f7c:	4983      	ldr	r1, [pc, #524]	; (118c <finish_transition()+0x3ec>)
     f7e:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     f82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     f86:	f803 2b01 	strb.w	r2, [r3], #1
     f8a:	42a3      	cmp	r3, r4
     f8c:	4a75      	ldr	r2, [pc, #468]	; (1164 <finish_transition()+0x3c4>)
     f8e:	d1f8      	bne.n	f82 <finish_transition()+0x1e2>
     f90:	f890 3315 	ldrb.w	r3, [r0, #789]	; 0x315
     f94:	f890 6316 	ldrb.w	r6, [r0, #790]	; 0x316
     f98:	f890 5317 	ldrb.w	r5, [r0, #791]	; 0x317
     f9c:	f890 4318 	ldrb.w	r4, [r0, #792]	; 0x318
     fa0:	f890 1319 	ldrb.w	r1, [r0, #793]	; 0x319
     fa4:	f882 3315 	strb.w	r3, [r2, #789]	; 0x315
     fa8:	f890 331a 	ldrb.w	r3, [r0, #794]	; 0x31a
     fac:	f882 6316 	strb.w	r6, [r2, #790]	; 0x316
     fb0:	f882 5317 	strb.w	r5, [r2, #791]	; 0x317
     fb4:	f8b0 631c 	ldrh.w	r6, [r0, #796]	; 0x31c
     fb8:	f8b0 531e 	ldrh.w	r5, [r0, #798]	; 0x31e
     fbc:	f882 4318 	strb.w	r4, [r2, #792]	; 0x318
     fc0:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
     fc4:	f8b0 4320 	ldrh.w	r4, [r0, #800]	; 0x320
     fc8:	f890 1322 	ldrb.w	r1, [r0, #802]	; 0x322
     fcc:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
     fd0:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
     fd4:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
     fd8:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
     fdc:	f890 6324 	ldrb.w	r6, [r0, #804]	; 0x324
     fe0:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
     fe4:	f8a2 4320 	strh.w	r4, [r2, #800]	; 0x320
     fe8:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
     fec:	f890 4326 	ldrb.w	r4, [r0, #806]	; 0x326
     ff0:	f890 1327 	ldrb.w	r1, [r0, #807]	; 0x327
     ff4:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
     ff8:	f8b0 3328 	ldrh.w	r3, [r0, #808]	; 0x328
     ffc:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    1000:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    1004:	f882 4326 	strb.w	r4, [r2, #806]	; 0x326
    1008:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    100c:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    1010:	f8b0 332a 	ldrh.w	r3, [r0, #810]	; 0x32a
    1014:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    1018:	f8b0 632c 	ldrh.w	r6, [r0, #812]	; 0x32c
    101c:	f8b0 532e 	ldrh.w	r5, [r0, #814]	; 0x32e
    1020:	f8b0 4330 	ldrh.w	r4, [r0, #816]	; 0x330
    1024:	f8b0 1332 	ldrh.w	r1, [r0, #818]	; 0x332
    1028:	f8b0 3334 	ldrh.w	r3, [r0, #820]	; 0x334
    102c:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1030:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    1034:	f8b0 6336 	ldrh.w	r6, [r0, #822]	; 0x336
    1038:	f8b0 5338 	ldrh.w	r5, [r0, #824]	; 0x338
    103c:	f8a2 4330 	strh.w	r4, [r2, #816]	; 0x330
    1040:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    1044:	f8b0 433a 	ldrh.w	r4, [r0, #826]	; 0x33a
    1048:	f8b0 133c 	ldrh.w	r1, [r0, #828]	; 0x33c
    104c:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    1050:	f890 333e 	ldrb.w	r3, [r0, #830]	; 0x33e
    1054:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    1058:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    105c:	f890 633f 	ldrb.w	r6, [r0, #831]	; 0x33f
    1060:	f890 5340 	ldrb.w	r5, [r0, #832]	; 0x340
    1064:	f8a2 433a 	strh.w	r4, [r2, #826]	; 0x33a
    1068:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    106c:	f890 4341 	ldrb.w	r4, [r0, #833]	; 0x341
    1070:	f890 1342 	ldrb.w	r1, [r0, #834]	; 0x342
    1074:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    1078:	f890 3343 	ldrb.w	r3, [r0, #835]	; 0x343
    107c:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    1080:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    1084:	f882 4341 	strb.w	r4, [r2, #833]	; 0x341
    1088:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    108c:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    1090:	f890 3344 	ldrb.w	r3, [r0, #836]	; 0x344
    1094:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    1098:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
    109c:	f890 5346 	ldrb.w	r5, [r0, #838]	; 0x346
    10a0:	f890 4347 	ldrb.w	r4, [r0, #839]	; 0x347
    10a4:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
    10a8:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
    10ac:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    10b0:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    10b4:	f890 634a 	ldrb.w	r6, [r0, #842]	; 0x34a
    10b8:	f890 534b 	ldrb.w	r5, [r0, #843]	; 0x34b
    10bc:	f882 4347 	strb.w	r4, [r2, #839]	; 0x347
    10c0:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    10c4:	f890 434c 	ldrb.w	r4, [r0, #844]	; 0x34c
    10c8:	f890 134d 	ldrb.w	r1, [r0, #845]	; 0x34d
    10cc:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    10d0:	f890 334e 	ldrb.w	r3, [r0, #846]	; 0x34e
    10d4:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    10d8:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    10dc:	f882 434c 	strb.w	r4, [r2, #844]	; 0x34c
    10e0:	f890 5350 	ldrb.w	r5, [r0, #848]	; 0x350
    10e4:	f890 4351 	ldrb.w	r4, [r0, #849]	; 0x351
    10e8:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    10ec:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    10f0:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
    10f4:	f890 3353 	ldrb.w	r3, [r0, #851]	; 0x353
    10f8:	f890 634f 	ldrb.w	r6, [r0, #847]	; 0x34f
    10fc:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    1100:	f882 4351 	strb.w	r4, [r2, #849]	; 0x351
    1104:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    1108:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    110c:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    1110:	491f      	ldr	r1, [pc, #124]	; (1190 <finish_transition()+0x3f0>)
    1112:	f890 6354 	ldrb.w	r6, [r0, #852]	; 0x354
    1116:	f890 335d 	ldrb.w	r3, [r0, #861]	; 0x35d
    111a:	f8d0 5358 	ldr.w	r5, [r0, #856]	; 0x358
    111e:	f890 435c 	ldrb.w	r4, [r0, #860]	; 0x35c
    1122:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    1126:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    112a:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    112e:	f882 435c 	strb.w	r4, [r2, #860]	; 0x35c
    1132:	f502 7358 	add.w	r3, r2, #864	; 0x360
    1136:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    113a:	f851 4f04 	ldr.w	r4, [r1, #4]!
    113e:	f843 4b04 	str.w	r4, [r3], #4
    1142:	4293      	cmp	r3, r2
    1144:	d1f9      	bne.n	113a <finish_transition()+0x39a>
    1146:	4a13      	ldr	r2, [pc, #76]	; (1194 <finish_transition()+0x3f4>)
    1148:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    114c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1150:	f843 1b04 	str.w	r1, [r3], #4
    1154:	42a3      	cmp	r3, r4
    1156:	d1f9      	bne.n	114c <finish_transition()+0x3ac>
    1158:	4a0f      	ldr	r2, [pc, #60]	; (1198 <finish_transition()+0x3f8>)
    115a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
    115e:	e01d      	b.n	119c <finish_transition()+0x3fc>
    1160:	1fff94c0 	.word	0x1fff94c0
    1164:	1fff95e8 	.word	0x1fff95e8
    1168:	1fff95eb 	.word	0x1fff95eb
    116c:	1fff8c8b 	.word	0x1fff8c8b
    1170:	1fff8c88 	.word	0x1fff8c88
    1174:	1fff8e7f 	.word	0x1fff8e7f
    1178:	1fff97df 	.word	0x1fff97df
    117c:	1fff9825 	.word	0x1fff9825
    1180:	1fff8ec5 	.word	0x1fff8ec5
    1184:	1fff9867 	.word	0x1fff9867
    1188:	1fff8f06 	.word	0x1fff8f06
    118c:	1fff8f51 	.word	0x1fff8f51
    1190:	1fff8fe4 	.word	0x1fff8fe4
    1194:	1fff90d4 	.word	0x1fff90d4
    1198:	1fff91c7 	.word	0x1fff91c7
    119c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11a0:	f803 1b01 	strb.w	r1, [r3], #1
    11a4:	42a3      	cmp	r3, r4
    11a6:	d1f9      	bne.n	119c <finish_transition()+0x3fc>
    11a8:	4a3f      	ldr	r2, [pc, #252]	; (12a8 <finish_transition()+0x508>)
    11aa:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    11ae:	f852 1f04 	ldr.w	r1, [r2, #4]!
    11b2:	f843 1b04 	str.w	r1, [r3], #4
    11b6:	42a3      	cmp	r3, r4
    11b8:	d1f9      	bne.n	11ae <finish_transition()+0x40e>
    11ba:	4a3c      	ldr	r2, [pc, #240]	; (12ac <finish_transition()+0x50c>)
    11bc:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    11c0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    11c4:	f843 1b04 	str.w	r1, [r3], #4
    11c8:	42a3      	cmp	r3, r4
    11ca:	4939      	ldr	r1, [pc, #228]	; (12b0 <finish_transition()+0x510>)
    11cc:	d1f8      	bne.n	11c0 <finish_transition()+0x420>
    11ce:	f890 575c 	ldrb.w	r5, [r0, #1884]	; 0x75c
    11d2:	f890 475d 	ldrb.w	r4, [r0, #1885]	; 0x75d
    11d6:	f890 375e 	ldrb.w	r3, [r0, #1886]	; 0x75e
    11da:	f8b0 2760 	ldrh.w	r2, [r0, #1888]	; 0x760
    11de:	f881 575c 	strb.w	r5, [r1, #1884]	; 0x75c
    11e2:	f881 475d 	strb.w	r4, [r1, #1885]	; 0x75d
    11e6:	f881 375e 	strb.w	r3, [r1, #1886]	; 0x75e
    11ea:	f8a1 2760 	strh.w	r2, [r1, #1888]	; 0x760
    11ee:	f890 3767 	ldrb.w	r3, [r0, #1895]	; 0x767
    11f2:	f8b0 7762 	ldrh.w	r7, [r0, #1890]	; 0x762
    11f6:	f890 6764 	ldrb.w	r6, [r0, #1892]	; 0x764
    11fa:	f890 5765 	ldrb.w	r5, [r0, #1893]	; 0x765
    11fe:	f890 4766 	ldrb.w	r4, [r0, #1894]	; 0x766
    1202:	4a2c      	ldr	r2, [pc, #176]	; (12b4 <finish_transition()+0x514>)
    1204:	f881 3767 	strb.w	r3, [r1, #1895]	; 0x767
    1208:	f8a1 7762 	strh.w	r7, [r1, #1890]	; 0x762
    120c:	f881 6764 	strb.w	r6, [r1, #1892]	; 0x764
    1210:	f881 5765 	strb.w	r5, [r1, #1893]	; 0x765
    1214:	f881 4766 	strb.w	r4, [r1, #1894]	; 0x766
    1218:	f501 63ed 	add.w	r3, r1, #1896	; 0x768
    121c:	f501 61f1 	add.w	r1, r1, #1928	; 0x788
    1220:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1224:	f843 0b04 	str.w	r0, [r3], #4
    1228:	428b      	cmp	r3, r1
    122a:	d1f9      	bne.n	1220 <finish_transition()+0x480>
    122c:	4a22      	ldr	r2, [pc, #136]	; (12b8 <finish_transition()+0x518>)
    122e:	f103 0020 	add.w	r0, r3, #32
    1232:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1236:	f843 1b04 	str.w	r1, [r3], #4
    123a:	4283      	cmp	r3, r0
    123c:	d1f9      	bne.n	1232 <finish_transition()+0x492>
    123e:	4a1f      	ldr	r2, [pc, #124]	; (12bc <finish_transition()+0x51c>)
    1240:	f103 0020 	add.w	r0, r3, #32
    1244:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1248:	f843 1b04 	str.w	r1, [r3], #4
    124c:	4283      	cmp	r3, r0
    124e:	d1f9      	bne.n	1244 <finish_transition()+0x4a4>
    1250:	4a1b      	ldr	r2, [pc, #108]	; (12c0 <finish_transition()+0x520>)
    1252:	f103 0020 	add.w	r0, r3, #32
    1256:	f852 1f04 	ldr.w	r1, [r2, #4]!
    125a:	f843 1b04 	str.w	r1, [r3], #4
    125e:	4283      	cmp	r3, r0
    1260:	d1f9      	bne.n	1256 <finish_transition()+0x4b6>
    1262:	4a18      	ldr	r2, [pc, #96]	; (12c4 <finish_transition()+0x524>)
    1264:	f103 0020 	add.w	r0, r3, #32
    1268:	f852 1f04 	ldr.w	r1, [r2, #4]!
    126c:	f843 1b04 	str.w	r1, [r3], #4
    1270:	4283      	cmp	r3, r0
    1272:	d1f9      	bne.n	1268 <finish_transition()+0x4c8>
    1274:	4a14      	ldr	r2, [pc, #80]	; (12c8 <finish_transition()+0x528>)
    1276:	f103 0020 	add.w	r0, r3, #32
    127a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    127e:	f843 1b04 	str.w	r1, [r3], #4
    1282:	4283      	cmp	r3, r0
    1284:	4c0a      	ldr	r4, [pc, #40]	; (12b0 <finish_transition()+0x510>)
    1286:	d1f8      	bne.n	127a <finish_transition()+0x4da>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1288:	2500      	movs	r5, #0
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    128a:	aa01      	add	r2, sp, #4
    128c:	2196      	movs	r1, #150	; 0x96
    128e:	480f      	ldr	r0, [pc, #60]	; (12cc <finish_transition()+0x52c>)
    1290:	f88d 5004 	strb.w	r5, [sp, #4]
    1294:	f88d 5005 	strb.w	r5, [sp, #5]
    1298:	f88d 5006 	strb.w	r5, [sp, #6]
    129c:	f007 fbb6 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    12a0:	f884 51c6 	strb.w	r5, [r4, #454]	; 0x1c6
}
    12a4:	b003      	add	sp, #12
    12a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a8:	1fff9200 	.word	0x1fff9200
    12ac:	1fff92f0 	.word	0x1fff92f0
    12b0:	1fff95e8 	.word	0x1fff95e8
    12b4:	1fff93ec 	.word	0x1fff93ec
    12b8:	1fff940c 	.word	0x1fff940c
    12bc:	1fff942c 	.word	0x1fff942c
    12c0:	1fff944c 	.word	0x1fff944c
    12c4:	1fff946c 	.word	0x1fff946c
    12c8:	1fff948c 	.word	0x1fff948c
    12cc:	1fff8c88 	.word	0x1fff8c88

000012d0 <blending()>:

void blending() {
    12d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12d4:	4d2f      	ldr	r5, [pc, #188]	; (1394 <blending()+0xc4>)
    12d6:	4e30      	ldr	r6, [pc, #192]	; (1398 <blending()+0xc8>)
    12d8:	4c30      	ldr	r4, [pc, #192]	; (139c <blending()+0xcc>)
    12da:	4f31      	ldr	r7, [pc, #196]	; (13a0 <blending()+0xd0>)
    12dc:	b085      	sub	sp, #20
    12de:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    12e2:	4632      	mov	r2, r6
    12e4:	4629      	mov	r1, r5
    12e6:	783b      	ldrb	r3, [r7, #0]
    12e8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 13a0 <blending()+0xd0>
    12ec:	a803      	add	r0, sp, #12
    12ee:	3503      	adds	r5, #3
    12f0:	f007 fc7e 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12f4:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    12f8:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    12fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1300:	7021      	strb	r1, [r4, #0]
    1302:	4545      	cmp	r5, r8
        g = rhs.g;
    1304:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1306:	70a3      	strb	r3, [r4, #2]
    1308:	f106 0603 	add.w	r6, r6, #3
    130c:	f104 0403 	add.w	r4, r4, #3
    1310:	d1e7      	bne.n	12e2 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1312:	4e24      	ldr	r6, [pc, #144]	; (13a4 <blending()+0xd4>)
    1314:	6833      	ldr	r3, [r6, #0]
    1316:	07db      	lsls	r3, r3, #31
    1318:	d51f      	bpl.n	135a <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    131a:	4d23      	ldr	r5, [pc, #140]	; (13a8 <blending()+0xd8>)
    131c:	4c23      	ldr	r4, [pc, #140]	; (13ac <blending()+0xdc>)
    131e:	682b      	ldr	r3, [r5, #0]
    1320:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    1322:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1326:	9b03      	ldr	r3, [sp, #12]
    1328:	1a5b      	subs	r3, r3, r1
    132a:	4293      	cmp	r3, r2
    132c:	d30c      	bcc.n	1348 <blending()+0x78>
    132e:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1330:	682a      	ldr	r2, [r5, #0]
    1332:	9202      	str	r2, [sp, #8]
    1334:	3301      	adds	r3, #1
	return ret;
    1336:	9a02      	ldr	r2, [sp, #8]
    1338:	6022      	str	r2, [r4, #0]
    133a:	b2db      	uxtb	r3, r3
    133c:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    133e:	2bff      	cmp	r3, #255	; 0xff
    1340:	d006      	beq.n	1350 <blending()+0x80>
		finish_transition();
	}
}
    1342:	b005      	add	sp, #20
    1344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1348:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    134c:	2bff      	cmp	r3, #255	; 0xff
    134e:	d1f8      	bne.n	1342 <blending()+0x72>
		finish_transition();
    1350:	f7ff fd26 	bl	da0 <finish_transition()>
	}
}
    1354:	b005      	add	sp, #20
    1356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    135a:	4630      	mov	r0, r6
    135c:	f008 fb90 	bl	9a80 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1360:	4d11      	ldr	r5, [pc, #68]	; (13a8 <blending()+0xd8>)
    1362:	b950      	cbnz	r0, 137a <blending()+0xaa>
    1364:	4c11      	ldr	r4, [pc, #68]	; (13ac <blending()+0xdc>)
    1366:	682b      	ldr	r3, [r5, #0]
    1368:	9303      	str	r3, [sp, #12]
    136a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    136e:	9b03      	ldr	r3, [sp, #12]
    1370:	1a5b      	subs	r3, r3, r1
    1372:	4293      	cmp	r3, r2
    1374:	d2db      	bcs.n	132e <blending()+0x5e>
    1376:	783b      	ldrb	r3, [r7, #0]
    1378:	e7e1      	b.n	133e <blending()+0x6e>
    137a:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    137c:	682a      	ldr	r2, [r5, #0]
    137e:	781b      	ldrb	r3, [r3, #0]
    1380:	4c0a      	ldr	r4, [pc, #40]	; (13ac <blending()+0xdc>)
    1382:	9201      	str	r2, [sp, #4]
	return ret;
    1384:	9a01      	ldr	r2, [sp, #4]
    1386:	6022      	str	r2, [r4, #0]
    1388:	009b      	lsls	r3, r3, #2
    138a:	4630      	mov	r0, r6
    138c:	6063      	str	r3, [r4, #4]
    138e:	f008 fb7d 	bl	9a8c <__cxa_guard_release>
    1392:	e7e8      	b.n	1366 <blending()+0x96>
    1394:	1fff95e8 	.word	0x1fff95e8
    1398:	1fff8c88 	.word	0x1fff8c88
    139c:	1fff9e10 	.word	0x1fff9e10
    13a0:	1fff8c86 	.word	0x1fff8c86
    13a4:	1fff95b8 	.word	0x1fff95b8
    13a8:	1fffa050 	.word	0x1fffa050
    13ac:	1fff94c4 	.word	0x1fff94c4
    13b0:	1fff95d1 	.word	0x1fff95d1

000013b4 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    13b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    13b8:	4e94      	ldr	r6, [pc, #592]	; (160c <wipedown()+0x258>)
    13ba:	f896 c000 	ldrb.w	ip, [r6]
    13be:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    13c2:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    13c4:	2b00      	cmp	r3, #0
    13c6:	f000 811e 	beq.w	1606 <wipedown()+0x252>
    13ca:	f103 3bff 	add.w	fp, r3, #4294967295
    13ce:	fa1f fb8b 	uxth.w	fp, fp
    13d2:	488f      	ldr	r0, [pc, #572]	; (1610 <wipedown()+0x25c>)
    13d4:	498f      	ldr	r1, [pc, #572]	; (1614 <wipedown()+0x260>)
    13d6:	f10b 0b01 	add.w	fp, fp, #1
    13da:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    13de:	4483      	add	fp, r0
    13e0:	4602      	mov	r2, r0
    13e2:	460d      	mov	r5, r1
    13e4:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    13e6:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    13e8:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    13ec:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    13f0:	7027      	strb	r7, [r4, #0]
    13f2:	3203      	adds	r2, #3
    13f4:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    13f8:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    13fc:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1400:	f884 a001 	strb.w	sl, [r4, #1]
    1404:	455a      	cmp	r2, fp
        b = rhs.b;
    1406:	f884 9002 	strb.w	r9, [r4, #2]
    140a:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    140e:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1412:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    1416:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    141a:	f104 0403 	add.w	r4, r4, #3
    141e:	f1a1 0103 	sub.w	r1, r1, #3
    1422:	d1e0      	bne.n	13e6 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1424:	2b4a      	cmp	r3, #74	; 0x4a
    1426:	d827      	bhi.n	1478 <wipedown()+0xc4>
    1428:	487b      	ldr	r0, [pc, #492]	; (1618 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    142a:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    142e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1432:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1436:	eb00 0801 	add.w	r8, r0, r1
    143a:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    143e:	3301      	adds	r3, #1
    1440:	186f      	adds	r7, r5, r1
    1442:	f810 b001 	ldrb.w	fp, [r0, r1]
    1446:	f805 b001 	strb.w	fp, [r5, r1]
    144a:	18ac      	adds	r4, r5, r2
    144c:	b29b      	uxth	r3, r3
        g = rhs.g;
    144e:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1452:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1456:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    145a:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    145e:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1462:	f887 a001 	strb.w	sl, [r7, #1]
    1466:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1468:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    146c:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    1470:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1474:	70a1      	strb	r1, [r4, #2]
    1476:	d1d8      	bne.n	142a <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1478:	f10c 3aff 	add.w	sl, ip, #4294967295
    147c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1480:	2480      	movs	r4, #128	; 0x80
    1482:	eb05 0b0a 	add.w	fp, r5, sl
    1486:	4659      	mov	r1, fp
    1488:	4623      	mov	r3, r4
    148a:	a803      	add	r0, sp, #12
    148c:	aa02      	add	r2, sp, #8
    148e:	2700      	movs	r7, #0
    1490:	f88d 4009 	strb.w	r4, [sp, #9]
    1494:	f88d 400a 	strb.w	r4, [sp, #10]
    1498:	f88d 7008 	strb.w	r7, [sp, #8]
    149c:	f007 fba8 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    14a0:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    14a8:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    14ac:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14b0:	f805 300a 	strb.w	r3, [r5, sl]
    14b4:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    14b8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    14bc:	eb05 0908 	add.w	r9, r5, r8
    14c0:	4649      	mov	r1, r9
    14c2:	4623      	mov	r3, r4
        g = rhs.g;
    14c4:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    14c8:	f88b 0002 	strb.w	r0, [fp, #2]
    14cc:	aa02      	add	r2, sp, #8
    14ce:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14d0:	f88d 7008 	strb.w	r7, [sp, #8]
    14d4:	f88d 4009 	strb.w	r4, [sp, #9]
    14d8:	f88d 400a 	strb.w	r4, [sp, #10]
    14dc:	f007 fb88 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    14e0:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14e2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    14e6:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    14ea:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    14ee:	f89d 000d 	ldrb.w	r0, [sp, #13]
    14f2:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    14f6:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    14fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    14fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1502:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1506:	eb05 0e0c 	add.w	lr, r5, ip
    150a:	1868      	adds	r0, r5, r1
    150c:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    150e:	2a4a      	cmp	r2, #74	; 0x4a
    1510:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1514:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1614 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    1518:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    151c:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1520:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 160c <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1524:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    1526:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1528:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    152a:	d82e      	bhi.n	158a <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    152c:	4f3b      	ldr	r7, [pc, #236]	; (161c <wipedown()+0x268>)
    152e:	683b      	ldr	r3, [r7, #0]
    1530:	07db      	lsls	r3, r3, #31
    1532:	d517      	bpl.n	1564 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1534:	4d3a      	ldr	r5, [pc, #232]	; (1620 <wipedown()+0x26c>)
    1536:	4c3b      	ldr	r4, [pc, #236]	; (1624 <wipedown()+0x270>)
    1538:	682b      	ldr	r3, [r5, #0]
    153a:	9303      	str	r3, [sp, #12]
    153c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1540:	9b03      	ldr	r3, [sp, #12]
    1542:	1a5b      	subs	r3, r3, r1
    1544:	4293      	cmp	r3, r2
    1546:	7833      	ldrb	r3, [r6, #0]
    1548:	d306      	bcc.n	1558 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    154a:	682a      	ldr	r2, [r5, #0]
    154c:	9202      	str	r2, [sp, #8]
    154e:	3b01      	subs	r3, #1
	return ret;
    1550:	9a02      	ldr	r2, [sp, #8]
    1552:	6022      	str	r2, [r4, #0]
    1554:	b2db      	uxtb	r3, r3
    1556:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    1558:	b90b      	cbnz	r3, 155e <wipedown()+0x1aa>
		finish_transition();
    155a:	f7ff fc21 	bl	da0 <finish_transition()>
	}
}
    155e:	b005      	add	sp, #20
    1560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1564:	4638      	mov	r0, r7
    1566:	f008 fa8b 	bl	9a80 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    156a:	4d2d      	ldr	r5, [pc, #180]	; (1620 <wipedown()+0x26c>)
    156c:	2800      	cmp	r0, #0
    156e:	d0e2      	beq.n	1536 <wipedown()+0x182>
    1570:	4b2d      	ldr	r3, [pc, #180]	; (1628 <wipedown()+0x274>)
    1572:	682a      	ldr	r2, [r5, #0]
    1574:	781b      	ldrb	r3, [r3, #0]
    1576:	4c2b      	ldr	r4, [pc, #172]	; (1624 <wipedown()+0x270>)
    1578:	9201      	str	r2, [sp, #4]
	return ret;
    157a:	9a01      	ldr	r2, [sp, #4]
    157c:	6022      	str	r2, [r4, #0]
    157e:	009b      	lsls	r3, r3, #2
    1580:	4638      	mov	r0, r7
    1582:	6063      	str	r3, [r4, #4]
    1584:	f008 fa82 	bl	9a8c <__cxa_guard_release>
    1588:	e7d6      	b.n	1538 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    158a:	1c55      	adds	r5, r2, #1
    158c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1590:	eb08 0a05 	add.w	sl, r8, r5
    1594:	4651      	mov	r1, sl
    1596:	4623      	mov	r3, r4
    1598:	aa02      	add	r2, sp, #8
    159a:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    159c:	f88d 7008 	strb.w	r7, [sp, #8]
    15a0:	f88d 4009 	strb.w	r4, [sp, #9]
    15a4:	f88d 400a 	strb.w	r4, [sp, #10]
    15a8:	f007 fb22 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    15ac:	f899 3000 	ldrb.w	r3, [r9]
    15b0:	f88d 7008 	strb.w	r7, [sp, #8]
    15b4:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    15b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    15bc:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c0:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    15c4:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    15c8:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15cc:	f808 c005 	strb.w	ip, [r8, r5]
    15d0:	aa02      	add	r2, sp, #8
    15d2:	4623      	mov	r3, r4
    15d4:	4649      	mov	r1, r9
    15d6:	a803      	add	r0, sp, #12
        g = rhs.g;
    15d8:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    15dc:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    15e0:	f88d 4009 	strb.w	r4, [sp, #9]
    15e4:	f88d 400a 	strb.w	r4, [sp, #10]
    15e8:	f007 fb02 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15ec:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    15f0:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15f4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15f8:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    15fc:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    1600:	f889 3002 	strb.w	r3, [r9, #2]
    1604:	e792      	b.n	152c <wipedown()+0x178>
    1606:	4d03      	ldr	r5, [pc, #12]	; (1614 <wipedown()+0x260>)
    1608:	e70e      	b.n	1428 <wipedown()+0x74>
    160a:	bf00      	nop
    160c:	1fff94fc 	.word	0x1fff94fc
    1610:	1fff95e8 	.word	0x1fff95e8
    1614:	1fff9e10 	.word	0x1fff9e10
    1618:	1fff8c88 	.word	0x1fff8c88
    161c:	1fff95b0 	.word	0x1fff95b0
    1620:	1fffa050 	.word	0x1fffa050
    1624:	1fff94d8 	.word	0x1fff94d8
    1628:	1fff95d1 	.word	0x1fff95d1

0000162c <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1630:	4ba2      	ldr	r3, [pc, #648]	; (18bc <wipeup()+0x290>)
    1632:	781d      	ldrb	r5, [r3, #0]
    1634:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1636:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1638:	2b00      	cmp	r3, #0
    163a:	f000 8130 	beq.w	189e <wipeup()+0x272>
    163e:	f103 3bff 	add.w	fp, r3, #4294967295
    1642:	fa1f fb8b 	uxth.w	fp, fp
    1646:	489e      	ldr	r0, [pc, #632]	; (18c0 <wipeup()+0x294>)
    1648:	499e      	ldr	r1, [pc, #632]	; (18c4 <wipeup()+0x298>)
    164a:	f10b 0b01 	add.w	fp, fp, #1
    164e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1652:	4483      	add	fp, r0
    1654:	4602      	mov	r2, r0
    1656:	460c      	mov	r4, r1
    1658:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    165a:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    165e:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1662:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1666:	f886 e000 	strb.w	lr, [r6]
    166a:	3203      	adds	r2, #3
    166c:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1670:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1674:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1678:	f886 a001 	strb.w	sl, [r6, #1]
    167c:	455a      	cmp	r2, fp
        b = rhs.b;
    167e:	f886 9002 	strb.w	r9, [r6, #2]
    1682:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1686:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    168a:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    168e:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    1692:	f106 0603 	add.w	r6, r6, #3
    1696:	f1a1 0103 	sub.w	r1, r1, #3
    169a:	d1de      	bne.n	165a <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    169c:	2b4a      	cmp	r3, #74	; 0x4a
    169e:	d828      	bhi.n	16f2 <wipeup()+0xc6>
    16a0:	4889      	ldr	r0, [pc, #548]	; (18c8 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    16a2:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16ae:	eb00 0801 	add.w	r8, r0, r1
    16b2:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16b6:	3301      	adds	r3, #1
    16b8:	eb04 0e01 	add.w	lr, r4, r1
    16bc:	f810 b001 	ldrb.w	fp, [r0, r1]
    16c0:	f804 b001 	strb.w	fp, [r4, r1]
    16c4:	18a6      	adds	r6, r4, r2
    16c6:	b29b      	uxth	r3, r3
        g = rhs.g;
    16c8:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    16cc:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16d0:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16d4:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    16d8:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16dc:	f88e a001 	strb.w	sl, [lr, #1]
    16e0:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    16e2:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e6:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    16ea:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    16ee:	70b1      	strb	r1, [r6, #2]
    16f0:	d1d7      	bne.n	16a2 <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    16f2:	2d00      	cmp	r5, #0
    16f4:	f040 808f 	bne.w	1816 <wipeup()+0x1ea>
    16f8:	f10d 0a0c 	add.w	sl, sp, #12
    16fc:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1700:	4b6e      	ldr	r3, [pc, #440]	; (18bc <wipeup()+0x290>)
    1702:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1704:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1708:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    170c:	1c5a      	adds	r2, r3, #1
    170e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1712:	eb04 0e03 	add.w	lr, r4, r3
    1716:	1825      	adds	r5, r4, r0
    1718:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    171c:	2680      	movs	r6, #128	; 0x80
    171e:	eb04 0902 	add.w	r9, r4, r2
    1722:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1724:	22ff      	movs	r2, #255	; 0xff
    1726:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1728:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    172c:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1730:	f88e 2002 	strb.w	r2, [lr, #2]
    1734:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1736:	5422      	strb	r2, [r4, r0]
    1738:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    173a:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    173c:	70aa      	strb	r2, [r5, #2]
    173e:	4650      	mov	r0, sl
    1740:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1742:	f88d 6009 	strb.w	r6, [sp, #9]
    1746:	f88d 600a 	strb.w	r6, [sp, #10]
    174a:	f88d 8008 	strb.w	r8, [sp, #8]
    174e:	f007 fa4f 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1752:	4b5a      	ldr	r3, [pc, #360]	; (18bc <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1754:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1758:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    175a:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    175e:	f88d 8008 	strb.w	r8, [sp, #8]
    1762:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    176a:	eb04 0805 	add.w	r8, r4, r5
    176e:	4633      	mov	r3, r6
    1770:	f88d 6009 	strb.w	r6, [sp, #9]
    1774:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1778:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    177c:	55e1      	strb	r1, [r4, r7]
    177e:	465a      	mov	r2, fp
    1780:	4650      	mov	r0, sl
    1782:	4641      	mov	r1, r8
        g = rhs.g;
    1784:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1788:	f889 6002 	strb.w	r6, [r9, #2]
    178c:	f007 fa30 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1790:	4b4e      	ldr	r3, [pc, #312]	; (18cc <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1792:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1796:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1798:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    179c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17a0:	5560      	strb	r0, [r4, r5]
    17a2:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    17a4:	4845      	ldr	r0, [pc, #276]	; (18bc <wipeup()+0x290>)
        g = rhs.g;
    17a6:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    17aa:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    17ae:	d520      	bpl.n	17f2 <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17b0:	4d47      	ldr	r5, [pc, #284]	; (18d0 <wipeup()+0x2a4>)
    17b2:	4c48      	ldr	r4, [pc, #288]	; (18d4 <wipeup()+0x2a8>)
    17b4:	682b      	ldr	r3, [r5, #0]
    17b6:	9303      	str	r3, [sp, #12]
    17b8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    17bc:	9b03      	ldr	r3, [sp, #12]
    17be:	1a5b      	subs	r3, r3, r1
    17c0:	4293      	cmp	r3, r2
    17c2:	d30e      	bcc.n	17e2 <wipeup()+0x1b6>
    17c4:	4b3d      	ldr	r3, [pc, #244]	; (18bc <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17c6:	682a      	ldr	r2, [r5, #0]
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	9202      	str	r2, [sp, #8]
	return ret;
    17cc:	9a02      	ldr	r2, [sp, #8]
    17ce:	6022      	str	r2, [r4, #0]
    17d0:	3301      	adds	r3, #1
    17d2:	4a3a      	ldr	r2, [pc, #232]	; (18bc <wipeup()+0x290>)
    17d4:	b2db      	uxtb	r3, r3
    17d6:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    17d8:	2b4a      	cmp	r3, #74	; 0x4a
    17da:	d005      	beq.n	17e8 <wipeup()+0x1bc>
		finish_transition();
	}
}
    17dc:	b005      	add	sp, #20
    17de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17e2:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    17e4:	2b4a      	cmp	r3, #74	; 0x4a
    17e6:	d1f9      	bne.n	17dc <wipeup()+0x1b0>
		finish_transition();
    17e8:	f7ff fada 	bl	da0 <finish_transition()>
	}
}
    17ec:	b005      	add	sp, #20
    17ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    17f2:	4836      	ldr	r0, [pc, #216]	; (18cc <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17f4:	4d36      	ldr	r5, [pc, #216]	; (18d0 <wipeup()+0x2a4>)
    17f6:	f008 f943 	bl	9a80 <__cxa_guard_acquire>
    17fa:	2800      	cmp	r0, #0
    17fc:	d151      	bne.n	18a2 <wipeup()+0x276>
    17fe:	4c35      	ldr	r4, [pc, #212]	; (18d4 <wipeup()+0x2a8>)
    1800:	682b      	ldr	r3, [r5, #0]
    1802:	9303      	str	r3, [sp, #12]
    1804:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1808:	9b03      	ldr	r3, [sp, #12]
    180a:	1a5b      	subs	r3, r3, r1
    180c:	4293      	cmp	r3, r2
    180e:	d2d9      	bcs.n	17c4 <wipeup()+0x198>
    1810:	4b2a      	ldr	r3, [pc, #168]	; (18bc <wipeup()+0x290>)
    1812:	781b      	ldrb	r3, [r3, #0]
    1814:	e7e0      	b.n	17d8 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1816:	3d01      	subs	r5, #1
    1818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    181c:	2680      	movs	r6, #128	; 0x80
    181e:	eb04 0905 	add.w	r9, r4, r5
    1822:	f10d 0a0c 	add.w	sl, sp, #12
    1826:	f10d 0b08 	add.w	fp, sp, #8
    182a:	f04f 0800 	mov.w	r8, #0
    182e:	4649      	mov	r1, r9
    1830:	4633      	mov	r3, r6
    1832:	4650      	mov	r0, sl
    1834:	465a      	mov	r2, fp
    1836:	f88d 8008 	strb.w	r8, [sp, #8]
    183a:	f88d 6009 	strb.w	r6, [sp, #9]
    183e:	f88d 600a 	strb.w	r6, [sp, #10]
    1842:	f007 f9d5 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1846:	4b1d      	ldr	r3, [pc, #116]	; (18bc <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1848:	f89d 200c 	ldrb.w	r2, [sp, #12]
    184c:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    184e:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1852:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1856:	f88d 8008 	strb.w	r8, [sp, #8]
    185a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    185e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1862:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1866:	5562      	strb	r2, [r4, r5]
    1868:	461f      	mov	r7, r3
    186a:	4641      	mov	r1, r8
    186c:	4633      	mov	r3, r6
    186e:	465a      	mov	r2, fp
    1870:	4650      	mov	r0, sl
        g = rhs.g;
    1872:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1876:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    187a:	f88d 6009 	strb.w	r6, [sp, #9]
    187e:	f88d 600a 	strb.w	r6, [sp, #10]
    1882:	f007 f9b5 	bl	8bf0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1886:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    188a:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    188e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1892:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1894:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1898:	f888 3002 	strb.w	r3, [r8, #2]
    189c:	e730      	b.n	1700 <wipeup()+0xd4>
    189e:	4c09      	ldr	r4, [pc, #36]	; (18c4 <wipeup()+0x298>)
    18a0:	e6fe      	b.n	16a0 <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    18a2:	4b0d      	ldr	r3, [pc, #52]	; (18d8 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18a4:	682a      	ldr	r2, [r5, #0]
    18a6:	781b      	ldrb	r3, [r3, #0]
    18a8:	4c0a      	ldr	r4, [pc, #40]	; (18d4 <wipeup()+0x2a8>)
    18aa:	9201      	str	r2, [sp, #4]
	return ret;
    18ac:	9a01      	ldr	r2, [sp, #4]
    18ae:	6022      	str	r2, [r4, #0]
    18b0:	009b      	lsls	r3, r3, #2
    18b2:	4806      	ldr	r0, [pc, #24]	; (18cc <wipeup()+0x2a0>)
    18b4:	6063      	str	r3, [r4, #4]
    18b6:	f008 f8e9 	bl	9a8c <__cxa_guard_release>
    18ba:	e7a1      	b.n	1800 <wipeup()+0x1d4>
    18bc:	1fff94fc 	.word	0x1fff94fc
    18c0:	1fff8c88 	.word	0x1fff8c88
    18c4:	1fff9e10 	.word	0x1fff9e10
    18c8:	1fff95e8 	.word	0x1fff95e8
    18cc:	1fff95bc 	.word	0x1fff95bc
    18d0:	1fffa050 	.word	0x1fffa050
    18d4:	1fff95d4 	.word	0x1fff95d4
    18d8:	1fff95d1 	.word	0x1fff95d1

000018dc <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    18dc:	2801      	cmp	r0, #1
    18de:	d006      	beq.n	18ee <switch_transition(TransitionType)+0x12>
    18e0:	d303      	bcc.n	18ea <switch_transition(TransitionType)+0xe>
    18e2:	2802      	cmp	r0, #2
    18e4:	d101      	bne.n	18ea <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    18e6:	f7ff bea1 	b.w	162c <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    18ea:	f7ff bcf1 	b.w	12d0 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    18ee:	f7ff bd61 	b.w	13b4 <wipedown()>
    18f2:	bf00      	nop

000018f4 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    18f4:	b510      	push	{r4, lr}
    18f6:	2110      	movs	r1, #16
    18f8:	4604      	mov	r4, r0
    18fa:	4894      	ldr	r0, [pc, #592]	; (1b4c <print_palette(unsigned char)+0x258>)
    18fc:	f009 f958 	bl	abb0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1900:	4621      	mov	r1, r4
    1902:	2300      	movs	r3, #0
    1904:	220a      	movs	r2, #10
    1906:	4892      	ldr	r0, [pc, #584]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1908:	f009 fb66 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    190c:	2102      	movs	r1, #2
    190e:	4891      	ldr	r0, [pc, #580]	; (1b54 <print_palette(unsigned char)+0x260>)
    1910:	f009 f94e 	bl	abb0 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1914:	2c5c      	cmp	r4, #92	; 0x5c
    1916:	f200 8281 	bhi.w	1e1c <print_palette(unsigned char)+0x528>
    191a:	e8df f014 	tbh	[pc, r4, lsl #1]
    191e:	027a      	.short	0x027a
    1920:	02700275 	.word	0x02700275
    1924:	0266026b 	.word	0x0266026b
    1928:	025c0261 	.word	0x025c0261
    192c:	02520257 	.word	0x02520257
    1930:	0248024d 	.word	0x0248024d
    1934:	023e0243 	.word	0x023e0243
    1938:	02340239 	.word	0x02340239
    193c:	022a022f 	.word	0x022a022f
    1940:	02200225 	.word	0x02200225
    1944:	0216021b 	.word	0x0216021b
    1948:	020c0211 	.word	0x020c0211
    194c:	02020207 	.word	0x02020207
    1950:	01f801fd 	.word	0x01f801fd
    1954:	01ee01f3 	.word	0x01ee01f3
    1958:	01e401e9 	.word	0x01e401e9
    195c:	01da01df 	.word	0x01da01df
    1960:	01d001d5 	.word	0x01d001d5
    1964:	01c601cb 	.word	0x01c601cb
    1968:	01bc01c1 	.word	0x01bc01c1
    196c:	01b201b7 	.word	0x01b201b7
    1970:	01a801ad 	.word	0x01a801ad
    1974:	019e01a3 	.word	0x019e01a3
    1978:	01940199 	.word	0x01940199
    197c:	018a018f 	.word	0x018a018f
    1980:	01800185 	.word	0x01800185
    1984:	0176017b 	.word	0x0176017b
    1988:	016c0171 	.word	0x016c0171
    198c:	01110167 	.word	0x01110167
    1990:	0107010c 	.word	0x0107010c
    1994:	00fd0102 	.word	0x00fd0102
    1998:	00f300f8 	.word	0x00f300f8
    199c:	00e900ee 	.word	0x00e900ee
    19a0:	00df00e4 	.word	0x00df00e4
    19a4:	00d500da 	.word	0x00d500da
    19a8:	00cb00d0 	.word	0x00cb00d0
    19ac:	00c100c6 	.word	0x00c100c6
    19b0:	00b700bc 	.word	0x00b700bc
    19b4:	00ad00b2 	.word	0x00ad00b2
    19b8:	00a300a8 	.word	0x00a300a8
    19bc:	0099009e 	.word	0x0099009e
    19c0:	008f0094 	.word	0x008f0094
    19c4:	0085008a 	.word	0x0085008a
    19c8:	007b0080 	.word	0x007b0080
    19cc:	00710076 	.word	0x00710076
    19d0:	0067006c 	.word	0x0067006c
    19d4:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    19d8:	495f      	ldr	r1, [pc, #380]	; (1b58 <print_palette(unsigned char)+0x264>)
    19da:	485d      	ldr	r0, [pc, #372]	; (1b50 <print_palette(unsigned char)+0x25c>)
    19dc:	f7fe fefe 	bl	7dc <Print::println(char const*)>
    19e0:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    19e2:	495e      	ldr	r1, [pc, #376]	; (1b5c <print_palette(unsigned char)+0x268>)
    19e4:	485a      	ldr	r0, [pc, #360]	; (1b50 <print_palette(unsigned char)+0x25c>)
    19e6:	f7fe fef9 	bl	7dc <Print::println(char const*)>
    19ea:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    19ec:	495c      	ldr	r1, [pc, #368]	; (1b60 <print_palette(unsigned char)+0x26c>)
    19ee:	4858      	ldr	r0, [pc, #352]	; (1b50 <print_palette(unsigned char)+0x25c>)
    19f0:	f7fe fef4 	bl	7dc <Print::println(char const*)>
    19f4:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    19f6:	495b      	ldr	r1, [pc, #364]	; (1b64 <print_palette(unsigned char)+0x270>)
    19f8:	4855      	ldr	r0, [pc, #340]	; (1b50 <print_palette(unsigned char)+0x25c>)
    19fa:	f7fe feef 	bl	7dc <Print::println(char const*)>
    19fe:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1a00:	4959      	ldr	r1, [pc, #356]	; (1b68 <print_palette(unsigned char)+0x274>)
    1a02:	4853      	ldr	r0, [pc, #332]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a04:	f7fe feea 	bl	7dc <Print::println(char const*)>
    1a08:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1a0a:	4958      	ldr	r1, [pc, #352]	; (1b6c <print_palette(unsigned char)+0x278>)
    1a0c:	4850      	ldr	r0, [pc, #320]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a0e:	f7fe fee5 	bl	7dc <Print::println(char const*)>
    1a12:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1a14:	4956      	ldr	r1, [pc, #344]	; (1b70 <print_palette(unsigned char)+0x27c>)
    1a16:	484e      	ldr	r0, [pc, #312]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a18:	f7fe fee0 	bl	7dc <Print::println(char const*)>
    1a1c:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1a1e:	4955      	ldr	r1, [pc, #340]	; (1b74 <print_palette(unsigned char)+0x280>)
    1a20:	484b      	ldr	r0, [pc, #300]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a22:	f7fe fedb 	bl	7dc <Print::println(char const*)>
    1a26:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1a28:	4953      	ldr	r1, [pc, #332]	; (1b78 <print_palette(unsigned char)+0x284>)
    1a2a:	4849      	ldr	r0, [pc, #292]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a2c:	f7fe fed6 	bl	7dc <Print::println(char const*)>
    1a30:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1a32:	4952      	ldr	r1, [pc, #328]	; (1b7c <print_palette(unsigned char)+0x288>)
    1a34:	4846      	ldr	r0, [pc, #280]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a36:	f7fe fed1 	bl	7dc <Print::println(char const*)>
    1a3a:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1a3c:	4950      	ldr	r1, [pc, #320]	; (1b80 <print_palette(unsigned char)+0x28c>)
    1a3e:	4844      	ldr	r0, [pc, #272]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a40:	f7fe fecc 	bl	7dc <Print::println(char const*)>
    1a44:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1a46:	494f      	ldr	r1, [pc, #316]	; (1b84 <print_palette(unsigned char)+0x290>)
    1a48:	4841      	ldr	r0, [pc, #260]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a4a:	f7fe fec7 	bl	7dc <Print::println(char const*)>
    1a4e:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1a50:	494d      	ldr	r1, [pc, #308]	; (1b88 <print_palette(unsigned char)+0x294>)
    1a52:	483f      	ldr	r0, [pc, #252]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a54:	f7fe fec2 	bl	7dc <Print::println(char const*)>
    1a58:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1a5a:	494c      	ldr	r1, [pc, #304]	; (1b8c <print_palette(unsigned char)+0x298>)
    1a5c:	483c      	ldr	r0, [pc, #240]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a5e:	f7fe febd 	bl	7dc <Print::println(char const*)>
    1a62:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1a64:	494a      	ldr	r1, [pc, #296]	; (1b90 <print_palette(unsigned char)+0x29c>)
    1a66:	483a      	ldr	r0, [pc, #232]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a68:	f7fe feb8 	bl	7dc <Print::println(char const*)>
    1a6c:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1a6e:	4949      	ldr	r1, [pc, #292]	; (1b94 <print_palette(unsigned char)+0x2a0>)
    1a70:	4837      	ldr	r0, [pc, #220]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a72:	f7fe feb3 	bl	7dc <Print::println(char const*)>
    1a76:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1a78:	4947      	ldr	r1, [pc, #284]	; (1b98 <print_palette(unsigned char)+0x2a4>)
    1a7a:	4835      	ldr	r0, [pc, #212]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a7c:	f7fe feae 	bl	7dc <Print::println(char const*)>
    1a80:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1a82:	4946      	ldr	r1, [pc, #280]	; (1b9c <print_palette(unsigned char)+0x2a8>)
    1a84:	4832      	ldr	r0, [pc, #200]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a86:	f7fe fea9 	bl	7dc <Print::println(char const*)>
    1a8a:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1a8c:	4944      	ldr	r1, [pc, #272]	; (1ba0 <print_palette(unsigned char)+0x2ac>)
    1a8e:	4830      	ldr	r0, [pc, #192]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a90:	f7fe fea4 	bl	7dc <Print::println(char const*)>
    1a94:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1a96:	4943      	ldr	r1, [pc, #268]	; (1ba4 <print_palette(unsigned char)+0x2b0>)
    1a98:	482d      	ldr	r0, [pc, #180]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1a9a:	f7fe fe9f 	bl	7dc <Print::println(char const*)>
    1a9e:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1aa0:	4941      	ldr	r1, [pc, #260]	; (1ba8 <print_palette(unsigned char)+0x2b4>)
    1aa2:	482b      	ldr	r0, [pc, #172]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1aa4:	f7fe fe9a 	bl	7dc <Print::println(char const*)>
    1aa8:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1aaa:	4940      	ldr	r1, [pc, #256]	; (1bac <print_palette(unsigned char)+0x2b8>)
    1aac:	4828      	ldr	r0, [pc, #160]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1aae:	f7fe fe95 	bl	7dc <Print::println(char const*)>
    1ab2:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1ab4:	493e      	ldr	r1, [pc, #248]	; (1bb0 <print_palette(unsigned char)+0x2bc>)
    1ab6:	4826      	ldr	r0, [pc, #152]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1ab8:	f7fe fe90 	bl	7dc <Print::println(char const*)>
    1abc:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1abe:	493d      	ldr	r1, [pc, #244]	; (1bb4 <print_palette(unsigned char)+0x2c0>)
    1ac0:	4823      	ldr	r0, [pc, #140]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1ac2:	f7fe fe8b 	bl	7dc <Print::println(char const*)>
    1ac6:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1ac8:	493b      	ldr	r1, [pc, #236]	; (1bb8 <print_palette(unsigned char)+0x2c4>)
    1aca:	4821      	ldr	r0, [pc, #132]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1acc:	f7fe fe86 	bl	7dc <Print::println(char const*)>
    1ad0:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1ad2:	493a      	ldr	r1, [pc, #232]	; (1bbc <print_palette(unsigned char)+0x2c8>)
    1ad4:	481e      	ldr	r0, [pc, #120]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1ad6:	f7fe fe81 	bl	7dc <Print::println(char const*)>
    1ada:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1adc:	4938      	ldr	r1, [pc, #224]	; (1bc0 <print_palette(unsigned char)+0x2cc>)
    1ade:	481c      	ldr	r0, [pc, #112]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1ae0:	f7fe fe7c 	bl	7dc <Print::println(char const*)>
    1ae4:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1ae6:	4937      	ldr	r1, [pc, #220]	; (1bc4 <print_palette(unsigned char)+0x2d0>)
    1ae8:	4819      	ldr	r0, [pc, #100]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1aea:	f7fe fe77 	bl	7dc <Print::println(char const*)>
    1aee:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1af0:	4935      	ldr	r1, [pc, #212]	; (1bc8 <print_palette(unsigned char)+0x2d4>)
    1af2:	4817      	ldr	r0, [pc, #92]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1af4:	f7fe fe72 	bl	7dc <Print::println(char const*)>
    1af8:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1afa:	4934      	ldr	r1, [pc, #208]	; (1bcc <print_palette(unsigned char)+0x2d8>)
    1afc:	4814      	ldr	r0, [pc, #80]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1afe:	f7fe fe6d 	bl	7dc <Print::println(char const*)>
    1b02:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1b04:	4932      	ldr	r1, [pc, #200]	; (1bd0 <print_palette(unsigned char)+0x2dc>)
    1b06:	4812      	ldr	r0, [pc, #72]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b08:	f7fe fe68 	bl	7dc <Print::println(char const*)>
    1b0c:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1b0e:	4931      	ldr	r1, [pc, #196]	; (1bd4 <print_palette(unsigned char)+0x2e0>)
    1b10:	480f      	ldr	r0, [pc, #60]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b12:	f7fe fe63 	bl	7dc <Print::println(char const*)>
    1b16:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1b18:	492f      	ldr	r1, [pc, #188]	; (1bd8 <print_palette(unsigned char)+0x2e4>)
    1b1a:	480d      	ldr	r0, [pc, #52]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b1c:	f7fe fe5e 	bl	7dc <Print::println(char const*)>
    1b20:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1b22:	492e      	ldr	r1, [pc, #184]	; (1bdc <print_palette(unsigned char)+0x2e8>)
    1b24:	480a      	ldr	r0, [pc, #40]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b26:	f7fe fe59 	bl	7dc <Print::println(char const*)>
    1b2a:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1b2c:	492c      	ldr	r1, [pc, #176]	; (1be0 <print_palette(unsigned char)+0x2ec>)
    1b2e:	4808      	ldr	r0, [pc, #32]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b30:	f7fe fe54 	bl	7dc <Print::println(char const*)>
    1b34:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1b36:	492b      	ldr	r1, [pc, #172]	; (1be4 <print_palette(unsigned char)+0x2f0>)
    1b38:	4805      	ldr	r0, [pc, #20]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b3a:	f7fe fe4f 	bl	7dc <Print::println(char const*)>
    1b3e:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1b40:	4929      	ldr	r1, [pc, #164]	; (1be8 <print_palette(unsigned char)+0x2f4>)
    1b42:	4803      	ldr	r0, [pc, #12]	; (1b50 <print_palette(unsigned char)+0x25c>)
    1b44:	f7fe fe4a 	bl	7dc <Print::println(char const*)>
    1b48:	bd10      	pop	{r4, pc}
    1b4a:	bf00      	nop
    1b4c:	0000c934 	.word	0x0000c934
    1b50:	1fff8764 	.word	0x1fff8764
    1b54:	0000c948 	.word	0x0000c948
    1b58:	0000cedc 	.word	0x0000cedc
    1b5c:	0000ced0 	.word	0x0000ced0
    1b60:	0000cec0 	.word	0x0000cec0
    1b64:	0000ceb0 	.word	0x0000ceb0
    1b68:	0000ce9c 	.word	0x0000ce9c
    1b6c:	0000ce84 	.word	0x0000ce84
    1b70:	0000ce6c 	.word	0x0000ce6c
    1b74:	0000ce5c 	.word	0x0000ce5c
    1b78:	0000ce44 	.word	0x0000ce44
    1b7c:	0000ce38 	.word	0x0000ce38
    1b80:	0000ce2c 	.word	0x0000ce2c
    1b84:	0000ce14 	.word	0x0000ce14
    1b88:	0000ce08 	.word	0x0000ce08
    1b8c:	0000cdfc 	.word	0x0000cdfc
    1b90:	0000cdf0 	.word	0x0000cdf0
    1b94:	0000cde4 	.word	0x0000cde4
    1b98:	0000cdd4 	.word	0x0000cdd4
    1b9c:	0000cdc8 	.word	0x0000cdc8
    1ba0:	0000cdb4 	.word	0x0000cdb4
    1ba4:	0000cda8 	.word	0x0000cda8
    1ba8:	0000cd98 	.word	0x0000cd98
    1bac:	0000cd8c 	.word	0x0000cd8c
    1bb0:	0000cd80 	.word	0x0000cd80
    1bb4:	0000cd78 	.word	0x0000cd78
    1bb8:	0000cd64 	.word	0x0000cd64
    1bbc:	0000cd54 	.word	0x0000cd54
    1bc0:	0000cd40 	.word	0x0000cd40
    1bc4:	0000cd34 	.word	0x0000cd34
    1bc8:	0000cd28 	.word	0x0000cd28
    1bcc:	0000cd1c 	.word	0x0000cd1c
    1bd0:	0000cd0c 	.word	0x0000cd0c
    1bd4:	0000ccf8 	.word	0x0000ccf8
    1bd8:	0000ccec 	.word	0x0000ccec
    1bdc:	0000ccdc 	.word	0x0000ccdc
    1be0:	0000ccd0 	.word	0x0000ccd0
    1be4:	0000ccc0 	.word	0x0000ccc0
    1be8:	0000ccb4 	.word	0x0000ccb4
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1bec:	498e      	ldr	r1, [pc, #568]	; (1e28 <print_palette(unsigned char)+0x534>)
    1bee:	488f      	ldr	r0, [pc, #572]	; (1e2c <print_palette(unsigned char)+0x538>)
    1bf0:	f7fe fdf4 	bl	7dc <Print::println(char const*)>
    1bf4:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1bf6:	498e      	ldr	r1, [pc, #568]	; (1e30 <print_palette(unsigned char)+0x53c>)
    1bf8:	488c      	ldr	r0, [pc, #560]	; (1e2c <print_palette(unsigned char)+0x538>)
    1bfa:	f7fe fdef 	bl	7dc <Print::println(char const*)>
    1bfe:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1c00:	498c      	ldr	r1, [pc, #560]	; (1e34 <print_palette(unsigned char)+0x540>)
    1c02:	488a      	ldr	r0, [pc, #552]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c04:	f7fe fdea 	bl	7dc <Print::println(char const*)>
    1c08:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1c0a:	498b      	ldr	r1, [pc, #556]	; (1e38 <print_palette(unsigned char)+0x544>)
    1c0c:	4887      	ldr	r0, [pc, #540]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c0e:	f7fe fde5 	bl	7dc <Print::println(char const*)>
    1c12:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1c14:	4989      	ldr	r1, [pc, #548]	; (1e3c <print_palette(unsigned char)+0x548>)
    1c16:	4885      	ldr	r0, [pc, #532]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c18:	f7fe fde0 	bl	7dc <Print::println(char const*)>
    1c1c:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1c1e:	4988      	ldr	r1, [pc, #544]	; (1e40 <print_palette(unsigned char)+0x54c>)
    1c20:	4882      	ldr	r0, [pc, #520]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c22:	f7fe fddb 	bl	7dc <Print::println(char const*)>
    1c26:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1c28:	4986      	ldr	r1, [pc, #536]	; (1e44 <print_palette(unsigned char)+0x550>)
    1c2a:	4880      	ldr	r0, [pc, #512]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c2c:	f7fe fdd6 	bl	7dc <Print::println(char const*)>
    1c30:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1c32:	4985      	ldr	r1, [pc, #532]	; (1e48 <print_palette(unsigned char)+0x554>)
    1c34:	487d      	ldr	r0, [pc, #500]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c36:	f7fe fdd1 	bl	7dc <Print::println(char const*)>
    1c3a:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1c3c:	4983      	ldr	r1, [pc, #524]	; (1e4c <print_palette(unsigned char)+0x558>)
    1c3e:	487b      	ldr	r0, [pc, #492]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c40:	f7fe fdcc 	bl	7dc <Print::println(char const*)>
    1c44:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1c46:	4982      	ldr	r1, [pc, #520]	; (1e50 <print_palette(unsigned char)+0x55c>)
    1c48:	4878      	ldr	r0, [pc, #480]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c4a:	f7fe fdc7 	bl	7dc <Print::println(char const*)>
    1c4e:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1c50:	4980      	ldr	r1, [pc, #512]	; (1e54 <print_palette(unsigned char)+0x560>)
    1c52:	4876      	ldr	r0, [pc, #472]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c54:	f7fe fdc2 	bl	7dc <Print::println(char const*)>
    1c58:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1c5a:	497f      	ldr	r1, [pc, #508]	; (1e58 <print_palette(unsigned char)+0x564>)
    1c5c:	4873      	ldr	r0, [pc, #460]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c5e:	f7fe fdbd 	bl	7dc <Print::println(char const*)>
    1c62:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1c64:	497d      	ldr	r1, [pc, #500]	; (1e5c <print_palette(unsigned char)+0x568>)
    1c66:	4871      	ldr	r0, [pc, #452]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c68:	f7fe fdb8 	bl	7dc <Print::println(char const*)>
    1c6c:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1c6e:	497c      	ldr	r1, [pc, #496]	; (1e60 <print_palette(unsigned char)+0x56c>)
    1c70:	486e      	ldr	r0, [pc, #440]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c72:	f7fe fdb3 	bl	7dc <Print::println(char const*)>
    1c76:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1c78:	497a      	ldr	r1, [pc, #488]	; (1e64 <print_palette(unsigned char)+0x570>)
    1c7a:	486c      	ldr	r0, [pc, #432]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c7c:	f7fe fdae 	bl	7dc <Print::println(char const*)>
    1c80:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1c82:	4979      	ldr	r1, [pc, #484]	; (1e68 <print_palette(unsigned char)+0x574>)
    1c84:	4869      	ldr	r0, [pc, #420]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c86:	f7fe fda9 	bl	7dc <Print::println(char const*)>
    1c8a:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1c8c:	4977      	ldr	r1, [pc, #476]	; (1e6c <print_palette(unsigned char)+0x578>)
    1c8e:	4867      	ldr	r0, [pc, #412]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c90:	f7fe fda4 	bl	7dc <Print::println(char const*)>
    1c94:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1c96:	4976      	ldr	r1, [pc, #472]	; (1e70 <print_palette(unsigned char)+0x57c>)
    1c98:	4864      	ldr	r0, [pc, #400]	; (1e2c <print_palette(unsigned char)+0x538>)
    1c9a:	f7fe fd9f 	bl	7dc <Print::println(char const*)>
    1c9e:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1ca0:	4974      	ldr	r1, [pc, #464]	; (1e74 <print_palette(unsigned char)+0x580>)
    1ca2:	4862      	ldr	r0, [pc, #392]	; (1e2c <print_palette(unsigned char)+0x538>)
    1ca4:	f7fe fd9a 	bl	7dc <Print::println(char const*)>
    1ca8:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1caa:	4973      	ldr	r1, [pc, #460]	; (1e78 <print_palette(unsigned char)+0x584>)
    1cac:	485f      	ldr	r0, [pc, #380]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cae:	f7fe fd95 	bl	7dc <Print::println(char const*)>
    1cb2:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1cb4:	4971      	ldr	r1, [pc, #452]	; (1e7c <print_palette(unsigned char)+0x588>)
    1cb6:	485d      	ldr	r0, [pc, #372]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cb8:	f7fe fd90 	bl	7dc <Print::println(char const*)>
    1cbc:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1cbe:	4970      	ldr	r1, [pc, #448]	; (1e80 <print_palette(unsigned char)+0x58c>)
    1cc0:	485a      	ldr	r0, [pc, #360]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cc2:	f7fe fd8b 	bl	7dc <Print::println(char const*)>
    1cc6:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1cc8:	496e      	ldr	r1, [pc, #440]	; (1e84 <print_palette(unsigned char)+0x590>)
    1cca:	4858      	ldr	r0, [pc, #352]	; (1e2c <print_palette(unsigned char)+0x538>)
    1ccc:	f7fe fd86 	bl	7dc <Print::println(char const*)>
    1cd0:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1cd2:	496d      	ldr	r1, [pc, #436]	; (1e88 <print_palette(unsigned char)+0x594>)
    1cd4:	4855      	ldr	r0, [pc, #340]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cd6:	f7fe fd81 	bl	7dc <Print::println(char const*)>
    1cda:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1cdc:	496b      	ldr	r1, [pc, #428]	; (1e8c <print_palette(unsigned char)+0x598>)
    1cde:	4853      	ldr	r0, [pc, #332]	; (1e2c <print_palette(unsigned char)+0x538>)
    1ce0:	f7fe fd7c 	bl	7dc <Print::println(char const*)>
    1ce4:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1ce6:	496a      	ldr	r1, [pc, #424]	; (1e90 <print_palette(unsigned char)+0x59c>)
    1ce8:	4850      	ldr	r0, [pc, #320]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cea:	f7fe fd77 	bl	7dc <Print::println(char const*)>
    1cee:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1cf0:	4968      	ldr	r1, [pc, #416]	; (1e94 <print_palette(unsigned char)+0x5a0>)
    1cf2:	484e      	ldr	r0, [pc, #312]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cf4:	f7fe fd72 	bl	7dc <Print::println(char const*)>
    1cf8:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1cfa:	4967      	ldr	r1, [pc, #412]	; (1e98 <print_palette(unsigned char)+0x5a4>)
    1cfc:	484b      	ldr	r0, [pc, #300]	; (1e2c <print_palette(unsigned char)+0x538>)
    1cfe:	f7fe fd6d 	bl	7dc <Print::println(char const*)>
    1d02:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1d04:	4965      	ldr	r1, [pc, #404]	; (1e9c <print_palette(unsigned char)+0x5a8>)
    1d06:	4849      	ldr	r0, [pc, #292]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d08:	f7fe fd68 	bl	7dc <Print::println(char const*)>
    1d0c:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1d0e:	4964      	ldr	r1, [pc, #400]	; (1ea0 <print_palette(unsigned char)+0x5ac>)
    1d10:	4846      	ldr	r0, [pc, #280]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d12:	f7fe fd63 	bl	7dc <Print::println(char const*)>
    1d16:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1d18:	4962      	ldr	r1, [pc, #392]	; (1ea4 <print_palette(unsigned char)+0x5b0>)
    1d1a:	4844      	ldr	r0, [pc, #272]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d1c:	f7fe fd5e 	bl	7dc <Print::println(char const*)>
    1d20:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1d22:	4961      	ldr	r1, [pc, #388]	; (1ea8 <print_palette(unsigned char)+0x5b4>)
    1d24:	4841      	ldr	r0, [pc, #260]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d26:	f7fe fd59 	bl	7dc <Print::println(char const*)>
    1d2a:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1d2c:	495f      	ldr	r1, [pc, #380]	; (1eac <print_palette(unsigned char)+0x5b8>)
    1d2e:	483f      	ldr	r0, [pc, #252]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d30:	f7fe fd54 	bl	7dc <Print::println(char const*)>
    1d34:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1d36:	495e      	ldr	r1, [pc, #376]	; (1eb0 <print_palette(unsigned char)+0x5bc>)
    1d38:	483c      	ldr	r0, [pc, #240]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d3a:	f7fe fd4f 	bl	7dc <Print::println(char const*)>
    1d3e:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1d40:	495c      	ldr	r1, [pc, #368]	; (1eb4 <print_palette(unsigned char)+0x5c0>)
    1d42:	483a      	ldr	r0, [pc, #232]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d44:	f7fe fd4a 	bl	7dc <Print::println(char const*)>
    1d48:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1d4a:	495b      	ldr	r1, [pc, #364]	; (1eb8 <print_palette(unsigned char)+0x5c4>)
    1d4c:	4837      	ldr	r0, [pc, #220]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d4e:	f7fe fd45 	bl	7dc <Print::println(char const*)>
    1d52:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1d54:	4959      	ldr	r1, [pc, #356]	; (1ebc <print_palette(unsigned char)+0x5c8>)
    1d56:	4835      	ldr	r0, [pc, #212]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d58:	f7fe fd40 	bl	7dc <Print::println(char const*)>
    1d5c:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    1d5e:	4958      	ldr	r1, [pc, #352]	; (1ec0 <print_palette(unsigned char)+0x5cc>)
    1d60:	4832      	ldr	r0, [pc, #200]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d62:	f7fe fd3b 	bl	7dc <Print::println(char const*)>
    1d66:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    1d68:	4956      	ldr	r1, [pc, #344]	; (1ec4 <print_palette(unsigned char)+0x5d0>)
    1d6a:	4830      	ldr	r0, [pc, #192]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d6c:	f7fe fd36 	bl	7dc <Print::println(char const*)>
    1d70:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    1d72:	4955      	ldr	r1, [pc, #340]	; (1ec8 <print_palette(unsigned char)+0x5d4>)
    1d74:	482d      	ldr	r0, [pc, #180]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d76:	f7fe fd31 	bl	7dc <Print::println(char const*)>
    1d7a:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    1d7c:	4953      	ldr	r1, [pc, #332]	; (1ecc <print_palette(unsigned char)+0x5d8>)
    1d7e:	482b      	ldr	r0, [pc, #172]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d80:	f7fe fd2c 	bl	7dc <Print::println(char const*)>
    1d84:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    1d86:	4952      	ldr	r1, [pc, #328]	; (1ed0 <print_palette(unsigned char)+0x5dc>)
    1d88:	4828      	ldr	r0, [pc, #160]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d8a:	f7fe fd27 	bl	7dc <Print::println(char const*)>
    1d8e:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    1d90:	4950      	ldr	r1, [pc, #320]	; (1ed4 <print_palette(unsigned char)+0x5e0>)
    1d92:	4826      	ldr	r0, [pc, #152]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d94:	f7fe fd22 	bl	7dc <Print::println(char const*)>
    1d98:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    1d9a:	494f      	ldr	r1, [pc, #316]	; (1ed8 <print_palette(unsigned char)+0x5e4>)
    1d9c:	4823      	ldr	r0, [pc, #140]	; (1e2c <print_palette(unsigned char)+0x538>)
    1d9e:	f7fe fd1d 	bl	7dc <Print::println(char const*)>
    1da2:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    1da4:	494d      	ldr	r1, [pc, #308]	; (1edc <print_palette(unsigned char)+0x5e8>)
    1da6:	4821      	ldr	r0, [pc, #132]	; (1e2c <print_palette(unsigned char)+0x538>)
    1da8:	f7fe fd18 	bl	7dc <Print::println(char const*)>
    1dac:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    1dae:	494c      	ldr	r1, [pc, #304]	; (1ee0 <print_palette(unsigned char)+0x5ec>)
    1db0:	481e      	ldr	r0, [pc, #120]	; (1e2c <print_palette(unsigned char)+0x538>)
    1db2:	f7fe fd13 	bl	7dc <Print::println(char const*)>
    1db6:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    1db8:	494a      	ldr	r1, [pc, #296]	; (1ee4 <print_palette(unsigned char)+0x5f0>)
    1dba:	481c      	ldr	r0, [pc, #112]	; (1e2c <print_palette(unsigned char)+0x538>)
    1dbc:	f7fe fd0e 	bl	7dc <Print::println(char const*)>
    1dc0:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    1dc2:	4949      	ldr	r1, [pc, #292]	; (1ee8 <print_palette(unsigned char)+0x5f4>)
    1dc4:	4819      	ldr	r0, [pc, #100]	; (1e2c <print_palette(unsigned char)+0x538>)
    1dc6:	f7fe fd09 	bl	7dc <Print::println(char const*)>
    1dca:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    1dcc:	4947      	ldr	r1, [pc, #284]	; (1eec <print_palette(unsigned char)+0x5f8>)
    1dce:	4817      	ldr	r0, [pc, #92]	; (1e2c <print_palette(unsigned char)+0x538>)
    1dd0:	f7fe fd04 	bl	7dc <Print::println(char const*)>
    1dd4:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    1dd6:	4946      	ldr	r1, [pc, #280]	; (1ef0 <print_palette(unsigned char)+0x5fc>)
    1dd8:	4814      	ldr	r0, [pc, #80]	; (1e2c <print_palette(unsigned char)+0x538>)
    1dda:	f7fe fcff 	bl	7dc <Print::println(char const*)>
    1dde:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    1de0:	4944      	ldr	r1, [pc, #272]	; (1ef4 <print_palette(unsigned char)+0x600>)
    1de2:	4812      	ldr	r0, [pc, #72]	; (1e2c <print_palette(unsigned char)+0x538>)
    1de4:	f7fe fcfa 	bl	7dc <Print::println(char const*)>
    1de8:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    1dea:	4943      	ldr	r1, [pc, #268]	; (1ef8 <print_palette(unsigned char)+0x604>)
    1dec:	480f      	ldr	r0, [pc, #60]	; (1e2c <print_palette(unsigned char)+0x538>)
    1dee:	f7fe fcf5 	bl	7dc <Print::println(char const*)>
    1df2:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    1df4:	4941      	ldr	r1, [pc, #260]	; (1efc <print_palette(unsigned char)+0x608>)
    1df6:	480d      	ldr	r0, [pc, #52]	; (1e2c <print_palette(unsigned char)+0x538>)
    1df8:	f7fe fcf0 	bl	7dc <Print::println(char const*)>
    1dfc:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    1dfe:	4940      	ldr	r1, [pc, #256]	; (1f00 <print_palette(unsigned char)+0x60c>)
    1e00:	480a      	ldr	r0, [pc, #40]	; (1e2c <print_palette(unsigned char)+0x538>)
    1e02:	f7fe fceb 	bl	7dc <Print::println(char const*)>
    1e06:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    1e08:	493e      	ldr	r1, [pc, #248]	; (1f04 <print_palette(unsigned char)+0x610>)
    1e0a:	4808      	ldr	r0, [pc, #32]	; (1e2c <print_palette(unsigned char)+0x538>)
    1e0c:	f7fe fce6 	bl	7dc <Print::println(char const*)>
    1e10:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    1e12:	493d      	ldr	r1, [pc, #244]	; (1f08 <print_palette(unsigned char)+0x614>)
    1e14:	4805      	ldr	r0, [pc, #20]	; (1e2c <print_palette(unsigned char)+0x538>)
    1e16:	f7fe fce1 	bl	7dc <Print::println(char const*)>
    1e1a:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    1e1c:	493b      	ldr	r1, [pc, #236]	; (1f0c <print_palette(unsigned char)+0x618>)
    1e1e:	4803      	ldr	r0, [pc, #12]	; (1e2c <print_palette(unsigned char)+0x538>)
    1e20:	f7fe fcdc 	bl	7dc <Print::println(char const*)>
    1e24:	bd10      	pop	{r4, pc}
    1e26:	bf00      	nop
    1e28:	0000cca0 	.word	0x0000cca0
    1e2c:	1fff8764 	.word	0x1fff8764
    1e30:	0000cc90 	.word	0x0000cc90
    1e34:	0000cc84 	.word	0x0000cc84
    1e38:	0000cc78 	.word	0x0000cc78
    1e3c:	0000cc6c 	.word	0x0000cc6c
    1e40:	0000cc58 	.word	0x0000cc58
    1e44:	0000cc4c 	.word	0x0000cc4c
    1e48:	0000cc40 	.word	0x0000cc40
    1e4c:	0000cc34 	.word	0x0000cc34
    1e50:	0000cc1c 	.word	0x0000cc1c
    1e54:	0000cc14 	.word	0x0000cc14
    1e58:	0000ccac 	.word	0x0000ccac
    1e5c:	0000cc08 	.word	0x0000cc08
    1e60:	0000cbfc 	.word	0x0000cbfc
    1e64:	0000cbe8 	.word	0x0000cbe8
    1e68:	0000cbd4 	.word	0x0000cbd4
    1e6c:	0000cbc4 	.word	0x0000cbc4
    1e70:	0000cbb8 	.word	0x0000cbb8
    1e74:	0000cbac 	.word	0x0000cbac
    1e78:	0000cba0 	.word	0x0000cba0
    1e7c:	0000cb94 	.word	0x0000cb94
    1e80:	0000cb88 	.word	0x0000cb88
    1e84:	0000cb7c 	.word	0x0000cb7c
    1e88:	0000cb70 	.word	0x0000cb70
    1e8c:	0000cb64 	.word	0x0000cb64
    1e90:	0000cb58 	.word	0x0000cb58
    1e94:	0000cb4c 	.word	0x0000cb4c
    1e98:	0000cb40 	.word	0x0000cb40
    1e9c:	0000cb30 	.word	0x0000cb30
    1ea0:	0000cb1c 	.word	0x0000cb1c
    1ea4:	0000cb00 	.word	0x0000cb00
    1ea8:	0000cae8 	.word	0x0000cae8
    1eac:	0000cacc 	.word	0x0000cacc
    1eb0:	0000cabc 	.word	0x0000cabc
    1eb4:	0000caac 	.word	0x0000caac
    1eb8:	0000ca98 	.word	0x0000ca98
    1ebc:	0000ca88 	.word	0x0000ca88
    1ec0:	0000ca80 	.word	0x0000ca80
    1ec4:	0000ca78 	.word	0x0000ca78
    1ec8:	0000ca60 	.word	0x0000ca60
    1ecc:	0000ca50 	.word	0x0000ca50
    1ed0:	0000ca48 	.word	0x0000ca48
    1ed4:	0000ca38 	.word	0x0000ca38
    1ed8:	0000ca28 	.word	0x0000ca28
    1edc:	0000ca18 	.word	0x0000ca18
    1ee0:	0000ca04 	.word	0x0000ca04
    1ee4:	0000c9f0 	.word	0x0000c9f0
    1ee8:	0000c9dc 	.word	0x0000c9dc
    1eec:	0000c9c4 	.word	0x0000c9c4
    1ef0:	0000c9ac 	.word	0x0000c9ac
    1ef4:	0000c99c 	.word	0x0000c99c
    1ef8:	0000c988 	.word	0x0000c988
    1efc:	0000c974 	.word	0x0000c974
    1f00:	0000c964 	.word	0x0000c964
    1f04:	0000c958 	.word	0x0000c958
    1f08:	0000c94c 	.word	0x0000c94c
    1f0c:	0000cef4 	.word	0x0000cef4

00001f10 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    1f10:	b538      	push	{r3, r4, r5, lr}
    1f12:	2100      	movs	r1, #0
    1f14:	4604      	mov	r4, r0
    1f16:	48ae      	ldr	r0, [pc, #696]	; (21d0 <LEDDebug(LEDStruct&)+0x2c0>)
    1f18:	f008 fe4a 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f1c:	48ad      	ldr	r0, [pc, #692]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f1e:	f009 f84b 	bl	afb8 <Print::println()>
    1f22:	2122      	movs	r1, #34	; 0x22
    1f24:	48ac      	ldr	r0, [pc, #688]	; (21d8 <LEDDebug(LEDStruct&)+0x2c8>)
    1f26:	f008 fe43 	bl	abb0 <usb_serial_write>
    1f2a:	48aa      	ldr	r0, [pc, #680]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f2c:	f009 f844 	bl	afb8 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    1f30:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    1f34:	2b00      	cmp	r3, #0
    1f36:	f000 809d 	beq.w	2074 <LEDDebug(LEDStruct&)+0x164>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    1f3a:	2b01      	cmp	r3, #1
    1f3c:	f000 84a7 	beq.w	288e <LEDDebug(LEDStruct&)+0x97e>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    1f40:	2b02      	cmp	r3, #2
    1f42:	f000 84aa 	beq.w	289a <LEDDebug(LEDStruct&)+0x98a>
    1f46:	2113      	movs	r1, #19
    1f48:	48a4      	ldr	r0, [pc, #656]	; (21dc <LEDDebug(LEDStruct&)+0x2cc>)
    1f4a:	f008 fe31 	bl	abb0 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    1f4e:	4ba4      	ldr	r3, [pc, #656]	; (21e0 <LEDDebug(LEDStruct&)+0x2d0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1f50:	48a0      	ldr	r0, [pc, #640]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f52:	7819      	ldrb	r1, [r3, #0]
    1f54:	220a      	movs	r2, #10
    1f56:	2300      	movs	r3, #0
    1f58:	f009 f83e 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f5c:	2103      	movs	r1, #3
    1f5e:	48a1      	ldr	r0, [pc, #644]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    1f60:	f008 fe26 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f64:	489b      	ldr	r0, [pc, #620]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f66:	f009 f827 	bl	afb8 <Print::println()>
    1f6a:	2113      	movs	r1, #19
    1f6c:	489e      	ldr	r0, [pc, #632]	; (21e8 <LEDDebug(LEDStruct&)+0x2d8>)
    1f6e:	f008 fe1f 	bl	abb0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1f72:	2300      	movs	r3, #0
    1f74:	220a      	movs	r2, #10
    1f76:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    1f7a:	4896      	ldr	r0, [pc, #600]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f7c:	f009 f82c 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f80:	2103      	movs	r1, #3
    1f82:	4898      	ldr	r0, [pc, #608]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    1f84:	f008 fe14 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f88:	4892      	ldr	r0, [pc, #584]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f8a:	f009 f815 	bl	afb8 <Print::println()>
    1f8e:	2111      	movs	r1, #17
    1f90:	4896      	ldr	r0, [pc, #600]	; (21ec <LEDDebug(LEDStruct&)+0x2dc>)
    1f92:	f008 fe0d 	bl	abb0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1f96:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    1f9a:	488e      	ldr	r0, [pc, #568]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1f9c:	f009 f85c 	bl	b058 <Print::print(long)>
    1fa0:	2103      	movs	r1, #3
    1fa2:	4890      	ldr	r0, [pc, #576]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    1fa4:	f008 fe04 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1fa8:	488a      	ldr	r0, [pc, #552]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1faa:	f009 f805 	bl	afb8 <Print::println()>
    1fae:	2114      	movs	r1, #20
    1fb0:	488f      	ldr	r0, [pc, #572]	; (21f0 <LEDDebug(LEDStruct&)+0x2e0>)
    1fb2:	f008 fdfd 	bl	abb0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1fb6:	2300      	movs	r3, #0
    1fb8:	220a      	movs	r2, #10
    1fba:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    1fbe:	4885      	ldr	r0, [pc, #532]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1fc0:	f009 f80a 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1fc4:	2103      	movs	r1, #3
    1fc6:	4887      	ldr	r0, [pc, #540]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    1fc8:	f008 fdf2 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1fcc:	4881      	ldr	r0, [pc, #516]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1fce:	f008 fff3 	bl	afb8 <Print::println()>
    1fd2:	2115      	movs	r1, #21
    1fd4:	4887      	ldr	r0, [pc, #540]	; (21f4 <LEDDebug(LEDStruct&)+0x2e4>)
    1fd6:	f008 fdeb 	bl	abb0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1fda:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    1fde:	487d      	ldr	r0, [pc, #500]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1fe0:	f009 f83a 	bl	b058 <Print::print(long)>
    1fe4:	2103      	movs	r1, #3
    1fe6:	487f      	ldr	r0, [pc, #508]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    1fe8:	f008 fde2 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1fec:	4879      	ldr	r0, [pc, #484]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    1fee:	f008 ffe3 	bl	afb8 <Print::println()>
    1ff2:	2111      	movs	r1, #17
    1ff4:	4880      	ldr	r0, [pc, #512]	; (21f8 <LEDDebug(LEDStruct&)+0x2e8>)
    1ff6:	f008 fddb 	bl	abb0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1ffa:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    1ffe:	4875      	ldr	r0, [pc, #468]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2000:	f009 f82a 	bl	b058 <Print::print(long)>
    2004:	2103      	movs	r1, #3
    2006:	4877      	ldr	r0, [pc, #476]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    2008:	f008 fdd2 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    200c:	4871      	ldr	r0, [pc, #452]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    200e:	f008 ffd3 	bl	afb8 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2012:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    2016:	bb43      	cbnz	r3, 206a <LEDDebug(LEDStruct&)+0x15a>
    2018:	2122      	movs	r1, #34	; 0x22
    201a:	486f      	ldr	r0, [pc, #444]	; (21d8 <LEDDebug(LEDStruct&)+0x2c8>)
    201c:	f008 fdc8 	bl	abb0 <usb_serial_write>
    2020:	486c      	ldr	r0, [pc, #432]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2022:	f008 ffc9 	bl	afb8 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    2026:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    202a:	2b1a      	cmp	r3, #26
    202c:	f200 8422 	bhi.w	2874 <LEDDebug(LEDStruct&)+0x964>
    2030:	e8df f013 	tbh	[pc, r3, lsl #1]
    2034:	04200060 	.word	0x04200060
    2038:	04200420 	.word	0x04200420
    203c:	01020420 	.word	0x01020420
    2040:	04200420 	.word	0x04200420
    2044:	013b0420 	.word	0x013b0420
    2048:	04200420 	.word	0x04200420
    204c:	04200420 	.word	0x04200420
    2050:	04200420 	.word	0x04200420
    2054:	0155014a 	.word	0x0155014a
    2058:	01590157 	.word	0x01590157
    205c:	0226017a 	.word	0x0226017a
    2060:	032102d4 	.word	0x032102d4
    2064:	03ca0366 	.word	0x03ca0366
    2068:	0028      	.short	0x0028
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    206a:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    206e:	f7ff fc41 	bl	18f4 <print_palette(unsigned char)>
    2072:	e7d1      	b.n	2018 <LEDDebug(LEDStruct&)+0x108>
    2074:	2122      	movs	r1, #34	; 0x22
    2076:	4861      	ldr	r0, [pc, #388]	; (21fc <LEDDebug(LEDStruct&)+0x2ec>)
    2078:	f008 fd9a 	bl	abb0 <usb_serial_write>
    207c:	4855      	ldr	r0, [pc, #340]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    207e:	f008 ff9b 	bl	afb8 <Print::println()>
    2082:	e760      	b.n	1f46 <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2084:	495e      	ldr	r1, [pc, #376]	; (2200 <LEDDebug(LEDStruct&)+0x2f0>)
    2086:	4853      	ldr	r0, [pc, #332]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2088:	f7fe fba8 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    208c:	495d      	ldr	r1, [pc, #372]	; (2204 <LEDDebug(LEDStruct&)+0x2f4>)
    208e:	4851      	ldr	r0, [pc, #324]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2090:	f7fe fb96 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2094:	2300      	movs	r3, #0
    2096:	220a      	movs	r2, #10
    2098:	f894 1766 	ldrb.w	r1, [r4, #1894]	; 0x766
    209c:	484d      	ldr	r0, [pc, #308]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    209e:	f008 ff9b 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    20a2:	4950      	ldr	r1, [pc, #320]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    20a4:	484b      	ldr	r0, [pc, #300]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20a6:	f7fe fb99 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    20aa:	4957      	ldr	r1, [pc, #348]	; (2208 <LEDDebug(LEDStruct&)+0x2f8>)
    20ac:	4849      	ldr	r0, [pc, #292]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20ae:	f7fe fb87 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    20b2:	2300      	movs	r3, #0
    20b4:	220a      	movs	r2, #10
    20b6:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    20ba:	4846      	ldr	r0, [pc, #280]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20bc:	f008 ff8c 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    20c0:	4948      	ldr	r1, [pc, #288]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    20c2:	4844      	ldr	r0, [pc, #272]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20c4:	f7fe fb8a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    20c8:	4950      	ldr	r1, [pc, #320]	; (220c <LEDDebug(LEDStruct&)+0x2fc>)
    20ca:	4842      	ldr	r0, [pc, #264]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20cc:	f7fe fb78 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    20d0:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    20d4:	483f      	ldr	r0, [pc, #252]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20d6:	f008 ffbf 	bl	b058 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    20da:	4942      	ldr	r1, [pc, #264]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    20dc:	483d      	ldr	r0, [pc, #244]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20de:	f7fe fb7d 	bl	7dc <Print::println(char const*)>
    20e2:	2123      	movs	r1, #35	; 0x23
    20e4:	484a      	ldr	r0, [pc, #296]	; (2210 <LEDDebug(LEDStruct&)+0x300>)
    20e6:	f008 fd63 	bl	abb0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20ea:	483a      	ldr	r0, [pc, #232]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    20ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    20f0:	f008 bf62 	b.w	afb8 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("==============JUGGLE=============="); // 34 characters
    20f4:	4947      	ldr	r1, [pc, #284]	; (2214 <LEDDebug(LEDStruct&)+0x304>)
    20f6:	4837      	ldr	r0, [pc, #220]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    20f8:	f7fe fb70 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    20fc:	4946      	ldr	r1, [pc, #280]	; (2218 <LEDDebug(LEDStruct&)+0x308>)
    20fe:	4835      	ldr	r0, [pc, #212]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2100:	f7fe fb5e 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2104:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2108:	4832      	ldr	r0, [pc, #200]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    210a:	f008 ffa5 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    210e:	4935      	ldr	r1, [pc, #212]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    2110:	4830      	ldr	r0, [pc, #192]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2112:	f7fe fb63 	bl	7dc <Print::println(char const*)>
    2116:	2111      	movs	r1, #17
    2118:	4840      	ldr	r0, [pc, #256]	; (221c <LEDDebug(LEDStruct&)+0x30c>)
    211a:	f008 fd49 	bl	abb0 <usb_serial_write>
    211e:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2122:	482c      	ldr	r0, [pc, #176]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2124:	f008 ff98 	bl	b058 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2128:	492e      	ldr	r1, [pc, #184]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    212a:	482a      	ldr	r0, [pc, #168]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    212c:	f7fe fb56 	bl	7dc <Print::println(char const*)>
    2130:	2110      	movs	r1, #16
    2132:	483b      	ldr	r0, [pc, #236]	; (2220 <LEDDebug(LEDStruct&)+0x310>)
    2134:	f008 fd3c 	bl	abb0 <usb_serial_write>
    2138:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    213c:	4825      	ldr	r0, [pc, #148]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    213e:	f008 ff8b 	bl	b058 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    2142:	4928      	ldr	r1, [pc, #160]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    2144:	4823      	ldr	r0, [pc, #140]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2146:	f7fe fb49 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    214a:	4936      	ldr	r1, [pc, #216]	; (2224 <LEDDebug(LEDStruct&)+0x314>)
    214c:	4821      	ldr	r0, [pc, #132]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    214e:	f7fe fb37 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2152:	2300      	movs	r3, #0
    2154:	220a      	movs	r2, #10
    2156:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    215a:	481e      	ldr	r0, [pc, #120]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    215c:	f008 ff3c 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    2160:	4920      	ldr	r1, [pc, #128]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    2162:	481c      	ldr	r0, [pc, #112]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2164:	f7fe fb3a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2168:	492f      	ldr	r1, [pc, #188]	; (2228 <LEDDebug(LEDStruct&)+0x318>)
    216a:	481a      	ldr	r0, [pc, #104]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    216c:	f7fe fb28 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2170:	2300      	movs	r3, #0
    2172:	220a      	movs	r2, #10
    2174:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2178:	4816      	ldr	r0, [pc, #88]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    217a:	f008 ff2d 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    217e:	4919      	ldr	r1, [pc, #100]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    2180:	4814      	ldr	r0, [pc, #80]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2182:	f7fe fb2b 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2186:	4929      	ldr	r1, [pc, #164]	; (222c <LEDDebug(LEDStruct&)+0x31c>)
    2188:	4812      	ldr	r0, [pc, #72]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    218a:	f7fe fb19 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    218e:	2300      	movs	r3, #0
    2190:	220a      	movs	r2, #10
    2192:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2196:	480f      	ldr	r0, [pc, #60]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    2198:	f008 ff1e 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    219c:	4911      	ldr	r1, [pc, #68]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    219e:	480d      	ldr	r0, [pc, #52]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    21a0:	f7fe fb1c 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    21a4:	4922      	ldr	r1, [pc, #136]	; (2230 <LEDDebug(LEDStruct&)+0x320>)
    21a6:	480b      	ldr	r0, [pc, #44]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    21a8:	f7fe fb0a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21ac:	2300      	movs	r3, #0
    21ae:	220a      	movs	r2, #10
    21b0:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    21b4:	4807      	ldr	r0, [pc, #28]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    21b6:	f008 ff0f 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    21ba:	490a      	ldr	r1, [pc, #40]	; (21e4 <LEDDebug(LEDStruct&)+0x2d4>)
    21bc:	4805      	ldr	r0, [pc, #20]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    21be:	f7fe fb0d 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    21c2:	491c      	ldr	r1, [pc, #112]	; (2234 <LEDDebug(LEDStruct&)+0x324>)
    21c4:	4803      	ldr	r0, [pc, #12]	; (21d4 <LEDDebug(LEDStruct&)+0x2c4>)
    21c6:	f7fe fafb 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    21ca:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    21ce:	e781      	b.n	20d4 <LEDDebug(LEDStruct&)+0x1c4>
    21d0:	0000d080 	.word	0x0000d080
    21d4:	1fff8764 	.word	0x1fff8764
    21d8:	0000cf0c 	.word	0x0000cf0c
    21dc:	0000cf9c 	.word	0x0000cf9c
    21e0:	1fff8723 	.word	0x1fff8723
    21e4:	0000cfb0 	.word	0x0000cfb0
    21e8:	0000cfb4 	.word	0x0000cfb4
    21ec:	0000cfc8 	.word	0x0000cfc8
    21f0:	0000cfdc 	.word	0x0000cfdc
    21f4:	0000cff4 	.word	0x0000cff4
    21f8:	0000d00c 	.word	0x0000d00c
    21fc:	0000cf30 	.word	0x0000cf30
    2200:	0000d784 	.word	0x0000d784
    2204:	0000d7a8 	.word	0x0000d7a8
    2208:	0000d7b8 	.word	0x0000d7b8
    220c:	0000d7d4 	.word	0x0000d7d4
    2210:	0000d810 	.word	0x0000d810
    2214:	0000d020 	.word	0x0000d020
    2218:	0000d044 	.word	0x0000d044
    221c:	0000d05c 	.word	0x0000d05c
    2220:	0000d070 	.word	0x0000d070
    2224:	0000d084 	.word	0x0000d084
    2228:	0000d098 	.word	0x0000d098
    222c:	0000d0a8 	.word	0x0000d0a8
    2230:	0000d0b8 	.word	0x0000d0b8
    2234:	0000d0c8 	.word	0x0000d0c8
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2238:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    223c:	2b00      	cmp	r3, #0
    223e:	f000 8371 	beq.w	2924 <LEDDebug(LEDStruct&)+0xa14>
			else					 { Serial.println("=======RAINBOW MARCH SPLIT========"); }
    2242:	497a      	ldr	r1, [pc, #488]	; (242c <LEDDebug(LEDStruct&)+0x51c>)
    2244:	487a      	ldr	r0, [pc, #488]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2246:	f7fe fac9 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    224a:	497a      	ldr	r1, [pc, #488]	; (2434 <LEDDebug(LEDStruct&)+0x524>)
    224c:	4878      	ldr	r0, [pc, #480]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    224e:	f7fe fab7 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2252:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2256:	4876      	ldr	r0, [pc, #472]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2258:	f008 fefe 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    225c:	4976      	ldr	r1, [pc, #472]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    225e:	4874      	ldr	r0, [pc, #464]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2260:	f7fe fabc 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2264:	4975      	ldr	r1, [pc, #468]	; (243c <LEDDebug(LEDStruct&)+0x52c>)
    2266:	4872      	ldr	r0, [pc, #456]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2268:	f7fe faaa 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    226c:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
    2270:	486f      	ldr	r0, [pc, #444]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2272:	f008 fef1 	bl	b058 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    2276:	4970      	ldr	r1, [pc, #448]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2278:	486d      	ldr	r0, [pc, #436]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    227a:	f7fe faaf 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    227e:	4970      	ldr	r1, [pc, #448]	; (2440 <LEDDebug(LEDStruct&)+0x530>)
    2280:	486b      	ldr	r0, [pc, #428]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2282:	f7fe fa9d 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2286:	2300      	movs	r3, #0
    2288:	220a      	movs	r2, #10
    228a:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    228e:	4868      	ldr	r0, [pc, #416]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2290:	f008 fea2 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2294:	4968      	ldr	r1, [pc, #416]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2296:	4866      	ldr	r0, [pc, #408]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2298:	f7fe faa0 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    229c:	4969      	ldr	r1, [pc, #420]	; (2444 <LEDDebug(LEDStruct&)+0x534>)
    229e:	4864      	ldr	r0, [pc, #400]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    22a0:	f7fe fa8e 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22a4:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    22a8:	e034      	b.n	2314 <LEDDebug(LEDStruct&)+0x404>
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
    22aa:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    22ae:	3b09      	subs	r3, #9
    22b0:	2b06      	cmp	r3, #6
    22b2:	f200 82fc 	bhi.w	28ae <LEDDebug(LEDStruct&)+0x99e>
    22b6:	e8df f013 	tbh	[pc, r3, lsl #1]
    22ba:	0374      	.short	0x0374
    22bc:	02f6036f 	.word	0x02f6036f
    22c0:	0365036a 	.word	0x0365036a
    22c4:	035b0360 	.word	0x035b0360
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    22c8:	495f      	ldr	r1, [pc, #380]	; (2448 <LEDDebug(LEDStruct&)+0x538>)
    22ca:	4859      	ldr	r0, [pc, #356]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    22cc:	f7fe fa86 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22d0:	4958      	ldr	r1, [pc, #352]	; (2434 <LEDDebug(LEDStruct&)+0x524>)
    22d2:	4857      	ldr	r0, [pc, #348]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    22d4:	f7fe fa74 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22d8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    22dc:	e6fa      	b.n	20d4 <LEDDebug(LEDStruct&)+0x1c4>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    22de:	495b      	ldr	r1, [pc, #364]	; (244c <LEDDebug(LEDStruct&)+0x53c>)
    22e0:	e7f3      	b.n	22ca <LEDDebug(LEDStruct&)+0x3ba>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    22e2:	495b      	ldr	r1, [pc, #364]	; (2450 <LEDDebug(LEDStruct&)+0x540>)
    22e4:	e7f1      	b.n	22ca <LEDDebug(LEDStruct&)+0x3ba>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    22e6:	495b      	ldr	r1, [pc, #364]	; (2454 <LEDDebug(LEDStruct&)+0x544>)
    22e8:	4851      	ldr	r0, [pc, #324]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    22ea:	f7fe fa77 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22ee:	4951      	ldr	r1, [pc, #324]	; (2434 <LEDDebug(LEDStruct&)+0x524>)
    22f0:	484f      	ldr	r0, [pc, #316]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    22f2:	f7fe fa65 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22f6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    22fa:	484d      	ldr	r0, [pc, #308]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    22fc:	f008 feac 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2300:	494d      	ldr	r1, [pc, #308]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2302:	484b      	ldr	r0, [pc, #300]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2304:	f7fe fa6a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2308:	4953      	ldr	r1, [pc, #332]	; (2458 <LEDDebug(LEDStruct&)+0x548>)
    230a:	4849      	ldr	r0, [pc, #292]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    230c:	f7fe fa58 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2310:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2314:	4846      	ldr	r0, [pc, #280]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2316:	2300      	movs	r3, #0
    2318:	220a      	movs	r2, #10
    231a:	f008 fe5d 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    231e:	4946      	ldr	r1, [pc, #280]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2320:	4843      	ldr	r0, [pc, #268]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2322:	f7fe fa5b 	bl	7dc <Print::println(char const*)>
    2326:	e6dc      	b.n	20e2 <LEDDebug(LEDStruct&)+0x1d2>
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2328:	494c      	ldr	r1, [pc, #304]	; (245c <LEDDebug(LEDStruct&)+0x54c>)
    232a:	4841      	ldr	r0, [pc, #260]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    232c:	f7fe fa56 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2330:	4940      	ldr	r1, [pc, #256]	; (2434 <LEDDebug(LEDStruct&)+0x524>)
    2332:	483f      	ldr	r0, [pc, #252]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2334:	f7fe fa44 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2338:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    233c:	483c      	ldr	r0, [pc, #240]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    233e:	f008 fe8b 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2342:	493d      	ldr	r1, [pc, #244]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2344:	483a      	ldr	r0, [pc, #232]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2346:	f7fe fa49 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    234a:	4945      	ldr	r1, [pc, #276]	; (2460 <LEDDebug(LEDStruct&)+0x550>)
    234c:	4838      	ldr	r0, [pc, #224]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    234e:	f7fe fa37 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2352:	2300      	movs	r3, #0
    2354:	220a      	movs	r2, #10
    2356:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    235a:	4835      	ldr	r0, [pc, #212]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    235c:	f008 fe3c 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2360:	4935      	ldr	r1, [pc, #212]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2362:	4833      	ldr	r0, [pc, #204]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2364:	f7fe fa3a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2368:	493e      	ldr	r1, [pc, #248]	; (2464 <LEDDebug(LEDStruct&)+0x554>)
    236a:	4831      	ldr	r0, [pc, #196]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    236c:	f7fe fa28 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2370:	2300      	movs	r3, #0
    2372:	220a      	movs	r2, #10
    2374:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2378:	482d      	ldr	r0, [pc, #180]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    237a:	f008 fe2d 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    237e:	492e      	ldr	r1, [pc, #184]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2380:	482b      	ldr	r0, [pc, #172]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2382:	f7fe fa2b 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2386:	4938      	ldr	r1, [pc, #224]	; (2468 <LEDDebug(LEDStruct&)+0x558>)
    2388:	4829      	ldr	r0, [pc, #164]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    238a:	f7fe fa19 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    238e:	2300      	movs	r3, #0
    2390:	220a      	movs	r2, #10
    2392:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2396:	4826      	ldr	r0, [pc, #152]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2398:	f008 fe1e 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    239c:	4926      	ldr	r1, [pc, #152]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    239e:	4824      	ldr	r0, [pc, #144]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23a0:	f7fe fa1c 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23a4:	4931      	ldr	r1, [pc, #196]	; (246c <LEDDebug(LEDStruct&)+0x55c>)
    23a6:	4822      	ldr	r0, [pc, #136]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23a8:	f7fe fa0a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23ac:	2300      	movs	r3, #0
    23ae:	220a      	movs	r2, #10
    23b0:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    23b4:	481e      	ldr	r0, [pc, #120]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23b6:	f008 fe0f 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    23ba:	491f      	ldr	r1, [pc, #124]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    23bc:	481c      	ldr	r0, [pc, #112]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23be:	f7fe fa0d 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23c2:	492b      	ldr	r1, [pc, #172]	; (2470 <LEDDebug(LEDStruct&)+0x560>)
    23c4:	481a      	ldr	r0, [pc, #104]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23c6:	f7fe f9fb 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23ca:	2300      	movs	r3, #0
    23cc:	220a      	movs	r2, #10
    23ce:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    23d2:	4817      	ldr	r0, [pc, #92]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23d4:	f008 fe00 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    23d8:	4917      	ldr	r1, [pc, #92]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    23da:	4815      	ldr	r0, [pc, #84]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23dc:	f7fe f9fe 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23e0:	4924      	ldr	r1, [pc, #144]	; (2474 <LEDDebug(LEDStruct&)+0x564>)
    23e2:	4813      	ldr	r0, [pc, #76]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23e4:	f7fe f9ec 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23e8:	2300      	movs	r3, #0
    23ea:	220a      	movs	r2, #10
    23ec:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    23f0:	480f      	ldr	r0, [pc, #60]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23f2:	f008 fdf1 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    23f6:	4910      	ldr	r1, [pc, #64]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    23f8:	480d      	ldr	r0, [pc, #52]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    23fa:	f7fe f9ef 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23fe:	491e      	ldr	r1, [pc, #120]	; (2478 <LEDDebug(LEDStruct&)+0x568>)
    2400:	480b      	ldr	r0, [pc, #44]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2402:	f7fe f9dd 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2406:	2300      	movs	r3, #0
    2408:	220a      	movs	r2, #10
    240a:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    240e:	4808      	ldr	r0, [pc, #32]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2410:	f008 fde2 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    2414:	4908      	ldr	r1, [pc, #32]	; (2438 <LEDDebug(LEDStruct&)+0x528>)
    2416:	4806      	ldr	r0, [pc, #24]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2418:	f7fe f9e0 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    241c:	4917      	ldr	r1, [pc, #92]	; (247c <LEDDebug(LEDStruct&)+0x56c>)
    241e:	4804      	ldr	r0, [pc, #16]	; (2430 <LEDDebug(LEDStruct&)+0x520>)
    2420:	f7fe f9ce 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2424:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2428:	e774      	b.n	2314 <LEDDebug(LEDStruct&)+0x404>
    242a:	bf00      	nop
    242c:	0000d104 	.word	0x0000d104
    2430:	1fff8764 	.word	0x1fff8764
    2434:	0000d044 	.word	0x0000d044
    2438:	0000cfb0 	.word	0x0000cfb0
    243c:	0000d128 	.word	0x0000d128
    2440:	0000d138 	.word	0x0000d138
    2444:	0000d148 	.word	0x0000d148
    2448:	0000d2c8 	.word	0x0000d2c8
    244c:	0000d2ec 	.word	0x0000d2ec
    2450:	0000d310 	.word	0x0000d310
    2454:	0000d334 	.word	0x0000d334
    2458:	0000d358 	.word	0x0000d358
    245c:	0000d428 	.word	0x0000d428
    2460:	0000d44c 	.word	0x0000d44c
    2464:	0000d460 	.word	0x0000d460
    2468:	0000d474 	.word	0x0000d474
    246c:	0000d488 	.word	0x0000d488
    2470:	0000d49c 	.word	0x0000d49c
    2474:	0000d4b0 	.word	0x0000d4b0
    2478:	0000d4c4 	.word	0x0000d4c4
    247c:	0000d4d8 	.word	0x0000d4d8
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2480:	49b2      	ldr	r1, [pc, #712]	; (274c <LEDDebug(LEDStruct&)+0x83c>)
    2482:	48b3      	ldr	r0, [pc, #716]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2484:	f7fe f9aa 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2488:	49b2      	ldr	r1, [pc, #712]	; (2754 <LEDDebug(LEDStruct&)+0x844>)
    248a:	48b1      	ldr	r0, [pc, #708]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    248c:	f7fe f998 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2490:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2494:	48ae      	ldr	r0, [pc, #696]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2496:	f008 fddf 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    249a:	49af      	ldr	r1, [pc, #700]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    249c:	48ac      	ldr	r0, [pc, #688]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    249e:	f7fe f99d 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24a2:	49ae      	ldr	r1, [pc, #696]	; (275c <LEDDebug(LEDStruct&)+0x84c>)
    24a4:	48aa      	ldr	r0, [pc, #680]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24a6:	f7fe f98b 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24aa:	2300      	movs	r3, #0
    24ac:	220a      	movs	r2, #10
    24ae:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    24b2:	48a7      	ldr	r0, [pc, #668]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24b4:	f008 fd90 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    24b8:	49a7      	ldr	r1, [pc, #668]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    24ba:	48a5      	ldr	r0, [pc, #660]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24bc:	f7fe f98e 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24c0:	49a7      	ldr	r1, [pc, #668]	; (2760 <LEDDebug(LEDStruct&)+0x850>)
    24c2:	48a3      	ldr	r0, [pc, #652]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24c4:	f7fe f97c 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24c8:	2300      	movs	r3, #0
    24ca:	220a      	movs	r2, #10
    24cc:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    24d0:	489f      	ldr	r0, [pc, #636]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24d2:	f008 fd81 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    24d6:	49a0      	ldr	r1, [pc, #640]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    24d8:	489d      	ldr	r0, [pc, #628]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24da:	f7fe f97f 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24de:	49a1      	ldr	r1, [pc, #644]	; (2764 <LEDDebug(LEDStruct&)+0x854>)
    24e0:	489b      	ldr	r0, [pc, #620]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24e2:	f7fe f96d 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24e6:	2300      	movs	r3, #0
    24e8:	220a      	movs	r2, #10
    24ea:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    24ee:	4898      	ldr	r0, [pc, #608]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24f0:	f008 fd72 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    24f4:	4998      	ldr	r1, [pc, #608]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    24f6:	4896      	ldr	r0, [pc, #600]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    24f8:	f7fe f970 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24fc:	499a      	ldr	r1, [pc, #616]	; (2768 <LEDDebug(LEDStruct&)+0x858>)
    24fe:	4894      	ldr	r0, [pc, #592]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2500:	f7fe f95e 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2504:	2300      	movs	r3, #0
    2506:	220a      	movs	r2, #10
    2508:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    250c:	4890      	ldr	r0, [pc, #576]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    250e:	f008 fd63 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    2512:	4991      	ldr	r1, [pc, #580]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2514:	488e      	ldr	r0, [pc, #568]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2516:	f7fe f961 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    251a:	4994      	ldr	r1, [pc, #592]	; (276c <LEDDebug(LEDStruct&)+0x85c>)
    251c:	488c      	ldr	r0, [pc, #560]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    251e:	f7fe f94f 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2522:	2300      	movs	r3, #0
    2524:	220a      	movs	r2, #10
    2526:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    252a:	4889      	ldr	r0, [pc, #548]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    252c:	f008 fd54 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2530:	4989      	ldr	r1, [pc, #548]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2532:	4887      	ldr	r0, [pc, #540]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2534:	f7fe f952 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2538:	498d      	ldr	r1, [pc, #564]	; (2770 <LEDDebug(LEDStruct&)+0x860>)
    253a:	4885      	ldr	r0, [pc, #532]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    253c:	f7fe f940 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2540:	2300      	movs	r3, #0
    2542:	220a      	movs	r2, #10
    2544:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2548:	4881      	ldr	r0, [pc, #516]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    254a:	f008 fd45 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    254e:	4982      	ldr	r1, [pc, #520]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2550:	487f      	ldr	r0, [pc, #508]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2552:	f7fe f943 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2556:	4987      	ldr	r1, [pc, #540]	; (2774 <LEDDebug(LEDStruct&)+0x864>)
    2558:	487d      	ldr	r0, [pc, #500]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    255a:	f7fe f931 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    255e:	2300      	movs	r3, #0
    2560:	220a      	movs	r2, #10
    2562:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2566:	487a      	ldr	r0, [pc, #488]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2568:	f008 fd36 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    256c:	497a      	ldr	r1, [pc, #488]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    256e:	4878      	ldr	r0, [pc, #480]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2570:	f7fe f934 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2574:	4980      	ldr	r1, [pc, #512]	; (2778 <LEDDebug(LEDStruct&)+0x868>)
    2576:	4876      	ldr	r0, [pc, #472]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2578:	f7fe f922 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    257c:	2300      	movs	r3, #0
    257e:	220a      	movs	r2, #10
    2580:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    2584:	4872      	ldr	r0, [pc, #456]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2586:	f008 fd27 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    258a:	4973      	ldr	r1, [pc, #460]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    258c:	4870      	ldr	r0, [pc, #448]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    258e:	f7fe f925 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2592:	497a      	ldr	r1, [pc, #488]	; (277c <LEDDebug(LEDStruct&)+0x86c>)
    2594:	486e      	ldr	r0, [pc, #440]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2596:	f7fe f913 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    259a:	2300      	movs	r3, #0
    259c:	220a      	movs	r2, #10
    259e:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    25a2:	486b      	ldr	r0, [pc, #428]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25a4:	f008 fd18 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    25a8:	496b      	ldr	r1, [pc, #428]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    25aa:	4869      	ldr	r0, [pc, #420]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25ac:	f7fe f916 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25b0:	4973      	ldr	r1, [pc, #460]	; (2780 <LEDDebug(LEDStruct&)+0x870>)
    25b2:	4867      	ldr	r0, [pc, #412]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25b4:	f7fe f904 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25b8:	2300      	movs	r3, #0
    25ba:	220a      	movs	r2, #10
    25bc:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    25c0:	4863      	ldr	r0, [pc, #396]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25c2:	f008 fd09 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    25c6:	4964      	ldr	r1, [pc, #400]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    25c8:	4861      	ldr	r0, [pc, #388]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25ca:	f7fe f907 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ce:	496d      	ldr	r1, [pc, #436]	; (2784 <LEDDebug(LEDStruct&)+0x874>)
    25d0:	485f      	ldr	r0, [pc, #380]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25d2:	f7fe f8f5 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25d6:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    25da:	e69b      	b.n	2314 <LEDDebug(LEDStruct&)+0x404>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    25dc:	496a      	ldr	r1, [pc, #424]	; (2788 <LEDDebug(LEDStruct&)+0x878>)
    25de:	485c      	ldr	r0, [pc, #368]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25e0:	f7fe f8fc 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25e4:	4969      	ldr	r1, [pc, #420]	; (278c <LEDDebug(LEDStruct&)+0x87c>)
    25e6:	485a      	ldr	r0, [pc, #360]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    25e8:	f7fe f8ea 	bl	7c0 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    25ec:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    25f0:	2b01      	cmp	r3, #1
    25f2:	f000 81db 	beq.w	29ac <LEDDebug(LEDStruct&)+0xa9c>
    25f6:	f0c0 81b9 	bcc.w	296c <LEDDebug(LEDStruct&)+0xa5c>
    25fa:	2b02      	cmp	r3, #2
    25fc:	d107      	bne.n	260e <LEDDebug(LEDStruct&)+0x6fe>
    25fe:	4964      	ldr	r1, [pc, #400]	; (2790 <LEDDebug(LEDStruct&)+0x880>)
    2600:	4853      	ldr	r0, [pc, #332]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2602:	f7fe f8dd 	bl	7c0 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    2606:	4954      	ldr	r1, [pc, #336]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2608:	4851      	ldr	r0, [pc, #324]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    260a:	f7fe f8e7 	bl	7dc <Print::println(char const*)>
    260e:	4961      	ldr	r1, [pc, #388]	; (2794 <LEDDebug(LEDStruct&)+0x884>)
    2610:	484f      	ldr	r0, [pc, #316]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2612:	f7fe f8d5 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2616:	2300      	movs	r3, #0
    2618:	220a      	movs	r2, #10
    261a:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    261e:	484c      	ldr	r0, [pc, #304]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2620:	f008 fcda 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    2624:	494c      	ldr	r1, [pc, #304]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2626:	484a      	ldr	r0, [pc, #296]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2628:	f7fe f8d8 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    262c:	495a      	ldr	r1, [pc, #360]	; (2798 <LEDDebug(LEDStruct&)+0x888>)
    262e:	4848      	ldr	r0, [pc, #288]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2630:	f7fe f8c6 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2634:	2300      	movs	r3, #0
    2636:	220a      	movs	r2, #10
    2638:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    263c:	4844      	ldr	r0, [pc, #272]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    263e:	f008 fccb 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    2642:	4945      	ldr	r1, [pc, #276]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2644:	4842      	ldr	r0, [pc, #264]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2646:	f7fe f8c9 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    264a:	4954      	ldr	r1, [pc, #336]	; (279c <LEDDebug(LEDStruct&)+0x88c>)
    264c:	4840      	ldr	r0, [pc, #256]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    264e:	f7fe f8b7 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2652:	2300      	movs	r3, #0
    2654:	220a      	movs	r2, #10
    2656:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    265a:	483d      	ldr	r0, [pc, #244]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    265c:	f008 fcbc 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2660:	493d      	ldr	r1, [pc, #244]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2662:	483b      	ldr	r0, [pc, #236]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2664:	f7fe f8ba 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2668:	494d      	ldr	r1, [pc, #308]	; (27a0 <LEDDebug(LEDStruct&)+0x890>)
    266a:	4839      	ldr	r0, [pc, #228]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    266c:	f7fe f8a8 	bl	7c0 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2670:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2674:	e64e      	b.n	2314 <LEDDebug(LEDStruct&)+0x404>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    2676:	494b      	ldr	r1, [pc, #300]	; (27a4 <LEDDebug(LEDStruct&)+0x894>)
    2678:	4835      	ldr	r0, [pc, #212]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    267a:	f7fe f8af 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    267e:	494a      	ldr	r1, [pc, #296]	; (27a8 <LEDDebug(LEDStruct&)+0x898>)
    2680:	4833      	ldr	r0, [pc, #204]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2682:	f7fe f89d 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2686:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    268a:	4831      	ldr	r0, [pc, #196]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    268c:	f008 fce4 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2690:	4931      	ldr	r1, [pc, #196]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2692:	482f      	ldr	r0, [pc, #188]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2694:	f7fe f8a2 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2698:	4944      	ldr	r1, [pc, #272]	; (27ac <LEDDebug(LEDStruct&)+0x89c>)
    269a:	482d      	ldr	r0, [pc, #180]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    269c:	f7fe f890 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26a0:	2300      	movs	r3, #0
    26a2:	220a      	movs	r2, #10
    26a4:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    26a8:	4829      	ldr	r0, [pc, #164]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26aa:	f008 fc95 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    26ae:	492a      	ldr	r1, [pc, #168]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    26b0:	4827      	ldr	r0, [pc, #156]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26b2:	f7fe f893 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26b6:	493e      	ldr	r1, [pc, #248]	; (27b0 <LEDDebug(LEDStruct&)+0x8a0>)
    26b8:	4825      	ldr	r0, [pc, #148]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26ba:	f7fe f881 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26be:	2300      	movs	r3, #0
    26c0:	220a      	movs	r2, #10
    26c2:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    26c6:	4822      	ldr	r0, [pc, #136]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26c8:	f008 fc86 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    26cc:	4922      	ldr	r1, [pc, #136]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    26ce:	4820      	ldr	r0, [pc, #128]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26d0:	f7fe f884 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26d4:	4937      	ldr	r1, [pc, #220]	; (27b4 <LEDDebug(LEDStruct&)+0x8a4>)
    26d6:	481e      	ldr	r0, [pc, #120]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26d8:	f7fe f872 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26dc:	2300      	movs	r3, #0
    26de:	220a      	movs	r2, #10
    26e0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    26e4:	481a      	ldr	r0, [pc, #104]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26e6:	f008 fc77 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    26ea:	491b      	ldr	r1, [pc, #108]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    26ec:	4818      	ldr	r0, [pc, #96]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26ee:	f7fe f875 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26f2:	4931      	ldr	r1, [pc, #196]	; (27b8 <LEDDebug(LEDStruct&)+0x8a8>)
    26f4:	4816      	ldr	r0, [pc, #88]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    26f6:	f7fe f863 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26fa:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    26fe:	e609      	b.n	2314 <LEDDebug(LEDStruct&)+0x404>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2700:	492e      	ldr	r1, [pc, #184]	; (27bc <LEDDebug(LEDStruct&)+0x8ac>)
    2702:	4813      	ldr	r0, [pc, #76]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2704:	f7fe f86a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2708:	4912      	ldr	r1, [pc, #72]	; (2754 <LEDDebug(LEDStruct&)+0x844>)
    270a:	4811      	ldr	r0, [pc, #68]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    270c:	f7fe f858 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2710:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2714:	480e      	ldr	r0, [pc, #56]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2716:	f008 fc9f 	bl	b058 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    271a:	490f      	ldr	r1, [pc, #60]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    271c:	480c      	ldr	r0, [pc, #48]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    271e:	f7fe f85d 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2722:	4927      	ldr	r1, [pc, #156]	; (27c0 <LEDDebug(LEDStruct&)+0x8b0>)
    2724:	480a      	ldr	r0, [pc, #40]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2726:	f7fe f84b 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    272a:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    272e:	4808      	ldr	r0, [pc, #32]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2730:	f008 fc92 	bl	b058 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2734:	4908      	ldr	r1, [pc, #32]	; (2758 <LEDDebug(LEDStruct&)+0x848>)
    2736:	4806      	ldr	r0, [pc, #24]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2738:	f7fe f850 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    273c:	4921      	ldr	r1, [pc, #132]	; (27c4 <LEDDebug(LEDStruct&)+0x8b4>)
    273e:	4804      	ldr	r0, [pc, #16]	; (2750 <LEDDebug(LEDStruct&)+0x840>)
    2740:	f7fe f83e 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2744:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2748:	e4c4      	b.n	20d4 <LEDDebug(LEDStruct&)+0x1c4>
    274a:	bf00      	nop
    274c:	0000d4ec 	.word	0x0000d4ec
    2750:	1fff8764 	.word	0x1fff8764
    2754:	0000d044 	.word	0x0000d044
    2758:	0000cfb0 	.word	0x0000cfb0
    275c:	0000d510 	.word	0x0000d510
    2760:	0000d524 	.word	0x0000d524
    2764:	0000d538 	.word	0x0000d538
    2768:	0000d54c 	.word	0x0000d54c
    276c:	0000d560 	.word	0x0000d560
    2770:	0000d574 	.word	0x0000d574
    2774:	0000d588 	.word	0x0000d588
    2778:	0000d59c 	.word	0x0000d59c
    277c:	0000d5b0 	.word	0x0000d5b0
    2780:	0000d5c4 	.word	0x0000d5c4
    2784:	0000d5d8 	.word	0x0000d5d8
    2788:	0000d370 	.word	0x0000d370
    278c:	0000d394 	.word	0x0000d394
    2790:	0000d3a8 	.word	0x0000d3a8
    2794:	0000d3c4 	.word	0x0000d3c4
    2798:	0000d3dc 	.word	0x0000d3dc
    279c:	0000d3f4 	.word	0x0000d3f4
    27a0:	0000d40c 	.word	0x0000d40c
    27a4:	0000d5ec 	.word	0x0000d5ec
    27a8:	0000d610 	.word	0x0000d610
    27ac:	0000d628 	.word	0x0000d628
    27b0:	0000d63c 	.word	0x0000d63c
    27b4:	0000d654 	.word	0x0000d654
    27b8:	0000d66c 	.word	0x0000d66c
    27bc:	0000d684 	.word	0x0000d684
    27c0:	0000d6a8 	.word	0x0000d6a8
    27c4:	0000d6c0 	.word	0x0000d6c0
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    27c8:	497b      	ldr	r1, [pc, #492]	; (29b8 <LEDDebug(LEDStruct&)+0xaa8>)
    27ca:	487c      	ldr	r0, [pc, #496]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    27cc:	f7fe f806 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27d0:	497b      	ldr	r1, [pc, #492]	; (29c0 <LEDDebug(LEDStruct&)+0xab0>)
    27d2:	487a      	ldr	r0, [pc, #488]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    27d4:	f7fd fff4 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27d8:	2300      	movs	r3, #0
    27da:	220a      	movs	r2, #10
    27dc:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    27e0:	4876      	ldr	r0, [pc, #472]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    27e2:	f008 fbf9 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    27e6:	4977      	ldr	r1, [pc, #476]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    27e8:	4874      	ldr	r0, [pc, #464]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    27ea:	f7fd fff7 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ee:	4976      	ldr	r1, [pc, #472]	; (29c8 <LEDDebug(LEDStruct&)+0xab8>)
    27f0:	4872      	ldr	r0, [pc, #456]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    27f2:	f7fd ffe5 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27f6:	2300      	movs	r3, #0
    27f8:	220a      	movs	r2, #10
    27fa:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    27fe:	486f      	ldr	r0, [pc, #444]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2800:	f008 fbea 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2804:	496f      	ldr	r1, [pc, #444]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2806:	486d      	ldr	r0, [pc, #436]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2808:	f7fd ffe8 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    280c:	496f      	ldr	r1, [pc, #444]	; (29cc <LEDDebug(LEDStruct&)+0xabc>)
    280e:	486b      	ldr	r0, [pc, #428]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2810:	f7fd ffd6 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2814:	2300      	movs	r3, #0
    2816:	220a      	movs	r2, #10
    2818:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    281c:	4867      	ldr	r0, [pc, #412]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    281e:	f008 fbdb 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2822:	4968      	ldr	r1, [pc, #416]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2824:	4865      	ldr	r0, [pc, #404]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2826:	f7fd ffd9 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    282a:	4969      	ldr	r1, [pc, #420]	; (29d0 <LEDDebug(LEDStruct&)+0xac0>)
    282c:	4863      	ldr	r0, [pc, #396]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    282e:	f7fd ffc7 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2832:	2300      	movs	r3, #0
    2834:	220a      	movs	r2, #10
    2836:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    283a:	4860      	ldr	r0, [pc, #384]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    283c:	f008 fbcc 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2840:	4960      	ldr	r1, [pc, #384]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2842:	485e      	ldr	r0, [pc, #376]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2844:	f7fd ffca 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2848:	4962      	ldr	r1, [pc, #392]	; (29d4 <LEDDebug(LEDStruct&)+0xac4>)
    284a:	485c      	ldr	r0, [pc, #368]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    284c:	f7fd ffb8 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2850:	2300      	movs	r3, #0
    2852:	220a      	movs	r2, #10
    2854:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    2858:	4858      	ldr	r0, [pc, #352]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    285a:	f008 fbbd 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    285e:	4959      	ldr	r1, [pc, #356]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2860:	4856      	ldr	r0, [pc, #344]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2862:	f7fd ffbb 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2866:	495c      	ldr	r1, [pc, #368]	; (29d8 <LEDDebug(LEDStruct&)+0xac8>)
    2868:	4854      	ldr	r0, [pc, #336]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    286a:	f7fd ffa9 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    286e:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    2872:	e42f      	b.n	20d4 <LEDDebug(LEDStruct&)+0x1c4>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2874:	4959      	ldr	r1, [pc, #356]	; (29dc <LEDDebug(LEDStruct&)+0xacc>)
    2876:	4851      	ldr	r0, [pc, #324]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2878:	f7fd ffb0 	bl	7dc <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    287c:	4958      	ldr	r1, [pc, #352]	; (29e0 <LEDDebug(LEDStruct&)+0xad0>)
    287e:	484f      	ldr	r0, [pc, #316]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2880:	f7fd ffac 	bl	7dc <Print::println(char const*)>
			Serial.println("");
    2884:	4955      	ldr	r1, [pc, #340]	; (29dc <LEDDebug(LEDStruct&)+0xacc>)
    2886:	484d      	ldr	r0, [pc, #308]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2888:	f7fd ffa8 	bl	7dc <Print::println(char const*)>
			break;
    288c:	e429      	b.n	20e2 <LEDDebug(LEDStruct&)+0x1d2>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    288e:	4955      	ldr	r1, [pc, #340]	; (29e4 <LEDDebug(LEDStruct&)+0xad4>)
    2890:	484a      	ldr	r0, [pc, #296]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2892:	f7fd ffa3 	bl	7dc <Print::println(char const*)>
    2896:	f7ff bb56 	b.w	1f46 <LEDDebug(LEDStruct&)+0x36>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    289a:	4953      	ldr	r1, [pc, #332]	; (29e8 <LEDDebug(LEDStruct&)+0xad8>)
    289c:	4847      	ldr	r0, [pc, #284]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    289e:	f7fd ff9d 	bl	7dc <Print::println(char const*)>
    28a2:	f7ff bb50 	b.w	1f46 <LEDDebug(LEDStruct&)+0x36>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    28a6:	4951      	ldr	r1, [pc, #324]	; (29ec <LEDDebug(LEDStruct&)+0xadc>)
    28a8:	4844      	ldr	r0, [pc, #272]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28aa:	f7fd ff97 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ae:	4950      	ldr	r1, [pc, #320]	; (29f0 <LEDDebug(LEDStruct&)+0xae0>)
    28b0:	4842      	ldr	r0, [pc, #264]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28b2:	f7fd ff85 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28b6:	2300      	movs	r3, #0
    28b8:	220a      	movs	r2, #10
    28ba:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    28be:	483f      	ldr	r0, [pc, #252]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28c0:	f008 fb8a 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;

			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    28c4:	493f      	ldr	r1, [pc, #252]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    28c6:	483d      	ldr	r0, [pc, #244]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28c8:	f7fd ff88 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28cc:	4949      	ldr	r1, [pc, #292]	; (29f4 <LEDDebug(LEDStruct&)+0xae4>)
    28ce:	483b      	ldr	r0, [pc, #236]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28d0:	f7fd ff76 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28d4:	2300      	movs	r3, #0
    28d6:	220a      	movs	r2, #10
    28d8:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    28dc:	4837      	ldr	r0, [pc, #220]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28de:	f008 fb7b 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    28e2:	4938      	ldr	r1, [pc, #224]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    28e4:	4835      	ldr	r0, [pc, #212]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28e6:	f7fd ff79 	bl	7dc <Print::println(char const*)>
			if (!leds.fire_sync) {
    28ea:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    28ee:	b1f5      	cbz	r5, 292e <LEDDebug(LEDStruct&)+0xa1e>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28f0:	4941      	ldr	r1, [pc, #260]	; (29f8 <LEDDebug(LEDStruct&)+0xae8>)
    28f2:	4832      	ldr	r0, [pc, #200]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28f4:	f7fd ff64 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    28f8:	f894 1317 	ldrb.w	r1, [r4, #791]	; 0x317
    28fc:	482f      	ldr	r0, [pc, #188]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    28fe:	f008 fbab 	bl	b058 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2902:	4930      	ldr	r1, [pc, #192]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2904:	482d      	ldr	r0, [pc, #180]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2906:	f7fd ff69 	bl	7dc <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    290a:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    290e:	3b0e      	subs	r3, #14
    2910:	2b01      	cmp	r3, #1
    2912:	f63f abe6 	bhi.w	20e2 <LEDDebug(LEDStruct&)+0x1d2>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2916:	4939      	ldr	r1, [pc, #228]	; (29fc <LEDDebug(LEDStruct&)+0xaec>)
    2918:	4828      	ldr	r0, [pc, #160]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    291a:	f7fd ff51 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    291e:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    2922:	e4f7      	b.n	2314 <LEDDebug(LEDStruct&)+0x404>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2924:	4936      	ldr	r1, [pc, #216]	; (2a00 <LEDDebug(LEDStruct&)+0xaf0>)
    2926:	4825      	ldr	r0, [pc, #148]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2928:	f7fd ff58 	bl	7dc <Print::println(char const*)>
    292c:	e48d      	b.n	224a <LEDDebug(LEDStruct&)+0x33a>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    292e:	4935      	ldr	r1, [pc, #212]	; (2a04 <LEDDebug(LEDStruct&)+0xaf4>)
    2930:	4822      	ldr	r0, [pc, #136]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2932:	f7fd ff45 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2936:	462b      	mov	r3, r5
    2938:	220a      	movs	r2, #10
    293a:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    293e:	481f      	ldr	r0, [pc, #124]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2940:	f008 fb4a 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2944:	491f      	ldr	r1, [pc, #124]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2946:	481d      	ldr	r0, [pc, #116]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2948:	f7fd ff48 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    294c:	492e      	ldr	r1, [pc, #184]	; (2a08 <LEDDebug(LEDStruct&)+0xaf8>)
    294e:	481b      	ldr	r0, [pc, #108]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2950:	f7fd ff36 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2954:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2958:	4818      	ldr	r0, [pc, #96]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    295a:	462b      	mov	r3, r5
    295c:	220a      	movs	r2, #10
    295e:	f008 fb3b 	bl	afd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2962:	4918      	ldr	r1, [pc, #96]	; (29c4 <LEDDebug(LEDStruct&)+0xab4>)
    2964:	4815      	ldr	r0, [pc, #84]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2966:	f7fd ff39 	bl	7dc <Print::println(char const*)>
    296a:	e7c1      	b.n	28f0 <LEDDebug(LEDStruct&)+0x9e0>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    296c:	4927      	ldr	r1, [pc, #156]	; (2a0c <LEDDebug(LEDStruct&)+0xafc>)
    296e:	e647      	b.n	2600 <LEDDebug(LEDStruct&)+0x6f0>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2970:	4927      	ldr	r1, [pc, #156]	; (2a10 <LEDDebug(LEDStruct&)+0xb00>)
    2972:	4812      	ldr	r0, [pc, #72]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2974:	f7fd ff32 	bl	7dc <Print::println(char const*)>
    2978:	e799      	b.n	28ae <LEDDebug(LEDStruct&)+0x99e>
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    297a:	4926      	ldr	r1, [pc, #152]	; (2a14 <LEDDebug(LEDStruct&)+0xb04>)
    297c:	480f      	ldr	r0, [pc, #60]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    297e:	f7fd ff2d 	bl	7dc <Print::println(char const*)>
    2982:	e794      	b.n	28ae <LEDDebug(LEDStruct&)+0x99e>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				case FIRE_RANDOM:		Serial.println("===========FIRE RANDOM============"); break;
    2984:	4924      	ldr	r1, [pc, #144]	; (2a18 <LEDDebug(LEDStruct&)+0xb08>)
    2986:	480d      	ldr	r0, [pc, #52]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2988:	f7fd ff28 	bl	7dc <Print::println(char const*)>
    298c:	e78f      	b.n	28ae <LEDDebug(LEDStruct&)+0x99e>
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    298e:	4923      	ldr	r1, [pc, #140]	; (2a1c <LEDDebug(LEDStruct&)+0xb0c>)
    2990:	480a      	ldr	r0, [pc, #40]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    2992:	f7fd ff23 	bl	7dc <Print::println(char const*)>
    2996:	e78a      	b.n	28ae <LEDDebug(LEDStruct&)+0x99e>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2998:	4921      	ldr	r1, [pc, #132]	; (2a20 <LEDDebug(LEDStruct&)+0xb10>)
    299a:	4808      	ldr	r0, [pc, #32]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    299c:	f7fd ff1e 	bl	7dc <Print::println(char const*)>
    29a0:	e785      	b.n	28ae <LEDDebug(LEDStruct&)+0x99e>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    29a2:	4920      	ldr	r1, [pc, #128]	; (2a24 <LEDDebug(LEDStruct&)+0xb14>)
    29a4:	4805      	ldr	r0, [pc, #20]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    29a6:	f7fd ff19 	bl	7dc <Print::println(char const*)>
    29aa:	e780      	b.n	28ae <LEDDebug(LEDStruct&)+0x99e>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    29ac:	491e      	ldr	r1, [pc, #120]	; (2a28 <LEDDebug(LEDStruct&)+0xb18>)
    29ae:	4803      	ldr	r0, [pc, #12]	; (29bc <LEDDebug(LEDStruct&)+0xaac>)
    29b0:	f7fd ff14 	bl	7dc <Print::println(char const*)>
    29b4:	e62b      	b.n	260e <LEDDebug(LEDStruct&)+0x6fe>
    29b6:	bf00      	nop
    29b8:	0000d6d4 	.word	0x0000d6d4
    29bc:	1fff8764 	.word	0x1fff8764
    29c0:	0000d6f8 	.word	0x0000d6f8
    29c4:	0000cfb0 	.word	0x0000cfb0
    29c8:	0000d710 	.word	0x0000d710
    29cc:	0000d728 	.word	0x0000d728
    29d0:	0000d740 	.word	0x0000d740
    29d4:	0000d758 	.word	0x0000d758
    29d8:	0000d76c 	.word	0x0000d76c
    29dc:	0000d080 	.word	0x0000d080
    29e0:	0000d7ec 	.word	0x0000d7ec
    29e4:	0000cf54 	.word	0x0000cf54
    29e8:	0000cf78 	.word	0x0000cf78
    29ec:	0000d1e8 	.word	0x0000d1e8
    29f0:	0000d254 	.word	0x0000d254
    29f4:	0000d268 	.word	0x0000d268
    29f8:	0000d2a4 	.word	0x0000d2a4
    29fc:	0000d2b4 	.word	0x0000d2b4
    2a00:	0000d0e0 	.word	0x0000d0e0
    2a04:	0000d27c 	.word	0x0000d27c
    2a08:	0000d290 	.word	0x0000d290
    2a0c:	0000d3b0 	.word	0x0000d3b0
    2a10:	0000d17c 	.word	0x0000d17c
    2a14:	0000d158 	.word	0x0000d158
    2a18:	0000d230 	.word	0x0000d230
    2a1c:	0000d20c 	.word	0x0000d20c
    2a20:	0000d1c4 	.word	0x0000d1c4
    2a24:	0000d1a0 	.word	0x0000d1a0
    2a28:	0000d3b8 	.word	0x0000d3b8

00002a2c <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2a2c:	b538      	push	{r3, r4, r5, lr}
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2a2e:	4d1c      	ldr	r5, [pc, #112]	; (2aa0 <change_palette(LEDStruct&) [clone .part.11]+0x74>)
    2a30:	4604      	mov	r4, r0
    2a32:	2134      	movs	r1, #52	; 0x34
    2a34:	481b      	ldr	r0, [pc, #108]	; (2aa4 <change_palette(LEDStruct&) [clone .part.11]+0x78>)
    2a36:	f008 f8bb 	bl	abb0 <usb_serial_write>
    2a3a:	4628      	mov	r0, r5
    2a3c:	f008 fabc 	bl	afb8 <Print::println()>
    2a40:	2133      	movs	r1, #51	; 0x33
    2a42:	4819      	ldr	r0, [pc, #100]	; (2aa8 <change_palette(LEDStruct&) [clone .part.11]+0x7c>)
    2a44:	f008 f8b4 	bl	abb0 <usb_serial_write>
    2a48:	4628      	mov	r0, r5
    2a4a:	f008 fab5 	bl	afb8 <Print::println()>
    2a4e:	2133      	movs	r1, #51	; 0x33
    2a50:	4816      	ldr	r0, [pc, #88]	; (2aac <change_palette(LEDStruct&) [clone .part.11]+0x80>)
    2a52:	f008 f8ad 	bl	abb0 <usb_serial_write>
    2a56:	4628      	mov	r0, r5
    2a58:	f008 faae 	bl	afb8 <Print::println()>
    2a5c:	4814      	ldr	r0, [pc, #80]	; (2ab0 <change_palette(LEDStruct&) [clone .part.11]+0x84>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2a5e:	4a15      	ldr	r2, [pc, #84]	; (2ab4 <change_palette(LEDStruct&) [clone .part.11]+0x88>)
    2a60:	8803      	ldrh	r3, [r0, #0]
    2a62:	7811      	ldrb	r1, [r2, #0]
		leds.target_palette = palettes[leds.palette_index];
    2a64:	4d14      	ldr	r5, [pc, #80]	; (2ab8 <change_palette(LEDStruct&) [clone .part.11]+0x8c>)
    2a66:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a6e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a72:	3319      	adds	r3, #25
    2a74:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a76:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2a7a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2a7c:	fb12 f201 	smulbb	r2, r2, r1
    2a80:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a82:	8003      	strh	r3, [r0, #0]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2a84:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228
		leds.target_palette = palettes[leds.palette_index];
    2a88:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    2a8c:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
    2a90:	f7fd ff60 	bl	954 <CRGBPalette16::operator=(unsigned char const*)>
		if (DEBUG) { print_palette(leds.palette_index); }
    2a94:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
	}
}
    2a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2a9c:	f7fe bf2a 	b.w	18f4 <print_palette(unsigned char)>
    2aa0:	1fff8764 	.word	0x1fff8764
    2aa4:	0000d834 	.word	0x0000d834
    2aa8:	0000d86c 	.word	0x0000d86c
    2aac:	0000d8a0 	.word	0x0000d8a0
    2ab0:	1fff875a 	.word	0x1fff875a
    2ab4:	1fff874d 	.word	0x1fff874d
    2ab8:	0000e378 	.word	0x0000e378

00002abc <juggle_update(LEDStruct&)>:
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    2abc:	4b24      	ldr	r3, [pc, #144]	; (2b50 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2abe:	4a25      	ldr	r2, [pc, #148]	; (2b54 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    2ac0:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2ac2:	2100      	movs	r1, #0
    2ac4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    2ac6:	2b07      	cmp	r3, #7
    2ac8:	d809      	bhi.n	2ade <juggle_update(LEDStruct&)+0x22>
    2aca:	e8df f003 	tbb	[pc, r3]
    2ace:	1c13      	.short	0x1c13
    2ad0:	04342e25 	.word	0x04342e25
    2ad4:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    2ad6:	4b20      	ldr	r3, [pc, #128]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2ad8:	881b      	ldrh	r3, [r3, #0]
    2ada:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2ade:	f7ff ba17 	b.w	1f10 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    2ae2:	4b1d      	ldr	r3, [pc, #116]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2ae4:	881b      	ldrh	r3, [r3, #0]
    2ae6:	3300      	adds	r3, #0
    2ae8:	bf18      	it	ne
    2aea:	2301      	movne	r3, #1
    2aec:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			default:	break;
	}
	LEDDebug(leds);
    2af0:	f7ff ba0e 	b.w	1f10 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    2af4:	4b18      	ldr	r3, [pc, #96]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2af6:	881b      	ldrh	r3, [r3, #0]
    2af8:	3300      	adds	r3, #0
    2afa:	bf18      	it	ne
    2afc:	2301      	movne	r3, #1
    2afe:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2b02:	f7ff ba05 	b.w	1f10 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    2b06:	4b14      	ldr	r3, [pc, #80]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2b08:	881b      	ldrh	r3, [r3, #0]
    2b0a:	3300      	adds	r3, #0
    2b0c:	bf18      	it	ne
    2b0e:	2301      	movne	r3, #1
    2b10:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2b14:	f7ff b9fc 	b.w	1f10 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
    2b18:	4b0f      	ldr	r3, [pc, #60]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2b1a:	881b      	ldrh	r3, [r3, #0]
    2b1c:	3300      	adds	r3, #0
    2b1e:	bf18      	it	ne
    2b20:	2301      	movne	r3, #1
    2b22:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2b26:	f7ff b9f3 	b.w	1f10 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    2b2a:	4b0b      	ldr	r3, [pc, #44]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2b2c:	881b      	ldrh	r3, [r3, #0]
    2b2e:	f880 322f 	strb.w	r3, [r0, #559]	; 0x22f
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2b32:	f7ff b9ed 	b.w	1f10 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    2b36:	4b08      	ldr	r3, [pc, #32]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2b38:	881b      	ldrh	r3, [r3, #0]
    2b3a:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2b3e:	f7ff b9e7 	b.w	1f10 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		=  (bool)update_arg;	break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    2b42:	4b05      	ldr	r3, [pc, #20]	; (2b58 <juggle_update(LEDStruct&)+0x9c>)
    2b44:	881b      	ldrh	r3, [r3, #0]
    2b46:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2b4a:	f7ff b9e1 	b.w	1f10 <LEDDebug(LEDStruct&)>
    2b4e:	bf00      	nop
    2b50:	1fff95d0 	.word	0x1fff95d0
    2b54:	1fff95c1 	.word	0x1fff95c1
    2b58:	1fff95c8 	.word	0x1fff95c8

00002b5c <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2b60:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2b64:	b091      	sub	sp, #68	; 0x44
    2b66:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2b68:	2b00      	cmp	r3, #0
    2b6a:	f040 8094 	bne.w	2c96 <juggle(LEDStruct&)+0x13a>
    2b6e:	4ed1      	ldr	r6, [pc, #836]	; (2eb4 <juggle(LEDStruct&)+0x358>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2b70:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    2b74:	8833      	ldrh	r3, [r6, #0]
    2b76:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2b7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b7e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2b82:	3019      	adds	r0, #25
    2b84:	b280      	uxth	r0, r0
    2b86:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2b8a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    2b8e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2b92:	3519      	adds	r5, #25
    2b94:	b2ad      	uxth	r5, r5
    2b96:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    2b9a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2b9e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2ba2:	3319      	adds	r3, #25
    2ba4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2ba8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2bac:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2bb0:	3319      	adds	r3, #25
    2bb2:	b29b      	uxth	r3, r3
    2bb4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2bb8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2bbc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2bc0:	3119      	adds	r1, #25
    2bc2:	b289      	uxth	r1, r1
    2bc4:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2bc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2bcc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2bd0:	3219      	adds	r2, #25
    2bd2:	b292      	uxth	r2, r2
    2bd4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2bd8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2bdc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2be0:	f10e 0e19 	add.w	lr, lr, #25
    2be4:	fa1f fe8e 	uxth.w	lr, lr
    2be8:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    2bec:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    2bf0:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    2bf4:	f10c 0c19 	add.w	ip, ip, #25
    2bf8:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2bfc:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c00:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    2c04:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c08:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2c0c:	b2ff      	uxtb	r7, r7
    2c0e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2c12:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c16:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    2c1a:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    2c1c:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2c1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2c22:	123a      	asrs	r2, r7, #8
    2c24:	f108 0819 	add.w	r8, r8, #25
	leds.juggle_beat		 = jb;
    2c28:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c2a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c2e:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c32:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2c36:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2c38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c3c:	111b      	asrs	r3, r3, #4
	leds.juggle_diff		 = jd;
    2c3e:	f3ce 11c0 	ubfx	r1, lr, #7, #1
    2c42:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2c46:	f3c0 1ec0 	ubfx	lr, r0, #7, #1
    2c4a:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2c4e:	f107 0008 	add.w	r0, r7, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2c52:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    2c56:	eb08 2218 	add.w	r2, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2c5a:	f103 0720 	add.w	r7, r3, #32
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2c5e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2c62:	3101      	adds	r1, #1
	leds.juggle_index_reset  = jir;
    2c64:	f3cc 13c0 	ubfx	r3, ip, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2c68:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2c6c:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2c70:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2c72:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    2c76:	f884 5235 	strb.w	r5, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2c7a:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2c7e:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c82:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2c86:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2c8a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2c8e:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2c92:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    2c96:	4b88      	ldr	r3, [pc, #544]	; (2eb8 <juggle(LEDStruct&)+0x35c>)
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	f040 84a8 	bne.w	35f0 <juggle(LEDStruct&)+0xa94>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    2ca0:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    2ca4:	b113      	cbz	r3, 2cac <juggle(LEDStruct&)+0x150>
    2ca6:	2300      	movs	r3, #0
    2ca8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    2cac:	2196      	movs	r1, #150	; 0x96
    2cae:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    2cb2:	4620      	mov	r0, r4
    2cb4:	f005 ff6c 	bl	8b90 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    2cb8:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    2cbc:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2cc0:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    2cc4:	2900      	cmp	r1, #0
    2cc6:	f040 80de 	bne.w	2e86 <juggle(LEDStruct&)+0x32a>
		if (leds.juggle_phased) {
    2cca:	2f00      	cmp	r7, #0
    2ccc:	f000 821f 	beq.w	310e <juggle(LEDStruct&)+0x5b2>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	f000 82ef 	beq.w	32b4 <juggle(LEDStruct&)+0x758>
    2cd6:	4879      	ldr	r0, [pc, #484]	; (2ebc <juggle(LEDStruct&)+0x360>)
    2cd8:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2cdc:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 2ec0 <juggle(LEDStruct&)+0x364>
    2ce0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2ec4 <juggle(LEDStruct&)+0x368>
    2ce4:	9002      	str	r0, [sp, #8]
    2ce6:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2cea:	460f      	mov	r7, r1
    2cec:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2cf0:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2cf4:	9503      	str	r5, [sp, #12]
    2cf6:	e05e      	b.n	2db6 <juggle(LEDStruct&)+0x25a>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2cf8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2cfc:	443b      	add	r3, r7
    2cfe:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d00:	f8d9 1000 	ldr.w	r1, [r9]
    2d04:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2d06:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2d08:	9904      	ldr	r1, [sp, #16]
    2d0a:	bf98      	it	ls
    2d0c:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2d0e:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2d12:	bf98      	it	ls
    2d14:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2d16:	fb00 f101 	mul.w	r1, r0, r1
    2d1a:	fb03 f301 	mul.w	r3, r3, r1
    2d1e:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d20:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2d22:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d26:	d503      	bpl.n	2d30 <juggle(LEDStruct&)+0x1d4>
    2d28:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2d2c:	3107      	adds	r1, #7
    2d2e:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d30:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2d32:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d34:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2d38:	f818 6000 	ldrb.w	r6, [r8, r0]
    2d3c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2d40:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2d44:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d46:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2d48:	bf48      	it	mi
    2d4a:	4249      	negmi	r1, r1
    2d4c:	b20e      	sxth	r6, r1
    2d4e:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2d52:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2d56:	9100      	str	r1, [sp, #0]
    2d58:	4650      	mov	r0, sl
    2d5a:	4659      	mov	r1, fp
    2d5c:	f005 ff78 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2d60:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2d64:	2296      	movs	r2, #150	; 0x96
    2d66:	b29b      	uxth	r3, r3
    2d68:	fb02 f303 	mul.w	r3, r2, r3
    2d6c:	0c1b      	lsrs	r3, r3, #16
    2d6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d72:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2d74:	5ce2      	ldrb	r2, [r4, r3]
    2d76:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2d7a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2d7e:	54e2      	strb	r2, [r4, r3]
    2d80:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2d84:	784a      	ldrb	r2, [r1, #1]
    2d86:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2d8a:	704a      	strb	r2, [r1, #1]
    2d8c:	788b      	ldrb	r3, [r1, #2]
    2d8e:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2d92:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2d96:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2d98:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2d9c:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2da0:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    2da4:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2da6:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2da8:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2daa:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2dac:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2dae:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2db2:	f240 827f 	bls.w	32b4 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2db6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2dba:	2900      	cmp	r1, #0
    2dbc:	d19c      	bne.n	2cf8 <juggle(LEDStruct&)+0x19c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2dbe:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2dc2:	443b      	add	r3, r7
    2dc4:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2dc6:	f8d9 1000 	ldr.w	r1, [r9]
    2dca:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2dcc:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2dce:	9905      	ldr	r1, [sp, #20]
    2dd0:	bf98      	it	ls
    2dd2:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2dd4:	f44f 708c 	mov.w	r0, #280	; 0x118
    2dd8:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2ddc:	bf98      	it	ls
    2dde:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2de0:	fb03 f301 	mul.w	r3, r3, r1
    2de4:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2de6:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2de8:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2dec:	d503      	bpl.n	2df6 <juggle(LEDStruct&)+0x29a>
    2dee:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2df2:	3107      	adds	r1, #7
    2df4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2df6:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2df8:	9d02      	ldr	r5, [sp, #8]
    2dfa:	f818 6000 	ldrb.w	r6, [r8, r0]
    2dfe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2e02:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2e06:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2e0a:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2e0c:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2e0e:	bf48      	it	mi
    2e10:	4249      	negmi	r1, r1
    2e12:	b20e      	sxth	r6, r1
    2e14:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2e18:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2e1c:	9100      	str	r1, [sp, #0]
    2e1e:	4650      	mov	r0, sl
    2e20:	4659      	mov	r1, fp
    2e22:	f005 ff15 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2e26:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2e2a:	b29b      	uxth	r3, r3
    2e2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e30:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2e34:	0c1b      	lsrs	r3, r3, #16
    2e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2e3a:	18e1      	adds	r1, r4, r3
    2e3c:	5ce2      	ldrb	r2, [r4, r3]
    2e3e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2e42:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2e46:	54e2      	strb	r2, [r4, r3]
    2e48:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2e4c:	784a      	ldrb	r2, [r1, #1]
    2e4e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2e52:	704a      	strb	r2, [r1, #1]
    2e54:	788b      	ldrb	r3, [r1, #2]
    2e56:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2e5a:	fa83 f352 	uqadd8	r3, r3, r2
    2e5e:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2e60:	708b      	strb	r3, [r1, #2]
    2e62:	4622      	mov	r2, r4
    2e64:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e66:	7819      	ldrb	r1, [r3, #0]
    2e68:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2e6c:	7859      	ldrb	r1, [r3, #1]
    2e6e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2e72:	7899      	ldrb	r1, [r3, #2]
    2e74:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2e78:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    2e7a:	429d      	cmp	r5, r3
    2e7c:	f1a2 0203 	sub.w	r2, r2, #3
    2e80:	d1f1      	bne.n	2e66 <juggle(LEDStruct&)+0x30a>
    2e82:	9503      	str	r5, [sp, #12]
    2e84:	e788      	b.n	2d98 <juggle(LEDStruct&)+0x23c>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    2e86:	2f00      	cmp	r7, #0
    2e88:	f000 80a7 	beq.w	2fda <juggle(LEDStruct&)+0x47e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2e8c:	2b00      	cmp	r3, #0
    2e8e:	f000 8211 	beq.w	32b4 <juggle(LEDStruct&)+0x758>
    2e92:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <juggle(LEDStruct&)+0x360>)
    2e94:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2e98:	f8df 9024 	ldr.w	r9, [pc, #36]	; 2ec0 <juggle(LEDStruct&)+0x364>
    2e9c:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2ec4 <juggle(LEDStruct&)+0x368>
    2ea0:	9302      	str	r3, [sp, #8]
    2ea2:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2ea6:	2700      	movs	r7, #0
    2ea8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2eac:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2eb0:	9503      	str	r5, [sp, #12]
    2eb2:	e06e      	b.n	2f92 <juggle(LEDStruct&)+0x436>
    2eb4:	1fff875a 	.word	0x1fff875a
    2eb8:	1fff95c1 	.word	0x1fff95c1
    2ebc:	0000da04 	.word	0x0000da04
    2ec0:	1fffa050 	.word	0x1fffa050
    2ec4:	0000e538 	.word	0x0000e538
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2ec8:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2ecc:	2b00      	cmp	r3, #0
    2ece:	f000 825f 	beq.w	3390 <juggle(LEDStruct&)+0x834>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ed2:	f8d9 3000 	ldr.w	r3, [r9]
    2ed6:	9308      	str	r3, [sp, #32]
	return ret;
    2ed8:	9908      	ldr	r1, [sp, #32]
    2eda:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2ee2:	fb00 1117 	mls	r1, r0, r7, r1
    2ee6:	021b      	lsls	r3, r3, #8
    2ee8:	f44f 708c 	mov.w	r0, #280	; 0x118
    2eec:	fb00 f303 	mul.w	r3, r0, r3
    2ef0:	fb03 f301 	mul.w	r3, r3, r1
    2ef4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2ef8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2efc:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2efe:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f02:	d503      	bpl.n	2f0c <juggle(LEDStruct&)+0x3b0>
    2f04:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2f08:	3107      	adds	r1, #7
    2f0a:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f0c:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2f0e:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f10:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2f14:	f818 6000 	ldrb.w	r6, [r8, r0]
    2f18:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2f1c:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2f20:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f22:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2f24:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2f28:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2f2c:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2f2e:	bf48      	it	mi
    2f30:	4276      	negmi	r6, r6
    2f32:	4659      	mov	r1, fp
    2f34:	4650      	mov	r0, sl
    2f36:	b236      	sxth	r6, r6
    2f38:	f005 fe8a 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2f3c:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2f40:	b29a      	uxth	r2, r3
    2f42:	2396      	movs	r3, #150	; 0x96
    2f44:	fb03 f302 	mul.w	r3, r3, r2
    2f48:	0c1b      	lsrs	r3, r3, #16
    2f4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f4e:	18e1      	adds	r1, r4, r3
    2f50:	5ce2      	ldrb	r2, [r4, r3]
    2f52:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2f56:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2f5a:	54e2      	strb	r2, [r4, r3]
    2f5c:	784a      	ldrb	r2, [r1, #1]
    2f5e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2f62:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2f66:	704a      	strb	r2, [r1, #1]
    2f68:	788b      	ldrb	r3, [r1, #2]
    2f6a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2f6e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2f72:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2f74:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2f78:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2f7c:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2f80:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2f82:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2f84:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2f86:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2f88:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2f8a:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2f8e:	f240 8191 	bls.w	32b4 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    2f92:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    2f96:	2b00      	cmp	r3, #0
    2f98:	d196      	bne.n	2ec8 <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2f9a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	f000 82c0 	beq.w	3524 <juggle(LEDStruct&)+0x9c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2fa4:	f8d9 3000 	ldr.w	r3, [r9]
    2fa8:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2faa:	990a      	ldr	r1, [sp, #40]	; 0x28
    2fac:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2fb4:	fb00 1117 	mls	r1, r0, r7, r1
    2fb8:	021b      	lsls	r3, r3, #8
    2fba:	f44f 708c 	mov.w	r0, #280	; 0x118
    2fbe:	fb00 f303 	mul.w	r3, r0, r3
    2fc2:	fb03 f301 	mul.w	r3, r3, r1
    2fc6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2fca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2fce:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2fd0:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2fd2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2fd6:	d599      	bpl.n	2f0c <juggle(LEDStruct&)+0x3b0>
    2fd8:	e794      	b.n	2f04 <juggle(LEDStruct&)+0x3a8>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2fda:	2b00      	cmp	r3, #0
    2fdc:	f000 816a 	beq.w	32b4 <juggle(LEDStruct&)+0x758>
    2fe0:	49b6      	ldr	r1, [pc, #728]	; (32bc <juggle(LEDStruct&)+0x760>)
    2fe2:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2fe6:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 32c0 <juggle(LEDStruct&)+0x764>
    2fea:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 32c4 <juggle(LEDStruct&)+0x768>
    2fee:	9102      	str	r1, [sp, #8]
    2ff0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2ff4:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2ff8:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    2ffc:	9503      	str	r5, [sp, #12]
    2ffe:	e063      	b.n	30c8 <juggle(LEDStruct&)+0x56c>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3000:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3004:	2900      	cmp	r1, #0
    3006:	f000 815f 	beq.w	32c8 <juggle(LEDStruct&)+0x76c>
    300a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    300e:	443b      	add	r3, r7
    3010:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3012:	f8d9 1000 	ldr.w	r1, [r9]
    3016:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3018:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    301a:	990c      	ldr	r1, [sp, #48]	; 0x30
    301c:	bf9c      	itt	ls
    301e:	021b      	lslls	r3, r3, #8
    3020:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3022:	fb0a f101 	mul.w	r1, sl, r1
    3026:	fb03 f301 	mul.w	r3, r3, r1
    302a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    302e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    3032:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3034:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3038:	d503      	bpl.n	3042 <juggle(LEDStruct&)+0x4e6>
    303a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    303e:	3107      	adds	r1, #7
    3040:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3042:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3044:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3046:	f3c1 0146 	ubfx	r1, r1, #1, #7
    304a:	f818 6000 	ldrb.w	r6, [r8, r0]
    304e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3052:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3056:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3058:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    305a:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    305e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3062:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3064:	bf48      	it	mi
    3066:	4276      	negmi	r6, r6
    3068:	4659      	mov	r1, fp
    306a:	a80b      	add	r0, sp, #44	; 0x2c
    306c:	b236      	sxth	r6, r6
    306e:	f005 fdef 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3072:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3076:	2296      	movs	r2, #150	; 0x96
    3078:	b29b      	uxth	r3, r3
    307a:	fb02 f303 	mul.w	r3, r2, r3
    307e:	0c1b      	lsrs	r3, r3, #16
    3080:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3084:	18e1      	adds	r1, r4, r3
    3086:	5ce2      	ldrb	r2, [r4, r3]
    3088:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    308c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3090:	54e2      	strb	r2, [r4, r3]
    3092:	784a      	ldrb	r2, [r1, #1]
    3094:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3098:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    309c:	704a      	strb	r2, [r1, #1]
    309e:	788b      	ldrb	r3, [r1, #2]
    30a0:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    30a4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    30a8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    30aa:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    30ae:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    30b2:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    30b6:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    30b8:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    30ba:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    30bc:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    30be:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    30c0:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    30c4:	f240 80f6 	bls.w	32b4 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    30c8:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    30cc:	2900      	cmp	r1, #0
    30ce:	d197      	bne.n	3000 <juggle(LEDStruct&)+0x4a4>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    30d0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    30d4:	2900      	cmp	r1, #0
    30d6:	f000 81c0 	beq.w	345a <juggle(LEDStruct&)+0x8fe>
    30da:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    30de:	443b      	add	r3, r7
    30e0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30e2:	f8d9 1000 	ldr.w	r1, [r9]
    30e6:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    30e8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    30ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    30ec:	bf9c      	itt	ls
    30ee:	021b      	lslls	r3, r3, #8
    30f0:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    30f2:	fb0a f101 	mul.w	r1, sl, r1
    30f6:	fb03 f301 	mul.w	r3, r3, r1
    30fa:	f3c3 430e 	ubfx	r3, r3, #16, #15
    30fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3102:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3104:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3106:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    310a:	d59a      	bpl.n	3042 <juggle(LEDStruct&)+0x4e6>
    310c:	e795      	b.n	303a <juggle(LEDStruct&)+0x4de>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    310e:	2b00      	cmp	r3, #0
    3110:	f000 80d0 	beq.w	32b4 <juggle(LEDStruct&)+0x758>
    3114:	4b69      	ldr	r3, [pc, #420]	; (32bc <juggle(LEDStruct&)+0x760>)
    3116:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    311a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 32c0 <juggle(LEDStruct&)+0x764>
    311e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 32c4 <juggle(LEDStruct&)+0x768>
    3122:	9302      	str	r3, [sp, #8]
    3124:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3128:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    312c:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3130:	9503      	str	r5, [sp, #12]
    3132:	e05a      	b.n	31ea <juggle(LEDStruct&)+0x68e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3134:	f8d9 3000 	ldr.w	r3, [r9]
    3138:	9306      	str	r3, [sp, #24]
	return ret;
    313a:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    313c:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3140:	f44f 708c 	mov.w	r0, #280	; 0x118
    3144:	0209      	lsls	r1, r1, #8
    3146:	fb00 f303 	mul.w	r3, r0, r3
    314a:	fb03 f301 	mul.w	r3, r3, r1
    314e:	0379      	lsls	r1, r7, #13
    3150:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    3154:	b299      	uxth	r1, r3
    3156:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3158:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    315c:	d503      	bpl.n	3166 <juggle(LEDStruct&)+0x60a>
    315e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3162:	3307      	adds	r3, #7
    3164:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3166:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3168:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    316a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    316e:	f818 6000 	ldrb.w	r6, [r8, r0]
    3172:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3176:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    317a:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    317c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    317e:	bf48      	it	mi
    3180:	425b      	negmi	r3, r3
    3182:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3186:	b21e      	sxth	r6, r3
    3188:	4650      	mov	r0, sl
    318a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    318e:	9100      	str	r1, [sp, #0]
    3190:	4659      	mov	r1, fp
    3192:	f005 fd5d 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3196:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    319a:	2296      	movs	r2, #150	; 0x96
    319c:	b29b      	uxth	r3, r3
    319e:	fb02 f303 	mul.w	r3, r2, r3
    31a2:	0c1b      	lsrs	r3, r3, #16
    31a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31a8:	18e1      	adds	r1, r4, r3
    31aa:	5ce2      	ldrb	r2, [r4, r3]
    31ac:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    31b0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    31b4:	54e2      	strb	r2, [r4, r3]
    31b6:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    31ba:	784a      	ldrb	r2, [r1, #1]
    31bc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    31c0:	704a      	strb	r2, [r1, #1]
    31c2:	788b      	ldrb	r3, [r1, #2]
    31c4:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    31c8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    31cc:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    31ce:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    31d2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    31d6:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    31da:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    31dc:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    31de:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    31e0:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    31e2:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    31e4:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    31e8:	d964      	bls.n	32b4 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    31ea:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    31ee:	2b00      	cmp	r3, #0
    31f0:	d1a0      	bne.n	3134 <juggle(LEDStruct&)+0x5d8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31f2:	f8d9 3000 	ldr.w	r3, [r9]
    31f6:	9307      	str	r3, [sp, #28]
	return ret;
    31f8:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    31fa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    31fe:	f44f 708c 	mov.w	r0, #280	; 0x118
    3202:	fb00 f303 	mul.w	r3, r0, r3
    3206:	0209      	lsls	r1, r1, #8
    3208:	fb03 f301 	mul.w	r3, r3, r1
    320c:	0379      	lsls	r1, r7, #13
    320e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    3212:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3214:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3216:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    321a:	d503      	bpl.n	3224 <juggle(LEDStruct&)+0x6c8>
    321c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3220:	3307      	adds	r3, #7
    3222:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3224:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3226:	9d02      	ldr	r5, [sp, #8]
    3228:	f818 6000 	ldrb.w	r6, [r8, r0]
    322c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3230:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3234:	fb06 0303 	mla	r3, r6, r3, r0
    3238:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    323a:	040e      	lsls	r6, r1, #16
    323c:	bf48      	it	mi
    323e:	425b      	negmi	r3, r3
    3240:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3244:	b21e      	sxth	r6, r3
    3246:	4650      	mov	r0, sl
    3248:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    324c:	9100      	str	r1, [sp, #0]
    324e:	4659      	mov	r1, fp
    3250:	f005 fcfe 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3254:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3258:	b29b      	uxth	r3, r3
    325a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    325e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3262:	0c1b      	lsrs	r3, r3, #16
    3264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3268:	18e1      	adds	r1, r4, r3
    326a:	5ce2      	ldrb	r2, [r4, r3]
    326c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3270:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3274:	54e2      	strb	r2, [r4, r3]
    3276:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    327a:	784a      	ldrb	r2, [r1, #1]
    327c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3280:	704a      	strb	r2, [r1, #1]
    3282:	788b      	ldrb	r3, [r1, #2]
    3284:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    3288:	fa83 f352 	uqadd8	r3, r3, r2
    328c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    328e:	708b      	strb	r3, [r1, #2]
    3290:	4622      	mov	r2, r4
    3292:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3294:	7819      	ldrb	r1, [r3, #0]
    3296:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    329a:	7859      	ldrb	r1, [r3, #1]
    329c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    32a0:	7899      	ldrb	r1, [r3, #2]
    32a2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    32a6:	3303      	adds	r3, #3
    32a8:	42ab      	cmp	r3, r5
    32aa:	f1a2 0203 	sub.w	r2, r2, #3
    32ae:	d1f1      	bne.n	3294 <juggle(LEDStruct&)+0x738>
    32b0:	9503      	str	r5, [sp, #12]
    32b2:	e78c      	b.n	31ce <juggle(LEDStruct&)+0x672>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    32b4:	b011      	add	sp, #68	; 0x44
    32b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32ba:	bf00      	nop
    32bc:	0000da04 	.word	0x0000da04
    32c0:	1fffa050 	.word	0x1fffa050
    32c4:	0000e538 	.word	0x0000e538
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    32c8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    32cc:	443b      	add	r3, r7
    32ce:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32d0:	f8d9 1000 	ldr.w	r1, [r9]
    32d4:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    32d6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    32d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    32da:	bf9c      	itt	ls
    32dc:	021b      	lslls	r3, r3, #8
    32de:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    32e0:	fb0a f101 	mul.w	r1, sl, r1
    32e4:	fb03 f301 	mul.w	r3, r3, r1
    32e8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    32ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    32f0:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    32f2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    32f6:	d503      	bpl.n	3300 <juggle(LEDStruct&)+0x7a4>
    32f8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    32fc:	3107      	adds	r1, #7
    32fe:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3300:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3302:	9d02      	ldr	r5, [sp, #8]
    3304:	f818 6000 	ldrb.w	r6, [r8, r0]
    3308:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    330c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3310:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3314:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3316:	b2b6      	uxth	r6, r6
    3318:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    331c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3320:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3322:	bf48      	it	mi
    3324:	4276      	negmi	r6, r6
    3326:	4659      	mov	r1, fp
    3328:	a80b      	add	r0, sp, #44	; 0x2c
    332a:	b236      	sxth	r6, r6
    332c:	f005 fc90 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3330:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3334:	b29b      	uxth	r3, r3
    3336:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    333a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    333e:	0c1b      	lsrs	r3, r3, #16
    3340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3344:	18e1      	adds	r1, r4, r3
    3346:	5ce2      	ldrb	r2, [r4, r3]
    3348:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    334c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3350:	54e2      	strb	r2, [r4, r3]
    3352:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3356:	784a      	ldrb	r2, [r1, #1]
    3358:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    335c:	704a      	strb	r2, [r1, #1]
    335e:	788b      	ldrb	r3, [r1, #2]
    3360:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3364:	fa83 f352 	uqadd8	r3, r3, r2
    3368:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    336a:	708b      	strb	r3, [r1, #2]
    336c:	4622      	mov	r2, r4
    336e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3370:	7819      	ldrb	r1, [r3, #0]
    3372:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3376:	7859      	ldrb	r1, [r3, #1]
    3378:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    337c:	7899      	ldrb	r1, [r3, #2]
    337e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3382:	3303      	adds	r3, #3
    3384:	42ab      	cmp	r3, r5
    3386:	f1a2 0203 	sub.w	r2, r2, #3
    338a:	d1f1      	bne.n	3370 <juggle(LEDStruct&)+0x814>
    338c:	9503      	str	r5, [sp, #12]
    338e:	e68c      	b.n	30aa <juggle(LEDStruct&)+0x54e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3390:	f8d9 3000 	ldr.w	r3, [r9]
    3394:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3396:	9909      	ldr	r1, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3398:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    339c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    33a0:	fb00 1117 	mls	r1, r0, r7, r1
    33a4:	021b      	lsls	r3, r3, #8
    33a6:	f44f 708c 	mov.w	r0, #280	; 0x118
    33aa:	fb00 f303 	mul.w	r3, r0, r3
    33ae:	fb03 f301 	mul.w	r3, r3, r1
    33b2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    33b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33ba:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33bc:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33c0:	d503      	bpl.n	33ca <juggle(LEDStruct&)+0x86e>
    33c2:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    33c6:	3107      	adds	r1, #7
    33c8:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33ca:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33cc:	9d02      	ldr	r5, [sp, #8]
    33ce:	f818 6000 	ldrb.w	r6, [r8, r0]
    33d2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    33d6:	f3c1 0146 	ubfx	r1, r1, #1, #7
    33da:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    33de:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33e0:	b2b6      	uxth	r6, r6
    33e2:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    33e6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    33ea:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    33ec:	bf48      	it	mi
    33ee:	4276      	negmi	r6, r6
    33f0:	4659      	mov	r1, fp
    33f2:	4650      	mov	r0, sl
    33f4:	b236      	sxth	r6, r6
    33f6:	f005 fc2b 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33fa:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    33fe:	b29b      	uxth	r3, r3
    3400:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3404:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3408:	0c1b      	lsrs	r3, r3, #16
    340a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    340e:	18e1      	adds	r1, r4, r3
    3410:	5ce2      	ldrb	r2, [r4, r3]
    3412:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3416:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    341a:	54e2      	strb	r2, [r4, r3]
    341c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    3420:	784a      	ldrb	r2, [r1, #1]
    3422:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3426:	704a      	strb	r2, [r1, #1]
    3428:	788b      	ldrb	r3, [r1, #2]
    342a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    342e:	fa83 f352 	uqadd8	r3, r3, r2
    3432:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    3434:	708b      	strb	r3, [r1, #2]
    3436:	4622      	mov	r2, r4
    3438:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    343a:	7819      	ldrb	r1, [r3, #0]
    343c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3440:	7859      	ldrb	r1, [r3, #1]
    3442:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3446:	7899      	ldrb	r1, [r3, #2]
    3448:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    344c:	3303      	adds	r3, #3
    344e:	42ab      	cmp	r3, r5
    3450:	f1a2 0203 	sub.w	r2, r2, #3
    3454:	d1f1      	bne.n	343a <juggle(LEDStruct&)+0x8de>
    3456:	9503      	str	r5, [sp, #12]
    3458:	e58c      	b.n	2f74 <juggle(LEDStruct&)+0x418>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    345a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    345e:	443b      	add	r3, r7
    3460:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3462:	f8d9 1000 	ldr.w	r1, [r9]
    3466:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3468:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    346a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    346c:	bf9c      	itt	ls
    346e:	021b      	lslls	r3, r3, #8
    3470:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3472:	fb0a f101 	mul.w	r1, sl, r1
    3476:	fb03 f301 	mul.w	r3, r3, r1
    347a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    347e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3482:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3484:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3486:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    348a:	d503      	bpl.n	3494 <juggle(LEDStruct&)+0x938>
    348c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3490:	3107      	adds	r1, #7
    3492:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3494:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3496:	9d02      	ldr	r5, [sp, #8]
    3498:	f818 6000 	ldrb.w	r6, [r8, r0]
    349c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    34a0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    34a4:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    34a8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    34aa:	b2b6      	uxth	r6, r6
    34ac:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    34b0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34b4:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    34b6:	bf48      	it	mi
    34b8:	4276      	negmi	r6, r6
    34ba:	4659      	mov	r1, fp
    34bc:	a80b      	add	r0, sp, #44	; 0x2c
    34be:	b236      	sxth	r6, r6
    34c0:	f005 fbc6 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34c4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    34c8:	b29b      	uxth	r3, r3
    34ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34ce:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    34d2:	0c1b      	lsrs	r3, r3, #16
    34d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34d8:	18e1      	adds	r1, r4, r3
    34da:	5ce2      	ldrb	r2, [r4, r3]
    34dc:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    34e0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34e4:	54e2      	strb	r2, [r4, r3]
    34e6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    34ea:	784a      	ldrb	r2, [r1, #1]
    34ec:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34f0:	704a      	strb	r2, [r1, #1]
    34f2:	788b      	ldrb	r3, [r1, #2]
    34f4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    34f8:	fa83 f352 	uqadd8	r3, r3, r2
    34fc:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    34fe:	708b      	strb	r3, [r1, #2]
    3500:	4622      	mov	r2, r4
    3502:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3504:	7819      	ldrb	r1, [r3, #0]
    3506:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    350a:	7859      	ldrb	r1, [r3, #1]
    350c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3510:	7899      	ldrb	r1, [r3, #2]
    3512:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3516:	3303      	adds	r3, #3
    3518:	42ab      	cmp	r3, r5
    351a:	f1a2 0203 	sub.w	r2, r2, #3
    351e:	d1f1      	bne.n	3504 <juggle(LEDStruct&)+0x9a8>
    3520:	9503      	str	r5, [sp, #12]
    3522:	e5c2      	b.n	30aa <juggle(LEDStruct&)+0x54e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3524:	f8d9 3000 	ldr.w	r3, [r9]
    3528:	930b      	str	r3, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    352a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	return ret;
    352e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3534:	fb00 3317 	mls	r3, r0, r7, r3
    3538:	0209      	lsls	r1, r1, #8
    353a:	f44f 708c 	mov.w	r0, #280	; 0x118
    353e:	fb00 f101 	mul.w	r1, r0, r1
    3542:	fb03 f301 	mul.w	r3, r3, r1
    3546:	f3c3 430e 	ubfx	r3, r3, #16, #15
    354a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    354e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3550:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3552:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3556:	d503      	bpl.n	3560 <juggle(LEDStruct&)+0xa04>
    3558:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    355c:	3107      	adds	r1, #7
    355e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3560:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3562:	9d02      	ldr	r5, [sp, #8]
    3564:	f818 6000 	ldrb.w	r6, [r8, r0]
    3568:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    356c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3570:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3574:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3576:	b2b6      	uxth	r6, r6
    3578:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    357c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3580:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3582:	bf48      	it	mi
    3584:	4276      	negmi	r6, r6
    3586:	4659      	mov	r1, fp
    3588:	4650      	mov	r0, sl
    358a:	b236      	sxth	r6, r6
    358c:	f005 fb60 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3590:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3594:	b29b      	uxth	r3, r3
    3596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    359a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    359e:	0c1b      	lsrs	r3, r3, #16
    35a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35a4:	18e1      	adds	r1, r4, r3
    35a6:	5ce2      	ldrb	r2, [r4, r3]
    35a8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    35ac:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35b0:	54e2      	strb	r2, [r4, r3]
    35b2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    35b6:	784a      	ldrb	r2, [r1, #1]
    35b8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35bc:	704a      	strb	r2, [r1, #1]
    35be:	788b      	ldrb	r3, [r1, #2]
    35c0:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    35c4:	fa83 f352 	uqadd8	r3, r3, r2
    35c8:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    35ca:	708b      	strb	r3, [r1, #2]
    35cc:	4622      	mov	r2, r4
    35ce:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35d0:	7819      	ldrb	r1, [r3, #0]
    35d2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35d6:	7859      	ldrb	r1, [r3, #1]
    35d8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35dc:	7899      	ldrb	r1, [r3, #2]
    35de:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35e2:	3303      	adds	r3, #3
    35e4:	42ab      	cmp	r3, r5
    35e6:	f1a2 0203 	sub.w	r2, r2, #3
    35ea:	d1f1      	bne.n	35d0 <juggle(LEDStruct&)+0xa74>
    35ec:	9503      	str	r5, [sp, #12]
    35ee:	e4c1      	b.n	2f74 <juggle(LEDStruct&)+0x418>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    35f0:	4620      	mov	r0, r4
    35f2:	f7ff fa63 	bl	2abc <juggle_update(LEDStruct&)>
    35f6:	f7ff bb53 	b.w	2ca0 <juggle(LEDStruct&)+0x144>
    35fa:	bf00      	nop

000035fc <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    35fc:	4b17      	ldr	r3, [pc, #92]	; (365c <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    35fe:	4a18      	ldr	r2, [pc, #96]	; (3660 <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    3600:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    3602:	2100      	movs	r1, #0
    3604:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3606:	2b03      	cmp	r3, #3
    3608:	d80a      	bhi.n	3620 <rainbow_update(LEDStruct&)+0x24>
    360a:	e8df f003 	tbb	[pc, r3]
    360e:	0217      	.short	0x0217
    3610:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    3612:	4b14      	ldr	r3, [pc, #80]	; (3664 <rainbow_update(LEDStruct&)+0x68>)
    3614:	881b      	ldrh	r3, [r3, #0]
    3616:	3300      	adds	r3, #0
    3618:	bf18      	it	ne
    361a:	2301      	movne	r3, #1
    361c:	f880 327a 	strb.w	r3, [r0, #634]	; 0x27a
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3620:	f7fe bc76 	b.w	1f10 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    3624:	4b0f      	ldr	r3, [pc, #60]	; (3664 <rainbow_update(LEDStruct&)+0x68>)
    3626:	881b      	ldrh	r3, [r3, #0]
    3628:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    362c:	f7fe bc70 	b.w	1f10 <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    3630:	4b0c      	ldr	r3, [pc, #48]	; (3664 <rainbow_update(LEDStruct&)+0x68>)
    3632:	881b      	ldrh	r3, [r3, #0]
    3634:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3638:	f7fe bc6a 	b.w	1f10 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    363c:	4b09      	ldr	r3, [pc, #36]	; (3664 <rainbow_update(LEDStruct&)+0x68>)
    363e:	881b      	ldrh	r3, [r3, #0]
    3640:	2b00      	cmp	r3, #0
    3642:	bf14      	ite	ne
    3644:	2301      	movne	r3, #1
    3646:	2300      	moveq	r3, #0
    3648:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    364c:	bf14      	ite	ne
    364e:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    3650:	234b      	moveq	r3, #75	; 0x4b
    3652:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3656:	f7fe bc5b 	b.w	1f10 <LEDDebug(LEDStruct&)>
    365a:	bf00      	nop
    365c:	1fff95d0 	.word	0x1fff95d0
    3660:	1fff95c1 	.word	0x1fff95c1
    3664:	1fff95c8 	.word	0x1fff95c8

00003668 <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    3668:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3670:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    3672:	2b00      	cmp	r3, #0
    3674:	d146      	bne.n	3704 <rainbow_march(LEDStruct&)+0x9c>
    3676:	485e      	ldr	r0, [pc, #376]	; (37f0 <rainbow_march(LEDStruct&)+0x188>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    3678:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    367c:	8803      	ldrh	r3, [r0, #0]
    367e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3682:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3686:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    368a:	3319      	adds	r3, #25
    368c:	b29b      	uxth	r3, r3
    368e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3692:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3696:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    369a:	3219      	adds	r2, #25
    369c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    369e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36a2:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36a4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36a8:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36ac:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36b0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36b4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    36b8:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36ba:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36bc:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36be:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    36c0:	2601      	movs	r6, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    36c2:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36c6:	b2db      	uxtb	r3, r3
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    36c8:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    36cc:	2705      	movs	r7, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    36ce:	42b3      	cmp	r3, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36d0:	8001      	strh	r1, [r0, #0]
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    36d2:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    36d6:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    36da:	f884 627a 	strb.w	r6, [r4, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    36de:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    36e2:	f000 8083 	beq.w	37ec <rainbow_march(LEDStruct&)+0x184>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    36e6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    36ea:	b2d2      	uxtb	r2, r2
    36ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    36f0:	1212      	asrs	r2, r2, #8
    36f2:	4432      	add	r2, r6
    36f4:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    36f6:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    leds.rainbow_rot    = rr;
    36fa:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
	

    if (DEBUG) { LEDDebug(leds); }
    36fe:	4620      	mov	r0, r4
    3700:	f7fe fc06 	bl	1f10 <LEDDebug(LEDStruct&)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    3704:	4b3b      	ldr	r3, [pc, #236]	; (37f4 <rainbow_march(LEDStruct&)+0x18c>)
    3706:	781b      	ldrb	r3, [r3, #0]
    3708:	2b00      	cmp	r3, #0
    370a:	d16b      	bne.n	37e4 <rainbow_march(LEDStruct&)+0x17c>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    370c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3710:	bb43      	cbnz	r3, 3764 <rainbow_march(LEDStruct&)+0xfc>
    3712:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    3716:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    371a:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    371c:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3720:	b2d2      	uxtb	r2, r2
    3722:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    3726:	bb4b      	cbnz	r3, 377c <rainbow_march(LEDStruct&)+0x114>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    3728:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    372c:	2b00      	cmp	r3, #0
    372e:	d151      	bne.n	37d4 <rainbow_march(LEDStruct&)+0x16c>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    3730:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    3734:	214b      	movs	r1, #75	; 0x4b
    3736:	4620      	mov	r0, r4
    3738:	f005 f978 	bl	8a2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    373c:	4620      	mov	r0, r4
    373e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3742:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3744:	7802      	ldrb	r2, [r0, #0]
    3746:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    374a:	7842      	ldrb	r2, [r0, #1]
    374c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3750:	7882      	ldrb	r2, [r0, #2]
    3752:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3756:	3003      	adds	r0, #3
    3758:	4288      	cmp	r0, r1
    375a:	f1a3 0303 	sub.w	r3, r3, #3
    375e:	d1f1      	bne.n	3744 <rainbow_march(LEDStruct&)+0xdc>
    3760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3764:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    3768:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    376c:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    376e:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3772:	b2d2      	uxtb	r2, r2
    3774:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    3778:	2b00      	cmp	r3, #0
    377a:	d0d5      	beq.n	3728 <rainbow_march(LEDStruct&)+0xc0>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    377c:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    3780:	2125      	movs	r1, #37	; 0x25
    3782:	4620      	mov	r0, r4
    3784:	f005 f952 	bl	8a2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    3788:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    378c:	4623      	mov	r3, r4
    378e:	4621      	mov	r1, r4
    3790:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3792:	7810      	ldrb	r0, [r2, #0]
    3794:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    3798:	7850      	ldrb	r0, [r2, #1]
    379a:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    379e:	7890      	ldrb	r0, [r2, #2]
    37a0:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    37a4:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    37a6:	42aa      	cmp	r2, r5
    37a8:	f1a1 0103 	sub.w	r1, r1, #3
    37ac:	d1f1      	bne.n	3792 <rainbow_march(LEDStruct&)+0x12a>
    37ae:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    37b2:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37b4:	7802      	ldrb	r2, [r0, #0]
    37b6:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    37ba:	7842      	ldrb	r2, [r0, #1]
    37bc:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    37c0:	7882      	ldrb	r2, [r0, #2]
    37c2:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    37c6:	3003      	adds	r0, #3
    37c8:	4288      	cmp	r0, r1
    37ca:	f1a3 0303 	sub.w	r3, r3, #3
    37ce:	d1f1      	bne.n	37b4 <rainbow_march(LEDStruct&)+0x14c>
    37d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    37d4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    37d8:	4620      	mov	r0, r4
    37da:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    37dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    37e0:	f005 b924 	b.w	8a2c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    37e4:	4620      	mov	r0, r4
    37e6:	f7ff ff09 	bl	35fc <rainbow_update(LEDStruct&)>
    37ea:	e78f      	b.n	370c <rainbow_march(LEDStruct&)+0xa4>
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    37ec:	461a      	mov	r2, r3
    37ee:	e782      	b.n	36f6 <rainbow_march(LEDStruct&)+0x8e>
    37f0:	1fff875a 	.word	0x1fff875a
    37f4:	1fff95c1 	.word	0x1fff95c1

000037f8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    37f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    37fa:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    37fe:	f89d 6014 	ldrb.w	r6, [sp, #20]
    3802:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    3806:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3808:	3c0e      	subs	r4, #14
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    380a:	2509      	movs	r5, #9
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    380c:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    380e:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    3812:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    3816:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    381a:	d93f      	bls.n	389c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
	else { leds.use_palette = 0; }
    381c:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    381e:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    3822:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    3826:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    382a:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    382e:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    3832:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    3836:	2a00      	cmp	r2, #0
    3838:	d13e      	bne.n	38b8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    383a:	234b      	movs	r3, #75	; 0x4b
    383c:	f880 2316 	strb.w	r2, [r0, #790]	; 0x316
    3840:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3844:	4c1f      	ldr	r4, [pc, #124]	; (38c4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xcc>)
    3846:	8823      	ldrh	r3, [r4, #0]
    3848:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    384c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3850:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3854:	3319      	adds	r3, #25
    3856:	b29b      	uxth	r3, r3
    3858:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    385c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3860:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3864:	3219      	adds	r2, #25
    3866:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3868:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    386c:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    3870:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    3872:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    3874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    3878:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    387c:	3e0a      	subs	r6, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    387e:	3d0a      	subs	r5, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    3880:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    3884:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    3888:	eb06 2323 	add.w	r3, r6, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    388c:	eb05 2121 	add.w	r1, r5, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    3890:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3894:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    3896:	f880 127e 	strb.w	r1, [r0, #638]	; 0x27e
    389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    389c:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    38a0:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    38a4:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    38a8:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    38ac:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    38b0:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    38b4:	2a00      	cmp	r2, #0
    38b6:	d0c3      	beq.n	3840 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    38b8:	2325      	movs	r3, #37	; 0x25
    38ba:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
    38be:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    38c2:	e7bf      	b.n	3844 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    38c4:	1fff875a 	.word	0x1fff875a

000038c8 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    38c8:	4b19      	ldr	r3, [pc, #100]	; (3930 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    38ca:	4a1a      	ldr	r2, [pc, #104]	; (3934 <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    38cc:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    38ce:	2100      	movs	r1, #0
    38d0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    38d2:	2b05      	cmp	r3, #5
    38d4:	d808      	bhi.n	38e8 <fire_update(LEDStruct&)+0x20>
    38d6:	e8df f003 	tbb	[pc, r3]
    38da:	150f      	.short	0x150f
    38dc:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
    38e0:	4b15      	ldr	r3, [pc, #84]	; (3938 <fire_update(LEDStruct&)+0x70>)
    38e2:	881b      	ldrh	r3, [r3, #0]
    38e4:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    38e8:	f7fe bb12 	b.w	1f10 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    38ec:	4b12      	ldr	r3, [pc, #72]	; (3938 <fire_update(LEDStruct&)+0x70>)
    38ee:	881b      	ldrh	r3, [r3, #0]
    38f0:	f880 331a 	strb.w	r3, [r0, #794]	; 0x31a
		default:	break;
	}
	LEDDebug(leds);
    38f4:	f7fe bb0c 	b.w	1f10 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    38f8:	4b0f      	ldr	r3, [pc, #60]	; (3938 <fire_update(LEDStruct&)+0x70>)
    38fa:	881b      	ldrh	r3, [r3, #0]
    38fc:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3900:	f7fe bb06 	b.w	1f10 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    3904:	4b0c      	ldr	r3, [pc, #48]	; (3938 <fire_update(LEDStruct&)+0x70>)
    3906:	881b      	ldrh	r3, [r3, #0]
    3908:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    390c:	f7fe bb00 	b.w	1f10 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    3910:	4b09      	ldr	r3, [pc, #36]	; (3938 <fire_update(LEDStruct&)+0x70>)
    3912:	881b      	ldrh	r3, [r3, #0]
    3914:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3918:	f7fe bafa 	b.w	1f10 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2 = (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    391c:	4b06      	ldr	r3, [pc, #24]	; (3938 <fire_update(LEDStruct&)+0x70>)
    391e:	881b      	ldrh	r3, [r3, #0]
    3920:	3300      	adds	r3, #0
    3922:	bf18      	it	ne
    3924:	2301      	movne	r3, #1
    3926:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    392a:	f7fe baf1 	b.w	1f10 <LEDDebug(LEDStruct&)>
    392e:	bf00      	nop
    3930:	1fff95d0 	.word	0x1fff95d0
    3934:	1fff95c1 	.word	0x1fff95c1
    3938:	1fff95c8 	.word	0x1fff95c8

0000393c <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3940:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3944:	4dd0      	ldr	r5, [pc, #832]	; (3c88 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    3946:	b086      	sub	sp, #24
    3948:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    394a:	2b00      	cmp	r3, #0
    394c:	f000 8229 	beq.w	3da2 <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    3950:	4bce      	ldr	r3, [pc, #824]	; (3c8c <fire(LEDStruct&)+0x350>)
    3952:	781b      	ldrb	r3, [r3, #0]
    3954:	2b00      	cmp	r3, #0
    3956:	f040 8220 	bne.w	3d9a <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    395a:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    395e:	2b00      	cmp	r3, #0
    3960:	f000 82d1 	beq.w	3f06 <fire(LEDStruct&)+0x5ca>
    3964:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3968:	882a      	ldrh	r2, [r5, #0]
    396a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    396e:	004f      	lsls	r7, r1, #1
    3970:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
    3974:	fb97 f7f3 	sdiv	r7, r7, r3
    3978:	3702      	adds	r7, #2
    397a:	b2ff      	uxtb	r7, r7
    397c:	44a6      	add	lr, r4
    397e:	f204 267e 	addw	r6, r4, #638	; 0x27e
    3982:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3986:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    398a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    398e:	3219      	adds	r2, #25
    3990:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3992:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3996:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    399a:	b2c9      	uxtb	r1, r1
    399c:	fb11 f107 	smulbb	r1, r1, r7
    39a0:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    39a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    39a8:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    39aa:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    39ac:	d1e9      	bne.n	3982 <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    39ae:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    39b2:	802a      	strh	r2, [r5, #0]
    39b4:	2e00      	cmp	r6, #0
    39b6:	f000 80f5 	beq.w	3ba4 <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    39ba:	f1a3 0e03 	sub.w	lr, r3, #3
    39be:	f1be 0f01 	cmp.w	lr, #1
    39c2:	f04f 0c01 	mov.w	ip, #1
    39c6:	dd1a      	ble.n	39fe <fire(LEDStruct&)+0xc2>
    39c8:	f203 207b 	addw	r0, r3, #635	; 0x27b
    39cc:	f203 277d 	addw	r7, r3, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    39d0:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 3c90 <fire(LEDStruct&)+0x354>
    39d4:	4420      	add	r0, r4
    39d6:	4427      	add	r7, r4
    39d8:	f204 287f 	addw	r8, r4, #639	; 0x27f
    39dc:	7801      	ldrb	r1, [r0, #0]
    39de:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    39e2:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    39e6:	fb89 a601 	smull	sl, r6, r9, r1
    39ea:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    39ee:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    39f0:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    39f4:	d1f2      	bne.n	39dc <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    39f6:	f1bc 0f00 	cmp.w	ip, #0
    39fa:	f000 8102 	beq.w	3c02 <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39fe:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3a02:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3a06:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a0a:	3219      	adds	r2, #25
    3a0c:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    3a0e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    3a12:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    3a16:	802a      	strh	r2, [r5, #0]
    3a18:	b2c9      	uxtb	r1, r1
    3a1a:	428e      	cmp	r6, r1
    3a1c:	489a      	ldr	r0, [pc, #616]	; (3c88 <fire(LEDStruct&)+0x34c>)
    3a1e:	d926      	bls.n	3a6e <fire(LEDStruct&)+0x132>
    3a20:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3a24:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3a28:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a2c:	3219      	adds	r2, #25
    3a2e:	b292      	uxth	r2, r2
    3a30:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3a34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3a38:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3a3c:	3619      	adds	r6, #25
    3a3e:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a40:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    3a44:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3a48:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3a4a:	b2d2      	uxtb	r2, r2
    3a4c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    3a50:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    3a54:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3a58:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    3a5c:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a5e:	8006      	strh	r6, [r0, #0]
    3a60:	3960      	subs	r1, #96	; 0x60
    3a62:	f892 027f 	ldrb.w	r0, [r2, #639]	; 0x27f
    3a66:	fa80 f051 	uqadd8	r0, r0, r1
    3a6a:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}

	if (!leds.fire_sync) {
    3a6e:	f1bc 0f00 	cmp.w	ip, #0
    3a72:	d112      	bne.n	3a9a <fire(LEDStruct&)+0x15e>
    3a74:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    3a76:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    3a7a:	4983      	ldr	r1, [pc, #524]	; (3c88 <fire(LEDStruct&)+0x34c>)
    3a7c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3a80:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3a84:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a88:	3219      	adds	r2, #25
    3a8a:	b292      	uxth	r2, r2
    3a8c:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3a90:	b2c0      	uxtb	r0, r0
    3a92:	4286      	cmp	r6, r0
    3a94:	802a      	strh	r2, [r5, #0]
    3a96:	f200 80cd 	bhi.w	3c34 <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    3a9a:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3a9e:	2a00      	cmp	r2, #0
    3aa0:	d15f      	bne.n	3b62 <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	f000 8226 	beq.w	3ef4 <fire(LEDStruct&)+0x5b8>
    3aa8:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3aac:	4690      	mov	r8, r2
    3aae:	46b9      	mov	r9, r7
    3ab0:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    3ab2:	3b01      	subs	r3, #1
    3ab4:	ebc8 0503 	rsb	r5, r8, r3
    3ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3abc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3ac0:	4630      	mov	r0, r6
    3ac2:	f005 f8a3 	bl	8c0c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ac6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3aca:	5563      	strb	r3, [r4, r5]
    3acc:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3ace:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3ad2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3ad6:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3ad8:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3ada:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3ade:	f108 0801 	add.w	r8, r8, #1
    3ae2:	4543      	cmp	r3, r8
    3ae4:	dce5      	bgt.n	3ab2 <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3ae6:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3aea:	b30a      	cbz	r2, 3b30 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    3aec:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3af0:	2a00      	cmp	r2, #0
    3af2:	f040 81bf 	bne.w	3e74 <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3af6:	4690      	mov	r8, r2
    3af8:	2b00      	cmp	r3, #0
    3afa:	f000 81fe 	beq.w	3efa <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    3afe:	eb08 0503 	add.w	r5, r8, r3
    3b02:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3b06:	4630      	mov	r0, r6
    3b08:	f005 f880 	bl	8c0c <HeatColor(unsigned char)>
    3b0c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b10:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3b14:	54e2      	strb	r2, [r4, r3]
    3b16:	4423      	add	r3, r4
        g = rhs.g;
    3b18:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    3b1c:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3b20:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    3b22:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3b24:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3b28:	f108 0801 	add.w	r8, r8, #1
    3b2c:	4543      	cmp	r3, r8
    3b2e:	dce6      	bgt.n	3afe <fire(LEDStruct&)+0x1c2>
    3b30:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3b34:	2a00      	cmp	r2, #0
    3b36:	f000 80ad 	beq.w	3c94 <fire(LEDStruct&)+0x358>
    3b3a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3b3e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b40:	781a      	ldrb	r2, [r3, #0]
    3b42:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    3b46:	785a      	ldrb	r2, [r3, #1]
    3b48:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    3b4c:	789a      	ldrb	r2, [r3, #2]
    3b4e:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    3b52:	3303      	adds	r3, #3
    3b54:	4299      	cmp	r1, r3
    3b56:	f1a4 0403 	sub.w	r4, r4, #3
    3b5a:	d1f1      	bne.n	3b40 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3b5c:	b006      	add	sp, #24
    3b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    3b62:	2b00      	cmp	r3, #0
    3b64:	f000 80ea 	beq.w	3d3c <fire(LEDStruct&)+0x400>
    3b68:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3b6c:	46b9      	mov	r9, r7
    3b6e:	4625      	mov	r5, r4
    3b70:	f04f 0800 	mov.w	r8, #0
    3b74:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    3b76:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3b7a:	4630      	mov	r0, r6
    3b7c:	f005 f846 	bl	8c0c <HeatColor(unsigned char)>
    3b80:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b84:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3b88:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b8c:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    3b8e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3b90:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    3b92:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3b96:	f108 0801 	add.w	r8, r8, #1
    3b9a:	4543      	cmp	r3, r8
    3b9c:	f105 0503 	add.w	r5, r5, #3
    3ba0:	dce9      	bgt.n	3b76 <fire(LEDStruct&)+0x23a>
    3ba2:	e7a0      	b.n	3ae6 <fire(LEDStruct&)+0x1aa>
    3ba4:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    3ba8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3bac:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3bb0:	fb9e fef3 	sdiv	lr, lr, r3
    3bb4:	f10e 0e02 	add.w	lr, lr, #2
    3bb8:	fa5f fe8e 	uxtb.w	lr, lr
    3bbc:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3bc0:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3bc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3bc8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3bcc:	3219      	adds	r2, #25
    3bce:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3bd0:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3bd4:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3bd8:	b2c9      	uxtb	r1, r1
    3bda:	fb11 f10e 	smulbb	r1, r1, lr
    3bde:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3be2:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3be4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3be8:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3bea:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3bec:	dbe8      	blt.n	3bc0 <fire(LEDStruct&)+0x284>
    3bee:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3bf0:	f1a3 0e03 	sub.w	lr, r3, #3
    3bf4:	f1be 0f01 	cmp.w	lr, #1
    3bf8:	f04f 0c00 	mov.w	ip, #0
    3bfc:	f73f aee4 	bgt.w	39c8 <fire(LEDStruct&)+0x8c>
    3c00:	e6fd      	b.n	39fe <fire(LEDStruct&)+0xc2>
    3c02:	f203 26c6 	addw	r6, r3, #710	; 0x2c6
    3c06:	f503 7732 	add.w	r7, r3, #712	; 0x2c8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3c0a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3c90 <fire(LEDStruct&)+0x354>
    3c0e:	4426      	add	r6, r4
    3c10:	4427      	add	r7, r4
    3c12:	7831      	ldrb	r1, [r6, #0]
    3c14:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3c18:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3c1c:	fb88 9001 	smull	r9, r0, r8, r1
    3c20:	f10e 3eff 	add.w	lr, lr, #4294967295
    3c24:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3c28:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3c2c:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3c30:	d1ef      	bne.n	3c12 <fire(LEDStruct&)+0x2d6>
    3c32:	e6e4      	b.n	39fe <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c34:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3c38:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3c3c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c40:	3219      	adds	r2, #25
    3c42:	b292      	uxth	r2, r2
    3c44:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3c48:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3c4c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3c50:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c52:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c56:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c58:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c5a:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c5e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3c62:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3c64:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3c68:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3c6c:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3c70:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c74:	800d      	strh	r5, [r1, #0]
    3c76:	1201      	asrs	r1, r0, #8
    3c78:	3960      	subs	r1, #96	; 0x60
    3c7a:	4630      	mov	r0, r6
    3c7c:	fa80 f051 	uqadd8	r0, r0, r1
    3c80:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
    3c84:	e709      	b.n	3a9a <fire(LEDStruct&)+0x15e>
    3c86:	bf00      	nop
    3c88:	1fff875a 	.word	0x1fff875a
    3c8c:	1fff95c1 	.word	0x1fff95c1
    3c90:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    3c94:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3c98:	2a00      	cmp	r2, #0
    3c9a:	d15a      	bne.n	3d52 <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	f43f af5d 	beq.w	3b5c <fire(LEDStruct&)+0x220>
    3ca2:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3ca6:	46b9      	mov	r9, r7
    3ca8:	f04f 0800 	mov.w	r8, #0
    3cac:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    3cae:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    3cb2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3cb6:	354b      	adds	r5, #75	; 0x4b
    3cb8:	4445      	add	r5, r8
    3cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3cbe:	4630      	mov	r0, r6
    3cc0:	f004 ffa4 	bl	8c0c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3cc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3cc8:	5563      	strb	r3, [r4, r5]
    3cca:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3ccc:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3cd0:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3cd4:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3cd6:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3cd8:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3cdc:	f108 0801 	add.w	r8, r8, #1
    3ce0:	4543      	cmp	r3, r8
    3ce2:	dce4      	bgt.n	3cae <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    3ce4:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3ce8:	2a00      	cmp	r2, #0
    3cea:	f43f af37 	beq.w	3b5c <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    3cee:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3cf2:	2a00      	cmp	r2, #0
    3cf4:	f000 80dd 	beq.w	3eb2 <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	f43f af2f 	beq.w	3b5c <fire(LEDStruct&)+0x220>
    3cfe:	4625      	mov	r5, r4
    3d00:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    3d04:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3d08:	4630      	mov	r0, r6
    3d0a:	f004 ff7f 	bl	8c0c <HeatColor(unsigned char)>
    3d0e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d12:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3d16:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d1a:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    3d1e:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    3d22:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    3d26:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3d2a:	f108 0801 	add.w	r8, r8, #1
    3d2e:	4543      	cmp	r3, r8
    3d30:	f105 0503 	add.w	r5, r5, #3
    3d34:	dce6      	bgt.n	3d04 <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3d36:	b006      	add	sp, #24
    3d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3d3c:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3d40:	2b00      	cmp	r3, #0
    3d42:	f040 80da 	bne.w	3efa <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3d46:	f1bc 0f00 	cmp.w	ip, #0
    3d4a:	f47f aef6 	bne.w	3b3a <fire(LEDStruct&)+0x1fe>
    3d4e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3d52:	2b00      	cmp	r3, #0
    3d54:	f43f af02 	beq.w	3b5c <fire(LEDStruct&)+0x220>
    3d58:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3d5c:	46b9      	mov	r9, r7
    3d5e:	4625      	mov	r5, r4
    3d60:	f04f 0800 	mov.w	r8, #0
    3d64:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    3d66:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3d6a:	4630      	mov	r0, r6
    3d6c:	f004 ff4e 	bl	8c0c <HeatColor(unsigned char)>
    3d70:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d74:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3d78:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d7c:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    3d80:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    3d84:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3d88:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3d8c:	f108 0801 	add.w	r8, r8, #1
    3d90:	4543      	cmp	r3, r8
    3d92:	f1a5 0503 	sub.w	r5, r5, #3
    3d96:	dce6      	bgt.n	3d66 <fire(LEDStruct&)+0x42a>
    3d98:	e7a4      	b.n	3ce4 <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    3d9a:	4620      	mov	r0, r4
    3d9c:	f7ff fd94 	bl	38c8 <fire_update(LEDStruct&)>
    3da0:	e5db      	b.n	395a <fire(LEDStruct&)+0x1e>
    3da2:	882b      	ldrh	r3, [r5, #0]
    3da4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3da8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3dac:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3db0:	3119      	adds	r1, #25
    3db2:	b289      	uxth	r1, r1
    3db4:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3db8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3dbc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3dc0:	3219      	adds	r2, #25
    3dc2:	b292      	uxth	r2, r2
    3dc4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3dc8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3dcc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3dd0:	f10e 0e19 	add.w	lr, lr, #25
    3dd4:	fa1f fe8e 	uxth.w	lr, lr
    3dd8:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3ddc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3de0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3de4:	3619      	adds	r6, #25
    3de6:	b2b6      	uxth	r6, r6
    3de8:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3dec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3df0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3df4:	3319      	adds	r3, #25
    3df6:	b29b      	uxth	r3, r3
    3df8:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3dfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e00:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3e04:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e08:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e0c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3e10:	b2f6      	uxtb	r6, r6
    3e12:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e16:	3719      	adds	r7, #25
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3e1e:	b2bf      	uxth	r7, r7
    3e20:	11b6      	asrs	r6, r6, #6
    3e22:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3e26:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3e2a:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3e2e:	119b      	asrs	r3, r3, #6
    3e30:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e34:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3e38:	333c      	adds	r3, #60	; 0x3c
    3e3a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3e3e:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3e42:	fa5f f883 	uxtb.w	r8, r3
    3e46:	fa5f fc8c 	uxtb.w	ip, ip
    3e4a:	3601      	adds	r6, #1
    3e4c:	f10e 0314 	add.w	r3, lr, #20
    3e50:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3e54:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3e58:	f8cd c000 	str.w	ip, [sp]
    3e5c:	f8cd 8004 	str.w	r8, [sp, #4]
    3e60:	9602      	str	r6, [sp, #8]
    3e62:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3e66:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3e6a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e6c:	802f      	strh	r7, [r5, #0]
    3e6e:	f7ff fcc3 	bl	37f8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3e72:	e56d      	b.n	3950 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3e74:	2b00      	cmp	r3, #0
    3e76:	d040      	beq.n	3efa <fire(LEDStruct&)+0x5be>
    3e78:	4625      	mov	r5, r4
    3e7a:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    3e7e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3e82:	4630      	mov	r0, r6
    3e84:	f004 fec2 	bl	8c0c <HeatColor(unsigned char)>
    3e88:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e8c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3e90:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e94:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    3e98:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    3e9c:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3ea0:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3ea4:	f108 0801 	add.w	r8, r8, #1
    3ea8:	4543      	cmp	r3, r8
    3eaa:	f1a5 0503 	sub.w	r5, r5, #3
    3eae:	dce6      	bgt.n	3e7e <fire(LEDStruct&)+0x542>
    3eb0:	e63e      	b.n	3b30 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3eb2:	4690      	mov	r8, r2
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	f43f ae51 	beq.w	3b5c <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    3eba:	334b      	adds	r3, #75	; 0x4b
    3ebc:	ebc8 0503 	rsb	r5, r8, r3
    3ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3ec4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3ec8:	4630      	mov	r0, r6
    3eca:	f004 fe9f 	bl	8c0c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ece:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3ed2:	5563      	strb	r3, [r4, r5]
    3ed4:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3ed6:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3eda:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3ede:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3ee0:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3ee2:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3ee6:	f108 0801 	add.w	r8, r8, #1
    3eea:	4543      	cmp	r3, r8
    3eec:	dce5      	bgt.n	3eba <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3eee:	b006      	add	sp, #24
    3ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3ef4:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3ef8:	b163      	cbz	r3, 3f14 <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3efa:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    3efe:	2b00      	cmp	r3, #0
    3f00:	f47f ae1b 	bne.w	3b3a <fire(LEDStruct&)+0x1fe>
    3f04:	e62a      	b.n	3b5c <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    3f06:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    3f0a:	b10a      	cbz	r2, 3f10 <fire(LEDStruct&)+0x5d4>
    3f0c:	882a      	ldrh	r2, [r5, #0]
    3f0e:	e554      	b.n	39ba <fire(LEDStruct&)+0x7e>
    3f10:	882a      	ldrh	r2, [r5, #0]
    3f12:	e66d      	b.n	3bf0 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3f14:	f1bc 0f00 	cmp.w	ip, #0
    3f18:	f47f ae0f 	bne.w	3b3a <fire(LEDStruct&)+0x1fe>
    3f1c:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3f20:	e6bc      	b.n	3c9c <fire(LEDStruct&)+0x360>
    3f22:	bf00      	nop

00003f24 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    3f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3f28:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3f2c:	4dd0      	ldr	r5, [pc, #832]	; (4270 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    3f2e:	b087      	sub	sp, #28
    3f30:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    3f32:	2b00      	cmp	r3, #0
    3f34:	f000 81da 	beq.w	42ec <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    3f38:	4bce      	ldr	r3, [pc, #824]	; (4274 <torch(LEDStruct&)+0x350>)
    3f3a:	781b      	ldrb	r3, [r3, #0]
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	f040 8242 	bne.w	43c6 <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3f42:	f894 c315 	ldrb.w	ip, [r4, #789]	; 0x315
    3f46:	4663      	mov	r3, ip
    3f48:	f1bc 0f00 	cmp.w	ip, #0
    3f4c:	f000 823f 	beq.w	43ce <torch(LEDStruct&)+0x4aa>
    3f50:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3f54:	882a      	ldrh	r2, [r5, #0]
    3f56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3f5a:	004f      	lsls	r7, r1, #1
    3f5c:	f20c 2e7e 	addw	lr, ip, #638	; 0x27e
    3f60:	fb97 f7fc 	sdiv	r7, r7, ip
    3f64:	3702      	adds	r7, #2
    3f66:	b2ff      	uxtb	r7, r7
    3f68:	44a6      	add	lr, r4
    3f6a:	f204 267e 	addw	r6, r4, #638	; 0x27e
    3f6e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3f72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3f76:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f7a:	3219      	adds	r2, #25
    3f7c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f7e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3f82:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3f86:	b2c9      	uxtb	r1, r1
    3f88:	fb11 f107 	smulbb	r1, r1, r7
    3f8c:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3f90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3f94:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3f96:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3f98:	d1e9      	bne.n	3f6e <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3f9a:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    3f9e:	802a      	strh	r2, [r5, #0]
    3fa0:	2e00      	cmp	r6, #0
    3fa2:	f000 816b 	beq.w	427c <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3fa6:	f1ac 0703 	sub.w	r7, ip, #3
    3faa:	2f01      	cmp	r7, #1
    3fac:	f04f 0901 	mov.w	r9, #1
    3fb0:	dd1a      	ble.n	3fe8 <torch(LEDStruct&)+0xc4>
    3fb2:	f20c 207b 	addw	r0, ip, #635	; 0x27b
    3fb6:	f20c 267d 	addw	r6, ip, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3fba:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 4278 <torch(LEDStruct&)+0x354>
    3fbe:	4420      	add	r0, r4
    3fc0:	4426      	add	r6, r4
    3fc2:	f204 2e7f 	addw	lr, r4, #639	; 0x27f
    3fc6:	7801      	ldrb	r1, [r0, #0]
    3fc8:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    3fcc:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    3fd0:	fb88 ba01 	smull	fp, sl, r8, r1
    3fd4:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3fd8:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3fda:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3fde:	d1f2      	bne.n	3fc6 <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    3fe0:	f1b9 0f00 	cmp.w	r9, #0
    3fe4:	f000 812c 	beq.w	4240 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fe8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3fec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3ff0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3ff4:	3219      	adds	r2, #25
    3ff6:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    3ff8:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3ffc:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    4000:	802a      	strh	r2, [r5, #0]
    4002:	b2c0      	uxtb	r0, r0
    4004:	4286      	cmp	r6, r0
    4006:	499a      	ldr	r1, [pc, #616]	; (4270 <torch(LEDStruct&)+0x34c>)
    4008:	d928      	bls.n	405c <torch(LEDStruct&)+0x138>
    400a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    400e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4012:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4016:	3219      	adds	r2, #25
    4018:	b292      	uxth	r2, r2
    401a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    401e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4022:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4026:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4028:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    402c:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    402e:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4030:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4034:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4038:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    403a:	eb04 2222 	add.w	r2, r4, r2, asr #8
    403e:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4042:	800e      	strh	r6, [r1, #0]
    4044:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4048:	f892 627f 	ldrb.w	r6, [r2, #639]	; 0x27f
    404c:	1200      	asrs	r0, r0, #8
    404e:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    4052:	4630      	mov	r0, r6
    4054:	fa80 f051 	uqadd8	r0, r0, r1
    4058:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}
	if (!leds.fire_sync) {
    405c:	f1b9 0f00 	cmp.w	r9, #0
    4060:	d112      	bne.n	4088 <torch(LEDStruct&)+0x164>
    4062:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4064:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4068:	4981      	ldr	r1, [pc, #516]	; (4270 <torch(LEDStruct&)+0x34c>)
    406a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    406e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4072:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4076:	3219      	adds	r2, #25
    4078:	b292      	uxth	r2, r2
    407a:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    407e:	b2c0      	uxtb	r0, r0
    4080:	4286      	cmp	r6, r0
    4082:	802a      	strh	r2, [r5, #0]
    4084:	f200 80af 	bhi.w	41e6 <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4088:	f1bc 0f00 	cmp.w	ip, #0
    408c:	f000 81a4 	beq.w	43d8 <torch(LEDStruct&)+0x4b4>
    4090:	f204 277e 	addw	r7, r4, #638	; 0x27e
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4094:	2600      	movs	r6, #0
    4096:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    409a:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    409e:	199d      	adds	r5, r3, r6
    40a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    40a4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    40a8:	4648      	mov	r0, r9
    40aa:	f004 fdaf 	bl	8c0c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    40ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
    40b2:	5563      	strb	r3, [r4, r5]
    40b4:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    40b6:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    40ba:	f89d 2015 	ldrb.w	r2, [sp, #21]
    40be:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    40c0:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    40c2:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    40c6:	3601      	adds	r6, #1
    40c8:	42b3      	cmp	r3, r6
    40ca:	dce6      	bgt.n	409a <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    40cc:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    40d0:	2e00      	cmp	r6, #0
    40d2:	d175      	bne.n	41c0 <torch(LEDStruct&)+0x29c>
    40d4:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    40d8:	2b00      	cmp	r3, #0
    40da:	f000 8183 	beq.w	43e4 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    40de:	334a      	adds	r3, #74	; 0x4a
    40e0:	1b9d      	subs	r5, r3, r6
    40e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    40e6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    40ea:	4648      	mov	r0, r9
    40ec:	f004 fd8e 	bl	8c0c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    40f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    40f4:	5563      	strb	r3, [r4, r5]
    40f6:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    40f8:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    40fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4100:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4102:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4104:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    4108:	3601      	adds	r6, #1
    410a:	42b3      	cmp	r3, r6
    410c:	dce7      	bgt.n	40de <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    410e:	2b4b      	cmp	r3, #75	; 0x4b
    4110:	d047      	beq.n	41a2 <torch(LEDStruct&)+0x27e>
    4112:	f10d 0914 	add.w	r9, sp, #20
    4116:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    411a:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    411c:	4626      	mov	r6, r4
    411e:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4120:	f04f 0a01 	mov.w	sl, #1
    4124:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4128:	f8cd a000 	str.w	sl, [sp]
    412c:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    4130:	fb98 f3f3 	sdiv	r3, r8, r3
    4134:	441a      	add	r2, r3
    4136:	b2d2      	uxtb	r2, r2
    4138:	23ff      	movs	r3, #255	; 0xff
    413a:	4659      	mov	r1, fp
    413c:	4648      	mov	r0, r9
    413e:	f004 fd87 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4142:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4146:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    414a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    414e:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4150:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4152:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4154:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4158:	f894 2315 	ldrb.w	r2, [r4, #789]	; 0x315
    415c:	fb98 f8f2 	sdiv	r8, r8, r2
    4160:	eb08 0203 	add.w	r2, r8, r3
    4164:	b2d2      	uxtb	r2, r2
    4166:	23ff      	movs	r3, #255	; 0xff
    4168:	4659      	mov	r1, fp
    416a:	f8cd a000 	str.w	sl, [sp]
    416e:	4648      	mov	r0, r9
    4170:	f004 fd6e 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4174:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4178:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    417c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4180:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4184:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    4188:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    418c:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    4190:	3501      	adds	r5, #1
    4192:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    4196:	42aa      	cmp	r2, r5
    4198:	f106 0603 	add.w	r6, r6, #3
    419c:	f1a7 0703 	sub.w	r7, r7, #3
    41a0:	dcc0      	bgt.n	4124 <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    41a2:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    41a6:	2b00      	cmp	r3, #0
    41a8:	f040 8096 	bne.w	42d8 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    41ac:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    41b0:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    41b4:	1a9b      	subs	r3, r3, r2
    41b6:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
}
    41ba:	b007      	add	sp, #28
    41bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41c0:	4621      	mov	r1, r4
    41c2:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    41c6:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    41c8:	7810      	ldrb	r0, [r2, #0]
    41ca:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    41ce:	7850      	ldrb	r0, [r2, #1]
    41d0:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    41d4:	7890      	ldrb	r0, [r2, #2]
    41d6:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    41da:	3203      	adds	r2, #3
    41dc:	4295      	cmp	r5, r2
    41de:	f1a1 0103 	sub.w	r1, r1, #3
    41e2:	d1f1      	bne.n	41c8 <torch(LEDStruct&)+0x2a4>
    41e4:	e793      	b.n	410e <torch(LEDStruct&)+0x1ea>
    41e6:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    41ea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    41ee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    41f2:	3219      	adds	r2, #25
    41f4:	b292      	uxth	r2, r2
    41f6:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    41fa:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    41fe:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4202:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4204:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4208:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    420a:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    420c:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4210:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4214:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4216:	eb04 2222 	add.w	r2, r4, r2, asr #8
    421a:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    421e:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4222:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4226:	800d      	strh	r5, [r1, #0]
    4228:	1201      	asrs	r1, r0, #8
    422a:	3960      	subs	r1, #96	; 0x60
    422c:	4630      	mov	r0, r6
    422e:	fa80 f051 	uqadd8	r0, r0, r1
    4232:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4236:	f1bc 0f00 	cmp.w	ip, #0
    423a:	f47f af29 	bne.w	4090 <torch(LEDStruct&)+0x16c>
    423e:	e0cf      	b.n	43e0 <torch(LEDStruct&)+0x4bc>
    4240:	f20c 26c6 	addw	r6, ip, #710	; 0x2c6
    4244:	f50c 7e32 	add.w	lr, ip, #712	; 0x2c8
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4248:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4278 <torch(LEDStruct&)+0x354>
    424c:	4426      	add	r6, r4
    424e:	44a6      	add	lr, r4
    4250:	7831      	ldrb	r1, [r6, #0]
    4252:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    4256:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    425a:	fb88 a001 	smull	sl, r0, r8, r1
    425e:	3f01      	subs	r7, #1
    4260:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4264:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4266:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    426a:	d1f1      	bne.n	4250 <torch(LEDStruct&)+0x32c>
    426c:	e6bc      	b.n	3fe8 <torch(LEDStruct&)+0xc4>
    426e:	bf00      	nop
    4270:	1fff875a 	.word	0x1fff875a
    4274:	1fff95c1 	.word	0x1fff95c1
    4278:	55555556 	.word	0x55555556
    427c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4280:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4284:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4288:	fb9e fefc 	sdiv	lr, lr, ip
    428c:	f10e 0e02 	add.w	lr, lr, #2
    4290:	fa5f fe8e 	uxtb.w	lr, lr
    4294:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    4298:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    429c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    42a0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    42a4:	3219      	adds	r2, #25
    42a6:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42a8:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    42ac:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    42b0:	b2c9      	uxtb	r1, r1
    42b2:	fb11 f10e 	smulbb	r1, r1, lr
    42b6:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    42ba:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    42bc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    42c0:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    42c2:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    42c4:	dbe8      	blt.n	4298 <torch(LEDStruct&)+0x374>
    42c6:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    42c8:	f1ac 0703 	sub.w	r7, ip, #3
    42cc:	2f01      	cmp	r7, #1
    42ce:	f04f 0900 	mov.w	r9, #0
    42d2:	f73f ae6e 	bgt.w	3fb2 <torch(LEDStruct&)+0x8e>
    42d6:	e687      	b.n	3fe8 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    42d8:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    42dc:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    42e0:	4413      	add	r3, r2
    42e2:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
	else			   { leds.torch_index -= leds.torch_diff; }
}
    42e6:	b007      	add	sp, #28
    42e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42ec:	882b      	ldrh	r3, [r5, #0]
    42ee:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    42f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    42f6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    42fa:	3119      	adds	r1, #25
    42fc:	b289      	uxth	r1, r1
    42fe:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4302:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4306:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    430a:	3219      	adds	r2, #25
    430c:	b292      	uxth	r2, r2
    430e:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4312:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4316:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    431a:	f10e 0e19 	add.w	lr, lr, #25
    431e:	fa1f fe8e 	uxth.w	lr, lr
    4322:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4326:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    432a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    432e:	3619      	adds	r6, #25
    4330:	b2b6      	uxth	r6, r6
    4332:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4336:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    433a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    433e:	3319      	adds	r3, #25
    4340:	b29b      	uxth	r3, r3
    4342:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4346:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    434a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    434e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4352:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4356:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    435a:	b2f6      	uxtb	r6, r6
    435c:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4360:	3719      	adds	r7, #25
    4362:	b2db      	uxtb	r3, r3
    4364:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4368:	b2bf      	uxth	r7, r7
    436a:	11b6      	asrs	r6, r6, #6
    436c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    4370:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4374:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4378:	119b      	asrs	r3, r3, #6
    437a:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    437e:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    4382:	333c      	adds	r3, #60	; 0x3c
    4384:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4388:	f3c6 1681 	ubfx	r6, r6, #6, #2
    438c:	fa5f fc8c 	uxtb.w	ip, ip
    4390:	fa5f f883 	uxtb.w	r8, r3
    4394:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4398:	f10e 0314 	add.w	r3, lr, #20
    439c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    43a0:	3601      	adds	r6, #1
    43a2:	f8cd c000 	str.w	ip, [sp]
    43a6:	f8cd 8004 	str.w	r8, [sp, #4]
    43aa:	9602      	str	r6, [sp, #8]
    43ac:	b2db      	uxtb	r3, r3
    43ae:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    43b2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43b6:	802f      	strh	r7, [r5, #0]
    43b8:	f7ff fa1e 	bl	37f8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    43bc:	4b0b      	ldr	r3, [pc, #44]	; (43ec <torch(LEDStruct&)+0x4c8>)
    43be:	781b      	ldrb	r3, [r3, #0]
    43c0:	2b00      	cmp	r3, #0
    43c2:	f43f adbe 	beq.w	3f42 <torch(LEDStruct&)+0x1e>
    43c6:	4620      	mov	r0, r4
    43c8:	f7ff fa7e 	bl	38c8 <fire_update(LEDStruct&)>
    43cc:	e5b9      	b.n	3f42 <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    43ce:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    43d2:	b14a      	cbz	r2, 43e8 <torch(LEDStruct&)+0x4c4>
    43d4:	882a      	ldrh	r2, [r5, #0]
    43d6:	e5e6      	b.n	3fa6 <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    43d8:	f1b9 0f00 	cmp.w	r9, #0
    43dc:	f47f aef0 	bne.w	41c0 <torch(LEDStruct&)+0x29c>
    43e0:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    43e4:	2300      	movs	r3, #0
    43e6:	e696      	b.n	4116 <torch(LEDStruct&)+0x1f2>
    43e8:	882a      	ldrh	r2, [r5, #0]
    43ea:	e76d      	b.n	42c8 <torch(LEDStruct&)+0x3a4>
    43ec:	1fff95c1 	.word	0x1fff95c1

000043f0 <confetti_update(LEDStruct&)>:
	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    43f0:	4b0e      	ldr	r3, [pc, #56]	; (442c <confetti_update(LEDStruct&)+0x3c>)

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    43f2:	4a0f      	ldr	r2, [pc, #60]	; (4430 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    43f4:	781b      	ldrb	r3, [r3, #0]

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    43f6:	2100      	movs	r1, #0
    43f8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    43fa:	b13b      	cbz	r3, 440c <confetti_update(LEDStruct&)+0x1c>
    43fc:	2b01      	cmp	r3, #1
    43fe:	d103      	bne.n	4408 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    4400:	4b0c      	ldr	r3, [pc, #48]	; (4434 <confetti_update(LEDStruct&)+0x44>)
    4402:	881b      	ldrh	r3, [r3, #0]
    4404:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    4408:	f7fd bd82 	b.w	1f10 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    440c:	4b09      	ldr	r3, [pc, #36]	; (4434 <confetti_update(LEDStruct&)+0x44>)
    440e:	881b      	ldrh	r3, [r3, #0]
    4410:	2b00      	cmp	r3, #0
    4412:	bf14      	ite	ne
    4414:	2301      	movne	r3, #1
    4416:	2300      	moveq	r3, #0
    4418:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    441c:	bf14      	ite	ne
    441e:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    4420:	234b      	moveq	r3, #75	; 0x4b
    4422:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    4426:	f7fd bd73 	b.w	1f10 <LEDDebug(LEDStruct&)>
    442a:	bf00      	nop
    442c:	1fff95d0 	.word	0x1fff95d0
    4430:	1fff95c1 	.word	0x1fff95c1
    4434:	1fff95c8 	.word	0x1fff95c8

00004438 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    4438:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    443a:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    443e:	4e49      	ldr	r6, [pc, #292]	; (4564 <confetti(LEDStruct&)+0x12c>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    4440:	b085      	sub	sp, #20
    4442:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    4444:	bb73      	cbnz	r3, 44a4 <confetti(LEDStruct&)+0x6c>
    4446:	8833      	ldrh	r3, [r6, #0]
    4448:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    444c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4450:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4454:	3319      	adds	r3, #25
    4456:	b29b      	uxth	r3, r3
    4458:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    445c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4460:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4464:	3119      	adds	r1, #25
    4466:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4468:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    446c:	b2d2      	uxtb	r2, r2
    446e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4472:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4474:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized = 1;
    4478:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    447a:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    447c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type = CONFETTI;
    4480:	2513      	movs	r5, #19
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4482:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4484:	b2d2      	uxtb	r2, r2
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    4486:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized = 1;
    448a:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    448e:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    4492:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4496:	2b00      	cmp	r3, #0
    4498:	d15c      	bne.n	4554 <confetti(LEDStruct&)+0x11c>
	else { leds.strip_range = ONE_SIDE; }
    449a:	234b      	movs	r3, #75	; 0x4b
    449c:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

	leds.confetti_fade = cf;
    44a0:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    44a4:	4b30      	ldr	r3, [pc, #192]	; (4568 <confetti(LEDStruct&)+0x130>)
    44a6:	781b      	ldrb	r3, [r3, #0]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d157      	bne.n	455c <confetti(LEDStruct&)+0x124>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    44ac:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    44b0:	4620      	mov	r0, r4
    44b2:	2196      	movs	r1, #150	; 0x96
    44b4:	f004 fb6c 	bl	8b90 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44b8:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    44ba:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44be:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    44c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    44c6:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    44ca:	3319      	adds	r3, #25
    44cc:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44ce:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    44d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    44d6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    44da:	3719      	adds	r7, #25
    44dc:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    44de:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    44e2:	fb03 f305 	mul.w	r3, r3, r5
    44e6:	2101      	movs	r1, #1
    44e8:	0c1d      	lsrs	r5, r3, #16
    44ea:	9100      	str	r1, [sp, #0]
    44ec:	a803      	add	r0, sp, #12
    44ee:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    44f2:	b2d2      	uxtb	r2, r2
    44f4:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44f6:	8037      	strh	r7, [r6, #0]
    44f8:	f004 fbaa 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    44fc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4500:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4502:	5ce2      	ldrb	r2, [r4, r3]
    4504:	f89d 000c 	ldrb.w	r0, [sp, #12]
    4508:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    450c:	54e2      	strb	r2, [r4, r3]
    450e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4512:	784a      	ldrb	r2, [r1, #1]
    4514:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4518:	704a      	strb	r2, [r1, #1]
    451a:	788b      	ldrb	r3, [r1, #2]
    451c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    4520:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4524:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    4526:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    452a:	b98b      	cbnz	r3, 4550 <confetti(LEDStruct&)+0x118>
    452c:	4620      	mov	r0, r4
    452e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4532:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4534:	781a      	ldrb	r2, [r3, #0]
    4536:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    453a:	785a      	ldrb	r2, [r3, #1]
    453c:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4540:	789a      	ldrb	r2, [r3, #2]
    4542:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4546:	3303      	adds	r3, #3
    4548:	428b      	cmp	r3, r1
    454a:	f1a0 0003 	sub.w	r0, r0, #3
    454e:	d1f1      	bne.n	4534 <confetti(LEDStruct&)+0xfc>
}
    4550:	b005      	add	sp, #20
    4552:	bdf0      	pop	{r4, r5, r6, r7, pc}
void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4554:	2396      	movs	r3, #150	; 0x96
    4556:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    455a:	e7a1      	b.n	44a0 <confetti(LEDStruct&)+0x68>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    455c:	4620      	mov	r0, r4
    455e:	f7ff ff47 	bl	43f0 <confetti_update(LEDStruct&)>
    4562:	e7a3      	b.n	44ac <confetti(LEDStruct&)+0x74>
    4564:	1fff875a 	.word	0x1fff875a
    4568:	1fff95c1 	.word	0x1fff95c1

0000456c <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    456c:	4b24      	ldr	r3, [pc, #144]	; (4600 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    456e:	4a25      	ldr	r2, [pc, #148]	; (4604 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    4570:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4572:	2100      	movs	r1, #0
    4574:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4576:	2b09      	cmp	r3, #9
    4578:	d80a      	bhi.n	4590 <one_sin_update(LEDStruct&)+0x24>
    457a:	e8df f003 	tbb	[pc, r3]
    457e:	1e10      	.short	0x1e10
    4580:	322d2823 	.word	0x322d2823
    4584:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    4588:	4b1f      	ldr	r3, [pc, #124]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    458a:	881b      	ldrh	r3, [r3, #0]
    458c:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    4590:	f7fd bcbe 	b.w	1f10 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    4594:	4b1c      	ldr	r3, [pc, #112]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    4596:	881b      	ldrh	r3, [r3, #0]
    4598:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    459c:	e7f8      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    459e:	4b1a      	ldr	r3, [pc, #104]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45a0:	881b      	ldrh	r3, [r3, #0]
    45a2:	2b00      	cmp	r3, #0
    45a4:	bf14      	ite	ne
    45a6:	2301      	movne	r3, #1
    45a8:	2300      	moveq	r3, #0
    45aa:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    45ae:	bf14      	ite	ne
    45b0:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    45b2:	234b      	moveq	r3, #75	; 0x4b
    45b4:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    45b8:	e7ea      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    45ba:	4b13      	ldr	r3, [pc, #76]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45bc:	881b      	ldrh	r3, [r3, #0]
    45be:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    45c2:	e7e5      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    45c4:	4b10      	ldr	r3, [pc, #64]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45c6:	881b      	ldrh	r3, [r3, #0]
    45c8:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    45cc:	e7e0      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    45ce:	4b0e      	ldr	r3, [pc, #56]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45d0:	881b      	ldrh	r3, [r3, #0]
    45d2:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    45d6:	e7db      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    45d8:	4b0b      	ldr	r3, [pc, #44]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45da:	881b      	ldrh	r3, [r3, #0]
    45dc:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    45e0:	e7d6      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    45e2:	4b09      	ldr	r3, [pc, #36]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45e4:	881b      	ldrh	r3, [r3, #0]
    45e6:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    45ea:	e7d1      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    45ec:	4b06      	ldr	r3, [pc, #24]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45ee:	881b      	ldrh	r3, [r3, #0]
    45f0:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    45f4:	e7cc      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    45f6:	4b04      	ldr	r3, [pc, #16]	; (4608 <one_sin_update(LEDStruct&)+0x9c>)
    45f8:	881b      	ldrh	r3, [r3, #0]
    45fa:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    45fe:	e7c7      	b.n	4590 <one_sin_update(LEDStruct&)+0x24>
    4600:	1fff95d0 	.word	0x1fff95d0
    4604:	1fff95c1 	.word	0x1fff95c1
    4608:	1fff95c8 	.word	0x1fff95c8

0000460c <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4610:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    4614:	b085      	sub	sp, #20
    4616:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4618:	2b00      	cmp	r3, #0
    461a:	f040 80b3 	bne.w	4784 <one_sin(LEDStruct&)+0x178>
    461e:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 48f4 <one_sin(LEDStruct&)+0x2e8>
    4622:	f8bc 3000 	ldrh.w	r3, [ip]
    4626:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    462a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    462e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4632:	3519      	adds	r5, #25
    4634:	b2ad      	uxth	r5, r5
    4636:	eb05 2145 	add.w	r1, r5, r5, lsl #9
    463a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    463e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4642:	3119      	adds	r1, #25
    4644:	b289      	uxth	r1, r1
    4646:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    464a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    464e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4652:	3719      	adds	r7, #25
    4654:	b2bf      	uxth	r7, r7
    4656:	eb07 2247 	add.w	r2, r7, r7, lsl #9
    465a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    465e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4662:	3219      	adds	r2, #25
    4664:	b292      	uxth	r2, r2
    4666:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    466a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    466e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4672:	3619      	adds	r6, #25
    4674:	b2b6      	uxth	r6, r6
    4676:	eb06 2046 	add.w	r0, r6, r6, lsl #9
    467a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    467e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4682:	3019      	adds	r0, #25
    4684:	b280      	uxth	r0, r0
    4686:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    468a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    468e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4692:	3319      	adds	r3, #25
    4694:	b29b      	uxth	r3, r3
    4696:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    469a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    469e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    46a2:	f10e 0e19 	add.w	lr, lr, #25
    46a6:	fa1f fe8e 	uxth.w	lr, lr
    46aa:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    46ae:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    46b2:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46b6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    46ba:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    46be:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46c2:	f108 0819 	add.w	r8, r8, #25
    46c6:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    46ca:	b2c9      	uxtb	r1, r1
    46cc:	b2d2      	uxtb	r2, r2
    46ce:	b2db      	uxtb	r3, r3
    46d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46d4:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    46d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    46dc:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46e0:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    46e4:	ea4f 1aa3 	mov.w	sl, r3, asr #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46e8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    46ec:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46ee:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    46f2:	1192      	asrs	r2, r2, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46f4:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    46f8:	b2c0      	uxtb	r0, r0
    46fa:	fa5f f389 	uxtb.w	r3, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46fe:	f8ac 8000 	strh.w	r8, [ip]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4702:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(1,5), uint8_t sc = random8(180,240), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    4706:	f04f 0c01 	mov.w	ip, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    470a:	3101      	adds	r1, #1
    470c:	f3c7 1781 	ubfx	r7, r7, #6, #2
    4710:	3a4c      	subs	r2, #76	; 0x4c
    4712:	f3c6 1681 	ubfx	r6, r6, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4716:	eb00 0080 	add.w	r0, r0, r0, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    471a:	f10a 0a14 	add.w	sl, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    471e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4722:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.mode_type = ONE_SIN;
    4726:	f04f 0814 	mov.w	r8, #20
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    472a:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    472e:	b2c9      	uxtb	r1, r1
    4730:	3701      	adds	r7, #1
    4732:	b2d2      	uxtb	r2, r2
    4734:	3601      	adds	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4736:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    473a:	fa5f fa8a 	uxtb.w	sl, sl
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    473e:	f3c3 13c7 	ubfx	r3, r3, #7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4742:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(1,5), uint8_t sc = random8(180,240), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    4746:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    474a:	f884 c229 	strb.w	ip, [r4, #553]	; 0x229
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(1,5), uint8_t sc = random8(180,240), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    474e:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4752:	2d00      	cmp	r5, #0
    4754:	f040 80c3 	bne.w	48de <one_sin(LEDStruct&)+0x2d2>
	else { leds.strip_range = ONE_SIDE; }
    4758:	254b      	movs	r5, #75	; 0x4b
    475a:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    475e:	2500      	movs	r5, #0
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    4760:	f884 133f 	strb.w	r1, [r4, #831]	; 0x33f
	leds.sin_speed		= ss;
    4764:	f884 7340 	strb.w	r7, [r4, #832]	; 0x340
	leds.sin_cutoff		= sc;
    4768:	f884 2341 	strb.w	r2, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    476c:	f884 6342 	strb.w	r6, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    4770:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    4774:	f884 a343 	strb.w	sl, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    4778:	f884 e34f 	strb.w	lr, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    477c:	f884 3350 	strb.w	r3, [r4, #848]	; 0x350
	leds.sin_start		= 0;
    4780:	f884 5345 	strb.w	r5, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    4784:	4b5a      	ldr	r3, [pc, #360]	; (48f0 <one_sin(LEDStruct&)+0x2e4>)
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	2b00      	cmp	r3, #0
    478a:	f040 80ac 	bne.w	48e6 <one_sin(LEDStruct&)+0x2da>

	leds.sin_start += leds.sin_inc;
    478e:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    4792:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    4796:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    479a:	440b      	add	r3, r1
    479c:	b2db      	uxtb	r3, r3
    479e:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    47a2:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    47a6:	2a00      	cmp	r2, #0
    47a8:	f000 8091 	beq.w	48ce <one_sin(LEDStruct&)+0x2c2>
		leds.sin_phase += leds.sin_speed;
    47ac:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    47b0:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    47b4:	4413      	add	r3, r2
    47b6:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    47ba:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    47be:	2b00      	cmp	r3, #0
    47c0:	d06e      	beq.n	48a0 <one_sin(LEDStruct&)+0x294>
    47c2:	f204 19c7 	addw	r9, r4, #455	; 0x1c7
    47c6:	4625      	mov	r5, r4
    47c8:	1c67      	adds	r7, r4, #1
    47ca:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    47cc:	f04f 08ff 	mov.w	r8, #255	; 0xff
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    47d0:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    47d4:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    47d8:	f894 b341 	ldrb.w	fp, [r4, #833]	; 0x341
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    47dc:	f894 e350 	ldrb.w	lr, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    47e0:	f88d e00e 	strb.w	lr, [sp, #14]
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    47e4:	fa5f fa86 	uxtb.w	sl, r6
    47e8:	fb03 230a 	mla	r3, r3, sl, r2
    47ec:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    47ee:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    47f0:	bf44      	itt	mi
    47f2:	43db      	mvnmi	r3, r3
    47f4:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    47f6:	005b      	lsls	r3, r3, #1
    47f8:	b2db      	uxtb	r3, r3
    47fa:	1c5a      	adds	r2, r3, #1
    47fc:	fb02 f303 	mul.w	r3, r2, r3
    4800:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4802:	fb03 f202 	mul.w	r2, r3, r2
    4806:	1212      	asrs	r2, r2, #8
    4808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    480c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    4810:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4812:	05da      	lsls	r2, r3, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4814:	bf54      	ite	pl
    4816:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4818:	23ff      	movmi	r3, #255	; 0xff
    481a:	f894 234f 	ldrb.w	r2, [r4, #847]	; 0x34f
    481e:	f88d 200c 	strb.w	r2, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4822:	4629      	mov	r1, r5
    4824:	a803      	add	r0, sp, #12
    4826:	459b      	cmp	fp, r3
    4828:	bf34      	ite	cc
    482a:	f04f 0bff 	movcc.w	fp, #255	; 0xff
    482e:	f04f 0b00 	movcs.w	fp, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4832:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4836:	f004 fc07 	bl	9048 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    483a:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    483e:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    4842:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    4846:	9100      	str	r1, [sp, #0]
    4848:	fb02 320a 	mla	r2, r2, sl, r3
    484c:	b2d2      	uxtb	r2, r2
    484e:	465b      	mov	r3, fp
    4850:	4649      	mov	r1, r9
    4852:	a803      	add	r0, sp, #12
    4854:	f004 f9fc 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4858:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    485c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    4860:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4864:	f807 3c01 	strb.w	r3, [r7, #-1]
    4868:	786a      	ldrb	r2, [r5, #1]
    486a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    486e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4872:	706a      	strb	r2, [r5, #1]
    4874:	78ab      	ldrb	r3, [r5, #2]
    4876:	f89d 200e 	ldrb.w	r2, [sp, #14]
    487a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    487e:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    4880:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    4884:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4888:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    488c:	3601      	adds	r6, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    488e:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4890:	42b2      	cmp	r2, r6
    4892:	f105 0503 	add.w	r5, r5, #3
    4896:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    489a:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    489e:	dc97      	bgt.n	47d0 <one_sin(LEDStruct&)+0x1c4>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    48a0:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    48a4:	b983      	cbnz	r3, 48c8 <one_sin(LEDStruct&)+0x2bc>
    48a6:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    48aa:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48ac:	781a      	ldrb	r2, [r3, #0]
    48ae:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    48b2:	785a      	ldrb	r2, [r3, #1]
    48b4:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    48b8:	789a      	ldrb	r2, [r3, #2]
    48ba:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    48be:	3303      	adds	r3, #3
    48c0:	4299      	cmp	r1, r3
    48c2:	f1a4 0403 	sub.w	r4, r4, #3
    48c6:	d1f1      	bne.n	48ac <one_sin(LEDStruct&)+0x2a0>
}
    48c8:	b005      	add	sp, #20
    48ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    48ce:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    48d2:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    48d6:	1a9b      	subs	r3, r3, r2
    48d8:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    48dc:	e76d      	b.n	47ba <one_sin(LEDStruct&)+0x1ae>
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    48de:	2596      	movs	r5, #150	; 0x96
    48e0:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    48e4:	e73b      	b.n	475e <one_sin(LEDStruct&)+0x152>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    48e6:	4620      	mov	r0, r4
    48e8:	f7ff fe40 	bl	456c <one_sin_update(LEDStruct&)>
    48ec:	e74f      	b.n	478e <one_sin(LEDStruct&)+0x182>
    48ee:	bf00      	nop
    48f0:	1fff95c1 	.word	0x1fff95c1
    48f4:	1fff875a 	.word	0x1fff875a

000048f8 <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    48f8:	b570      	push	{r4, r5, r6, lr}
    48fa:	4604      	mov	r4, r0
    48fc:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    48fe:	4d1b      	ldr	r5, [pc, #108]	; (496c <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    4900:	2002      	movs	r0, #2
    4902:	f005 f80f 	bl	9924 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4906:	882b      	ldrh	r3, [r5, #0]
    4908:	4418      	add	r0, r3
    490a:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    490e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4912:	f243 6319 	movw	r3, #13849	; 0x3619
    4916:	4418      	add	r0, r3
    4918:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    491a:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    491e:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    4922:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4926:	b2d2      	uxtb	r2, r2
    4928:	4403      	add	r3, r0
    492a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    492e:	b29b      	uxth	r3, r3
    4930:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    4932:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    4934:	eb03 2113 	add.w	r1, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4938:	321b      	adds	r2, #27
    493a:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    493e:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    4942:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    4946:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    494a:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    494e:	4620      	mov	r0, r4
    4950:	aa01      	add	r2, sp, #4
    4952:	2196      	movs	r1, #150	; 0x96
    4954:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4956:	f88d 6004 	strb.w	r6, [sp, #4]
    495a:	f88d 6005 	strb.w	r6, [sp, #5]
    495e:	f88d 6006 	strb.w	r6, [sp, #6]
    4962:	f004 f853 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
}
    4966:	b002      	add	sp, #8
    4968:	bd70      	pop	{r4, r5, r6, pc}
    496a:	bf00      	nop
    496c:	1fff875a 	.word	0x1fff875a

00004970 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    4970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    4974:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    4978:	b087      	sub	sp, #28
    497a:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    497c:	2b00      	cmp	r3, #0
    497e:	f000 8089 	beq.w	4a94 <fadeup(LEDStruct&)+0x124>
    4982:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    4986:	9303      	str	r3, [sp, #12]
    4988:	4606      	mov	r6, r0
    498a:	4618      	mov	r0, r3
    498c:	4b5d      	ldr	r3, [pc, #372]	; (4b04 <fadeup(LEDStruct&)+0x194>)
    498e:	881b      	ldrh	r3, [r3, #0]
    4990:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4994:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4998:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    499c:	3419      	adds	r4, #25
    499e:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49a0:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    49a4:	b2db      	uxtb	r3, r3
    49a6:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    49aa:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    49ae:	ea4f 2929 	mov.w	r9, r9, asr #8
    49b2:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    49b6:	2301      	movs	r3, #1
    49b8:	fa5f f989 	uxtb.w	r9, r9
    49bc:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    49c0:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    49c4:	f007 fb44 	bl	c050 <__aeabi_ui2f>
    49c8:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    49cc:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    49d0:	465b      	mov	r3, fp
    49d2:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    49d6:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    49da:	46d3      	mov	fp, sl
    49dc:	9001      	str	r0, [sp, #4]
    49de:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    49e2:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    49e4:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49e6:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    49ea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    49ee:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    49f2:	3419      	adds	r4, #25
    49f4:	b2a4      	uxth	r4, r4
    49f6:	2373      	movs	r3, #115	; 0x73
    49f8:	fb03 f004 	mul.w	r0, r3, r4
    49fc:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    49fe:	9b01      	ldr	r3, [sp, #4]
    4a00:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4a04:	300a      	adds	r0, #10
    4a06:	b280      	uxth	r0, r0
    4a08:	f007 fb22 	bl	c050 <__aeabi_ui2f>
    4a0c:	493e      	ldr	r1, [pc, #248]	; (4b08 <fadeup(LEDStruct&)+0x198>)
    4a0e:	f007 fc2b 	bl	c268 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a12:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4a16:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4a1a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a1e:	3319      	adds	r3, #25
    4a20:	b29b      	uxth	r3, r3
    4a22:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4a26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4a2a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4a2e:	3419      	adds	r4, #25
    4a30:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a32:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4a36:	b2c9      	uxtb	r1, r1
    4a38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4a3c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4a40:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    4a42:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    4a46:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4a48:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    4a4c:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    4a50:	b2c8      	uxtb	r0, r1
    4a52:	f007 fafd 	bl	c050 <__aeabi_ui2f>
    4a56:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4a58:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4a5a:	4a2c      	ldr	r2, [pc, #176]	; (4b0c <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4a5c:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4a60:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4a62:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4a66:	d8be      	bhi.n	49e6 <fadeup(LEDStruct&)+0x76>
    4a68:	9a03      	ldr	r2, [sp, #12]
    4a6a:	9e02      	ldr	r6, [sp, #8]
    4a6c:	4f25      	ldr	r7, [pc, #148]	; (4b04 <fadeup(LEDStruct&)+0x194>)
    4a6e:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    4a72:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    4a76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4a7a:	18f5      	adds	r5, r6, r3
    4a7c:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    4a7e:	22ff      	movs	r2, #255	; 0xff
    4a80:	803c      	strh	r4, [r7, #0]
    4a82:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    4a84:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    4a86:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    4a88:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    4a8a:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    4a8c:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    4a8e:	b007      	add	sp, #28
    4a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4a94:	9d02      	ldr	r5, [sp, #8]
    4a96:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4a9a:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4a9e:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    4aa2:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4aa6:	3305      	adds	r3, #5
    4aa8:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4aaa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4aae:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4ab2:	4429      	add	r1, r5
    4ab4:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4ab6:	24ff      	movs	r4, #255	; 0xff
    4ab8:	f88d 3016 	strb.w	r3, [sp, #22]
    4abc:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4ac0:	f004 fac2 	bl	9048 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4ac4:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4ac8:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4acc:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    4ad0:	f88d 3014 	strb.w	r3, [sp, #20]
    4ad4:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    4ad8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4adc:	a805      	add	r0, sp, #20
    4ade:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4ae0:	f88d 4015 	strb.w	r4, [sp, #21]
    4ae4:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4ae8:	f004 faae 	bl	9048 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    4aec:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    4af0:	2bff      	cmp	r3, #255	; 0xff
    4af2:	d1cc      	bne.n	4a8e <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    4af4:	9a02      	ldr	r2, [sp, #8]
    4af6:	2301      	movs	r3, #1
    4af8:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    4afc:	b007      	add	sp, #28
    4afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b02:	bf00      	nop
    4b04:	1fff875a 	.word	0x1fff875a
    4b08:	42c80000 	.word	0x42c80000
    4b0c:	437f0000 	.word	0x437f0000

00004b10 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    4b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4b14:	4b65      	ldr	r3, [pc, #404]	; (4cac <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    4b16:	4605      	mov	r5, r0
    4b18:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4b1a:	781a      	ldrb	r2, [r3, #0]
    4b1c:	2196      	movs	r1, #150	; 0x96
    4b1e:	f004 f837 	bl	8b90 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4b22:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    4b26:	2600      	movs	r6, #0
    4b28:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4b2c:	2c00      	cmp	r4, #0
    4b2e:	d07e      	beq.n	4c2e <explosion(LEDStruct&)+0x11e>
    4b30:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4cc4 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4b34:	f04f 08ff 	mov.w	r8, #255	; 0xff
    4b38:	e03b      	b.n	4bb2 <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4b3a:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    4b3e:	4650      	mov	r0, sl
    4b40:	f007 f9d6 	bl	bef0 <__addsf3>
    4b44:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4b46:	2100      	movs	r1, #0
    4b48:	4638      	mov	r0, r7
    4b4a:	f007 fc77 	bl	c43c <__aeabi_fcmplt>
    4b4e:	4958      	ldr	r1, [pc, #352]	; (4cb0 <explosion(LEDStruct&)+0x1a0>)
    4b50:	2800      	cmp	r0, #0
    4b52:	d168      	bne.n	4c26 <explosion(LEDStruct&)+0x116>
    4b54:	4638      	mov	r0, r7
    4b56:	f007 fc8f 	bl	c478 <__aeabi_fcmpgt>
    4b5a:	b100      	cbz	r0, 4b5e <explosion(LEDStruct&)+0x4e>
    4b5c:	4f54      	ldr	r7, [pc, #336]	; (4cb0 <explosion(LEDStruct&)+0x1a0>)
    4b5e:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    4b62:	4651      	mov	r1, sl
    4b64:	f8d9 0000 	ldr.w	r0, [r9]
    4b68:	f007 faca 	bl	c100 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    4b6c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    4b70:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    4b74:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    4b78:	f007 fac2 	bl	c100 <__aeabi_fmul>
    4b7c:	4601      	mov	r1, r0
    4b7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    4b82:	f007 f9b3 	bl	beec <__aeabi_fsub>
    4b86:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    4b8a:	f007 fab9 	bl	c100 <__aeabi_fmul>
    4b8e:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4b92:	f007 fca1 	bl	c4d8 <__aeabi_f2uiz>
    4b96:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    4b9a:	b2c0      	uxtb	r0, r0
    4b9c:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4b9e:	f106 0601 	add.w	r6, r6, #1
    4ba2:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4ba6:	bf38      	it	cc
    4ba8:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4bac:	b2f6      	uxtb	r6, r6
    4bae:	42b3      	cmp	r3, r6
    4bb0:	d93b      	bls.n	4c2a <explosion(LEDStruct&)+0x11a>
    4bb2:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    4bb6:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4bba:	f007 fc67 	bl	c48c <__aeabi_f2iz>
    4bbe:	4607      	mov	r7, r0
    4bc0:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    4bc4:	f007 fc88 	bl	c4d8 <__aeabi_f2uiz>
    4bc8:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4bcc:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4bd0:	a901      	add	r1, sp, #4
    4bd2:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4bd4:	f88d 3000 	strb.w	r3, [sp]
    4bd8:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4bdc:	f004 fa34 	bl	9048 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    4be0:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    4be4:	1829      	adds	r1, r5, r0
    4be6:	5c2b      	ldrb	r3, [r5, r0]
    4be8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4bec:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4bf0:	542b      	strb	r3, [r5, r0]
    4bf2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4bf6:	784a      	ldrb	r2, [r1, #1]
    4bf8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4bfc:	704a      	strb	r2, [r1, #1]
    4bfe:	788b      	ldrb	r3, [r1, #2]
    4c00:	f89d 2006 	ldrb.w	r2, [sp, #6]
    4c04:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4c08:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    4c0a:	708b      	strb	r3, [r1, #2]
    4c0c:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    4c10:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    4c14:	2b00      	cmp	r3, #0
    4c16:	d190      	bne.n	4b3a <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    4c18:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4c1c:	4651      	mov	r1, sl
    4c1e:	f007 f965 	bl	beec <__aeabi_fsub>
    4c22:	4607      	mov	r7, r0
    4c24:	e78f      	b.n	4b46 <explosion(LEDStruct&)+0x36>
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4c26:	2700      	movs	r7, #0
    4c28:	e799      	b.n	4b5e <explosion(LEDStruct&)+0x4e>
    4c2a:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    4c2e:	462a      	mov	r2, r5
    4c30:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4c34:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c36:	7819      	ldrb	r1, [r3, #0]
    4c38:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4c3c:	7859      	ldrb	r1, [r3, #1]
    4c3e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    4c42:	7899      	ldrb	r1, [r3, #2]
    4c44:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    4c48:	3303      	adds	r3, #3
    4c4a:	4283      	cmp	r3, r0
    4c4c:	f1a2 0203 	sub.w	r2, r2, #3
    4c50:	d1f1      	bne.n	4c36 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    4c52:	bb44      	cbnz	r4, 4ca6 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4c54:	aa01      	add	r2, sp, #4
    4c56:	2196      	movs	r1, #150	; 0x96
    4c58:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4c5a:	f88d 4004 	strb.w	r4, [sp, #4]
    4c5e:	f88d 4005 	strb.w	r4, [sp, #5]
    4c62:	f88d 4006 	strb.w	r4, [sp, #6]
    4c66:	f003 fed1 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c6a:	4812      	ldr	r0, [pc, #72]	; (4cb4 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c6c:	4c12      	ldr	r4, [pc, #72]	; (4cb8 <explosion(LEDStruct&)+0x1a8>)
    4c6e:	8803      	ldrh	r3, [r0, #0]
    4c70:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    4c72:	4912      	ldr	r1, [pc, #72]	; (4cbc <explosion(LEDStruct&)+0x1ac>)
    4c74:	4a12      	ldr	r2, [pc, #72]	; (4cc0 <explosion(LEDStruct&)+0x1b0>)
    4c76:	9401      	str	r4, [sp, #4]
    4c78:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4c7c:	8809      	ldrh	r1, [r1, #0]
    4c7e:	8812      	ldrh	r2, [r2, #0]
    4c80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c84:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c88:	440a      	add	r2, r1
    4c8a:	3319      	adds	r3, #25
    4c8c:	b29b      	uxth	r3, r3
    4c8e:	b292      	uxth	r2, r2
	return ret;
    4c90:	9901      	ldr	r1, [sp, #4]
    4c92:	8003      	strh	r3, [r0, #0]
    4c94:	fb03 f302 	mul.w	r3, r3, r2
    4c98:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    4c9c:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    4c9e:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    4ca2:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    4ca6:	b002      	add	sp, #8
    4ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cac:	1fff8748 	.word	0x1fff8748
    4cb0:	42940000 	.word	0x42940000
    4cb4:	1fff875a 	.word	0x1fff875a
    4cb8:	1fffa050 	.word	0x1fffa050
    4cbc:	1fff8724 	.word	0x1fff8724
    4cc0:	1fff874a 	.word	0x1fff874a
    4cc4:	1fff8754 	.word	0x1fff8754

00004cc8 <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    4cc8:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4cca:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    4cce:	b082      	sub	sp, #8
    4cd0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4cd2:	bb03      	cbnz	r3, 4d16 <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4cd4:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    4cd6:	2116      	movs	r1, #22
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4cd8:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    4cda:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4cde:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = FIREWORKS;
    4ce2:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4ce6:	f884 2354 	strb.w	r2, [r4, #852]	; 0x354
    4cea:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4cec:	aa01      	add	r2, sp, #4
    4cee:	2196      	movs	r1, #150	; 0x96
    4cf0:	4620      	mov	r0, r4
    4cf2:	f88d 3004 	strb.w	r3, [sp, #4]
    4cf6:	f88d 3005 	strb.w	r3, [sp, #5]
    4cfa:	f88d 3006 	strb.w	r3, [sp, #6]
    4cfe:	f003 fe85 	bl	8a0c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d02:	4a0f      	ldr	r2, [pc, #60]	; (4d40 <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    4d04:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    4d08:	6812      	ldr	r2, [r2, #0]
    4d0a:	9201      	str	r2, [sp, #4]
	return ret;
    4d0c:	9a01      	ldr	r2, [sp, #4]
    4d0e:	429a      	cmp	r2, r3
    4d10:	d212      	bcs.n	4d38 <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4d12:	b002      	add	sp, #8
    4d14:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4d16:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    4d1a:	2b01      	cmp	r3, #1
    4d1c:	d004      	beq.n	4d28 <fireworks(LEDStruct&)+0x60>
    4d1e:	d207      	bcs.n	4d30 <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    4d20:	f7ff fe26 	bl	4970 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4d24:	b002      	add	sp, #8
    4d26:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    4d28:	f7ff fef2 	bl	4b10 <explosion(LEDStruct&)>
			break;
	}
}
    4d2c:	b002      	add	sp, #8
    4d2e:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4d30:	2b02      	cmp	r3, #2
    4d32:	d0da      	beq.n	4cea <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4d34:	b002      	add	sp, #8
    4d36:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    4d38:	4620      	mov	r0, r4
    4d3a:	f7ff fddd 	bl	48f8 <prepare_for_explosion(LEDStruct&)>
    4d3e:	e7e8      	b.n	4d12 <fireworks(LEDStruct&)+0x4a>
    4d40:	1fffa050 	.word	0x1fffa050

00004d44 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4d44:	4b18      	ldr	r3, [pc, #96]	; (4da8 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    4d46:	4a19      	ldr	r2, [pc, #100]	; (4dac <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    4d48:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    4d4a:	2100      	movs	r1, #0
    4d4c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4d4e:	2b04      	cmp	r3, #4
    4d50:	d80d      	bhi.n	4d6e <shooting_pole_update(LEDStruct&)+0x2a>
    4d52:	e8df f003 	tbb	[pc, r3]
    4d56:	1403      	.short	0x1403
    4d58:	201a      	.short	0x201a
    4d5a:	0e          	.byte	0x0e
    4d5b:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    4d5c:	4b14      	ldr	r3, [pc, #80]	; (4db0 <shooting_pole_update(LEDStruct&)+0x6c>)
    4d5e:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    4d60:	2b09      	cmp	r3, #9
    4d62:	d91e      	bls.n	4da2 <shooting_pole_update(LEDStruct&)+0x5e>
    4d64:	2b41      	cmp	r3, #65	; 0x41
    4d66:	bfa8      	it	ge
    4d68:	2341      	movge	r3, #65	; 0x41
    4d6a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4d6e:	f7fd b8cf 	b.w	1f10 <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    4d72:	4b0f      	ldr	r3, [pc, #60]	; (4db0 <shooting_pole_update(LEDStruct&)+0x6c>)
    4d74:	881b      	ldrh	r3, [r3, #0]
    4d76:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		default:	break;
	}
	LEDDebug(leds);
    4d7a:	f7fd b8c9 	b.w	1f10 <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    4d7e:	4b0c      	ldr	r3, [pc, #48]	; (4db0 <shooting_pole_update(LEDStruct&)+0x6c>)
    4d80:	881b      	ldrh	r3, [r3, #0]
    4d82:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4d86:	f7fd b8c3 	b.w	1f10 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    4d8a:	4b09      	ldr	r3, [pc, #36]	; (4db0 <shooting_pole_update(LEDStruct&)+0x6c>)
    4d8c:	881b      	ldrh	r3, [r3, #0]
    4d8e:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4d92:	f7fd b8bd 	b.w	1f10 <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    4d96:	4b06      	ldr	r3, [pc, #24]	; (4db0 <shooting_pole_update(LEDStruct&)+0x6c>)
    4d98:	881b      	ldrh	r3, [r3, #0]
    4d9a:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4d9e:	f7fd b8b7 	b.w	1f10 <LEDDebug(LEDStruct&)>
    4da2:	230a      	movs	r3, #10
    4da4:	e7e1      	b.n	4d6a <shooting_pole_update(LEDStruct&)+0x26>
    4da6:	bf00      	nop
    4da8:	1fff95d0 	.word	0x1fff95d0
    4dac:	1fff95c1 	.word	0x1fff95c1
    4db0:	1fff95c8 	.word	0x1fff95c8

00004db4 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    4db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4db8:	f890 622d 	ldrb.w	r6, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    4dbc:	b087      	sub	sp, #28
    4dbe:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4dc0:	2e00      	cmp	r6, #0
    4dc2:	f000 80f7 	beq.w	4fb4 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    4dc6:	4bba      	ldr	r3, [pc, #744]	; (50b0 <shooting_pole(LEDStruct&)+0x2fc>)
    4dc8:	781b      	ldrb	r3, [r3, #0]
    4dca:	2b00      	cmp	r3, #0
    4dcc:	f040 815d 	bne.w	508a <shooting_pole(LEDStruct&)+0x2d6>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4dd0:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    4dd4:	f204 17c7 	addw	r7, r4, #455	; 0x1c7
    4dd8:	b311      	cbz	r1, 4e20 <shooting_pole(LEDStruct&)+0x6c>
    4dda:	4626      	mov	r6, r4
    4ddc:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    4dde:	f04f 0801 	mov.w	r8, #1
    4de2:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4de6:	f8cd 8000 	str.w	r8, [sp]
    4dea:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    4dee:	fb92 f2f1 	sdiv	r2, r2, r1
    4df2:	441a      	add	r2, r3
    4df4:	b2d2      	uxtb	r2, r2
    4df6:	23ff      	movs	r3, #255	; 0xff
    4df8:	4639      	mov	r1, r7
    4dfa:	a805      	add	r0, sp, #20
    4dfc:	f003 ff28 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e00:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4e04:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4e08:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e0c:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4e0e:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4e10:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4e12:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    4e16:	3501      	adds	r5, #1
    4e18:	42a9      	cmp	r1, r5
    4e1a:	f106 0603 	add.w	r6, r6, #3
    4e1e:	dce0      	bgt.n	4de2 <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    4e20:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4e24:	2b00      	cmp	r3, #0
    4e26:	f000 80bd 	beq.w	4fa4 <shooting_pole(LEDStruct&)+0x1f0>
    4e2a:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    4e2e:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    4e32:	4413      	add	r3, r2
    4e34:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    4e38:	294a      	cmp	r1, #74	; 0x4a
    4e3a:	f300 812a 	bgt.w	5092 <shooting_pole(LEDStruct&)+0x2de>
    4e3e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    4e42:	18a3      	adds	r3, r4, r2
    4e44:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e48:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4e4c:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e4e:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4e50:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e54:	43c9      	mvns	r1, r1
    4e56:	b2c9      	uxtb	r1, r1
    4e58:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4e5a:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e5e:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4e62:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e66:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4e68:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4e6a:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4e6c:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4e6e:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4e70:	709a      	strb	r2, [r3, #2]
    4e72:	3303      	adds	r3, #3
    4e74:	42ab      	cmp	r3, r5
    4e76:	d1e7      	bne.n	4e48 <shooting_pole(LEDStruct&)+0x94>
    4e78:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4e7c:	f8df 8244 	ldr.w	r8, [pc, #580]	; 50c4 <shooting_pole(LEDStruct&)+0x310>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4e80:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4e84:	f8d8 2000 	ldr.w	r2, [r8]
    4e88:	9205      	str	r2, [sp, #20]
	return ret;
    4e8a:	9805      	ldr	r0, [sp, #20]
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4e8c:	f44f 728c 	mov.w	r2, #280	; 0x118
    4e90:	fb02 f200 	mul.w	r2, r2, r0
    4e94:	021b      	lsls	r3, r3, #8
    4e96:	fb03 f202 	mul.w	r2, r3, r2
    4e9a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    4e9e:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    4ea2:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4ea4:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4ea6:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4eaa:	d503      	bpl.n	4eb4 <shooting_pole(LEDStruct&)+0x100>
    4eac:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4eb0:	3307      	adds	r3, #7
    4eb2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4eb4:	0a18      	lsrs	r0, r3, #8
    4eb6:	f8df e210 	ldr.w	lr, [pc, #528]	; 50c8 <shooting_pole(LEDStruct&)+0x314>
    uint8_t  m   = slope[section];
    4eba:	4e7e      	ldr	r6, [pc, #504]	; (50b4 <shooting_pole(LEDStruct&)+0x300>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4ebc:	5c36      	ldrb	r6, [r6, r0]
    4ebe:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    4ec2:	f3c3 0346 	ubfx	r3, r3, #1, #7
    4ec6:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    4eca:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4ecc:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    4ece:	bf48      	it	mi
    4ed0:	4276      	negmi	r6, r6
    4ed2:	b236      	sxth	r6, r6
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4ed4:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    4ed8:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    4edc:	b29b      	uxth	r3, r3
    4ede:	b2b6      	uxth	r6, r6
    4ee0:	fb03 6606 	mla	r6, r3, r6, r6
    4ee4:	f894 0227 	ldrb.w	r0, [r4, #551]	; 0x227
    4ee8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4eec:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4ef0:	9000      	str	r0, [sp, #0]
    4ef2:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    4ef6:	a804      	add	r0, sp, #16
    4ef8:	4639      	mov	r1, r7
    4efa:	b2b6      	uxth	r6, r6
    4efc:	f003 fea8 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4f00:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4f04:	18e1      	adds	r1, r4, r3
    4f06:	5ce2      	ldrb	r2, [r4, r3]
    4f08:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4f0c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4f10:	54e2      	strb	r2, [r4, r3]
    4f12:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4f16:	784a      	ldrb	r2, [r1, #1]
    4f18:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4f1c:	704a      	strb	r2, [r1, #1]
    4f1e:	788b      	ldrb	r3, [r1, #2]
    4f20:	f89d 2012 	ldrb.w	r2, [sp, #18]
    4f24:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4f28:	4f63      	ldr	r7, [pc, #396]	; (50b8 <shooting_pole(LEDStruct&)+0x304>)
        b = qadd8( b, rhs.b);
    4f2a:	708b      	strb	r3, [r1, #2]
    4f2c:	683b      	ldr	r3, [r7, #0]
    4f2e:	07db      	lsls	r3, r3, #31
    4f30:	d51b      	bpl.n	4f6a <shooting_pole(LEDStruct&)+0x1b6>
    4f32:	4e62      	ldr	r6, [pc, #392]	; (50bc <shooting_pole(LEDStruct&)+0x308>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f34:	f8d8 3000 	ldr.w	r3, [r8]
    4f38:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4f3a:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4f3e:	9b04      	ldr	r3, [sp, #16]
    4f40:	1a5b      	subs	r3, r3, r1
    4f42:	429a      	cmp	r2, r3
    4f44:	d921      	bls.n	4f8a <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4f46:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f48:	781a      	ldrb	r2, [r3, #0]
    4f4a:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    4f4e:	785a      	ldrb	r2, [r3, #1]
    4f50:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4f54:	789a      	ldrb	r2, [r3, #2]
    4f56:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    4f5a:	3303      	adds	r3, #3
    4f5c:	429d      	cmp	r5, r3
    4f5e:	f1a4 0403 	sub.w	r4, r4, #3
    4f62:	d1f1      	bne.n	4f48 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    4f64:	b007      	add	sp, #28
    4f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4f6a:	4638      	mov	r0, r7
    4f6c:	f004 fd88 	bl	9a80 <__cxa_guard_acquire>
    4f70:	2800      	cmp	r0, #0
    4f72:	f040 8091 	bne.w	5098 <shooting_pole(LEDStruct&)+0x2e4>
    4f76:	4e51      	ldr	r6, [pc, #324]	; (50bc <shooting_pole(LEDStruct&)+0x308>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f78:	f8d8 3000 	ldr.w	r3, [r8]
    4f7c:	9304      	str	r3, [sp, #16]
    4f7e:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4f82:	9b04      	ldr	r3, [sp, #16]
    4f84:	1a5b      	subs	r3, r3, r1
    4f86:	4293      	cmp	r3, r2
    4f88:	d3dd      	bcc.n	4f46 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4f8a:	f8d8 1000 	ldr.w	r1, [r8]
    4f8e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4f92:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    4f96:	9103      	str	r1, [sp, #12]
	return ret;
    4f98:	9903      	ldr	r1, [sp, #12]
    4f9a:	6031      	str	r1, [r6, #0]
    4f9c:	4413      	add	r3, r2
    4f9e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    4fa2:	e7d0      	b.n	4f46 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    4fa4:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4fa8:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    4fac:	1a9b      	subs	r3, r3, r2
    4fae:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    4fb2:	e741      	b.n	4e38 <shooting_pole(LEDStruct&)+0x84>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fb4:	4f42      	ldr	r7, [pc, #264]	; (50c0 <shooting_pole(LEDStruct&)+0x30c>)
    4fb6:	883b      	ldrh	r3, [r7, #0]
    4fb8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4fbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4fc0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4fc4:	3319      	adds	r3, #25
    4fc6:	b29b      	uxth	r3, r3
    4fc8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4fcc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4fd0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4fd4:	3219      	adds	r2, #25
    4fd6:	b292      	uxth	r2, r2
    4fd8:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4fdc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4fe0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4fe4:	f10e 0e19 	add.w	lr, lr, #25
    4fe8:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fec:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4ff0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
    4ff4:	2146      	movs	r1, #70	; 0x46
    4ff6:	2032      	movs	r0, #50	; 0x32
    4ff8:	b2dd      	uxtb	r5, r3
    4ffa:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ffe:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5002:	fa5f f982 	uxtb.w	r9, r2
    5006:	f006 f8e5 	bl	b1d4 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    500a:	883b      	ldrh	r3, [r7, #0]
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    500c:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
    5010:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5014:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    5018:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    501c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5020:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5022:	fa5f f888 	uxtb.w	r8, r8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5026:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    502a:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    502e:	b2db      	uxtb	r3, r3
    5030:	3019      	adds	r0, #25
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5032:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5036:	b280      	uxth	r0, r0
    5038:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    503c:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5040:	4b1b      	ldr	r3, [pc, #108]	; (50b0 <shooting_pole(LEDStruct&)+0x2fc>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;
    5042:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5046:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
    504a:	ea4f 11e8 	mov.w	r1, r8, asr #7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    504e:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5052:	1215      	asrs	r5, r2, #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5054:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5058:	f101 021e 	add.w	r2, r1, #30
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    505c:	781b      	ldrb	r3, [r3, #0]
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    505e:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5062:	1c69      	adds	r1, r5, #1


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
    5064:	2217      	movs	r2, #23

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5066:	f10e 0501 	add.w	r5, lr, #1
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized = 1;
    506a:	f04f 0e01 	mov.w	lr, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    506e:	f884 175e 	strb.w	r1, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5072:	8038      	strh	r0, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5074:	f884 5232 	strb.w	r5, [r4, #562]	; 0x232
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized = 1;
    5078:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    507c:	f884 e229 	strb.w	lr, [r4, #553]	; 0x229
	leds.mode_type = SHOOTING_POLE;
    5080:	f884 222c 	strb.w	r2, [r4, #556]	; 0x22c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5084:	2b00      	cmp	r3, #0
    5086:	f43f aea3 	beq.w	4dd0 <shooting_pole(LEDStruct&)+0x1c>
    508a:	4620      	mov	r0, r4
    508c:	f7ff fe5a 	bl	4d44 <shooting_pole_update(LEDStruct&)>
    5090:	e69e      	b.n	4dd0 <shooting_pole(LEDStruct&)+0x1c>
    5092:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    5096:	e6f1      	b.n	4e7c <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5098:	f8d8 3000 	ldr.w	r3, [r8]
    509c:	4e07      	ldr	r6, [pc, #28]	; (50bc <shooting_pole(LEDStruct&)+0x308>)
    509e:	9302      	str	r3, [sp, #8]
	return ret;
    50a0:	9b02      	ldr	r3, [sp, #8]
    50a2:	6033      	str	r3, [r6, #0]
    50a4:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    50a6:	4638      	mov	r0, r7
    50a8:	6073      	str	r3, [r6, #4]
    50aa:	f004 fcef 	bl	9a8c <__cxa_guard_release>
    50ae:	e763      	b.n	4f78 <shooting_pole(LEDStruct&)+0x1c4>
    50b0:	1fff95c1 	.word	0x1fff95c1
    50b4:	0000e538 	.word	0x0000e538
    50b8:	1fff95b4 	.word	0x1fff95b4
    50bc:	1fff94cc 	.word	0x1fff94cc
    50c0:	1fff875a 	.word	0x1fff875a
    50c4:	1fffa050 	.word	0x1fffa050
    50c8:	0000da04 	.word	0x0000da04

000050cc <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    50cc:	4b2a      	ldr	r3, [pc, #168]	; (5178 <two_sin_update(LEDStruct&)+0xac>)
	leds.sin_all_freq = saf;	// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    50ce:	4a2b      	ldr	r2, [pc, #172]	; (517c <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    50d0:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq = saf;	// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    50d2:	2100      	movs	r1, #0
    50d4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    50d6:	2b0b      	cmp	r3, #11
    50d8:	d80b      	bhi.n	50f2 <two_sin_update(LEDStruct&)+0x26>
    50da:	e8df f003 	tbb	[pc, r3]
    50de:	1f11      	.short	0x1f11
    50e0:	332e2924 	.word	0x332e2924
    50e4:	06423d38 	.word	0x06423d38
    50e8:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    50ea:	4b25      	ldr	r3, [pc, #148]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    50ec:	881b      	ldrh	r3, [r3, #0]
    50ee:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    50f2:	f7fc bf0d 	b.w	1f10 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    50f6:	4b22      	ldr	r3, [pc, #136]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    50f8:	881b      	ldrh	r3, [r3, #0]
    50fa:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    50fe:	e7f8      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5100:	4b1f      	ldr	r3, [pc, #124]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    5102:	881b      	ldrh	r3, [r3, #0]
    5104:	2b00      	cmp	r3, #0
    5106:	bf14      	ite	ne
    5108:	2301      	movne	r3, #1
    510a:	2300      	moveq	r3, #0
    510c:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5110:	bf14      	ite	ne
    5112:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5114:	234b      	moveq	r3, #75	; 0x4b
    5116:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    511a:	e7ea      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    511c:	4b18      	ldr	r3, [pc, #96]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    511e:	881b      	ldrh	r3, [r3, #0]
    5120:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    5124:	e7e5      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    5126:	4b16      	ldr	r3, [pc, #88]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    5128:	881b      	ldrh	r3, [r3, #0]
    512a:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    512e:	e7e0      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5130:	4b13      	ldr	r3, [pc, #76]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    5132:	881b      	ldrh	r3, [r3, #0]
    5134:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    5138:	e7db      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    513a:	4b11      	ldr	r3, [pc, #68]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    513c:	881b      	ldrh	r3, [r3, #0]
    513e:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    5142:	e7d6      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5144:	4b0e      	ldr	r3, [pc, #56]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    5146:	881b      	ldrh	r3, [r3, #0]
    5148:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    514c:	e7d1      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    514e:	4b0c      	ldr	r3, [pc, #48]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    5150:	881b      	ldrh	r3, [r3, #0]
    5152:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    5156:	e7cc      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    5158:	4b09      	ldr	r3, [pc, #36]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    515a:	881b      	ldrh	r3, [r3, #0]
    515c:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5160:	e7c7      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    5162:	4b07      	ldr	r3, [pc, #28]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    5164:	881b      	ldrh	r3, [r3, #0]
    5166:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    516a:	e7c2      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    516c:	4b04      	ldr	r3, [pc, #16]	; (5180 <two_sin_update(LEDStruct&)+0xb4>)
    516e:	881b      	ldrh	r3, [r3, #0]
    5170:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    5174:	e7bd      	b.n	50f2 <two_sin_update(LEDStruct&)+0x26>
    5176:	bf00      	nop
    5178:	1fff95d0 	.word	0x1fff95d0
    517c:	1fff95c1 	.word	0x1fff95c1
    5180:	1fff95c8 	.word	0x1fff95c8

00005184 <two_sin(LEDStruct&)>:
	LEDDebug(leds);
}

// Make an option where the waves go opposite

void two_sin(LEDStruct& leds) {
    5184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5188:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}

// Make an option where the waves go opposite

void two_sin(LEDStruct& leds) {
    518c:	b083      	sub	sp, #12
    518e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5190:	2b00      	cmp	r3, #0
    5192:	f040 80cb 	bne.w	532c <two_sin(LEDStruct&)+0x1a8>
    5196:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 5564 <two_sin(LEDStruct&)+0x3e0>
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
    519a:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    519e:	f8ba 3000 	ldrh.w	r3, [sl]
    51a2:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    51a6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    51aa:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    51ae:	3619      	adds	r6, #25
    51b0:	b2b6      	uxth	r6, r6
    51b2:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    51b6:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    51ba:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    51be:	f10c 0c19 	add.w	ip, ip, #25
    51c2:	fa1f fc8c 	uxth.w	ip, ip
    51c6:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    51ca:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    51ce:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    51d2:	f10e 0e19 	add.w	lr, lr, #25
    51d6:	fa1f fe8e 	uxth.w	lr, lr
    51da:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    51de:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    51e2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    51e6:	3119      	adds	r1, #25
    51e8:	b289      	uxth	r1, r1
    51ea:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    51ee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    51f2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    51f6:	3719      	adds	r7, #25
    51f8:	b2bf      	uxth	r7, r7
    51fa:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    51fe:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5202:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5206:	3519      	adds	r5, #25
    5208:	b2ad      	uxth	r5, r5
    520a:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    520e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    5212:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5216:	3019      	adds	r0, #25
    5218:	b280      	uxth	r0, r0
    521a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    521e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5222:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5226:	3219      	adds	r2, #25
    5228:	b292      	uxth	r2, r2
    522a:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    522e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5232:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5236:	3319      	adds	r3, #25
    5238:	b29b      	uxth	r3, r3
    523a:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    523e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5242:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    5246:	f109 0919 	add.w	r9, r9, #25
    524a:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    524e:	eb09 2819 	add.w	r8, r9, r9, lsr #8
    5252:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5256:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    525a:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    525e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5262:	b2c9      	uxtb	r1, r1
    5264:	b2d2      	uxtb	r2, r2
    5266:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    526a:	b2db      	uxtb	r3, r3
    526c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5270:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5274:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5278:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    527c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    5280:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5284:	1112      	asrs	r2, r2, #4
    5286:	ea4f 2828 	mov.w	r8, r8, asr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    528a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    528e:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5290:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5294:	b2ed      	uxtb	r5, r5
    5296:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5298:	111b      	asrs	r3, r3, #4
    529a:	f102 0b20 	add.w	fp, r2, #32
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    529e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52a2:	f108 020c 	add.w	r2, r8, #12
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52a6:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    52aa:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52ae:	3903      	subs	r1, #3
    52b0:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    52b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52bc:	3320      	adds	r3, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    52be:	f8aa 9000 	strh.w	r9, [sl]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
    52c2:	f04f 0815 	mov.w	r8, #21

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized = 1;
    52c6:	f04f 0901 	mov.w	r9, #1
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    52ca:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52ce:	fa5f fc8c 	uxtb.w	ip, ip
    52d2:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52d6:	b2c9      	uxtb	r1, r1
    52d8:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52da:	f3c5 2507 	ubfx	r5, r5, #8, #8
    52de:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52e2:	fa5f fb8b 	uxtb.w	fp, fp
    52e6:	b2d2      	uxtb	r2, r2
    52e8:	b2db      	uxtb	r3, r3

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized = 1;
    52ea:	f884 922d 	strb.w	r9, [r4, #557]	; 0x22d
	leds.mode_type = TWO_SIN;
    52ee:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    52f2:	2e00      	cmp	r6, #0
    52f4:	f040 812b 	bne.w	554e <two_sin(LEDStruct&)+0x3ca>
	else					 { leds.strip_range = ONE_SIDE; }
    52f8:	264b      	movs	r6, #75	; 0x4b
    52fa:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
	leds.two_speed	= ts;
	leds.sin_rot	= sr;		// changes the hue
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;		// limits the brightness
	leds.two_cutoff = tc;
	leds.sin_phase = 0;			// changes by speed
    52fe:	2600      	movs	r6, #0
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue	= sh;		// changes by rot
    5300:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue	= th;
    5304:	f884 e34d 	strb.w	lr, [r4, #845]	; 0x34d
	leds.sin_speed	= ss;		// changes the phase
    5308:	f884 1340 	strb.w	r1, [r4, #832]	; 0x340
	leds.two_speed	= ts;
    530c:	f884 7349 	strb.w	r7, [r4, #841]	; 0x349
	leds.sin_rot	= sr;		// changes the hue
    5310:	f884 5342 	strb.w	r5, [r4, #834]	; 0x342
	leds.two_rot	= tr;
    5314:	f884 034a 	strb.w	r0, [r4, #842]	; 0x34a
	leds.sin_cutoff = sc;		// limits the brightness
    5318:	f884 b341 	strb.w	fp, [r4, #833]	; 0x341
	leds.two_cutoff = tc;
    531c:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
	leds.sin_phase = 0;			// changes by speed
	leds.two_phase = 0;
	leds.sin_all_freq = saf;	// number of repeats
    5320:	f884 2343 	strb.w	r2, [r4, #835]	; 0x343
	leds.two_speed	= ts;
	leds.sin_rot	= sr;		// changes the hue
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;		// limits the brightness
	leds.two_cutoff = tc;
	leds.sin_phase = 0;			// changes by speed
    5324:	f884 6346 	strb.w	r6, [r4, #838]	; 0x346
	leds.two_phase = 0;
    5328:	f884 634c 	strb.w	r6, [r4, #844]	; 0x34c

// Make an option where the waves go opposite

void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    532c:	4b8c      	ldr	r3, [pc, #560]	; (5560 <two_sin(LEDStruct&)+0x3dc>)
    532e:	781b      	ldrb	r3, [r3, #0]
    5330:	2b00      	cmp	r3, #0
    5332:	f040 8110 	bne.w	5556 <two_sin(LEDStruct&)+0x3d2>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    5336:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    533a:	2b00      	cmp	r3, #0
    533c:	f040 80f8 	bne.w	5530 <two_sin(LEDStruct&)+0x3ac>
    5340:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    5344:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    5348:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    534c:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    5350:	4402      	add	r2, r0
    5352:	440b      	add	r3, r1
    5354:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    5358:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    535c:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    5360:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5364:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    5368:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range; k++) {
    536c:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5370:	4494      	add	ip, r2
    5372:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5376:	4403      	add	r3, r0
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5378:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    537c:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range; k++) {
    5380:	2900      	cmp	r1, #0
    5382:	f000 80be 	beq.w	5502 <two_sin(LEDStruct&)+0x37e>
    5386:	4626      	mov	r6, r4
    5388:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    538a:	25ff      	movs	r5, #255	; 0xff
    538c:	e08b      	b.n	54a6 <two_sin(LEDStruct&)+0x322>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    538e:	2b00      	cmp	r3, #0
        in = 255 - in;
    5390:	bfbc      	itt	lt
    5392:	43c9      	mvnlt	r1, r1
    5394:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5396:	0049      	lsls	r1, r1, #1
    5398:	b2c9      	uxtb	r1, r1
    539a:	1c4b      	adds	r3, r1, #1
    539c:	fb03 f101 	mul.w	r1, r3, r1
    53a0:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    53a2:	fb01 f303 	mul.w	r3, r1, r3
    53a6:	121b      	asrs	r3, r3, #8
    53a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    53ac:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    53b0:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    53b2:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    53b4:	bf54      	ite	pl
    53b6:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    53ba:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    53be:	ebc8 0e0e 	rsb	lr, r8, lr
    53c2:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    53c6:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    53ca:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    53ce:	3b80      	subs	r3, #128	; 0x80
    53d0:	4403      	add	r3, r0
    53d2:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    53d4:	b259      	sxtb	r1, r3
    53d6:	2900      	cmp	r1, #0
        in = 255 - in;
    53d8:	bfba      	itte	lt
    53da:	43da      	mvnlt	r2, r3
    53dc:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    53de:	461a      	movge	r2, r3
    53e0:	0052      	lsls	r2, r2, #1
    53e2:	b2d2      	uxtb	r2, r2
    53e4:	1c50      	adds	r0, r2, #1
    53e6:	fb00 f202 	mul.w	r2, r0, r2
    53ea:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    53ec:	fb02 f000 	mul.w	r0, r2, r0
    53f0:	1200      	asrs	r0, r0, #8
    53f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    53f6:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    53fa:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    53fc:	05d0      	lsls	r0, r2, #23
    53fe:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5402:	bf54      	ite	pl
    5404:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5406:	22ff      	movmi	r2, #255	; 0xff
    5408:	4290      	cmp	r0, r2
    540a:	d278      	bcs.n	54fe <two_sin(LEDStruct&)+0x37a>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    540c:	2900      	cmp	r1, #0
        in = 255 - in;
    540e:	bfbc      	itt	lt
    5410:	43db      	mvnlt	r3, r3
    5412:	b2db      	uxtblt	r3, r3
    5414:	005a      	lsls	r2, r3, #1
    5416:	b2d2      	uxtb	r2, r2
    5418:	1c53      	adds	r3, r2, #1
    541a:	fb03 f202 	mul.w	r2, r3, r2
    541e:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5420:	fb02 f303 	mul.w	r3, r2, r3
    5424:	121b      	asrs	r3, r3, #8
    5426:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    542a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    542e:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5430:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5432:	bf54      	ite	pl
    5434:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5436:	23ff      	movmi	r3, #255	; 0xff
    5438:	1a1b      	subs	r3, r3, r0
    543a:	b2db      	uxtb	r3, r3
    543c:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5440:	4631      	mov	r1, r6
    5442:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5444:	f88d c004 	strb.w	ip, [sp, #4]
    5448:	f88d e006 	strb.w	lr, [sp, #6]
    544c:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5450:	f003 fdfa 	bl	9048 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    5454:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5458:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    545c:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5460:	a901      	add	r1, sp, #4
    5462:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5464:	f88d 3000 	strb.w	r3, [sp]
    5468:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    546c:	f003 fdec 	bl	9048 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5470:	7833      	ldrb	r3, [r6, #0]
    5472:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5476:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    547a:	7033      	strb	r3, [r6, #0]
    547c:	7872      	ldrb	r2, [r6, #1]
    547e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5482:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5486:	7072      	strb	r2, [r6, #1]
    5488:	78b3      	ldrb	r3, [r6, #2]
    548a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    548e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5492:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
    5494:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5498:	3701      	adds	r7, #1
    549a:	42bb      	cmp	r3, r7
    549c:	f106 0603 	add.w	r6, r6, #3
    54a0:	dd2f      	ble.n	5502 <two_sin(LEDStruct&)+0x37e>
    54a2:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    54a6:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    54aa:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    54ae:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    54b2:	fb10 f007 	smulbb	r0, r0, r7
    54b6:	b2c0      	uxtb	r0, r0
    54b8:	4401      	add	r1, r0
    54ba:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    54bc:	b24b      	sxtb	r3, r1
    54be:	2b00      	cmp	r3, #0
        in = 255 - in;
    54c0:	bfba      	itte	lt
    54c2:	43ca      	mvnlt	r2, r1
    54c4:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    54c6:	460a      	movge	r2, r1
    54c8:	0052      	lsls	r2, r2, #1
    54ca:	b2d2      	uxtb	r2, r2
    54cc:	f102 0e01 	add.w	lr, r2, #1
    54d0:	fb0e f202 	mul.w	r2, lr, r2
    54d4:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    54d6:	fb02 fe0e 	mul.w	lr, r2, lr
    54da:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    54de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    54e2:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    54e6:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    54e8:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    54ec:	bf0c      	ite	eq
    54ee:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    54f0:	22ff      	movne	r2, #255	; 0xff
    54f2:	4590      	cmp	r8, r2
    54f4:	f4ff af4b 	bcc.w	538e <two_sin(LEDStruct&)+0x20a>
    54f8:	f04f 0e00 	mov.w	lr, #0
    54fc:	e763      	b.n	53c6 <two_sin(LEDStruct&)+0x242>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    54fe:	2300      	movs	r3, #0
    5500:	e79c      	b.n	543c <two_sin(LEDStruct&)+0x2b8>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
	if (!leds.use_full_range) { strip_sync(leds); }
    5502:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5506:	b983      	cbnz	r3, 552a <two_sin(LEDStruct&)+0x3a6>
    5508:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    550c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    550e:	781a      	ldrb	r2, [r3, #0]
    5510:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5514:	785a      	ldrb	r2, [r3, #1]
    5516:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    551a:	789a      	ldrb	r2, [r3, #2]
    551c:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5520:	3303      	adds	r3, #3
    5522:	428b      	cmp	r3, r1
    5524:	f1a4 0403 	sub.w	r4, r4, #3
    5528:	d1f1      	bne.n	550e <two_sin(LEDStruct&)+0x38a>
}
    552a:	b003      	add	sp, #12
    552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    5530:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5534:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    5538:	f894 0340 	ldrb.w	r0, [r4, #832]	; 0x340
    553c:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    5540:	1a12      	subs	r2, r2, r0
    5542:	1a5b      	subs	r3, r3, r1
    5544:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    5548:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    554c:	e706      	b.n	535c <two_sin(LEDStruct&)+0x1d8>

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    554e:	2696      	movs	r6, #150	; 0x96
    5550:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
    5554:	e6d3      	b.n	52fe <two_sin(LEDStruct&)+0x17a>

// Make an option where the waves go opposite

void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5556:	4620      	mov	r0, r4
    5558:	f7ff fdb8 	bl	50cc <two_sin_update(LEDStruct&)>
    555c:	e6eb      	b.n	5336 <two_sin(LEDStruct&)+0x1b2>
    555e:	bf00      	nop
    5560:	1fff95c1 	.word	0x1fff95c1
    5564:	1fff875a 	.word	0x1fff875a

00005568 <noise_update(LEDStruct&)>:
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5568:	4b12      	ldr	r3, [pc, #72]	; (55b4 <noise_update(LEDStruct&)+0x4c>)
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    556a:	4a13      	ldr	r2, [pc, #76]	; (55b8 <noise_update(LEDStruct&)+0x50>)
	switch (update_var) {
    556c:	781b      	ldrb	r3, [r3, #0]
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    556e:	2100      	movs	r1, #0
	switch (update_var) {
    5570:	2b01      	cmp	r3, #1
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    5572:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5574:	d017      	beq.n	55a6 <noise_update(LEDStruct&)+0x3e>
    5576:	d307      	bcc.n	5588 <noise_update(LEDStruct&)+0x20>
    5578:	2b02      	cmp	r3, #2
    557a:	d103      	bne.n	5584 <noise_update(LEDStruct&)+0x1c>
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
    557c:	4b0f      	ldr	r3, [pc, #60]	; (55bc <noise_update(LEDStruct&)+0x54>)
    557e:	881b      	ldrh	r3, [r3, #0]
    5580:	f8a0 3762 	strh.w	r3, [r0, #1890]	; 0x762
		default:	break;
	}
	LEDDebug(leds);
    5584:	f7fc bcc4 	b.w	1f10 <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    5588:	4b0c      	ldr	r3, [pc, #48]	; (55bc <noise_update(LEDStruct&)+0x54>)
    558a:	881b      	ldrh	r3, [r3, #0]
    558c:	2b00      	cmp	r3, #0
    558e:	bf14      	ite	ne
    5590:	2301      	movne	r3, #1
    5592:	2300      	moveq	r3, #0
    5594:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    5598:	bf14      	ite	ne
    559a:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    559c:	234b      	moveq	r3, #75	; 0x4b
    559e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
		default:	break;
	}
	LEDDebug(leds);
    55a2:	f7fc bcb5 	b.w	1f10 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    55a6:	4b05      	ldr	r3, [pc, #20]	; (55bc <noise_update(LEDStruct&)+0x54>)
    55a8:	881b      	ldrh	r3, [r3, #0]
    55aa:	f8a0 3760 	strh.w	r3, [r0, #1888]	; 0x760
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
		default:	break;
	}
	LEDDebug(leds);
    55ae:	f7fc bcaf 	b.w	1f10 <LEDDebug(LEDStruct&)>
    55b2:	bf00      	nop
    55b4:	1fff95d0 	.word	0x1fff95d0
    55b8:	1fff95c1 	.word	0x1fff95c1
    55bc:	1fff95c8 	.word	0x1fff95c8

000055c0 <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    55c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    55c4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    55c8:	b085      	sub	sp, #20
    55ca:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    55cc:	2b00      	cmp	r3, #0
    55ce:	d140      	bne.n	5652 <noise(LEDStruct&)+0x92>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    55d0:	4963      	ldr	r1, [pc, #396]	; (5760 <noise(LEDStruct&)+0x1a0>)
    55d2:	880b      	ldrh	r3, [r1, #0]
    55d4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    55d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    55dc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    55e0:	3219      	adds	r2, #25
    55e2:	b292      	uxth	r2, r2
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    55e4:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    55e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    55ec:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    55f0:	3319      	adds	r3, #25
    55f2:	b29b      	uxth	r3, r3
    55f4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    55f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    55fc:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5600:	3019      	adds	r0, #25
    5602:	b285      	uxth	r5, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5604:	f64b 7068 	movw	r0, #49000	; 0xbf68
    5608:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    560c:	fb00 f005 	mul.w	r0, r0, r5
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5610:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5614:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    5618:	0c00      	lsrs	r0, r0, #16
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    561a:	2601      	movs	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    561c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5620:	330a      	adds	r3, #10
    5622:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
	leds.mode_type = NOISE;
    5626:	2718      	movs	r7, #24
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5628:	800d      	strh	r5, [r1, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    562a:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    562e:	b29b      	uxth	r3, r3
    5630:	b281      	uxth	r1, r0
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    5632:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.mode_type = NOISE;
	leds.use_palette = 1;
    5636:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
    563a:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    563e:	2a00      	cmp	r2, #0
    5640:	f040 8085 	bne.w	574e <noise(LEDStruct&)+0x18e>
	else				  	 { leds.strip_range = ONE_SIDE; }
    5644:	224b      	movs	r2, #75	; 0x4b
    5646:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c

	leds.noise_scale = s;
    564a:	f8a4 3760 	strh.w	r3, [r4, #1888]	; 0x760
	leds.noise_dist = d;
    564e:	f8a4 1762 	strh.w	r1, [r4, #1890]	; 0x762
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    5652:	4b44      	ldr	r3, [pc, #272]	; (5764 <noise(LEDStruct&)+0x1a4>)
    5654:	781b      	ldrb	r3, [r3, #0]
    5656:	2b00      	cmp	r3, #0
    5658:	d17d      	bne.n	5756 <noise(LEDStruct&)+0x196>

	for (int i = 0; i < leds.strip_range; i++) {
    565a:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    565e:	b37b      	cbz	r3, 56c0 <noise(LEDStruct&)+0x100>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    5660:	f8df 910c 	ldr.w	r9, [pc, #268]	; 5770 <noise(LEDStruct&)+0x1b0>
    5664:	f204 18c7 	addw	r8, r4, #455	; 0x1c7
    5668:	4625      	mov	r5, r4

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    566a:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    566c:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    566e:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    5672:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    5676:	fb10 f006 	smulbb	r0, r0, r6
    567a:	b280      	uxth	r0, r0
    567c:	4401      	add	r1, r0
    567e:	b289      	uxth	r1, r1
    5680:	f003 fe8a 	bl	9398 <inoise8(unsigned short, unsigned short)>
    5684:	fba9 3200 	umull	r3, r2, r9, r0
    5688:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    568c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    5690:	9700      	str	r7, [sp, #0]
    5692:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    5694:	f884 2764 	strb.w	r2, [r4, #1892]	; 0x764
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    5698:	4641      	mov	r1, r8
    569a:	a803      	add	r0, sp, #12
    569c:	f003 fad8 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    56a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    56a4:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    56a8:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    56ac:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    56ae:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    56b0:	70ab      	strb	r3, [r5, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    56b2:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    56b6:	3601      	adds	r6, #1
    56b8:	42b3      	cmp	r3, r6
    56ba:	f105 0503 	add.w	r5, r5, #3
    56be:	dcd6      	bgt.n	566e <noise(LEDStruct&)+0xae>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56c0:	4b29      	ldr	r3, [pc, #164]	; (5768 <noise(LEDStruct&)+0x1a8>)
    56c2:	681b      	ldr	r3, [r3, #0]
    56c4:	9303      	str	r3, [sp, #12]
	return ret;
    56c6:	9803      	ldr	r0, [sp, #12]
    56c8:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    56cc:	fb03 f000 	mul.w	r0, r3, r0
    56d0:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    56d2:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    56d4:	0659      	lsls	r1, r3, #25
    56d6:	d535      	bpl.n	5744 <noise(LEDStruct&)+0x184>
        offset = (uint8_t)255 - offset;
    56d8:	43db      	mvns	r3, r3
    56da:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    56dc:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    56e0:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    56e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    56e6:	110b      	asrs	r3, r1, #4
    56e8:	4920      	ldr	r1, [pc, #128]	; (576c <noise(LEDStruct&)+0x1ac>)
    56ea:	005b      	lsls	r3, r3, #1
    56ec:	18cd      	adds	r5, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    56ee:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    56f0:	7869      	ldrb	r1, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    56f2:	fb11 f202 	smulbb	r2, r1, r2
    56f6:	eb03 1322 	add.w	r3, r3, r2, asr #4
    56fa:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    56fc:	0602      	lsls	r2, r0, #24
    56fe:	bf48      	it	mi
    5700:	425b      	negmi	r3, r3
    5702:	b25b      	sxtb	r3, r3

    y += 128;
    5704:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    5706:	f8b4 2762 	ldrh.w	r2, [r4, #1890]	; 0x762

	if (!leds.use_full_range) { strip_sync(leds); }
    570a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    570e:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5712:	3301      	adds	r3, #1
    5714:	4413      	add	r3, r2
    5716:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762

	if (!leds.use_full_range) { strip_sync(leds); }
    571a:	b981      	cbnz	r1, 573e <noise(LEDStruct&)+0x17e>
    571c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5720:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5722:	781a      	ldrb	r2, [r3, #0]
    5724:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5728:	785a      	ldrb	r2, [r3, #1]
    572a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    572e:	789a      	ldrb	r2, [r3, #2]
    5730:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5734:	3303      	adds	r3, #3
    5736:	4299      	cmp	r1, r3
    5738:	f1a4 0403 	sub.w	r4, r4, #3
    573c:	d1f1      	bne.n	5722 <noise(LEDStruct&)+0x162>
}
    573e:	b005      	add	sp, #20
    5740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5744:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5748:	f003 020f 	and.w	r2, r3, #15
    574c:	e7cb      	b.n	56e6 <noise(LEDStruct&)+0x126>
void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    574e:	2296      	movs	r2, #150	; 0x96
    5750:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
    5754:	e779      	b.n	564a <noise(LEDStruct&)+0x8a>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    5756:	4620      	mov	r0, r4
    5758:	f7ff ff06 	bl	5568 <noise_update(LEDStruct&)>
    575c:	e77d      	b.n	565a <noise(LEDStruct&)+0x9a>
    575e:	bf00      	nop
    5760:	1fff875a 	.word	0x1fff875a
    5764:	1fff95c1 	.word	0x1fff95c1
    5768:	1fffa050 	.word	0x1fffa050
    576c:	0000db8c 	.word	0x0000db8c
    5770:	80808081 	.word	0x80808081

00005774 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    5774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5778:	4607      	mov	r7, r0
    577a:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    577c:	f8b0 033c 	ldrh.w	r0, [r0, #828]	; 0x33c
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    5780:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    5784:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    5788:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    578a:	2800      	cmp	r0, #0
    578c:	d06e      	beq.n	586c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    578e:	085b      	lsrs	r3, r3, #1
    5790:	f103 0a14 	add.w	sl, r3, #20
    5794:	f10a 0301 	add.w	r3, sl, #1
    5798:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 5874 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    579c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5878 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    57a0:	9303      	str	r3, [sp, #12]
    57a2:	4614      	mov	r4, r2
    57a4:	2600      	movs	r6, #0
        waveangle += 250;
    57a6:	35fa      	adds	r5, #250	; 0xfa
    57a8:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    57aa:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    57ac:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    57b0:	d503      	bpl.n	57ba <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    57b2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    57b6:	3307      	adds	r3, #7
    57b8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    57ba:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    57bc:	f3c3 0246 	ubfx	r2, r3, #1, #7
    57c0:	f819 0001 	ldrb.w	r0, [r9, r1]
    57c4:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    57c8:	fb00 3302 	mla	r3, r0, r2, r3
    57cc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    57ce:	0428      	lsls	r0, r5, #16
    57d0:	bf48      	it	mi
    57d2:	425b      	negmi	r3, r3
    57d4:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    57d6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    57da:	9a03      	ldr	r2, [sp, #12]
    57dc:	b29b      	uxth	r3, r3
    57de:	fb02 f303 	mul.w	r3, r2, r3
    57e2:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    57e6:	441c      	add	r4, r3
    57e8:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    57ea:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    57ec:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    57f0:	d503      	bpl.n	57fa <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    57f2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    57f6:	3307      	adds	r3, #7
    57f8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    57fa:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    57fc:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5800:	f819 0001 	ldrb.w	r0, [r9, r1]
    5804:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    5808:	9902      	ldr	r1, [sp, #8]
    580a:	fb00 3302 	mla	r3, r0, r2, r3
    580e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5810:	0422      	lsls	r2, r4, #16
    5812:	bf48      	it	mi
    5814:	425b      	negmi	r3, r3
    5816:	b21b      	sxth	r3, r3
    5818:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    581c:	b29b      	uxth	r3, r3
    581e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    5822:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5826:	2301      	movs	r3, #1
    5828:	9300      	str	r3, [sp, #0]
    582a:	a805      	add	r0, sp, #20
    582c:	465b      	mov	r3, fp
    582e:	f3c2 4207 	ubfx	r2, r2, #16, #8
    5832:	f003 fa0d 	bl	8c50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5836:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    583a:	18b9      	adds	r1, r7, r2
    583c:	5cbb      	ldrb	r3, [r7, r2]
    583e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    5842:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5846:	54bb      	strb	r3, [r7, r2]
    5848:	f89d 3015 	ldrb.w	r3, [sp, #21]
    584c:	784a      	ldrb	r2, [r1, #1]
    584e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5852:	704a      	strb	r2, [r1, #1]
    5854:	788b      	ldrb	r3, [r1, #2]
    5856:	f89d 2016 	ldrb.w	r2, [sp, #22]
    585a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    585e:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    5860:	3601      	adds	r6, #1
    5862:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
    5866:	b2b6      	uxth	r6, r6
    5868:	42b3      	cmp	r3, r6
    586a:	d89c      	bhi.n	57a6 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    586c:	b007      	add	sp, #28
    586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5872:	bf00      	nop
    5874:	0000e538 	.word	0x0000e538
    5878:	0000da04 	.word	0x0000da04

0000587c <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5880:	4c58      	ldr	r4, [pc, #352]	; (59e4 <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    5882:	b083      	sub	sp, #12
    5884:	6823      	ldr	r3, [r4, #0]
    5886:	9301      	str	r3, [sp, #4]
	return ret;
    5888:	9901      	ldr	r1, [sp, #4]
    588a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    588e:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    5892:	f3c1 3147 	ubfx	r1, r1, #13, #8
    5896:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5898:	065e      	lsls	r6, r3, #25
    589a:	f140 809e 	bpl.w	59da <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    589e:	43db      	mvns	r3, r3
    58a0:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    58a2:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    58a6:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    58a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    58ac:	f8df a138 	ldr.w	sl, [pc, #312]	; 59e8 <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    58b0:	1112      	asrs	r2, r2, #4
    58b2:	0052      	lsls	r2, r2, #1
    58b4:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    58b8:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    58bc:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    58be:	fb15 f303 	smulbb	r3, r5, r3
    58c2:	eb02 1323 	add.w	r3, r2, r3, asr #4
    58c6:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    58c8:	060d      	lsls	r5, r1, #24
    58ca:	bf48      	it	mi
    58cc:	425b      	negmi	r3, r3
    58ce:	b25b      	sxtb	r3, r3

    y += 128;
    58d0:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    58d2:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    58d4:	6822      	ldr	r2, [r4, #0]
    58d6:	9200      	str	r2, [sp, #0]
    58d8:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    58dc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    58e0:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    58e2:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    58e6:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    58ea:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    58ee:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    58f2:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    58f6:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    58fa:	0e24      	lsrs	r4, r4, #24
    58fc:	2b00      	cmp	r3, #0
    58fe:	d069      	beq.n	59d4 <pacifica_add_whitecaps(LEDStruct&)+0x158>
    5900:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    5904:	44a3      	add	fp, r4
    5906:	43e7      	mvns	r7, r4
    5908:	fa5f fb8b 	uxtb.w	fp, fp
    590c:	f100 0801 	add.w	r8, r0, #1
    5910:	b2ff      	uxtb	r7, r7
    5912:	e058      	b.n	59c6 <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5914:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    5918:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    591a:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    591e:	1112      	asrs	r2, r2, #4
    5920:	0052      	lsls	r2, r2, #1
    5922:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5926:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    592a:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    592c:	f818 ec01 	ldrb.w	lr, [r8,