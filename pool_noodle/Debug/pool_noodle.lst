
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 11 6b 00 00 c9 6a 00 00     ... .....k...j..
      10:	c9 6a 00 00 c9 6a 00 00 c9 6a 00 00 c9 6a 00 00     .j...j...j...j..
      20:	c9 6a 00 00 c9 6a 00 00 c9 6a 00 00 11 6b 00 00     .j...j...j...k..
      30:	11 6b 00 00 c9 6a 00 00 3d 7f 00 00 41 80 00 00     .k...j..=...A...
      40:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      50:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      60:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      70:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      80:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      90:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      a0:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      b0:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      c0:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      d0:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      e0:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
      f0:	11 6b 00 00 cd 82 00 00 11 6b 00 00 f9 83 00 00     .k.......k......
     100:	11 6b 00 00 25 85 00 00 11 6b 00 00 11 6b 00 00     .k..%....k...k..
     110:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     120:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     130:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     140:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     150:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     160:	11 6b 00 00 59 6f 00 00 11 6b 00 00 11 6b 00 00     .k..Yo...k...k..
     170:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     180:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     190:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     1a0:	11 6b 00 00 11 6b 00 00 11 6b 00 00 11 6b 00 00     .k...k...k...k..
     1b0:	11 6b 00 00 11 6b 00 00 11 6b 00 00                 .k...k...k..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f006 fca2 	bl	6b18 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f006 fcf6 	bl	6cc4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f006 fc67 	bl	6bb4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f006 fc58 	bl	6bb4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f008 fcda 	bl	8cc0 <__libc_init_array>

	startup_late_hook();
     30c:	f006 fc0a 	bl	6b24 <startup_late_hook>
	main();
     310:	f007 fe9e 	bl	8050 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c34 	.word	0x1fff8c34
     33c:	0000b7c8 	.word	0x0000b7c8
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c34 	.word	0x1fff8c34
     348:	1fffa00c 	.word	0x1fffa00c
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e2f4a89 	.word	0x5e2f4a89
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c34 	.word	0x1fff8c34
     42c:	00000000 	.word	0x00000000
     430:	0000b7cc 	.word	0x0000b7cc

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c38 	.word	0x1fff8c38
     460:	0000b7cc 	.word	0x0000b7cc
     464:	1fff8c34 	.word	0x1fff8c34
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	4604      	mov	r4, r0
     496:	200e      	movs	r0, #14
     498:	f006 fb9e 	bl	6bd8 <pinMode>
     49c:	2007      	movs	r0, #7
     49e:	2101      	movs	r1, #1
     4a0:	f006 fb9a 	bl	6bd8 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     4a4:	69a0      	ldr	r0, [r4, #24]
     4a6:	b158      	cbz	r0, 4c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     4a8:	6803      	ldr	r3, [r0, #0]
     4aa:	4a07      	ldr	r2, [pc, #28]	; (4c8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	4293      	cmp	r3, r2
     4b0:	d107      	bne.n	4c2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     4b2:	6842      	ldr	r2, [r0, #4]
     4b4:	7b01      	ldrb	r1, [r0, #12]
     4b6:	7813      	ldrb	r3, [r2, #0]
     4b8:	ea23 0301 	bic.w	r3, r3, r1
     4bc:	7013      	strb	r3, [r2, #0]
     4be:	bd10      	pop	{r4, pc}
     4c0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4c6:	4718      	bx	r3
     4c8:	00000481 	.word	0x00000481

000004cc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4d0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4d2:	6805      	ldr	r5, [r0, #0]
     4d4:	f88d 3004 	strb.w	r3, [sp, #4]
     4d8:	f88d 3005 	strb.w	r3, [sp, #5]
     4dc:	f88d 3006 	strb.w	r3, [sp, #6]
     4e0:	682e      	ldr	r6, [r5, #0]
     4e2:	4a37      	ldr	r2, [pc, #220]	; (5c0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4e4:	f88d 3008 	strb.w	r3, [sp, #8]
     4e8:	4296      	cmp	r6, r2
     4ea:	f88d 3009 	strb.w	r3, [sp, #9]
     4ee:	f88d 300a 	strb.w	r3, [sp, #10]
     4f2:	d15f      	bne.n	5b4 <CLEDController::clearLeds(int)+0xe8>
     4f4:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4f6:	9104      	str	r1, [sp, #16]
     4f8:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     4fa:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4fc:	a801      	add	r0, sp, #4
     4fe:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     500:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     504:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     508:	f88d 3020 	strb.w	r3, [sp, #32]
     50c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50e:	d015      	beq.n	53c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     510:	f88d 301d 	strb.w	r3, [sp, #29]
     514:	f88d 301c 	strb.w	r3, [sp, #28]
     518:	f88d 301b 	strb.w	r3, [sp, #27]
     51c:	f88d 301a 	strb.w	r3, [sp, #26]
     520:	f88d 3019 	strb.w	r3, [sp, #25]
     524:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     528:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     52c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     530:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     532:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     534:	a903      	add	r1, sp, #12
     536:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     538:	b00b      	add	sp, #44	; 0x2c
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     53c:	4a21      	ldr	r2, [pc, #132]	; (5c4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     53e:	7813      	ldrb	r3, [r2, #0]
     540:	3301      	adds	r3, #1
     542:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     546:	f013 0f01 	tst.w	r3, #1
     54a:	bf14      	ite	ne
     54c:	2180      	movne	r1, #128	; 0x80
     54e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     550:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     552:	079a      	lsls	r2, r3, #30
     554:	bf44      	itt	mi
     556:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     55a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     55c:	075b      	lsls	r3, r3, #29
     55e:	bf48      	it	mi
     560:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     564:	3110      	adds	r1, #16
     566:	2200      	movs	r2, #0
     568:	b2c9      	uxtb	r1, r1
     56a:	f10d 031b 	add.w	r3, sp, #27
     56e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     572:	f44f 7e80 	mov.w	lr, #256	; 0x100
     576:	b1aa      	cbz	r2, 5a4 <CLEDController::clearLeds(int)+0xd8>
     578:	fb9e f2f2 	sdiv	r2, lr, r2
     57c:	b2d2      	uxtb	r2, r2
     57e:	1c50      	adds	r0, r2, #1
     580:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     582:	fb00 1501 	mla	r5, r0, r1, r1
     586:	122d      	asrs	r5, r5, #8
     588:	7018      	strb	r0, [r3, #0]
     58a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     58c:	b105      	cbz	r5, 590 <CLEDController::clearLeds(int)+0xc4>
     58e:	3e01      	subs	r6, #1
     590:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     594:	b100      	cbz	r0, 598 <CLEDController::clearLeds(int)+0xcc>
     596:	701a      	strb	r2, [r3, #0]
     598:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     59a:	429f      	cmp	r7, r3
     59c:	d008      	beq.n	5b0 <CLEDController::clearLeds(int)+0xe4>
     59e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d1e9      	bne.n	578 <CLEDController::clearLeds(int)+0xac>
     5a4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5a6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ac:	429f      	cmp	r7, r3
     5ae:	d1f6      	bne.n	59e <CLEDController::clearLeds(int)+0xd2>
     5b0:	6825      	ldr	r5, [r4, #0]
     5b2:	e7b9      	b.n	528 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5b4:	460a      	mov	r2, r1
     5b6:	ab02      	add	r3, sp, #8
     5b8:	a901      	add	r1, sp, #4
     5ba:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5bc:	b00b      	add	sp, #44	; 0x2c
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	000005c9 	.word	0x000005c9
     5c4:	1fff8c50 	.word	0x1fff8c50

000005c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     5ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     5d0:	789b      	ldrb	r3, [r3, #2]
     5d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5d6:	9101      	str	r1, [sp, #4]
     5d8:	9202      	str	r2, [sp, #8]
     5da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     5e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     5e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5e8:	d016      	beq.n	618 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5ea:	2300      	movs	r3, #0
     5ec:	f88d 3015 	strb.w	r3, [sp, #21]
     5f0:	f88d 3014 	strb.w	r3, [sp, #20]
     5f4:	f88d 3013 	strb.w	r3, [sp, #19]
     5f8:	f88d 3012 	strb.w	r3, [sp, #18]
     5fc:	f88d 3011 	strb.w	r3, [sp, #17]
     600:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     606:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     608:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     60a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     60e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     610:	a901      	add	r1, sp, #4
     612:	4790      	blx	r2
  }
     614:	b009      	add	sp, #36	; 0x24
     616:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     618:	4a1b      	ldr	r2, [pc, #108]	; (688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     622:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     626:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     628:	bf14      	ite	ne
     62a:	2280      	movne	r2, #128	; 0x80
     62c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     62e:	0799      	lsls	r1, r3, #30
     630:	bf44      	itt	mi
     632:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     636:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     638:	075b      	lsls	r3, r3, #29
     63a:	bf48      	it	mi
     63c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     640:	3210      	adds	r2, #16
     642:	b2d2      	uxtb	r2, r2
     644:	f10d 0313 	add.w	r3, sp, #19
     648:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     64c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     650:	b1ac      	cbz	r4, 67e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     652:	fb9e f4f4 	sdiv	r4, lr, r4
     656:	b2e4      	uxtb	r4, r4
     658:	1c61      	adds	r1, r4, #1
     65a:	b2c9      	uxtb	r1, r1
     65c:	fb01 2502 	mla	r5, r1, r2, r2
     660:	122d      	asrs	r5, r5, #8
     662:	7019      	strb	r1, [r3, #0]
     664:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     666:	b105      	cbz	r5, 66a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     668:	3e01      	subs	r6, #1
     66a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     66e:	b101      	cbz	r1, 672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     670:	701c      	strb	r4, [r3, #0]
     672:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     674:	42bb      	cmp	r3, r7
     676:	d0c5      	beq.n	604 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     678:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67a:	2c00      	cmp	r4, #0
     67c:	d1e9      	bne.n	652 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     67e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     680:	f803 4c03 	strb.w	r4, [r3, #-3]
     684:	e7f5      	b.n	672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     686:	bf00      	nop
     688:	1fff8c50 	.word	0x1fff8c50

0000068c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     690:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     692:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     694:	789b      	ldrb	r3, [r3, #2]
     696:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     698:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     69a:	9101      	str	r1, [sp, #4]
     69c:	9202      	str	r2, [sp, #8]
     69e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6a4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6a8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ac:	d017      	beq.n	6de <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ae:	2300      	movs	r3, #0
     6b0:	f88d 3015 	strb.w	r3, [sp, #21]
     6b4:	f88d 3014 	strb.w	r3, [sp, #20]
     6b8:	f88d 3013 	strb.w	r3, [sp, #19]
     6bc:	f88d 3012 	strb.w	r3, [sp, #18]
     6c0:	f88d 3011 	strb.w	r3, [sp, #17]
     6c4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6c8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6ca:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6cc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ce:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6d0:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d4:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d6:	a901      	add	r1, sp, #4
     6d8:	4798      	blx	r3
  }
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6de:	4a1b      	ldr	r2, [pc, #108]	; (74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6e0:	7813      	ldrb	r3, [r2, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ec:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ee:	bf14      	ite	ne
     6f0:	2280      	movne	r2, #128	; 0x80
     6f2:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f4:	0799      	lsls	r1, r3, #30
     6f6:	bf44      	itt	mi
     6f8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6fc:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6fe:	075b      	lsls	r3, r3, #29
     700:	bf48      	it	mi
     702:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     706:	3210      	adds	r2, #16
     708:	b2d2      	uxtb	r2, r2
     70a:	f10d 0313 	add.w	r3, sp, #19
     70e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1ac      	cbz	r4, 744 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     718:	fb9e f4f4 	sdiv	r4, lr, r4
     71c:	b2e4      	uxtb	r4, r4
     71e:	1c61      	adds	r1, r4, #1
     720:	b2c9      	uxtb	r1, r1
     722:	fb01 2502 	mla	r5, r1, r2, r2
     726:	122d      	asrs	r5, r5, #8
     728:	7019      	strb	r1, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b101      	cbz	r1, 738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     736:	701c      	strb	r4, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	42bb      	cmp	r3, r7
     73c:	d0c4      	beq.n	6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     73e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2c00      	cmp	r4, #0
     742:	d1e9      	bne.n	718 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     744:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 4c03 	strb.w	r4, [r3, #-3]
     74a:	e7f5      	b.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     74c:	1fff8c50 	.word	0x1fff8c50

00000750 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     750:	b570      	push	{r4, r5, r6, lr}
     752:	4604      	mov	r4, r0
     754:	4608      	mov	r0, r1
     756:	460d      	mov	r5, r1
     758:	f008 fb52 	bl	8e00 <strlen>
     75c:	6823      	ldr	r3, [r4, #0]
     75e:	4602      	mov	r2, r0
     760:	4629      	mov	r1, r5
     762:	4620      	mov	r0, r4
     764:	685b      	ldr	r3, [r3, #4]
     766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     76a:	4718      	bx	r3

0000076c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     76c:	b538      	push	{r3, r4, r5, lr}
     76e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     770:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     772:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     774:	f008 fb44 	bl	8e00 <strlen>
     778:	6823      	ldr	r3, [r4, #0]
     77a:	4602      	mov	r2, r0
     77c:	4629      	mov	r1, r5
     77e:	685b      	ldr	r3, [r3, #4]
     780:	4620      	mov	r0, r4
     782:	4798      	blx	r3
     784:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     786:	4620      	mov	r0, r4
     788:	f007 fc6a 	bl	8060 <Print::println()>
     78c:	4428      	add	r0, r5
     78e:	bd38      	pop	{r3, r4, r5, pc}

00000790 <Print::println(unsigned char)>:
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     790:	b538      	push	{r3, r4, r5, lr}
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     792:	220a      	movs	r2, #10
     794:	2300      	movs	r3, #0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     796:	4605      	mov	r5, r0
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     798:	f007 fc72 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     79c:	4604      	mov	r4, r0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     79e:	4628      	mov	r0, r5
     7a0:	f007 fc5e 	bl	8060 <Print::println()>
     7a4:	4420      	add	r0, r4
     7a6:	bd38      	pop	{r3, r4, r5, pc}

000007a8 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     7a8:	4b48      	ldr	r3, [pc, #288]	; (8cc <updatePaletteIndex(LEDStruct&)+0x124>)
     7aa:	781b      	ldrb	r3, [r3, #0]
     7ac:	2b00      	cmp	r3, #0
     7ae:	f000 808b 	beq.w	8c8 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     7b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b6:	b09b      	sub	sp, #108	; 0x6c
     7b8:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     7bc:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     7be:	2300      	movs	r3, #0
     7c0:	4a43      	ldr	r2, [pc, #268]	; (8d0 <updatePaletteIndex(LEDStruct&)+0x128>)
     7c2:	9307      	str	r3, [sp, #28]
     7c4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8d4 <updatePaletteIndex(LEDStruct&)+0x12c>
     7c8:	9009      	str	r0, [sp, #36]	; 0x24
     7ca:	f200 2326 	addw	r3, r0, #550	; 0x226
     7ce:	9208      	str	r2, [sp, #32]
     7d0:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     7d2:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     7d4:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     7d8:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7da:	3701      	adds	r7, #1
        } while ( u.index != 255);
     7dc:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7de:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     7e0:	d1f8      	bne.n	7d4 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7e2:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     7e6:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7e8:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     7ec:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7f0:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     7f2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     7f6:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     7fa:	2400      	movs	r4, #0
     7fc:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7fe:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     802:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     806:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     80a:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     80e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     810:	b2f1      	uxtb	r1, r6
     812:	f3c5 6507 	ubfx	r5, r5, #24, #8
     816:	9103      	str	r1, [sp, #12]
     818:	b2e9      	uxtb	r1, r5
     81a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     81c:	fa5f f18c 	uxtb.w	r1, ip
     820:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     822:	9906      	ldr	r1, [sp, #24]
     824:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     826:	aa0d      	add	r2, sp, #52	; 0x34
     828:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     82a:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     82e:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     832:	d80c      	bhi.n	84e <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     834:	9905      	ldr	r1, [sp, #20]
     836:	458c      	cmp	ip, r1
     838:	dc07      	bgt.n	84a <updatePaletteIndex(LEDStruct&)+0xa2>
     83a:	290f      	cmp	r1, #15
     83c:	d005      	beq.n	84a <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     83e:	3101      	adds	r1, #1
     840:	b2c9      	uxtb	r1, r1
     842:	428b      	cmp	r3, r1
     844:	9102      	str	r1, [sp, #8]
     846:	bf38      	it	cc
     848:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     84a:	b259      	sxtb	r1, r3
     84c:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     84e:	a90c      	add	r1, sp, #48	; 0x30
     850:	9100      	str	r1, [sp, #0]
     852:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     854:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
     858:	f88d e035 	strb.w	lr, [sp, #53]	; 0x35
        b = rhs.b;
     85c:	f88d 8036 	strb.w	r8, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     860:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
     864:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
     868:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
     86c:	f005 fa4e 	bl	5d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     870:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     872:	46d3      	mov	fp, sl
        g = rhs.g;
     874:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     878:	f8dd 8010 	ldr.w	r8, [sp, #16]
     87c:	d1bf      	bne.n	7fe <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     880:	aa0e      	add	r2, sp, #56	; 0x38
     882:	4293      	cmp	r3, r2
     884:	d018      	beq.n	8b8 <updatePaletteIndex(LEDStruct&)+0x110>
     886:	9b09      	ldr	r3, [sp, #36]	; 0x24
     888:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     88a:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     88e:	e001      	b.n	894 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     890:	42a3      	cmp	r3, r4
     892:	d011      	beq.n	8b8 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     894:	f812 1b01 	ldrb.w	r1, [r2], #1
     898:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     89c:	4288      	cmp	r0, r1
     89e:	d0f7      	beq.n	890 <updatePaletteIndex(LEDStruct&)+0xe8>
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <updatePaletteIndex(LEDStruct&)+0x124>)
     8a2:	9a07      	ldr	r2, [sp, #28]
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	3201      	adds	r2, #1
     8a8:	4293      	cmp	r3, r2
     8aa:	9207      	str	r2, [sp, #28]
     8ac:	dd09      	ble.n	8c2 <updatePaletteIndex(LEDStruct&)+0x11a>
     8ae:	9b08      	ldr	r3, [sp, #32]
     8b0:	f853 9f04 	ldr.w	r9, [r3, #4]!
     8b4:	9308      	str	r3, [sp, #32]
     8b6:	e78c      	b.n	7d2 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     8ba:	f89d 201c 	ldrb.w	r2, [sp, #28]
     8be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     8c2:	b01b      	add	sp, #108	; 0x6c
     8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	1fff8744 	.word	0x1fff8744
     8d0:	00009b38 	.word	0x00009b38
     8d4:	00009d5c 	.word	0x00009d5c

000008d8 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8dc:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     8de:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     8e0:	2196      	movs	r1, #150	; 0x96
     8e2:	48be      	ldr	r0, [pc, #760]	; (bdc <initialize()+0x304>)
     8e4:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     8e8:	aa09      	add	r2, sp, #36	; 0x24
     8ea:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     8ee:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     8f2:	f005 f9db 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
     8f6:	4bb9      	ldr	r3, [pc, #740]	; (bdc <initialize()+0x304>)
     8f8:	49b9      	ldr	r1, [pc, #740]	; (be0 <initialize()+0x308>)
     8fa:	f883 71c6 	strb.w	r7, [r3, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     8fe:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     902:	4ab7      	ldr	r2, [pc, #732]	; (be0 <initialize()+0x308>)
            count++;;
        } while ( u.index != 255);
     904:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     906:	3701      	adds	r7, #1
        } while ( u.index != 255);
     908:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     90a:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     90c:	d1f7      	bne.n	8fe <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     90e:	6813      	ldr	r3, [r2, #0]
     910:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     912:	f3c3 4907 	ubfx	r9, r3, #16, #8
     916:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     91a:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     91e:	f04f 33ff 	mov.w	r3, #4294967295
     922:	46ce      	mov	lr, r9
     924:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     926:	2400      	movs	r4, #0
     928:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     92a:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     92e:	48ad      	ldr	r0, [pc, #692]	; (be4 <initialize()+0x30c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     930:	f3c5 2707 	ubfx	r7, r5, #8, #8
     934:	f3c5 4607 	ubfx	r6, r5, #16, #8
     938:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     93a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     93e:	9104      	str	r1, [sp, #16]
     940:	b2f1      	uxtb	r1, r6
     942:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     944:	fa5f f18c 	uxtb.w	r1, ip
     948:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     94a:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     94c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     94e:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     950:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     954:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     956:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     95a:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     95e:	d80c      	bhi.n	97a <initialize()+0xa2>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     960:	9906      	ldr	r1, [sp, #24]
     962:	458c      	cmp	ip, r1
     964:	dc07      	bgt.n	976 <initialize()+0x9e>
     966:	290f      	cmp	r1, #15
     968:	d005      	beq.n	976 <initialize()+0x9e>
                    istart8 = lastSlotUsed + 1;
     96a:	3101      	adds	r1, #1
     96c:	b2c9      	uxtb	r1, r1
     96e:	428b      	cmp	r3, r1
     970:	9103      	str	r1, [sp, #12]
     972:	bf38      	it	cc
     974:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     976:	b259      	sxtb	r1, r3
     978:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     97a:	a908      	add	r1, sp, #32
     97c:	9100      	str	r1, [sp, #0]
     97e:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     980:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     984:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
     988:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     98c:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     990:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     994:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     998:	f005 f9b8 	bl	5d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     99c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     99e:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     9a2:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
     9a6:	46d0      	mov	r8, sl
     9a8:	d1bf      	bne.n	92a <initialize()+0x52>
     9aa:	498f      	ldr	r1, [pc, #572]	; (be8 <initialize()+0x310>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     9ac:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     9ae:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     9b2:	4a8d      	ldr	r2, [pc, #564]	; (be8 <initialize()+0x310>)
            count++;;
        } while ( u.index != 255);
     9b4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     9b6:	3701      	adds	r7, #1
        } while ( u.index != 255);
     9b8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     9ba:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     9bc:	d1f7      	bne.n	9ae <initialize()+0xd6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9be:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     9c0:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     9c2:	ea4f 6813 	mov.w	r8, r3, lsr #24
     9c6:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     9ca:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     9ce:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     9d2:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     9d4:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     9d6:	2400      	movs	r4, #0
     9d8:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9da:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9de:	4b7f      	ldr	r3, [pc, #508]	; (bdc <initialize()+0x304>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9e0:	f3c5 2707 	ubfx	r7, r5, #8, #8
     9e4:	f3c5 4607 	ubfx	r6, r5, #16, #8
     9e8:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     9ea:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9ee:	9104      	str	r1, [sp, #16]
     9f0:	b2f1      	uxtb	r1, r6
     9f2:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     9f4:	fa5f f18c 	uxtb.w	r1, ip
     9f8:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     9fa:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     9fc:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9fe:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a00:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a04:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
     a08:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a0a:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a0e:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a12:	d80c      	bhi.n	a2e <initialize()+0x156>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a14:	9906      	ldr	r1, [sp, #24]
     a16:	458c      	cmp	ip, r1
     a18:	dc07      	bgt.n	a2a <initialize()+0x152>
     a1a:	290f      	cmp	r1, #15
     a1c:	d005      	beq.n	a2a <initialize()+0x152>
                    istart8 = lastSlotUsed + 1;
     a1e:	3101      	adds	r1, #1
     a20:	b2c9      	uxtb	r1, r1
     a22:	428b      	cmp	r3, r1
     a24:	9103      	str	r1, [sp, #12]
     a26:	bf38      	it	cc
     a28:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a2a:	b259      	sxtb	r1, r3
     a2c:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a2e:	a908      	add	r1, sp, #32
     a30:	9100      	str	r1, [sp, #0]
     a32:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a34:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     a38:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     a3c:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a40:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     a44:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     a48:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     a4c:	f005 f95e 	bl	5d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a50:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a52:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     a5a:	46d6      	mov	lr, sl
     a5c:	d1bd      	bne.n	9da <initialize()+0x102>
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
	updatePaletteIndex(curr_leds);
     a5e:	485f      	ldr	r0, [pc, #380]	; (bdc <initialize()+0x304>)
     a60:	f7ff fea2 	bl	7a8 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     a64:	4b61      	ldr	r3, [pc, #388]	; (bec <initialize()+0x314>)
     a66:	4a62      	ldr	r2, [pc, #392]	; (bf0 <initialize()+0x318>)
     a68:	7818      	ldrb	r0, [r3, #0]
     a6a:	4b5c      	ldr	r3, [pc, #368]	; (bdc <initialize()+0x304>)
     a6c:	f883 022b 	strb.w	r0, [r3, #555]	; 0x22b
     a70:	2300      	movs	r3, #0
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
		if (leds.mode_name == ModeList[i]) {
     a72:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a76:	4281      	cmp	r1, r0
     a78:	b2dc      	uxtb	r4, r3
     a7a:	f103 0301 	add.w	r3, r3, #1
     a7e:	f000 80e5 	beq.w	c4c <initialize()+0x374>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     a82:	2b15      	cmp	r3, #21
     a84:	d1f5      	bne.n	a72 <initialize()+0x19a>
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     a86:	4c5b      	ldr	r4, [pc, #364]	; (bf4 <initialize()+0x31c>)
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     a88:	2700      	movs	r7, #0
     a8a:	2196      	movs	r1, #150	; 0x96
     a8c:	4620      	mov	r0, r4
     a8e:	aa09      	add	r2, sp, #36	; 0x24
     a90:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     a94:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     a98:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     a9c:	f005 f906 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     aa0:	2301      	movs	r3, #1
     aa2:	4955      	ldr	r1, [pc, #340]	; (bf8 <initialize()+0x320>)
     aa4:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     aa8:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     aac:	4a52      	ldr	r2, [pc, #328]	; (bf8 <initialize()+0x320>)
            count++;;
        } while ( u.index != 255);
     aae:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ab0:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ab2:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ab4:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ab6:	d1f7      	bne.n	aa8 <initialize()+0x1d0>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ab8:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     aba:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     abc:	ea4f 6813 	mov.w	r8, r3, lsr #24
     ac0:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     ac4:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     ac8:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     acc:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     ace:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     ad0:	2400      	movs	r4, #0
     ad2:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ad4:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ad8:	4848      	ldr	r0, [pc, #288]	; (bfc <initialize()+0x324>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ada:	f3c5 2707 	ubfx	r7, r5, #8, #8
     ade:	f3c5 4607 	ubfx	r6, r5, #16, #8
     ae2:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     ae4:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ae8:	9104      	str	r1, [sp, #16]
     aea:	b2f1      	uxtb	r1, r6
     aec:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     aee:	fa5f f18c 	uxtb.w	r1, ip
     af2:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     af4:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     af6:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     af8:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     afa:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     afe:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b00:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b04:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b08:	d80c      	bhi.n	b24 <initialize()+0x24c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b0a:	9906      	ldr	r1, [sp, #24]
     b0c:	458c      	cmp	ip, r1
     b0e:	dc07      	bgt.n	b20 <initialize()+0x248>
     b10:	290f      	cmp	r1, #15
     b12:	d005      	beq.n	b20 <initialize()+0x248>
                    istart8 = lastSlotUsed + 1;
     b14:	3101      	adds	r1, #1
     b16:	b2c9      	uxtb	r1, r1
     b18:	428b      	cmp	r3, r1
     b1a:	9103      	str	r1, [sp, #12]
     b1c:	bf38      	it	cc
     b1e:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b20:	b259      	sxtb	r1, r3
     b22:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b24:	a908      	add	r1, sp, #32
     b26:	9100      	str	r1, [sp, #0]
     b28:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b2a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     b2e:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     b32:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b36:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     b3a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     b3e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     b42:	f005 f8e3 	bl	5d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b46:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b48:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     b4c:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     b50:	46d6      	mov	lr, sl
     b52:	d1bf      	bne.n	ad4 <initialize()+0x1fc>
     b54:	492a      	ldr	r1, [pc, #168]	; (c00 <initialize()+0x328>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b56:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b58:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     b5c:	4a28      	ldr	r2, [pc, #160]	; (c00 <initialize()+0x328>)
            count++;;
        } while ( u.index != 255);
     b5e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b60:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b62:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b64:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b66:	d1f7      	bne.n	b58 <initialize()+0x280>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b68:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b6a:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b6c:	ea4f 6813 	mov.w	r8, r3, lsr #24
     b70:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b74:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b78:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b7c:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b7e:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b80:	2400      	movs	r4, #0
     b82:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b84:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b88:	4b1a      	ldr	r3, [pc, #104]	; (bf4 <initialize()+0x31c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b8a:	f3c5 2707 	ubfx	r7, r5, #8, #8
     b8e:	f3c5 4607 	ubfx	r6, r5, #16, #8
     b92:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     b94:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b98:	9104      	str	r1, [sp, #16]
     b9a:	b2f1      	uxtb	r1, r6
     b9c:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     b9e:	fa5f f18c 	uxtb.w	r1, ip
     ba2:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     ba4:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     ba6:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ba8:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     baa:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bae:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
     bb2:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     bb4:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bb8:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     bbc:	d822      	bhi.n	c04 <initialize()+0x32c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     bbe:	9906      	ldr	r1, [sp, #24]
     bc0:	458c      	cmp	ip, r1
     bc2:	dc07      	bgt.n	bd4 <initialize()+0x2fc>
     bc4:	290f      	cmp	r1, #15
     bc6:	d005      	beq.n	bd4 <initialize()+0x2fc>
                    istart8 = lastSlotUsed + 1;
     bc8:	3101      	adds	r1, #1
     bca:	b2c9      	uxtb	r1, r1
     bcc:	428b      	cmp	r3, r1
     bce:	9103      	str	r1, [sp, #12]
     bd0:	bf38      	it	cc
     bd2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     bd4:	b259      	sxtb	r1, r3
     bd6:	9106      	str	r1, [sp, #24]
     bd8:	e014      	b.n	c04 <initialize()+0x32c>
     bda:	bf00      	nop
     bdc:	1fff93f8 	.word	0x1fff93f8
     be0:	00009cc8 	.word	0x00009cc8
     be4:	1fff95bf 	.word	0x1fff95bf
     be8:	0000aca8 	.word	0x0000aca8
     bec:	1fff873a 	.word	0x1fff873a
     bf0:	1fff8723 	.word	0x1fff8723
     bf4:	1fff8c80 	.word	0x1fff8c80
     bf8:	0000aa08 	.word	0x0000aa08
     bfc:	1fff8e47 	.word	0x1fff8e47
     c00:	0000ab04 	.word	0x0000ab04
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c04:	a908      	add	r1, sp, #32
     c06:	9100      	str	r1, [sp, #0]
     c08:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c0a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     c0e:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     c12:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c16:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     c1a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     c1e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     c22:	f005 f873 	bl	5d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     c26:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c28:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     c2c:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     c30:	46d6      	mov	lr, sl
     c32:	d1a7      	bne.n	b84 <initialize()+0x2ac>
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     c34:	4a07      	ldr	r2, [pc, #28]	; (c54 <initialize()+0x37c>)
     c36:	4b08      	ldr	r3, [pc, #32]	; (c58 <initialize()+0x380>)
	updatePaletteIndex(next_leds);
     c38:	4610      	mov	r0, r2
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     c3a:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
     c3e:	f882 322a 	strb.w	r3, [r2, #554]	; 0x22a
	updatePaletteIndex(next_leds);
     c42:	f7ff fdb1 	bl	7a8 <updatePaletteIndex(LEDStruct&)>
}
     c46:	b00b      	add	sp, #44	; 0x2c
     c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
		if (leds.mode_name == ModeList[i]) {
			leds.mode_number = i;
     c4c:	4b02      	ldr	r3, [pc, #8]	; (c58 <initialize()+0x380>)
     c4e:	f883 422a 	strb.w	r4, [r3, #554]	; 0x22a
     c52:	e718      	b.n	a86 <initialize()+0x1ae>
     c54:	1fff8c80 	.word	0x1fff8c80
     c58:	1fff93f8 	.word	0x1fff93f8

00000c5c <blending()>:
}



// Transition functions
void blending() {
     c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c60:	f8df b090 	ldr.w	fp, [pc, #144]	; cf4 <blending()+0x98>
     c64:	f8df a090 	ldr.w	sl, [pc, #144]	; cf8 <blending()+0x9c>
     c68:	4c1d      	ldr	r4, [pc, #116]	; (ce0 <blending()+0x84>)
     c6a:	4f1e      	ldr	r7, [pc, #120]	; (ce4 <blending()+0x88>)
     c6c:	b085      	sub	sp, #20
     c6e:	465d      	mov	r5, fp
     c70:	f50b 78e1 	add.w	r8, fp, #450	; 0x1c2
     c74:	4656      	mov	r6, sl
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
     c76:	4632      	mov	r2, r6
     c78:	4629      	mov	r1, r5
     c7a:	783b      	ldrb	r3, [r7, #0]
     c7c:	f8df 9064 	ldr.w	r9, [pc, #100]	; ce4 <blending()+0x88>
     c80:	a803      	add	r0, sp, #12
     c82:	3503      	adds	r5, #3
     c84:	f005 f904 	bl	5e90 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c88:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     c8c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     c90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c94:	7021      	strb	r1, [r4, #0]
     c96:	45a8      	cmp	r8, r5
        g = rhs.g;
     c98:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
     c9a:	70a3      	strb	r3, [r4, #2]
     c9c:	f106 0603 	add.w	r6, r6, #3
     ca0:	f104 0403 	add.w	r4, r4, #3
     ca4:	d1e7      	bne.n	c76 <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
     ca6:	4e10      	ldr	r6, [pc, #64]	; (ce8 <blending()+0x8c>)
     ca8:	6833      	ldr	r3, [r6, #0]
     caa:	07db      	lsls	r3, r3, #31
     cac:	f140 8212 	bpl.w	10d4 <blending()+0x478>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cb0:	4d0e      	ldr	r5, [pc, #56]	; (cec <blending()+0x90>)
     cb2:	4c0f      	ldr	r4, [pc, #60]	; (cf0 <blending()+0x94>)
     cb4:	682b      	ldr	r3, [r5, #0]
     cb6:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     cb8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
     cbc:	9b03      	ldr	r3, [sp, #12]
     cbe:	1a5b      	subs	r3, r3, r1
     cc0:	4293      	cmp	r3, r2
     cc2:	d31b      	bcc.n	cfc <blending()+0xa0>
     cc4:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cc6:	682a      	ldr	r2, [r5, #0]
     cc8:	9202      	str	r2, [sp, #8]
     cca:	3301      	adds	r3, #1
	return ret;
     ccc:	9a02      	ldr	r2, [sp, #8]
     cce:	6022      	str	r2, [r4, #0]
     cd0:	b2db      	uxtb	r3, r3
     cd2:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
     cd4:	2bff      	cmp	r3, #255	; 0xff
     cd6:	d015      	beq.n	d04 <blending()+0xa8>
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
		curr_leds = next_leds;
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
		curr_leds.array_type = CURRENT;
	}
}
     cd8:	b005      	add	sp, #20
     cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cde:	bf00      	nop
     ce0:	1fff9b0c 	.word	0x1fff9b0c
     ce4:	1fff8c76 	.word	0x1fff8c76
     ce8:	1fff93e8 	.word	0x1fff93e8
     cec:	1fff9d48 	.word	0x1fff9d48
     cf0:	1fff93b0 	.word	0x1fff93b0
     cf4:	1fff93f8 	.word	0x1fff93f8
     cf8:	1fff8c80 	.word	0x1fff8c80
     cfc:	f899 3000 	ldrb.w	r3, [r9]

// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
     d00:	2bff      	cmp	r3, #255	; 0xff
     d02:	d1e9      	bne.n	cd8 <blending()+0x7c>
		in_transition = 0;
     d04:	4ce2      	ldr	r4, [pc, #904]	; (1090 <blending()+0x434>)
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d06:	48e3      	ldr	r0, [pc, #908]	; (1094 <blending()+0x438>)
// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
		in_transition = 0;
     d08:	2300      	movs	r3, #0
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d0a:	466a      	mov	r2, sp
     d0c:	2196      	movs	r1, #150	; 0x96
// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
		in_transition = 0;
     d0e:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     d10:	f88d 3000 	strb.w	r3, [sp]
     d14:	f88d 3001 	strb.w	r3, [sp, #1]
     d18:	f88d 3002 	strb.w	r3, [sp, #2]
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d1c:	f004 ffc6 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
     d20:	4bdd      	ldr	r3, [pc, #884]	; (1098 <blending()+0x43c>)
     d22:	4ade      	ldr	r2, [pc, #888]	; (109c <blending()+0x440>)
     d24:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d28:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     d2c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     d30:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d34:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     d38:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     d3c:	f803 1c01 	strb.w	r1, [r3, #-1]
     d40:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     d42:	429d      	cmp	r5, r3
     d44:	f102 0203 	add.w	r2, r2, #3
     d48:	d1ee      	bne.n	d28 <blending()+0xcc>
     d4a:	f89a 01c2 	ldrb.w	r0, [sl, #450]	; 0x1c2
     d4e:	f89a 11c3 	ldrb.w	r1, [sl, #451]	; 0x1c3
     d52:	f89a 21c4 	ldrb.w	r2, [sl, #452]	; 0x1c4
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     d56:	4bd2      	ldr	r3, [pc, #840]	; (10a0 <blending()+0x444>)
     d58:	f88b 01c2 	strb.w	r0, [fp, #450]	; 0x1c2
     d5c:	f88b 11c3 	strb.w	r1, [fp, #451]	; 0x1c3
     d60:	f89a 01c5 	ldrb.w	r0, [sl, #453]	; 0x1c5
     d64:	f89a 11c6 	ldrb.w	r1, [sl, #454]	; 0x1c6
     d68:	f88b 21c4 	strb.w	r2, [fp, #452]	; 0x1c4
     d6c:	4acd      	ldr	r2, [pc, #820]	; (10a4 <blending()+0x448>)
     d6e:	f88b 01c5 	strb.w	r0, [fp, #453]	; 0x1c5
     d72:	f88b 11c6 	strb.w	r1, [fp, #454]	; 0x1c6
     d76:	f103 0030 	add.w	r0, r3, #48	; 0x30
     d7a:	681c      	ldr	r4, [r3, #0]
     d7c:	6859      	ldr	r1, [r3, #4]
     d7e:	6014      	str	r4, [r2, #0]
     d80:	689c      	ldr	r4, [r3, #8]
     d82:	6051      	str	r1, [r2, #4]
     d84:	68d9      	ldr	r1, [r3, #12]
     d86:	60d1      	str	r1, [r2, #12]
     d88:	3310      	adds	r3, #16
     d8a:	4283      	cmp	r3, r0
     d8c:	6094      	str	r4, [r2, #8]
     d8e:	f102 0210 	add.w	r2, r2, #16
     d92:	d1f2      	bne.n	d7a <blending()+0x11e>
     d94:	4bc4      	ldr	r3, [pc, #784]	; (10a8 <blending()+0x44c>)
     d96:	4ac5      	ldr	r2, [pc, #788]	; (10ac <blending()+0x450>)
     d98:	f103 0130 	add.w	r1, r3, #48	; 0x30
     d9c:	681c      	ldr	r4, [r3, #0]
     d9e:	6858      	ldr	r0, [r3, #4]
     da0:	6014      	str	r4, [r2, #0]
     da2:	689c      	ldr	r4, [r3, #8]
     da4:	6050      	str	r0, [r2, #4]
     da6:	68d8      	ldr	r0, [r3, #12]
     da8:	60d0      	str	r0, [r2, #12]
     daa:	3310      	adds	r3, #16
     dac:	428b      	cmp	r3, r1
     dae:	6094      	str	r4, [r2, #8]
     db0:	f102 0210 	add.w	r2, r2, #16
     db4:	d1f2      	bne.n	d9c <blending()+0x140>
     db6:	f89a 2227 	ldrb.w	r2, [sl, #551]	; 0x227
     dba:	f89a 3228 	ldrb.w	r3, [sl, #552]	; 0x228
     dbe:	f89a 4229 	ldrb.w	r4, [sl, #553]	; 0x229
     dc2:	f89a 022a 	ldrb.w	r0, [sl, #554]	; 0x22a
     dc6:	f89a 122b 	ldrb.w	r1, [sl, #555]	; 0x22b
     dca:	f88b 2227 	strb.w	r2, [fp, #551]	; 0x227
     dce:	f89a 222c 	ldrb.w	r2, [sl, #556]	; 0x22c
     dd2:	f88b 3228 	strb.w	r3, [fp, #552]	; 0x228
     dd6:	f88b 4229 	strb.w	r4, [fp, #553]	; 0x229
     dda:	f89a 322d 	ldrb.w	r3, [sl, #557]	; 0x22d
     dde:	f89a 422e 	ldrb.w	r4, [sl, #558]	; 0x22e
     de2:	f88b 022a 	strb.w	r0, [fp, #554]	; 0x22a
     de6:	f88b 122b 	strb.w	r1, [fp, #555]	; 0x22b
     dea:	f89a 022f 	ldrb.w	r0, [sl, #559]	; 0x22f
     dee:	f89a 1230 	ldrb.w	r1, [sl, #560]	; 0x230
     df2:	f88b 222c 	strb.w	r2, [fp, #556]	; 0x22c
     df6:	f89a 2231 	ldrb.w	r2, [sl, #561]	; 0x231
     dfa:	f88b 322d 	strb.w	r3, [fp, #557]	; 0x22d
     dfe:	f88b 422e 	strb.w	r4, [fp, #558]	; 0x22e
     e02:	f89a 3232 	ldrb.w	r3, [sl, #562]	; 0x232
     e06:	f89a 4233 	ldrb.w	r4, [sl, #563]	; 0x233
     e0a:	f88b 022f 	strb.w	r0, [fp, #559]	; 0x22f
     e0e:	f88b 1230 	strb.w	r1, [fp, #560]	; 0x230
     e12:	f89a 0234 	ldrb.w	r0, [sl, #564]	; 0x234
     e16:	f89a 1235 	ldrb.w	r1, [sl, #565]	; 0x235
     e1a:	f88b 2231 	strb.w	r2, [fp, #561]	; 0x231
     e1e:	f89a 2236 	ldrb.w	r2, [sl, #566]	; 0x236
     e22:	f88b 3232 	strb.w	r3, [fp, #562]	; 0x232
     e26:	f88b 4233 	strb.w	r4, [fp, #563]	; 0x233
     e2a:	f88b 1235 	strb.w	r1, [fp, #565]	; 0x235
     e2e:	f88b 2236 	strb.w	r2, [fp, #566]	; 0x236
     e32:	f88b 0234 	strb.w	r0, [fp, #564]	; 0x234
     e36:	f89a 0237 	ldrb.w	r0, [sl, #567]	; 0x237
     e3a:	f89a 4238 	ldrb.w	r4, [sl, #568]	; 0x238
     e3e:	f89a 1239 	ldrb.w	r1, [sl, #569]	; 0x239
     e42:	4b9b      	ldr	r3, [pc, #620]	; (10b0 <blending()+0x454>)
     e44:	f88b 4238 	strb.w	r4, [fp, #568]	; 0x238
     e48:	f88b 1239 	strb.w	r1, [fp, #569]	; 0x239
     e4c:	f89a 423a 	ldrb.w	r4, [sl, #570]	; 0x23a
     e50:	f89a 123b 	ldrb.w	r1, [sl, #571]	; 0x23b
     e54:	f88b 423a 	strb.w	r4, [fp, #570]	; 0x23a
     e58:	f88b 123b 	strb.w	r1, [fp, #571]	; 0x23b
     e5c:	f89a 423c 	ldrb.w	r4, [sl, #572]	; 0x23c
     e60:	f89a 123d 	ldrb.w	r1, [sl, #573]	; 0x23d
     e64:	4a93      	ldr	r2, [pc, #588]	; (10b4 <blending()+0x458>)
     e66:	f88b 0237 	strb.w	r0, [fp, #567]	; 0x237
     e6a:	f88b 423c 	strb.w	r4, [fp, #572]	; 0x23c
     e6e:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     e72:	f88b 123d 	strb.w	r1, [fp, #573]	; 0x23d
     e76:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     e7a:	f803 1b01 	strb.w	r1, [r3], #1
     e7e:	4283      	cmp	r3, r0
     e80:	d1f9      	bne.n	e76 <blending()+0x21a>
     e82:	498d      	ldr	r1, [pc, #564]	; (10b8 <blending()+0x45c>)
     e84:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     e88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     e8c:	f803 2b01 	strb.w	r2, [r3], #1
     e90:	4283      	cmp	r3, r0
     e92:	4a80      	ldr	r2, [pc, #512]	; (1094 <blending()+0x438>)
     e94:	d1f8      	bne.n	e88 <blending()+0x22c>
     e96:	f89a 32d4 	ldrb.w	r3, [sl, #724]	; 0x2d4
     e9a:	f89a 52d5 	ldrb.w	r5, [sl, #725]	; 0x2d5
     e9e:	f89a 42d6 	ldrb.w	r4, [sl, #726]	; 0x2d6
     ea2:	f89a 02d7 	ldrb.w	r0, [sl, #727]	; 0x2d7
     ea6:	f89a 12d8 	ldrb.w	r1, [sl, #728]	; 0x2d8
     eaa:	f882 32d4 	strb.w	r3, [r2, #724]	; 0x2d4
     eae:	f89a 32d9 	ldrb.w	r3, [sl, #729]	; 0x2d9
     eb2:	f882 52d5 	strb.w	r5, [r2, #725]	; 0x2d5
     eb6:	f882 42d6 	strb.w	r4, [r2, #726]	; 0x2d6
     eba:	f8ba 52da 	ldrh.w	r5, [sl, #730]	; 0x2da
     ebe:	f8ba 42dc 	ldrh.w	r4, [sl, #732]	; 0x2dc
     ec2:	f882 02d7 	strb.w	r0, [r2, #727]	; 0x2d7
     ec6:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
     eca:	f8ba 02de 	ldrh.w	r0, [sl, #734]	; 0x2de
     ece:	f89a 12e0 	ldrb.w	r1, [sl, #736]	; 0x2e0
     ed2:	f882 32d9 	strb.w	r3, [r2, #729]	; 0x2d9
     ed6:	f89a 32e1 	ldrb.w	r3, [sl, #737]	; 0x2e1
     eda:	f8a2 52da 	strh.w	r5, [r2, #730]	; 0x2da
     ede:	f8a2 42dc 	strh.w	r4, [r2, #732]	; 0x2dc
     ee2:	f89a 52e2 	ldrb.w	r5, [sl, #738]	; 0x2e2
     ee6:	f89a 42e3 	ldrb.w	r4, [sl, #739]	; 0x2e3
     eea:	f8a2 02de 	strh.w	r0, [r2, #734]	; 0x2de
     eee:	f882 12e0 	strb.w	r1, [r2, #736]	; 0x2e0
     ef2:	f89a 02e4 	ldrb.w	r0, [sl, #740]	; 0x2e4
     ef6:	f89a 12e5 	ldrb.w	r1, [sl, #741]	; 0x2e5
     efa:	f882 32e1 	strb.w	r3, [r2, #737]	; 0x2e1
     efe:	f8ba 32e6 	ldrh.w	r3, [sl, #742]	; 0x2e6
     f02:	f882 52e2 	strb.w	r5, [r2, #738]	; 0x2e2
     f06:	f882 42e3 	strb.w	r4, [r2, #739]	; 0x2e3
     f0a:	f882 02e4 	strb.w	r0, [r2, #740]	; 0x2e4
     f0e:	f882 12e5 	strb.w	r1, [r2, #741]	; 0x2e5
     f12:	f8a2 32e6 	strh.w	r3, [r2, #742]	; 0x2e6
     f16:	f8ba 32e8 	ldrh.w	r3, [sl, #744]	; 0x2e8
     f1a:	f8a2 32e8 	strh.w	r3, [r2, #744]	; 0x2e8
     f1e:	f8ba 52ea 	ldrh.w	r5, [sl, #746]	; 0x2ea
     f22:	f8ba 42ec 	ldrh.w	r4, [sl, #748]	; 0x2ec
     f26:	f8ba 02ee 	ldrh.w	r0, [sl, #750]	; 0x2ee
     f2a:	f8ba 12f0 	ldrh.w	r1, [sl, #752]	; 0x2f0
     f2e:	f8ba 32f2 	ldrh.w	r3, [sl, #754]	; 0x2f2
     f32:	f8a2 52ea 	strh.w	r5, [r2, #746]	; 0x2ea
     f36:	f8a2 42ec 	strh.w	r4, [r2, #748]	; 0x2ec
     f3a:	f8ba 52f4 	ldrh.w	r5, [sl, #756]	; 0x2f4
     f3e:	f8ba 42f6 	ldrh.w	r4, [sl, #758]	; 0x2f6
     f42:	f8a2 02ee 	strh.w	r0, [r2, #750]	; 0x2ee
     f46:	f8a2 12f0 	strh.w	r1, [r2, #752]	; 0x2f0
     f4a:	f8ba 02f8 	ldrh.w	r0, [sl, #760]	; 0x2f8
     f4e:	f8ba 12fa 	ldrh.w	r1, [sl, #762]	; 0x2fa
     f52:	f8a2 32f2 	strh.w	r3, [r2, #754]	; 0x2f2
     f56:	f89a 32fc 	ldrb.w	r3, [sl, #764]	; 0x2fc
     f5a:	f8a2 52f4 	strh.w	r5, [r2, #756]	; 0x2f4
     f5e:	f8a2 42f6 	strh.w	r4, [r2, #758]	; 0x2f6
     f62:	f8a2 02f8 	strh.w	r0, [r2, #760]	; 0x2f8
     f66:	f89a 42fe 	ldrb.w	r4, [sl, #766]	; 0x2fe
     f6a:	f89a 02ff 	ldrb.w	r0, [sl, #767]	; 0x2ff
     f6e:	f8a2 12fa 	strh.w	r1, [r2, #762]	; 0x2fa
     f72:	f882 32fc 	strb.w	r3, [r2, #764]	; 0x2fc
     f76:	f89a 1300 	ldrb.w	r1, [sl, #768]	; 0x300
     f7a:	f89a 3301 	ldrb.w	r3, [sl, #769]	; 0x301
     f7e:	f89a 52fd 	ldrb.w	r5, [sl, #765]	; 0x2fd
     f82:	f882 42fe 	strb.w	r4, [r2, #766]	; 0x2fe
     f86:	f882 02ff 	strb.w	r0, [r2, #767]	; 0x2ff
     f8a:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     f8e:	f882 3301 	strb.w	r3, [r2, #769]	; 0x301
     f92:	f882 52fd 	strb.w	r5, [r2, #765]	; 0x2fd
     f96:	f89a 5302 	ldrb.w	r5, [sl, #770]	; 0x302
     f9a:	f89a 4303 	ldrb.w	r4, [sl, #771]	; 0x303
     f9e:	f89a 0304 	ldrb.w	r0, [sl, #772]	; 0x304
     fa2:	f89a 3305 	ldrb.w	r3, [sl, #773]	; 0x305
     fa6:	f882 5302 	strb.w	r5, [r2, #770]	; 0x302
     faa:	f882 4303 	strb.w	r4, [r2, #771]	; 0x303
     fae:	f89a 5306 	ldrb.w	r5, [sl, #774]	; 0x306
     fb2:	f89a 4307 	ldrb.w	r4, [sl, #775]	; 0x307
     fb6:	f882 0304 	strb.w	r0, [r2, #772]	; 0x304
     fba:	f882 3305 	strb.w	r3, [r2, #773]	; 0x305
     fbe:	f89a 0308 	ldrb.w	r0, [sl, #776]	; 0x308
     fc2:	f89a 3309 	ldrb.w	r3, [sl, #777]	; 0x309
     fc6:	f882 5306 	strb.w	r5, [r2, #774]	; 0x306
     fca:	f882 4307 	strb.w	r4, [r2, #775]	; 0x307
     fce:	f882 0308 	strb.w	r0, [r2, #776]	; 0x308
     fd2:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
     fd6:	f89a 530a 	ldrb.w	r5, [sl, #778]	; 0x30a
     fda:	f89a 3311 	ldrb.w	r3, [sl, #785]	; 0x311
     fde:	f8da 430c 	ldr.w	r4, [sl, #780]	; 0x30c
     fe2:	f89a 0310 	ldrb.w	r0, [sl, #784]	; 0x310
     fe6:	4935      	ldr	r1, [pc, #212]	; (10bc <blending()+0x460>)
     fe8:	f882 3311 	strb.w	r3, [r2, #785]	; 0x311
     fec:	f882 530a 	strb.w	r5, [r2, #778]	; 0x30a
     ff0:	f8c2 430c 	str.w	r4, [r2, #780]	; 0x30c
     ff4:	f882 0310 	strb.w	r0, [r2, #784]	; 0x310
     ff8:	f502 7345 	add.w	r3, r2, #788	; 0x314
     ffc:	f202 4204 	addw	r2, r2, #1028	; 0x404
    1000:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1004:	f843 0b04 	str.w	r0, [r3], #4
    1008:	4293      	cmp	r3, r2
    100a:	d1f9      	bne.n	1000 <blending()+0x3a4>
    100c:	4a2c      	ldr	r2, [pc, #176]	; (10c0 <blending()+0x464>)
    100e:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1012:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1016:	f843 1b04 	str.w	r1, [r3], #4
    101a:	4283      	cmp	r3, r0
    101c:	d1f9      	bne.n	1012 <blending()+0x3b6>
    101e:	4a29      	ldr	r2, [pc, #164]	; (10c4 <blending()+0x468>)
    1020:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    1024:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1028:	f803 1b01 	strb.w	r1, [r3], #1
    102c:	4283      	cmp	r3, r0
    102e:	d1f9      	bne.n	1024 <blending()+0x3c8>
    1030:	4a25      	ldr	r2, [pc, #148]	; (10c8 <blending()+0x46c>)
    1032:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1036:	f852 1f04 	ldr.w	r1, [r2, #4]!
    103a:	f843 1b04 	str.w	r1, [r3], #4
    103e:	4283      	cmp	r3, r0
    1040:	d1f9      	bne.n	1036 <blending()+0x3da>
    1042:	4a22      	ldr	r2, [pc, #136]	; (10cc <blending()+0x470>)
    1044:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1048:	f852 1f04 	ldr.w	r1, [r2, #4]!
    104c:	f843 1b04 	str.w	r1, [r3], #4
    1050:	4283      	cmp	r3, r0
    1052:	4c10      	ldr	r4, [pc, #64]	; (1094 <blending()+0x438>)
    1054:	d1f8      	bne.n	1048 <blending()+0x3ec>
    1056:	f89a 1710 	ldrb.w	r1, [sl, #1808]	; 0x710
    105a:	f89a 6711 	ldrb.w	r6, [sl, #1809]	; 0x711
    105e:	f89a 3712 	ldrb.w	r3, [sl, #1810]	; 0x712
    1062:	f884 1710 	strb.w	r1, [r4, #1808]	; 0x710
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1066:	2500      	movs	r5, #0
		curr_leds = next_leds;
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1068:	466a      	mov	r2, sp
    106a:	4819      	ldr	r0, [pc, #100]	; (10d0 <blending()+0x474>)
    106c:	f884 6711 	strb.w	r6, [r4, #1809]	; 0x711
    1070:	2196      	movs	r1, #150	; 0x96
    1072:	f884 3712 	strb.w	r3, [r4, #1810]	; 0x712
    1076:	f88d 5000 	strb.w	r5, [sp]
    107a:	f88d 5001 	strb.w	r5, [sp, #1]
    107e:	f88d 5002 	strb.w	r5, [sp, #2]
    1082:	f004 fe13 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
		curr_leds.array_type = CURRENT;
    1086:	f884 51c6 	strb.w	r5, [r4, #454]	; 0x1c6
	}
}
    108a:	b005      	add	sp, #20
    108c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1090:	1fff93a4 	.word	0x1fff93a4
    1094:	1fff93f8 	.word	0x1fff93f8
    1098:	1fff93fb 	.word	0x1fff93fb
    109c:	1fff8c83 	.word	0x1fff8c83
    10a0:	1fff8e47 	.word	0x1fff8e47
    10a4:	1fff95bf 	.word	0x1fff95bf
    10a8:	1fff8e77 	.word	0x1fff8e77
    10ac:	1fff95ef 	.word	0x1fff95ef
    10b0:	1fff9636 	.word	0x1fff9636
    10b4:	1fff8ebd 	.word	0x1fff8ebd
    10b8:	1fff8f08 	.word	0x1fff8f08
    10bc:	1fff8f90 	.word	0x1fff8f90
    10c0:	1fff9080 	.word	0x1fff9080
    10c4:	1fff9173 	.word	0x1fff9173
    10c8:	1fff91ac 	.word	0x1fff91ac
    10cc:	1fff929c 	.word	0x1fff929c
    10d0:	1fff8c80 	.word	0x1fff8c80


// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    10d4:	4630      	mov	r0, r6
    10d6:	f005 fd27 	bl	6b28 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10da:	4d0d      	ldr	r5, [pc, #52]	; (1110 <blending()+0x4b4>)
    10dc:	b958      	cbnz	r0, 10f6 <blending()+0x49a>
    10de:	4c0d      	ldr	r4, [pc, #52]	; (1114 <blending()+0x4b8>)
    10e0:	682b      	ldr	r3, [r5, #0]
    10e2:	9303      	str	r3, [sp, #12]
    10e4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    10e8:	9b03      	ldr	r3, [sp, #12]
    10ea:	1a5b      	subs	r3, r3, r1
    10ec:	4293      	cmp	r3, r2
    10ee:	f4bf ade9 	bcs.w	cc4 <blending()+0x68>
    10f2:	783b      	ldrb	r3, [r7, #0]
    10f4:	e5ee      	b.n	cd4 <blending()+0x78>
    10f6:	4b08      	ldr	r3, [pc, #32]	; (1118 <blending()+0x4bc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10f8:	682a      	ldr	r2, [r5, #0]
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	4c05      	ldr	r4, [pc, #20]	; (1114 <blending()+0x4b8>)
    10fe:	9201      	str	r2, [sp, #4]
	return ret;
    1100:	9a01      	ldr	r2, [sp, #4]
    1102:	6022      	str	r2, [r4, #0]
    1104:	009b      	lsls	r3, r3, #2
    1106:	4630      	mov	r0, r6
    1108:	6063      	str	r3, [r4, #4]
    110a:	f005 fd13 	bl	6b34 <__cxa_guard_release>
    110e:	e7e7      	b.n	10e0 <blending()+0x484>
    1110:	1fff9d48 	.word	0x1fff9d48
    1114:	1fff93b0 	.word	0x1fff93b0
    1118:	1fff93ee 	.word	0x1fff93ee

0000111c <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    111c:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    111e:	2101      	movs	r1, #1
    1120:	4604      	mov	r4, r0
    1122:	4894      	ldr	r0, [pc, #592]	; (1374 <print_palette(unsigned char)+0x258>)
    1124:	f006 fd98 	bl	7c58 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1128:	4621      	mov	r1, r4
    112a:	2300      	movs	r3, #0
    112c:	220a      	movs	r2, #10
    112e:	4892      	ldr	r0, [pc, #584]	; (1378 <print_palette(unsigned char)+0x25c>)
    1130:	f006 ffa6 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1134:	2102      	movs	r1, #2
    1136:	4891      	ldr	r0, [pc, #580]	; (137c <print_palette(unsigned char)+0x260>)
    1138:	f006 fd8e 	bl	7c58 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    113c:	2c5c      	cmp	r4, #92	; 0x5c
    113e:	f200 8281 	bhi.w	1644 <print_palette(unsigned char)+0x528>
    1142:	e8df f014 	tbh	[pc, r4, lsl #1]
    1146:	027a      	.short	0x027a
    1148:	02700275 	.word	0x02700275
    114c:	0266026b 	.word	0x0266026b
    1150:	025c0261 	.word	0x025c0261
    1154:	02520257 	.word	0x02520257
    1158:	0248024d 	.word	0x0248024d
    115c:	023e0243 	.word	0x023e0243
    1160:	02340239 	.word	0x02340239
    1164:	022a022f 	.word	0x022a022f
    1168:	02200225 	.word	0x02200225
    116c:	0216021b 	.word	0x0216021b
    1170:	020c0211 	.word	0x020c0211
    1174:	02020207 	.word	0x02020207
    1178:	01f801fd 	.word	0x01f801fd
    117c:	01ee01f3 	.word	0x01ee01f3
    1180:	01e401e9 	.word	0x01e401e9
    1184:	01da01df 	.word	0x01da01df
    1188:	01d001d5 	.word	0x01d001d5
    118c:	01c601cb 	.word	0x01c601cb
    1190:	01bc01c1 	.word	0x01bc01c1
    1194:	01b201b7 	.word	0x01b201b7
    1198:	01a801ad 	.word	0x01a801ad
    119c:	019e01a3 	.word	0x019e01a3
    11a0:	01940199 	.word	0x01940199
    11a4:	018a018f 	.word	0x018a018f
    11a8:	01800185 	.word	0x01800185
    11ac:	0176017b 	.word	0x0176017b
    11b0:	016c0171 	.word	0x016c0171
    11b4:	01110167 	.word	0x01110167
    11b8:	0107010c 	.word	0x0107010c
    11bc:	00fd0102 	.word	0x00fd0102
    11c0:	00f300f8 	.word	0x00f300f8
    11c4:	00e900ee 	.word	0x00e900ee
    11c8:	00df00e4 	.word	0x00df00e4
    11cc:	00d500da 	.word	0x00d500da
    11d0:	00cb00d0 	.word	0x00cb00d0
    11d4:	00c100c6 	.word	0x00c100c6
    11d8:	00b700bc 	.word	0x00b700bc
    11dc:	00ad00b2 	.word	0x00ad00b2
    11e0:	00a300a8 	.word	0x00a300a8
    11e4:	0099009e 	.word	0x0099009e
    11e8:	008f0094 	.word	0x008f0094
    11ec:	0085008a 	.word	0x0085008a
    11f0:	007b0080 	.word	0x007b0080
    11f4:	00710076 	.word	0x00710076
    11f8:	0067006c 	.word	0x0067006c
    11fc:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    1200:	495f      	ldr	r1, [pc, #380]	; (1380 <print_palette(unsigned char)+0x264>)
    1202:	485d      	ldr	r0, [pc, #372]	; (1378 <print_palette(unsigned char)+0x25c>)
    1204:	f7ff fab2 	bl	76c <Print::println(char const*)>
		break;
    1208:	bd10      	pop	{r4, pc}
	case 90:
		Serial.println("purplefly_gp");
		break;

	case 91:
		Serial.println("rainbow2_gp");
    120a:	495e      	ldr	r1, [pc, #376]	; (1384 <print_palette(unsigned char)+0x268>)
    120c:	485a      	ldr	r0, [pc, #360]	; (1378 <print_palette(unsigned char)+0x25c>)
    120e:	f7ff faad 	bl	76c <Print::println(char const*)>
		break;
    1212:	bd10      	pop	{r4, pc}
	case 89:
		Serial.println("blue_fire_gp");
		break;

	case 90:
		Serial.println("purplefly_gp");
    1214:	495c      	ldr	r1, [pc, #368]	; (1388 <print_palette(unsigned char)+0x26c>)
    1216:	4858      	ldr	r0, [pc, #352]	; (1378 <print_palette(unsigned char)+0x25c>)
    1218:	f7ff faa8 	bl	76c <Print::println(char const*)>
		break;
    121c:	bd10      	pop	{r4, pc}
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    121e:	495b      	ldr	r1, [pc, #364]	; (138c <print_palette(unsigned char)+0x270>)
    1220:	4855      	ldr	r0, [pc, #340]	; (1378 <print_palette(unsigned char)+0x25c>)
    1222:	f7ff faa3 	bl	76c <Print::println(char const*)>
		break;
    1226:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    1228:	4959      	ldr	r1, [pc, #356]	; (1390 <print_palette(unsigned char)+0x274>)
    122a:	4853      	ldr	r0, [pc, #332]	; (1378 <print_palette(unsigned char)+0x25c>)
    122c:	f7ff fa9e 	bl	76c <Print::println(char const*)>
		break;
    1230:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    1232:	4958      	ldr	r1, [pc, #352]	; (1394 <print_palette(unsigned char)+0x278>)
    1234:	4850      	ldr	r0, [pc, #320]	; (1378 <print_palette(unsigned char)+0x25c>)
    1236:	f7ff fa99 	bl	76c <Print::println(char const*)>
		break;
    123a:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    123c:	4956      	ldr	r1, [pc, #344]	; (1398 <print_palette(unsigned char)+0x27c>)
    123e:	484e      	ldr	r0, [pc, #312]	; (1378 <print_palette(unsigned char)+0x25c>)
    1240:	f7ff fa94 	bl	76c <Print::println(char const*)>
		break;
    1244:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    1246:	4955      	ldr	r1, [pc, #340]	; (139c <print_palette(unsigned char)+0x280>)
    1248:	484b      	ldr	r0, [pc, #300]	; (1378 <print_palette(unsigned char)+0x25c>)
    124a:	f7ff fa8f 	bl	76c <Print::println(char const*)>
		break;
    124e:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    1250:	4953      	ldr	r1, [pc, #332]	; (13a0 <print_palette(unsigned char)+0x284>)
    1252:	4849      	ldr	r0, [pc, #292]	; (1378 <print_palette(unsigned char)+0x25c>)
    1254:	f7ff fa8a 	bl	76c <Print::println(char const*)>
		break;
    1258:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    125a:	4952      	ldr	r1, [pc, #328]	; (13a4 <print_palette(unsigned char)+0x288>)
    125c:	4846      	ldr	r0, [pc, #280]	; (1378 <print_palette(unsigned char)+0x25c>)
    125e:	f7ff fa85 	bl	76c <Print::println(char const*)>
		break;
    1262:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    1264:	4950      	ldr	r1, [pc, #320]	; (13a8 <print_palette(unsigned char)+0x28c>)
    1266:	4844      	ldr	r0, [pc, #272]	; (1378 <print_palette(unsigned char)+0x25c>)
    1268:	f7ff fa80 	bl	76c <Print::println(char const*)>
		break;
    126c:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    126e:	494f      	ldr	r1, [pc, #316]	; (13ac <print_palette(unsigned char)+0x290>)
    1270:	4841      	ldr	r0, [pc, #260]	; (1378 <print_palette(unsigned char)+0x25c>)
    1272:	f7ff fa7b 	bl	76c <Print::println(char const*)>
		break;
    1276:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    1278:	494d      	ldr	r1, [pc, #308]	; (13b0 <print_palette(unsigned char)+0x294>)
    127a:	483f      	ldr	r0, [pc, #252]	; (1378 <print_palette(unsigned char)+0x25c>)
    127c:	f7ff fa76 	bl	76c <Print::println(char const*)>
		break;
    1280:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    1282:	494c      	ldr	r1, [pc, #304]	; (13b4 <print_palette(unsigned char)+0x298>)
    1284:	483c      	ldr	r0, [pc, #240]	; (1378 <print_palette(unsigned char)+0x25c>)
    1286:	f7ff fa71 	bl	76c <Print::println(char const*)>
		break;
    128a:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    128c:	494a      	ldr	r1, [pc, #296]	; (13b8 <print_palette(unsigned char)+0x29c>)
    128e:	483a      	ldr	r0, [pc, #232]	; (1378 <print_palette(unsigned char)+0x25c>)
    1290:	f7ff fa6c 	bl	76c <Print::println(char const*)>
		break;
    1294:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    1296:	4949      	ldr	r1, [pc, #292]	; (13bc <print_palette(unsigned char)+0x2a0>)
    1298:	4837      	ldr	r0, [pc, #220]	; (1378 <print_palette(unsigned char)+0x25c>)
    129a:	f7ff fa67 	bl	76c <Print::println(char const*)>
		break;
    129e:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    12a0:	4947      	ldr	r1, [pc, #284]	; (13c0 <print_palette(unsigned char)+0x2a4>)
    12a2:	4835      	ldr	r0, [pc, #212]	; (1378 <print_palette(unsigned char)+0x25c>)
    12a4:	f7ff fa62 	bl	76c <Print::println(char const*)>
		break;
    12a8:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    12aa:	4946      	ldr	r1, [pc, #280]	; (13c4 <print_palette(unsigned char)+0x2a8>)
    12ac:	4832      	ldr	r0, [pc, #200]	; (1378 <print_palette(unsigned char)+0x25c>)
    12ae:	f7ff fa5d 	bl	76c <Print::println(char const*)>
		break;
    12b2:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    12b4:	4944      	ldr	r1, [pc, #272]	; (13c8 <print_palette(unsigned char)+0x2ac>)
    12b6:	4830      	ldr	r0, [pc, #192]	; (1378 <print_palette(unsigned char)+0x25c>)
    12b8:	f7ff fa58 	bl	76c <Print::println(char const*)>
		break;
    12bc:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    12be:	4943      	ldr	r1, [pc, #268]	; (13cc <print_palette(unsigned char)+0x2b0>)
    12c0:	482d      	ldr	r0, [pc, #180]	; (1378 <print_palette(unsigned char)+0x25c>)
    12c2:	f7ff fa53 	bl	76c <Print::println(char const*)>
		break;
    12c6:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    12c8:	4941      	ldr	r1, [pc, #260]	; (13d0 <print_palette(unsigned char)+0x2b4>)
    12ca:	482b      	ldr	r0, [pc, #172]	; (1378 <print_palette(unsigned char)+0x25c>)
    12cc:	f7ff fa4e 	bl	76c <Print::println(char const*)>
		break;
    12d0:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    12d2:	4940      	ldr	r1, [pc, #256]	; (13d4 <print_palette(unsigned char)+0x2b8>)
    12d4:	4828      	ldr	r0, [pc, #160]	; (1378 <print_palette(unsigned char)+0x25c>)
    12d6:	f7ff fa49 	bl	76c <Print::println(char const*)>
		break;
    12da:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    12dc:	493e      	ldr	r1, [pc, #248]	; (13d8 <print_palette(unsigned char)+0x2bc>)
    12de:	4826      	ldr	r0, [pc, #152]	; (1378 <print_palette(unsigned char)+0x25c>)
    12e0:	f7ff fa44 	bl	76c <Print::println(char const*)>
		break;
    12e4:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    12e6:	493d      	ldr	r1, [pc, #244]	; (13dc <print_palette(unsigned char)+0x2c0>)
    12e8:	4823      	ldr	r0, [pc, #140]	; (1378 <print_palette(unsigned char)+0x25c>)
    12ea:	f7ff fa3f 	bl	76c <Print::println(char const*)>
		break;
    12ee:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    12f0:	493b      	ldr	r1, [pc, #236]	; (13e0 <print_palette(unsigned char)+0x2c4>)
    12f2:	4821      	ldr	r0, [pc, #132]	; (1378 <print_palette(unsigned char)+0x25c>)
    12f4:	f7ff fa3a 	bl	76c <Print::println(char const*)>
		break;
    12f8:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    12fa:	493a      	ldr	r1, [pc, #232]	; (13e4 <print_palette(unsigned char)+0x2c8>)
    12fc:	481e      	ldr	r0, [pc, #120]	; (1378 <print_palette(unsigned char)+0x25c>)
    12fe:	f7ff fa35 	bl	76c <Print::println(char const*)>
		break;
    1302:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    1304:	4938      	ldr	r1, [pc, #224]	; (13e8 <print_palette(unsigned char)+0x2cc>)
    1306:	481c      	ldr	r0, [pc, #112]	; (1378 <print_palette(unsigned char)+0x25c>)
    1308:	f7ff fa30 	bl	76c <Print::println(char const*)>
		break;
    130c:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    130e:	4937      	ldr	r1, [pc, #220]	; (13ec <print_palette(unsigned char)+0x2d0>)
    1310:	4819      	ldr	r0, [pc, #100]	; (1378 <print_palette(unsigned char)+0x25c>)
    1312:	f7ff fa2b 	bl	76c <Print::println(char const*)>
		break;
    1316:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    1318:	4935      	ldr	r1, [pc, #212]	; (13f0 <print_palette(unsigned char)+0x2d4>)
    131a:	4817      	ldr	r0, [pc, #92]	; (1378 <print_palette(unsigned char)+0x25c>)
    131c:	f7ff fa26 	bl	76c <Print::println(char const*)>
		break;
    1320:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    1322:	4934      	ldr	r1, [pc, #208]	; (13f4 <print_palette(unsigned char)+0x2d8>)
    1324:	4814      	ldr	r0, [pc, #80]	; (1378 <print_palette(unsigned char)+0x25c>)
    1326:	f7ff fa21 	bl	76c <Print::println(char const*)>
		break;
    132a:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    132c:	4932      	ldr	r1, [pc, #200]	; (13f8 <print_palette(unsigned char)+0x2dc>)
    132e:	4812      	ldr	r0, [pc, #72]	; (1378 <print_palette(unsigned char)+0x25c>)
    1330:	f7ff fa1c 	bl	76c <Print::println(char const*)>
		break;
    1334:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    1336:	4931      	ldr	r1, [pc, #196]	; (13fc <print_palette(unsigned char)+0x2e0>)
    1338:	480f      	ldr	r0, [pc, #60]	; (1378 <print_palette(unsigned char)+0x25c>)
    133a:	f7ff fa17 	bl	76c <Print::println(char const*)>
		break;
    133e:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    1340:	492f      	ldr	r1, [pc, #188]	; (1400 <print_palette(unsigned char)+0x2e4>)
    1342:	480d      	ldr	r0, [pc, #52]	; (1378 <print_palette(unsigned char)+0x25c>)
    1344:	f7ff fa12 	bl	76c <Print::println(char const*)>
		break;
    1348:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    134a:	492e      	ldr	r1, [pc, #184]	; (1404 <print_palette(unsigned char)+0x2e8>)
    134c:	480a      	ldr	r0, [pc, #40]	; (1378 <print_palette(unsigned char)+0x25c>)
    134e:	f7ff fa0d 	bl	76c <Print::println(char const*)>
		break;
    1352:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    1354:	492c      	ldr	r1, [pc, #176]	; (1408 <print_palette(unsigned char)+0x2ec>)
    1356:	4808      	ldr	r0, [pc, #32]	; (1378 <print_palette(unsigned char)+0x25c>)
    1358:	f7ff fa08 	bl	76c <Print::println(char const*)>
		break;
    135c:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    135e:	492b      	ldr	r1, [pc, #172]	; (140c <print_palette(unsigned char)+0x2f0>)
    1360:	4805      	ldr	r0, [pc, #20]	; (1378 <print_palette(unsigned char)+0x25c>)
    1362:	f7ff fa03 	bl	76c <Print::println(char const*)>
		break;
    1366:	bd10      	pop	{r4, pc}
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    1368:	4929      	ldr	r1, [pc, #164]	; (1410 <print_palette(unsigned char)+0x2f4>)
    136a:	4803      	ldr	r0, [pc, #12]	; (1378 <print_palette(unsigned char)+0x25c>)
    136c:	f7ff f9fe 	bl	76c <Print::println(char const*)>
		break;
    1370:	bd10      	pop	{r4, pc}
    1372:	bf00      	nop
    1374:	00009dc8 	.word	0x00009dc8
    1378:	1fff8750 	.word	0x1fff8750
    137c:	00009dcc 	.word	0x00009dcc
    1380:	0000a360 	.word	0x0000a360
    1384:	0000a354 	.word	0x0000a354
    1388:	0000a344 	.word	0x0000a344
    138c:	0000a334 	.word	0x0000a334
    1390:	0000a320 	.word	0x0000a320
    1394:	0000a308 	.word	0x0000a308
    1398:	0000a2f0 	.word	0x0000a2f0
    139c:	0000a2e0 	.word	0x0000a2e0
    13a0:	0000a2c8 	.word	0x0000a2c8
    13a4:	0000a2bc 	.word	0x0000a2bc
    13a8:	0000a2b0 	.word	0x0000a2b0
    13ac:	0000a298 	.word	0x0000a298
    13b0:	0000a28c 	.word	0x0000a28c
    13b4:	0000a280 	.word	0x0000a280
    13b8:	0000a274 	.word	0x0000a274
    13bc:	0000a268 	.word	0x0000a268
    13c0:	0000a258 	.word	0x0000a258
    13c4:	0000a24c 	.word	0x0000a24c
    13c8:	0000a238 	.word	0x0000a238
    13cc:	0000a22c 	.word	0x0000a22c
    13d0:	0000a21c 	.word	0x0000a21c
    13d4:	0000a210 	.word	0x0000a210
    13d8:	0000a204 	.word	0x0000a204
    13dc:	0000a1fc 	.word	0x0000a1fc
    13e0:	0000a1e8 	.word	0x0000a1e8
    13e4:	0000a1d8 	.word	0x0000a1d8
    13e8:	0000a1c4 	.word	0x0000a1c4
    13ec:	0000a1b8 	.word	0x0000a1b8
    13f0:	0000a1ac 	.word	0x0000a1ac
    13f4:	0000a1a0 	.word	0x0000a1a0
    13f8:	0000a190 	.word	0x0000a190
    13fc:	0000a17c 	.word	0x0000a17c
    1400:	0000a170 	.word	0x0000a170
    1404:	0000a160 	.word	0x0000a160
    1408:	0000a154 	.word	0x0000a154
    140c:	0000a144 	.word	0x0000a144
    1410:	0000a138 	.word	0x0000a138
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    1414:	498e      	ldr	r1, [pc, #568]	; (1650 <print_palette(unsigned char)+0x534>)
    1416:	488f      	ldr	r0, [pc, #572]	; (1654 <print_palette(unsigned char)+0x538>)
    1418:	f7ff f9a8 	bl	76c <Print::println(char const*)>
		break;
    141c:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    141e:	498e      	ldr	r1, [pc, #568]	; (1658 <print_palette(unsigned char)+0x53c>)
    1420:	488c      	ldr	r0, [pc, #560]	; (1654 <print_palette(unsigned char)+0x538>)
    1422:	f7ff f9a3 	bl	76c <Print::println(char const*)>
		break;
    1426:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1428:	498c      	ldr	r1, [pc, #560]	; (165c <print_palette(unsigned char)+0x540>)
    142a:	488a      	ldr	r0, [pc, #552]	; (1654 <print_palette(unsigned char)+0x538>)
    142c:	f7ff f99e 	bl	76c <Print::println(char const*)>
		break;
    1430:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    1432:	498b      	ldr	r1, [pc, #556]	; (1660 <print_palette(unsigned char)+0x544>)
    1434:	4887      	ldr	r0, [pc, #540]	; (1654 <print_palette(unsigned char)+0x538>)
    1436:	f7ff f999 	bl	76c <Print::println(char const*)>
		break;
    143a:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    143c:	4989      	ldr	r1, [pc, #548]	; (1664 <print_palette(unsigned char)+0x548>)
    143e:	4885      	ldr	r0, [pc, #532]	; (1654 <print_palette(unsigned char)+0x538>)
    1440:	f7ff f994 	bl	76c <Print::println(char const*)>
		break;
    1444:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    1446:	4988      	ldr	r1, [pc, #544]	; (1668 <print_palette(unsigned char)+0x54c>)
    1448:	4882      	ldr	r0, [pc, #520]	; (1654 <print_palette(unsigned char)+0x538>)
    144a:	f7ff f98f 	bl	76c <Print::println(char const*)>
		break;
    144e:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    1450:	4986      	ldr	r1, [pc, #536]	; (166c <print_palette(unsigned char)+0x550>)
    1452:	4880      	ldr	r0, [pc, #512]	; (1654 <print_palette(unsigned char)+0x538>)
    1454:	f7ff f98a 	bl	76c <Print::println(char const*)>
		break;
    1458:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    145a:	4985      	ldr	r1, [pc, #532]	; (1670 <print_palette(unsigned char)+0x554>)
    145c:	487d      	ldr	r0, [pc, #500]	; (1654 <print_palette(unsigned char)+0x538>)
    145e:	f7ff f985 	bl	76c <Print::println(char const*)>
		break;
    1462:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    1464:	4983      	ldr	r1, [pc, #524]	; (1674 <print_palette(unsigned char)+0x558>)
    1466:	487b      	ldr	r0, [pc, #492]	; (1654 <print_palette(unsigned char)+0x538>)
    1468:	f7ff f980 	bl	76c <Print::println(char const*)>
		break;
    146c:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    146e:	4982      	ldr	r1, [pc, #520]	; (1678 <print_palette(unsigned char)+0x55c>)
    1470:	4878      	ldr	r0, [pc, #480]	; (1654 <print_palette(unsigned char)+0x538>)
    1472:	f7ff f97b 	bl	76c <Print::println(char const*)>
		break;
    1476:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    1478:	4980      	ldr	r1, [pc, #512]	; (167c <print_palette(unsigned char)+0x560>)
    147a:	4876      	ldr	r0, [pc, #472]	; (1654 <print_palette(unsigned char)+0x538>)
    147c:	f7ff f976 	bl	76c <Print::println(char const*)>
		break;
    1480:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    1482:	497f      	ldr	r1, [pc, #508]	; (1680 <print_palette(unsigned char)+0x564>)
    1484:	4873      	ldr	r0, [pc, #460]	; (1654 <print_palette(unsigned char)+0x538>)
    1486:	f7ff f971 	bl	76c <Print::println(char const*)>
		break;
    148a:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    148c:	497d      	ldr	r1, [pc, #500]	; (1684 <print_palette(unsigned char)+0x568>)
    148e:	4871      	ldr	r0, [pc, #452]	; (1654 <print_palette(unsigned char)+0x538>)
    1490:	f7ff f96c 	bl	76c <Print::println(char const*)>
		break;
    1494:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    1496:	497c      	ldr	r1, [pc, #496]	; (1688 <print_palette(unsigned char)+0x56c>)
    1498:	486e      	ldr	r0, [pc, #440]	; (1654 <print_palette(unsigned char)+0x538>)
    149a:	f7ff f967 	bl	76c <Print::println(char const*)>
		break;
    149e:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    14a0:	497a      	ldr	r1, [pc, #488]	; (168c <print_palette(unsigned char)+0x570>)
    14a2:	486c      	ldr	r0, [pc, #432]	; (1654 <print_palette(unsigned char)+0x538>)
    14a4:	f7ff f962 	bl	76c <Print::println(char const*)>
		break;
    14a8:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    14aa:	4979      	ldr	r1, [pc, #484]	; (1690 <print_palette(unsigned char)+0x574>)
    14ac:	4869      	ldr	r0, [pc, #420]	; (1654 <print_palette(unsigned char)+0x538>)
    14ae:	f7ff f95d 	bl	76c <Print::println(char const*)>
		break;
    14b2:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    14b4:	4977      	ldr	r1, [pc, #476]	; (1694 <print_palette(unsigned char)+0x578>)
    14b6:	4867      	ldr	r0, [pc, #412]	; (1654 <print_palette(unsigned char)+0x538>)
    14b8:	f7ff f958 	bl	76c <Print::println(char const*)>
		break;
    14bc:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    14be:	4976      	ldr	r1, [pc, #472]	; (1698 <print_palette(unsigned char)+0x57c>)
    14c0:	4864      	ldr	r0, [pc, #400]	; (1654 <print_palette(unsigned char)+0x538>)
    14c2:	f7ff f953 	bl	76c <Print::println(char const*)>
		break;
    14c6:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    14c8:	4974      	ldr	r1, [pc, #464]	; (169c <print_palette(unsigned char)+0x580>)
    14ca:	4862      	ldr	r0, [pc, #392]	; (1654 <print_palette(unsigned char)+0x538>)
    14cc:	f7ff f94e 	bl	76c <Print::println(char const*)>
		break;
    14d0:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    14d2:	4973      	ldr	r1, [pc, #460]	; (16a0 <print_palette(unsigned char)+0x584>)
    14d4:	485f      	ldr	r0, [pc, #380]	; (1654 <print_palette(unsigned char)+0x538>)
    14d6:	f7ff f949 	bl	76c <Print::println(char const*)>
		break;
    14da:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    14dc:	4971      	ldr	r1, [pc, #452]	; (16a4 <print_palette(unsigned char)+0x588>)
    14de:	485d      	ldr	r0, [pc, #372]	; (1654 <print_palette(unsigned char)+0x538>)
    14e0:	f7ff f944 	bl	76c <Print::println(char const*)>
		break;
    14e4:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    14e6:	4970      	ldr	r1, [pc, #448]	; (16a8 <print_palette(unsigned char)+0x58c>)
    14e8:	485a      	ldr	r0, [pc, #360]	; (1654 <print_palette(unsigned char)+0x538>)
    14ea:	f7ff f93f 	bl	76c <Print::println(char const*)>
		break;
    14ee:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    14f0:	496e      	ldr	r1, [pc, #440]	; (16ac <print_palette(unsigned char)+0x590>)
    14f2:	4858      	ldr	r0, [pc, #352]	; (1654 <print_palette(unsigned char)+0x538>)
    14f4:	f7ff f93a 	bl	76c <Print::println(char const*)>
		break;
    14f8:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    14fa:	496d      	ldr	r1, [pc, #436]	; (16b0 <print_palette(unsigned char)+0x594>)
    14fc:	4855      	ldr	r0, [pc, #340]	; (1654 <print_palette(unsigned char)+0x538>)
    14fe:	f7ff f935 	bl	76c <Print::println(char const*)>
		break;
    1502:	bd10      	pop	{r4, pc}
	case 30:
		Serial.println("bhw2_23_gp");
		break;

	case 31:
		Serial.println("bhw2_22_gp");
    1504:	496b      	ldr	r1, [pc, #428]	; (16b4 <print_palette(unsigned char)+0x598>)
    1506:	4853      	ldr	r0, [pc, #332]	; (1654 <print_palette(unsigned char)+0x538>)
    1508:	f7ff f930 	bl	76c <Print::println(char const*)>
		break;
    150c:	bd10      	pop	{r4, pc}
	case 29:
		Serial.println("bhw1_28_gp");
		break;

	case 30:
		Serial.println("bhw2_23_gp");
    150e:	496a      	ldr	r1, [pc, #424]	; (16b8 <print_palette(unsigned char)+0x59c>)
    1510:	4850      	ldr	r0, [pc, #320]	; (1654 <print_palette(unsigned char)+0x538>)
    1512:	f7ff f92b 	bl	76c <Print::println(char const*)>
		break;
    1516:	bd10      	pop	{r4, pc}
	case 28:
		Serial.println("bhw1_26_gp");
		break;

	case 29:
		Serial.println("bhw1_28_gp");
    1518:	4968      	ldr	r1, [pc, #416]	; (16bc <print_palette(unsigned char)+0x5a0>)
    151a:	484e      	ldr	r0, [pc, #312]	; (1654 <print_palette(unsigned char)+0x538>)
    151c:	f7ff f926 	bl	76c <Print::println(char const*)>
		break;
    1520:	bd10      	pop	{r4, pc}
	case 27:
		Serial.println("bhw1_greeny_gp");
		break;

	case 28:
		Serial.println("bhw1_26_gp");
    1522:	4967      	ldr	r1, [pc, #412]	; (16c0 <print_palette(unsigned char)+0x5a4>)
    1524:	484b      	ldr	r0, [pc, #300]	; (1654 <print_palette(unsigned char)+0x538>)
    1526:	f7ff f921 	bl	76c <Print::println(char const*)>
		break;
    152a:	bd10      	pop	{r4, pc}
	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
		break;

	case 27:
		Serial.println("bhw1_greeny_gp");
    152c:	4965      	ldr	r1, [pc, #404]	; (16c4 <print_palette(unsigned char)+0x5a8>)
    152e:	4849      	ldr	r0, [pc, #292]	; (1654 <print_palette(unsigned char)+0x538>)
    1530:	f7ff f91c 	bl	76c <Print::println(char const*)>
		break;
    1534:	bd10      	pop	{r4, pc}
	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
		break;

	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
    1536:	4964      	ldr	r1, [pc, #400]	; (16c8 <print_palette(unsigned char)+0x5ac>)
    1538:	4846      	ldr	r0, [pc, #280]	; (1654 <print_palette(unsigned char)+0x538>)
    153a:	f7ff f917 	bl	76c <Print::println(char const*)>
		break;
    153e:	bd10      	pop	{r4, pc}
	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
		break;

	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
    1540:	4962      	ldr	r1, [pc, #392]	; (16cc <print_palette(unsigned char)+0x5b0>)
    1542:	4844      	ldr	r0, [pc, #272]	; (1654 <print_palette(unsigned char)+0x538>)
    1544:	f7ff f912 	bl	76c <Print::println(char const*)>
		break;
    1548:	bd10      	pop	{r4, pc}
	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
		break;

	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
    154a:	4961      	ldr	r1, [pc, #388]	; (16d0 <print_palette(unsigned char)+0x5b4>)
    154c:	4841      	ldr	r0, [pc, #260]	; (1654 <print_palette(unsigned char)+0x538>)
    154e:	f7ff f90d 	bl	76c <Print::println(char const*)>
		break;
    1552:	bd10      	pop	{r4, pc}
	case 22:
		Serial.println("es_autumn_19_gp");
		break;

	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
    1554:	495f      	ldr	r1, [pc, #380]	; (16d4 <print_palette(unsigned char)+0x5b8>)
    1556:	483f      	ldr	r0, [pc, #252]	; (1654 <print_palette(unsigned char)+0x538>)
    1558:	f7ff f908 	bl	76c <Print::println(char const*)>
		break;
    155c:	bd10      	pop	{r4, pc}
	case 21:
		Serial.println("Sunset_Real_gp");
		break;

	case 22:
		Serial.println("es_autumn_19_gp");
    155e:	495e      	ldr	r1, [pc, #376]	; (16d8 <print_palette(unsigned char)+0x5bc>)
    1560:	483c      	ldr	r0, [pc, #240]	; (1654 <print_palette(unsigned char)+0x538>)
    1562:	f7ff f903 	bl	76c <Print::println(char const*)>
		break;
    1566:	bd10      	pop	{r4, pc}
	case 20:
		Serial.println("Magenta_Evening_gp");
		break;

	case 21:
		Serial.println("Sunset_Real_gp");
    1568:	495c      	ldr	r1, [pc, #368]	; (16dc <print_palette(unsigned char)+0x5c0>)
    156a:	483a      	ldr	r0, [pc, #232]	; (1654 <print_palette(unsigned char)+0x538>)
    156c:	f7ff f8fe 	bl	76c <Print::println(char const*)>
		break;
    1570:	bd10      	pop	{r4, pc}
	case 19:
		Serial.println("Colorfull_gp");
		break;

	case 20:
		Serial.println("Magenta_Evening_gp");
    1572:	495b      	ldr	r1, [pc, #364]	; (16e0 <print_palette(unsigned char)+0x5c4>)
    1574:	4837      	ldr	r0, [pc, #220]	; (1654 <print_palette(unsigned char)+0x538>)
    1576:	f7ff f8f9 	bl	76c <Print::println(char const*)>
		break;
    157a:	bd10      	pop	{r4, pc}
	case 18:
		Serial.println("fire_gp");
		break;

	case 19:
		Serial.println("Colorfull_gp");
    157c:	4959      	ldr	r1, [pc, #356]	; (16e4 <print_palette(unsigned char)+0x5c8>)
    157e:	4835      	ldr	r0, [pc, #212]	; (1654 <print_palette(unsigned char)+0x538>)
    1580:	f7ff f8f4 	bl	76c <Print::println(char const*)>
		break;
    1584:	bd10      	pop	{r4, pc}
	case 17:
		Serial.println("lava_gp");
		break;

	case 18:
		Serial.println("fire_gp");
    1586:	4958      	ldr	r1, [pc, #352]	; (16e8 <print_palette(unsigned char)+0x5cc>)
    1588:	4832      	ldr	r0, [pc, #200]	; (1654 <print_palette(unsigned char)+0x538>)
    158a:	f7ff f8ef 	bl	76c <Print::println(char const*)>
		break;
    158e:	bd10      	pop	{r4, pc}
	case 16:
		Serial.println("es_emerald_dragon_08_gp");
		break;

	case 17:
		Serial.println("lava_gp");
    1590:	4956      	ldr	r1, [pc, #344]	; (16ec <print_palette(unsigned char)+0x5d0>)
    1592:	4830      	ldr	r0, [pc, #192]	; (1654 <print_palette(unsigned char)+0x538>)
    1594:	f7ff f8ea 	bl	76c <Print::println(char const*)>
		break;
    1598:	bd10      	pop	{r4, pc}
	case 15:
		Serial.println("Fuschia_7_gp");
		break;

	case 16:
		Serial.println("es_emerald_dragon_08_gp");
    159a:	4955      	ldr	r1, [pc, #340]	; (16f0 <print_palette(unsigned char)+0x5d4>)
    159c:	482d      	ldr	r0, [pc, #180]	; (1654 <print_palette(unsigned char)+0x538>)
    159e:	f7ff f8e5 	bl	76c <Print::println(char const*)>
		break;
    15a2:	bd10      	pop	{r4, pc}
	case 14:
		Serial.println("ib15_gp");
		break;

	case 15:
		Serial.println("Fuschia_7_gp");
    15a4:	4953      	ldr	r1, [pc, #332]	; (16f4 <print_palette(unsigned char)+0x5d8>)
    15a6:	482b      	ldr	r0, [pc, #172]	; (1654 <print_palette(unsigned char)+0x538>)
    15a8:	f7ff f8e0 	bl	76c <Print::println(char const*)>
		break;
    15ac:	bd10      	pop	{r4, pc}
	case 13:
		Serial.println("GMT_drywet_gp");
		break;

	case 14:
		Serial.println("ib15_gp");
    15ae:	4952      	ldr	r1, [pc, #328]	; (16f8 <print_palette(unsigned char)+0x5dc>)
    15b0:	4828      	ldr	r0, [pc, #160]	; (1654 <print_palette(unsigned char)+0x538>)
    15b2:	f7ff f8db 	bl	76c <Print::println(char const*)>
		break;
    15b6:	bd10      	pop	{r4, pc}
	case 12:
		Serial.println("gr64_hult_gp");
		break;

	case 13:
		Serial.println("GMT_drywet_gp");
    15b8:	4950      	ldr	r1, [pc, #320]	; (16fc <print_palette(unsigned char)+0x5e0>)
    15ba:	4826      	ldr	r0, [pc, #152]	; (1654 <print_palette(unsigned char)+0x538>)
    15bc:	f7ff f8d6 	bl	76c <Print::println(char const*)>
		break;
    15c0:	bd10      	pop	{r4, pc}
	case 11:
		Serial.println("gr65_hult_gp");
		break;

	case 12:
		Serial.println("gr64_hult_gp");
    15c2:	494f      	ldr	r1, [pc, #316]	; (1700 <print_palette(unsigned char)+0x5e4>)
    15c4:	4823      	ldr	r0, [pc, #140]	; (1654 <print_palette(unsigned char)+0x538>)
    15c6:	f7ff f8d1 	bl	76c <Print::println(char const*)>
		break;
    15ca:	bd10      	pop	{r4, pc}
	case 10:
		Serial.println("rainbowsherbet_gp");
		break;

	case 11:
		Serial.println("gr65_hult_gp");
    15cc:	494d      	ldr	r1, [pc, #308]	; (1704 <print_palette(unsigned char)+0x5e8>)
    15ce:	4821      	ldr	r0, [pc, #132]	; (1654 <print_palette(unsigned char)+0x538>)
    15d0:	f7ff f8cc 	bl	76c <Print::println(char const*)>
		break;
    15d4:	bd10      	pop	{r4, pc}
	case 9:
		Serial.println("es_landscape_33_gp");
		break;

	case 10:
		Serial.println("rainbowsherbet_gp");
    15d6:	494c      	ldr	r1, [pc, #304]	; (1708 <print_palette(unsigned char)+0x5ec>)
    15d8:	481e      	ldr	r0, [pc, #120]	; (1654 <print_palette(unsigned char)+0x538>)
    15da:	f7ff f8c7 	bl	76c <Print::println(char const*)>
		break;
    15de:	bd10      	pop	{r4, pc}
	case 8:
		Serial.println("es_landscape_64_gp");
		break;

	case 9:
		Serial.println("es_landscape_33_gp");
    15e0:	494a      	ldr	r1, [pc, #296]	; (170c <print_palette(unsigned char)+0x5f0>)
    15e2:	481c      	ldr	r0, [pc, #112]	; (1654 <print_palette(unsigned char)+0x538>)
    15e4:	f7ff f8c2 	bl	76c <Print::println(char const*)>
		break;
    15e8:	bd10      	pop	{r4, pc}
	case 7:
		Serial.println("es_ocean_breeze_036_gp");
		break;

	case 8:
		Serial.println("es_landscape_64_gp");
    15ea:	4949      	ldr	r1, [pc, #292]	; (1710 <print_palette(unsigned char)+0x5f4>)
    15ec:	4819      	ldr	r0, [pc, #100]	; (1654 <print_palette(unsigned char)+0x538>)
    15ee:	f7ff f8bd 	bl	76c <Print::println(char const*)>
		break;
    15f2:	bd10      	pop	{r4, pc}
	case 6:
		Serial.println("es_ocean_breeze_068_gp");
		break;

	case 7:
		Serial.println("es_ocean_breeze_036_gp");
    15f4:	4947      	ldr	r1, [pc, #284]	; (1714 <print_palette(unsigned char)+0x5f8>)
    15f6:	4817      	ldr	r0, [pc, #92]	; (1654 <print_palette(unsigned char)+0x538>)
    15f8:	f7ff f8b8 	bl	76c <Print::println(char const*)>
		break;
    15fc:	bd10      	pop	{r4, pc}
	case 5:
		Serial.println("Coral_reef_gp");
		break;

	case 6:
		Serial.println("es_ocean_breeze_068_gp");
    15fe:	4946      	ldr	r1, [pc, #280]	; (1718 <print_palette(unsigned char)+0x5fc>)
    1600:	4814      	ldr	r0, [pc, #80]	; (1654 <print_palette(unsigned char)+0x538>)
    1602:	f7ff f8b3 	bl	76c <Print::println(char const*)>
		break;
    1606:	bd10      	pop	{r4, pc}
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    1608:	4944      	ldr	r1, [pc, #272]	; (171c <print_palette(unsigned char)+0x600>)
    160a:	4812      	ldr	r0, [pc, #72]	; (1654 <print_palette(unsigned char)+0x538>)
    160c:	f7ff f8ae 	bl	76c <Print::println(char const*)>
		break;
    1610:	bd10      	pop	{r4, pc}
	case 3:
		Serial.println("es_pinksplash_08_gp");
		break;

	case 4:
		Serial.println("es_pinksplash_07_gp");
    1612:	4943      	ldr	r1, [pc, #268]	; (1720 <print_palette(unsigned char)+0x604>)
    1614:	480f      	ldr	r0, [pc, #60]	; (1654 <print_palette(unsigned char)+0x538>)
    1616:	f7ff f8a9 	bl	76c <Print::println(char const*)>
		break;
    161a:	bd10      	pop	{r4, pc}
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    161c:	4941      	ldr	r1, [pc, #260]	; (1724 <print_palette(unsigned char)+0x608>)
    161e:	480d      	ldr	r0, [pc, #52]	; (1654 <print_palette(unsigned char)+0x538>)
    1620:	f7ff f8a4 	bl	76c <Print::println(char const*)>
		break;
    1624:	bd10      	pop	{r4, pc}
	case 1:
		Serial.println("rgi_15_gp");
		break;

	case 2:
		Serial.println("Analogous_1_gp");
    1626:	4940      	ldr	r1, [pc, #256]	; (1728 <print_palette(unsigned char)+0x60c>)
    1628:	480a      	ldr	r0, [pc, #40]	; (1654 <print_palette(unsigned char)+0x538>)
    162a:	f7ff f89f 	bl	76c <Print::println(char const*)>
		break;
    162e:	bd10      	pop	{r4, pc}
	case 0:
		Serial.println("ib_jul01_gp");
		break;

	case 1:
		Serial.println("rgi_15_gp");
    1630:	493e      	ldr	r1, [pc, #248]	; (172c <print_palette(unsigned char)+0x610>)
    1632:	4808      	ldr	r0, [pc, #32]	; (1654 <print_palette(unsigned char)+0x538>)
    1634:	f7ff f89a 	bl	76c <Print::println(char const*)>
		break;
    1638:	bd10      	pop	{r4, pc}
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    163a:	493d      	ldr	r1, [pc, #244]	; (1730 <print_palette(unsigned char)+0x614>)
    163c:	4805      	ldr	r0, [pc, #20]	; (1654 <print_palette(unsigned char)+0x538>)
    163e:	f7ff f895 	bl	76c <Print::println(char const*)>
		break;
    1642:	bd10      	pop	{r4, pc}
	case 92:
		Serial.println("blade_runner_2049_gp");
		break;

	default:
		Serial.println("Not a gradient palette");
    1644:	493b      	ldr	r1, [pc, #236]	; (1734 <print_palette(unsigned char)+0x618>)
    1646:	4803      	ldr	r0, [pc, #12]	; (1654 <print_palette(unsigned char)+0x538>)
    1648:	f7ff f890 	bl	76c <Print::println(char const*)>
    164c:	bd10      	pop	{r4, pc}
    164e:	bf00      	nop
    1650:	0000a124 	.word	0x0000a124
    1654:	1fff8750 	.word	0x1fff8750
    1658:	0000a114 	.word	0x0000a114
    165c:	0000a108 	.word	0x0000a108
    1660:	0000a0fc 	.word	0x0000a0fc
    1664:	0000a0f0 	.word	0x0000a0f0
    1668:	0000a0dc 	.word	0x0000a0dc
    166c:	0000a0d0 	.word	0x0000a0d0
    1670:	0000a0c4 	.word	0x0000a0c4
    1674:	0000a0b8 	.word	0x0000a0b8
    1678:	0000a0a0 	.word	0x0000a0a0
    167c:	0000a098 	.word	0x0000a098
    1680:	0000a130 	.word	0x0000a130
    1684:	0000a08c 	.word	0x0000a08c
    1688:	0000a080 	.word	0x0000a080
    168c:	0000a06c 	.word	0x0000a06c
    1690:	0000a058 	.word	0x0000a058
    1694:	0000a048 	.word	0x0000a048
    1698:	0000a03c 	.word	0x0000a03c
    169c:	0000a030 	.word	0x0000a030
    16a0:	0000a024 	.word	0x0000a024
    16a4:	0000a018 	.word	0x0000a018
    16a8:	0000a00c 	.word	0x0000a00c
    16ac:	0000a000 	.word	0x0000a000
    16b0:	00009ff4 	.word	0x00009ff4
    16b4:	00009fe8 	.word	0x00009fe8
    16b8:	00009fdc 	.word	0x00009fdc
    16bc:	00009fd0 	.word	0x00009fd0
    16c0:	00009fc4 	.word	0x00009fc4
    16c4:	00009fb4 	.word	0x00009fb4
    16c8:	00009fa0 	.word	0x00009fa0
    16cc:	00009f84 	.word	0x00009f84
    16d0:	00009f6c 	.word	0x00009f6c
    16d4:	00009f50 	.word	0x00009f50
    16d8:	00009f40 	.word	0x00009f40
    16dc:	00009f30 	.word	0x00009f30
    16e0:	00009f1c 	.word	0x00009f1c
    16e4:	00009f0c 	.word	0x00009f0c
    16e8:	00009f04 	.word	0x00009f04
    16ec:	00009efc 	.word	0x00009efc
    16f0:	00009ee4 	.word	0x00009ee4
    16f4:	00009ed4 	.word	0x00009ed4
    16f8:	00009ecc 	.word	0x00009ecc
    16fc:	00009ebc 	.word	0x00009ebc
    1700:	00009eac 	.word	0x00009eac
    1704:	00009e9c 	.word	0x00009e9c
    1708:	00009e88 	.word	0x00009e88
    170c:	00009e74 	.word	0x00009e74
    1710:	00009e60 	.word	0x00009e60
    1714:	00009e48 	.word	0x00009e48
    1718:	00009e30 	.word	0x00009e30
    171c:	00009e20 	.word	0x00009e20
    1720:	00009e0c 	.word	0x00009e0c
    1724:	00009df8 	.word	0x00009df8
    1728:	00009de8 	.word	0x00009de8
    172c:	00009ddc 	.word	0x00009ddc
    1730:	00009dd0 	.word	0x00009dd0
    1734:	0000a378 	.word	0x0000a378

00001738 <LEDDebug(LEDStruct&)>:
	leds.led_data(ONE_SIDE, NUM_LEDS - 1) = -leds.led_data(ONE_SIDE - 1, 0);
}
*/

// Debugging function
void LEDDebug(LEDStruct& leds) {
    1738:	b510      	push	{r4, lr}
    173a:	2100      	movs	r1, #0
    173c:	4604      	mov	r4, r0
    173e:	48b4      	ldr	r0, [pc, #720]	; (1a10 <LEDDebug(LEDStruct&)+0x2d8>)
    1740:	f006 fa8a 	bl	7c58 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1744:	48b3      	ldr	r0, [pc, #716]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1746:	f006 fc8b 	bl	8060 <Print::println()>
    174a:	2132      	movs	r1, #50	; 0x32
    174c:	48b2      	ldr	r0, [pc, #712]	; (1a18 <LEDDebug(LEDStruct&)+0x2e0>)
    174e:	f006 fa83 	bl	7c58 <usb_serial_write>
    1752:	48b0      	ldr	r0, [pc, #704]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1754:	f006 fc84 	bl	8060 <Print::println()>
    1758:	2112      	movs	r1, #18
    175a:	48b0      	ldr	r0, [pc, #704]	; (1a1c <LEDDebug(LEDStruct&)+0x2e4>)
    175c:	f006 fa7c 	bl	7c58 <usb_serial_write>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    1760:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    1764:	2b00      	cmp	r3, #0
    1766:	f000 808c 	beq.w	1882 <LEDDebug(LEDStruct&)+0x14a>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    176a:	2b01      	cmp	r3, #1
    176c:	f000 8284 	beq.w	1c78 <LEDDebug(LEDStruct&)+0x540>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1770:	2b02      	cmp	r3, #2
    1772:	f000 8286 	beq.w	1c82 <LEDDebug(LEDStruct&)+0x54a>
    1776:	2112      	movs	r1, #18
    1778:	48a9      	ldr	r0, [pc, #676]	; (1a20 <LEDDebug(LEDStruct&)+0x2e8>)
    177a:	f006 fa6d 	bl	7c58 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    177e:	2300      	movs	r3, #0
    1780:	220a      	movs	r2, #10
    1782:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
    1786:	48a3      	ldr	r0, [pc, #652]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1788:	f006 fc7a 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    178c:	48a1      	ldr	r0, [pc, #644]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    178e:	f006 fc67 	bl	8060 <Print::println()>
    1792:	2112      	movs	r1, #18
    1794:	48a3      	ldr	r0, [pc, #652]	; (1a24 <LEDDebug(LEDStruct&)+0x2ec>)
    1796:	f006 fa5f 	bl	7c58 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    179a:	2300      	movs	r3, #0
    179c:	220a      	movs	r2, #10
    179e:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    17a2:	489c      	ldr	r0, [pc, #624]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17a4:	f006 fc6c 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    17a8:	489a      	ldr	r0, [pc, #616]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17aa:	f006 fc59 	bl	8060 <Print::println()>
    17ae:	2112      	movs	r1, #18
    17b0:	489d      	ldr	r0, [pc, #628]	; (1a28 <LEDDebug(LEDStruct&)+0x2f0>)
    17b2:	f006 fa51 	bl	7c58 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    17b6:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    17ba:	4896      	ldr	r0, [pc, #600]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17bc:	f006 fca0 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    17c0:	4894      	ldr	r0, [pc, #592]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17c2:	f006 fc4d 	bl	8060 <Print::println()>
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    17c6:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    17ca:	2b00      	cmp	r3, #0
    17cc:	d154      	bne.n	1878 <LEDDebug(LEDStruct&)+0x140>
    17ce:	2112      	movs	r1, #18
    17d0:	4896      	ldr	r0, [pc, #600]	; (1a2c <LEDDebug(LEDStruct&)+0x2f4>)
    17d2:	f006 fa41 	bl	7c58 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    17d6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    17da:	488e      	ldr	r0, [pc, #568]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17dc:	f006 fc90 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    17e0:	488c      	ldr	r0, [pc, #560]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17e2:	f006 fc3d 	bl	8060 <Print::println()>
    17e6:	2112      	movs	r1, #18
    17e8:	4891      	ldr	r0, [pc, #580]	; (1a30 <LEDDebug(LEDStruct&)+0x2f8>)
    17ea:	f006 fa35 	bl	7c58 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    17ee:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    17f2:	4888      	ldr	r0, [pc, #544]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17f4:	f006 fc84 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    17f8:	4886      	ldr	r0, [pc, #536]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    17fa:	f006 fc31 	bl	8060 <Print::println()>
    17fe:	2112      	movs	r1, #18
    1800:	488c      	ldr	r0, [pc, #560]	; (1a34 <LEDDebug(LEDStruct&)+0x2fc>)
    1802:	f006 fa29 	bl	7c58 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1806:	2300      	movs	r3, #0
    1808:	220a      	movs	r2, #10
    180a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    180e:	4881      	ldr	r0, [pc, #516]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1810:	f006 fc36 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1814:	487f      	ldr	r0, [pc, #508]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1816:	f006 fc23 	bl	8060 <Print::println()>
    181a:	2112      	movs	r1, #18
    181c:	4886      	ldr	r0, [pc, #536]	; (1a38 <LEDDebug(LEDStruct&)+0x300>)
    181e:	f006 fa1b 	bl	7c58 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1822:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    1826:	487b      	ldr	r0, [pc, #492]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1828:	f006 fc6a 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    182c:	4879      	ldr	r0, [pc, #484]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    182e:	f006 fc17 	bl	8060 <Print::println()>
    1832:	2119      	movs	r1, #25
    1834:	4881      	ldr	r0, [pc, #516]	; (1a3c <LEDDebug(LEDStruct&)+0x304>)
    1836:	f006 fa0f 	bl	7c58 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    183a:	4876      	ldr	r0, [pc, #472]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    183c:	f006 fc10 	bl	8060 <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
    1840:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    1844:	2b14      	cmp	r3, #20
    1846:	f200 820a 	bhi.w	1c5e <LEDDebug(LEDStruct&)+0x526>
    184a:	e8df f013 	tbh	[pc, r3, lsl #1]
    184e:	0066      	.short	0x0066
    1850:	02080208 	.word	0x02080208
    1854:	02080208 	.word	0x02080208
    1858:	020800bc 	.word	0x020800bc
    185c:	01210208 	.word	0x01210208
    1860:	02080208 	.word	0x02080208
    1864:	02080208 	.word	0x02080208
    1868:	02080208 	.word	0x02080208
    186c:	015e0203 	.word	0x015e0203
    1870:	01710163 	.word	0x01710163
    1874:	002201be 	.word	0x002201be
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1878:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    187c:	f7ff fc4e 	bl	111c <print_palette(unsigned char)>
    1880:	e7a5      	b.n	17ce <LEDDebug(LEDStruct&)+0x96>
    1882:	2107      	movs	r1, #7
    1884:	486e      	ldr	r0, [pc, #440]	; (1a40 <LEDDebug(LEDStruct&)+0x308>)
    1886:	f006 f9e7 	bl	7c58 <usb_serial_write>
    188a:	4862      	ldr	r0, [pc, #392]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    188c:	f006 fbe8 	bl	8060 <Print::println()>
    1890:	e771      	b.n	1776 <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("bg_bri:        ");
			Serial.println(leds.bg_bri);
			break;

		case SHOOTING_POLE:
			Serial.println("=====SHOOTING POLE=====");
    1892:	496c      	ldr	r1, [pc, #432]	; (1a44 <LEDDebug(LEDStruct&)+0x30c>)
    1894:	485f      	ldr	r0, [pc, #380]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1896:	f7fe ff69 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    189a:	496b      	ldr	r1, [pc, #428]	; (1a48 <LEDDebug(LEDStruct&)+0x310>)
    189c:	485d      	ldr	r0, [pc, #372]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    189e:	f7fe ff57 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    18a2:	f8b4 12fa 	ldrh.w	r1, [r4, #762]	; 0x2fa
    18a6:	485b      	ldr	r0, [pc, #364]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18a8:	f006 fc2a 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    18ac:	4859      	ldr	r0, [pc, #356]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18ae:	f006 fbd7 	bl	8060 <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    18b2:	4966      	ldr	r1, [pc, #408]	; (1a4c <LEDDebug(LEDStruct&)+0x314>)
    18b4:	4857      	ldr	r0, [pc, #348]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18b6:	f7fe ff4b 	bl	750 <Print::write(char const*)>
			Serial.print("strip_range:     ");
			Serial.println(leds.strip_range);
			Serial.print("pole_diff:       ");
			Serial.println(leds.pole_diff);
    18ba:	f894 1712 	ldrb.w	r1, [r4, #1810]	; 0x712
    18be:	4855      	ldr	r0, [pc, #340]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18c0:	f7fe ff66 	bl	790 <Print::println(unsigned char)>
    18c4:	4962      	ldr	r1, [pc, #392]	; (1a50 <LEDDebug(LEDStruct&)+0x318>)
    18c6:	4853      	ldr	r0, [pc, #332]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18c8:	f7fe ff42 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_beat:     ");
			Serial.println(leds.juggle_beat);
    18cc:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    18d0:	4850      	ldr	r0, [pc, #320]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18d2:	f7fe ff5d 	bl	790 <Print::println(unsigned char)>
    18d6:	495f      	ldr	r1, [pc, #380]	; (1a54 <LEDDebug(LEDStruct&)+0x31c>)
    18d8:	484e      	ldr	r0, [pc, #312]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18da:	f7fe ff39 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_diff:     ");
			Serial.println(leds.juggle_diff);
    18de:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    18e2:	484c      	ldr	r0, [pc, #304]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18e4:	f7fe ff54 	bl	790 <Print::println(unsigned char)>
    18e8:	495b      	ldr	r1, [pc, #364]	; (1a58 <LEDDebug(LEDStruct&)+0x320>)
    18ea:	484a      	ldr	r0, [pc, #296]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18ec:	f7fe ff30 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_fade:     ");
			Serial.println(leds.juggle_fade);
    18f0:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    18f4:	4847      	ldr	r0, [pc, #284]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    18f6:	f7fe ff4b 	bl	790 <Print::println(unsigned char)>
    18fa:	2119      	movs	r1, #25
    18fc:	484f      	ldr	r0, [pc, #316]	; (1a3c <LEDDebug(LEDStruct&)+0x304>)
    18fe:	f006 f9ab 	bl	7c58 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1902:	4844      	ldr	r0, [pc, #272]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1904:	f006 fbac 	bl	8060 <Print::println()>
    1908:	2100      	movs	r1, #0
    190a:	4841      	ldr	r0, [pc, #260]	; (1a10 <LEDDebug(LEDStruct&)+0x2d8>)
    190c:	f006 f9a4 	bl	7c58 <usb_serial_write>
    1910:	4840      	ldr	r0, [pc, #256]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
    1912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1916:	f006 bba3 	b.w	8060 <Print::println()>
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("===JUGGLE VARIABLES===");
    191a:	4950      	ldr	r1, [pc, #320]	; (1a5c <LEDDebug(LEDStruct&)+0x324>)
    191c:	483d      	ldr	r0, [pc, #244]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    191e:	f7fe ff25 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1922:	494f      	ldr	r1, [pc, #316]	; (1a60 <LEDDebug(LEDStruct&)+0x328>)
    1924:	483b      	ldr	r0, [pc, #236]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1926:	f7fe ff13 	bl	750 <Print::write(char const*)>
			Serial.print("index:         ");
			Serial.println(leds.juggle_index);
    192a:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    192e:	4839      	ldr	r0, [pc, #228]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1930:	f7fe ff2e 	bl	790 <Print::println(unsigned char)>
    1934:	494b      	ldr	r1, [pc, #300]	; (1a64 <LEDDebug(LEDStruct&)+0x32c>)
    1936:	4837      	ldr	r0, [pc, #220]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1938:	f7fe ff0a 	bl	750 <Print::write(char const*)>
			Serial.print("numdots:       ");
			Serial.println(leds.juggle_numdots);
    193c:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    1940:	4834      	ldr	r0, [pc, #208]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1942:	f7fe ff25 	bl	790 <Print::println(unsigned char)>
    1946:	4948      	ldr	r1, [pc, #288]	; (1a68 <LEDDebug(LEDStruct&)+0x330>)
    1948:	4832      	ldr	r0, [pc, #200]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    194a:	f7fe ff01 	bl	750 <Print::write(char const*)>
			Serial.print("beat:          ");
			Serial.println(leds.juggle_beat);
    194e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1952:	4830      	ldr	r0, [pc, #192]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1954:	f7fe ff1c 	bl	790 <Print::println(unsigned char)>
    1958:	4944      	ldr	r1, [pc, #272]	; (1a6c <LEDDebug(LEDStruct&)+0x334>)
    195a:	482e      	ldr	r0, [pc, #184]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    195c:	f7fe fef8 	bl	750 <Print::write(char const*)>
			Serial.print("fade:          ");
			Serial.println(leds.juggle_fade);
    1960:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    1964:	482b      	ldr	r0, [pc, #172]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1966:	f7fe ff13 	bl	790 <Print::println(unsigned char)>
    196a:	4941      	ldr	r1, [pc, #260]	; (1a70 <LEDDebug(LEDStruct&)+0x338>)
    196c:	4829      	ldr	r0, [pc, #164]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    196e:	f7fe feef 	bl	750 <Print::write(char const*)>
			Serial.print("diff:          ");
			Serial.println(leds.juggle_diff);
    1972:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    1976:	4827      	ldr	r0, [pc, #156]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1978:	f7fe ff0a 	bl	790 <Print::println(unsigned char)>
    197c:	493d      	ldr	r1, [pc, #244]	; (1a74 <LEDDebug(LEDStruct&)+0x33c>)
    197e:	4825      	ldr	r0, [pc, #148]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1980:	f7fe fee6 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1984:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    1988:	4822      	ldr	r0, [pc, #136]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    198a:	f006 fbb9 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    198e:	4821      	ldr	r0, [pc, #132]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1990:	f006 fb66 	bl	8060 <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1994:	4938      	ldr	r1, [pc, #224]	; (1a78 <LEDDebug(LEDStruct&)+0x340>)
    1996:	481f      	ldr	r0, [pc, #124]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1998:	f7fe feda 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    199c:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    19a0:	481c      	ldr	r0, [pc, #112]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19a2:	f006 fbad 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    19a6:	481b      	ldr	r0, [pc, #108]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19a8:	f006 fb5a 	bl	8060 <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    19ac:	4933      	ldr	r1, [pc, #204]	; (1a7c <LEDDebug(LEDStruct&)+0x344>)
    19ae:	4819      	ldr	r0, [pc, #100]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19b0:	f7fe fece 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    19b4:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    19b8:	4816      	ldr	r0, [pc, #88]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19ba:	f006 fba1 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    19be:	4815      	ldr	r0, [pc, #84]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19c0:	f006 fb4e 	bl	8060 <Print::println()>
    19c4:	e799      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    19c6:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    19ca:	2b00      	cmp	r3, #0
    19cc:	f040 815e 	bne.w	1c8c <LEDDebug(LEDStruct&)+0x554>
    19d0:	492b      	ldr	r1, [pc, #172]	; (1a80 <LEDDebug(LEDStruct&)+0x348>)
    19d2:	4810      	ldr	r0, [pc, #64]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19d4:	f7fe feca 	bl	76c <Print::println(char const*)>
    19d8:	210b      	movs	r1, #11
    19da:	482a      	ldr	r0, [pc, #168]	; (1a84 <LEDDebug(LEDStruct&)+0x34c>)
    19dc:	f006 f93c 	bl	7c58 <usb_serial_write>
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
			Serial.print("index:     ");
			Serial.println(leds.rainbow_index);
    19e0:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    19e4:	480b      	ldr	r0, [pc, #44]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19e6:	f7fe fed3 	bl	790 <Print::println(unsigned char)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    19ea:	4927      	ldr	r1, [pc, #156]	; (1a88 <LEDDebug(LEDStruct&)+0x350>)
    19ec:	4809      	ldr	r0, [pc, #36]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19ee:	f7fe feaf 	bl	750 <Print::write(char const*)>
			Serial.print("diff:      ");
			Serial.println(leds.rainbow_diff);
    19f2:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    19f6:	4807      	ldr	r0, [pc, #28]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    19f8:	f7fe feca 	bl	790 <Print::println(unsigned char)>
    19fc:	4923      	ldr	r1, [pc, #140]	; (1a8c <LEDDebug(LEDStruct&)+0x354>)
    19fe:	4805      	ldr	r0, [pc, #20]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1a00:	f7fe fea6 	bl	750 <Print::write(char const*)>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
    1a04:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    1a08:	4802      	ldr	r0, [pc, #8]	; (1a14 <LEDDebug(LEDStruct&)+0x2dc>)
    1a0a:	f7fe fec1 	bl	790 <Print::println(unsigned char)>
			break;
    1a0e:	e774      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
    1a10:	0000a854 	.word	0x0000a854
    1a14:	1fff8750 	.word	0x1fff8750
    1a18:	0000a390 	.word	0x0000a390
    1a1c:	0000a3c4 	.word	0x0000a3c4
    1a20:	0000a3f0 	.word	0x0000a3f0
    1a24:	0000a404 	.word	0x0000a404
    1a28:	0000a418 	.word	0x0000a418
    1a2c:	0000a42c 	.word	0x0000a42c
    1a30:	0000a440 	.word	0x0000a440
    1a34:	0000a454 	.word	0x0000a454
    1a38:	0000a468 	.word	0x0000a468
    1a3c:	0000a47c 	.word	0x0000a47c
    1a40:	0000a3d8 	.word	0x0000a3d8
    1a44:	0000a768 	.word	0x0000a768
    1a48:	0000a780 	.word	0x0000a780
    1a4c:	0000a794 	.word	0x0000a794
    1a50:	0000a7a8 	.word	0x0000a7a8
    1a54:	0000a7bc 	.word	0x0000a7bc
    1a58:	0000a7d0 	.word	0x0000a7d0
    1a5c:	0000a498 	.word	0x0000a498
    1a60:	0000a4b0 	.word	0x0000a4b0
    1a64:	0000a4c0 	.word	0x0000a4c0
    1a68:	0000a4d0 	.word	0x0000a4d0
    1a6c:	0000a4e0 	.word	0x0000a4e0
    1a70:	0000a4f0 	.word	0x0000a4f0
    1a74:	0000a500 	.word	0x0000a500
    1a78:	0000a510 	.word	0x0000a510
    1a7c:	0000a520 	.word	0x0000a520
    1a80:	0000a530 	.word	0x0000a530
    1a84:	0000a560 	.word	0x0000a560
    1a88:	0000a56c 	.word	0x0000a56c
    1a8c:	0000a71c 	.word	0x0000a71c

		case FIRE:
			if (leds.mode_name == TORCH) { Serial.print("=====TORCH"); }
    1a90:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    1a94:	488e      	ldr	r0, [pc, #568]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1a96:	2b0d      	cmp	r3, #13
    1a98:	bf0c      	ite	eq
    1a9a:	498e      	ldreq	r1, [pc, #568]	; (1cd4 <LEDDebug(LEDStruct&)+0x59c>)
    1a9c:	498e      	ldrne	r1, [pc, #568]	; (1cd8 <LEDDebug(LEDStruct&)+0x5a0>)
    1a9e:	f7fe fe57 	bl	750 <Print::write(char const*)>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
    1aa2:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	f040 810d 	bne.w	1cc6 <LEDDebug(LEDStruct&)+0x58e>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
    1aac:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	f040 8103 	bne.w	1cbc <LEDDebug(LEDStruct&)+0x584>
			Serial.println("=====");
    1ab6:	4989      	ldr	r1, [pc, #548]	; (1cdc <LEDDebug(LEDStruct&)+0x5a4>)
    1ab8:	4885      	ldr	r0, [pc, #532]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1aba:	f7fe fe57 	bl	76c <Print::println(char const*)>
    1abe:	4988      	ldr	r1, [pc, #544]	; (1ce0 <LEDDebug(LEDStruct&)+0x5a8>)
    1ac0:	4883      	ldr	r0, [pc, #524]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1ac2:	f7fe fe45 	bl	750 <Print::write(char const*)>
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
    1ac6:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    1aca:	4881      	ldr	r0, [pc, #516]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1acc:	f7fe fe60 	bl	790 <Print::println(unsigned char)>
    1ad0:	4984      	ldr	r1, [pc, #528]	; (1ce4 <LEDDebug(LEDStruct&)+0x5ac>)
    1ad2:	487f      	ldr	r0, [pc, #508]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1ad4:	f7fe fe3c 	bl	750 <Print::write(char const*)>
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
    1ad8:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    1adc:	487c      	ldr	r0, [pc, #496]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1ade:	f7fe fe57 	bl	790 <Print::println(unsigned char)>
			if (!leds.fire_sync) {
    1ae2:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	f000 80d5 	beq.w	1c96 <LEDDebug(LEDStruct&)+0x55e>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH) {
    1aec:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    1af0:	2b0d      	cmp	r3, #13
    1af2:	f47f af02 	bne.w	18fa <LEDDebug(LEDStruct&)+0x1c2>
    1af6:	497c      	ldr	r1, [pc, #496]	; (1ce8 <LEDDebug(LEDStruct&)+0x5b0>)
    1af8:	4875      	ldr	r0, [pc, #468]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1afa:	f7fe fe29 	bl	750 <Print::write(char const*)>
				Serial.print("torch_diff:  ");
				Serial.println(leds.torch_diff);
    1afe:	f894 12d9 	ldrb.w	r1, [r4, #729]	; 0x2d9
    1b02:	4873      	ldr	r0, [pc, #460]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b04:	f7fe fe44 	bl	790 <Print::println(unsigned char)>
    1b08:	e6f7      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
		case COLORWAVE:
			Serial.println("=====COLORWAVE=====");
			break;

		case PRIDE:
			Serial.println("=====PRIDE=====");
    1b0a:	4978      	ldr	r1, [pc, #480]	; (1cec <LEDDebug(LEDStruct&)+0x5b4>)
    1b0c:	4870      	ldr	r0, [pc, #448]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b0e:	f7fe fe2d 	bl	76c <Print::println(char const*)>
			break;
    1b12:	e6f2      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>

		case CONFETTI:
			Serial.println("=====CONFETTI=====");
    1b14:	4976      	ldr	r1, [pc, #472]	; (1cf0 <LEDDebug(LEDStruct&)+0x5b8>)
    1b16:	486e      	ldr	r0, [pc, #440]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b18:	f7fe fe28 	bl	76c <Print::println(char const*)>
    1b1c:	4975      	ldr	r1, [pc, #468]	; (1cf4 <LEDDebug(LEDStruct&)+0x5bc>)
    1b1e:	486c      	ldr	r0, [pc, #432]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b20:	f7fe fe16 	bl	750 <Print::write(char const*)>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
    1b24:	f894 12fc 	ldrb.w	r1, [r4, #764]	; 0x2fc
    1b28:	4869      	ldr	r0, [pc, #420]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b2a:	f7fe fe31 	bl	790 <Print::println(unsigned char)>
			break;
    1b2e:	e6e4      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
			Serial.print("Next explosion time: ");
			Serial.println(leds.next_explosion_time);
			break;

		case ONE_SIN:
			Serial.println("=====ONE_SIN=====");
    1b30:	4971      	ldr	r1, [pc, #452]	; (1cf8 <LEDDebug(LEDStruct&)+0x5c0>)
    1b32:	4867      	ldr	r0, [pc, #412]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b34:	f7fe fe1a 	bl	76c <Print::println(char const*)>
    1b38:	4970      	ldr	r1, [pc, #448]	; (1cfc <LEDDebug(LEDStruct&)+0x5c4>)
    1b3a:	4865      	ldr	r0, [pc, #404]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b3c:	f7fe fe08 	bl	750 <Print::write(char const*)>
			Serial.print("sin_inc:       ");
			Serial.println(leds.sin_inc);
    1b40:	f894 12fd 	ldrb.w	r1, [r4, #765]	; 0x2fd
    1b44:	4862      	ldr	r0, [pc, #392]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b46:	f7fe fe23 	bl	790 <Print::println(unsigned char)>
    1b4a:	496d      	ldr	r1, [pc, #436]	; (1d00 <LEDDebug(LEDStruct&)+0x5c8>)
    1b4c:	4860      	ldr	r0, [pc, #384]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b4e:	f7fe fdff 	bl	750 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    1b52:	f894 12fe 	ldrb.w	r1, [r4, #766]	; 0x2fe
    1b56:	485e      	ldr	r0, [pc, #376]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b58:	f7fe fe1a 	bl	790 <Print::println(unsigned char)>
    1b5c:	4969      	ldr	r1, [pc, #420]	; (1d04 <LEDDebug(LEDStruct&)+0x5cc>)
    1b5e:	485c      	ldr	r0, [pc, #368]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b60:	f7fe fdf6 	bl	750 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    1b64:	f894 12ff 	ldrb.w	r1, [r4, #767]	; 0x2ff
    1b68:	4859      	ldr	r0, [pc, #356]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b6a:	f7fe fe11 	bl	790 <Print::println(unsigned char)>
    1b6e:	4966      	ldr	r1, [pc, #408]	; (1d08 <LEDDebug(LEDStruct&)+0x5d0>)
    1b70:	4857      	ldr	r0, [pc, #348]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b72:	f7fe fded 	bl	750 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    1b76:	f894 1300 	ldrb.w	r1, [r4, #768]	; 0x300
    1b7a:	4855      	ldr	r0, [pc, #340]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b7c:	f7fe fe08 	bl	790 <Print::println(unsigned char)>
    1b80:	4962      	ldr	r1, [pc, #392]	; (1d0c <LEDDebug(LEDStruct&)+0x5d4>)
    1b82:	4853      	ldr	r0, [pc, #332]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b84:	f7fe fde4 	bl	750 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    1b88:	f894 1306 	ldrb.w	r1, [r4, #774]	; 0x306
    1b8c:	4850      	ldr	r0, [pc, #320]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b8e:	f7fe fdff 	bl	790 <Print::println(unsigned char)>
    1b92:	495f      	ldr	r1, [pc, #380]	; (1d10 <LEDDebug(LEDStruct&)+0x5d8>)
    1b94:	484e      	ldr	r0, [pc, #312]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1b96:	f7fe fddb 	bl	750 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    1b9a:	f894 1301 	ldrb.w	r1, [r4, #769]	; 0x301
    1b9e:	484c      	ldr	r0, [pc, #304]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1ba0:	f7fe fdf6 	bl	790 <Print::println(unsigned char)>
    1ba4:	495b      	ldr	r1, [pc, #364]	; (1d14 <LEDDebug(LEDStruct&)+0x5dc>)
    1ba6:	484a      	ldr	r0, [pc, #296]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1ba8:	f7fe fdd2 	bl	750 <Print::write(char const*)>
			Serial.print("bg_clr:        ");
			Serial.println(leds.bg_clr);
    1bac:	f894 1302 	ldrb.w	r1, [r4, #770]	; 0x302
    1bb0:	4847      	ldr	r0, [pc, #284]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1bb2:	f7fe fded 	bl	790 <Print::println(unsigned char)>
    1bb6:	4958      	ldr	r1, [pc, #352]	; (1d18 <LEDDebug(LEDStruct&)+0x5e0>)
    1bb8:	4845      	ldr	r0, [pc, #276]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1bba:	f7fe fdc9 	bl	750 <Print::write(char const*)>
			Serial.print("bg_bri:        ");
			Serial.println(leds.bg_bri);
    1bbe:	f894 1303 	ldrb.w	r1, [r4, #771]	; 0x303
    1bc2:	4843      	ldr	r0, [pc, #268]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1bc4:	f7fe fde4 	bl	790 <Print::println(unsigned char)>
			break;
    1bc8:	e697      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
			break;

		case FIREWORKS:
			Serial.println("=====FIREWORKS=====");
    1bca:	4954      	ldr	r1, [pc, #336]	; (1d1c <LEDDebug(LEDStruct&)+0x5e4>)
    1bcc:	4840      	ldr	r0, [pc, #256]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1bce:	f7fe fdcd 	bl	76c <Print::println(char const*)>
    1bd2:	4953      	ldr	r1, [pc, #332]	; (1d20 <LEDDebug(LEDStruct&)+0x5e8>)
    1bd4:	483e      	ldr	r0, [pc, #248]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1bd6:	f7fe fdbb 	bl	750 <Print::write(char const*)>
			Serial.print("firework_position:   ");
			Serial.println(leds.firework_position);
    1bda:	f894 1307 	ldrb.w	r1, [r4, #775]	; 0x307
    1bde:	483c      	ldr	r0, [pc, #240]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1be0:	f7fe fdd6 	bl	790 <Print::println(unsigned char)>
    1be4:	494f      	ldr	r1, [pc, #316]	; (1d24 <LEDDebug(LEDStruct&)+0x5ec>)
    1be6:	483a      	ldr	r0, [pc, #232]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1be8:	f7fe fdb2 	bl	750 <Print::write(char const*)>
			Serial.print("Current Stage:  ");
			switch (leds.current_stage) {
    1bec:	f894 330a 	ldrb.w	r3, [r4, #778]	; 0x30a
    1bf0:	2b01      	cmp	r3, #1
    1bf2:	d00a      	beq.n	1c0a <LEDDebug(LEDStruct&)+0x4d2>
    1bf4:	d305      	bcc.n	1c02 <LEDDebug(LEDStruct&)+0x4ca>
    1bf6:	2b02      	cmp	r3, #2
    1bf8:	d10b      	bne.n	1c12 <LEDDebug(LEDStruct&)+0x4da>
			case WAITING: Serial.println("WAITING");
    1bfa:	494b      	ldr	r1, [pc, #300]	; (1d28 <LEDDebug(LEDStruct&)+0x5f0>)
    1bfc:	4834      	ldr	r0, [pc, #208]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1bfe:	f7fe fdb5 	bl	76c <Print::println(char const*)>
			case FADEUP: Serial.println("FADEUP");
    1c02:	494a      	ldr	r1, [pc, #296]	; (1d2c <LEDDebug(LEDStruct&)+0x5f4>)
    1c04:	4832      	ldr	r0, [pc, #200]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c06:	f7fe fdb1 	bl	76c <Print::println(char const*)>
			case EXPLOSION: Serial.println("EXPLOSION");
    1c0a:	4949      	ldr	r1, [pc, #292]	; (1d30 <LEDDebug(LEDStruct&)+0x5f8>)
    1c0c:	4830      	ldr	r0, [pc, #192]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c0e:	f7fe fdad 	bl	76c <Print::println(char const*)>
    1c12:	4948      	ldr	r1, [pc, #288]	; (1d34 <LEDDebug(LEDStruct&)+0x5fc>)
    1c14:	482e      	ldr	r0, [pc, #184]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c16:	f7fe fd9b 	bl	750 <Print::write(char const*)>
			}
			Serial.print("Number of sparks:  ");
			Serial.println(leds.number_of_sparks);
    1c1a:	f894 1311 	ldrb.w	r1, [r4, #785]	; 0x311
    1c1e:	482c      	ldr	r0, [pc, #176]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c20:	f7fe fdb6 	bl	790 <Print::println(unsigned char)>
    1c24:	4944      	ldr	r1, [pc, #272]	; (1d38 <LEDDebug(LEDStruct&)+0x600>)
    1c26:	482a      	ldr	r0, [pc, #168]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c28:	f7fe fd92 	bl	750 <Print::write(char const*)>
			Serial.print("Brightest spark:   ");
			Serial.println(leds.brightest_spark);
    1c2c:	f894 1710 	ldrb.w	r1, [r4, #1808]	; 0x710
    1c30:	4827      	ldr	r0, [pc, #156]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c32:	f7fe fdad 	bl	790 <Print::println(unsigned char)>
    1c36:	4941      	ldr	r1, [pc, #260]	; (1d3c <LEDDebug(LEDStruct&)+0x604>)
    1c38:	4825      	ldr	r0, [pc, #148]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c3a:	f7fe fd89 	bl	750 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1c3e:	f8d4 130c 	ldr.w	r1, [r4, #780]	; 0x30c
    1c42:	4823      	ldr	r0, [pc, #140]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c44:	2300      	movs	r3, #0
    1c46:	220a      	movs	r2, #10
    1c48:	f006 fa1a 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1c4c:	4820      	ldr	r0, [pc, #128]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c4e:	f006 fa07 	bl	8060 <Print::println()>
    1c52:	e652      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
				Serial.println(leds.torch_diff);
			}
			break;
		
		case COLORWAVE:
			Serial.println("=====COLORWAVE=====");
    1c54:	493a      	ldr	r1, [pc, #232]	; (1d40 <LEDDebug(LEDStruct&)+0x608>)
    1c56:	481e      	ldr	r0, [pc, #120]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c58:	f7fe fd88 	bl	76c <Print::println(char const*)>
			break;
    1c5c:	e64d      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
			Serial.print("juggle_fade:     ");
			Serial.println(leds.juggle_fade);
			break;

		default:
			Serial.println("");
    1c5e:	4939      	ldr	r1, [pc, #228]	; (1d44 <LEDDebug(LEDStruct&)+0x60c>)
    1c60:	481b      	ldr	r0, [pc, #108]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c62:	f7fe fd83 	bl	76c <Print::println(char const*)>
			Serial.println("===MODE TYPE ERROR===");
    1c66:	4938      	ldr	r1, [pc, #224]	; (1d48 <LEDDebug(LEDStruct&)+0x610>)
    1c68:	4819      	ldr	r0, [pc, #100]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c6a:	f7fe fd7f 	bl	76c <Print::println(char const*)>
			Serial.println("");
    1c6e:	4935      	ldr	r1, [pc, #212]	; (1d44 <LEDDebug(LEDStruct&)+0x60c>)
    1c70:	4817      	ldr	r0, [pc, #92]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c72:	f7fe fd7b 	bl	76c <Print::println(char const*)>
			break;
    1c76:	e640      	b.n	18fa <LEDDebug(LEDStruct&)+0x1c2>
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    1c78:	4934      	ldr	r1, [pc, #208]	; (1d4c <LEDDebug(LEDStruct&)+0x614>)
    1c7a:	4815      	ldr	r0, [pc, #84]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c7c:	f7fe fd76 	bl	76c <Print::println(char const*)>
    1c80:	e579      	b.n	1776 <LEDDebug(LEDStruct&)+0x3e>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1c82:	4933      	ldr	r1, [pc, #204]	; (1d50 <LEDDebug(LEDStruct&)+0x618>)
    1c84:	4812      	ldr	r0, [pc, #72]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c86:	f7fe fd71 	bl	76c <Print::println(char const*)>
    1c8a:	e574      	b.n	1776 <LEDDebug(LEDStruct&)+0x3e>
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
    1c8c:	4931      	ldr	r1, [pc, #196]	; (1d54 <LEDDebug(LEDStruct&)+0x61c>)
    1c8e:	4810      	ldr	r0, [pc, #64]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c90:	f7fe fd6c 	bl	76c <Print::println(char const*)>
    1c94:	e6a0      	b.n	19d8 <LEDDebug(LEDStruct&)+0x2a0>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1c96:	4930      	ldr	r1, [pc, #192]	; (1d58 <LEDDebug(LEDStruct&)+0x620>)
    1c98:	480d      	ldr	r0, [pc, #52]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1c9a:	f7fe fd59 	bl	750 <Print::write(char const*)>
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
    1c9e:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
    1ca2:	480b      	ldr	r0, [pc, #44]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1ca4:	f7fe fd74 	bl	790 <Print::println(unsigned char)>
    1ca8:	492c      	ldr	r1, [pc, #176]	; (1d5c <LEDDebug(LEDStruct&)+0x624>)
    1caa:	4809      	ldr	r0, [pc, #36]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1cac:	f7fe fd50 	bl	750 <Print::write(char const*)>
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
    1cb0:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    1cb4:	4806      	ldr	r0, [pc, #24]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1cb6:	f7fe fd6b 	bl	790 <Print::println(unsigned char)>
    1cba:	e717      	b.n	1aec <LEDDebug(LEDStruct&)+0x3b4>
    1cbc:	4928      	ldr	r1, [pc, #160]	; (1d60 <LEDDebug(LEDStruct&)+0x628>)
    1cbe:	4804      	ldr	r0, [pc, #16]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1cc0:	f7fe fd46 	bl	750 <Print::write(char const*)>
    1cc4:	e6f7      	b.n	1ab6 <LEDDebug(LEDStruct&)+0x37e>
    1cc6:	4927      	ldr	r1, [pc, #156]	; (1d64 <LEDDebug(LEDStruct&)+0x62c>)
    1cc8:	4801      	ldr	r0, [pc, #4]	; (1cd0 <LEDDebug(LEDStruct&)+0x598>)
    1cca:	f7fe fd41 	bl	750 <Print::write(char const*)>
    1cce:	e6ed      	b.n	1aac <LEDDebug(LEDStruct&)+0x374>
    1cd0:	1fff8750 	.word	0x1fff8750
    1cd4:	0000a578 	.word	0x0000a578
    1cd8:	0000a584 	.word	0x0000a584
    1cdc:	0000a490 	.word	0x0000a490
    1ce0:	0000a5a0 	.word	0x0000a5a0
    1ce4:	0000a5b0 	.word	0x0000a5b0
    1ce8:	0000a5e0 	.word	0x0000a5e0
    1cec:	0000a604 	.word	0x0000a604
    1cf0:	0000a614 	.word	0x0000a614
    1cf4:	0000a628 	.word	0x0000a628
    1cf8:	0000a6d4 	.word	0x0000a6d4
    1cfc:	0000a6e8 	.word	0x0000a6e8
    1d00:	0000a6f8 	.word	0x0000a6f8
    1d04:	0000a708 	.word	0x0000a708
    1d08:	0000a718 	.word	0x0000a718
    1d0c:	0000a728 	.word	0x0000a728
    1d10:	0000a738 	.word	0x0000a738
    1d14:	0000a748 	.word	0x0000a748
    1d18:	0000a758 	.word	0x0000a758
    1d1c:	0000a638 	.word	0x0000a638
    1d20:	0000a64c 	.word	0x0000a64c
    1d24:	0000a664 	.word	0x0000a664
    1d28:	0000a678 	.word	0x0000a678
    1d2c:	0000a680 	.word	0x0000a680
    1d30:	0000a688 	.word	0x0000a688
    1d34:	0000a694 	.word	0x0000a694
    1d38:	0000a6a8 	.word	0x0000a6a8
    1d3c:	0000a6bc 	.word	0x0000a6bc
    1d40:	0000a5f0 	.word	0x0000a5f0
    1d44:	0000a854 	.word	0x0000a854
    1d48:	0000a7e4 	.word	0x0000a7e4
    1d4c:	0000a3e0 	.word	0x0000a3e0
    1d50:	0000a3e8 	.word	0x0000a3e8
    1d54:	0000a544 	.word	0x0000a544
    1d58:	0000a5c0 	.word	0x0000a5c0
    1d5c:	0000a5d0 	.word	0x0000a5d0
    1d60:	0000a598 	.word	0x0000a598
    1d64:	0000a590 	.word	0x0000a590

00001d68 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    1d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d6c:	b08d      	sub	sp, #52	; 0x34
    1d6e:	2120      	movs	r1, #32
    1d70:	4605      	mov	r5, r0
    1d72:	9009      	str	r0, [sp, #36]	; 0x24
    1d74:	483f      	ldr	r0, [pc, #252]	; (1e74 <change_palette(LEDStruct&) [clone .part.11]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    1d76:	4c40      	ldr	r4, [pc, #256]	; (1e78 <change_palette(LEDStruct&) [clone .part.11]+0x110>)
    1d78:	f005 ff6e 	bl	7c58 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1d7c:	483f      	ldr	r0, [pc, #252]	; (1e7c <change_palette(LEDStruct&) [clone .part.11]+0x114>)
    1d7e:	f006 f96f 	bl	8060 <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1d82:	483f      	ldr	r0, [pc, #252]	; (1e80 <change_palette(LEDStruct&) [clone .part.11]+0x118>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1d84:	4a3f      	ldr	r2, [pc, #252]	; (1e84 <change_palette(LEDStruct&) [clone .part.11]+0x11c>)
    1d86:	8803      	ldrh	r3, [r0, #0]
    1d88:	7811      	ldrb	r1, [r2, #0]
    1d8a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1d8e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1d92:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1d96:	3319      	adds	r3, #25
    1d98:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1d9a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1d9e:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1da0:	fb12 f201 	smulbb	r2, r2, r1
    1da4:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1da6:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    1da8:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1dac:	f885 2228 	strb.w	r2, [r5, #552]	; 0x228
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1db0:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1db2:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    1db6:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1db8:	3701      	adds	r7, #1
        } while ( u.index != 255);
    1dba:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1dbc:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    1dbe:	d1f8      	bne.n	1db2 <change_palette(LEDStruct&) [clone .part.11]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1dc0:	f8d8 3000 	ldr.w	r3, [r8]
    1dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1dc6:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    1dc8:	ea4f 6913 	mov.w	r9, r3, lsr #24
    1dcc:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    1dd0:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1dd4:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1dd8:	f04f 33ff 	mov.w	r3, #4294967295
    1ddc:	9207      	str	r2, [sp, #28]
    1dde:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1de0:	2400      	movs	r4, #0
    1de2:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1de4:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1de8:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1dea:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    1dee:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1df2:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1df6:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    1df8:	b2f9      	uxtb	r1, r7
    1dfa:	f3c5 6507 	ubfx	r5, r5, #24, #8
    1dfe:	9104      	str	r1, [sp, #16]
    1e00:	b2e9      	uxtb	r1, r5
    1e02:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1e04:	fa5f f18c 	uxtb.w	r1, ip
    1e08:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1e0a:	9908      	ldr	r1, [sp, #32]
    1e0c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1e0e:	aa0b      	add	r2, sp, #44	; 0x2c
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1e10:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1e14:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1e18:	d80c      	bhi.n	1e34 <change_palette(LEDStruct&) [clone .part.11]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1e1a:	9906      	ldr	r1, [sp, #24]
    1e1c:	458c      	cmp	ip, r1
    1e1e:	dc07      	bgt.n	1e30 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
    1e20:	290f      	cmp	r1, #15
    1e22:	d005      	beq.n	1e30 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
                    istart8 = lastSlotUsed + 1;
    1e24:	3101      	adds	r1, #1
    1e26:	b2c9      	uxtb	r1, r1
    1e28:	428b      	cmp	r3, r1
    1e2a:	9103      	str	r1, [sp, #12]
    1e2c:	bf38      	it	cc
    1e2e:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1e30:	b259      	sxtb	r1, r3
    1e32:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1e34:	a90a      	add	r1, sp, #40	; 0x28
    1e36:	9100      	str	r1, [sp, #0]
    1e38:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1e3a:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
        g = rhs.g;
    1e3e:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
        b = rhs.b;
    1e42:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1e46:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    1e4a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    1e4e:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    1e52:	f003 ff5b 	bl	5d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1e56:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1e58:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    1e5c:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1e60:	46ca      	mov	sl, r9
    1e62:	d1bf      	bne.n	1de4 <change_palette(LEDStruct&) [clone .part.11]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    1e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e66:	f893 0228 	ldrb.w	r0, [r3, #552]	; 0x228
    1e6a:	f7ff f957 	bl	111c <print_palette(unsigned char)>
	}
}
    1e6e:	b00d      	add	sp, #52	; 0x34
    1e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e74:	0000a7fc 	.word	0x0000a7fc
    1e78:	00009b38 	.word	0x00009b38
    1e7c:	1fff8750 	.word	0x1fff8750
    1e80:	1fff8746 	.word	0x1fff8746
    1e84:	1fff8744 	.word	0x1fff8744

00001e88 <juggle(LEDStruct&)>:

}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1e8c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1e90:	b091      	sub	sp, #68	; 0x44
    1e92:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1e94:	2b00      	cmp	r3, #0
    1e96:	f000 80f3 	beq.w	2080 <juggle(LEDStruct&)+0x1f8>
    1e9a:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    1e9e:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    1ea2:	b113      	cbz	r3, 1eaa <juggle(LEDStruct&)+0x22>
    1ea4:	2300      	movs	r3, #0
    1ea6:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    1eaa:	2196      	movs	r1, #150	; 0x96
    1eac:	4620      	mov	r0, r4
    1eae:	f003 ffbf 	bl	5e30 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1eb2:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    1eb6:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1eba:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1ebe:	2900      	cmp	r1, #0
    1ec0:	f040 8178 	bne.w	21b4 <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    1ec4:	2f00      	cmp	r7, #0
    1ec6:	f000 82b8 	beq.w	243a <juggle(LEDStruct&)+0x5b2>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1eca:	2b00      	cmp	r3, #0
    1ecc:	f000 8388 	beq.w	25e0 <juggle(LEDStruct&)+0x758>
    1ed0:	48c4      	ldr	r0, [pc, #784]	; (21e4 <juggle(LEDStruct&)+0x35c>)
    1ed2:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    1ed6:	f8df 9314 	ldr.w	r9, [pc, #788]	; 21ec <juggle(LEDStruct&)+0x364>
    1eda:	f8df 8314 	ldr.w	r8, [pc, #788]	; 21f0 <juggle(LEDStruct&)+0x368>
    1ede:	9002      	str	r0, [sp, #8]
    1ee0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    1ee4:	460f      	mov	r7, r1
    1ee6:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    1eea:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    1eee:	9503      	str	r5, [sp, #12]
    1ef0:	e05e      	b.n	1fb0 <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1ef2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1ef6:	443b      	add	r3, r7
    1ef8:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1efa:	f8d9 1000 	ldr.w	r1, [r9]
    1efe:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1f00:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1f02:	9904      	ldr	r1, [sp, #16]
    1f04:	bf98      	it	ls
    1f06:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1f08:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1f0c:	bf98      	it	ls
    1f0e:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1f10:	fb00 f101 	mul.w	r1, r0, r1
    1f14:	fb03 f301 	mul.w	r3, r3, r1
    1f18:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f1a:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1f1c:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f20:	d503      	bpl.n	1f2a <juggle(LEDStruct&)+0xa2>
    1f22:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1f26:	3107      	adds	r1, #7
    1f28:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f2a:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1f2c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f2e:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1f32:	f818 6000 	ldrb.w	r6, [r8, r0]
    1f36:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1f3a:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1f3e:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f40:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    1f42:	bf48      	it	mi
    1f44:	4249      	negmi	r1, r1
    1f46:	b20e      	sxth	r6, r1
    1f48:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    1f4c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1f50:	9100      	str	r1, [sp, #0]
    1f52:	4650      	mov	r0, sl
    1f54:	4659      	mov	r1, fp
    1f56:	f003 ffcb 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1f5a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1f5e:	2296      	movs	r2, #150	; 0x96
    1f60:	b29b      	uxth	r3, r3
    1f62:	fb02 f303 	mul.w	r3, r2, r3
    1f66:	0c1b      	lsrs	r3, r3, #16
    1f68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1f6c:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1f6e:	5ce2      	ldrb	r2, [r4, r3]
    1f70:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1f74:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1f78:	54e2      	strb	r2, [r4, r3]
    1f7a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1f7e:	784a      	ldrb	r2, [r1, #1]
    1f80:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1f84:	704a      	strb	r2, [r1, #1]
    1f86:	788b      	ldrb	r3, [r1, #2]
    1f88:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1f8c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1f90:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1f92:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    1f96:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1f9a:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    1f9e:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1fa0:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1fa2:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1fa4:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1fa6:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1fa8:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1fac:	f240 8318 	bls.w	25e0 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1fb0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    1fb4:	2900      	cmp	r1, #0
    1fb6:	d19c      	bne.n	1ef2 <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1fb8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1fbc:	443b      	add	r3, r7
    1fbe:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fc0:	f8d9 1000 	ldr.w	r1, [r9]
    1fc4:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1fc6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1fc8:	9905      	ldr	r1, [sp, #20]
    1fca:	bf98      	it	ls
    1fcc:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1fce:	f44f 708c 	mov.w	r0, #280	; 0x118
    1fd2:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1fd6:	bf98      	it	ls
    1fd8:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1fda:	fb03 f301 	mul.w	r3, r3, r1
    1fde:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fe0:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1fe2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1fe6:	d503      	bpl.n	1ff0 <juggle(LEDStruct&)+0x168>
    1fe8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1fec:	3107      	adds	r1, #7
    1fee:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1ff0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ff2:	9d02      	ldr	r5, [sp, #8]
    1ff4:	f818 6000 	ldrb.w	r6, [r8, r0]
    1ff8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1ffc:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2000:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2004:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2006:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2008:	bf48      	it	mi
    200a:	4249      	negmi	r1, r1
    200c:	b20e      	sxth	r6, r1
    200e:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2012:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2016:	9100      	str	r1, [sp, #0]
    2018:	4650      	mov	r0, sl
    201a:	4659      	mov	r1, fp
    201c:	f003 ff68 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2020:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2024:	b29b      	uxth	r3, r3
    2026:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    202a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    202e:	0c1b      	lsrs	r3, r3, #16
    2030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2034:	18e1      	adds	r1, r4, r3
    2036:	5ce2      	ldrb	r2, [r4, r3]
    2038:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    203c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2040:	54e2      	strb	r2, [r4, r3]
    2042:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2046:	784a      	ldrb	r2, [r1, #1]
    2048:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    204c:	704a      	strb	r2, [r1, #1]
    204e:	788b      	ldrb	r3, [r1, #2]
    2050:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2054:	fa83 f352 	uqadd8	r3, r3, r2
    2058:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    205a:	708b      	strb	r3, [r1, #2]
    205c:	4622      	mov	r2, r4
    205e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2060:	7819      	ldrb	r1, [r3, #0]
    2062:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2066:	7859      	ldrb	r1, [r3, #1]
    2068:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    206c:	7899      	ldrb	r1, [r3, #2]
    206e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2072:	3303      	adds	r3, #3


// To duplicate one side of the strip with the other

void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    2074:	429d      	cmp	r5, r3
    2076:	f1a2 0203 	sub.w	r2, r2, #3
    207a:	d1f1      	bne.n	2060 <juggle(LEDStruct&)+0x1d8>
    207c:	9503      	str	r5, [sp, #12]
    207e:	e788      	b.n	1f92 <juggle(LEDStruct&)+0x10a>
    2080:	4d59      	ldr	r5, [pc, #356]	; (21e8 <juggle(LEDStruct&)+0x360>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2082:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    2086:	882b      	ldrh	r3, [r5, #0]
    2088:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    208c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2090:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2094:	3119      	adds	r1, #25
    2096:	b289      	uxth	r1, r1
    2098:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    209c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    20a0:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    20a4:	3019      	adds	r0, #25
    20a6:	b280      	uxth	r0, r0
    20a8:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    20ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    20b0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    20b4:	3319      	adds	r3, #25
    20b6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    20ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    20be:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    20c2:	3219      	adds	r2, #25
    20c4:	b292      	uxth	r2, r2
    20c6:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    20ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    20ce:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    20d2:	3619      	adds	r6, #25
    20d4:	b2b6      	uxth	r6, r6
    20d6:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    20da:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    20de:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    20e2:	3319      	adds	r3, #25
    20e4:	b29b      	uxth	r3, r3
    20e6:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    20ea:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    20ee:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    20f2:	f10e 0e19 	add.w	lr, lr, #25
    20f6:	fa1f fe8e 	uxth.w	lr, lr
    20fa:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    20fe:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    2102:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2106:	3719      	adds	r7, #25
    2108:	b2bf      	uxth	r7, r7
    210a:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    210e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2112:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2116:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    211a:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    211c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2120:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2124:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2128:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    212c:	b2f2      	uxtb	r2, r6
    212e:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2132:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2136:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    213a:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    213e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2142:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2144:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2148:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    214c:	ea4f 18ec 	mov.w	r8, ip, asr #7
    2150:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    2154:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2158:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    215c:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2160:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2164:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2168:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    216c:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2170:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2174:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    2178:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    217c:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2180:	b2d2      	uxtb	r2, r2

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2182:	f3c7 13c0 	ubfx	r3, r7, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2186:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    218a:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    218e:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2190:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    2194:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2198:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    219c:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    21a0:	802e      	strh	r6, [r5, #0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    21a2:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    21a6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    21aa:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    21ae:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    21b2:	e676      	b.n	1ea2 <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    21b4:	2f00      	cmp	r7, #0
    21b6:	f000 80a6 	beq.w	2306 <juggle(LEDStruct&)+0x47e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    21ba:	2b00      	cmp	r3, #0
    21bc:	f000 8210 	beq.w	25e0 <juggle(LEDStruct&)+0x758>
    21c0:	4b08      	ldr	r3, [pc, #32]	; (21e4 <juggle(LEDStruct&)+0x35c>)
    21c2:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    21c6:	f8df 9024 	ldr.w	r9, [pc, #36]	; 21ec <juggle(LEDStruct&)+0x364>
    21ca:	f8df 8024 	ldr.w	r8, [pc, #36]	; 21f0 <juggle(LEDStruct&)+0x368>
    21ce:	9302      	str	r3, [sp, #8]
    21d0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    21d4:	2700      	movs	r7, #0
    21d6:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    21da:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    21de:	9503      	str	r5, [sp, #12]
    21e0:	e06d      	b.n	22be <juggle(LEDStruct&)+0x436>
    21e2:	bf00      	nop
    21e4:	00009464 	.word	0x00009464
    21e8:	1fff8746 	.word	0x1fff8746
    21ec:	1fff9d48 	.word	0x1fff9d48
    21f0:	00009ce4 	.word	0x00009ce4
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    21f4:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    21f8:	2b00      	cmp	r3, #0
    21fa:	f000 82c6 	beq.w	278a <juggle(LEDStruct&)+0x902>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21fe:	f8d9 3000 	ldr.w	r3, [r9]
    2202:	9308      	str	r3, [sp, #32]
	return ret;
    2204:	9908      	ldr	r1, [sp, #32]
    2206:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    220a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    220e:	fb00 1117 	mls	r1, r0, r7, r1
    2212:	021b      	lsls	r3, r3, #8
    2214:	f44f 708c 	mov.w	r0, #280	; 0x118
    2218:	fb00 f303 	mul.w	r3, r0, r3
    221c:	fb03 f301 	mul.w	r3, r3, r1
    2220:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2224:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2228:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    222a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    222e:	d503      	bpl.n	2238 <juggle(LEDStruct&)+0x3b0>
    2230:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2234:	3107      	adds	r1, #7
    2236:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2238:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    223a:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    223c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2240:	f818 6000 	ldrb.w	r6, [r8, r0]
    2244:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2248:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    224c:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    224e:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2250:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2254:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2258:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    225a:	bf48      	it	mi
    225c:	4276      	negmi	r6, r6
    225e:	4659      	mov	r1, fp
    2260:	4650      	mov	r0, sl
    2262:	b236      	sxth	r6, r6
    2264:	f003 fe44 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2268:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    226c:	b29a      	uxth	r2, r3
    226e:	2396      	movs	r3, #150	; 0x96
    2270:	fb03 f302 	mul.w	r3, r3, r2
    2274:	0c1b      	lsrs	r3, r3, #16
    2276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    227a:	18e1      	adds	r1, r4, r3
    227c:	5ce2      	ldrb	r2, [r4, r3]
    227e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2282:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2286:	54e2      	strb	r2, [r4, r3]
    2288:	784a      	ldrb	r2, [r1, #1]
    228a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    228e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2292:	704a      	strb	r2, [r1, #1]
    2294:	788b      	ldrb	r3, [r1, #2]
    2296:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    229a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    229e:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    22a0:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    22a4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    22a8:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    22ac:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    22ae:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    22b0:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    22b2:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    22b4:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    22b6:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    22ba:	f240 8191 	bls.w	25e0 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    22be:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    22c2:	2b00      	cmp	r3, #0
    22c4:	d196      	bne.n	21f4 <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    22c6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    22ca:	2b00      	cmp	r3, #0
    22cc:	f000 8192 	beq.w	25f4 <juggle(LEDStruct&)+0x76c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22d0:	f8d9 3000 	ldr.w	r3, [r9]
    22d4:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    22d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    22d8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    22dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    22e0:	fb00 1117 	mls	r1, r0, r7, r1
    22e4:	021b      	lsls	r3, r3, #8
    22e6:	f44f 708c 	mov.w	r0, #280	; 0x118
    22ea:	fb00 f303 	mul.w	r3, r0, r3
    22ee:	fb03 f301 	mul.w	r3, r3, r1
    22f2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    22f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    22fa:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    22fc:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    22fe:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2302:	d599      	bpl.n	2238 <juggle(LEDStruct&)+0x3b0>
    2304:	e794      	b.n	2230 <juggle(LEDStruct&)+0x3a8>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2306:	2b00      	cmp	r3, #0
    2308:	f000 816a 	beq.w	25e0 <juggle(LEDStruct&)+0x758>
    230c:	49b6      	ldr	r1, [pc, #728]	; (25e8 <juggle(LEDStruct&)+0x760>)
    230e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2312:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 25ec <juggle(LEDStruct&)+0x764>
    2316:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 25f0 <juggle(LEDStruct&)+0x768>
    231a:	9102      	str	r1, [sp, #8]
    231c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2320:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2324:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    2328:	9503      	str	r5, [sp, #12]
    232a:	e063      	b.n	23f4 <juggle(LEDStruct&)+0x56c>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    232c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2330:	2900      	cmp	r1, #0
    2332:	f000 828f 	beq.w	2854 <juggle(LEDStruct&)+0x9cc>
    2336:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    233a:	443b      	add	r3, r7
    233c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    233e:	f8d9 1000 	ldr.w	r1, [r9]
    2342:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2344:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2346:	990c      	ldr	r1, [sp, #48]	; 0x30
    2348:	bf9c      	itt	ls
    234a:	021b      	lslls	r3, r3, #8
    234c:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    234e:	fb0a f101 	mul.w	r1, sl, r1
    2352:	fb03 f301 	mul.w	r3, r3, r1
    2356:	f3c3 430e 	ubfx	r3, r3, #16, #15
    235a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    235e:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2360:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2364:	d503      	bpl.n	236e <juggle(LEDStruct&)+0x4e6>
    2366:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    236a:	3107      	adds	r1, #7
    236c:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    236e:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2370:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2372:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2376:	f818 6000 	ldrb.w	r6, [r8, r0]
    237a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    237e:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2382:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2384:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2386:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    238a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    238e:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2390:	bf48      	it	mi
    2392:	4276      	negmi	r6, r6
    2394:	4659      	mov	r1, fp
    2396:	a80b      	add	r0, sp, #44	; 0x2c
    2398:	b236      	sxth	r6, r6
    239a:	f003 fda9 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    239e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    23a2:	2296      	movs	r2, #150	; 0x96
    23a4:	b29b      	uxth	r3, r3
    23a6:	fb02 f303 	mul.w	r3, r2, r3
    23aa:	0c1b      	lsrs	r3, r3, #16
    23ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    23b0:	18e1      	adds	r1, r4, r3
    23b2:	5ce2      	ldrb	r2, [r4, r3]
    23b4:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    23b8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    23bc:	54e2      	strb	r2, [r4, r3]
    23be:	784a      	ldrb	r2, [r1, #1]
    23c0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    23c4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    23c8:	704a      	strb	r2, [r1, #1]
    23ca:	788b      	ldrb	r3, [r1, #2]
    23cc:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    23d0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    23d4:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23d6:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    23da:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23de:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    23e2:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23e4:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23e6:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23e8:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23ea:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23ec:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23f0:	f240 80f6 	bls.w	25e0 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    23f4:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    23f8:	2900      	cmp	r1, #0
    23fa:	d197      	bne.n	232c <juggle(LEDStruct&)+0x4a4>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    23fc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2400:	2900      	cmp	r1, #0
    2402:	f000 815d 	beq.w	26c0 <juggle(LEDStruct&)+0x838>
    2406:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    240a:	443b      	add	r3, r7
    240c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    240e:	f8d9 1000 	ldr.w	r1, [r9]
    2412:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2414:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2416:	990e      	ldr	r1, [sp, #56]	; 0x38
    2418:	bf9c      	itt	ls
    241a:	021b      	lslls	r3, r3, #8
    241c:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    241e:	fb0a f101 	mul.w	r1, sl, r1
    2422:	fb03 f301 	mul.w	r3, r3, r1
    2426:	f3c3 430e 	ubfx	r3, r3, #16, #15
    242a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    242e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2430:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2432:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2436:	d59a      	bpl.n	236e <juggle(LEDStruct&)+0x4e6>
    2438:	e795      	b.n	2366 <juggle(LEDStruct&)+0x4de>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    243a:	2b00      	cmp	r3, #0
    243c:	f000 80d0 	beq.w	25e0 <juggle(LEDStruct&)+0x758>
    2440:	4b69      	ldr	r3, [pc, #420]	; (25e8 <juggle(LEDStruct&)+0x760>)
    2442:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2446:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 25ec <juggle(LEDStruct&)+0x764>
    244a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 25f0 <juggle(LEDStruct&)+0x768>
    244e:	9302      	str	r3, [sp, #8]
    2450:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2454:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2458:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    245c:	9503      	str	r5, [sp, #12]
    245e:	e05a      	b.n	2516 <juggle(LEDStruct&)+0x68e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2460:	f8d9 3000 	ldr.w	r3, [r9]
    2464:	9306      	str	r3, [sp, #24]
	return ret;
    2466:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2468:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    246c:	f44f 708c 	mov.w	r0, #280	; 0x118
    2470:	0209      	lsls	r1, r1, #8
    2472:	fb00 f303 	mul.w	r3, r0, r3
    2476:	fb03 f301 	mul.w	r3, r3, r1
    247a:	0379      	lsls	r1, r7, #13
    247c:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2480:	b299      	uxth	r1, r3
    2482:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2484:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2488:	d503      	bpl.n	2492 <juggle(LEDStruct&)+0x60a>
    248a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    248e:	3307      	adds	r3, #7
    2490:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2492:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2494:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2496:	f3c3 0346 	ubfx	r3, r3, #1, #7
    249a:	f818 6000 	ldrb.w	r6, [r8, r0]
    249e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    24a2:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    24a6:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    24a8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    24aa:	bf48      	it	mi
    24ac:	425b      	negmi	r3, r3
    24ae:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    24b2:	b21e      	sxth	r6, r3
    24b4:	4650      	mov	r0, sl
    24b6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    24ba:	9100      	str	r1, [sp, #0]
    24bc:	4659      	mov	r1, fp
    24be:	f003 fd17 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    24c2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    24c6:	2296      	movs	r2, #150	; 0x96
    24c8:	b29b      	uxth	r3, r3
    24ca:	fb02 f303 	mul.w	r3, r2, r3
    24ce:	0c1b      	lsrs	r3, r3, #16
    24d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    24d4:	18e1      	adds	r1, r4, r3
    24d6:	5ce2      	ldrb	r2, [r4, r3]
    24d8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    24dc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    24e0:	54e2      	strb	r2, [r4, r3]
    24e2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    24e6:	784a      	ldrb	r2, [r1, #1]
    24e8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    24ec:	704a      	strb	r2, [r1, #1]
    24ee:	788b      	ldrb	r3, [r1, #2]
    24f0:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    24f4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    24f8:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    24fa:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    24fe:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2502:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2506:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2508:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    250a:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    250c:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    250e:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2510:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2514:	d964      	bls.n	25e0 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2516:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    251a:	2b00      	cmp	r3, #0
    251c:	d1a0      	bne.n	2460 <juggle(LEDStruct&)+0x5d8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    251e:	f8d9 3000 	ldr.w	r3, [r9]
    2522:	9307      	str	r3, [sp, #28]
	return ret;
    2524:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2526:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    252a:	f44f 708c 	mov.w	r0, #280	; 0x118
    252e:	fb00 f303 	mul.w	r3, r0, r3
    2532:	0209      	lsls	r1, r1, #8
    2534:	fb03 f301 	mul.w	r3, r3, r1
    2538:	0379      	lsls	r1, r7, #13
    253a:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    253e:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2540:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2542:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2546:	d503      	bpl.n	2550 <juggle(LEDStruct&)+0x6c8>
    2548:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    254c:	3307      	adds	r3, #7
    254e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2550:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2552:	9d02      	ldr	r5, [sp, #8]
    2554:	f818 6000 	ldrb.w	r6, [r8, r0]
    2558:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    255c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2560:	fb06 0303 	mla	r3, r6, r3, r0
    2564:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2566:	040e      	lsls	r6, r1, #16
    2568:	bf48      	it	mi
    256a:	425b      	negmi	r3, r3
    256c:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2570:	b21e      	sxth	r6, r3
    2572:	4650      	mov	r0, sl
    2574:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2578:	9100      	str	r1, [sp, #0]
    257a:	4659      	mov	r1, fp
    257c:	f003 fcb8 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2580:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2584:	b29b      	uxth	r3, r3
    2586:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    258a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    258e:	0c1b      	lsrs	r3, r3, #16
    2590:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2594:	18e1      	adds	r1, r4, r3
    2596:	5ce2      	ldrb	r2, [r4, r3]
    2598:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    259c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    25a0:	54e2      	strb	r2, [r4, r3]
    25a2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    25a6:	784a      	ldrb	r2, [r1, #1]
    25a8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    25ac:	704a      	strb	r2, [r1, #1]
    25ae:	788b      	ldrb	r3, [r1, #2]
    25b0:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    25b4:	fa83 f352 	uqadd8	r3, r3, r2
    25b8:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    25ba:	708b      	strb	r3, [r1, #2]
    25bc:	4622      	mov	r2, r4
    25be:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    25c0:	7819      	ldrb	r1, [r3, #0]
    25c2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    25c6:	7859      	ldrb	r1, [r3, #1]
    25c8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    25cc:	7899      	ldrb	r1, [r3, #2]
    25ce:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    25d2:	3303      	adds	r3, #3
    25d4:	42ab      	cmp	r3, r5
    25d6:	f1a2 0203 	sub.w	r2, r2, #3
    25da:	d1f1      	bne.n	25c0 <juggle(LEDStruct&)+0x738>
    25dc:	9503      	str	r5, [sp, #12]
    25de:	e78c      	b.n	24fa <juggle(LEDStruct&)+0x672>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    25e0:	b011      	add	sp, #68	; 0x44
    25e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25e6:	bf00      	nop
    25e8:	00009464 	.word	0x00009464
    25ec:	1fff9d48 	.word	0x1fff9d48
    25f0:	00009ce4 	.word	0x00009ce4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25f4:	f8d9 3000 	ldr.w	r3, [r9]
    25f8:	930b      	str	r3, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    25fa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	return ret;
    25fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2604:	fb00 3317 	mls	r3, r0, r7, r3
    2608:	0209      	lsls	r1, r1, #8
    260a:	f44f 708c 	mov.w	r0, #280	; 0x118
    260e:	fb00 f101 	mul.w	r1, r0, r1
    2612:	fb03 f301 	mul.w	r3, r3, r1
    2616:	f3c3 430e 	ubfx	r3, r3, #16, #15
    261a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    261e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2620:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2622:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2626:	d503      	bpl.n	2630 <juggle(LEDStruct&)+0x7a8>
    2628:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    262c:	3107      	adds	r1, #7
    262e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2630:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2632:	9d02      	ldr	r5, [sp, #8]
    2634:	f818 6000 	ldrb.w	r6, [r8, r0]
    2638:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    263c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2640:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2644:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2646:	b2b6      	uxth	r6, r6
    2648:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    264c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2650:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2652:	bf48      	it	mi
    2654:	4276      	negmi	r6, r6
    2656:	4659      	mov	r1, fp
    2658:	4650      	mov	r0, sl
    265a:	b236      	sxth	r6, r6
    265c:	f003 fc48 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2660:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2664:	b29b      	uxth	r3, r3
    2666:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    266a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    266e:	0c1b      	lsrs	r3, r3, #16
    2670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2674:	18e1      	adds	r1, r4, r3
    2676:	5ce2      	ldrb	r2, [r4, r3]
    2678:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    267c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2680:	54e2      	strb	r2, [r4, r3]
    2682:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2686:	784a      	ldrb	r2, [r1, #1]
    2688:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    268c:	704a      	strb	r2, [r1, #1]
    268e:	788b      	ldrb	r3, [r1, #2]
    2690:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2694:	fa83 f352 	uqadd8	r3, r3, r2
    2698:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    269a:	708b      	strb	r3, [r1, #2]
    269c:	4622      	mov	r2, r4
    269e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    26a0:	7819      	ldrb	r1, [r3, #0]
    26a2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    26a6:	7859      	ldrb	r1, [r3, #1]
    26a8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    26ac:	7899      	ldrb	r1, [r3, #2]
    26ae:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    26b2:	3303      	adds	r3, #3
    26b4:	42ab      	cmp	r3, r5
    26b6:	f1a2 0203 	sub.w	r2, r2, #3
    26ba:	d1f1      	bne.n	26a0 <juggle(LEDStruct&)+0x818>
    26bc:	9503      	str	r5, [sp, #12]
    26be:	e5ef      	b.n	22a0 <juggle(LEDStruct&)+0x418>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    26c0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    26c4:	443b      	add	r3, r7
    26c6:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26c8:	f8d9 1000 	ldr.w	r1, [r9]
    26cc:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    26ce:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    26d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    26d2:	bf9c      	itt	ls
    26d4:	021b      	lslls	r3, r3, #8
    26d6:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    26d8:	fb0a f101 	mul.w	r1, sl, r1
    26dc:	fb03 f301 	mul.w	r3, r3, r1
    26e0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    26e4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    26e8:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    26ea:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    26ec:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    26f0:	d503      	bpl.n	26fa <juggle(LEDStruct&)+0x872>
    26f2:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    26f6:	3107      	adds	r1, #7
    26f8:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    26fa:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    26fc:	9d02      	ldr	r5, [sp, #8]
    26fe:	f818 6000 	ldrb.w	r6, [r8, r0]
    2702:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2706:	f3c1 0146 	ubfx	r1, r1, #1, #7
    270a:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    270e:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2710:	b2b6      	uxth	r6, r6
    2712:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2716:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    271a:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    271c:	bf48      	it	mi
    271e:	4276      	negmi	r6, r6
    2720:	4659      	mov	r1, fp
    2722:	a80b      	add	r0, sp, #44	; 0x2c
    2724:	b236      	sxth	r6, r6
    2726:	f003 fbe3 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    272a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    272e:	b29b      	uxth	r3, r3
    2730:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2734:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2738:	0c1b      	lsrs	r3, r3, #16
    273a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    273e:	18e1      	adds	r1, r4, r3
    2740:	5ce2      	ldrb	r2, [r4, r3]
    2742:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2746:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    274a:	54e2      	strb	r2, [r4, r3]
    274c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2750:	784a      	ldrb	r2, [r1, #1]
    2752:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2756:	704a      	strb	r2, [r1, #1]
    2758:	788b      	ldrb	r3, [r1, #2]
    275a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    275e:	fa83 f352 	uqadd8	r3, r3, r2
    2762:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2764:	708b      	strb	r3, [r1, #2]
    2766:	4622      	mov	r2, r4
    2768:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    276a:	7819      	ldrb	r1, [r3, #0]
    276c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2770:	7859      	ldrb	r1, [r3, #1]
    2772:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2776:	7899      	ldrb	r1, [r3, #2]
    2778:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    277c:	3303      	adds	r3, #3
    277e:	42ab      	cmp	r3, r5
    2780:	f1a2 0203 	sub.w	r2, r2, #3
    2784:	d1f1      	bne.n	276a <juggle(LEDStruct&)+0x8e2>
    2786:	9503      	str	r5, [sp, #12]
    2788:	e625      	b.n	23d6 <juggle(LEDStruct&)+0x54e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    278a:	f8d9 3000 	ldr.w	r3, [r9]
    278e:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2790:	9909      	ldr	r1, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2792:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    279a:	fb00 1117 	mls	r1, r0, r7, r1
    279e:	021b      	lsls	r3, r3, #8
    27a0:	f44f 708c 	mov.w	r0, #280	; 0x118
    27a4:	fb00 f303 	mul.w	r3, r0, r3
    27a8:	fb03 f301 	mul.w	r3, r3, r1
    27ac:	f3c3 430e 	ubfx	r3, r3, #16, #15
    27b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    27b4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    27b6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    27ba:	d503      	bpl.n	27c4 <juggle(LEDStruct&)+0x93c>
    27bc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    27c0:	3107      	adds	r1, #7
    27c2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    27c4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    27c6:	9d02      	ldr	r5, [sp, #8]
    27c8:	f818 6000 	ldrb.w	r6, [r8, r0]
    27cc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    27d0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    27d4:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    27d8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    27da:	b2b6      	uxth	r6, r6
    27dc:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    27e0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    27e4:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    27e6:	bf48      	it	mi
    27e8:	4276      	negmi	r6, r6
    27ea:	4659      	mov	r1, fp
    27ec:	4650      	mov	r0, sl
    27ee:	b236      	sxth	r6, r6
    27f0:	f003 fb7e 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    27f4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    27f8:	b29b      	uxth	r3, r3
    27fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27fe:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2802:	0c1b      	lsrs	r3, r3, #16
    2804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2808:	18e1      	adds	r1, r4, r3
    280a:	5ce2      	ldrb	r2, [r4, r3]
    280c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2810:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2814:	54e2      	strb	r2, [r4, r3]
    2816:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    281a:	784a      	ldrb	r2, [r1, #1]
    281c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2820:	704a      	strb	r2, [r1, #1]
    2822:	788b      	ldrb	r3, [r1, #2]
    2824:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2828:	fa83 f352 	uqadd8	r3, r3, r2
    282c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    282e:	708b      	strb	r3, [r1, #2]
    2830:	4622      	mov	r2, r4
    2832:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2834:	7819      	ldrb	r1, [r3, #0]
    2836:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    283a:	7859      	ldrb	r1, [r3, #1]
    283c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2840:	7899      	ldrb	r1, [r3, #2]
    2842:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2846:	3303      	adds	r3, #3
    2848:	429d      	cmp	r5, r3
    284a:	f1a2 0203 	sub.w	r2, r2, #3
    284e:	d1f1      	bne.n	2834 <juggle(LEDStruct&)+0x9ac>
    2850:	9503      	str	r5, [sp, #12]
    2852:	e525      	b.n	22a0 <juggle(LEDStruct&)+0x418>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2854:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2858:	443b      	add	r3, r7
    285a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    285c:	f8d9 1000 	ldr.w	r1, [r9]
    2860:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2862:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2864:	990d      	ldr	r1, [sp, #52]	; 0x34
    2866:	bf9c      	itt	ls
    2868:	021b      	lslls	r3, r3, #8
    286a:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    286c:	fb0a f101 	mul.w	r1, sl, r1
    2870:	fb03 f301 	mul.w	r3, r3, r1
    2874:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2878:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    287c:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    287e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2882:	d503      	bpl.n	288c <juggle(LEDStruct&)+0xa04>
    2884:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2888:	3107      	adds	r1, #7
    288a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    288c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    288e:	9d02      	ldr	r5, [sp, #8]
    2890:	f818 6000 	ldrb.w	r6, [r8, r0]
    2894:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2898:	f3c1 0146 	ubfx	r1, r1, #1, #7
    289c:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    28a0:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28a2:	b2b6      	uxth	r6, r6
    28a4:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    28a8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    28ac:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    28ae:	bf48      	it	mi
    28b0:	4276      	negmi	r6, r6
    28b2:	4659      	mov	r1, fp
    28b4:	a80b      	add	r0, sp, #44	; 0x2c
    28b6:	b236      	sxth	r6, r6
    28b8:	f003 fb1a 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    28bc:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    28c0:	b29b      	uxth	r3, r3
    28c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    28c6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    28ca:	0c1b      	lsrs	r3, r3, #16
    28cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    28d0:	18e1      	adds	r1, r4, r3
    28d2:	5ce2      	ldrb	r2, [r4, r3]
    28d4:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    28d8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    28dc:	54e2      	strb	r2, [r4, r3]
    28de:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    28e2:	784a      	ldrb	r2, [r1, #1]
    28e4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    28e8:	704a      	strb	r2, [r1, #1]
    28ea:	788b      	ldrb	r3, [r1, #2]
    28ec:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    28f0:	fa83 f352 	uqadd8	r3, r3, r2
    28f4:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    28f6:	708b      	strb	r3, [r1, #2]
    28f8:	4622      	mov	r2, r4
    28fa:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28fc:	7819      	ldrb	r1, [r3, #0]
    28fe:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2902:	7859      	ldrb	r1, [r3, #1]
    2904:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2908:	7899      	ldrb	r1, [r3, #2]
    290a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    290e:	3303      	adds	r3, #3
    2910:	42ab      	cmp	r3, r5
    2912:	f1a2 0203 	sub.w	r2, r2, #3
    2916:	d1f1      	bne.n	28fc <juggle(LEDStruct&)+0xa74>
    2918:	9503      	str	r5, [sp, #12]
    291a:	e55c      	b.n	23d6 <juggle(LEDStruct&)+0x54e>

0000291c <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    291c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    2920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2924:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2926:	2b00      	cmp	r3, #0
    2928:	d06b      	beq.n	2a02 <rainbow_march(LEDStruct&)+0xe6>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    292a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    292e:	bb43      	cbnz	r3, 2982 <rainbow_march(LEDStruct&)+0x66>
    2930:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    2934:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    2938:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    293a:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    293e:	b2d2      	uxtb	r2, r2
    2940:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2944:	bb4b      	cbnz	r3, 299a <rainbow_march(LEDStruct&)+0x7e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2946:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    294a:	2b00      	cmp	r3, #0
    294c:	d151      	bne.n	29f2 <rainbow_march(LEDStruct&)+0xd6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    294e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2952:	214b      	movs	r1, #75	; 0x4b
    2954:	4620      	mov	r0, r4
    2956:	f003 f9b9 	bl	5ccc <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    295a:	4620      	mov	r0, r4
    295c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2960:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2962:	7802      	ldrb	r2, [r0, #0]
    2964:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    2968:	7842      	ldrb	r2, [r0, #1]
    296a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    296e:	7882      	ldrb	r2, [r0, #2]
    2970:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2974:	3003      	adds	r0, #3
    2976:	4288      	cmp	r0, r1
    2978:	f1a3 0303 	sub.w	r3, r3, #3
    297c:	d1f1      	bne.n	2962 <rainbow_march(LEDStruct&)+0x46>
    297e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2982:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    2986:	f894 2236 	ldrb.w	r2, [r4, #566]	; 0x236
    298a:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    298c:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2990:	b2d2      	uxtb	r2, r2
    2992:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2996:	2b00      	cmp	r3, #0
    2998:	d0d5      	beq.n	2946 <rainbow_march(LEDStruct&)+0x2a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    299a:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    299e:	2125      	movs	r1, #37	; 0x25
    29a0:	4620      	mov	r0, r4
    29a2:	f003 f993 	bl	5ccc <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    29a6:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    29aa:	4623      	mov	r3, r4
    29ac:	4621      	mov	r1, r4
    29ae:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    29b0:	7810      	ldrb	r0, [r2, #0]
    29b2:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    29b6:	7850      	ldrb	r0, [r2, #1]
    29b8:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    29bc:	7890      	ldrb	r0, [r2, #2]
    29be:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    29c2:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    29c4:	42aa      	cmp	r2, r5
    29c6:	f1a1 0103 	sub.w	r1, r1, #3
    29ca:	d1f1      	bne.n	29b0 <rainbow_march(LEDStruct&)+0x94>
    29cc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    29d0:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    29d2:	7802      	ldrb	r2, [r0, #0]
    29d4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    29d8:	7842      	ldrb	r2, [r0, #1]
    29da:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    29de:	7882      	ldrb	r2, [r0, #2]
    29e0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    29e4:	3003      	adds	r0, #3
    29e6:	4288      	cmp	r0, r1
    29e8:	f1a3 0303 	sub.w	r3, r3, #3
    29ec:	d1f1      	bne.n	29d2 <rainbow_march(LEDStruct&)+0xb6>
    29ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    29f2:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    29f6:	4620      	mov	r0, r4
    29f8:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    29fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    29fe:	f003 b965 	b.w	5ccc <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2a02:	4927      	ldr	r1, [pc, #156]	; (2aa0 <rainbow_march(LEDStruct&)+0x184>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2a04:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    2a08:	880b      	ldrh	r3, [r1, #0]
    2a0a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a12:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a16:	3319      	adds	r3, #25
    2a18:	b29b      	uxth	r3, r3
    2a1a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a1e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2a22:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2a26:	3219      	adds	r2, #25
    2a28:	b292      	uxth	r2, r2
    2a2a:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2a2e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2a32:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2a36:	3519      	adds	r5, #25
    2a38:	b2ad      	uxth	r5, r5
    2a3a:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    2a3e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a42:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2a46:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a4a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2a4e:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    2a50:	b2d2      	uxtb	r2, r2
    2a52:	3619      	adds	r6, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2a54:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    2a58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2a5c:	b2b6      	uxth	r6, r6

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2a5e:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    2a60:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a62:	eb06 2716 	add.w	r7, r6, r6, lsr #8

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2a66:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    2a68:	3201      	adds	r2, #1
    2a6a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2a6e:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.this_dir = td;
    2a72:	f3c5 15c0 	ubfx	r5, r5, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2a76:	f880 3237 	strb.w	r3, [r0, #567]	; 0x237
    leds.rainbow_rot    = rr;
    2a7a:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2a7e:	2301      	movs	r3, #1
	leds.mode_type = RAINBOW_MARCH;
    2a80:	2205      	movs	r2, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2a82:	f880 71c4 	strb.w	r7, [r0, #452]	; 0x1c4
	leds.this_dir = td;
    2a86:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2a8a:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    2a8e:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    2a92:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a96:	800e      	strh	r6, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    2a98:	f7fe fe4e 	bl	1738 <LEDDebug(LEDStruct&)>
    2a9c:	e745      	b.n	292a <rainbow_march(LEDStruct&)+0xe>
    2a9e:	bf00      	nop
    2aa0:	1fff8746 	.word	0x1fff8746

00002aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2aa6:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2aaa:	f89d 6014 	ldrb.w	r6, [sp, #20]
    2aae:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    2ab2:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2ab4:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2ab6:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2ab8:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2aba:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    2abe:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2ac2:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2ac6:	d940      	bls.n	2b4a <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa6>
	else { leds.use_palette = 0; }
    2ac8:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    2aca:	f880 623a 	strb.w	r6, [r0, #570]	; 0x23a
	leds.fire_cooling		= fc;
    2ace:	f880 523c 	strb.w	r5, [r0, #572]	; 0x23c
	leds.fire_sync			= fy;
    2ad2:	f880 12d6 	strb.w	r1, [r0, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    2ad6:	f880 22d7 	strb.w	r2, [r0, #727]	; 0x2d7
	leds.torch_diff			= td;
    2ada:	f880 e2d9 	strb.w	lr, [r0, #729]	; 0x2d9

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    2ade:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2ae2:	2a00      	cmp	r2, #0
    2ae4:	d13f      	bne.n	2b66 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2ae6:	234b      	movs	r3, #75	; 0x4b
    2ae8:	f880 22d5 	strb.w	r2, [r0, #725]	; 0x2d5
    2aec:	f880 32d4 	strb.w	r3, [r0, #724]	; 0x2d4

	if (!leds.fire_sync) {
    2af0:	bb51      	cbnz	r1, 2b48 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    2af2:	4c20      	ldr	r4, [pc, #128]	; (2b74 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    2af4:	8823      	ldrh	r3, [r4, #0]
    2af6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2afa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2afe:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2b02:	3319      	adds	r3, #25
    2b04:	b29b      	uxth	r3, r3
    2b06:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2b0a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2b0e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2b12:	3219      	adds	r2, #25
    2b14:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b16:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2b1a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
		leds.fire_sparking2 = fs - 10 + random8(21);
    2b1e:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
    2b20:	b2c9      	uxtb	r1, r1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2b22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
    2b26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2b2a:	3e0a      	subs	r6, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
    2b2c:	3d0a      	subs	r5, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2b2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
    2b32:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2b36:	eb06 2323 	add.w	r3, r6, r3, asr #8
		leds.fire_cooling2	= fc - 10 + random8(21);
    2b3a:	eb05 2121 	add.w	r1, r5, r1, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    2b3e:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b42:	8022      	strh	r2, [r4, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
    2b44:	f880 123d 	strb.w	r1, [r0, #573]	; 0x23d
    2b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2b4a:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    2b4e:	f880 623a 	strb.w	r6, [r0, #570]	; 0x23a
	leds.fire_cooling		= fc;
    2b52:	f880 523c 	strb.w	r5, [r0, #572]	; 0x23c
	leds.fire_sync			= fy;
    2b56:	f880 12d6 	strb.w	r1, [r0, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    2b5a:	f880 22d7 	strb.w	r2, [r0, #727]	; 0x2d7
	leds.torch_diff			= td;
    2b5e:	f880 e2d9 	strb.w	lr, [r0, #729]	; 0x2d9
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2b62:	2a00      	cmp	r2, #0
    2b64:	d0c2      	beq.n	2aec <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    2b66:	2325      	movs	r3, #37	; 0x25
    2b68:	f880 32d4 	strb.w	r3, [r0, #724]	; 0x2d4
    2b6c:	f880 32d5 	strb.w	r3, [r0, #725]	; 0x2d5
    2b70:	e7be      	b.n	2af0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    2b72:	bf00      	nop
    2b74:	1fff8746 	.word	0x1fff8746

00002b78 <fire(LEDStruct&)>:
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    2b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    2b7c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    2b80:	4dcd      	ldr	r5, [pc, #820]	; (2eb8 <fire(LEDStruct&)+0x340>)
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    2b82:	b086      	sub	sp, #24
    2b84:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    2b86:	2b00      	cmp	r3, #0
    2b88:	f000 821d 	beq.w	2fc6 <fire(LEDStruct&)+0x44e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2b8c:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2b90:	2b00      	cmp	r3, #0
    2b92:	f000 82ca 	beq.w	312a <fire(LEDStruct&)+0x5b2>
    2b96:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    2b9a:	882a      	ldrh	r2, [r5, #0]
    2b9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2ba0:	004f      	lsls	r7, r1, #1
    2ba2:	f203 2e3d 	addw	lr, r3, #573	; 0x23d
    2ba6:	fb97 f7f3 	sdiv	r7, r7, r3
    2baa:	3702      	adds	r7, #2
    2bac:	b2ff      	uxtb	r7, r7
    2bae:	44a6      	add	lr, r4
    2bb0:	f204 263d 	addw	r6, r4, #573	; 0x23d
    2bb4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2bb8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2bbc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2bc0:	3219      	adds	r2, #25
    2bc2:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2bc4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2bc8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    2bcc:	b2c9      	uxtb	r1, r1
    2bce:	fb11 f107 	smulbb	r1, r1, r7
    2bd2:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2bd6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2bda:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2bdc:	7031      	strb	r1, [r6, #0]
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2bde:	d1e9      	bne.n	2bb4 <fire(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    2be0:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    2be4:	802a      	strh	r2, [r5, #0]
    2be6:	2e00      	cmp	r6, #0
    2be8:	f000 810e 	beq.w	2e08 <fire(LEDStruct&)+0x290>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2bec:	f1a3 0e03 	sub.w	lr, r3, #3
    2bf0:	f1be 0f01 	cmp.w	lr, #1
    2bf4:	f04f 0c01 	mov.w	ip, #1
    2bf8:	dd1a      	ble.n	2c30 <fire(LEDStruct&)+0xb8>
    2bfa:	f203 203a 	addw	r0, r3, #570	; 0x23a
    2bfe:	f503 770f 	add.w	r7, r3, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2c02:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 2ebc <fire(LEDStruct&)+0x344>
    2c06:	4420      	add	r0, r4
    2c08:	4427      	add	r7, r4
    2c0a:	f204 283e 	addw	r8, r4, #574	; 0x23e
    2c0e:	7801      	ldrb	r1, [r0, #0]
    2c10:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    2c14:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    2c18:	fb89 a601 	smull	sl, r6, r9, r1
    2c1c:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2c20:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2c22:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2c26:	d1f2      	bne.n	2c0e <fire(LEDStruct&)+0x96>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    2c28:	f1bc 0f00 	cmp.w	ip, #0
    2c2c:	f000 80d3 	beq.w	2dd6 <fire(LEDStruct&)+0x25e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c30:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2c34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2c38:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2c3c:	3219      	adds	r2, #25
    2c3e:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    2c40:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    2c44:	f894 623a 	ldrb.w	r6, [r4, #570]	; 0x23a
    2c48:	802a      	strh	r2, [r5, #0]
    2c4a:	b2c9      	uxtb	r1, r1
    2c4c:	428e      	cmp	r6, r1
    2c4e:	489a      	ldr	r0, [pc, #616]	; (2eb8 <fire(LEDStruct&)+0x340>)
    2c50:	d926      	bls.n	2ca0 <fire(LEDStruct&)+0x128>
    2c52:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2c56:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2c5a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2c5e:	3219      	adds	r2, #25
    2c60:	b292      	uxth	r2, r2
    2c62:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2c66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2c6a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2c6e:	3619      	adds	r6, #25
    2c70:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c72:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    2c76:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2c7a:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2c7c:	b2d2      	uxtb	r2, r2
    2c7e:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    2c82:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    2c86:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2c8a:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    2c8e:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c90:	8006      	strh	r6, [r0, #0]
    2c92:	3960      	subs	r1, #96	; 0x60
    2c94:	f892 023e 	ldrb.w	r0, [r2, #574]	; 0x23e
    2c98:	fa80 f051 	uqadd8	r0, r0, r1
    2c9c:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}

	if (!leds.fire_sync) {
    2ca0:	f1bc 0f00 	cmp.w	ip, #0
    2ca4:	d112      	bne.n	2ccc <fire(LEDStruct&)+0x154>
    2ca6:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    2ca8:	f894 623b 	ldrb.w	r6, [r4, #571]	; 0x23b
    2cac:	4982      	ldr	r1, [pc, #520]	; (2eb8 <fire(LEDStruct&)+0x340>)
    2cae:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2cb2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2cb6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2cba:	3219      	adds	r2, #25
    2cbc:	b292      	uxth	r2, r2
    2cbe:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    2cc2:	b2c0      	uxtb	r0, r0
    2cc4:	4286      	cmp	r6, r0
    2cc6:	802a      	strh	r2, [r5, #0]
    2cc8:	f200 80cd 	bhi.w	2e66 <fire(LEDStruct&)+0x2ee>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    2ccc:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2cd0:	2a00      	cmp	r2, #0
    2cd2:	d15f      	bne.n	2d94 <fire(LEDStruct&)+0x21c>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	f000 8146 	beq.w	2f66 <fire(LEDStruct&)+0x3ee>
    2cda:	f204 273d 	addw	r7, r4, #573	; 0x23d
    2cde:	4690      	mov	r8, r2
    2ce0:	46b9      	mov	r9, r7
    2ce2:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    2ce4:	3b01      	subs	r3, #1
    2ce6:	ebc8 0503 	rsb	r5, r8, r3
    2cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2cee:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2cf2:	4630      	mov	r0, r6
    2cf4:	f003 f8da 	bl	5eac <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2cf8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2cfc:	5563      	strb	r3, [r4, r5]
    2cfe:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2d00:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2d04:	f89d 2015 	ldrb.w	r2, [sp, #21]
    2d08:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2d0a:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    2d0c:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2d10:	f108 0801 	add.w	r8, r8, #1
    2d14:	4543      	cmp	r3, r8
    2d16:	dce5      	bgt.n	2ce4 <fire(LEDStruct&)+0x16c>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2d18:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    2d1c:	b30a      	cbz	r2, 2d62 <fire(LEDStruct&)+0x1ea>
		if (leds.this_dir) {
    2d1e:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2d22:	2a00      	cmp	r2, #0
    2d24:	f040 81b8 	bne.w	3098 <fire(LEDStruct&)+0x520>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2d28:	4690      	mov	r8, r2
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	f000 81f7 	beq.w	311e <fire(LEDStruct&)+0x5a6>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    2d30:	eb08 0503 	add.w	r5, r8, r3
    2d34:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2d38:	4630      	mov	r0, r6
    2d3a:	f003 f8b7 	bl	5eac <HeatColor(unsigned char)>
    2d3e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d42:	f89d 2014 	ldrb.w	r2, [sp, #20]
    2d46:	54e2      	strb	r2, [r4, r3]
    2d48:	4423      	add	r3, r4
        g = rhs.g;
    2d4a:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    2d4e:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2d52:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    2d54:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2d56:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2d5a:	f108 0801 	add.w	r8, r8, #1
    2d5e:	4543      	cmp	r3, r8
    2d60:	dce6      	bgt.n	2d30 <fire(LEDStruct&)+0x1b8>
    2d62:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2d66:	2a00      	cmp	r2, #0
    2d68:	f000 80aa 	beq.w	2ec0 <fire(LEDStruct&)+0x348>
    2d6c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2d70:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2d72:	781a      	ldrb	r2, [r3, #0]
    2d74:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    2d78:	785a      	ldrb	r2, [r3, #1]
    2d7a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    2d7e:	789a      	ldrb	r2, [r3, #2]
    2d80:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    2d84:	3303      	adds	r3, #3
    2d86:	4299      	cmp	r1, r3
    2d88:	f1a4 0403 	sub.w	r4, r4, #3
    2d8c:	d1f1      	bne.n	2d72 <fire(LEDStruct&)+0x1fa>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    2d8e:	b006      	add	sp, #24
    2d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2d94:	2b00      	cmp	r3, #0
    2d96:	f000 81bf 	beq.w	3118 <fire(LEDStruct&)+0x5a0>
    2d9a:	f204 273d 	addw	r7, r4, #573	; 0x23d
    2d9e:	46b9      	mov	r9, r7
    2da0:	4625      	mov	r5, r4
    2da2:	f04f 0800 	mov.w	r8, #0
    2da6:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    2da8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2dac:	4630      	mov	r0, r6
    2dae:	f003 f87d 	bl	5eac <HeatColor(unsigned char)>
    2db2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2db6:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2dba:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dbe:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    2dc0:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2dc2:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2dc4:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2dc8:	f108 0801 	add.w	r8, r8, #1
    2dcc:	4543      	cmp	r3, r8
    2dce:	f105 0503 	add.w	r5, r5, #3
    2dd2:	dce9      	bgt.n	2da8 <fire(LEDStruct&)+0x230>
    2dd4:	e7a0      	b.n	2d18 <fire(LEDStruct&)+0x1a0>
    2dd6:	f203 2685 	addw	r6, r3, #645	; 0x285
    2dda:	f203 2787 	addw	r7, r3, #647	; 0x287
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    2dde:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2ebc <fire(LEDStruct&)+0x344>
    2de2:	4426      	add	r6, r4
    2de4:	4427      	add	r7, r4
    2de6:	7831      	ldrb	r1, [r6, #0]
    2de8:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    2dec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2df0:	fb88 9001 	smull	r9, r0, r8, r1
    2df4:	f10e 3eff 	add.w	lr, lr, #4294967295
    2df8:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2dfc:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    2e00:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2e04:	d1ef      	bne.n	2de6 <fire(LEDStruct&)+0x26e>
    2e06:	e713      	b.n	2c30 <fire(LEDStruct&)+0xb8>
    2e08:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    2e0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2e10:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    2e14:	fb9e fef3 	sdiv	lr, lr, r3
    2e18:	f10e 0e02 	add.w	lr, lr, #2
    2e1c:	fa5f fe8e 	uxtb.w	lr, lr
    2e20:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2e24:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    2e28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2e2c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2e30:	3219      	adds	r2, #25
    2e32:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e34:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    2e38:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    2e3c:	b2c9      	uxtb	r1, r1
    2e3e:	fb11 f10e 	smulbb	r1, r1, lr
    2e42:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2e46:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    2e48:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2e4c:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    2e4e:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    2e50:	dbe8      	blt.n	2e24 <fire(LEDStruct&)+0x2ac>
    2e52:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2e54:	f1a3 0e03 	sub.w	lr, r3, #3
    2e58:	f1be 0f01 	cmp.w	lr, #1
    2e5c:	f04f 0c00 	mov.w	ip, #0
    2e60:	f73f aecb 	bgt.w	2bfa <fire(LEDStruct&)+0x82>
    2e64:	e6e4      	b.n	2c30 <fire(LEDStruct&)+0xb8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e66:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2e6a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2e6e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2e72:	3219      	adds	r2, #25
    2e74:	b292      	uxth	r2, r2
    2e76:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2e7a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2e7e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2e82:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e84:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e88:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2e8a:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e8c:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2e90:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2e94:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    2e96:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2e9a:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    2e9e:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    2ea2:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2ea6:	800d      	strh	r5, [r1, #0]
    2ea8:	1201      	asrs	r1, r0, #8
    2eaa:	3960      	subs	r1, #96	; 0x60
    2eac:	4630      	mov	r0, r6
    2eae:	fa80 f051 	uqadd8	r0, r0, r1
    2eb2:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
    2eb6:	e709      	b.n	2ccc <fire(LEDStruct&)+0x154>
    2eb8:	1fff8746 	.word	0x1fff8746
    2ebc:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    2ec0:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2ec4:	2a00      	cmp	r2, #0
    2ec6:	d059      	beq.n	2f7c <fire(LEDStruct&)+0x404>
			for (int j = 0; j < leds.heat_length; j++) {
    2ec8:	2b00      	cmp	r3, #0
    2eca:	f43f af60 	beq.w	2d8e <fire(LEDStruct&)+0x216>
    2ece:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2ed2:	46b9      	mov	r9, r7
    2ed4:	4625      	mov	r5, r4
    2ed6:	f04f 0800 	mov.w	r8, #0
    2eda:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    2edc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2ee0:	4630      	mov	r0, r6
    2ee2:	f002 ffe3 	bl	5eac <HeatColor(unsigned char)>
    2ee6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2eea:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2eee:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ef2:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    2ef6:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    2efa:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2efe:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2f02:	f108 0801 	add.w	r8, r8, #1
    2f06:	4543      	cmp	r3, r8
    2f08:	f1a5 0503 	sub.w	r5, r5, #3
    2f0c:	dce6      	bgt.n	2edc <fire(LEDStruct&)+0x364>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    2f0e:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    2f12:	2a00      	cmp	r2, #0
    2f14:	f43f af3b 	beq.w	2d8e <fire(LEDStruct&)+0x216>
			if (leds.this_dir) {
    2f18:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2f1c:	2a00      	cmp	r2, #0
    2f1e:	f000 80da 	beq.w	30d6 <fire(LEDStruct&)+0x55e>
				for (int j = 0; j < leds.heat_length; j++) {
    2f22:	2b00      	cmp	r3, #0
    2f24:	f43f af33 	beq.w	2d8e <fire(LEDStruct&)+0x216>
    2f28:	4625      	mov	r5, r4
    2f2a:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    2f2e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2f32:	4630      	mov	r0, r6
    2f34:	f002 ffba 	bl	5eac <HeatColor(unsigned char)>
    2f38:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f3c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    2f40:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f44:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    2f48:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    2f4c:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    2f50:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2f54:	f108 0801 	add.w	r8, r8, #1
    2f58:	4543      	cmp	r3, r8
    2f5a:	f105 0503 	add.w	r5, r5, #3
    2f5e:	dce6      	bgt.n	2f2e <fire(LEDStruct&)+0x3b6>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    2f60:	b006      	add	sp, #24
    2f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    2f66:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	f040 80d7 	bne.w	311e <fire(LEDStruct&)+0x5a6>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    2f70:	f1bc 0f00 	cmp.w	ip, #0
    2f74:	f47f aefa 	bne.w	2d6c <fire(LEDStruct&)+0x1f4>
    2f78:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	f43f af06 	beq.w	2d8e <fire(LEDStruct&)+0x216>
    2f82:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2f86:	46b9      	mov	r9, r7
    2f88:	f04f 0800 	mov.w	r8, #0
    2f8c:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    2f8e:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    2f92:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2f96:	354b      	adds	r5, #75	; 0x4b
    2f98:	4445      	add	r5, r8
    2f9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2f9e:	4630      	mov	r0, r6
    2fa0:	f002 ff84 	bl	5eac <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2fa4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2fa8:	5563      	strb	r3, [r4, r5]
    2faa:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2fac:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2fb0:	f89d 2015 	ldrb.w	r2, [sp, #21]
    2fb4:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2fb6:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2fb8:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2fbc:	f108 0801 	add.w	r8, r8, #1
    2fc0:	4543      	cmp	r3, r8
    2fc2:	dce4      	bgt.n	2f8e <fire(LEDStruct&)+0x416>
    2fc4:	e7a3      	b.n	2f0e <fire(LEDStruct&)+0x396>
    2fc6:	882b      	ldrh	r3, [r5, #0]
    2fc8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2fcc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2fd0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2fd4:	3119      	adds	r1, #25
    2fd6:	b289      	uxth	r1, r1
    2fd8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2fdc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2fe0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2fe4:	3219      	adds	r2, #25
    2fe6:	b292      	uxth	r2, r2
    2fe8:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2fec:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2ff0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2ff4:	f10e 0e19 	add.w	lr, lr, #25
    2ff8:	fa1f fe8e 	uxth.w	lr, lr
    2ffc:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3000:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3004:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3008:	3619      	adds	r6, #25
    300a:	b2b6      	uxth	r6, r6
    300c:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3010:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3014:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3018:	3319      	adds	r3, #25
    301a:	b29b      	uxth	r3, r3
    301c:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3020:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3024:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3028:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    302c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3030:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
}


void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3034:	b2f6      	uxtb	r6, r6
    3036:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    303a:	3719      	adds	r7, #25
    303c:	b2db      	uxtb	r3, r3
    303e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3042:	b2bf      	uxth	r7, r7
    3044:	11b6      	asrs	r6, r6, #6
    3046:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    304a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    304e:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3052:	119b      	asrs	r3, r3, #6
    3054:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3058:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    305c:	333c      	adds	r3, #60	; 0x3c
    305e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3062:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3066:	fa5f f883 	uxtb.w	r8, r3
    306a:	fa5f fc8c 	uxtb.w	ip, ip
    306e:	3601      	adds	r6, #1
    3070:	f10e 0314 	add.w	r3, lr, #20
    3074:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3078:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    307c:	f8cd c000 	str.w	ip, [sp]
    3080:	f8cd 8004 	str.w	r8, [sp, #4]
    3084:	9602      	str	r6, [sp, #8]
    3086:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    308a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    308e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3090:	802f      	strh	r7, [r5, #0]
    3092:	f7ff fd07 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3096:	e579      	b.n	2b8c <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3098:	2b00      	cmp	r3, #0
    309a:	d040      	beq.n	311e <fire(LEDStruct&)+0x5a6>
    309c:	4625      	mov	r5, r4
    309e:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    30a2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    30a6:	4630      	mov	r0, r6
    30a8:	f002 ff00 	bl	5eac <HeatColor(unsigned char)>
    30ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30b0:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    30b4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30b8:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    30bc:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    30c0:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    30c4:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    30c8:	f108 0801 	add.w	r8, r8, #1
    30cc:	4543      	cmp	r3, r8
    30ce:	f1a5 0503 	sub.w	r5, r5, #3
    30d2:	dce6      	bgt.n	30a2 <fire(LEDStruct&)+0x52a>
    30d4:	e645      	b.n	2d62 <fire(LEDStruct&)+0x1ea>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    30d6:	4690      	mov	r8, r2
    30d8:	2b00      	cmp	r3, #0
    30da:	f43f ae58 	beq.w	2d8e <fire(LEDStruct&)+0x216>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    30de:	334b      	adds	r3, #75	; 0x4b
    30e0:	ebc8 0503 	rsb	r5, r8, r3
    30e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    30e8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    30ec:	4630      	mov	r0, r6
    30ee:	f002 fedd 	bl	5eac <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    30f6:	5563      	strb	r3, [r4, r5]
    30f8:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    30fa:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    30fe:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3102:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3104:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3106:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    310a:	f108 0801 	add.w	r8, r8, #1
    310e:	4543      	cmp	r3, r8
    3110:	dce5      	bgt.n	30de <fire(LEDStruct&)+0x566>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3112:	b006      	add	sp, #24
    3114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3118:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    311c:	b153      	cbz	r3, 3134 <fire(LEDStruct&)+0x5bc>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    311e:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    3122:	2b00      	cmp	r3, #0
    3124:	f47f ae22 	bne.w	2d6c <fire(LEDStruct&)+0x1f4>
    3128:	e631      	b.n	2d8e <fire(LEDStruct&)+0x216>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    312a:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
    312e:	b142      	cbz	r2, 3142 <fire(LEDStruct&)+0x5ca>
    3130:	882a      	ldrh	r2, [r5, #0]
    3132:	e55b      	b.n	2bec <fire(LEDStruct&)+0x74>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3134:	f1bc 0f00 	cmp.w	ip, #0
    3138:	f47f ae18 	bne.w	2d6c <fire(LEDStruct&)+0x1f4>
    313c:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3140:	e6c2      	b.n	2ec8 <fire(LEDStruct&)+0x350>
    3142:	882a      	ldrh	r2, [r5, #0]
    3144:	e686      	b.n	2e54 <fire(LEDStruct&)+0x2dc>
    3146:	bf00      	nop

00003148 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    3148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    314c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3150:	4dcd      	ldr	r5, [pc, #820]	; (3488 <torch(LEDStruct&)+0x340>)





void torch(LEDStruct& leds) {
    3152:	b087      	sub	sp, #28
    3154:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    3156:	2b00      	cmp	r3, #0
    3158:	f000 81d2 	beq.w	3500 <torch(LEDStruct&)+0x3b8>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    315c:	f894 c2d4 	ldrb.w	ip, [r4, #724]	; 0x2d4
    3160:	4663      	mov	r3, ip
    3162:	f1bc 0f00 	cmp.w	ip, #0
    3166:	f000 8234 	beq.w	35d2 <torch(LEDStruct&)+0x48a>
    316a:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
    316e:	882a      	ldrh	r2, [r5, #0]
    3170:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3174:	004f      	lsls	r7, r1, #1
    3176:	f20c 2e3d 	addw	lr, ip, #573	; 0x23d
    317a:	fb97 f7fc 	sdiv	r7, r7, ip
    317e:	3702      	adds	r7, #2
    3180:	b2ff      	uxtb	r7, r7
    3182:	44a6      	add	lr, r4
    3184:	f204 263d 	addw	r6, r4, #573	; 0x23d
    3188:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    318c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3190:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3194:	3219      	adds	r2, #25
    3196:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3198:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    319c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    31a0:	b2c9      	uxtb	r1, r1
    31a2:	fb11 f107 	smulbb	r1, r1, r7
    31a6:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    31aa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    31ae:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    31b0:	7031      	strb	r1, [r6, #0]


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    31b2:	d1e9      	bne.n	3188 <torch(LEDStruct&)+0x40>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    31b4:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    31b8:	802a      	strh	r2, [r5, #0]
    31ba:	2e00      	cmp	r6, #0
    31bc:	f000 8168 	beq.w	3490 <torch(LEDStruct&)+0x348>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    31c0:	f1ac 0703 	sub.w	r7, ip, #3
    31c4:	2f01      	cmp	r7, #1
    31c6:	f04f 0901 	mov.w	r9, #1
    31ca:	dd1a      	ble.n	3202 <torch(LEDStruct&)+0xba>
    31cc:	f20c 203a 	addw	r0, ip, #570	; 0x23a
    31d0:	f50c 760f 	add.w	r6, ip, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    31d4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 348c <torch(LEDStruct&)+0x344>
    31d8:	4420      	add	r0, r4
    31da:	4426      	add	r6, r4
    31dc:	f204 2e3e 	addw	lr, r4, #574	; 0x23e
    31e0:	7801      	ldrb	r1, [r0, #0]
    31e2:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    31e6:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    31ea:	fb88 ba01 	smull	fp, sl, r8, r1
    31ee:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    31f2:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    31f4:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    31f8:	d1f2      	bne.n	31e0 <torch(LEDStruct&)+0x98>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    31fa:	f1b9 0f00 	cmp.w	r9, #0
    31fe:	f000 812c 	beq.w	345a <torch(LEDStruct&)+0x312>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3202:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3206:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    320a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    320e:	3219      	adds	r2, #25
    3210:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    3212:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3216:	f894 623a 	ldrb.w	r6, [r4, #570]	; 0x23a
    321a:	802a      	strh	r2, [r5, #0]
    321c:	b2c0      	uxtb	r0, r0
    321e:	4286      	cmp	r6, r0
    3220:	4999      	ldr	r1, [pc, #612]	; (3488 <torch(LEDStruct&)+0x340>)
    3222:	d928      	bls.n	3276 <torch(LEDStruct&)+0x12e>
    3224:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3228:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    322c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3230:	3219      	adds	r2, #25
    3232:	b292      	uxth	r2, r2
    3234:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3238:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    323c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3240:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3242:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3246:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3248:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    324a:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    324e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3252:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    3254:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3258:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    325c:	800e      	strh	r6, [r1, #0]
    325e:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    3262:	f892 623e 	ldrb.w	r6, [r2, #574]	; 0x23e
    3266:	1200      	asrs	r0, r0, #8
    3268:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    326c:	4630      	mov	r0, r6
    326e:	fa80 f051 	uqadd8	r0, r0, r1
    3272:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}
	if (!leds.fire_sync) {
    3276:	f1b9 0f00 	cmp.w	r9, #0
    327a:	d112      	bne.n	32a2 <torch(LEDStruct&)+0x15a>
    327c:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    327e:	f894 623b 	ldrb.w	r6, [r4, #571]	; 0x23b
    3282:	4981      	ldr	r1, [pc, #516]	; (3488 <torch(LEDStruct&)+0x340>)
    3284:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3288:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    328c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3290:	3219      	adds	r2, #25
    3292:	b292      	uxth	r2, r2
    3294:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3298:	b2c0      	uxtb	r0, r0
    329a:	4286      	cmp	r6, r0
    329c:	802a      	strh	r2, [r5, #0]
    329e:	f200 80af 	bhi.w	3400 <torch(LEDStruct&)+0x2b8>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    32a2:	f1bc 0f00 	cmp.w	ip, #0
    32a6:	f000 8199 	beq.w	35dc <torch(LEDStruct&)+0x494>
    32aa:	f204 273d 	addw	r7, r4, #573	; 0x23d
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    32ae:	2600      	movs	r6, #0
    32b0:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    32b4:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    32b8:	199d      	adds	r5, r3, r6
    32ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    32be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    32c2:	4648      	mov	r0, r9
    32c4:	f002 fdf2 	bl	5eac <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    32cc:	5563      	strb	r3, [r4, r5]
    32ce:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    32d0:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    32d4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    32d8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    32da:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    32dc:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    32e0:	3601      	adds	r6, #1
    32e2:	42b3      	cmp	r3, r6
    32e4:	dce6      	bgt.n	32b4 <torch(LEDStruct&)+0x16c>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    32e6:	f894 62d6 	ldrb.w	r6, [r4, #726]	; 0x2d6
    32ea:	2e00      	cmp	r6, #0
    32ec:	d175      	bne.n	33da <torch(LEDStruct&)+0x292>
    32ee:	f504 7722 	add.w	r7, r4, #648	; 0x288
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    32f2:	2b00      	cmp	r3, #0
    32f4:	f000 8178 	beq.w	35e8 <torch(LEDStruct&)+0x4a0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    32f8:	334a      	adds	r3, #74	; 0x4a
    32fa:	1b9d      	subs	r5, r3, r6
    32fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3300:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3304:	4648      	mov	r0, r9
    3306:	f002 fdd1 	bl	5eac <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    330a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    330e:	5563      	strb	r3, [r4, r5]
    3310:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3312:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3316:	f89d 2015 	ldrb.w	r2, [sp, #21]
    331a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    331c:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    331e:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    3322:	3601      	adds	r6, #1
    3324:	42b3      	cmp	r3, r6
    3326:	dce7      	bgt.n	32f8 <torch(LEDStruct&)+0x1b0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3328:	2b4b      	cmp	r3, #75	; 0x4b
    332a:	d047      	beq.n	33bc <torch(LEDStruct&)+0x274>
    332c:	f10d 0914 	add.w	r9, sp, #20
    3330:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3334:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3336:	4626      	mov	r6, r4
    3338:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    333a:	f04f 0a01 	mov.w	sl, #1
    333e:	f894 22d8 	ldrb.w	r2, [r4, #728]	; 0x2d8
    3342:	f8cd a000 	str.w	sl, [sp]
    3346:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    334a:	fb98 f3f3 	sdiv	r3, r8, r3
    334e:	441a      	add	r2, r3
    3350:	b2d2      	uxtb	r2, r2
    3352:	23ff      	movs	r3, #255	; 0xff
    3354:	4659      	mov	r1, fp
    3356:	4648      	mov	r0, r9
    3358:	f002 fdca 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    335c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3360:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    3364:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3368:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    336a:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    336c:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    336e:	f894 32d8 	ldrb.w	r3, [r4, #728]	; 0x2d8
    3372:	f894 22d4 	ldrb.w	r2, [r4, #724]	; 0x2d4
    3376:	fb98 f8f2 	sdiv	r8, r8, r2
    337a:	eb08 0203 	add.w	r2, r8, r3
    337e:	b2d2      	uxtb	r2, r2
    3380:	23ff      	movs	r3, #255	; 0xff
    3382:	4659      	mov	r1, fp
    3384:	f8cd a000 	str.w	sl, [sp]
    3388:	4648      	mov	r0, r9
    338a:	f002 fdb1 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    338e:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    3392:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3396:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    339a:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    339e:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    33a2:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    33a6:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    33aa:	3501      	adds	r5, #1
    33ac:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    33b0:	42aa      	cmp	r2, r5
    33b2:	f106 0603 	add.w	r6, r6, #3
    33b6:	f1a7 0703 	sub.w	r7, r7, #3
    33ba:	dcc0      	bgt.n	333e <torch(LEDStruct&)+0x1f6>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    33bc:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    33c0:	2b00      	cmp	r3, #0
    33c2:	f040 8093 	bne.w	34ec <torch(LEDStruct&)+0x3a4>
	else			   { leds.torch_index -= leds.torch_diff; }
    33c6:	f894 32d8 	ldrb.w	r3, [r4, #728]	; 0x2d8
    33ca:	f894 22d9 	ldrb.w	r2, [r4, #729]	; 0x2d9
    33ce:	1a9b      	subs	r3, r3, r2
    33d0:	f884 32d8 	strb.w	r3, [r4, #728]	; 0x2d8
}
    33d4:	b007      	add	sp, #28
    33d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33da:	4621      	mov	r1, r4
    33dc:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    33e0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33e2:	7810      	ldrb	r0, [r2, #0]
    33e4:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    33e8:	7850      	ldrb	r0, [r2, #1]
    33ea:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    33ee:	7890      	ldrb	r0, [r2, #2]
    33f0:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    33f4:	3203      	adds	r2, #3
    33f6:	4295      	cmp	r5, r2
    33f8:	f1a1 0103 	sub.w	r1, r1, #3
    33fc:	d1f1      	bne.n	33e2 <torch(LEDStruct&)+0x29a>
    33fe:	e793      	b.n	3328 <torch(LEDStruct&)+0x1e0>
    3400:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3404:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3408:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    340c:	3219      	adds	r2, #25
    340e:	b292      	uxth	r2, r2
    3410:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3414:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3418:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    341c:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    341e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3422:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3424:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3426:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    342a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    342e:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3430:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3434:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3438:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    343c:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3440:	800d      	strh	r5, [r1, #0]
    3442:	1201      	asrs	r1, r0, #8
    3444:	3960      	subs	r1, #96	; 0x60
    3446:	4630      	mov	r0, r6
    3448:	fa80 f051 	uqadd8	r0, r0, r1
    344c:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3450:	f1bc 0f00 	cmp.w	ip, #0
    3454:	f47f af29 	bne.w	32aa <torch(LEDStruct&)+0x162>
    3458:	e0c4      	b.n	35e4 <torch(LEDStruct&)+0x49c>
    345a:	f20c 2685 	addw	r6, ip, #645	; 0x285
    345e:	f20c 2e87 	addw	lr, ip, #647	; 0x287
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3462:	f8df 8028 	ldr.w	r8, [pc, #40]	; 348c <torch(LEDStruct&)+0x344>
    3466:	4426      	add	r6, r4
    3468:	44a6      	add	lr, r4
    346a:	7831      	ldrb	r1, [r6, #0]
    346c:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3470:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3474:	fb88 a001 	smull	sl, r0, r8, r1
    3478:	3f01      	subs	r7, #1
    347a:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    347e:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3480:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3484:	d1f1      	bne.n	346a <torch(LEDStruct&)+0x322>
    3486:	e6bc      	b.n	3202 <torch(LEDStruct&)+0xba>
    3488:	1fff8746 	.word	0x1fff8746
    348c:	55555556 	.word	0x55555556
    3490:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    3494:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3498:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    349c:	fb9e fefc 	sdiv	lr, lr, ip
    34a0:	f10e 0e02 	add.w	lr, lr, #2
    34a4:	fa5f fe8e 	uxtb.w	lr, lr
    34a8:	f504 7722 	add.w	r7, r4, #648	; 0x288
    34ac:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    34b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    34b4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    34b8:	3219      	adds	r2, #25
    34ba:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    34bc:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    34c0:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    34c4:	b2c9      	uxtb	r1, r1
    34c6:	fb11 f10e 	smulbb	r1, r1, lr
    34ca:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    34ce:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    34d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    34d4:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    34d6:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    34d8:	dbe8      	blt.n	34ac <torch(LEDStruct&)+0x364>
    34da:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    34dc:	f1ac 0703 	sub.w	r7, ip, #3
    34e0:	2f01      	cmp	r7, #1
    34e2:	f04f 0900 	mov.w	r9, #0
    34e6:	f73f ae71 	bgt.w	31cc <torch(LEDStruct&)+0x84>
    34ea:	e68a      	b.n	3202 <torch(LEDStruct&)+0xba>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    34ec:	f894 22d8 	ldrb.w	r2, [r4, #728]	; 0x2d8
    34f0:	f894 32d9 	ldrb.w	r3, [r4, #729]	; 0x2d9
    34f4:	4413      	add	r3, r2
    34f6:	f884 32d8 	strb.w	r3, [r4, #728]	; 0x2d8
	else			   { leds.torch_index -= leds.torch_diff; }
}
    34fa:	b007      	add	sp, #28
    34fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3500:	882b      	ldrh	r3, [r5, #0]
    3502:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3506:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    350a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    350e:	3119      	adds	r1, #25
    3510:	b289      	uxth	r1, r1
    3512:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3516:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    351a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    351e:	3219      	adds	r2, #25
    3520:	b292      	uxth	r2, r2
    3522:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3526:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    352a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    352e:	f10e 0e19 	add.w	lr, lr, #25
    3532:	fa1f fe8e 	uxth.w	lr, lr
    3536:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    353a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    353e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3542:	3619      	adds	r6, #25
    3544:	b2b6      	uxth	r6, r6
    3546:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    354a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    354e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3552:	3319      	adds	r3, #25
    3554:	b29b      	uxth	r3, r3
    3556:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    355a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    355e:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3562:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3566:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    356a:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    356e:	b2f6      	uxtb	r6, r6
    3570:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3574:	3719      	adds	r7, #25
    3576:	b2db      	uxtb	r3, r3
    3578:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    357c:	b2bf      	uxth	r7, r7
    357e:	11b6      	asrs	r6, r6, #6
    3580:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3584:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3588:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    358c:	119b      	asrs	r3, r3, #6
    358e:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3592:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3596:	333c      	adds	r3, #60	; 0x3c
    3598:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    359c:	f3c6 1681 	ubfx	r6, r6, #6, #2
    35a0:	fa5f f883 	uxtb.w	r8, r3
    35a4:	fa5f fc8c 	uxtb.w	ip, ip
    35a8:	3601      	adds	r6, #1
    35aa:	f10e 0314 	add.w	r3, lr, #20
    35ae:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    35b2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    35b6:	f8cd c000 	str.w	ip, [sp]
    35ba:	f8cd 8004 	str.w	r8, [sp, #4]
    35be:	9602      	str	r6, [sp, #8]
    35c0:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    35c4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    35c8:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    35ca:	802f      	strh	r7, [r5, #0]
    35cc:	f7ff fa6a 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    35d0:	e5c4      	b.n	315c <torch(LEDStruct&)+0x14>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    35d2:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
    35d6:	b14a      	cbz	r2, 35ec <torch(LEDStruct&)+0x4a4>
    35d8:	882a      	ldrh	r2, [r5, #0]
    35da:	e5f1      	b.n	31c0 <torch(LEDStruct&)+0x78>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    35dc:	f1b9 0f00 	cmp.w	r9, #0
    35e0:	f47f aefb 	bne.w	33da <torch(LEDStruct&)+0x292>
    35e4:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    35e8:	2300      	movs	r3, #0
    35ea:	e6a1      	b.n	3330 <torch(LEDStruct&)+0x1e8>
    35ec:	882a      	ldrh	r2, [r5, #0]
    35ee:	e775      	b.n	34dc <torch(LEDStruct&)+0x394>

000035f0 <colorwave(LEDStruct&)>:
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    35f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    35f4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    35f8:	b08b      	sub	sp, #44	; 0x2c
    35fa:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    35fc:	2b00      	cmp	r3, #0
    35fe:	f000 81b3 	beq.w	3968 <colorwave(LEDStruct&)+0x378>
    3602:	f8b0 52fa 	ldrh.w	r5, [r0, #762]	; 0x2fa
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3606:	4ad3      	ldr	r2, [pc, #844]	; (3954 <colorwave(LEDStruct&)+0x364>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3608:	4bd3      	ldr	r3, [pc, #844]	; (3958 <colorwave(LEDStruct&)+0x368>)
    360a:	6811      	ldr	r1, [r2, #0]
    360c:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    360e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3610:	fb03 f000 	mul.w	r0, r3, r0
    3614:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3616:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3618:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    361c:	d503      	bpl.n	3626 <colorwave(LEDStruct&)+0x36>
    361e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3622:	3307      	adds	r3, #7
    3624:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3626:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    3628:	4fcc      	ldr	r7, [pc, #816]	; (395c <colorwave(LEDStruct&)+0x36c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    362a:	f8df 8338 	ldr.w	r8, [pc, #824]	; 3964 <colorwave(LEDStruct&)+0x374>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    362e:	f817 e001 	ldrb.w	lr, [r7, r1]
    3632:	f838 6011 	ldrh.w	r6, [r8, r1, lsl #1]
    3636:	f3c3 0146 	ubfx	r1, r3, #1, #7
    363a:	fb0e 6301 	mla	r3, lr, r1, r6

    if( theta & 0x8000 ) y = -y;
    363e:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3640:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3642:	bf48      	it	mi
    3644:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3646:	6811      	ldr	r1, [r2, #0]
    3648:	9108      	str	r1, [sp, #32]
    364a:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    364c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3650:	b29b      	uxth	r3, r3
	return ret;
    3652:	9e08      	ldr	r6, [sp, #32]
    3654:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    3658:	f64d 6308 	movw	r3, #56840	; 0xde08
    365c:	fb03 f606 	mul.w	r6, r3, r6
    3660:	0c00      	lsrs	r0, r0, #16
    3662:	0c36      	lsrs	r6, r6, #16
    3664:	3060      	adds	r0, #96	; 0x60
    3666:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3668:	0471      	lsls	r1, r6, #17
    366a:	f884 02e0 	strb.w	r0, [r4, #736]	; 0x2e0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    366e:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3672:	d503      	bpl.n	367c <colorwave(LEDStruct&)+0x8c>
    3674:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3678:	3307      	adds	r3, #7
    367a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    367c:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3680:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3684:	f817 c00e 	ldrb.w	ip, [r7, lr]
    3688:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    368c:	fb0c 3301 	mla	r3, ip, r1, r3
    3690:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3692:	0431      	lsls	r1, r6, #16
    3694:	bf48      	it	mi
    3696:	425b      	negmi	r3, r3
    3698:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    369a:	6811      	ldr	r1, [r2, #0]
    369c:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    369e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    36a2:	b29b      	uxth	r3, r3
    36a4:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    36a8:	9e07      	ldr	r6, [sp, #28]
    36aa:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    36ae:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    36b2:	fb03 fe06 	mul.w	lr, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    36b6:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    36b8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    36bc:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    36c0:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    36c2:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    36c6:	f8a4 12e6 	strh.w	r1, [r4, #742]	; 0x2e6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    36ca:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    36ce:	d003      	beq.n	36d8 <colorwave(LEDStruct&)+0xe8>
    36d0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    36d4:	3307      	adds	r3, #7
    36d6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    36d8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36dc:	f3c3 0646 	ubfx	r6, r3, #1, #7
    36e0:	f817 900c 	ldrb.w	r9, [r7, ip]
    36e4:	f838 301c 	ldrh.w	r3, [r8, ip, lsl #1]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    36e8:	f8b4 c2de 	ldrh.w	ip, [r4, #734]	; 0x2de
    36ec:	f8a4 c2e8 	strh.w	ip, [r4, #744]	; 0x2e8
    36f0:	fb09 3306 	mla	r3, r9, r6, r3

    if( theta & 0x8000 ) y = -y;
    36f4:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36f8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    36fa:	bf18      	it	ne
    36fc:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36fe:	6816      	ldr	r6, [r2, #0]
    3700:	9606      	str	r6, [sp, #24]
    3702:	b21b      	sxth	r3, r3
    3704:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3708:	b29b      	uxth	r3, r3
    370a:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    370e:	9e06      	ldr	r6, [sp, #24]
    3710:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3714:	f647 3398 	movw	r3, #31640	; 0x7b98
    3718:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    371c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3720:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3722:	f10e 0e17 	add.w	lr, lr, #23
    3726:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    372a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
	if (!leds.mode_initialized) { colorwave_init(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    372e:	f884 e2e1 	strb.w	lr, [r4, #737]	; 0x2e1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3732:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3736:	d003      	beq.n	3740 <colorwave(LEDStruct&)+0x150>
    3738:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    373c:	3307      	adds	r3, #7
    373e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3740:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3744:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3748:	f817 b00a 	ldrb.w	fp, [r7, sl]
    374c:	f838 901a 	ldrh.w	r9, [r8, sl, lsl #1]
    3750:	fb0b 9903 	mla	r9, fp, r3, r9
    3754:	fa1f f989 	uxth.w	r9, r9

    if( theta & 0x8000 ) y = -y;
    3758:	0433      	lsls	r3, r6, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    375a:	6813      	ldr	r3, [r2, #0]
    375c:	9304      	str	r3, [sp, #16]
    375e:	bf48      	it	mi
    3760:	f1c9 0900 	rsbmi	r9, r9, #0
	return ret;
    3764:	9b04      	ldr	r3, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3766:	6812      	ldr	r2, [r2, #0]
    3768:	9205      	str	r2, [sp, #20]
    376a:	fa0f f989 	sxth.w	r9, r9
    376e:	f5a9 4200 	sub.w	r2, r9, #32768	; 0x8000

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3772:	f8b4 62dc 	ldrh.w	r6, [r4, #732]	; 0x2dc
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3776:	f8b4 b2da 	ldrh.w	fp, [r4, #730]	; 0x2da
    377a:	b292      	uxth	r2, r2
    377c:	f240 49b1 	movw	r9, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    3780:	fa1f fa83 	uxth.w	sl, r3
    3784:	fb09 f302 	mul.w	r3, r9, r2
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3788:	4a75      	ldr	r2, [pc, #468]	; (3960 <colorwave(LEDStruct&)+0x370>)
	return ret;
    378a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    378e:	f8a4 a2ec 	strh.w	sl, [r4, #748]	; 0x2ec
	leds.deltams = leds.ms - leds.sLastMillis;
    3792:	ebc6 060a 	rsb	r6, r6, sl
    3796:	b2b6      	uxth	r6, r6
    3798:	fb02 f909 	mul.w	r9, r2, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    379c:	0c1b      	lsrs	r3, r3, #16
    379e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    37a2:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    37a6:	fb16 be0e 	smlabb	lr, r6, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    37aa:	b29a      	uxth	r2, r3
    37ac:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    37b0:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    37b4:	f8a4 22ea 	strh.w	r2, [r4, #746]	; 0x2ea

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    37b8:	f8a4 62ee 	strh.w	r6, [r4, #750]	; 0x2ee
	leds.sLastMillis = leds.ms;
    37bc:	f8a4 a2dc 	strh.w	sl, [r4, #732]	; 0x2dc
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    37c0:	f8a4 e2da 	strh.w	lr, [r4, #730]	; 0x2da
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    37c4:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    37c8:	d003      	beq.n	37d2 <colorwave(LEDStruct&)+0x1e2>
    37ca:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    37ce:	3307      	adds	r3, #7
    37d0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    37d2:	ea4f 2b13 	mov.w	fp, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    37d6:	f3c3 0a46 	ubfx	sl, r3, #1, #7
    37da:	f817 300b 	ldrb.w	r3, [r7, fp]
    37de:	f838 b01b 	ldrh.w	fp, [r8, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    37e2:	f8a4 e2f0 	strh.w	lr, [r4, #752]	; 0x2f0
    37e6:	fb03 b30a 	mla	r3, r3, sl, fp
    37ea:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    37ec:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    37f0:	bf18      	it	ne
    37f2:	425b      	negne	r3, r3
    37f4:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    37f6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    37fa:	b29b      	uxth	r3, r3
    37fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3800:	0c1b      	lsrs	r3, r3, #16
    3802:	3305      	adds	r3, #5
    3804:	b29b      	uxth	r3, r3
    3806:	fb06 c303 	mla	r3, r6, r3, ip
    380a:	f8a4 32de 	strh.w	r3, [r4, #734]	; 0x2de
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    380e:	2d00      	cmp	r5, #0
    3810:	f000 8089 	beq.w	3926 <colorwave(LEDStruct&)+0x336>
    3814:	4613      	mov	r3, r2
    3816:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    381a:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    381c:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3820:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    3822:	4463      	add	r3, ip
    3824:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    3826:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    382a:	448e      	add	lr, r1
    382c:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    3830:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    3834:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    3838:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    383a:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    383e:	bf08      	it	eq
    3840:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3842:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    3846:	f884 b2e2 	strb.w	fp, [r4, #738]	; 0x2e2
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    384a:	f8a4 32e8 	strh.w	r3, [r4, #744]	; 0x2e8
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    384e:	f8a4 c2f2 	strh.w	ip, [r4, #754]	; 0x2f2
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    3852:	f884 22e2 	strb.w	r2, [r4, #738]	; 0x2e2
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    3856:	f8a4 e2f0 	strh.w	lr, [r4, #752]	; 0x2f0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    385a:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    385e:	d003      	beq.n	3868 <colorwave(LEDStruct&)+0x278>
    3860:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3864:	3107      	adds	r1, #7
    3866:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3868:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    386c:	f3c1 0346 	ubfx	r3, r1, #1, #7
    3870:	f817 b00c 	ldrb.w	fp, [r7, ip]
    3874:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    3878:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    387c:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3880:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3882:	bf18      	it	ne
    3884:	4249      	negne	r1, r1
    3886:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3888:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    388c:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    388e:	fb01 fe01 	mul.w	lr, r1, r1
    3892:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3896:	fb0e f300 	mul.w	r3, lr, r0
    389a:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    389e:	43c0      	mvns	r0, r0
    38a0:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    38a4:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    38a8:	b2db      	uxtb	r3, r3
    38aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    38ae:	f8a4 12f4 	strh.w	r1, [r4, #756]	; 0x2f4

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    38b2:	f8a4 e2f6 	strh.w	lr, [r4, #758]	; 0x2f6
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    38b6:	f884 32e4 	strb.w	r3, [r4, #740]	; 0x2e4

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    38ba:	4651      	mov	r1, sl
    38bc:	f8cd 9000 	str.w	r9, [sp]
    38c0:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    38c2:	f884 22e5 	strb.w	r2, [r4, #741]	; 0x2e5

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    38c6:	f002 fb13 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    38ca:	f8b4 32fa 	ldrh.w	r3, [r4, #762]	; 0x2fa
    38ce:	3b01      	subs	r3, #1
    38d0:	1b9b      	subs	r3, r3, r6
    38d2:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    38d4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    38d8:	f8a4 32f8 	strh.w	r3, [r4, #760]	; 0x2f8

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    38dc:	4420      	add	r0, r4
    38de:	2280      	movs	r2, #128	; 0x80
    38e0:	a903      	add	r1, sp, #12
    38e2:	3d01      	subs	r5, #1
    38e4:	f002 faa6 	bl	5e34 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    38e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    38ec:	d00a      	beq.n	3904 <colorwave(LEDStruct&)+0x314>
    38ee:	f8b4 c2e8 	ldrh.w	ip, [r4, #744]	; 0x2e8
    38f2:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
    38f6:	f8b4 e2f0 	ldrh.w	lr, [r4, #752]	; 0x2f0
    38fa:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
    38fe:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    3902:	e78e      	b.n	3822 <colorwave(LEDStruct&)+0x232>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3904:	3601      	adds	r6, #1
    3906:	f8b4 32fa 	ldrh.w	r3, [r4, #762]	; 0x2fa
    390a:	b2b6      	uxth	r6, r6
    390c:	42b3      	cmp	r3, r6
    390e:	d90a      	bls.n	3926 <colorwave(LEDStruct&)+0x336>
    3910:	f8b4 c2e8 	ldrh.w	ip, [r4, #744]	; 0x2e8
    3914:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
    3918:	f8b4 e2f0 	ldrh.w	lr, [r4, #752]	; 0x2f0
    391c:	f8b4 12e6 	ldrh.w	r1, [r4, #742]	; 0x2e6
    3920:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
    3924:	e77c      	b.n	3820 <colorwave(LEDStruct&)+0x230>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    3926:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    392a:	b983      	cbnz	r3, 394e <colorwave(LEDStruct&)+0x35e>
    392c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3930:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3932:	781a      	ldrb	r2, [r3, #0]
    3934:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    3938:	785a      	ldrb	r2, [r3, #1]
    393a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    393e:	789a      	ldrb	r2, [r3, #2]
    3940:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    3944:	3303      	adds	r3, #3
    3946:	4299      	cmp	r1, r3
    3948:	f1a4 0403 	sub.w	r4, r4, #3
    394c:	d1f1      	bne.n	3932 <colorwave(LEDStruct&)+0x342>
}
    394e:	b00b      	add	sp, #44	; 0x2c
    3950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3954:	1fff9d48 	.word	0x1fff9d48
    3958:	000174f8 	.word	0x000174f8
    395c:	00009ce4 	.word	0x00009ce4
    3960:	0001b580 	.word	0x0001b580
    3964:	00009464 	.word	0x00009464
    3968:	4810      	ldr	r0, [pc, #64]	; (39ac <colorwave(LEDStruct&)+0x3bc>)
    396a:	8803      	ldrh	r3, [r0, #0]
    396c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3970:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3974:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3978:	3319      	adds	r3, #25
    397a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    397c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3980:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3982:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    3986:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3988:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    398a:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    398e:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    3992:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
	leds.mode_type = COLORWAVE;
    3996:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    399a:	b11a      	cbz	r2, 39a4 <colorwave(LEDStruct&)+0x3b4>
    399c:	2596      	movs	r5, #150	; 0x96
    399e:	f8a4 52fa 	strh.w	r5, [r4, #762]	; 0x2fa
    39a2:	e630      	b.n	3606 <colorwave(LEDStruct&)+0x16>
	else					 { leds.strip_range = ONE_SIDE; }
    39a4:	254b      	movs	r5, #75	; 0x4b
    39a6:	f8a4 52fa 	strh.w	r5, [r4, #762]	; 0x2fa
    39aa:	e62c      	b.n	3606 <colorwave(LEDStruct&)+0x16>
    39ac:	1fff8746 	.word	0x1fff8746

000039b0 <confetti(LEDStruct&)>:

	leds.confetti_fade = cf;
}

void confetti(LEDStruct& leds)
{
    39b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    39b2:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

	leds.confetti_fade = cf;
}

void confetti(LEDStruct& leds)
{
    39b6:	b085      	sub	sp, #20
    39b8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    39ba:	2b00      	cmp	r3, #0
    39bc:	d054      	beq.n	3a68 <confetti(LEDStruct&)+0xb8>
    39be:	f890 22fc 	ldrb.w	r2, [r0, #764]	; 0x2fc
    39c2:	4e44      	ldr	r6, [pc, #272]	; (3ad4 <confetti(LEDStruct&)+0x124>)

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    39c4:	4620      	mov	r0, r4
    39c6:	2196      	movs	r1, #150	; 0x96
    39c8:	f002 fa32 	bl	5e30 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39cc:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    39ce:	f8b4 52fa 	ldrh.w	r5, [r4, #762]	; 0x2fa
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39d2:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    39d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    39da:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    39de:	3319      	adds	r3, #25
    39e0:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39e2:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    39e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    39ea:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    39ee:	3719      	adds	r7, #25
    39f0:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    39f2:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    39f6:	fb03 f305 	mul.w	r3, r3, r5
    39fa:	2101      	movs	r1, #1
    39fc:	0c1d      	lsrs	r5, r3, #16
    39fe:	9100      	str	r1, [sp, #0]
    3a00:	a803      	add	r0, sp, #12
    3a02:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    3a06:	b2d2      	uxtb	r2, r2
    3a08:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a0a:	8037      	strh	r7, [r6, #0]
    3a0c:	f002 fa70 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a10:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3a14:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3a16:	5ce2      	ldrb	r2, [r4, r3]
    3a18:	f89d 000c 	ldrb.w	r0, [sp, #12]
    3a1c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a20:	54e2      	strb	r2, [r4, r3]
    3a22:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3a26:	784a      	ldrb	r2, [r1, #1]
    3a28:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a2c:	704a      	strb	r2, [r1, #1]
    3a2e:	788b      	ldrb	r3, [r1, #2]
    3a30:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3a34:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a38:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    3a3a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3a3e:	b98b      	cbnz	r3, 3a64 <confetti(LEDStruct&)+0xb4>
    3a40:	4620      	mov	r0, r4
    3a42:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3a46:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a48:	7802      	ldrb	r2, [r0, #0]
    3a4a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3a4e:	7842      	ldrb	r2, [r0, #1]
    3a50:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3a54:	7882      	ldrb	r2, [r0, #2]
    3a56:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3a5a:	3003      	adds	r0, #3
    3a5c:	4288      	cmp	r0, r1
    3a5e:	f1a3 0303 	sub.w	r3, r3, #3
    3a62:	d1f1      	bne.n	3a48 <confetti(LEDStruct&)+0x98>
}
    3a64:	b005      	add	sp, #20
    3a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a68:	4e1a      	ldr	r6, [pc, #104]	; (3ad4 <confetti(LEDStruct&)+0x124>)
    3a6a:	8833      	ldrh	r3, [r6, #0]
    3a6c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a74:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a78:	3319      	adds	r3, #25
    3a7a:	b29b      	uxth	r3, r3
    3a7c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3a80:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3a84:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3a88:	3119      	adds	r1, #25
    3a8a:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a8c:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a90:	b2d2      	uxtb	r2, r2
    3a92:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    3a96:	eb02 0240 	add.w	r2, r2, r0, lsl #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a9a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a9e:	11d2      	asrs	r2, r2, #7
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    3aa0:	2001      	movs	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3aa2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3aa6:	320a      	adds	r2, #10
	leds.mode_type = CONFETTI;
    3aa8:	2511      	movs	r5, #17
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3aaa:	8031      	strh	r1, [r6, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    3aac:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3ab0:	b2d2      	uxtb	r2, r2
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    3ab2:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    3ab6:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    3aba:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3abe:	b92b      	cbnz	r3, 3acc <confetti(LEDStruct&)+0x11c>
	else { leds.strip_range = ONE_SIDE; }
    3ac0:	234b      	movs	r3, #75	; 0x4b
    3ac2:	f8a4 32fa 	strh.w	r3, [r4, #762]	; 0x2fa

	leds.confetti_fade = cf;
    3ac6:	f884 22fc 	strb.w	r2, [r4, #764]	; 0x2fc
    3aca:	e77b      	b.n	39c4 <confetti(LEDStruct&)+0x14>
void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3acc:	2396      	movs	r3, #150	; 0x96
    3ace:	f8a4 32fa 	strh.w	r3, [r4, #762]	; 0x2fa
    3ad2:	e7f8      	b.n	3ac6 <confetti(LEDStruct&)+0x116>
    3ad4:	1fff8746 	.word	0x1fff8746

00003ad8 <one_sin(LEDStruct&)>:

}



void one_sin(LEDStruct& leds) {
    3ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    3adc:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

}



void one_sin(LEDStruct& leds) {
    3ae0:	b085      	sub	sp, #20
	if (!leds.mode_initialized) { one_sin_init(leds); }
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	f000 8090 	beq.w	3c08 <one_sin(LEDStruct&)+0x130>
    3ae8:	f890 4305 	ldrb.w	r4, [r0, #773]	; 0x305
    3aec:	f890 32fd 	ldrb.w	r3, [r0, #765]	; 0x2fd
    3af0:	f890 2306 	ldrb.w	r2, [r0, #774]	; 0x306
    3af4:	f890 12fe 	ldrb.w	r1, [r0, #766]	; 0x2fe
    3af8:	f8b0 52fa 	ldrh.w	r5, [r0, #762]	; 0x2fa

	leds.sin_start += leds.sin_inc;
    3afc:	4423      	add	r3, r4
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    3afe:	f890 41c5 	ldrb.w	r4, [r0, #453]	; 0x1c5


void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }

	leds.sin_start += leds.sin_inc;
    3b02:	b2db      	uxtb	r3, r3
    3b04:	f880 3305 	strb.w	r3, [r0, #773]	; 0x305
	leds.sin_index = leds.sin_start;
    3b08:	f880 3304 	strb.w	r3, [r0, #772]	; 0x304
	if (leds.this_dir) {
    3b0c:	2c00      	cmp	r4, #0
    3b0e:	d077      	beq.n	3c00 <one_sin(LEDStruct&)+0x128>
		leds.sin_phase += leds.sin_speed;
    3b10:	440a      	add	r2, r1
    3b12:	f880 2306 	strb.w	r2, [r0, #774]	; 0x306
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    3b16:	2d00      	cmp	r5, #0
    3b18:	d06f      	beq.n	3bfa <one_sin(LEDStruct&)+0x122>
    3b1a:	4604      	mov	r4, r0
    3b1c:	f200 19c7 	addw	r9, r0, #455	; 0x1c7
    3b20:	4605      	mov	r5, r0
    3b22:	1c47      	adds	r7, r0, #1
    3b24:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    3b26:	f04f 08ff 	mov.w	r8, #255	; 0xff
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    3b2a:	f894 2306 	ldrb.w	r2, [r4, #774]	; 0x306
    3b2e:	f894 3301 	ldrb.w	r3, [r4, #769]	; 0x301
    3b32:	f894 b2ff 	ldrb.w	fp, [r4, #767]	; 0x2ff
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    3b36:	f894 e303 	ldrb.w	lr, [r4, #771]	; 0x303
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b3a:	f88d e00e 	strb.w	lr, [sp, #14]
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    3b3e:	fa5f fa86 	uxtb.w	sl, r6
    3b42:	fb03 230a 	mla	r3, r3, sl, r2
    3b46:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    3b48:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    3b4a:	bf44      	itt	mi
    3b4c:	43db      	mvnmi	r3, r3
    3b4e:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3b50:	005b      	lsls	r3, r3, #1
    3b52:	b2db      	uxtb	r3, r3
    3b54:	1c5a      	adds	r2, r3, #1
    3b56:	fb02 f303 	mul.w	r3, r2, r3
    3b5a:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    3b5c:	fb03 f202 	mul.w	r2, r3, r2
    3b60:	1212      	asrs	r2, r2, #8
    3b62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b66:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    3b6a:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    3b6c:	05da      	lsls	r2, r3, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    3b6e:	bf54      	ite	pl
    3b70:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    3b72:	23ff      	movmi	r3, #255	; 0xff
    3b74:	f894 2302 	ldrb.w	r2, [r4, #770]	; 0x302
    3b78:	f88d 200c 	strb.w	r2, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b7c:	4629      	mov	r1, r5
    3b7e:	a803      	add	r0, sp, #12
    3b80:	459b      	cmp	fp, r3
    3b82:	bf34      	ite	cc
    3b84:	f04f 0bff 	movcc.w	fp, #255	; 0xff
    3b88:	f04f 0b00 	movcs.w	fp, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    3b8c:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b90:	f002 fbaa 	bl	62e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    3b94:	f894 3304 	ldrb.w	r3, [r4, #772]	; 0x304
    3b98:	f894 22fd 	ldrb.w	r2, [r4, #765]	; 0x2fd
    3b9c:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3ba0:	9100      	str	r1, [sp, #0]
    3ba2:	fb02 320a 	mla	r2, r2, sl, r3
    3ba6:	b2d2      	uxtb	r2, r2
    3ba8:	465b      	mov	r3, fp
    3baa:	4649      	mov	r1, r9
    3bac:	a803      	add	r0, sp, #12
    3bae:	f002 f99f 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3bb2:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    3bb6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    3bba:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3bbe:	f807 3c01 	strb.w	r3, [r7, #-1]
    3bc2:	786a      	ldrb	r2, [r5, #1]
    3bc4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3bc8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3bcc:	706a      	strb	r2, [r5, #1]
    3bce:	78ab      	ldrb	r3, [r5, #2]
    3bd0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3bd4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3bd8:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    3bda:	f894 1304 	ldrb.w	r1, [r4, #772]	; 0x304
    3bde:	f894 3300 	ldrb.w	r3, [r4, #768]	; 0x300
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    3be2:	f8b4 22fa 	ldrh.w	r2, [r4, #762]	; 0x2fa
    3be6:	3601      	adds	r6, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    3be8:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    3bea:	42b2      	cmp	r2, r6
    3bec:	f105 0503 	add.w	r5, r5, #3
    3bf0:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    3bf4:	f884 3304 	strb.w	r3, [r4, #772]	; 0x304
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    3bf8:	dc97      	bgt.n	3b2a <one_sin(LEDStruct&)+0x52>
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    3bfa:	b005      	add	sp, #20
    3bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    3c00:	1a52      	subs	r2, r2, r1
    3c02:	f880 2306 	strb.w	r2, [r0, #774]	; 0x306
    3c06:	e786      	b.n	3b16 <one_sin(LEDStruct&)+0x3e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c08:	4f57      	ldr	r7, [pc, #348]	; (3d68 <one_sin(LEDStruct&)+0x290>)
    3c0a:	883b      	ldrh	r3, [r7, #0]
    3c0c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    3c10:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3c14:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3c18:	3519      	adds	r5, #25
    3c1a:	b2ad      	uxth	r5, r5
    3c1c:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3c20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3c24:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c28:	3319      	adds	r3, #25
    3c2a:	b29b      	uxth	r3, r3
    3c2c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3c30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3c34:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3c38:	3119      	adds	r1, #25
    3c3a:	b289      	uxth	r1, r1
    3c3c:	eb01 2441 	add.w	r4, r1, r1, lsl #9
    3c40:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    3c44:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    3c48:	3419      	adds	r4, #25
    3c4a:	b2a4      	uxth	r4, r4
    3c4c:	eb04 2c44 	add.w	ip, r4, r4, lsl #9
    3c50:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    3c54:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3c58:	f10c 0c19 	add.w	ip, ip, #25
    3c5c:	fa1f fc8c 	uxth.w	ip, ip
    3c60:	eb0c 224c 	add.w	r2, ip, ip, lsl #9
    3c64:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    3c68:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c6c:	3219      	adds	r2, #25
    3c6e:	b292      	uxth	r2, r2
    3c70:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3c74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3c78:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3c7c:	3619      	adds	r6, #25
    3c7e:	b2b6      	uxth	r6, r6
    3c80:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    3c84:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    3c88:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3c8c:	f10e 0e19 	add.w	lr, lr, #25
    3c90:	fa1f fe8e 	uxth.w	lr, lr
    3c94:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    3c98:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    3c9c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ca0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ca4:	f108 0819 	add.w	r8, r8, #25
    3ca8:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cac:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cae:	eb04 2414 	add.w	r4, r4, r4, lsr #8
    3cb2:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3cba:	b2e4      	uxtb	r4, r4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cbc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3cc0:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cc4:	121b      	asrs	r3, r3, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cc6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cca:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cce:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cd2:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cd4:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cd8:	fa5f f989 	uxtb.w	r9, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cdc:	f8a7 8000 	strh.w	r8, [r7]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3ce0:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    3ce4:	2701      	movs	r7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3ce6:	3301      	adds	r3, #1
    3ce8:	f3c1 1181 	ubfx	r1, r1, #6, #2
    3cec:	f3c4 1407 	ubfx	r4, r4, #4, #8
    3cf0:	f3cc 1c81 	ubfx	ip, ip, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cf4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cf8:	f3c6 1642 	ubfx	r6, r6, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cfc:	eb09 0989 	add.w	r9, r9, r9, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d00:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.mode_type = ONE_SIN;
    3d04:	f04f 0812 	mov.w	r8, #18
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    3d08:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3d0c:	b2db      	uxtb	r3, r3
    3d0e:	3101      	adds	r1, #1
    3d10:	f084 0480 	eor.w	r4, r4, #128	; 0x80
    3d14:	f10c 0c01 	add.w	ip, ip, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3d18:	f3c2 2207 	ubfx	r2, r2, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3d1c:	3601      	adds	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3d1e:	f3c9 19c7 	ubfx	r9, r9, #7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d22:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    3d26:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    3d2a:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    3d2e:	f880 822c 	strb.w	r8, [r0, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3d32:	b9a5      	cbnz	r5, 3d5e <one_sin(LEDStruct&)+0x286>
	else { leds.strip_range = ONE_SIDE; }
    3d34:	254b      	movs	r5, #75	; 0x4b
    3d36:	f8a0 52fa 	strh.w	r5, [r0, #762]	; 0x2fa

	leds.sin_inc		= si;
	leds.sin_speed		= ss;
	leds.sin_cutoff		= sc;
    3d3a:	f880 42ff 	strb.w	r4, [r0, #767]	; 0x2ff
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    3d3e:	f880 32fd 	strb.w	r3, [r0, #765]	; 0x2fd
	leds.sin_speed		= ss;
    3d42:	f880 12fe 	strb.w	r1, [r0, #766]	; 0x2fe
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    3d46:	f880 c300 	strb.w	ip, [r0, #768]	; 0x300
	leds.sin_phase		= sp;
    3d4a:	f880 2306 	strb.w	r2, [r0, #774]	; 0x306
	leds.sin_all_freq	= saf;
    3d4e:	f880 6301 	strb.w	r6, [r0, #769]	; 0x301
	leds.bg_clr			= bc;
    3d52:	f880 e302 	strb.w	lr, [r0, #770]	; 0x302
	leds.bg_bri			= bb;
    3d56:	f880 9303 	strb.w	r9, [r0, #771]	; 0x303
    3d5a:	2400      	movs	r4, #0
    3d5c:	e6ce      	b.n	3afc <one_sin(LEDStruct&)+0x24>
void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3d5e:	2596      	movs	r5, #150	; 0x96
    3d60:	f8a0 52fa 	strh.w	r5, [r0, #762]	; 0x2fa
    3d64:	e7e9      	b.n	3d3a <one_sin(LEDStruct&)+0x262>
    3d66:	bf00      	nop
    3d68:	1fff8746 	.word	0x1fff8746

00003d6c <pride(LEDStruct&)>:
	else { leds.strip_range = ONE_SIDE; }
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    3d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    3d70:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	else { leds.strip_range = ONE_SIDE; }
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    3d74:	b08d      	sub	sp, #52	; 0x34
	if (!leds.mode_initialized) { pride_init(leds); }
    3d76:	2b00      	cmp	r3, #0
    3d78:	f000 81b6 	beq.w	40e8 <pride(LEDStruct&)+0x37c>
    3d7c:	f8b0 32fa 	ldrh.w	r3, [r0, #762]	; 0x2fa
    3d80:	9301      	str	r3, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d82:	49d4      	ldr	r1, [pc, #848]	; (40d4 <pride(LEDStruct&)+0x368>)
    3d84:	680b      	ldr	r3, [r1, #0]
    3d86:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    3d88:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3d8a:	f645 7328 	movw	r3, #24360	; 0x5f28
    3d8e:	fb03 f404 	mul.w	r4, r3, r4
    3d92:	0c24      	lsrs	r4, r4, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d94:	0465      	lsls	r5, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d96:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d9a:	d503      	bpl.n	3da4 <pride(LEDStruct&)+0x38>
    3d9c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3da0:	3307      	adds	r3, #7
    3da2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3da4:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    3da6:	4ecc      	ldr	r6, [pc, #816]	; (40d8 <pride(LEDStruct&)+0x36c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3da8:	4fcc      	ldr	r7, [pc, #816]	; (40dc <pride(LEDStruct&)+0x370>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3daa:	f816 e002 	ldrb.w	lr, [r6, r2]
    3dae:	f837 5012 	ldrh.w	r5, [r7, r2, lsl #1]
    3db2:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3db6:	fb0e 5302 	mla	r3, lr, r2, r5

    if( theta & 0x8000 ) y = -y;
    3dba:	0424      	lsls	r4, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3dbc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3dbe:	bf48      	it	mi
    3dc0:	425b      	negmi	r3, r3
    3dc2:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dc4:	680a      	ldr	r2, [r1, #0]
    3dc6:	920a      	str	r2, [sp, #40]	; 0x28

	leds.sat8 = beatsin88(87, 220, 250);
    3dc8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3dcc:	b29b      	uxth	r3, r3
    3dce:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
	return ret;
    3dd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3dd4:	4bc2      	ldr	r3, [pc, #776]	; (40e0 <pride(LEDStruct&)+0x374>)
    3dd6:	0c24      	lsrs	r4, r4, #16
    3dd8:	fb03 f505 	mul.w	r5, r3, r5
    3ddc:	0c2d      	lsrs	r5, r5, #16
    3dde:	34dc      	adds	r4, #220	; 0xdc
    3de0:	b2e4      	uxtb	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3de2:	046a      	lsls	r2, r5, #17
    3de4:	f880 42e3 	strb.w	r4, [r0, #739]	; 0x2e3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3de8:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3dec:	d503      	bpl.n	3df6 <pride(LEDStruct&)+0x8a>
    3dee:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3df2:	3307      	adds	r3, #7
    3df4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3df6:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3dfa:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3dfe:	f816 c00e 	ldrb.w	ip, [r6, lr]
    3e02:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    3e06:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    3e0a:	042d      	lsls	r5, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e0c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3e0e:	bf48      	it	mi
    3e10:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e12:	680a      	ldr	r2, [r1, #0]
    3e14:	9209      	str	r2, [sp, #36]	; 0x24
    3e16:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    3e18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3e1c:	b29b      	uxth	r3, r3
	return ret;
    3e1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3e20:	f64d 6208 	movw	r2, #56840	; 0xde08
    3e24:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    3e28:	fb02 fe05 	mul.w	lr, r2, r5
    3e2c:	0c1b      	lsrs	r3, r3, #16
    3e2e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    3e32:	3360      	adds	r3, #96	; 0x60
    3e34:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e36:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    3e3a:	f880 32e0 	strb.w	r3, [r0, #736]	; 0x2e0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e3e:	f3ce 02ca 	ubfx	r2, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e42:	d003      	beq.n	3e4c <pride(LEDStruct&)+0xe0>
    3e44:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e48:	3207      	adds	r2, #7
    3e4a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e4c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e50:	f3c2 0546 	ubfx	r5, r2, #1, #7
    3e54:	f816 800c 	ldrb.w	r8, [r6, ip]
    3e58:	f837 201c 	ldrh.w	r2, [r7, ip, lsl #1]
    3e5c:	fb08 2205 	mla	r2, r8, r5, r2
    3e60:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3e62:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    3e66:	bf18      	it	ne
    3e68:	4252      	negne	r2, r2
    3e6a:	b212      	sxth	r2, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e6c:	680d      	ldr	r5, [r1, #0]
    3e6e:	9508      	str	r5, [sp, #32]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3e70:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    3e74:	b292      	uxth	r2, r2
    3e76:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
	return ret;
    3e7a:	f8dd c020 	ldr.w	ip, [sp, #32]
    3e7e:	eb02 2205 	add.w	r2, r2, r5, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3e82:	f24a 05c8 	movw	r5, #41160	; 0xa0c8
    3e86:	fb05 fc0c 	mul.w	ip, r5, ip
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3e8a:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3e8c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3e90:	f502 52c8 	add.w	r2, r2, #6400	; 0x1900
    3e94:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e96:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    3e9a:	f8a0 22e6 	strh.w	r2, [r0, #742]	; 0x2e6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e9e:	f3cc 05ca 	ubfx	r5, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ea2:	d003      	beq.n	3eac <pride(LEDStruct&)+0x140>
    3ea4:	f5c5 65ff 	rsb	r5, r5, #2040	; 0x7f8
    3ea8:	3507      	adds	r5, #7
    3eaa:	b2ad      	uxth	r5, r5

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3eac:	ea4f 2815 	mov.w	r8, r5, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3eb0:	f3c5 0e46 	ubfx	lr, r5, #1, #7
    3eb4:	f816 9008 	ldrb.w	r9, [r6, r8]
    3eb8:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    3ebc:	fb09 550e 	mla	r5, r9, lr, r5

    if( theta & 0x8000 ) y = -y;
    3ec0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ec4:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3ec6:	bf18      	it	ne
    3ec8:	426d      	negne	r5, r5
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3eca:	f8d1 e000 	ldr.w	lr, [r1]
    3ece:	f8cd e01c 	str.w	lr, [sp, #28]
    3ed2:	b22d      	sxth	r5, r5
    3ed4:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    3ed8:	f04f 0e26 	mov.w	lr, #38	; 0x26
    3edc:	b2ad      	uxth	r5, r5
	return ret;
    3ede:	f8dd 801c 	ldr.w	r8, [sp, #28]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    3ee2:	f8b0 c2de 	ldrh.w	ip, [r0, #734]	; 0x2de
    3ee6:	f8a0 c2e8 	strh.w	ip, [r0, #744]	; 0x2e8
    3eea:	fb0e f505 	mul.w	r5, lr, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3eee:	f647 3e98 	movw	lr, #31640	; 0x7b98
    3ef2:	fb0e f808 	mul.w	r8, lr, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3ef6:	0c2d      	lsrs	r5, r5, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3ef8:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3efc:	3517      	adds	r5, #23
    3efe:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f00:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (!leds.mode_initialized) { pride_init(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    3f04:	f880 52e1 	strb.w	r5, [r0, #737]	; 0x2e1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f08:	f3c8 0eca 	ubfx	lr, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f0c:	d005      	beq.n	3f1a <pride(LEDStruct&)+0x1ae>
    3f0e:	f5ce 6eff 	rsb	lr, lr, #2040	; 0x7f8
    3f12:	f10e 0e07 	add.w	lr, lr, #7
    3f16:	fa1f fe8e 	uxth.w	lr, lr

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f1a:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f1e:	f3ce 0946 	ubfx	r9, lr, #1, #7
    3f22:	f816 e00a 	ldrb.w	lr, [r6, sl]
    3f26:	f837 a01a 	ldrh.w	sl, [r7, sl, lsl #1]
    3f2a:	fb0e ae09 	mla	lr, lr, r9, sl

    if( theta & 0x8000 ) y = -y;
    3f2e:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f32:	fa1f fe8e 	uxth.w	lr, lr
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f36:	f8d1 8000 	ldr.w	r8, [r1]
    3f3a:	f8cd 8014 	str.w	r8, [sp, #20]

    if( theta & 0x8000 ) y = -y;
    3f3e:	bf18      	it	ne
    3f40:	f1ce 0e00 	rsbne	lr, lr, #0
	return ret;
    3f44:	f8dd a014 	ldr.w	sl, [sp, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f48:	6809      	ldr	r1, [r1, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3f4a:	f8b0 82dc 	ldrh.w	r8, [r0, #732]	; 0x2dc
    3f4e:	9106      	str	r1, [sp, #24]
    3f50:	fa0f fe8e 	sxth.w	lr, lr
    3f54:	f5ae 4b00 	sub.w	fp, lr, #32768	; 0x8000
    3f58:	fa1f fe8b 	uxth.w	lr, fp
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    3f5c:	fa1f fa8a 	uxth.w	sl, sl
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3f60:	4960      	ldr	r1, [pc, #384]	; (40e4 <pride(LEDStruct&)+0x378>)
	return ret;
    3f62:	f8dd 9018 	ldr.w	r9, [sp, #24]
    3f66:	f8a0 a2ec 	strh.w	sl, [r0, #748]	; 0x2ec
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3f6a:	f640 3bb8 	movw	fp, #3000	; 0xbb8
    3f6e:	fb0b fb0e 	mul.w	fp, fp, lr
	leds.deltams = leds.ms - leds.sLastMillis;
    3f72:	ebc8 080a 	rsb	r8, r8, sl
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3f76:	f8b0 e2da 	ldrh.w	lr, [r0, #730]	; 0x2da
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    3f7a:	f8a0 a2dc 	strh.w	sl, [r0, #732]	; 0x2dc

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3f7e:	fa1f f888 	uxth.w	r8, r8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3f82:	fb01 f909 	mul.w	r9, r1, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3f86:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3f8a:	fb18 ee05 	smlabb	lr, r8, r5, lr
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3f8e:	ea4f 4919 	mov.w	r9, r9, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3f92:	f10b 0b01 	add.w	fp, fp, #1
    3f96:	fa1f f18b 	uxth.w	r1, fp
    3f9a:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f9e:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    3fa2:	f8a0 12ea 	strh.w	r1, [r0, #746]	; 0x2ea

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3fa6:	f8a0 82ee 	strh.w	r8, [r0, #750]	; 0x2ee
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3faa:	f8a0 e2da 	strh.w	lr, [r0, #730]	; 0x2da
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3fae:	f3c9 05ca 	ubfx	r5, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3fb2:	d003      	beq.n	3fbc <pride(LEDStruct&)+0x250>
    3fb4:	f5c5 65ff 	rsb	r5, r5, #2040	; 0x7f8
    3fb8:	3507      	adds	r5, #7
    3fba:	b2ad      	uxth	r5, r5

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3fbc:	ea4f 2a15 	mov.w	sl, r5, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3fc0:	f3c5 0546 	ubfx	r5, r5, #1, #7
    3fc4:	f816 b00a 	ldrb.w	fp, [r6, sl]
    3fc8:	f837 a01a 	ldrh.w	sl, [r7, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    3fcc:	f8a0 e2f0 	strh.w	lr, [r0, #752]	; 0x2f0
    3fd0:	fb0b a505 	mla	r5, fp, r5, sl
    3fd4:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3fd6:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    3fda:	bf18      	it	ne
    3fdc:	426d      	negne	r5, r5
    3fde:	b22d      	sxth	r5, r5

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    3fe0:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    3fe4:	b2ad      	uxth	r5, r5
    3fe6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3fea:	0c2d      	lsrs	r5, r5, #16
    3fec:	3505      	adds	r5, #5
    3fee:	b2ad      	uxth	r5, r5
    3ff0:	fb08 c805 	mla	r8, r8, r5, ip
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3ff4:	9d01      	ldr	r5, [sp, #4]

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    3ff6:	f8a0 82de 	strh.w	r8, [r0, #734]	; 0x2de
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3ffa:	2d00      	cmp	r5, #0
    3ffc:	d066      	beq.n	40cc <pride(LEDStruct&)+0x360>
    3ffe:	4605      	mov	r5, r0
    4000:	f04f 0800 	mov.w	r8, #0
    4004:	4670      	mov	r0, lr
    4006:	e00b      	b.n	4020 <pride(LEDStruct&)+0x2b4>
    4008:	f8b5 c2e8 	ldrh.w	ip, [r5, #744]	; 0x2e8
    400c:	f8b5 12ea 	ldrh.w	r1, [r5, #746]	; 0x2ea
    4010:	f8b5 02f0 	ldrh.w	r0, [r5, #752]	; 0x2f0
    4014:	f8b5 22e6 	ldrh.w	r2, [r5, #742]	; 0x2e6
    4018:	f895 32e0 	ldrb.w	r3, [r5, #736]	; 0x2e0
    401c:	f895 42e3 	ldrb.w	r4, [r5, #739]	; 0x2e3
		leds.hue16 += leds.hueinc16;
    4020:	4461      	add	r1, ip
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    4022:	4410      	add	r0, r2
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    4024:	b289      	uxth	r1, r1
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    4026:	b280      	uxth	r0, r0
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    4028:	ea4f 2c11 	mov.w	ip, r1, lsr #8
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    402c:	f8a5 12e8 	strh.w	r1, [r5, #744]	; 0x2e8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4030:	0441      	lsls	r1, r0, #17
		leds.hue8 = leds.hue16 / 256;
    4032:	f885 c2e2 	strb.w	ip, [r5, #738]	; 0x2e2

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    4036:	f8a5 02f0 	strh.w	r0, [r5, #752]	; 0x2f0
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    403a:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    403e:	d503      	bpl.n	4048 <pride(LEDStruct&)+0x2dc>
    4040:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    4044:	3207      	adds	r2, #7
    4046:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4048:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    404c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    4050:	f816 900e 	ldrb.w	r9, [r6, lr]
    4054:	f837 201e 	ldrh.w	r2, [r7, lr, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4058:	f88d c010 	strb.w	ip, [sp, #16]
    405c:	fb09 2201 	mla	r2, r9, r1, r2
    4060:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    4062:	0401      	lsls	r1, r0, #16
    4064:	bf48      	it	mi
    4066:	4252      	negmi	r2, r2
    4068:	b212      	sxth	r2, r2
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    406a:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    406e:	b292      	uxth	r2, r2

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    4070:	fb02 f102 	mul.w	r1, r2, r2
    4074:	0c09      	lsrs	r1, r1, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    4076:	fb01 f003 	mul.w	r0, r1, r3
    407a:	43db      	mvns	r3, r3
    407c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    4080:	b2db      	uxtb	r3, r3
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    4082:	f8a5 22f4 	strh.w	r2, [r5, #756]	; 0x2f4

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    4086:	f8a5 12f6 	strh.w	r1, [r5, #758]	; 0x2f6
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    408a:	f885 32e4 	strb.w	r3, [r5, #740]	; 0x2e4
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    408e:	a903      	add	r1, sp, #12
    4090:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4092:	f88d 3012 	strb.w	r3, [sp, #18]
    4096:	f88d 4011 	strb.w	r4, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    409a:	f002 f925 	bl	62e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    409e:	f8b5 32fa 	ldrh.w	r3, [r5, #762]	; 0x2fa
    40a2:	3b01      	subs	r3, #1
    40a4:	ebc8 0303 	rsb	r3, r8, r3
    40a8:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    40aa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    40ae:	f8a5 32f8 	strh.w	r3, [r5, #760]	; 0x2f8
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    40b2:	4428      	add	r0, r5
    40b4:	2240      	movs	r2, #64	; 0x40
    40b6:	a903      	add	r1, sp, #12
    40b8:	f001 febc 	bl	5e34 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    40bc:	f108 0801 	add.w	r8, r8, #1
    40c0:	f8b5 32fa 	ldrh.w	r3, [r5, #762]	; 0x2fa
    40c4:	fa1f f888 	uxth.w	r8, r8
    40c8:	4543      	cmp	r3, r8
    40ca:	d89d      	bhi.n	4008 <pride(LEDStruct&)+0x29c>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
}
    40cc:	b00d      	add	sp, #52	; 0x34
    40ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40d2:	bf00      	nop
    40d4:	1fff9d48 	.word	0x1fff9d48
    40d8:	00009ce4 	.word	0x00009ce4
    40dc:	00009464 	.word	0x00009464
    40e0:	000174f8 	.word	0x000174f8
    40e4:	0001b580 	.word	0x0001b580
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40e8:	4911      	ldr	r1, [pc, #68]	; (4130 <pride(LEDStruct&)+0x3c4>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
	leds.mode_type = PRIDE;
	leds.use_palette = 0;
    40ea:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    40ee:	880b      	ldrh	r3, [r1, #0]
    40f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    40f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    40f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    40fc:	3319      	adds	r3, #25
    40fe:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4100:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4104:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    4108:	2501      	movs	r5, #1
	leds.mode_type = PRIDE;
    410a:	2410      	movs	r4, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    410c:	800b      	strh	r3, [r1, #0]
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    410e:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    4112:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.mode_type = PRIDE;
    4116:	f880 422c 	strb.w	r4, [r0, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    411a:	b122      	cbz	r2, 4126 <pride(LEDStruct&)+0x3ba>
    411c:	2396      	movs	r3, #150	; 0x96
    411e:	f8a0 32fa 	strh.w	r3, [r0, #762]	; 0x2fa
    4122:	9301      	str	r3, [sp, #4]
    4124:	e62d      	b.n	3d82 <pride(LEDStruct&)+0x16>
	else { leds.strip_range = ONE_SIDE; }
    4126:	234b      	movs	r3, #75	; 0x4b
    4128:	f8a0 32fa 	strh.w	r3, [r0, #762]	; 0x2fa
    412c:	9301      	str	r3, [sp, #4]
    412e:	e628      	b.n	3d82 <pride(LEDStruct&)+0x16>
    4130:	1fff8746 	.word	0x1fff8746

00004134 <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    4134:	b570      	push	{r4, r5, r6, lr}
    4136:	4604      	mov	r4, r0
    4138:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    413a:	4d1b      	ldr	r5, [pc, #108]	; (41a8 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    413c:	2002      	movs	r0, #2
    413e:	f002 fc45 	bl	69cc <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4142:	882b      	ldrh	r3, [r5, #0]
    4144:	4418      	add	r0, r3
    4146:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    414a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    414e:	f243 6319 	movw	r3, #13849	; 0x3619
    4152:	4418      	add	r0, r3
    4154:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4156:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    415a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    415e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4162:	b2d2      	uxtb	r2, r2
    4164:	4403      	add	r3, r0
    4166:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    416a:	b29b      	uxth	r3, r3
    416c:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    416e:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    4170:	eb03 2113 	add.w	r1, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4174:	321b      	adds	r2, #27
    4176:	f884 2307 	strb.w	r2, [r4, #775]	; 0x307
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    417a:	f884 1308 	strb.w	r1, [r4, #776]	; 0x308


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    417e:	f884 630a 	strb.w	r6, [r4, #778]	; 0x30a
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    4182:	f884 6309 	strb.w	r6, [r4, #777]	; 0x309
	leds.exploded = false;
    4186:	f884 6310 	strb.w	r6, [r4, #784]	; 0x310
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    418a:	4620      	mov	r0, r4
    418c:	aa01      	add	r2, sp, #4
    418e:	2196      	movs	r1, #150	; 0x96
    4190:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4192:	f88d 6004 	strb.w	r6, [sp, #4]
    4196:	f88d 6005 	strb.w	r6, [sp, #5]
    419a:	f88d 6006 	strb.w	r6, [sp, #6]
    419e:	f001 fd85 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
}
    41a2:	b002      	add	sp, #8
    41a4:	bd70      	pop	{r4, r5, r6, pc}
    41a6:	bf00      	nop
    41a8:	1fff8746 	.word	0x1fff8746

000041ac <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    41ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    41b0:	f890 3310 	ldrb.w	r3, [r0, #784]	; 0x310
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    41b4:	b087      	sub	sp, #28
    41b6:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    41b8:	2b00      	cmp	r3, #0
    41ba:	f000 8089 	beq.w	42d0 <fadeup(LEDStruct&)+0x124>
    41be:	f890 3307 	ldrb.w	r3, [r0, #775]	; 0x307
    41c2:	9303      	str	r3, [sp, #12]
    41c4:	4606      	mov	r6, r0
    41c6:	4618      	mov	r0, r3
    41c8:	4b5d      	ldr	r3, [pc, #372]	; (4340 <fadeup(LEDStruct&)+0x194>)
    41ca:	881b      	ldrh	r3, [r3, #0]
    41cc:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    41d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    41d4:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    41d8:	3419      	adds	r4, #25
    41da:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41dc:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41e0:	b2db      	uxtb	r3, r3
    41e2:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    41e6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    41ea:	ea4f 2929 	mov.w	r9, r9, asr #8
    41ee:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    41f2:	2301      	movs	r3, #1
    41f4:	fa5f f989 	uxtb.w	r9, r9
    41f8:	f886 330a 	strb.w	r3, [r6, #778]	; 0x30a
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    41fc:	f886 9311 	strb.w	r9, [r6, #785]	; 0x311
    4200:	f004 fafa 	bl	87f8 <__aeabi_ui2f>
    4204:	f506 7b44 	add.w	fp, r6, #784	; 0x310
    4208:	f206 5a2c 	addw	sl, r6, #1324	; 0x52c
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    420c:	465b      	mov	r3, fp
    420e:	f506 6880 	add.w	r8, r6, #1024	; 0x400
    4212:	f206 47f3 	addw	r7, r6, #1267	; 0x4f3
    4216:	46d3      	mov	fp, sl
    4218:	9001      	str	r0, [sp, #4]
    421a:	f206 661c 	addw	r6, r6, #1564	; 0x61c
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    421e:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4220:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4222:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4226:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    422a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    422e:	3419      	adds	r4, #25
    4230:	b2a4      	uxth	r4, r4
    4232:	2373      	movs	r3, #115	; 0x73
    4234:	fb03 f004 	mul.w	r0, r3, r4
    4238:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    423a:	9b01      	ldr	r3, [sp, #4]
    423c:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4240:	300a      	adds	r0, #10
    4242:	b280      	uxth	r0, r0
    4244:	f004 fad8 	bl	87f8 <__aeabi_ui2f>
    4248:	493e      	ldr	r1, [pc, #248]	; (4344 <fadeup(LEDStruct&)+0x198>)
    424a:	f004 fbe1 	bl	8a10 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    424e:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4256:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    425a:	3319      	adds	r3, #25
    425c:	b29b      	uxth	r3, r3
    425e:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4262:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4266:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    426a:	3419      	adds	r4, #25
    426c:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    426e:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4272:	b2c9      	uxtb	r1, r1
    4274:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4278:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    427c:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    427e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    4282:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4284:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    4288:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    428c:	b2c8      	uxtb	r0, r1
    428e:	f004 fab3 	bl	87f8 <__aeabi_ui2f>
    4292:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4294:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4296:	4a2c      	ldr	r2, [pc, #176]	; (4348 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4298:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    429c:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    429e:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    42a2:	d8be      	bhi.n	4222 <fadeup(LEDStruct&)+0x76>
    42a4:	9a03      	ldr	r2, [sp, #12]
    42a6:	9e02      	ldr	r6, [sp, #8]
    42a8:	4f25      	ldr	r7, [pc, #148]	; (4340 <fadeup(LEDStruct&)+0x194>)
    42aa:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    42ae:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    42b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    42b6:	18f5      	adds	r5, r6, r3
    42b8:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    42ba:	22ff      	movs	r2, #255	; 0xff
    42bc:	803c      	strh	r4, [r7, #0]
    42be:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    42c0:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    42c2:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    42c4:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    42c6:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    42c8:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    42ca:	b007      	add	sp, #28
    42cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    42d0:	9d02      	ldr	r5, [sp, #8]
    42d2:	f895 3309 	ldrb.w	r3, [r5, #777]	; 0x309
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    42d6:	f895 1307 	ldrb.w	r1, [r5, #775]	; 0x307
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    42da:	f895 2308 	ldrb.w	r2, [r5, #776]	; 0x308
    42de:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    42e2:	3305      	adds	r3, #5
    42e4:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    42e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    42ea:	f885 3309 	strb.w	r3, [r5, #777]	; 0x309
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    42ee:	4429      	add	r1, r5
    42f0:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    42f2:	24ff      	movs	r4, #255	; 0xff
    42f4:	f88d 3016 	strb.w	r3, [sp, #22]
    42f8:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    42fc:	f001 fff4 	bl	62e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4300:	f895 1307 	ldrb.w	r1, [r5, #775]	; 0x307
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4304:	f895 3308 	ldrb.w	r3, [r5, #776]	; 0x308
    4308:	f895 2309 	ldrb.w	r2, [r5, #777]	; 0x309
    430c:	f88d 3014 	strb.w	r3, [sp, #20]
    4310:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    4314:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4318:	a805      	add	r0, sp, #20
    431a:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    431c:	f88d 4015 	strb.w	r4, [sp, #21]
    4320:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4324:	f001 ffe0 	bl	62e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    4328:	f895 3309 	ldrb.w	r3, [r5, #777]	; 0x309
    432c:	2bff      	cmp	r3, #255	; 0xff
    432e:	d1cc      	bne.n	42ca <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    4330:	9a02      	ldr	r2, [sp, #8]
    4332:	2301      	movs	r3, #1
    4334:	f882 3310 	strb.w	r3, [r2, #784]	; 0x310
		}
	}
}
    4338:	b007      	add	sp, #28
    433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    433e:	bf00      	nop
    4340:	1fff8746 	.word	0x1fff8746
    4344:	42c80000 	.word	0x42c80000
    4348:	437f0000 	.word	0x437f0000

0000434c <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4350:	4b65      	ldr	r3, [pc, #404]	; (44e8 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    4352:	4605      	mov	r5, r0
    4354:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4356:	781a      	ldrb	r2, [r3, #0]
    4358:	2196      	movs	r1, #150	; 0x96
    435a:	f001 fd69 	bl	5e30 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    435e:	f895 4311 	ldrb.w	r4, [r5, #785]	; 0x311
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    4362:	2600      	movs	r6, #0
    4364:	f885 6710 	strb.w	r6, [r5, #1808]	; 0x710
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4368:	2c00      	cmp	r4, #0
    436a:	d07e      	beq.n	446a <explosion(LEDStruct&)+0x11e>
    436c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4500 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4370:	f04f 08ff 	mov.w	r8, #255	; 0xff
    4374:	e03b      	b.n	43ee <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4376:	f8d4 1314 	ldr.w	r1, [r4, #788]	; 0x314
    437a:	4650      	mov	r0, sl
    437c:	f004 f98c 	bl	8698 <__addsf3>
    4380:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4382:	2100      	movs	r1, #0
    4384:	4638      	mov	r0, r7
    4386:	f004 fc2d 	bl	8be4 <__aeabi_fcmplt>
    438a:	4958      	ldr	r1, [pc, #352]	; (44ec <explosion(LEDStruct&)+0x1a0>)
    438c:	2800      	cmp	r0, #0
    438e:	d168      	bne.n	4462 <explosion(LEDStruct&)+0x116>
    4390:	4638      	mov	r0, r7
    4392:	f004 fc45 	bl	8c20 <__aeabi_fcmpgt>
    4396:	b100      	cbz	r0, 439a <explosion(LEDStruct&)+0x4e>
    4398:	4f54      	ldr	r7, [pc, #336]	; (44ec <explosion(LEDStruct&)+0x1a0>)
    439a:	f8c4 7314 	str.w	r7, [r4, #788]	; 0x314
		leds.spark_vel[x] *= gravity;
    439e:	4651      	mov	r1, sl
    43a0:	f8d9 0000 	ldr.w	r0, [r9]
    43a4:	f004 fa80 	bl	88a8 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    43a8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    43ac:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    43b0:	f8d4 0530 	ldr.w	r0, [r4, #1328]	; 0x530
    43b4:	f004 fa78 	bl	88a8 <__aeabi_fmul>
    43b8:	4601      	mov	r1, r0
    43ba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    43be:	f004 f969 	bl	8694 <__aeabi_fsub>
    43c2:	f8d4 1620 	ldr.w	r1, [r4, #1568]	; 0x620
    43c6:	f004 fa6f 	bl	88a8 <__aeabi_fmul>
    43ca:	f8c4 0620 	str.w	r0, [r4, #1568]	; 0x620
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    43ce:	f004 fc57 	bl	8c80 <__aeabi_f2uiz>
    43d2:	f895 3710 	ldrb.w	r3, [r5, #1808]	; 0x710
    43d6:	b2c0      	uxtb	r0, r0
    43d8:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    43da:	f106 0601 	add.w	r6, r6, #1
    43de:	f895 3311 	ldrb.w	r3, [r5, #785]	; 0x311
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    43e2:	bf38      	it	cc
    43e4:	f885 0710 	strbcc.w	r0, [r5, #1808]	; 0x710
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    43e8:	b2f6      	uxtb	r6, r6
    43ea:	42b3      	cmp	r3, r6
    43ec:	d93b      	bls.n	4466 <explosion(LEDStruct&)+0x11a>
    43ee:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    43f2:	f8d4 0314 	ldr.w	r0, [r4, #788]	; 0x314
    43f6:	f004 fc1d 	bl	8c34 <__aeabi_f2iz>
    43fa:	4607      	mov	r7, r0
    43fc:	f8d4 0620 	ldr.w	r0, [r4, #1568]	; 0x620
    4400:	f004 fc3e 	bl	8c80 <__aeabi_f2uiz>
    4404:	f895 3308 	ldrb.w	r3, [r5, #776]	; 0x308
    4408:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    440c:	a901      	add	r1, sp, #4
    440e:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4410:	f88d 3000 	strb.w	r3, [sp]
    4414:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4418:	f001 ff66 	bl	62e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    441c:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    4420:	1829      	adds	r1, r5, r0
    4422:	5c2b      	ldrb	r3, [r5, r0]
    4424:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4428:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    442c:	542b      	strb	r3, [r5, r0]
    442e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4432:	784a      	ldrb	r2, [r1, #1]
    4434:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4438:	704a      	strb	r2, [r1, #1]
    443a:	788b      	ldrb	r3, [r1, #2]
    443c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    4440:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4444:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    4446:	708b      	strb	r3, [r1, #2]
    4448:	f892 34f4 	ldrb.w	r3, [r2, #1268]	; 0x4f4
    444c:	f8d4 a404 	ldr.w	sl, [r4, #1028]	; 0x404
    4450:	2b00      	cmp	r3, #0
    4452:	d190      	bne.n	4376 <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    4454:	f8d4 0314 	ldr.w	r0, [r4, #788]	; 0x314
    4458:	4651      	mov	r1, sl
    445a:	f004 f91b 	bl	8694 <__aeabi_fsub>
    445e:	4607      	mov	r7, r0
    4460:	e78f      	b.n	4382 <explosion(LEDStruct&)+0x36>
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4462:	2700      	movs	r7, #0
    4464:	e799      	b.n	439a <explosion(LEDStruct&)+0x4e>
    4466:	f895 4710 	ldrb.w	r4, [r5, #1808]	; 0x710
    446a:	462a      	mov	r2, r5
    446c:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4470:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4472:	7819      	ldrb	r1, [r3, #0]
    4474:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4478:	7859      	ldrb	r1, [r3, #1]
    447a:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    447e:	7899      	ldrb	r1, [r3, #2]
    4480:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    4484:	3303      	adds	r3, #3
    4486:	4283      	cmp	r3, r0
    4488:	f1a2 0203 	sub.w	r2, r2, #3
    448c:	d1f1      	bne.n	4472 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    448e:	bb44      	cbnz	r4, 44e2 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4490:	aa01      	add	r2, sp, #4
    4492:	2196      	movs	r1, #150	; 0x96
    4494:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4496:	f88d 4004 	strb.w	r4, [sp, #4]
    449a:	f88d 4005 	strb.w	r4, [sp, #5]
    449e:	f88d 4006 	strb.w	r4, [sp, #6]
    44a2:	f001 fc03 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44a6:	4812      	ldr	r0, [pc, #72]	; (44f0 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44a8:	4c12      	ldr	r4, [pc, #72]	; (44f4 <explosion(LEDStruct&)+0x1a8>)
    44aa:	8803      	ldrh	r3, [r0, #0]
    44ac:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    44ae:	4912      	ldr	r1, [pc, #72]	; (44f8 <explosion(LEDStruct&)+0x1ac>)
    44b0:	4a12      	ldr	r2, [pc, #72]	; (44fc <explosion(LEDStruct&)+0x1b0>)
    44b2:	9401      	str	r4, [sp, #4]
    44b4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    44b8:	8809      	ldrh	r1, [r1, #0]
    44ba:	8812      	ldrh	r2, [r2, #0]
    44bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    44c0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44c4:	440a      	add	r2, r1
    44c6:	3319      	adds	r3, #25
    44c8:	b29b      	uxth	r3, r3
    44ca:	b292      	uxth	r2, r2
	return ret;
    44cc:	9901      	ldr	r1, [sp, #4]
    44ce:	8003      	strh	r3, [r0, #0]
    44d0:	fb03 f302 	mul.w	r3, r3, r2
    44d4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    44d8:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    44da:	f8c5 330c 	str.w	r3, [r5, #780]	; 0x30c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    44de:	f885 230a 	strb.w	r2, [r5, #778]	; 0x30a
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    44e2:	b002      	add	sp, #8
    44e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44e8:	1fff8739 	.word	0x1fff8739
    44ec:	42940000 	.word	0x42940000
    44f0:	1fff8746 	.word	0x1fff8746
    44f4:	1fff9d48 	.word	0x1fff9d48
    44f8:	1fff8720 	.word	0x1fff8720
    44fc:	1fff873c 	.word	0x1fff873c
    4500:	1fff8740 	.word	0x1fff8740

00004504 <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    4504:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4506:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    450a:	b082      	sub	sp, #8
    450c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    450e:	bb03      	cbnz	r3, 4552 <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4510:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    4512:	2113      	movs	r1, #19
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4514:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    4516:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    451a:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = FIREWORKS;
    451e:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4522:	f884 230a 	strb.w	r2, [r4, #778]	; 0x30a
    4526:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4528:	aa01      	add	r2, sp, #4
    452a:	2196      	movs	r1, #150	; 0x96
    452c:	4620      	mov	r0, r4
    452e:	f88d 3004 	strb.w	r3, [sp, #4]
    4532:	f88d 3005 	strb.w	r3, [sp, #5]
    4536:	f88d 3006 	strb.w	r3, [sp, #6]
    453a:	f001 fbb7 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    453e:	4a0f      	ldr	r2, [pc, #60]	; (457c <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    4540:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    4544:	6812      	ldr	r2, [r2, #0]
    4546:	9201      	str	r2, [sp, #4]
	return ret;
    4548:	9a01      	ldr	r2, [sp, #4]
    454a:	429a      	cmp	r2, r3
    454c:	d212      	bcs.n	4574 <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    454e:	b002      	add	sp, #8
    4550:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4552:	f890 330a 	ldrb.w	r3, [r0, #778]	; 0x30a
    4556:	2b01      	cmp	r3, #1
    4558:	d004      	beq.n	4564 <fireworks(LEDStruct&)+0x60>
    455a:	d207      	bcs.n	456c <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    455c:	f7ff fe26 	bl	41ac <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4560:	b002      	add	sp, #8
    4562:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    4564:	f7ff fef2 	bl	434c <explosion(LEDStruct&)>
			break;
	}
}
    4568:	b002      	add	sp, #8
    456a:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    456c:	2b02      	cmp	r3, #2
    456e:	d0da      	beq.n	4526 <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4570:	b002      	add	sp, #8
    4572:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    4574:	4620      	mov	r0, r4
    4576:	f7ff fddd 	bl	4134 <prepare_for_explosion(LEDStruct&)>
    457a:	e7e8      	b.n	454e <fireworks(LEDStruct&)+0x4a>
    457c:	1fff9d48 	.word	0x1fff9d48

00004580 <shooting_pole(LEDStruct&)>:
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}


void shooting_pole(LEDStruct& leds) {
    4580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4584:	f890 622d 	ldrb.w	r6, [r0, #557]	; 0x22d
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}


void shooting_pole(LEDStruct& leds) {
    4588:	b087      	sub	sp, #28
    458a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    458c:	2e00      	cmp	r6, #0
    458e:	f000 80f2 	beq.w	4776 <shooting_pole(LEDStruct&)+0x1f6>
    4592:	f8b0 22fa 	ldrh.w	r2, [r0, #762]	; 0x2fa
    4596:	f204 17c7 	addw	r7, r4, #455	; 0x1c7

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    459a:	b312      	cbz	r2, 45e2 <shooting_pole(LEDStruct&)+0x62>
    459c:	4626      	mov	r6, r4
    459e:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    45a0:	f04f 0801 	mov.w	r8, #1
    45a4:	f894 3711 	ldrb.w	r3, [r4, #1809]	; 0x711
    45a8:	f8cd 8000 	str.w	r8, [sp]
    45ac:	ebc5 2105 	rsb	r1, r5, r5, lsl #8
    45b0:	fb91 f2f2 	sdiv	r2, r1, r2
    45b4:	441a      	add	r2, r3
    45b6:	b2d2      	uxtb	r2, r2
    45b8:	23ff      	movs	r3, #255	; 0xff
    45ba:	4639      	mov	r1, r7
    45bc:	a805      	add	r0, sp, #20
    45be:	f001 fc97 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    45c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    45c6:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
        b = rhs.b;
    45ca:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    45ce:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    45d0:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    45d2:	70b3      	strb	r3, [r6, #2]

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    45d4:	f8b4 22fa 	ldrh.w	r2, [r4, #762]	; 0x2fa
    45d8:	3501      	adds	r5, #1
    45da:	42aa      	cmp	r2, r5
    45dc:	f106 0603 	add.w	r6, r6, #3
    45e0:	dce0      	bgt.n	45a4 <shooting_pole(LEDStruct&)+0x24>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    45e2:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    45e6:	2b00      	cmp	r3, #0
    45e8:	f000 80bd 	beq.w	4766 <shooting_pole(LEDStruct&)+0x1e6>
    45ec:	f894 1711 	ldrb.w	r1, [r4, #1809]	; 0x711
    45f0:	f894 3712 	ldrb.w	r3, [r4, #1810]	; 0x712
    45f4:	440b      	add	r3, r1
    45f6:	f884 3711 	strb.w	r3, [r4, #1809]	; 0x711
	else { leds.pole_index -= leds.pole_diff; }

	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    45fa:	2a4a      	cmp	r2, #74	; 0x4a
    45fc:	f300 8122 	bgt.w	4844 <shooting_pole(LEDStruct&)+0x2c4>
    4600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4604:	18a3      	adds	r3, r4, r2
    4606:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    460a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    g = (((uint16_t)g) * scale_fixed) >> 8;
    460e:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4610:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4612:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4616:	43c9      	mvns	r1, r1
    4618:	b2c9      	uxtb	r1, r1
    461a:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    461c:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4620:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4624:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4628:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    462a:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    462c:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    462e:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4630:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4632:	709a      	strb	r2, [r3, #2]
    4634:	3303      	adds	r3, #3
    4636:	42ab      	cmp	r3, r5
    4638:	d1e7      	bne.n	460a <shooting_pole(LEDStruct&)+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    463a:	4e89      	ldr	r6, [pc, #548]	; (4860 <shooting_pole(LEDStruct&)+0x2e0>)
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    463c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4640:	6832      	ldr	r2, [r6, #0]
    4642:	9205      	str	r2, [sp, #20]
	return ret;
    4644:	9905      	ldr	r1, [sp, #20]
    4646:	f8b4 02fa 	ldrh.w	r0, [r4, #762]	; 0x2fa
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    464a:	f44f 728c 	mov.w	r2, #280	; 0x118
    464e:	fb02 f201 	mul.w	r2, r2, r1
    4652:	021b      	lsls	r3, r3, #8
    4654:	fb03 f302 	mul.w	r3, r3, r2
    4658:	f3c3 430e 	ubfx	r3, r3, #16, #15
    465c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4660:	b29a      	uxth	r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4662:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4664:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4668:	d503      	bpl.n	4672 <shooting_pole(LEDStruct&)+0xf2>
    466a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    466e:	3307      	adds	r3, #7
    4670:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4672:	0a19      	lsrs	r1, r3, #8
    4674:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 486c <shooting_pole(LEDStruct&)+0x2ec>
    uint8_t  m   = slope[section];
    4678:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 4870 <shooting_pole(LEDStruct&)+0x2f0>

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    467c:	f81e e001 	ldrb.w	lr, [lr, r1]
    4680:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
    4684:	f3c3 0346 	ubfx	r3, r3, #1, #7
    4688:	fb0e 1303 	mla	r3, lr, r3, r1

    if( theta & 0x8000 ) y = -y;
    468c:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    468e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4690:	bf48      	it	mi
    4692:	425b      	negmi	r3, r3
    4694:	b21b      	sxth	r3, r3
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4696:	f1c0 014a 	rsb	r1, r0, #74	; 0x4a
    469a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    469e:	b29b      	uxth	r3, r3
    46a0:	b289      	uxth	r1, r1
    46a2:	fb01 3103 	mla	r1, r1, r3, r3
    46a6:	f894 e227 	ldrb.w	lr, [r4, #551]	; 0x227
    46aa:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    46ae:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    46b2:	f8cd e000 	str.w	lr, [sp]
    46b6:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    46ba:	4639      	mov	r1, r7
    46bc:	b287      	uxth	r7, r0
    46be:	a804      	add	r0, sp, #16
    46c0:	f001 fc16 	bl	5ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    46c4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    46c8:	18e1      	adds	r1, r4, r3
    46ca:	5ce2      	ldrb	r2, [r4, r3]
    46cc:	f89d 0010 	ldrb.w	r0, [sp, #16]
    46d0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    46d4:	54e2      	strb	r2, [r4, r3]
    46d6:	f89d 3011 	ldrb.w	r3, [sp, #17]
    46da:	784a      	ldrb	r2, [r1, #1]
    46dc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    46e0:	704a      	strb	r2, [r1, #1]
    46e2:	788b      	ldrb	r3, [r1, #2]
    46e4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    46e8:	fa83 f352 	uqadd8	r3, r3, r2
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    46ec:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4874 <shooting_pole(LEDStruct&)+0x2f4>
        b = qadd8( b, rhs.b);
    46f0:	708b      	strb	r3, [r1, #2]
    46f2:	f8d8 3000 	ldr.w	r3, [r8]
    46f6:	07db      	lsls	r3, r3, #31
    46f8:	d51a      	bpl.n	4730 <shooting_pole(LEDStruct&)+0x1b0>
    46fa:	4f5a      	ldr	r7, [pc, #360]	; (4864 <shooting_pole(LEDStruct&)+0x2e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    46fc:	6833      	ldr	r3, [r6, #0]
    46fe:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4700:	e897 0006 	ldmia.w	r7, {r1, r2}
	return ret;
    4704:	9b04      	ldr	r3, [sp, #16]
    4706:	1a5b      	subs	r3, r3, r1
    4708:	429a      	cmp	r2, r3
    470a:	d920      	bls.n	474e <shooting_pole(LEDStruct&)+0x1ce>

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    470c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    470e:	781a      	ldrb	r2, [r3, #0]
    4710:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    4714:	785a      	ldrb	r2, [r3, #1]
    4716:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    471a:	789a      	ldrb	r2, [r3, #2]
    471c:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    4720:	3303      	adds	r3, #3
    4722:	429d      	cmp	r5, r3
    4724:	f1a4 0403 	sub.w	r4, r4, #3
    4728:	d1f1      	bne.n	470e <shooting_pole(LEDStruct&)+0x18e>
	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
	strip_sync(leds);
}
    472a:	b007      	add	sp, #28
    472c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else { leds.pole_index -= leds.pole_diff; }

	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4730:	4640      	mov	r0, r8
    4732:	f002 f9f9 	bl	6b28 <__cxa_guard_acquire>
    4736:	2800      	cmp	r0, #0
    4738:	f040 8087 	bne.w	484a <shooting_pole(LEDStruct&)+0x2ca>
    473c:	4f49      	ldr	r7, [pc, #292]	; (4864 <shooting_pole(LEDStruct&)+0x2e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    473e:	6833      	ldr	r3, [r6, #0]
    4740:	9304      	str	r3, [sp, #16]
    4742:	e897 0006 	ldmia.w	r7, {r1, r2}
	return ret;
    4746:	9b04      	ldr	r3, [sp, #16]
    4748:	1a5b      	subs	r3, r3, r1
    474a:	4293      	cmp	r3, r2
    474c:	d3de      	bcc.n	470c <shooting_pole(LEDStruct&)+0x18c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    474e:	6831      	ldr	r1, [r6, #0]
    4750:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4754:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    4758:	9103      	str	r1, [sp, #12]
	return ret;
    475a:	9903      	ldr	r1, [sp, #12]
    475c:	6039      	str	r1, [r7, #0]
    475e:	4413      	add	r3, r2
    4760:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    4764:	e7d2      	b.n	470c <shooting_pole(LEDStruct&)+0x18c>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    4766:	f894 3711 	ldrb.w	r3, [r4, #1809]	; 0x711
    476a:	f894 1712 	ldrb.w	r1, [r4, #1810]	; 0x712
    476e:	1a5b      	subs	r3, r3, r1
    4770:	f884 3711 	strb.w	r3, [r4, #1809]	; 0x711
    4774:	e741      	b.n	45fa <shooting_pole(LEDStruct&)+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4776:	4f3c      	ldr	r7, [pc, #240]	; (4868 <shooting_pole(LEDStruct&)+0x2e8>)
    4778:	883b      	ldrh	r3, [r7, #0]
    477a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    477e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4782:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4786:	3319      	adds	r3, #25
    4788:	b29b      	uxth	r3, r3
    478a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    478e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4792:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4796:	3219      	adds	r2, #25
    4798:	b292      	uxth	r2, r2
    479a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    479e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    47a2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    47a6:	f10e 0e19 	add.w	lr, lr, #25
    47aa:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47ae:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    47b2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
    47b6:	2146      	movs	r1, #70	; 0x46
    47b8:	2032      	movs	r0, #50	; 0x32
    47ba:	b2dd      	uxtb	r5, r3
    47bc:	eb0e 291e 	add.w	r9, lr, lr, lsr #8
    47c0:	fa5f f882 	uxtb.w	r8, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47c4:	f8a7 e000 	strh.w	lr, [r7]
    47c8:	f003 fcf2 	bl	81b0 <random(long, long)>
    47cc:	883b      	ldrh	r3, [r7, #0]
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    47ce:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
    47d2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    47d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    47da:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    47de:	3319      	adds	r3, #25
    47e0:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47e2:	fa5f f989 	uxtb.w	r9, r9
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    47e6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    47ea:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    47ee:	eb09 0989 	add.w	r9, r9, r9, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    47f2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    47f6:	b2c9      	uxtb	r1, r1
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    47f8:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    47fc:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4800:	eb08 0588 	add.w	r5, r8, r8, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4804:	1212      	asrs	r2, r2, #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4806:	ea4f 11e9 	mov.w	r1, r9, asr #7
    480a:	396a      	subs	r1, #106	; 0x6a
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    480c:	122d      	asrs	r5, r5, #8
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    480e:	f1c2 0239 	rsb	r2, r2, #57	; 0x39
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4812:	1200      	asrs	r0, r0, #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4814:	f04f 0e01 	mov.w	lr, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4818:	3501      	adds	r5, #1
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    481a:	b2d2      	uxtb	r2, r2
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    481c:	3001      	adds	r0, #1
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    481e:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
    4822:	2114      	movs	r1, #20
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4824:	f884 5712 	strb.w	r5, [r4, #1810]	; 0x712

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;
    4828:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4

	leds.strip_range = sr;
    482c:	f8a4 22fa 	strh.w	r2, [r4, #762]	; 0x2fa
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4830:	803b      	strh	r3, [r7, #0]
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4832:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4836:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    483a:	f884 e229 	strb.w	lr, [r4, #553]	; 0x229
	leds.mode_type = SHOOTING_POLE;
    483e:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    4842:	e6a8      	b.n	4596 <shooting_pole(LEDStruct&)+0x16>
    4844:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    4848:	e6f7      	b.n	463a <shooting_pole(LEDStruct&)+0xba>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    484a:	6833      	ldr	r3, [r6, #0]
    484c:	4f05      	ldr	r7, [pc, #20]	; (4864 <shooting_pole(LEDStruct&)+0x2e4>)
    484e:	9302      	str	r3, [sp, #8]
	return ret;
    4850:	9b02      	ldr	r3, [sp, #8]
    4852:	603b      	str	r3, [r7, #0]
    4854:	2332      	movs	r3, #50	; 0x32
	else { leds.pole_index -= leds.pole_diff; }

	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4856:	4640      	mov	r0, r8
    4858:	607b      	str	r3, [r7, #4]
    485a:	f002 f96b 	bl	6b34 <__cxa_guard_release>
    485e:	e76e      	b.n	473e <shooting_pole(LEDStruct&)+0x1be>
    4860:	1fff9d48 	.word	0x1fff9d48
    4864:	1fff93a8 	.word	0x1fff93a8
    4868:	1fff8746 	.word	0x1fff8746
    486c:	00009464 	.word	0x00009464
    4870:	00009ce4 	.word	0x00009ce4
    4874:	1fff93e4 	.word	0x1fff93e4

00004878 <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    4878:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    487a:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    487e:	b085      	sub	sp, #20
    4880:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    4882:	2b14      	cmp	r3, #20
    4884:	f200 845c 	bhi.w	5140 <switch_mode(LEDStruct&)+0x8c8>
    4888:	e8df f013 	tbh	[pc, r3, lsl #1]
    488c:	031e039c 	.word	0x031e039c
    4890:	0067029d 	.word	0x0067029d
    4894:	024900e3 	.word	0x024900e3
    4898:	013b00e9 	.word	0x013b00e9
    489c:	01b40015 	.word	0x01b40015
    48a0:	02020164 	.word	0x02020164
    48a4:	01410061 	.word	0x01410061
    48a8:	0435043a 	.word	0x0435043a
    48ac:	042b0430 	.word	0x042b0430
    48b0:	04210426 	.word	0x04210426
    48b4:	041c      	.short	0x041c
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    48b6:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    48ba:	2a00      	cmp	r2, #0
    48bc:	d147      	bne.n	494e <switch_mode(LEDStruct&)+0xd6>
    48be:	4dcc      	ldr	r5, [pc, #816]	; (4bf0 <switch_mode(LEDStruct&)+0x378>)
    48c0:	882b      	ldrh	r3, [r5, #0]
    48c2:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    48c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    48ca:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    48ce:	3019      	adds	r0, #25
    48d0:	b280      	uxth	r0, r0
    48d2:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    48d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    48da:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    48de:	3119      	adds	r1, #25
    48e0:	b289      	uxth	r1, r1
    48e2:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    48e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    48ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    48ee:	3319      	adds	r3, #25
    48f0:	b29b      	uxth	r3, r3
    48f2:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    48f6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    48fa:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    48fe:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4902:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4906:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    490a:	b2c7      	uxtb	r7, r0
    490c:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    490e:	3619      	adds	r6, #25
    4910:	b2db      	uxtb	r3, r3
    4912:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4916:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    491a:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    491e:	b2b6      	uxth	r6, r6
    4920:	1188      	asrs	r0, r1, #6
    4922:	1199      	asrs	r1, r3, #6
    4924:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4928:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    492c:	3032      	adds	r0, #50	; 0x32
    492e:	f3c7 1781 	ubfx	r7, r7, #6, #2
    4932:	313c      	adds	r1, #60	; 0x3c
    4934:	121b      	asrs	r3, r3, #8
    4936:	b2c0      	uxtb	r0, r0
    4938:	3701      	adds	r7, #1
    493a:	b2c9      	uxtb	r1, r1
    493c:	3314      	adds	r3, #20
    493e:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    4942:	b2db      	uxtb	r3, r3
    4944:	4611      	mov	r1, r2
    4946:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4948:	802e      	strh	r6, [r5, #0]
    494a:	f7fe f8ab 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    494e:	4620      	mov	r0, r4
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    4950:	b005      	add	sp, #20
    4952:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    4956:	f7fe b90f 	b.w	2b78 <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    495a:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    495e:	2b00      	cmp	r3, #0
    4960:	d177      	bne.n	4a52 <switch_mode(LEDStruct&)+0x1da>
    4962:	49a3      	ldr	r1, [pc, #652]	; (4bf0 <switch_mode(LEDStruct&)+0x378>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4964:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    4968:	880b      	ldrh	r3, [r1, #0]
    496a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    496e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4972:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4976:	3319      	adds	r3, #25
    4978:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    497c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4980:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4984:	3319      	adds	r3, #25
    4986:	b29b      	uxth	r3, r3
    4988:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    498c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4990:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4994:	3019      	adds	r0, #25
    4996:	b280      	uxth	r0, r0
    4998:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    499c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    49a0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    49a4:	3219      	adds	r2, #25
    49a6:	b292      	uxth	r2, r2
    49a8:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    49ac:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    49b0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    49b4:	3719      	adds	r7, #25
    49b6:	b2bf      	uxth	r7, r7
    49b8:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    49bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    49c0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    49c4:	3519      	adds	r5, #25
    49c6:	b2ad      	uxth	r5, r5
    49c8:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49cc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49d0:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    49d4:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49d6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    49da:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    49de:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    49e2:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49e4:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    49e8:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    49ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    49ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    49f2:	11f6      	asrs	r6, r6, #7
    49f4:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    49f8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    49fc:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4a00:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a02:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4a06:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    4a08:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    4a0a:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4a0c:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4a10:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4a14:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    4a18:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4a1c:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4a1e:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    4a20:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4a24:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4a28:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4a2c:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4a2e:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    4a32:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a36:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4a3a:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4a3e:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4a42:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4a46:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4a4a:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    4a4e:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    4a52:	4620      	mov	r0, r4
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    4a54:	b005      	add	sp, #20
    4a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    4a5a:	f7fd ba15 	b.w	1e88 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    4a5e:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    4a62:	2b00      	cmp	r3, #0
    4a64:	d14d      	bne.n	4b02 <switch_mode(LEDStruct&)+0x28a>
    4a66:	4962      	ldr	r1, [pc, #392]	; (4bf0 <switch_mode(LEDStruct&)+0x378>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    4a68:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    4a6c:	880b      	ldrh	r3, [r1, #0]
    4a6e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a76:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a7a:	3319      	adds	r3, #25
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a82:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4a86:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a8a:	3219      	adds	r2, #25
    4a8c:	b292      	uxth	r2, r2
    4a8e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4a92:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4a96:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4a9a:	3019      	adds	r0, #25
    4a9c:	b280      	uxth	r0, r0
    4a9e:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    4aa2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4aa6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4aaa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4aae:	f505 5558 	add.w	r5, r5, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4ab2:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    4ab4:	b2d2      	uxtb	r2, r2
    4ab6:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4ab8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4abc:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    4abe:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4ac2:	121b      	asrs	r3, r3, #8
    4ac4:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    4ac6:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ac8:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    4acc:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    4ad0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    4ad4:	2701      	movs	r7, #1
	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    4ad6:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    4ad8:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4adc:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    4ae0:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    4ae2:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    4ae6:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    4aea:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    4aee:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    4af2:	f884 7239 	strb.w	r7, [r4, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    4af6:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    4afa:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4afc:	800d      	strh	r5, [r1, #0]
    4afe:	f7fc fe1b 	bl	1738 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    4b02:	4620      	mov	r0, r4
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    4b04:	b005      	add	sp, #20
    4b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    4b0a:	f7fd bf07 	b.w	291c <rainbow_march(LEDStruct&)>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
    4b0e:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4b12:	b9ca      	cbnz	r2, 4b48 <switch_mode(LEDStruct&)+0x2d0>
    4b14:	4e36      	ldr	r6, [pc, #216]	; (4bf0 <switch_mode(LEDStruct&)+0x378>)
    4b16:	8833      	ldrh	r3, [r6, #0]
    4b18:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4b1c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4b20:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4b24:	3519      	adds	r5, #25
    4b26:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b28:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    4b2c:	f3c3 1381 	ubfx	r3, r3, #6, #2
    4b30:	3301      	adds	r3, #1
    4b32:	205a      	movs	r0, #90	; 0x5a
    4b34:	2146      	movs	r1, #70	; 0x46
    4b36:	9302      	str	r3, [sp, #8]
    4b38:	9001      	str	r0, [sp, #4]
    4b3a:	9100      	str	r1, [sp, #0]
    4b3c:	2314      	movs	r3, #20
    4b3e:	4611      	mov	r1, r2
    4b40:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b42:	8035      	strh	r5, [r6, #0]
    4b44:	f7fd ffae 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			torch(leds);
    4b48:	4620      	mov	r0, r4
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    4b4a:	b005      	add	sp, #20
    4b4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
    4b50:	f7fe bafa 	b.w	3148 <torch(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    4b54:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    4b58:	2900      	cmp	r1, #0
    4b5a:	f47f aef8 	bne.w	494e <switch_mode(LEDStruct&)+0xd6>
    4b5e:	4d24      	ldr	r5, [pc, #144]	; (4bf0 <switch_mode(LEDStruct&)+0x378>)
    4b60:	882b      	ldrh	r3, [r5, #0]
    4b62:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b6a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4b6e:	3019      	adds	r0, #25
    4b70:	b280      	uxth	r0, r0
    4b72:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4b76:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4b7a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b7e:	3219      	adds	r2, #25
    4b80:	b292      	uxth	r2, r2
    4b82:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    4b86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4b8a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b8e:	3319      	adds	r3, #25
    4b90:	b29b      	uxth	r3, r3
    4b92:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    4b96:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b9a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4b9e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ba2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ba6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4baa:	b2c7      	uxtb	r7, r0
    4bac:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bae:	3619      	adds	r6, #25
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	b2b6      	uxth	r6, r6
    4bb4:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    4bb8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4bbc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4bc0:	1190      	asrs	r0, r2, #6
    4bc2:	119a      	asrs	r2, r3, #6
    4bc4:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bc8:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    4bcc:	3032      	adds	r0, #50	; 0x32
    4bce:	f3c7 1781 	ubfx	r7, r7, #6, #2
    4bd2:	323c      	adds	r2, #60	; 0x3c
    4bd4:	121b      	asrs	r3, r3, #8
    4bd6:	b2c0      	uxtb	r0, r0
    4bd8:	3701      	adds	r7, #1
    4bda:	b2d2      	uxtb	r2, r2
    4bdc:	3314      	adds	r3, #20
    4bde:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    4be2:	b2db      	uxtb	r3, r3
    4be4:	2201      	movs	r2, #1
    4be6:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4be8:	802e      	strh	r6, [r5, #0]
    4bea:	f7fd ff5b 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4bee:	e6ae      	b.n	494e <switch_mode(LEDStruct&)+0xd6>
    4bf0:	1fff8746 	.word	0x1fff8746
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    4bf4:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4bf8:	2a00      	cmp	r2, #0
    4bfa:	f47f aea8 	bne.w	494e <switch_mode(LEDStruct&)+0xd6>
    4bfe:	4db1      	ldr	r5, [pc, #708]	; (4ec4 <switch_mode(LEDStruct&)+0x64c>)
    4c00:	882b      	ldrh	r3, [r5, #0]
    4c02:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4c06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4c0a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4c0e:	3019      	adds	r0, #25
    4c10:	b280      	uxth	r0, r0
    4c12:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    4c16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4c1a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4c1e:	3119      	adds	r1, #25
    4c20:	b289      	uxth	r1, r1
    4c22:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    4c26:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4c2a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c2e:	3319      	adds	r3, #25
    4c30:	b29b      	uxth	r3, r3
    4c32:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    4c36:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c3a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4c3e:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c42:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c46:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4c4a:	b2c7      	uxtb	r7, r0
    4c4c:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c4e:	3619      	adds	r6, #25
    4c50:	b2db      	uxtb	r3, r3
    4c52:	b2b6      	uxth	r6, r6
    4c54:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    4c58:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4c5c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4c60:	1188      	asrs	r0, r1, #6
    4c62:	1199      	asrs	r1, r3, #6
    4c64:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c68:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    4c6c:	3032      	adds	r0, #50	; 0x32
    4c6e:	f3c7 1781 	ubfx	r7, r7, #6, #2
    4c72:	313c      	adds	r1, #60	; 0x3c
    4c74:	121b      	asrs	r3, r3, #8
    4c76:	b2c0      	uxtb	r0, r0
    4c78:	3701      	adds	r7, #1
    4c7a:	b2c9      	uxtb	r1, r1
    4c7c:	3314      	adds	r3, #20
    4c7e:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    4c82:	b2db      	uxtb	r3, r3
    4c84:	2101      	movs	r1, #1
    4c86:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c88:	802e      	strh	r6, [r5, #0]
    4c8a:	f7fd ff0b 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4c8e:	e65e      	b.n	494e <switch_mode(LEDStruct&)+0xd6>
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    4c90:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    4c94:	2b00      	cmp	r3, #0
    4c96:	f47f ae5a 	bne.w	494e <switch_mode(LEDStruct&)+0xd6>
    4c9a:	4d8a      	ldr	r5, [pc, #552]	; (4ec4 <switch_mode(LEDStruct&)+0x64c>)
    4c9c:	882b      	ldrh	r3, [r5, #0]
    4c9e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ca2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ca6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4caa:	3319      	adds	r3, #25
    4cac:	b29b      	uxth	r3, r3
    4cae:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4cb2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4cb6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4cba:	3119      	adds	r1, #25
    4cbc:	b289      	uxth	r1, r1
    4cbe:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4cc2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4cc6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4cca:	3219      	adds	r2, #25
    4ccc:	b292      	uxth	r2, r2
    4cce:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4cd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4cd6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4cda:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cde:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ce2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4ce6:	b2db      	uxtb	r3, r3
    4ce8:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cea:	3619      	adds	r6, #25
    4cec:	b2d2      	uxtb	r2, r2
    4cee:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    4cf2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4cf6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    4cfa:	b2b6      	uxth	r6, r6
    4cfc:	1188      	asrs	r0, r1, #6
    4cfe:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4d02:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d04:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    4d08:	3032      	adds	r0, #50	; 0x32
    4d0a:	f3c7 1781 	ubfx	r7, r7, #6, #2
    4d0e:	313c      	adds	r1, #60	; 0x3c
    4d10:	121b      	asrs	r3, r3, #8
    4d12:	b2c0      	uxtb	r0, r0
    4d14:	3701      	adds	r7, #1
    4d16:	b2c9      	uxtb	r1, r1
    4d18:	3314      	adds	r3, #20
    4d1a:	2201      	movs	r2, #1
    4d1c:	e60f      	b.n	493e <switch_mode(LEDStruct&)+0xc6>
			break;


		// Rainbow March Functions
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    4d1e:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4d22:	2a00      	cmp	r2, #0
    4d24:	f47f aeed 	bne.w	4b02 <switch_mode(LEDStruct&)+0x28a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d28:	4966      	ldr	r1, [pc, #408]	; (4ec4 <switch_mode(LEDStruct&)+0x64c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    4d2a:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    4d2e:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    4d30:	f880 2239 	strb.w	r2, [r0, #569]	; 0x239
    4d34:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4d3c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d40:	3319      	adds	r3, #25
    4d42:	b29b      	uxth	r3, r3
    4d44:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d48:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4d4c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4d50:	3219      	adds	r2, #25
    4d52:	b292      	uxth	r2, r2
    4d54:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4d58:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4d5c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4d60:	3019      	adds	r0, #25
    4d62:	b280      	uxth	r0, r0
    4d64:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    4d68:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d6c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4d70:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d74:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    leds.rainbow_diff   = rd;
    4d78:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    4d7a:	b2d2      	uxtb	r2, r2
    4d7c:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4d7e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4d82:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    4d84:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4d88:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d8a:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    4d8e:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    4d90:	1212      	asrs	r2, r2, #8
    4d92:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4d96:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    4d98:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;
    4d9c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    4da0:	2701      	movs	r7, #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    4da2:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    4da6:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    4da8:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    4dac:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    4db0:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    4db4:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    4db8:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    4dbc:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4dbe:	800d      	strh	r5, [r1, #0]
    4dc0:	f7fc fcba 	bl	1738 <LEDDebug(LEDStruct&)>
    4dc4:	e69d      	b.n	4b02 <switch_mode(LEDStruct&)+0x28a>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    4dc6:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4dca:	2a00      	cmp	r2, #0
    4dcc:	f47f ae41 	bne.w	4a52 <switch_mode(LEDStruct&)+0x1da>
    4dd0:	493c      	ldr	r1, [pc, #240]	; (4ec4 <switch_mode(LEDStruct&)+0x64c>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4dd2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    4dd6:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4dd8:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    4ddc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4de0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4de4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4de8:	3319      	adds	r3, #25
    4dea:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4dee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4df2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4df6:	3319      	adds	r3, #25
    4df8:	b29b      	uxth	r3, r3
    4dfa:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4dfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e02:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4e06:	3019      	adds	r0, #25
    4e08:	b280      	uxth	r0, r0
    4e0a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4e0e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4e12:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e16:	3219      	adds	r2, #25
    4e18:	b292      	uxth	r2, r2
    4e1a:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    4e1e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    4e22:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4e26:	3719      	adds	r7, #25
    4e28:	b2bf      	uxth	r7, r7
    4e2a:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    4e2e:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    4e32:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4e36:	3519      	adds	r5, #25
    4e38:	b2ad      	uxth	r5, r5
    4e3a:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e3e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e42:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4e46:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e48:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4e4c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4e50:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4e54:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e56:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4e5a:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    4e5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4e60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4e64:	11f6      	asrs	r6, r6, #7
    4e66:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4e6a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    4e6e:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4e72:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e74:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4e78:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    4e7a:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    4e7c:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4e7e:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4e82:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4e86:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    4e8a:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4e8e:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4e90:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    4e92:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4e96:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4e9a:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4e9e:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4ea0:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    4ea4:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ea8:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4eac:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4eb0:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4eb4:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4eb8:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4ebc:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    4ec0:	e5c7      	b.n	4a52 <switch_mode(LEDStruct&)+0x1da>
    4ec2:	bf00      	nop
    4ec4:	1fff8746 	.word	0x1fff8746
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    4ec8:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    4ecc:	2a00      	cmp	r2, #0
    4ece:	f47f adc0 	bne.w	4a52 <switch_mode(LEDStruct&)+0x1da>
    4ed2:	499c      	ldr	r1, [pc, #624]	; (5144 <switch_mode(LEDStruct&)+0x8cc>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4ed4:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    4ed8:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    4eda:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    4ede:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ee2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ee6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4eea:	3319      	adds	r3, #25
    4eec:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ef4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4ef8:	3319      	adds	r3, #25
    4efa:	b29b      	uxth	r3, r3
    4efc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4f00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4f04:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4f08:	3019      	adds	r0, #25
    4f0a:	b280      	uxth	r0, r0
    4f0c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4f10:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4f14:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4f18:	3219      	adds	r2, #25
    4f1a:	b292      	uxth	r2, r2
    4f1c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    4f20:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    4f24:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4f28:	3719      	adds	r7, #25
    4f2a:	b2bf      	uxth	r7, r7
    4f2c:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    4f30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    4f34:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4f38:	3519      	adds	r5, #25
    4f3a:	b2ad      	uxth	r5, r5
    4f3c:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f40:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f44:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_numdots 	 = jn;
    4f48:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f4a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4f4e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4f52:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4f56:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f58:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4f5c:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    4f5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4f62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4f66:	11f6      	asrs	r6, r6, #7
    4f68:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4f6c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    4f70:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4f74:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f76:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4f7a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    4f7c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    4f7e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    4f80:	f3c7 1742 	ubfx	r7, r7, #5, #3
    4f84:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4f88:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    4f8c:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4f90:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    4f92:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    4f94:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4f98:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4f9c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4fa0:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4fa2:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    4fa6:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4faa:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4fae:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    4fb2:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4fb6:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    4fba:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4fbe:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    4fc2:	e546      	b.n	4a52 <switch_mode(LEDStruct&)+0x1da>
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    4fc4:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    4fc8:	2900      	cmp	r1, #0
    4fca:	f47f ad42 	bne.w	4a52 <switch_mode(LEDStruct&)+0x1da>
    4fce:	485d      	ldr	r0, [pc, #372]	; (5144 <switch_mode(LEDStruct&)+0x8cc>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4fd0:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    4fd4:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    4fd6:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    4fda:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4fde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4fe2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4fe6:	3319      	adds	r3, #25
    4fe8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4fec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ff0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4ff4:	3319      	adds	r3, #25
    4ff6:	b29b      	uxth	r3, r3
    4ff8:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4ffc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5000:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5004:	3519      	adds	r5, #25
    5006:	b2ad      	uxth	r5, r5
    5008:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    500c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    5010:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5014:	3219      	adds	r2, #25
    5016:	b292      	uxth	r2, r2
    5018:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    501c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    5020:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5024:	3719      	adds	r7, #25
    5026:	b2bf      	uxth	r7, r7
    5028:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    502c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    5030:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5034:	3619      	adds	r6, #25
    5036:	b2b6      	uxth	r6, r6
    5038:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    503c:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5040:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    5044:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5048:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    504c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    504e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5052:	b2ed      	uxtb	r5, r5
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5054:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5056:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    505a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    505e:	f10c 0c19 	add.w	ip, ip, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5062:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    5066:	fa1f fc8c 	uxth.w	ip, ip
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    506a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    506e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5072:	11aa      	asrs	r2, r5, #6
    5074:	3208      	adds	r2, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5076:	ea4f 1eee 	mov.w	lr, lr, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    507a:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    507c:	f3c7 1742 	ubfx	r7, r7, #5, #3
    5080:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    5084:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    5088:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    508c:	f10e 0501 	add.w	r5, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5090:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    5092:	3701      	adds	r7, #1
	leds.juggle_index_reset  = jir;
    5094:	f3c6 16c0 	ubfx	r6, r6, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    5098:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    509c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    50a0:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    50a2:	f884 522f 	strb.w	r5, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    50a6:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    50aa:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    50ae:	f8a0 c000 	strh.w	ip, [r0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    50b2:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    50b6:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    50ba:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    50be:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
    50c2:	e4c6      	b.n	4a52 <switch_mode(LEDStruct&)+0x1da>
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    50c4:	b005      	add	sp, #20
    50c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fireworks(leds);
			break;

		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
    50ca:	f7ff ba59 	b.w	4580 <shooting_pole(LEDStruct&)>
			break;
	}
}
    50ce:	b005      	add	sp, #20
    50d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			one_sin(leds);
			break;

		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
    50d4:	f7ff ba16 	b.w	4504 <fireworks(LEDStruct&)>
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    50d8:	b005      	add	sp, #20
    50da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			confetti(leds);
			break;

		// Sin Functions
		case ONE_SIN:
			one_sin(leds);
    50de:	f7fe bcfb 	b.w	3ad8 <one_sin(LEDStruct&)>
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    50e2:	b005      	add	sp, #20
    50e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			pride(leds);
			break;

		// Confetti Functions
		case CONFETTI:
			confetti(leds);
    50e8:	f7fe bc62 	b.w	39b0 <confetti(LEDStruct&)>
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    50ec:	b005      	add	sp, #20
    50ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    50f2:	f7fe be3b 	b.w	3d6c <pride(LEDStruct&)>
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    50f6:	b005      	add	sp, #20
    50f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			torch(leds);
			break;

		// Colorwave and Pride Functions
		case COLORWAVE:
			colorwave(leds);
    50fc:	f7fe ba78 	b.w	35f0 <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0, 20, 100, 90); }		// sync on  | mirror must be off
    5100:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    5104:	2a00      	cmp	r2, #0
    5106:	f47f ad1f 	bne.w	4b48 <switch_mode(LEDStruct&)+0x2d0>
    510a:	4e0e      	ldr	r6, [pc, #56]	; (5144 <switch_mode(LEDStruct&)+0x8cc>)
    510c:	8833      	ldrh	r3, [r6, #0]
    510e:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    5112:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5116:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    511a:	3519      	adds	r5, #25
    511c:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    511e:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    5122:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5126:	3301      	adds	r3, #1
    5128:	205a      	movs	r0, #90	; 0x5a
    512a:	2164      	movs	r1, #100	; 0x64
    512c:	9302      	str	r3, [sp, #8]
    512e:	9001      	str	r0, [sp, #4]
    5130:	9100      	str	r1, [sp, #0]
    5132:	2314      	movs	r3, #20
    5134:	2101      	movs	r1, #1
    5136:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5138:	8035      	strh	r5, [r6, #0]
    513a:	f7fd fcb3 	bl	2aa4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    513e:	e503      	b.n	4b48 <switch_mode(LEDStruct&)+0x2d0>
		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
			break;
	}
}
    5140:	b005      	add	sp, #20
    5142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5144:	1fff8746 	.word	0x1fff8746

00005148 <change_pattern()>:
}



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
    5148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    514a:	2120      	movs	r1, #32
    514c:	4834      	ldr	r0, [pc, #208]	; (5220 <change_pattern()+0xd8>)
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;
    514e:	4d35      	ldr	r5, [pc, #212]	; (5224 <change_pattern()+0xdc>)
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
    5150:	4f35      	ldr	r7, [pc, #212]	; (5228 <change_pattern()+0xe0>)
    5152:	f002 fd81 	bl	7c58 <usb_serial_write>
    5156:	4835      	ldr	r0, [pc, #212]	; (522c <change_pattern()+0xe4>)
    5158:	f002 ff82 	bl	8060 <Print::println()>
    515c:	4834      	ldr	r0, [pc, #208]	; (5230 <change_pattern()+0xe8>)
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    515e:	4a35      	ldr	r2, [pc, #212]	; (5234 <change_pattern()+0xec>)
    5160:	8803      	ldrh	r3, [r0, #0]
    5162:	7816      	ldrb	r6, [r2, #0]
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;
    5164:	882c      	ldrh	r4, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    5166:	4934      	ldr	r1, [pc, #208]	; (5238 <change_pattern()+0xf0>)
// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
    5168:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 524c <change_pattern()+0x104>
    516c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5170:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5174:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5178:	3319      	adds	r3, #25
    517a:	b29b      	uxth	r3, r3
    517c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5180:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5184:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5188:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    518c:	3219      	adds	r2, #25
	transition_speed = random8(3,7);
    518e:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5192:	b292      	uxth	r2, r2
    5194:	3303      	adds	r3, #3
    5196:	703b      	strb	r3, [r7, #0]
	transition_ratio = 0;
	number_of_mode_changes++;
    5198:	3401      	adds	r4, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    519a:	eb02 2312 	add.w	r3, r2, r2, lsr #8
    519e:	802c      	strh	r4, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    51a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
    51a4:	4f25      	ldr	r7, [pc, #148]	; (523c <change_pattern()+0xf4>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    51a6:	4c26      	ldr	r4, [pc, #152]	; (5240 <change_pattern()+0xf8>)
	transition_ratio = 0;
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    51a8:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    51ac:	2501      	movs	r5, #1
	transition_type  = BLENDING;
    51ae:	2300      	movs	r3, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51b0:	8002      	strh	r2, [r0, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    51b2:	f881 322d 	strb.w	r3, [r1, #557]	; 0x22d
// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
    51b6:	f88e 3000 	strb.w	r3, [lr]
	transition_speed = random8(3,7);
	transition_ratio = 0;
    51ba:	703b      	strb	r3, [r7, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    51bc:	7025      	strb	r5, [r4, #0]
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    51be:	b9d6      	cbnz	r6, 51f6 <change_pattern()+0xae>
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
    51c0:	f891 222a 	ldrb.w	r2, [r1, #554]	; 0x22a
    51c4:	4c1f      	ldr	r4, [pc, #124]	; (5244 <change_pattern()+0xfc>)
    51c6:	3201      	adds	r2, #1
    51c8:	fba2 4504 	umull	r4, r5, r2, r4
    51cc:	1b53      	subs	r3, r2, r5
    51ce:	eb05 0353 	add.w	r3, r5, r3, lsr #1
    51d2:	091b      	lsrs	r3, r3, #4
    51d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    51d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    51dc:	1ad3      	subs	r3, r2, r3
    51de:	b2db      	uxtb	r3, r3
    51e0:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
    51e4:	4a18      	ldr	r2, [pc, #96]	; (5248 <change_pattern()+0x100>)
	switch_mode(next_leds);
    51e6:	4814      	ldr	r0, [pc, #80]	; (5238 <change_pattern()+0xf0>)
	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
    51e8:	5cd3      	ldrb	r3, [r2, r3]
    51ea:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
	switch_mode(next_leds);
}
    51ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
    51f2:	f7ff bb41 	b.w	4878 <switch_mode(LEDStruct&)>
    51f6:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    51fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    51fe:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5202:	3219      	adds	r2, #25
    5204:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5206:	eb02 2312 	add.w	r3, r2, r2, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    520a:	b2db      	uxtb	r3, r3
    520c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5210:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    5214:	f3c3 2307 	ubfx	r3, r3, #8, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5218:	8002      	strh	r2, [r0, #0]
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    521a:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
    521e:	e7e1      	b.n	51e4 <change_pattern()+0x9c>
    5220:	0000a820 	.word	0x0000a820
    5224:	1fff8c74 	.word	0x1fff8c74
    5228:	1fff93ee 	.word	0x1fff93ee
    522c:	1fff8750 	.word	0x1fff8750
    5230:	1fff8746 	.word	0x1fff8746
    5234:	1fff873e 	.word	0x1fff873e
    5238:	1fff8c80 	.word	0x1fff8c80
    523c:	1fff8c76 	.word	0x1fff8c76
    5240:	1fff93a4 	.word	0x1fff93a4
    5244:	86186187 	.word	0x86186187
    5248:	1fff8724 	.word	0x1fff8724
    524c:	1fff93b8 	.word	0x1fff93b8

00005250 <setup>:

Mode start_mode = FIREWORKS;

// ================ SETUP ================

void setup() {
    5250:	b570      	push	{r4, r5, r6, lr}
    5252:	f640 31b8 	movw	r1, #3000	; 0xbb8
    5256:	b082      	sub	sp, #8
    5258:	4863      	ldr	r0, [pc, #396]	; (53e8 <setup+0x198>)
    525a:	f001 f9cb 	bl	65f4 <VisualMicroDebug::init(unsigned long)>
    525e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    5262:	4861      	ldr	r0, [pc, #388]	; (53e8 <setup+0x198>)
    5264:	f001 f9c2 	bl	65ec <VisualMicroDebug::begin(unsigned long)>
    5268:	2101      	movs	r1, #1
    526a:	485f      	ldr	r0, [pc, #380]	; (53e8 <setup+0x198>)
    526c:	f001 f998 	bl	65a0 <VisualMicroDebug::outPacketStart(bool)>
    5270:	b150      	cbz	r0, 5288 <setup+0x38>
    5272:	2110      	movs	r1, #16
    5274:	485d      	ldr	r0, [pc, #372]	; (53ec <setup+0x19c>)
    5276:	f002 fcef 	bl	7c58 <usb_serial_write>
    527a:	485b      	ldr	r0, [pc, #364]	; (53e8 <setup+0x198>)
    527c:	210a      	movs	r1, #10
    527e:	f001 f97d 	bl	657c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    5282:	4859      	ldr	r0, [pc, #356]	; (53e8 <setup+0x198>)
    5284:	f001 f9b0 	bl	65e8 <VisualMicroDebug::outPacketEnd()>
    5288:	2201      	movs	r2, #1
    528a:	2100      	movs	r1, #0
    528c:	4856      	ldr	r0, [pc, #344]	; (53e8 <setup+0x198>)
    528e:	f001 fa5d 	bl	674c <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    5292:	f240 51dc 	movw	r1, #1500	; 0x5dc
    5296:	4856      	ldr	r0, [pc, #344]	; (53f0 <setup+0x1a0>)
    5298:	f002 ff3a 	bl	8110 <Stream::setTimeout(unsigned long)>
    529c:	2108      	movs	r1, #8
    529e:	4855      	ldr	r0, [pc, #340]	; (53f4 <setup+0x1a4>)
    52a0:	f002 fcda 	bl	7c58 <usb_serial_write>
    52a4:	4852      	ldr	r0, [pc, #328]	; (53f0 <setup+0x1a0>)
    52a6:	f002 fedb 	bl	8060 <Print::println()>

	delay(1000);
    52aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    52ae:	f001 fcbb 	bl	6c28 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    52b2:	4851      	ldr	r0, [pc, #324]	; (53f8 <setup+0x1a8>)
    52b4:	6803      	ldr	r3, [r0, #0]
    52b6:	f013 0401 	ands.w	r4, r3, #1
    52ba:	d071      	beq.n	53a0 <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    52bc:	4c4f      	ldr	r4, [pc, #316]	; (53fc <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    52be:	4950      	ldr	r1, [pc, #320]	; (5400 <setup+0x1b0>)
    52c0:	4850      	ldr	r0, [pc, #320]	; (5404 <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    52c2:	4d51      	ldr	r5, [pc, #324]	; (5408 <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    52c4:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    52c6:	2300      	movs	r3, #0
    52c8:	2296      	movs	r2, #150	; 0x96
    52ca:	f000 fe99 	bl	6000 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    52ce:	22b0      	movs	r2, #176	; 0xb0
    52d0:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    52d2:	4620      	mov	r0, r4
    52d4:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    52d6:	7026      	strb	r6, [r4, #0]
    52d8:	f88d 2005 	strb.w	r2, [sp, #5]
    52dc:	f88d 3006 	strb.w	r3, [sp, #6]
    52e0:	f88d 6004 	strb.w	r6, [sp, #4]
    52e4:	f000 fecc 	bl	6080 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    52e8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    52ec:	2005      	movs	r0, #5
    52ee:	f001 f939 	bl	6564 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    52f2:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    52f6:	2002      	movs	r0, #2
    52f8:	802b      	strh	r3, [r5, #0]
    52fa:	f001 fb67 	bl	69cc <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    52fe:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    5300:	2100      	movs	r1, #0
    5302:	4403      	add	r3, r0
    5304:	4620      	mov	r0, r4
    5306:	802b      	strh	r3, [r5, #0]
    5308:	f000 ffcc 	bl	62a4 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    530c:	7821      	ldrb	r1, [r4, #0]
    530e:	4620      	mov	r0, r4
    5310:	f000 feee 	bl	60f0 <CFastLED::show(unsigned char)>
    5314:	4620      	mov	r0, r4
    5316:	2132      	movs	r1, #50	; 0x32
    5318:	f000 ff4c 	bl	61b4 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    531c:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    531e:	aa01      	add	r2, sp, #4
    5320:	2196      	movs	r1, #150	; 0x96
    5322:	4837      	ldr	r0, [pc, #220]	; (5400 <setup+0x1b0>)
    5324:	f88d 6004 	strb.w	r6, [sp, #4]
    5328:	f88d 5005 	strb.w	r5, [sp, #5]
    532c:	f88d 5006 	strb.w	r5, [sp, #6]
    5330:	f000 fcbc 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
    5334:	4620      	mov	r0, r4
    5336:	21fa      	movs	r1, #250	; 0xfa
    5338:	f000 ff3c 	bl	61b4 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    533c:	aa01      	add	r2, sp, #4
    533e:	2196      	movs	r1, #150	; 0x96
    5340:	482f      	ldr	r0, [pc, #188]	; (5400 <setup+0x1b0>)
    5342:	f88d 6006 	strb.w	r6, [sp, #6]
    5346:	f88d 5004 	strb.w	r5, [sp, #4]
    534a:	f88d 5005 	strb.w	r5, [sp, #5]
    534e:	f000 fcad 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
    5352:	4620      	mov	r0, r4
    5354:	21fa      	movs	r1, #250	; 0xfa
    5356:	f000 ff2d 	bl	61b4 <CFastLED::delay(unsigned long)>
    535a:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    535c:	aa01      	add	r2, sp, #4
    535e:	2196      	movs	r1, #150	; 0x96
    5360:	4827      	ldr	r0, [pc, #156]	; (5400 <setup+0x1b0>)
    5362:	f88d 3005 	strb.w	r3, [sp, #5]
    5366:	f88d 5004 	strb.w	r5, [sp, #4]
    536a:	f88d 5006 	strb.w	r5, [sp, #6]
    536e:	f000 fc9d 	bl	5cac <fill_solid(CRGB*, int, CRGB const&)>
    5372:	4620      	mov	r0, r4
    5374:	21fa      	movs	r1, #250	; 0xfa
    5376:	f000 ff1d 	bl	61b4 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    537a:	4629      	mov	r1, r5
    537c:	4620      	mov	r0, r4
    537e:	f000 ff91 	bl	62a4 <CFastLED::clear(bool)>
    5382:	4620      	mov	r0, r4
    5384:	21fa      	movs	r1, #250	; 0xfa
    5386:	f000 ff15 	bl	61b4 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    538a:	f7fb faa5 	bl	8d8 <initialize()>
    538e:	210e      	movs	r1, #14
    5390:	481e      	ldr	r0, [pc, #120]	; (540c <setup+0x1bc>)
    5392:	f002 fc61 	bl	7c58 <usb_serial_write>
    5396:	4816      	ldr	r0, [pc, #88]	; (53f0 <setup+0x1a0>)
    5398:	f002 fe62 	bl	8060 <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    539c:	b002      	add	sp, #8
    539e:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    53a0:	f001 fbc2 	bl	6b28 <__cxa_guard_acquire>
    53a4:	2800      	cmp	r0, #0
    53a6:	d089      	beq.n	52bc <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    53a8:	4919      	ldr	r1, [pc, #100]	; (5410 <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    53aa:	4b16      	ldr	r3, [pc, #88]	; (5404 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    53ac:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    53ae:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    53b0:	22ff      	movs	r2, #255	; 0xff
    53b2:	2501      	movs	r5, #1
    53b4:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    53b6:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    53b8:	749d      	strb	r5, [r3, #18]
    53ba:	731a      	strb	r2, [r3, #12]
    53bc:	735a      	strb	r2, [r3, #13]
    53be:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    53c0:	73da      	strb	r2, [r3, #15]
    53c2:	741a      	strb	r2, [r3, #16]
    53c4:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    53c6:	b160      	cbz	r0, 53e2 <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    53c8:	4a12      	ldr	r2, [pc, #72]	; (5414 <setup+0x1c4>)
    53ca:	6811      	ldr	r1, [r2, #0]
    53cc:	b101      	cbz	r1, 53d0 <setup+0x180>
    53ce:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    53d0:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    53d2:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    53d4:	4910      	ldr	r1, [pc, #64]	; (5418 <setup+0x1c8>)
    53d6:	4808      	ldr	r0, [pc, #32]	; (53f8 <setup+0x1a8>)
    53d8:	619a      	str	r2, [r3, #24]
    53da:	6019      	str	r1, [r3, #0]
    53dc:	f001 fbaa 	bl	6b34 <__cxa_guard_release>
    53e0:	e76c      	b.n	52bc <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    53e2:	600b      	str	r3, [r1, #0]
    53e4:	e7f0      	b.n	53c8 <setup+0x178>
    53e6:	bf00      	nop
    53e8:	1fff9cf8 	.word	0x1fff9cf8
    53ec:	0000a844 	.word	0x0000a844
    53f0:	1fff8750 	.word	0x1fff8750
    53f4:	0000a858 	.word	0x0000a858
    53f8:	1fff8c54 	.word	0x1fff8c54
    53fc:	1fff9cd0 	.word	0x1fff9cd0
    5400:	1fff9b0c 	.word	0x1fff9b0c
    5404:	1fff8c58 	.word	0x1fff8c58
    5408:	1fff8746 	.word	0x1fff8746
    540c:	0000a864 	.word	0x0000a864
    5410:	1fff9ce0 	.word	0x1fff9ce0
    5414:	1fff9cf0 	.word	0x1fff9cf0
    5418:	00008f20 	.word	0x00008f20

0000541c <loop>:



// ================ LOOP ================

void loop() {
    541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5420:	b097      	sub	sp, #92	; 0x5c
	// Add entropy to randomness
	random16_add_entropy(random());
    5422:	f003 fcc3 	bl	8dac <random>

	// Change patterns
	EVERY_N_SECONDS(20){
    5426:	4da8      	ldr	r5, [pc, #672]	; (56c8 <loop+0x2ac>)
    5428:	4aa8      	ldr	r2, [pc, #672]	; (56cc <loop+0x2b0>)
    542a:	6829      	ldr	r1, [r5, #0]
    542c:	8813      	ldrh	r3, [r2, #0]
    542e:	4418      	add	r0, r3
    5430:	07cb      	lsls	r3, r1, #31
    5432:	8010      	strh	r0, [r2, #0]
    5434:	f140 81a4 	bpl.w	5780 <loop+0x364>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5438:	4ea5      	ldr	r6, [pc, #660]	; (56d0 <loop+0x2b4>)
    543a:	4ca6      	ldr	r4, [pc, #664]	; (56d4 <loop+0x2b8>)
    543c:	6833      	ldr	r3, [r6, #0]
    543e:	9303      	str	r3, [sp, #12]
	return ret;
    5440:	9a03      	ldr	r2, [sp, #12]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5442:	48a5      	ldr	r0, [pc, #660]	; (56d8 <loop+0x2bc>)
    5444:	8823      	ldrh	r3, [r4, #0]
    5446:	8861      	ldrh	r1, [r4, #2]
    5448:	fba0 0202 	umull	r0, r2, r0, r2
    544c:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    5450:	b29b      	uxth	r3, r3
    5452:	4299      	cmp	r1, r3
    5454:	d809      	bhi.n	546a <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5456:	6833      	ldr	r3, [r6, #0]
    5458:	9302      	str	r3, [sp, #8]
	return ret;
    545a:	9b02      	ldr	r3, [sp, #8]
    545c:	4a9e      	ldr	r2, [pc, #632]	; (56d8 <loop+0x2bc>)
    545e:	fba2 2303 	umull	r2, r3, r2, r3
    5462:	099b      	lsrs	r3, r3, #6
    5464:	8023      	strh	r3, [r4, #0]
		change_pattern();
    5466:	f7ff fe6f 	bl	5148 <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    546a:	4d9c      	ldr	r5, [pc, #624]	; (56dc <loop+0x2c0>)
    546c:	682b      	ldr	r3, [r5, #0]
    546e:	07df      	lsls	r7, r3, #31
    5470:	f140 817d 	bpl.w	576e <loop+0x352>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5474:	6833      	ldr	r3, [r6, #0]
    5476:	4c9a      	ldr	r4, [pc, #616]	; (56e0 <loop+0x2c4>)
    5478:	9306      	str	r3, [sp, #24]
	return ret;
    547a:	9a06      	ldr	r2, [sp, #24]
    547c:	4896      	ldr	r0, [pc, #600]	; (56d8 <loop+0x2bc>)
    547e:	8823      	ldrh	r3, [r4, #0]
    5480:	8861      	ldrh	r1, [r4, #2]
    5482:	fba0 0202 	umull	r0, r2, r0, r2
    5486:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    548a:	b29b      	uxth	r3, r3
    548c:	4299      	cmp	r1, r3
    548e:	f240 8101 	bls.w	5694 <loop+0x278>
    5492:	4f94      	ldr	r7, [pc, #592]	; (56e4 <loop+0x2c8>)
    5494:	f8df 929c 	ldr.w	r9, [pc, #668]	; 5734 <loop+0x318>
    5498:	f8df a26c 	ldr.w	sl, [pc, #620]	; 5708 <loop+0x2ec>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    549c:	4d92      	ldr	r5, [pc, #584]	; (56e8 <loop+0x2cc>)
    549e:	682b      	ldr	r3, [r5, #0]
    54a0:	07dc      	lsls	r4, r3, #31
    54a2:	f140 815c 	bpl.w	575e <loop+0x342>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54a6:	6833      	ldr	r3, [r6, #0]
    54a8:	4c90      	ldr	r4, [pc, #576]	; (56ec <loop+0x2d0>)
    54aa:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    54ac:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    54b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    54b2:	1a5b      	subs	r3, r3, r1
    54b4:	4293      	cmp	r3, r2
    54b6:	d30d      	bcc.n	54d4 <loop+0xb8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54b8:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    54ba:	498d      	ldr	r1, [pc, #564]	; (56f0 <loop+0x2d4>)
    54bc:	9308      	str	r3, [sp, #32]
	return ret;
    54be:	9b08      	ldr	r3, [sp, #32]
    54c0:	6023      	str	r3, [r4, #0]
    54c2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    54c6:	2218      	movs	r2, #24
    54c8:	f000 fd72 	bl	5fb0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    54cc:	783b      	ldrb	r3, [r7, #0]
    54ce:	2b00      	cmp	r3, #0
    54d0:	f040 817f 	bne.w	57d2 <loop+0x3b6>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    54d4:	f8df 8260 	ldr.w	r8, [pc, #608]	; 5738 <loop+0x31c>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    54d8:	4d86      	ldr	r5, [pc, #536]	; (56f4 <loop+0x2d8>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    54da:	f8d8 3000 	ldr.w	r3, [r8]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    54de:	f8df b25c 	ldr.w	fp, [pc, #604]	; 573c <loop+0x320>
    54e2:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    54e6:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
    54ea:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    54ec:	07d8      	lsls	r0, r3, #31
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    54ee:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    54f2:	f140 80b4 	bpl.w	565e <loop+0x242>
    54f6:	4c80      	ldr	r4, [pc, #512]	; (56f8 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54f8:	6833      	ldr	r3, [r6, #0]
    54fa:	930c      	str	r3, [sp, #48]	; 0x30
    54fc:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    5500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5502:	1a1b      	subs	r3, r3, r0
    5504:	428b      	cmp	r3, r1
    5506:	f080 80bc 	bcs.w	5682 <loop+0x266>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    550a:	f8df 8234 	ldr.w	r8, [pc, #564]	; 5740 <loop+0x324>
    550e:	f8d8 3000 	ldr.w	r3, [r8]
    5512:	07d9      	lsls	r1, r3, #31
    5514:	d56d      	bpl.n	55f2 <loop+0x1d6>
    5516:	4c79      	ldr	r4, [pc, #484]	; (56fc <loop+0x2e0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5518:	6833      	ldr	r3, [r6, #0]
    551a:	930f      	str	r3, [sp, #60]	; 0x3c
    551c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    5520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5522:	1a5b      	subs	r3, r3, r1
    5524:	429a      	cmp	r2, r3
    5526:	d973      	bls.n	5610 <loop+0x1f4>
			switch_mode(next_leds);
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    5528:	783b      	ldrb	r3, [r7, #0]
    552a:	2b00      	cmp	r3, #0
    552c:	d079      	beq.n	5622 <loop+0x206>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    552e:	4d74      	ldr	r5, [pc, #464]	; (5700 <loop+0x2e4>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    5530:	f7fb fb94 	bl	c5c <blending()>
    5534:	682b      	ldr	r3, [r5, #0]
    5536:	07da      	lsls	r2, r3, #31
    5538:	f140 8087 	bpl.w	564a <loop+0x22e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    553c:	6833      	ldr	r3, [r6, #0]
    553e:	4c71      	ldr	r4, [pc, #452]	; (5704 <loop+0x2e8>)
    5540:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    5542:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5544:	4864      	ldr	r0, [pc, #400]	; (56d8 <loop+0x2bc>)
    5546:	8823      	ldrh	r3, [r4, #0]
    5548:	8861      	ldrh	r1, [r4, #2]
    554a:	fba0 0202 	umull	r0, r2, r0, r2
    554e:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    5552:	b29b      	uxth	r3, r3
    5554:	4299      	cmp	r1, r3
    5556:	d826      	bhi.n	55a6 <loop+0x18a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5558:	6833      	ldr	r3, [r6, #0]
    555a:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    555c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    555e:	4a5e      	ldr	r2, [pc, #376]	; (56d8 <loop+0x2bc>)
			LEDDebug(curr_leds);
    5560:	4869      	ldr	r0, [pc, #420]	; (5708 <loop+0x2ec>)
    5562:	fba2 2303 	umull	r2, r3, r2, r3
    5566:	099b      	lsrs	r3, r3, #6
    5568:	8023      	strh	r3, [r4, #0]
    556a:	f7fc f8e5 	bl	1738 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    556e:	783b      	ldrb	r3, [r7, #0]
    5570:	2b00      	cmp	r3, #0
    5572:	f040 812a 	bne.w	57ca <loop+0x3ae>
    5576:	2114      	movs	r1, #20
    5578:	4864      	ldr	r0, [pc, #400]	; (570c <loop+0x2f0>)
    557a:	f002 fb6d 	bl	7c58 <usb_serial_write>
				LEDDebug(next_leds);
			}
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
    557e:	4b64      	ldr	r3, [pc, #400]	; (5710 <loop+0x2f4>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5580:	4864      	ldr	r0, [pc, #400]	; (5714 <loop+0x2f8>)
    5582:	8819      	ldrh	r1, [r3, #0]
    5584:	f002 fdbc 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5588:	4862      	ldr	r0, [pc, #392]	; (5714 <loop+0x2f8>)
    558a:	f002 fd69 	bl	8060 <Print::println()>
    558e:	2116      	movs	r1, #22
    5590:	4861      	ldr	r0, [pc, #388]	; (5718 <loop+0x2fc>)
    5592:	f002 fb61 	bl	7c58 <usb_serial_write>
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
    5596:	4b61      	ldr	r3, [pc, #388]	; (571c <loop+0x300>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5598:	485e      	ldr	r0, [pc, #376]	; (5714 <loop+0x2f8>)
    559a:	8819      	ldrh	r1, [r3, #0]
    559c:	f002 fdb0 	bl	8100 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    55a0:	485c      	ldr	r0, [pc, #368]	; (5714 <loop+0x2f8>)
    55a2:	f002 fd5d 	bl	8060 <Print::println()>
		}
		EVERY_N_MINUTES(1) {
    55a6:	4d5e      	ldr	r5, [pc, #376]	; (5720 <loop+0x304>)
    55a8:	682b      	ldr	r3, [r5, #0]
    55aa:	07db      	lsls	r3, r3, #31
    55ac:	f140 80fe 	bpl.w	57ac <loop+0x390>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55b0:	6833      	ldr	r3, [r6, #0]
    55b2:	4c5c      	ldr	r4, [pc, #368]	; (5724 <loop+0x308>)
    55b4:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    55b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    55b8:	485b      	ldr	r0, [pc, #364]	; (5728 <loop+0x30c>)
    55ba:	8823      	ldrh	r3, [r4, #0]
    55bc:	8861      	ldrh	r1, [r4, #2]
    55be:	fba0 0202 	umull	r0, r2, r0, r2
    55c2:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    55c6:	b29b      	uxth	r3, r3
    55c8:	4299      	cmp	r1, r3
    55ca:	d80b      	bhi.n	55e4 <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55cc:	6833      	ldr	r3, [r6, #0]
			number_of_min_on++;
    55ce:	4953      	ldr	r1, [pc, #332]	; (571c <loop+0x300>)
    55d0:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    55d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    55d4:	4854      	ldr	r0, [pc, #336]	; (5728 <loop+0x30c>)
    55d6:	880a      	ldrh	r2, [r1, #0]
    55d8:	fba0 0303 	umull	r0, r3, r0, r3
    55dc:	0b9b      	lsrs	r3, r3, #14
    55de:	3201      	adds	r2, #1
    55e0:	8023      	strh	r3, [r4, #0]
    55e2:	800a      	strh	r2, [r1, #0]
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    55e4:	4851      	ldr	r0, [pc, #324]	; (572c <loop+0x310>)
    55e6:	7801      	ldrb	r1, [r0, #0]
    55e8:	f000 fd82 	bl	60f0 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    55ec:	b017      	add	sp, #92	; 0x5c
    55ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    55f2:	4640      	mov	r0, r8
    55f4:	f001 fa98 	bl	6b28 <__cxa_guard_acquire>
    55f8:	2800      	cmp	r0, #0
    55fa:	f040 811b 	bne.w	5834 <loop+0x418>
    55fe:	4c3f      	ldr	r4, [pc, #252]	; (56fc <loop+0x2e0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5600:	6833      	ldr	r3, [r6, #0]
    5602:	930f      	str	r3, [sp, #60]	; 0x3c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    5604:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    5608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    560a:	1a5b      	subs	r3, r3, r1
    560c:	4293      	cmp	r3, r2
    560e:	d38b      	bcc.n	5528 <loop+0x10c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5610:	6833      	ldr	r3, [r6, #0]
    5612:	930e      	str	r3, [sp, #56]	; 0x38
		if(in_transition){
    5614:	783b      	ldrb	r3, [r7, #0]
	return ret;
    5616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5618:	6022      	str	r2, [r4, #0]
    561a:	4a38      	ldr	r2, [pc, #224]	; (56fc <loop+0x2e0>)
    561c:	2b00      	cmp	r3, #0
    561e:	f040 80ce 	bne.w	57be <loop+0x3a2>
    5622:	4b39      	ldr	r3, [pc, #228]	; (5708 <loop+0x2ec>)
    5624:	4a42      	ldr	r2, [pc, #264]	; (5730 <loop+0x314>)
    5626:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    562a:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    562c:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    562e:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5630:	7014      	strb	r4, [r2, #0]
    5632:	3303      	adds	r3, #3
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    5634:	429d      	cmp	r5, r3
        g = rhs.g;
    5636:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    5638:	7091      	strb	r1, [r2, #2]
    563a:	f102 0203 	add.w	r2, r2, #3
    563e:	d1f4      	bne.n	562a <loop+0x20e>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    5640:	4d2f      	ldr	r5, [pc, #188]	; (5700 <loop+0x2e4>)
    5642:	682b      	ldr	r3, [r5, #0]
    5644:	07da      	lsls	r2, r3, #31
    5646:	f53f af79 	bmi.w	553c <loop+0x120>
    564a:	4628      	mov	r0, r5
    564c:	f001 fa6c 	bl	6b28 <__cxa_guard_acquire>
    5650:	2800      	cmp	r0, #0
    5652:	f040 80fa 	bne.w	584a <loop+0x42e>
    5656:	4c2b      	ldr	r4, [pc, #172]	; (5704 <loop+0x2e8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5658:	6833      	ldr	r3, [r6, #0]
    565a:	9312      	str	r3, [sp, #72]	; 0x48
    565c:	e771      	b.n	5542 <loop+0x126>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    565e:	4640      	mov	r0, r8
    5660:	f001 fa62 	bl	6b28 <__cxa_guard_acquire>
    5664:	2800      	cmp	r0, #0
    5666:	f040 80d9 	bne.w	581c <loop+0x400>
    566a:	4c23      	ldr	r4, [pc, #140]	; (56f8 <loop+0x2dc>)
    566c:	6833      	ldr	r3, [r6, #0]
    566e:	930c      	str	r3, [sp, #48]	; 0x30
    5670:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    5674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5676:	1a5b      	subs	r3, r3, r1
    5678:	4293      	cmp	r3, r2
    567a:	f4ff af46 	bcc.w	550a <loop+0xee>
    567e:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5682:	6833      	ldr	r3, [r6, #0]
    5684:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    5686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    5688:	481f      	ldr	r0, [pc, #124]	; (5708 <loop+0x2ec>)
    568a:	6062      	str	r2, [r4, #4]
    568c:	6023      	str	r3, [r4, #0]
    568e:	f7ff f8f3 	bl	4878 <switch_mode(LEDStruct&)>
    5692:	e73a      	b.n	550a <loop+0xee>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5694:	6833      	ldr	r3, [r6, #0]
    5696:	9305      	str	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5698:	4a0f      	ldr	r2, [pc, #60]	; (56d8 <loop+0x2bc>)
	return ret;
    569a:	9b05      	ldr	r3, [sp, #20]
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (in_transition) { change_palette(next_leds); }
    569c:	4f11      	ldr	r7, [pc, #68]	; (56e4 <loop+0x2c8>)
    569e:	fba2 2303 	umull	r2, r3, r2, r3
    56a2:	783a      	ldrb	r2, [r7, #0]
    56a4:	099b      	lsrs	r3, r3, #6
    56a6:	8023      	strh	r3, [r4, #0]
    56a8:	2a00      	cmp	r2, #0
    56aa:	d04b      	beq.n	5744 <loop+0x328>
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    56ac:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5734 <loop+0x318>
    56b0:	f899 3229 	ldrb.w	r3, [r9, #553]	; 0x229
    56b4:	2b00      	cmp	r3, #0
    56b6:	f43f aeef 	beq.w	5498 <loop+0x7c>
    56ba:	4648      	mov	r0, r9
    56bc:	f7fc fb54 	bl	1d68 <change_palette(LEDStruct&) [clone .part.11]>
    56c0:	f8df a044 	ldr.w	sl, [pc, #68]	; 5708 <loop+0x2ec>
    56c4:	e6ea      	b.n	549c <loop+0x80>
    56c6:	bf00      	nop
    56c8:	1fff93cc 	.word	0x1fff93cc
    56cc:	1fff8746 	.word	0x1fff8746
    56d0:	1fff9d48 	.word	0x1fff9d48
    56d4:	1fff8c78 	.word	0x1fff8c78
    56d8:	10624dd3 	.word	0x10624dd3
    56dc:	1fff93d0 	.word	0x1fff93d0
    56e0:	1fff93bc 	.word	0x1fff93bc
    56e4:	1fff93a4 	.word	0x1fff93a4
    56e8:	1fff93d4 	.word	0x1fff93d4
    56ec:	1fff93c0 	.word	0x1fff93c0
    56f0:	1fff95ef 	.word	0x1fff95ef
    56f4:	1fff93e1 	.word	0x1fff93e1
    56f8:	1fff939c 	.word	0x1fff939c
    56fc:	1fff9394 	.word	0x1fff9394
    5700:	1fff93d8 	.word	0x1fff93d8
    5704:	1fff8c7c 	.word	0x1fff8c7c
    5708:	1fff93f8 	.word	0x1fff93f8
    570c:	0000a874 	.word	0x0000a874
    5710:	1fff8c74 	.word	0x1fff8c74
    5714:	1fff8750 	.word	0x1fff8750
    5718:	0000a88c 	.word	0x0000a88c
    571c:	1fff93ec 	.word	0x1fff93ec
    5720:	1fff93dc 	.word	0x1fff93dc
    5724:	1fff93c8 	.word	0x1fff93c8
    5728:	45e7b273 	.word	0x45e7b273
    572c:	1fff9cd0 	.word	0x1fff9cd0
    5730:	1fff9b0c 	.word	0x1fff9b0c
    5734:	1fff8c80 	.word	0x1fff8c80
    5738:	1fff93f4 	.word	0x1fff93f4
    573c:	1fff93e0 	.word	0x1fff93e0
    5740:	1fff93f0 	.word	0x1fff93f0
    5744:	f8df a174 	ldr.w	sl, [pc, #372]	; 58bc <loop+0x4a0>
    5748:	f89a 3229 	ldrb.w	r3, [sl, #553]	; 0x229
    574c:	2b00      	cmp	r3, #0
    574e:	d147      	bne.n	57e0 <loop+0x3c4>
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    5750:	4d4d      	ldr	r5, [pc, #308]	; (5888 <loop+0x46c>)
    5752:	f8df 9150 	ldr.w	r9, [pc, #336]	; 58a4 <loop+0x488>
    5756:	682b      	ldr	r3, [r5, #0]
    5758:	07dc      	lsls	r4, r3, #31
    575a:	f53f aea4 	bmi.w	54a6 <loop+0x8a>
    575e:	4628      	mov	r0, r5
    5760:	f001 f9e2 	bl	6b28 <__cxa_guard_acquire>
    5764:	2800      	cmp	r0, #0
    5766:	d13f      	bne.n	57e8 <loop+0x3cc>
    5768:	4c48      	ldr	r4, [pc, #288]	; (588c <loop+0x470>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    576a:	6833      	ldr	r3, [r6, #0]
    576c:	e69d      	b.n	54aa <loop+0x8e>
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    576e:	4628      	mov	r0, r5
    5770:	f001 f9da 	bl	6b28 <__cxa_guard_acquire>
    5774:	2800      	cmp	r0, #0
    5776:	d142      	bne.n	57fe <loop+0x3e2>
    5778:	4c45      	ldr	r4, [pc, #276]	; (5890 <loop+0x474>)
    577a:	6833      	ldr	r3, [r6, #0]
    577c:	9306      	str	r3, [sp, #24]
    577e:	e67c      	b.n	547a <loop+0x5e>
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    5780:	4628      	mov	r0, r5
    5782:	f001 f9d1 	bl	6b28 <__cxa_guard_acquire>
    5786:	4e43      	ldr	r6, [pc, #268]	; (5894 <loop+0x478>)
    5788:	2800      	cmp	r0, #0
    578a:	f43f ae56 	beq.w	543a <loop+0x1e>
    578e:	6833      	ldr	r3, [r6, #0]
    5790:	9301      	str	r3, [sp, #4]
    5792:	4a41      	ldr	r2, [pc, #260]	; (5898 <loop+0x47c>)
	return ret;
    5794:	9b01      	ldr	r3, [sp, #4]
    5796:	4c41      	ldr	r4, [pc, #260]	; (589c <loop+0x480>)
    5798:	fba2 2303 	umull	r2, r3, r2, r3
    579c:	099b      	lsrs	r3, r3, #6
    579e:	2214      	movs	r2, #20
    57a0:	4628      	mov	r0, r5
    57a2:	8023      	strh	r3, [r4, #0]
    57a4:	8062      	strh	r2, [r4, #2]
    57a6:	f001 f9c5 	bl	6b34 <__cxa_guard_release>
    57aa:	e647      	b.n	543c <loop+0x20>
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    57ac:	4628      	mov	r0, r5
    57ae:	f001 f9bb 	bl	6b28 <__cxa_guard_acquire>
    57b2:	2800      	cmp	r0, #0
    57b4:	d158      	bne.n	5868 <loop+0x44c>
    57b6:	4c3a      	ldr	r4, [pc, #232]	; (58a0 <loop+0x484>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    57b8:	6833      	ldr	r3, [r6, #0]
    57ba:	9315      	str	r3, [sp, #84]	; 0x54
    57bc:	e6fb      	b.n	55b6 <loop+0x19a>
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    57be:	782b      	ldrb	r3, [r5, #0]

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    57c0:	4838      	ldr	r0, [pc, #224]	; (58a4 <loop+0x488>)
    57c2:	6053      	str	r3, [r2, #4]
    57c4:	f7ff f858 	bl	4878 <switch_mode(LEDStruct&)>
    57c8:	e6ae      	b.n	5528 <loop+0x10c>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    57ca:	4836      	ldr	r0, [pc, #216]	; (58a4 <loop+0x488>)
    57cc:	f7fb ffb4 	bl	1738 <LEDDebug(LEDStruct&)>
    57d0:	e6d1      	b.n	5576 <loop+0x15a>
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    57d2:	4935      	ldr	r1, [pc, #212]	; (58a8 <loop+0x48c>)
    57d4:	2218      	movs	r2, #24
    57d6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    57da:	f000 fbe9 	bl	5fb0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    57de:	e679      	b.n	54d4 <loop+0xb8>
    57e0:	4650      	mov	r0, sl
    57e2:	f7fc fac1 	bl	1d68 <change_palette(LEDStruct&) [clone .part.11]>
    57e6:	e7b3      	b.n	5750 <loop+0x334>
    57e8:	6833      	ldr	r3, [r6, #0]
    57ea:	4c28      	ldr	r4, [pc, #160]	; (588c <loop+0x470>)
    57ec:	9307      	str	r3, [sp, #28]
	return ret;
    57ee:	9b07      	ldr	r3, [sp, #28]
    57f0:	6023      	str	r3, [r4, #0]
    57f2:	2332      	movs	r3, #50	; 0x32
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    57f4:	4628      	mov	r0, r5
    57f6:	6063      	str	r3, [r4, #4]
    57f8:	f001 f99c 	bl	6b34 <__cxa_guard_release>
    57fc:	e7b5      	b.n	576a <loop+0x34e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    57fe:	6833      	ldr	r3, [r6, #0]
    5800:	9304      	str	r3, [sp, #16]
	return ret;
    5802:	9b04      	ldr	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5804:	4a24      	ldr	r2, [pc, #144]	; (5898 <loop+0x47c>)
    5806:	4c22      	ldr	r4, [pc, #136]	; (5890 <loop+0x474>)
    5808:	fba2 2303 	umull	r2, r3, r2, r3
    580c:	099b      	lsrs	r3, r3, #6
    580e:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    5810:	4628      	mov	r0, r5
    5812:	8023      	strh	r3, [r4, #0]
    5814:	8062      	strh	r2, [r4, #2]
    5816:	f001 f98d 	bl	6b34 <__cxa_guard_release>
    581a:	e7ae      	b.n	577a <loop+0x35e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    581c:	6833      	ldr	r3, [r6, #0]
    581e:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    5820:	4c22      	ldr	r4, [pc, #136]	; (58ac <loop+0x490>)
	return ret;
    5822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5824:	f89b 3000 	ldrb.w	r3, [fp]
    5828:	6022      	str	r2, [r4, #0]
    582a:	4640      	mov	r0, r8
    582c:	6063      	str	r3, [r4, #4]
    582e:	f001 f981 	bl	6b34 <__cxa_guard_release>
    5832:	e71b      	b.n	566c <loop+0x250>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5834:	6833      	ldr	r3, [r6, #0]
    5836:	930d      	str	r3, [sp, #52]	; 0x34
    5838:	4c1d      	ldr	r4, [pc, #116]	; (58b0 <loop+0x494>)
	return ret;
    583a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    583c:	782b      	ldrb	r3, [r5, #0]
    583e:	6022      	str	r2, [r4, #0]
    5840:	4640      	mov	r0, r8
    5842:	6063      	str	r3, [r4, #4]
    5844:	f001 f976 	bl	6b34 <__cxa_guard_release>
    5848:	e6da      	b.n	5600 <loop+0x1e4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    584a:	6833      	ldr	r3, [r6, #0]
    584c:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    584e:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5850:	4a11      	ldr	r2, [pc, #68]	; (5898 <loop+0x47c>)
    5852:	4c18      	ldr	r4, [pc, #96]	; (58b4 <loop+0x498>)
    5854:	fba2 2303 	umull	r2, r3, r2, r3
    5858:	099b      	lsrs	r3, r3, #6
    585a:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    585c:	4628      	mov	r0, r5
    585e:	8023      	strh	r3, [r4, #0]
    5860:	8062      	strh	r2, [r4, #2]
    5862:	f001 f967 	bl	6b34 <__cxa_guard_release>
    5866:	e6f7      	b.n	5658 <loop+0x23c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5868:	6833      	ldr	r3, [r6, #0]
    586a:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    586c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    586e:	4a12      	ldr	r2, [pc, #72]	; (58b8 <loop+0x49c>)
    5870:	4c0b      	ldr	r4, [pc, #44]	; (58a0 <loop+0x484>)
    5872:	fba2 2303 	umull	r2, r3, r2, r3
    5876:	0b9b      	lsrs	r3, r3, #14
    5878:	2201      	movs	r2, #1
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    587a:	4628      	mov	r0, r5
    587c:	8023      	strh	r3, [r4, #0]
    587e:	8062      	strh	r2, [r4, #2]
    5880:	f001 f958 	bl	6b34 <__cxa_guard_release>
    5884:	e798      	b.n	57b8 <loop+0x39c>
    5886:	bf00      	nop
    5888:	1fff93d4 	.word	0x1fff93d4
    588c:	1fff93c0 	.word	0x1fff93c0
    5890:	1fff93bc 	.word	0x1fff93bc
    5894:	1fff9d48 	.word	0x1fff9d48
    5898:	10624dd3 	.word	0x10624dd3
    589c:	1fff8c78 	.word	0x1fff8c78
    58a0:	1fff93c8 	.word	0x1fff93c8
    58a4:	1fff8c80 	.word	0x1fff8c80
    58a8:	1fff8e77 	.word	0x1fff8e77
    58ac:	1fff939c 	.word	0x1fff939c
    58b0:	1fff9394 	.word	0x1fff9394
    58b4:	1fff8c7c 	.word	0x1fff8c7c
    58b8:	45e7b273 	.word	0x45e7b273
    58bc:	1fff93f8 	.word	0x1fff93f8

000058c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    58c0:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    58c2:	0604      	lsls	r4, r0, #24
    58c4:	f100 8119 	bmi.w	5afa <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    58c8:	4b48      	ldr	r3, [pc, #288]	; (59ec <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    58ca:	4949      	ldr	r1, [pc, #292]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    58cc:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    58ce:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    58d0:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    58d2:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    58d4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    58d6:	bf00      	nop
    58d8:	bf00      	nop
    58da:	bf00      	nop
    58dc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    58de:	601a      	str	r2, [r3, #0]
    58e0:	bf00      	nop
    58e2:	bf00      	nop
    58e4:	bf00      	nop
    58e6:	bf00      	nop
    58e8:	0641      	lsls	r1, r0, #25
    58ea:	f140 8083 	bpl.w	59f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    58ee:	4a40      	ldr	r2, [pc, #256]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    58f0:	2102      	movs	r1, #2
    58f2:	2304      	movs	r3, #4
    58f4:	6011      	str	r1, [r2, #0]
    58f6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    58f8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    58fa:	bf00      	nop
    58fc:	bf00      	nop
    58fe:	bf00      	nop
    5900:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5902:	6053      	str	r3, [r2, #4]
    5904:	bf00      	nop
    5906:	bf00      	nop
    5908:	bf00      	nop
    590a:	bf00      	nop
    590c:	0682      	lsls	r2, r0, #26
    590e:	f140 8084 	bpl.w	5a1a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5912:	4a37      	ldr	r2, [pc, #220]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    5914:	2102      	movs	r1, #2
    5916:	2304      	movs	r3, #4
    5918:	6011      	str	r1, [r2, #0]
    591a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    591c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    591e:	bf00      	nop
    5920:	bf00      	nop
    5922:	bf00      	nop
    5924:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5926:	6053      	str	r3, [r2, #4]
    5928:	bf00      	nop
    592a:	bf00      	nop
    592c:	bf00      	nop
    592e:	bf00      	nop
    5930:	06c3      	lsls	r3, r0, #27
    5932:	f140 8085 	bpl.w	5a40 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5936:	4a2e      	ldr	r2, [pc, #184]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    5938:	2102      	movs	r1, #2
    593a:	2304      	movs	r3, #4
    593c:	6011      	str	r1, [r2, #0]
    593e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5940:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5942:	bf00      	nop
    5944:	bf00      	nop
    5946:	bf00      	nop
    5948:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    594a:	6053      	str	r3, [r2, #4]
    594c:	bf00      	nop
    594e:	bf00      	nop
    5950:	bf00      	nop
    5952:	bf00      	nop
    5954:	0704      	lsls	r4, r0, #28
    5956:	f140 8086 	bpl.w	5a66 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    595a:	4a25      	ldr	r2, [pc, #148]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    595c:	2102      	movs	r1, #2
    595e:	2304      	movs	r3, #4
    5960:	6011      	str	r1, [r2, #0]
    5962:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5964:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5966:	bf00      	nop
    5968:	bf00      	nop
    596a:	bf00      	nop
    596c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    596e:	6053      	str	r3, [r2, #4]
    5970:	bf00      	nop
    5972:	bf00      	nop
    5974:	bf00      	nop
    5976:	bf00      	nop
    5978:	0741      	lsls	r1, r0, #29
    597a:	f140 8087 	bpl.w	5a8c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    597e:	4a1c      	ldr	r2, [pc, #112]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    5980:	2102      	movs	r1, #2
    5982:	2304      	movs	r3, #4
    5984:	6011      	str	r1, [r2, #0]
    5986:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5988:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    598a:	bf00      	nop
    598c:	bf00      	nop
    598e:	bf00      	nop
    5990:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5992:	6053      	str	r3, [r2, #4]
    5994:	bf00      	nop
    5996:	bf00      	nop
    5998:	bf00      	nop
    599a:	bf00      	nop
    599c:	0782      	lsls	r2, r0, #30
    599e:	f140 8088 	bpl.w	5ab2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59a2:	4a13      	ldr	r2, [pc, #76]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    59a4:	2102      	movs	r1, #2
    59a6:	2304      	movs	r3, #4
    59a8:	6011      	str	r1, [r2, #0]
    59aa:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    59ac:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    59ae:	bf00      	nop
    59b0:	bf00      	nop
    59b2:	bf00      	nop
    59b4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    59b6:	6053      	str	r3, [r2, #4]
    59b8:	bf00      	nop
    59ba:	bf00      	nop
    59bc:	bf00      	nop
    59be:	bf00      	nop
    59c0:	07c3      	lsls	r3, r0, #31
    59c2:	f100 8089 	bmi.w	5ad8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    59c6:	4b09      	ldr	r3, [pc, #36]	; (59ec <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59c8:	4909      	ldr	r1, [pc, #36]	; (59f0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    59ca:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59cc:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    59ce:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59d0:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    59d2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    59d4:	bf00      	nop
    59d6:	bf00      	nop
    59d8:	bf00      	nop
    59da:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    59dc:	601a      	str	r2, [r3, #0]
    59de:	bf00      	nop
    59e0:	bf00      	nop
    59e2:	bf00      	nop
    59e4:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    59e6:	bc10      	pop	{r4}
    59e8:	4770      	bx	lr
    59ea:	bf00      	nop
    59ec:	400ff0c8 	.word	0x400ff0c8
    59f0:	400ff0c4 	.word	0x400ff0c4
    59f4:	4b49      	ldr	r3, [pc, #292]	; (5b1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59f6:	494a      	ldr	r1, [pc, #296]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    59f8:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59fa:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    59fc:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    59fe:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5a00:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5a02:	bf00      	nop
    5a04:	bf00      	nop
    5a06:	bf00      	nop
    5a08:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a0a:	601a      	str	r2, [r3, #0]
    5a0c:	bf00      	nop
    5a0e:	bf00      	nop
    5a10:	bf00      	nop
    5a12:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    5a14:	0682      	lsls	r2, r0, #26
    5a16:	f53f af7c 	bmi.w	5912 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    5a1a:	4b40      	ldr	r3, [pc, #256]	; (5b1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a1c:	4940      	ldr	r1, [pc, #256]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a1e:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a20:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a22:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a24:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5a26:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5a28:	bf00      	nop
    5a2a:	bf00      	nop
    5a2c:	bf00      	nop
    5a2e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a30:	601a      	str	r2, [r3, #0]
    5a32:	bf00      	nop
    5a34:	bf00      	nop
    5a36:	bf00      	nop
    5a38:	bf00      	nop
    5a3a:	06c3      	lsls	r3, r0, #27
    5a3c:	f53f af7b 	bmi.w	5936 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    5a40:	4b36      	ldr	r3, [pc, #216]	; (5b1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a42:	4937      	ldr	r1, [pc, #220]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a44:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a46:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a48:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a4a:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5a4c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5a4e:	bf00      	nop
    5a50:	bf00      	nop
    5a52:	bf00      	nop
    5a54:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a56:	601a      	str	r2, [r3, #0]
    5a58:	bf00      	nop
    5a5a:	bf00      	nop
    5a5c:	bf00      	nop
    5a5e:	bf00      	nop
    5a60:	0704      	lsls	r4, r0, #28
    5a62:	f53f af7a 	bmi.w	595a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    5a66:	4b2d      	ldr	r3, [pc, #180]	; (5b1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a68:	492d      	ldr	r1, [pc, #180]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a6a:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a6c:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a6e:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a70:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5a72:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5a74:	bf00      	nop
    5a76:	bf00      	nop
    5a78:	bf00      	nop
    5a7a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a7c:	601a      	str	r2, [r3, #0]
    5a7e:	bf00      	nop
    5a80:	bf00      	nop
    5a82:	bf00      	nop
    5a84:	bf00      	nop
    5a86:	0741      	lsls	r1, r0, #29
    5a88:	f53f af79 	bmi.w	597e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    5a8c:	4b23      	ldr	r3, [pc, #140]	; (5b1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a8e:	4924      	ldr	r1, [pc, #144]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a90:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a92:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5a94:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5a96:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5a98:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5a9a:	bf00      	nop
    5a9c:	bf00      	nop
    5a9e:	bf00      	nop
    5aa0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5aa2:	601a      	str	r2, [r3, #0]
    5aa4:	bf00      	nop
    5aa6:	bf00      	nop
    5aa8:	bf00      	nop
    5aaa:	bf00      	nop
    5aac:	0782      	lsls	r2, r0, #30
    5aae:	f53f af78 	bmi.w	59a2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    5ab2:	4b1a      	ldr	r3, [pc, #104]	; (5b1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5ab4:	491a      	ldr	r1, [pc, #104]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5ab6:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5ab8:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5aba:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5abc:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5abe:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5ac0:	bf00      	nop
    5ac2:	bf00      	nop
    5ac4:	bf00      	nop
    5ac6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5ac8:	601a      	str	r2, [r3, #0]
    5aca:	bf00      	nop
    5acc:	bf00      	nop
    5ace:	bf00      	nop
    5ad0:	bf00      	nop
    5ad2:	07c3      	lsls	r3, r0, #31
    5ad4:	f57f af77 	bpl.w	59c6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5ad8:	4a11      	ldr	r2, [pc, #68]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    5ada:	2102      	movs	r1, #2
    5adc:	2304      	movs	r3, #4
    5ade:	6011      	str	r1, [r2, #0]
    5ae0:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5ae2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5ae4:	bf00      	nop
    5ae6:	bf00      	nop
    5ae8:	bf00      	nop
    5aea:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5aec:	6053      	str	r3, [r2, #4]
    5aee:	bf00      	nop
    5af0:	bf00      	nop
    5af2:	bf00      	nop
    5af4:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    5af6:	bc10      	pop	{r4}
    5af8:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    5afa:	4a09      	ldr	r2, [pc, #36]	; (5b20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    5afc:	2102      	movs	r1, #2
    5afe:	2304      	movs	r3, #4
    5b00:	6011      	str	r1, [r2, #0]
    5b02:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    5b04:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    5b06:	bf00      	nop
    5b08:	bf00      	nop
    5b0a:	bf00      	nop
    5b0c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    5b0e:	6053      	str	r3, [r2, #4]
    5b10:	bf00      	nop
    5b12:	bf00      	nop
    5b14:	bf00      	nop
    5b16:	bf00      	nop
    5b18:	e6e6      	b.n	58e8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    5b1a:	bf00      	nop
    5b1c:	400ff0c8 	.word	0x400ff0c8
    5b20:	400ff0c4 	.word	0x400ff0c4

00005b24 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    5b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b28:	4682      	mov	sl, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    5b2a:	6980      	ldr	r0, [r0, #24]
    5b2c:	b081      	sub	sp, #4
    5b2e:	460c      	mov	r4, r1
    5b30:	b150      	cbz	r0, 5b48 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    5b32:	6803      	ldr	r3, [r0, #0]
    5b34:	4a46      	ldr	r2, [pc, #280]	; (5c50 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>)
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	4293      	cmp	r3, r2
    5b3a:	f040 8087 	bne.w	5c4c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    5b3e:	6842      	ldr	r2, [r0, #4]
    5b40:	7b01      	ldrb	r1, [r0, #12]
    5b42:	7813      	ldrb	r3, [r2, #0]
    5b44:	430b      	orrs	r3, r1
    5b46:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    5b48:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    5b4a:	7d27      	ldrb	r7, [r4, #20]
    5b4c:	f894 8013 	ldrb.w	r8, [r4, #19]
    5b50:	f894 9012 	ldrb.w	r9, [r4, #18]
    5b54:	f7ff feb4 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5b58:	2000      	movs	r0, #0
    5b5a:	f7ff feb1 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5b5e:	2000      	movs	r0, #0
    5b60:	f7ff feae 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5b64:	2000      	movs	r0, #0
    5b66:	f7ff feab 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    5b6a:	68a3      	ldr	r3, [r4, #8]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	dd44      	ble.n	5bfa <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    5b70:	6822      	ldr	r2, [r4, #0]
    5b72:	f109 0901 	add.w	r9, r9, #1
    5b76:	f108 0801 	add.w	r8, r8, #1
    5b7a:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    5b7c:	69a1      	ldr	r1, [r4, #24]
    5b7e:	1853      	adds	r3, r2, r1
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5b80:	5c56      	ldrb	r6, [r2, r1]
    5b82:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    5b84:	f893 b002 	ldrb.w	fp, [r3, #2]
    5b88:	fb08 f505 	mul.w	r5, r8, r5
    5b8c:	122d      	asrs	r5, r5, #8
    5b8e:	fb07 fb0b 	mul.w	fp, r7, fp
    5b92:	fb09 f606 	mul.w	r6, r9, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    5b96:	022d      	lsls	r5, r5, #8
    5b98:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    5b9a:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    5b9e:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    5ba0:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    5ba4:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    5ba6:	4335      	orrs	r5, r6
    5ba8:	f7ff fe8a 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5bac:	b2ad      	uxth	r5, r5
    5bae:	fa5f f08b 	uxtb.w	r0, fp
    5bb2:	f7ff fe85 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5bb6:	0a28      	lsrs	r0, r5, #8
    5bb8:	f7ff fe82 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5bbc:	b2e8      	uxtb	r0, r5
    5bbe:	f7ff fe7f 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5bc2:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5bc4:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    5bc6:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    5bc8:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5bcc:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5bce:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    5bd2:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    5bd6:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5bd8:	f994 2015 	ldrsb.w	r2, [r4, #21]
    5bdc:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5bde:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    5be2:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    5be6:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5bea:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    5bec:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    5bee:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    5bf0:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    5bf2:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    5bf4:	6022      	str	r2, [r4, #0]
    5bf6:	60a3      	str	r3, [r4, #8]
    5bf8:	dcc0      	bgt.n	5b7c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    5bfa:	6864      	ldr	r4, [r4, #4]
    5bfc:	2c00      	cmp	r4, #0
    5bfe:	bfb8      	it	lt
    5c00:	341f      	addlt	r4, #31
    5c02:	1164      	asrs	r4, r4, #5
    5c04:	20ff      	movs	r0, #255	; 0xff
    5c06:	f7ff fe5b 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5c0a:	2000      	movs	r0, #0
    5c0c:	f7ff fe58 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5c10:	2000      	movs	r0, #0
    5c12:	f7ff fe55 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5c16:	3c01      	subs	r4, #1
    5c18:	2000      	movs	r0, #0
    5c1a:	f7ff fe51 	bl	58c0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    5c1e:	1c63      	adds	r3, r4, #1
    5c20:	d1f0      	bne.n	5c04 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe0>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    5c22:	f8da 0018 	ldr.w	r0, [sl, #24]
    5c26:	b150      	cbz	r0, 5c3e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
    5c28:	6803      	ldr	r3, [r0, #0]
    5c2a:	4a0a      	ldr	r2, [pc, #40]	; (5c54 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130>)
    5c2c:	685b      	ldr	r3, [r3, #4]
    5c2e:	4293      	cmp	r3, r2
    5c30:	d108      	bne.n	5c44 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    5c32:	6842      	ldr	r2, [r0, #4]
    5c34:	7b01      	ldrb	r1, [r0, #12]
    5c36:	7813      	ldrb	r3, [r2, #0]
    5c38:	ea23 0301 	bic.w	r3, r3, r1
    5c3c:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    5c3e:	b001      	add	sp, #4
    5c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c44:	b001      	add	sp, #4
    5c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c4a:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    5c4c:	4798      	blx	r3
    5c4e:	e77b      	b.n	5b48 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    5c50:	00000475 	.word	0x00000475
    5c54:	00000481 	.word	0x00000481

00005c58 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    5c58:	b430      	push	{r4, r5}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    5c5a:	4912      	ldr	r1, [pc, #72]	; (5ca4 <_GLOBAL__sub_I_ib_jul01_gp+0x4c>)
    5c5c:	4a12      	ldr	r2, [pc, #72]	; (5ca8 <_GLOBAL__sub_I_ib_jul01_gp+0x50>)
    5c5e:	25ff      	movs	r5, #255	; 0xff
    5c60:	240f      	movs	r4, #15
    5c62:	2301      	movs	r3, #1
    5c64:	2000      	movs	r0, #0
    5c66:	f881 51c2 	strb.w	r5, [r1, #450]	; 0x1c2
    5c6a:	f882 51c2 	strb.w	r5, [r2, #450]	; 0x1c2
    5c6e:	f881 41c3 	strb.w	r4, [r1, #451]	; 0x1c3
    5c72:	f882 41c3 	strb.w	r4, [r2, #451]	; 0x1c3
    5c76:	f881 31c4 	strb.w	r3, [r1, #452]	; 0x1c4
    5c7a:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5
    5c7e:	f881 3227 	strb.w	r3, [r1, #551]	; 0x227
    5c82:	f881 3229 	strb.w	r3, [r1, #553]	; 0x229
    5c86:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
    5c8a:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
    5c8e:	f882 3227 	strb.w	r3, [r2, #551]	; 0x227
    5c92:	f882 3229 	strb.w	r3, [r2, #553]	; 0x229
    5c96:	f881 022d 	strb.w	r0, [r1, #557]	; 0x22d
    5c9a:	f882 022d 	strb.w	r0, [r2, #557]	; 0x22d
    5c9e:	bc30      	pop	{r4, r5}
    5ca0:	4770      	bx	lr
    5ca2:	bf00      	nop
    5ca4:	1fff93f8 	.word	0x1fff93f8
    5ca8:	1fff8c80 	.word	0x1fff8c80

00005cac <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    5cac:	2900      	cmp	r1, #0
    5cae:	dd0b      	ble.n	5cc8 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    5cb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5cb4:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5cb6:	7813      	ldrb	r3, [r2, #0]
    5cb8:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    5cba:	7853      	ldrb	r3, [r2, #1]
    5cbc:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    5cbe:	7893      	ldrb	r3, [r2, #2]
    5cc0:	7083      	strb	r3, [r0, #2]
    5cc2:	3003      	adds	r0, #3
    5cc4:	4288      	cmp	r0, r1
    5cc6:	d1f6      	bne.n	5cb6 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop

00005ccc <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    5ccc:	b570      	push	{r4, r5, r6, lr}
    5cce:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    5cd0:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    5cd2:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    5cd4:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    5cd6:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    5cda:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    5cde:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    5ce2:	dd10      	ble.n	5d06 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    5ce4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ce8:	461e      	mov	r6, r3
    5cea:	4604      	mov	r4, r0
    5cec:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5cee:	4621      	mov	r1, r4
    5cf0:	a801      	add	r0, sp, #4
    5cf2:	f000 faf9 	bl	62e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    5cf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5cfa:	3403      	adds	r4, #3
    5cfc:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    5cfe:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    5d00:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    5d04:	d1f3      	bne.n	5cee <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    5d06:	b002      	add	sp, #8
    5d08:	bd70      	pop	{r4, r5, r6, pc}
    5d0a:	bf00      	nop

00005d0c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    5d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    5d10:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    5d12:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    5d14:	d352      	bcc.n	5dbc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    5d16:	f896 e000 	ldrb.w	lr, [r6]
    5d1a:	7815      	ldrb	r5, [r2, #0]
    5d1c:	7877      	ldrb	r7, [r6, #1]
    5d1e:	f896 8002 	ldrb.w	r8, [r6, #2]
    5d22:	7854      	ldrb	r4, [r2, #1]
    5d24:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    5d28:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    5d2c:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    5d30:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    5d34:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    5d38:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    5d3c:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    5d40:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    5d44:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    5d46:	b3b2      	cbz	r2, 5db6 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    5d48:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    5d4c:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    5d50:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    5d54:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    5d58:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    5d5c:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5d60:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    5d62:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    5d66:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    5d6a:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    5d6e:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    5d72:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    5d76:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    5d7a:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    5d7e:	d818      	bhi.n	5db2 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    5d80:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5d84:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    5d86:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5d88:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5d8a:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    5d8e:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    5d92:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    5d96:	4475      	add	r5, lr
        g88 += gdelta87;
    5d98:	4454      	add	r4, sl
        b88 += bdelta87;
    5d9a:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5d9c:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5d9e:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    5da2:	b2ad      	uxth	r5, r5
        g = rhs.g;
    5da4:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    5da8:	b2a4      	uxth	r4, r4
        b = rhs.b;
    5daa:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    5dae:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    5db0:	d2e6      	bcs.n	5d80 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    5db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5db6:	f04f 0b01 	mov.w	fp, #1
    5dba:	e7c7      	b.n	5d4c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    5dbc:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5dbe:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5dc0:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5dc4:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5dc6:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    5dc8:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    5dcc:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5dd0:	7015      	strb	r5, [r2, #0]
    5dd2:	4619      	mov	r1, r3
    5dd4:	f886 e000 	strb.w	lr, [r6]
    5dd8:	464b      	mov	r3, r9
        g = rhs.g;
    5dda:	7054      	strb	r4, [r2, #1]
    5ddc:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    5dde:	f882 c002 	strb.w	ip, [r2, #2]
    5de2:	f886 8002 	strb.w	r8, [r6, #2]
    5de6:	e79f      	b.n	5d28 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00005de8 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    5de8:	b309      	cbz	r1, 5e2e <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    5dea:	b430      	push	{r4, r5}
    5dec:	1e4d      	subs	r5, r1, #1
    5dee:	b2ad      	uxth	r5, r5
    5df0:	43d2      	mvns	r2, r2
    5df2:	3501      	adds	r5, #1
    5df4:	b2d2      	uxtb	r2, r2
    5df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5dfa:	4405      	add	r5, r0
    5dfc:	3201      	adds	r2, #1
    5dfe:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5e00:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    5e04:	fb02 f303 	mul.w	r3, r2, r3
    5e08:	121b      	asrs	r3, r3, #8
    5e0a:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5e0e:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5e10:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5e12:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5e16:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5e1a:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5e1c:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5e1e:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5e20:	7083      	strb	r3, [r0, #2]
    5e22:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    5e24:	4285      	cmp	r5, r0
    5e26:	f104 0403 	add.w	r4, r4, #3
    5e2a:	d1e9      	bne.n	5e00 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    5e2c:	bc30      	pop	{r4, r5}
    5e2e:	4770      	bx	lr

00005e30 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    5e30:	f7ff bfda 	b.w	5de8 <fade_raw(CRGB*, unsigned short, unsigned char)>

00005e34 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    5e34:	b322      	cbz	r2, 5e80 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    5e36:	2aff      	cmp	r2, #255	; 0xff
    5e38:	d023      	beq.n	5e82 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    5e3a:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5e3c:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5e3e:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5e40:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5e42:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    5e44:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5e46:	43d2      	mvns	r2, r2
    5e48:	fb06 7605 	mla	r6, r6, r5, r7
    5e4c:	b2d2      	uxtb	r2, r2
    5e4e:	fb04 6402 	mla	r4, r4, r2, r6
    5e52:	f3c4 2407 	ubfx	r4, r4, #8, #8
    5e56:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5e58:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    5e5a:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    5e5c:	191f      	adds	r7, r3, r4
    5e5e:	fb04 7405 	mla	r4, r4, r5, r7
    5e62:	fb03 4302 	mla	r3, r3, r2, r4
    5e66:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5e6a:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    5e6c:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    5e6e:	18f1      	adds	r1, r6, r3
    5e70:	fb03 1505 	mla	r5, r3, r5, r1
    5e74:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    5e78:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    5e7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    5e7e:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    5e80:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5e82:	780b      	ldrb	r3, [r1, #0]
    5e84:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    5e86:	784b      	ldrb	r3, [r1, #1]
    5e88:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    5e8a:	788b      	ldrb	r3, [r1, #2]
    5e8c:	7083      	strb	r3, [r0, #2]
    5e8e:	4770      	bx	lr

00005e90 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    5e90:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5e92:	780d      	ldrb	r5, [r1, #0]
    5e94:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    5e96:	784d      	ldrb	r5, [r1, #1]
    5e98:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    5e9a:	7889      	ldrb	r1, [r1, #2]
    5e9c:	7081      	strb	r1, [r0, #2]
    5e9e:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    5ea0:	4611      	mov	r1, r2
    5ea2:	461a      	mov	r2, r3
    5ea4:	f7ff ffc6 	bl	5e34 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    5ea8:	4620      	mov	r0, r4
    5eaa:	bd38      	pop	{r3, r4, r5, pc}

00005eac <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5eac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    5eb0:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    5eb4:	3100      	adds	r1, #0
    5eb6:	bf18      	it	ne
    5eb8:	2101      	movne	r1, #1
    5eba:	eb01 2123 	add.w	r1, r1, r3, asr #8
    5ebe:	b2c9      	uxtb	r1, r1
    5ec0:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    5ec2:	060a      	lsls	r2, r1, #24
    5ec4:	b2db      	uxtb	r3, r3
    5ec6:	d40e      	bmi.n	5ee6 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    5ec8:	f001 0140 	and.w	r1, r1, #64	; 0x40
    5ecc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5ed0:	b919      	cbnz	r1, 5eda <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    5ed2:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    5ed4:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    5ed6:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    5ed8:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    5eda:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    5edc:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    5ede:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    5ee0:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    5ee2:	7082      	strb	r2, [r0, #2]
    5ee4:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    5ee6:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    5ee8:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    5eea:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    5eec:	7042      	strb	r2, [r0, #1]
    5eee:	4770      	bx	lr

00005ef0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    5ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    5ef4:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    5ef6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    5efa:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    5efe:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    5f00:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    5f04:	d000      	beq.n	5f08 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    5f06:	b9e6      	cbnz	r6, 5f42 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    5f08:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    5f0a:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    5f0c:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    5f0e:	2bff      	cmp	r3, #255	; 0xff
    5f10:	d012      	beq.n	5f38 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    5f12:	2b00      	cmp	r3, #0
    5f14:	d043      	beq.n	5f9e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    5f16:	3301      	adds	r3, #1
    5f18:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    5f1a:	b11c      	cbz	r4, 5f24 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5f1c:	fb03 4404 	mla	r4, r3, r4, r4
    5f20:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    5f24:	b119      	cbz	r1, 5f2e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    5f26:	fb03 1101 	mla	r1, r3, r1, r1
    5f2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    5f2e:	b11a      	cbz	r2, 5f38 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    5f30:	fb03 2202 	mla	r2, r3, r2, r2
    5f34:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    5f38:	7004      	strb	r4, [r0, #0]
    5f3a:	7041      	strb	r1, [r0, #1]
    5f3c:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    5f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    5f42:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    5f44:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    5f46:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    5f4a:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    5f4c:	d000      	beq.n	5f50 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    5f4e:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    5f50:	0112      	lsls	r2, r2, #4
    5f52:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    5f56:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5f58:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5f5c:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5f60:	f891 8002 	ldrb.w	r8, [r1, #2]
    5f64:	fb04 f606 	mul.w	r6, r4, r6
    5f68:	1c51      	adds	r1, r2, #1
    5f6a:	fb04 f509 	mul.w	r5, r4, r9
    5f6e:	fb04 f407 	mul.w	r4, r4, r7
    5f72:	f3c4 2407 	ubfx	r4, r4, #8, #8
    5f76:	f3c6 2707 	ubfx	r7, r6, #8, #8
    5f7a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5f7e:	fb01 f60c 	mul.w	r6, r1, ip
    5f82:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5f86:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5f8a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5f8e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5f92:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    5f96:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    5f98:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    5f9a:	b2d2      	uxtb	r2, r2
    5f9c:	e7b7      	b.n	5f0e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    5f9e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    5fa0:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    5fa2:	461c      	mov	r4, r3
    5fa4:	7004      	strb	r4, [r0, #0]
    5fa6:	7041      	strb	r1, [r0, #1]
    5fa8:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    5faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5fae:	bf00      	nop

00005fb0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    5fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fb2:	3901      	subs	r1, #1
    5fb4:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    5fb6:	2500      	movs	r5, #0
    5fb8:	302f      	adds	r0, #47	; 0x2f
    5fba:	e001      	b.n	5fc0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    5fbc:	4284      	cmp	r4, r0
    5fbe:	d01e      	beq.n	5ffe <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    5fc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    5fc4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    5fc8:	42b3      	cmp	r3, r6
    5fca:	d0f7      	beq.n	5fbc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    5fcc:	f103 0701 	add.w	r7, r3, #1
    5fd0:	d204      	bcs.n	5fdc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    5fd2:	b2fb      	uxtb	r3, r7
    5fd4:	7023      	strb	r3, [r4, #0]
    5fd6:	3501      	adds	r5, #1
    5fd8:	780e      	ldrb	r6, [r1, #0]
    5fda:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5fdc:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    5fde:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    5fe0:	b2ff      	uxtb	r7, r7
    5fe2:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    5fe6:	d208      	bcs.n	5ffa <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    5fe8:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    5fea:	780e      	ldrb	r6, [r1, #0]
    5fec:	42be      	cmp	r6, r7
    5fee:	bf38      	it	cc
    5ff0:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    5ff2:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    5ff6:	bf38      	it	cc
    5ff8:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    5ffa:	4295      	cmp	r5, r2
    5ffc:	d3de      	bcc.n	5fbc <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    5ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006000 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    6000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    6002:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    6004:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    6006:	4604      	mov	r4, r0
    6008:	bfcc      	ite	gt
    600a:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    600e:	2500      	movle	r5, #0
    6010:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    6012:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    6014:	bfd8      	it	le
    6016:	4616      	movle	r6, r2

	pLed->init();
    6018:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    601a:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    601c:	6823      	ldr	r3, [r4, #0]
    601e:	6062      	str	r2, [r4, #4]
    6020:	695b      	ldr	r3, [r3, #20]
    6022:	4a0a      	ldr	r2, [pc, #40]	; (604c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    6024:	6166      	str	r6, [r4, #20]
    6026:	4293      	cmp	r3, r2
    6028:	d101      	bne.n	602e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    602a:	4620      	mov	r0, r4
    602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    602e:	4620      	mov	r0, r4
    6030:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    6032:	2800      	cmp	r0, #0
    6034:	d0f9      	beq.n	602a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    6036:	4a06      	ldr	r2, [pc, #24]	; (6050 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    6038:	4b06      	ldr	r3, [pc, #24]	; (6054 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    603a:	6851      	ldr	r1, [r2, #4]
    603c:	fb93 f0f0 	sdiv	r0, r3, r0
    6040:	4288      	cmp	r0, r1
    6042:	bf38      	it	cc
    6044:	4608      	movcc	r0, r1
    6046:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    6048:	4620      	mov	r0, r4
    604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    604c:	00000471 	.word	0x00000471
    6050:	1fff9cd0 	.word	0x1fff9cd0
    6054:	000f4240 	.word	0x000f4240

00006058 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    6058:	4b08      	ldr	r3, [pc, #32]	; (607c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    605a:	b510      	push	{r4, lr}
    605c:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    605e:	b15c      	cbz	r4, 6078 <CFastLED::clearData()+0x20>
    6060:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    6062:	2100      	movs	r1, #0
    6064:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    6066:	b123      	cbz	r3, 6072 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    6068:	6962      	ldr	r2, [r4, #20]
    606a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    606e:	f002 fe4f 	bl	8d10 <memset>
    6072:	68a4      	ldr	r4, [r4, #8]
    6074:	2c00      	cmp	r4, #0
    6076:	d1f3      	bne.n	6060 <CFastLED::clearData()+0x8>
    6078:	bd10      	pop	{r4, pc}
    607a:	bf00      	nop
    607c:	1fff9ce0 	.word	0x1fff9ce0

00006080 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    6080:	4b07      	ldr	r3, [pc, #28]	; (60a0 <CFastLED::setCorrection(CRGB const&)+0x20>)
    6082:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6084:	b153      	cbz	r3, 609c <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    6086:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6088:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    608a:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    608c:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    608e:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6090:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    6092:	735a      	strb	r2, [r3, #13]
    6094:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6096:	2b00      	cmp	r3, #0
    6098:	d1f6      	bne.n	6088 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    609a:	bc10      	pop	{r4}
    609c:	4770      	bx	lr
    609e:	bf00      	nop
    60a0:	1fff9ce0 	.word	0x1fff9ce0

000060a4 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    60a4:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    60a6:	4c0f      	ldr	r4, [pc, #60]	; (60e4 <CFastLED::countFPS(int)+0x40>)
    60a8:	6822      	ldr	r2, [r4, #0]
    60aa:	1c53      	adds	r3, r2, #1
    60ac:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    60ae:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    60b0:	6023      	str	r3, [r4, #0]
    60b2:	db13      	blt.n	60dc <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60b4:	4d0c      	ldr	r5, [pc, #48]	; (60e8 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    60b6:	4a0d      	ldr	r2, [pc, #52]	; (60ec <CFastLED::countFPS(int)+0x48>)
    60b8:	6829      	ldr	r1, [r5, #0]
    60ba:	9101      	str	r1, [sp, #4]
	return ret;
    60bc:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60be:	682d      	ldr	r5, [r5, #0]
    60c0:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    60c2:	6816      	ldr	r6, [r2, #0]
	return ret;
    60c4:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    60c6:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    60c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    60cc:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    60ce:	1b89      	subs	r1, r1, r6
    60d0:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    60d4:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    60d6:	fbb3 f3f1 	udiv	r3, r3, r1
    60da:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    60dc:	b003      	add	sp, #12
    60de:	bc70      	pop	{r4, r5, r6}
    60e0:	4770      	bx	lr
    60e2:	bf00      	nop
    60e4:	1fff9ce4 	.word	0x1fff9ce4
    60e8:	1fff9d48 	.word	0x1fff9d48
    60ec:	1fff9cec 	.word	0x1fff9cec

000060f0 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    60f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60f4:	6843      	ldr	r3, [r0, #4]
    60f6:	4c2d      	ldr	r4, [pc, #180]	; (61ac <CFastLED::show(unsigned char)+0xbc>)
    60f8:	b083      	sub	sp, #12
    60fa:	4606      	mov	r6, r0
    60fc:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    60fe:	2b00      	cmp	r3, #0
    6100:	d14b      	bne.n	619a <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    6102:	f000 fd6f 	bl	6be4 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    6106:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    6108:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    610a:	b11b      	cbz	r3, 6114 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    610c:	4648      	mov	r0, r9
    610e:	68b1      	ldr	r1, [r6, #8]
    6110:	4798      	blx	r3
    6112:	4681      	mov	r9, r0
    6114:	4b26      	ldr	r3, [pc, #152]	; (61b0 <CFastLED::show(unsigned char)+0xc0>)
    6116:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    6118:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    611a:	2c00      	cmp	r4, #0
    611c:	d036      	beq.n	618c <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    611e:	8873      	ldrh	r3, [r6, #2]
    6120:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    6122:	6861      	ldr	r1, [r4, #4]
    6124:	6962      	ldr	r2, [r4, #20]
    6126:	2b63      	cmp	r3, #99	; 0x63
    6128:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    612a:	bf98      	it	ls
    612c:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    612e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    6132:	f88d 5004 	strb.w	r5, [sp, #4]
    6136:	f88d 5005 	strb.w	r5, [sp, #5]
    613a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    613e:	f1b9 0f00 	cmp.w	r9, #0
    6142:	d01c      	beq.n	617e <CFastLED::show(unsigned char)+0x8e>
    6144:	f104 030b 	add.w	r3, r4, #11
    6148:	f10d 0e04 	add.w	lr, sp, #4
    614c:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    6150:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    6154:	f1bb 0f00 	cmp.w	fp, #0
    6158:	d00d      	beq.n	6176 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    615a:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    615e:	f10a 0001 	add.w	r0, sl, #1
    6162:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    6166:	f1ba 0f00 	cmp.w	sl, #0
    616a:	d004      	beq.n	6176 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    616c:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    6170:	0c00      	lsrs	r0, r0, #16
    6172:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    6176:	4563      	cmp	r3, ip
    6178:	f10e 0e01 	add.w	lr, lr, #1
    617c:	d1e8      	bne.n	6150 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    617e:	4620      	mov	r0, r4
    6180:	ab01      	add	r3, sp, #4
    6182:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    6184:	74a7      	strb	r7, [r4, #18]
    6186:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6188:	2c00      	cmp	r4, #0
    618a:	d1c8      	bne.n	611e <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    618c:	4630      	mov	r0, r6
    618e:	2119      	movs	r1, #25
    6190:	f7ff ff88 	bl	60a4 <CFastLED::countFPS(int)>
}
    6194:	b003      	add	sp, #12
    6196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    619a:	f000 fd23 	bl	6be4 <micros>
    619e:	6822      	ldr	r2, [r4, #0]
    61a0:	6873      	ldr	r3, [r6, #4]
    61a2:	1a80      	subs	r0, r0, r2
    61a4:	4298      	cmp	r0, r3
    61a6:	d3aa      	bcc.n	60fe <CFastLED::show(unsigned char)+0xe>
    61a8:	e7ab      	b.n	6102 <CFastLED::show(unsigned char)+0x12>
    61aa:	bf00      	nop
    61ac:	1fff9ce8 	.word	0x1fff9ce8
    61b0:	1fff9ce0 	.word	0x1fff9ce0

000061b4 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    61b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61b6:	4d0a      	ldr	r5, [pc, #40]	; (61e0 <CFastLED::delay(unsigned long)+0x2c>)
    61b8:	b083      	sub	sp, #12
    61ba:	682b      	ldr	r3, [r5, #0]
    61bc:	9300      	str	r3, [sp, #0]
	return ret;
    61be:	9f00      	ldr	r7, [sp, #0]
    61c0:	4604      	mov	r4, r0
    61c2:	460e      	mov	r6, r1
    61c4:	7821      	ldrb	r1, [r4, #0]
    61c6:	4620      	mov	r0, r4
    61c8:	f7ff ff92 	bl	60f0 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    61cc:	f001 fffa 	bl	81c4 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61d0:	682b      	ldr	r3, [r5, #0]
    61d2:	9301      	str	r3, [sp, #4]
	return ret;
    61d4:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    61d6:	1bdb      	subs	r3, r3, r7
    61d8:	42b3      	cmp	r3, r6
    61da:	d3f3      	bcc.n	61c4 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    61dc:	b003      	add	sp, #12
    61de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61e0:	1fff9d48 	.word	0x1fff9d48

000061e4 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    61e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61e8:	6843      	ldr	r3, [r0, #4]
    61ea:	4c2c      	ldr	r4, [pc, #176]	; (629c <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    61ec:	b083      	sub	sp, #12
    61ee:	4606      	mov	r6, r0
    61f0:	468a      	mov	sl, r1
    61f2:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    61f4:	2b00      	cmp	r3, #0
    61f6:	d149      	bne.n	628c <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    61f8:	f000 fcf4 	bl	6be4 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    61fc:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    61fe:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    6200:	b11b      	cbz	r3, 620a <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    6202:	4648      	mov	r0, r9
    6204:	68b1      	ldr	r1, [r6, #8]
    6206:	4798      	blx	r3
    6208:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    620a:	4b25      	ldr	r3, [pc, #148]	; (62a0 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    620c:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    620e:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6210:	2c00      	cmp	r4, #0
    6212:	d034      	beq.n	627e <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    6214:	8873      	ldrh	r3, [r6, #2]
    6216:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    6218:	6962      	ldr	r2, [r4, #20]
    621a:	2b63      	cmp	r3, #99	; 0x63
    621c:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    621e:	bf98      	it	ls
    6220:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    6222:	f8d3 8000 	ldr.w	r8, [r3]
    6226:	f88d 5004 	strb.w	r5, [sp, #4]
    622a:	f88d 5005 	strb.w	r5, [sp, #5]
    622e:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    6232:	f1b9 0f00 	cmp.w	r9, #0
    6236:	d01a      	beq.n	626e <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    6238:	f104 030b 	add.w	r3, r4, #11
    623c:	a801      	add	r0, sp, #4
    623e:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    6242:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    6246:	f1bb 0f00 	cmp.w	fp, #0
    624a:	d00c      	beq.n	6266 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    624c:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    6250:	f10c 0101 	add.w	r1, ip, #1
    6254:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    6258:	f1bc 0f00 	cmp.w	ip, #0
    625c:	d003      	beq.n	6266 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    625e:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    6262:	0c09      	lsrs	r1, r1, #16
    6264:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    6266:	4573      	cmp	r3, lr
    6268:	f100 0001 	add.w	r0, r0, #1
    626c:	d1e9      	bne.n	6242 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    626e:	4620      	mov	r0, r4
    6270:	ab01      	add	r3, sp, #4
    6272:	4651      	mov	r1, sl
    6274:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    6276:	74a7      	strb	r7, [r4, #18]
    6278:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    627a:	2c00      	cmp	r4, #0
    627c:	d1ca      	bne.n	6214 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    627e:	4630      	mov	r0, r6
    6280:	2119      	movs	r1, #25
    6282:	f7ff ff0f 	bl	60a4 <CFastLED::countFPS(int)>
}
    6286:	b003      	add	sp, #12
    6288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    628c:	f000 fcaa 	bl	6be4 <micros>
    6290:	6822      	ldr	r2, [r4, #0]
    6292:	6873      	ldr	r3, [r6, #4]
    6294:	1a80      	subs	r0, r0, r2
    6296:	4298      	cmp	r0, r3
    6298:	d3ac      	bcc.n	61f4 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    629a:	e7ad      	b.n	61f8 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    629c:	1fff9ce8 	.word	0x1fff9ce8
    62a0:	1fff9ce0 	.word	0x1fff9ce0

000062a4 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    62a4:	b510      	push	{r4, lr}
    62a6:	4604      	mov	r4, r0
    62a8:	b082      	sub	sp, #8
	if(writeData) {
    62aa:	b151      	cbz	r1, 62c2 <CFastLED::clear(bool)+0x1e>
    62ac:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    62ae:	461a      	mov	r2, r3
    62b0:	a901      	add	r1, sp, #4
    62b2:	f88d 3004 	strb.w	r3, [sp, #4]
    62b6:	f88d 3005 	strb.w	r3, [sp, #5]
    62ba:	f88d 3006 	strb.w	r3, [sp, #6]
    62be:	f7ff ff91 	bl	61e4 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    62c2:	4620      	mov	r0, r4
    62c4:	f7ff fec8 	bl	6058 <CFastLED::clearData()>
}
    62c8:	b002      	add	sp, #8
    62ca:	bd10      	pop	{r4, pc}

000062cc <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    62cc:	2000      	movs	r0, #0
    62ce:	4770      	bx	lr

000062d0 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    62d0:	4b04      	ldr	r3, [pc, #16]	; (62e4 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    62d2:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    62d4:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    62d6:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    62da:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    62dc:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    62de:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    62e0:	60da      	str	r2, [r3, #12]
    62e2:	4770      	bx	lr
    62e4:	1fff9cd0 	.word	0x1fff9cd0

000062e8 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    62e8:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    62ea:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    62ec:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    62ee:	7882      	ldrb	r2, [r0, #2]
    62f0:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    62f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    62f6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    62fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    62fe:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    6300:	0625      	lsls	r5, r4, #24
    6302:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6306:	d45f      	bmi.n	63c8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    6308:	f004 0540 	and.w	r5, r4, #64	; 0x40
    630c:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    6310:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    6314:	2d00      	cmp	r5, #0
    6316:	d146      	bne.n	63a6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    6318:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    631c:	2c00      	cmp	r4, #0
    631e:	d06c      	beq.n	63fa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    6320:	3355      	adds	r3, #85	; 0x55
    6322:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    6324:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    6326:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    6328:	2eff      	cmp	r6, #255	; 0xff
    632a:	d01c      	beq.n	6366 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    632c:	2e00      	cmp	r6, #0
    632e:	d079      	beq.n	6424 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    6330:	b11c      	cbz	r4, 633a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    6332:	fb06 4404 	mla	r4, r6, r4, r4
    6336:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    633a:	b11d      	cbz	r5, 6344 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    633c:	fb06 5505 	mla	r5, r6, r5, r5
    6340:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    6344:	b11b      	cbz	r3, 634e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    6346:	fb06 3303 	mla	r3, r6, r3, r3
    634a:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    634e:	43f0      	mvns	r0, r6
    6350:	b2c0      	uxtb	r0, r0
    6352:	fb00 0000 	mla	r0, r0, r0, r0
    6356:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    635a:	4404      	add	r4, r0
            g += brightness_floor;
    635c:	4405      	add	r5, r0
            b += brightness_floor;
    635e:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    6360:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    6362:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    6364:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    6366:	2aff      	cmp	r2, #255	; 0xff
    6368:	d018      	beq.n	639c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    636a:	fb12 f002 	smulbb	r0, r2, r2
    636e:	3200      	adds	r2, #0
    6370:	bf18      	it	ne
    6372:	2201      	movne	r2, #1
    6374:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    6378:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    637c:	d056      	beq.n	642c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    637e:	b11c      	cbz	r4, 6388 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    6380:	fb02 4404 	mla	r4, r2, r4, r4
    6384:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    6388:	b11d      	cbz	r5, 6392 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    638a:	fb02 5505 	mla	r5, r2, r5, r5
    638e:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    6392:	b11b      	cbz	r3, 639c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    6394:	fb02 3303 	mla	r3, r2, r3, r3
    6398:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    639c:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    639e:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    63a0:	708b      	strb	r3, [r1, #2]
}
    63a2:	bcf0      	pop	{r4, r5, r6, r7}
    63a4:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    63a6:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    63aa:	bb5c      	cbnz	r4, 6404 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    63ac:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    63b0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    63b4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    63b8:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    63ba:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    63bc:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    63c0:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    63c2:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    63c4:	463b      	mov	r3, r7
    63c6:	e7af      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    63c8:	f004 0740 	and.w	r7, r4, #64	; 0x40
    63cc:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    63d0:	b9e7      	cbnz	r7, 640c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    63d2:	f004 0720 	and.w	r7, r4, #32
    63d6:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    63da:	2f00      	cmp	r7, #0
    63dc:	d136      	bne.n	644c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    63de:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    63e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    63e6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    63ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    63ee:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    63f2:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    63f4:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    63f6:	b2c3      	uxtb	r3, r0
    63f8:	e796      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    63fa:	43dc      	mvns	r4, r3
    63fc:	b2e4      	uxtb	r4, r4
                g = third;
    63fe:	461d      	mov	r5, r3
                b = 0;
    6400:	4603      	mov	r3, r0
    6402:	e791      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    6404:	2400      	movs	r4, #0
                g = K255 - third;
    6406:	43dd      	mvns	r5, r3
    6408:	b2ed      	uxtb	r5, r5
    640a:	e78d      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    640c:	f004 0420 	and.w	r4, r4, #32
    6410:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    6414:	b994      	cbnz	r4, 643c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    6416:	f103 0455 	add.w	r4, r3, #85	; 0x55
    641a:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    641c:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    6420:	b2db      	uxtb	r3, r3
    6422:	e781      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    6424:	23ff      	movs	r3, #255	; 0xff
    6426:	461d      	mov	r5, r3
    6428:	461c      	mov	r4, r3
    642a:	e79c      	b.n	6366 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    642c:	4615      	mov	r5, r2
    642e:	4614      	mov	r4, r2
    6430:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    6432:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    6434:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    6436:	708b      	strb	r3, [r1, #2]
}
    6438:	bcf0      	pop	{r4, r5, r6, r7}
    643a:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    643c:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    6440:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    6442:	2500      	movs	r5, #0
                b = K85 - third;
    6444:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    6448:	b2db      	uxtb	r3, r3
    644a:	e76d      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    644c:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    644e:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    6450:	b2c3      	uxtb	r3, r0
    6452:	e769      	b.n	6328 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00006454 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    6454:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    6456:	b361      	cbz	r1, 64b2 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    6458:	f101 3eff 	add.w	lr, r1, #4294967295
    645c:	fa1f fe8e 	uxth.w	lr, lr
    6460:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    6464:	2200      	movs	r2, #0
    6466:	f10e 0e06 	add.w	lr, lr, #6
    646a:	4486      	add	lr, r0
    646c:	1cc3      	adds	r3, r0, #3
    646e:	4615      	mov	r5, r2
    6470:	4614      	mov	r4, r2
        red32   += *p++;
    6472:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    6476:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    647a:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    647e:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    6480:	4573      	cmp	r3, lr
        red32   += *p++;
    6482:	443c      	add	r4, r7
        green32 += *p++;
    6484:	4405      	add	r5, r0
        blue32  += *p++;
    6486:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    6488:	d1f3      	bne.n	6472 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    648a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    648e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    6492:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    6496:	f3c4 1317 	ubfx	r3, r4, #4, #24
    649a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    649e:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    64a2:	0a12      	lsrs	r2, r2, #8
    64a4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    64a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    64ac:	1910      	adds	r0, r2, r4
}
    64ae:	4408      	add	r0, r1
    64b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    64b2:	460c      	mov	r4, r1
    64b4:	460a      	mov	r2, r1
    64b6:	e7f7      	b.n	64a8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

000064b8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    64b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    64bc:	4b25      	ldr	r3, [pc, #148]	; (6554 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    64be:	681c      	ldr	r4, [r3, #0]
    64c0:	b085      	sub	sp, #20
    64c2:	4607      	mov	r7, r0
    64c4:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    64c6:	b19c      	cbz	r4, 64f0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    64c8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 6560 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    64cc:	257d      	movs	r5, #125	; 0x7d
    64ce:	e007      	b.n	64e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    64d0:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    64d2:	b281      	uxth	r1, r0
    64d4:	4630      	mov	r0, r6
    64d6:	f7ff ffbd 	bl	6454 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    64da:	68a4      	ldr	r4, [r4, #8]
    64dc:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    64de:	b144      	cbz	r4, 64f2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    64e0:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    64e4:	691b      	ldr	r3, [r3, #16]
    64e6:	454b      	cmp	r3, r9
    64e8:	d0f2      	beq.n	64d0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    64ea:	4620      	mov	r0, r4
    64ec:	4798      	blx	r3
    64ee:	e7f0      	b.n	64d2 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    64f0:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    64f2:	fb05 f507 	mul.w	r5, r5, r7
    64f6:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    64f8:	4b17      	ldr	r3, [pc, #92]	; (6558 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    64fa:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    64fc:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    64fe:	d210      	bcs.n	6522 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    6500:	b323      	cbz	r3, 654c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    6502:	4a16      	ldr	r2, [pc, #88]	; (655c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    6504:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    6506:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    650a:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    650e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6512:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    6514:	4638      	mov	r0, r7
    6516:	ea23 0301 	bic.w	r3, r3, r1
    651a:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    651c:	b005      	add	sp, #20
    651e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    6522:	fb08 f707 	mul.w	r7, r8, r7
    6526:	fbb7 f0f5 	udiv	r0, r7, r5
    652a:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    652c:	b173      	cbz	r3, 654c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    652e:	4a0b      	ldr	r2, [pc, #44]	; (655c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    6530:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    6532:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    6536:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    653a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    653e:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    6540:	4638      	mov	r0, r7
    6542:	430b      	orrs	r3, r1
    6544:	7013      	strb	r3, [r2, #0]
}
    6546:	b005      	add	sp, #20
    6548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    654c:	4638      	mov	r0, r7
}
    654e:	b005      	add	sp, #20
    6550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6554:	1fff9ce0 	.word	0x1fff9ce0
    6558:	1fff9cf4 	.word	0x1fff9cf4
    655c:	0000b614 	.word	0x0000b614
    6560:	0000046d 	.word	0x0000046d

00006564 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    6564:	4b03      	ldr	r3, [pc, #12]	; (6574 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    6566:	4a04      	ldr	r2, [pc, #16]	; (6578 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    6568:	60da      	str	r2, [r3, #12]
    656a:	fb01 f100 	mul.w	r1, r1, r0
    656e:	6099      	str	r1, [r3, #8]
    6570:	4770      	bx	lr
    6572:	bf00      	nop
    6574:	1fff9cd0 	.word	0x1fff9cd0
    6578:	000064b9 	.word	0x000064b9

0000657c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    657c:	4807      	ldr	r0, [pc, #28]	; (659c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    657e:	b082      	sub	sp, #8
    6580:	6803      	ldr	r3, [r0, #0]
    6582:	9301      	str	r3, [sp, #4]
	return ret;
    6584:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    6586:	4411      	add	r1, r2
    6588:	e001      	b.n	658e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    658a:	4299      	cmp	r1, r3
    658c:	d304      	bcc.n	6598 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    658e:	6803      	ldr	r3, [r0, #0]
    6590:	9300      	str	r3, [sp, #0]
	return ret;
    6592:	9b00      	ldr	r3, [sp, #0]
    6594:	429a      	cmp	r2, r3
    6596:	d9f8      	bls.n	658a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    6598:	b002      	add	sp, #8
    659a:	4770      	bx	lr
    659c:	1fff9d48 	.word	0x1fff9d48

000065a0 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    65a0:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65a2:	4a10      	ldr	r2, [pc, #64]	; (65e4 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    65a4:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    65a6:	b9a1      	cbnz	r1, 65d2 <VisualMicroDebug::outPacketStart(bool)+0x32>
    65a8:	6813      	ldr	r3, [r2, #0]
    65aa:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    65ac:	6841      	ldr	r1, [r0, #4]
	return ret;
    65ae:	9b00      	ldr	r3, [sp, #0]
    65b0:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    65b2:	2931      	cmp	r1, #49	; 0x31
    65b4:	d80d      	bhi.n	65d2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65b6:	6813      	ldr	r3, [r2, #0]
    65b8:	9302      	str	r3, [sp, #8]
	return ret;
    65ba:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    65bc:	f104 0332 	add.w	r3, r4, #50	; 0x32
    65c0:	1a59      	subs	r1, r3, r1
    65c2:	e001      	b.n	65c8 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    65c4:	4299      	cmp	r1, r3
    65c6:	d304      	bcc.n	65d2 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65c8:	6813      	ldr	r3, [r2, #0]
    65ca:	9301      	str	r3, [sp, #4]
	return ret;
    65cc:	9b01      	ldr	r3, [sp, #4]
    65ce:	429c      	cmp	r4, r3
    65d0:	d9f8      	bls.n	65c4 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65d2:	6813      	ldr	r3, [r2, #0]
    65d4:	9303      	str	r3, [sp, #12]
	return ret;
    65d6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    65d8:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    65da:	2001      	movs	r0, #1
    65dc:	b005      	add	sp, #20
    65de:	bc10      	pop	{r4}
    65e0:	4770      	bx	lr
    65e2:	bf00      	nop
    65e4:	1fff9d48 	.word	0x1fff9d48

000065e8 <VisualMicroDebug::outPacketEnd()>:
    65e8:	4770      	bx	lr
    65ea:	bf00      	nop

000065ec <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    65ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    65f0:	f000 bb1a 	b.w	6c28 <delay>

000065f4 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    65f4:	2300      	movs	r3, #0
    65f6:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    65f8:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    65fa:	b171      	cbz	r1, 661a <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65fc:	4807      	ldr	r0, [pc, #28]	; (661c <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    65fe:	b082      	sub	sp, #8
    6600:	6803      	ldr	r3, [r0, #0]
    6602:	9301      	str	r3, [sp, #4]
	return ret;
    6604:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    6606:	4411      	add	r1, r2
    6608:	e001      	b.n	660e <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    660a:	4299      	cmp	r1, r3
    660c:	d304      	bcc.n	6618 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    660e:	6803      	ldr	r3, [r0, #0]
    6610:	9300      	str	r3, [sp, #0]
	return ret;
    6612:	9b00      	ldr	r3, [sp, #0]
    6614:	429a      	cmp	r2, r3
    6616:	d9f8      	bls.n	660a <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    6618:	b002      	add	sp, #8
    661a:	4770      	bx	lr
    661c:	1fff9d48 	.word	0x1fff9d48

00006620 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    6620:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6622:	4c13      	ldr	r4, [pc, #76]	; (6670 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    6624:	b085      	sub	sp, #20
    6626:	6823      	ldr	r3, [r4, #0]
    6628:	9303      	str	r3, [sp, #12]
	return ret;
    662a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    662c:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    662e:	460d      	mov	r5, r1
    6630:	4810      	ldr	r0, [pc, #64]	; (6674 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    6632:	2106      	movs	r1, #6
    6634:	f001 fb10 	bl	7c58 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    6638:	2300      	movs	r3, #0
    663a:	220a      	movs	r2, #10
    663c:	4629      	mov	r1, r5
    663e:	480e      	ldr	r0, [pc, #56]	; (6678 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    6640:	f001 fd1e 	bl	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6644:	2106      	movs	r1, #6
    6646:	480d      	ldr	r0, [pc, #52]	; (667c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    6648:	f001 fb06 	bl	7c58 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    664c:	480a      	ldr	r0, [pc, #40]	; (6678 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    664e:	f001 fd07 	bl	8060 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6652:	6823      	ldr	r3, [r4, #0]
    6654:	9302      	str	r3, [sp, #8]
	return ret;
    6656:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    6658:	f102 0132 	add.w	r1, r2, #50	; 0x32
    665c:	e001      	b.n	6662 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    665e:	4299      	cmp	r1, r3
    6660:	d304      	bcc.n	666c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6662:	6823      	ldr	r3, [r4, #0]
    6664:	9301      	str	r3, [sp, #4]
	return ret;
    6666:	9b01      	ldr	r3, [sp, #4]
    6668:	429a      	cmp	r2, r3
    666a:	d9f8      	bls.n	665e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    666c:	b005      	add	sp, #20
    666e:	bd30      	pop	{r4, r5, pc}
    6670:	1fff9d48 	.word	0x1fff9d48
    6674:	0000b590 	.word	0x0000b590
    6678:	1fff8750 	.word	0x1fff8750
    667c:	0000b598 	.word	0x0000b598

00006680 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    6680:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    6682:	7e03      	ldrb	r3, [r0, #24]
    6684:	b90b      	cbnz	r3, 668a <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    6686:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    6688:	bd38      	pop	{r3, r4, r5, pc}
    668a:	460d      	mov	r5, r1
    668c:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    668e:	f001 fab9 	bl	7c04 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    6692:	f010 0fff 	tst.w	r0, #255	; 0xff
    6696:	d101      	bne.n	669c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    6698:	2065      	movs	r0, #101	; 0x65
    669a:	bd38      	pop	{r3, r4, r5, pc}
    669c:	f001 fab2 	bl	7c04 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    66a0:	f010 0fff 	tst.w	r0, #255	; 0xff
    66a4:	d0f8      	beq.n	6698 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    66a6:	f001 fa71 	bl	7b8c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    66aa:	b2c0      	uxtb	r0, r0
    66ac:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    66b0:	2b1e      	cmp	r3, #30
    66b2:	d8f3      	bhi.n	669c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    66b4:	a201      	add	r2, pc, #4	; (adr r2, 66bc <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    66b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    66ba:	bf00      	nop
    66bc:	00006745 	.word	0x00006745
    66c0:	0000669d 	.word	0x0000669d
    66c4:	0000669d 	.word	0x0000669d
    66c8:	0000669d 	.word	0x0000669d
    66cc:	0000669d 	.word	0x0000669d
    66d0:	0000669d 	.word	0x0000669d
    66d4:	0000669d 	.word	0x0000669d
    66d8:	0000669d 	.word	0x0000669d
    66dc:	0000669d 	.word	0x0000669d
    66e0:	0000669d 	.word	0x0000669d
    66e4:	0000669d 	.word	0x0000669d
    66e8:	00006739 	.word	0x00006739
    66ec:	0000669d 	.word	0x0000669d
    66f0:	0000669d 	.word	0x0000669d
    66f4:	0000669d 	.word	0x0000669d
    66f8:	0000669d 	.word	0x0000669d
    66fc:	00006687 	.word	0x00006687
    6700:	0000669d 	.word	0x0000669d
    6704:	0000669d 	.word	0x0000669d
    6708:	0000669d 	.word	0x0000669d
    670c:	0000669d 	.word	0x0000669d
    6710:	0000669d 	.word	0x0000669d
    6714:	0000669d 	.word	0x0000669d
    6718:	0000669d 	.word	0x0000669d
    671c:	0000669d 	.word	0x0000669d
    6720:	00006687 	.word	0x00006687
    6724:	0000669d 	.word	0x0000669d
    6728:	0000669d 	.word	0x0000669d
    672c:	0000669d 	.word	0x0000669d
    6730:	0000669d 	.word	0x0000669d
    6734:	00006689 	.word	0x00006689
		{

		case 'c':
			sendContinuedACK(breakPointId);
    6738:	4620      	mov	r0, r4
    673a:	4629      	mov	r1, r5
    673c:	f7ff ff70 	bl	6620 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    6740:	2063      	movs	r0, #99	; 0x63
    6742:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    6744:	2300      	movs	r3, #0
    6746:	7623      	strb	r3, [r4, #24]
			return 'c';
    6748:	2063      	movs	r0, #99	; 0x63
    674a:	bd38      	pop	{r3, r4, r5, pc}

0000674c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    674c:	b570      	push	{r4, r5, r6, lr}
    674e:	4605      	mov	r5, r0
    6750:	b082      	sub	sp, #8
    6752:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    6754:	b1c9      	cbz	r1, 678a <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    6756:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6758:	4c0d      	ldr	r4, [pc, #52]	; (6790 <VisualMicroDebug::start(bool, bool)+0x44>)
    675a:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    675c:	2100      	movs	r1, #0
    675e:	4628      	mov	r0, r5
    6760:	f7ff ff8e 	bl	6680 <VisualMicroDebug::breakWait(unsigned char)>
    6764:	2863      	cmp	r0, #99	; 0x63
    6766:	d010      	beq.n	678a <VisualMicroDebug::start(bool, bool)+0x3e>
    6768:	6823      	ldr	r3, [r4, #0]
    676a:	9301      	str	r3, [sp, #4]
	return ret;
    676c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    676e:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6770:	6823      	ldr	r3, [r4, #0]
    6772:	9300      	str	r3, [sp, #0]
	return ret;
    6774:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    6776:	429a      	cmp	r2, r3
    6778:	d8f0      	bhi.n	675c <VisualMicroDebug::start(bool, bool)+0x10>
    677a:	4299      	cmp	r1, r3
    677c:	d2f8      	bcs.n	6770 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    677e:	2100      	movs	r1, #0
    6780:	4628      	mov	r0, r5
    6782:	f7ff ff7d 	bl	6680 <VisualMicroDebug::breakWait(unsigned char)>
    6786:	2863      	cmp	r0, #99	; 0x63
    6788:	d1ee      	bne.n	6768 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    678a:	762e      	strb	r6, [r5, #24]
#endif

}
    678c:	b002      	add	sp, #8
    678e:	bd70      	pop	{r4, r5, r6, pc}
    6790:	1fff9d48 	.word	0x1fff9d48

00006794 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    6794:	4b03      	ldr	r3, [pc, #12]	; (67a4 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    6796:	2200      	movs	r2, #0
    6798:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    679a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    679c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    679e:	615a      	str	r2, [r3, #20]
    67a0:	4770      	bx	lr
    67a2:	bf00      	nop
    67a4:	1fff9cf8 	.word	0x1fff9cf8

000067a8 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    67a8:	4a37      	ldr	r2, [pc, #220]	; (6888 <wait_for_cal+0xe0>)
    67aa:	4938      	ldr	r1, [pc, #224]	; (688c <wait_for_cal+0xe4>)
    67ac:	6813      	ldr	r3, [r2, #0]
    67ae:	061b      	lsls	r3, r3, #24
    67b0:	d4fc      	bmi.n	67ac <wait_for_cal+0x4>
    67b2:	680b      	ldr	r3, [r1, #0]
    67b4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    67b8:	d1f8      	bne.n	67ac <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    67ba:	b672      	cpsid	i
	if (calibrating) {
    67bc:	4934      	ldr	r1, [pc, #208]	; (6890 <wait_for_cal+0xe8>)
    67be:	780a      	ldrb	r2, [r1, #0]
    67c0:	2a00      	cmp	r2, #0
    67c2:	d05f      	beq.n	6884 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    67c4:	4a33      	ldr	r2, [pc, #204]	; (6894 <wait_for_cal+0xec>)
    67c6:	4834      	ldr	r0, [pc, #208]	; (6898 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    67c8:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    67ca:	4c34      	ldr	r4, [pc, #208]	; (689c <wait_for_cal+0xf4>)
    67cc:	6817      	ldr	r7, [r2, #0]
    67ce:	6806      	ldr	r6, [r0, #0]
    67d0:	6825      	ldr	r5, [r4, #0]
    67d2:	68d4      	ldr	r4, [r2, #12]
    67d4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    67d6:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    67d8:	3214      	adds	r2, #20
    67da:	6800      	ldr	r0, [r0, #0]
    67dc:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    67de:	4f30      	ldr	r7, [pc, #192]	; (68a0 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    67e0:	4435      	add	r5, r6
    67e2:	442c      	add	r4, r5
    67e4:	4420      	add	r0, r4
    67e6:	4402      	add	r2, r0
    67e8:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    67ec:	4e2d      	ldr	r6, [pc, #180]	; (68a4 <wait_for_cal+0xfc>)
    67ee:	482e      	ldr	r0, [pc, #184]	; (68a8 <wait_for_cal+0x100>)
    67f0:	4d2e      	ldr	r5, [pc, #184]	; (68ac <wait_for_cal+0x104>)
    67f2:	4c2f      	ldr	r4, [pc, #188]	; (68b0 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    67f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    67f8:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    67fa:	6837      	ldr	r7, [r6, #0]
    67fc:	6806      	ldr	r6, [r0, #0]
    67fe:	682d      	ldr	r5, [r5, #0]
    6800:	4a2c      	ldr	r2, [pc, #176]	; (68b4 <wait_for_cal+0x10c>)
    6802:	6824      	ldr	r4, [r4, #0]
    6804:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    6806:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    6808:	6800      	ldr	r0, [r0, #0]
    680a:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    680c:	4f2a      	ldr	r7, [pc, #168]	; (68b8 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    680e:	4435      	add	r5, r6
    6810:	442c      	add	r4, r5
    6812:	4420      	add	r0, r4
    6814:	4402      	add	r2, r0
    6816:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    681a:	4e28      	ldr	r6, [pc, #160]	; (68bc <wait_for_cal+0x114>)
    681c:	4828      	ldr	r0, [pc, #160]	; (68c0 <wait_for_cal+0x118>)
    681e:	4d29      	ldr	r5, [pc, #164]	; (68c4 <wait_for_cal+0x11c>)
    6820:	4c29      	ldr	r4, [pc, #164]	; (68c8 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    6822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    6826:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    6828:	6837      	ldr	r7, [r6, #0]
    682a:	6806      	ldr	r6, [r0, #0]
    682c:	682d      	ldr	r5, [r5, #0]
    682e:	4a27      	ldr	r2, [pc, #156]	; (68cc <wait_for_cal+0x124>)
    6830:	6824      	ldr	r4, [r4, #0]
    6832:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    6834:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    6836:	6800      	ldr	r0, [r0, #0]
    6838:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    683a:	4f25      	ldr	r7, [pc, #148]	; (68d0 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    683c:	4435      	add	r5, r6
    683e:	442c      	add	r4, r5
    6840:	4420      	add	r0, r4
    6842:	4402      	add	r2, r0
    6844:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    6848:	4e22      	ldr	r6, [pc, #136]	; (68d4 <wait_for_cal+0x12c>)
    684a:	4823      	ldr	r0, [pc, #140]	; (68d8 <wait_for_cal+0x130>)
    684c:	4d23      	ldr	r5, [pc, #140]	; (68dc <wait_for_cal+0x134>)
    684e:	4c24      	ldr	r4, [pc, #144]	; (68e0 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    6850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    6854:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    6856:	6837      	ldr	r7, [r6, #0]
    6858:	6806      	ldr	r6, [r0, #0]
    685a:	682d      	ldr	r5, [r5, #0]
    685c:	4a21      	ldr	r2, [pc, #132]	; (68e4 <wait_for_cal+0x13c>)
    685e:	6824      	ldr	r4, [r4, #0]
    6860:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    6862:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    6864:	6800      	ldr	r0, [r0, #0]
    6866:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    6868:	4435      	add	r5, r6
    686a:	442c      	add	r4, r5
    686c:	4420      	add	r0, r4
    686e:	4402      	add	r2, r0
    6870:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    6874:	481c      	ldr	r0, [pc, #112]	; (68e8 <wait_for_cal+0x140>)
    6876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    687a:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    687c:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    687e:	b662      	cpsie	i
}
    6880:	bcf0      	pop	{r4, r5, r6, r7}
    6882:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    6884:	b662      	cpsie	i
    6886:	4770      	bx	lr
    6888:	4003b024 	.word	0x4003b024
    688c:	400bb024 	.word	0x400bb024
    6890:	1fff9d41 	.word	0x1fff9d41
    6894:	4003b038 	.word	0x4003b038
    6898:	4003b03c 	.word	0x4003b03c
    689c:	4003b040 	.word	0x4003b040
    68a0:	4003b02c 	.word	0x4003b02c
    68a4:	4003b058 	.word	0x4003b058
    68a8:	4003b05c 	.word	0x4003b05c
    68ac:	4003b060 	.word	0x4003b060
    68b0:	4003b064 	.word	0x4003b064
    68b4:	4003b06c 	.word	0x4003b06c
    68b8:	4003b030 	.word	0x4003b030
    68bc:	400bb038 	.word	0x400bb038
    68c0:	400bb03c 	.word	0x400bb03c
    68c4:	400bb040 	.word	0x400bb040
    68c8:	400bb044 	.word	0x400bb044
    68cc:	400bb04c 	.word	0x400bb04c
    68d0:	400bb02c 	.word	0x400bb02c
    68d4:	400bb058 	.word	0x400bb058
    68d8:	400bb05c 	.word	0x400bb05c
    68dc:	400bb060 	.word	0x400bb060
    68e0:	400bb064 	.word	0x400bb064
    68e4:	400bb06c 	.word	0x400bb06c
    68e8:	400bb030 	.word	0x400bb030

000068ec <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    68ec:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    68ee:	4829      	ldr	r0, [pc, #164]	; (6994 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    68f0:	4a29      	ldr	r2, [pc, #164]	; (6998 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    68f2:	4b2a      	ldr	r3, [pc, #168]	; (699c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    68f4:	4d2a      	ldr	r5, [pc, #168]	; (69a0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    68f6:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    68f8:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    68fa:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    68fc:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    68fe:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6900:	4c28      	ldr	r4, [pc, #160]	; (69a4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    6902:	2b08      	cmp	r3, #8
    6904:	d030      	beq.n	6968 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    6906:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6908:	4827      	ldr	r0, [pc, #156]	; (69a8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    690a:	4928      	ldr	r1, [pc, #160]	; (69ac <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    690c:	d037      	beq.n	697e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    690e:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    6910:	bf0c      	ite	eq
    6912:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6914:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    6916:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    6918:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    691a:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    691c:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    691e:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6920:	4b23      	ldr	r3, [pc, #140]	; (69b0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6922:	4924      	ldr	r1, [pc, #144]	; (69b4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6924:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    6926:	4a24      	ldr	r2, [pc, #144]	; (69b8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    6928:	b1bb      	cbz	r3, 695a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    692a:	2301      	movs	r3, #1
    692c:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    692e:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    6930:	4b22      	ldr	r3, [pc, #136]	; (69bc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    6932:	4923      	ldr	r1, [pc, #140]	; (69c0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    6934:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    6936:	4a23      	ldr	r2, [pc, #140]	; (69c4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    6938:	2b01      	cmp	r3, #1
    693a:	d926      	bls.n	698a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    693c:	2b04      	cmp	r3, #4
    693e:	d90f      	bls.n	6960 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    6940:	2b08      	cmp	r3, #8
    6942:	d91e      	bls.n	6982 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    6944:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    6946:	bf94      	ite	ls
    6948:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    694a:	2387      	movhi	r3, #135	; 0x87
    694c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    694e:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    6950:	4b1d      	ldr	r3, [pc, #116]	; (69c8 <analog_init+0xdc>)
    6952:	2201      	movs	r2, #1
    6954:	701a      	strb	r2, [r3, #0]
}
    6956:	bc30      	pop	{r4, r5}
    6958:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    695a:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    695c:	6013      	str	r3, [r2, #0]
    695e:	e7e7      	b.n	6930 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    6960:	2384      	movs	r3, #132	; 0x84
    6962:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    6964:	6013      	str	r3, [r2, #0]
    6966:	e7f3      	b.n	6950 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6968:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    696c:	490f      	ldr	r1, [pc, #60]	; (69ac <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    696e:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    6970:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6972:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6974:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    6976:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    6978:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    697a:	600b      	str	r3, [r1, #0]
    697c:	e7d0      	b.n	6920 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    697e:	2239      	movs	r2, #57	; 0x39
    6980:	e7f7      	b.n	6972 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    6982:	2385      	movs	r3, #133	; 0x85
    6984:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    6986:	6013      	str	r3, [r2, #0]
    6988:	e7e2      	b.n	6950 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    698a:	2380      	movs	r3, #128	; 0x80
    698c:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    698e:	6013      	str	r3, [r2, #0]
    6990:	e7de      	b.n	6950 <analog_init+0x64>
    6992:	bf00      	nop
    6994:	40074000 	.word	0x40074000
    6998:	40074001 	.word	0x40074001
    699c:	1fff8748 	.word	0x1fff8748
    69a0:	4003b008 	.word	0x4003b008
    69a4:	4003b00c 	.word	0x4003b00c
    69a8:	400bb008 	.word	0x400bb008
    69ac:	400bb00c 	.word	0x400bb00c
    69b0:	1fff9d44 	.word	0x1fff9d44
    69b4:	4003b020 	.word	0x4003b020
    69b8:	400bb020 	.word	0x400bb020
    69bc:	1fff8749 	.word	0x1fff8749
    69c0:	4003b024 	.word	0x4003b024
    69c4:	400bb024 	.word	0x400bb024
    69c8:	1fff9d41 	.word	0x1fff9d41

000069cc <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    69cc:	2828      	cmp	r0, #40	; 0x28
    69ce:	d82f      	bhi.n	6a30 <analogRead+0x64>
	channel = pin2sc1a[pin];
    69d0:	4b33      	ldr	r3, [pc, #204]	; (6aa0 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    69d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    69d6:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    69d8:	2eff      	cmp	r6, #255	; 0xff
    69da:	d02b      	beq.n	6a34 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    69dc:	4b31      	ldr	r3, [pc, #196]	; (6aa4 <analogRead+0xd8>)
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	2b00      	cmp	r3, #0
    69e2:	d12a      	bne.n	6a3a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    69e4:	0632      	lsls	r2, r6, #24
    69e6:	d42c      	bmi.n	6a42 <analogRead+0x76>
#endif

	__disable_irq();
    69e8:	b672      	cpsid	i
    69ea:	4d2f      	ldr	r5, [pc, #188]	; (6aa8 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    69ec:	4c2f      	ldr	r4, [pc, #188]	; (6aac <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    69ee:	462f      	mov	r7, r5
    69f0:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    69f2:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    69f4:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    69f6:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    69f8:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    69fa:	6823      	ldr	r3, [r4, #0]
    69fc:	061b      	lsls	r3, r3, #24
    69fe:	d40c      	bmi.n	6a1a <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    6a00:	783b      	ldrb	r3, [r7, #0]
    6a02:	b91b      	cbnz	r3, 6a0c <analogRead+0x40>
    6a04:	e7f4      	b.n	69f0 <analogRead+0x24>
    6a06:	782b      	ldrb	r3, [r5, #0]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d0f1      	beq.n	69f0 <analogRead+0x24>
		__enable_irq();
    6a0c:	b662      	cpsie	i
		yield();
    6a0e:	f001 fbd9 	bl	81c4 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    6a12:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    6a14:	6823      	ldr	r3, [r4, #0]
    6a16:	0618      	lsls	r0, r3, #24
    6a18:	d5f5      	bpl.n	6a06 <analogRead+0x3a>
			result = ADC0_RA;
    6a1a:	4b25      	ldr	r3, [pc, #148]	; (6ab0 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    6a1c:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    6a1e:	2200      	movs	r2, #0
    6a20:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    6a22:	b662      	cpsie	i
			result >>= analog_right_shift;
    6a24:	4a23      	ldr	r2, [pc, #140]	; (6ab4 <analogRead+0xe8>)
    6a26:	7810      	ldrb	r0, [r2, #0]
    6a28:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    6a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    6a30:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    6a32:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    6a34:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    6a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    6a3a:	f7ff feb5 	bl	67a8 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    6a3e:	0632      	lsls	r2, r6, #24
    6a40:	d5d2      	bpl.n	69e8 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    6a42:	b672      	cpsid	i
    6a44:	4d1c      	ldr	r5, [pc, #112]	; (6ab8 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    6a46:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6ac4 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    6a4a:	4c1c      	ldr	r4, [pc, #112]	; (6abc <analogRead+0xf0>)
    6a4c:	f006 0740 	and.w	r7, r6, #64	; 0x40
    6a50:	b2ff      	uxtb	r7, r7
    6a52:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    6a56:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    6a5a:	b1df      	cbz	r7, 6a94 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    6a5c:	f023 0310 	bic.w	r3, r3, #16
    6a60:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    6a64:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    6a66:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    6a68:	4a13      	ldr	r2, [pc, #76]	; (6ab8 <analogRead+0xec>)
    6a6a:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    6a6c:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    6a6e:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    6a70:	6823      	ldr	r3, [r4, #0]
    6a72:	0619      	lsls	r1, r3, #24
    6a74:	d40c      	bmi.n	6a90 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    6a76:	7813      	ldrb	r3, [r2, #0]
    6a78:	b91b      	cbnz	r3, 6a82 <analogRead+0xb6>
    6a7a:	e7ec      	b.n	6a56 <analogRead+0x8a>
    6a7c:	782b      	ldrb	r3, [r5, #0]
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d0e9      	beq.n	6a56 <analogRead+0x8a>
		__enable_irq();
    6a82:	b662      	cpsie	i
		yield();
    6a84:	f001 fb9e 	bl	81c4 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    6a88:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    6a8a:	6823      	ldr	r3, [r4, #0]
    6a8c:	061b      	lsls	r3, r3, #24
    6a8e:	d5f5      	bpl.n	6a7c <analogRead+0xb0>
			result = ADC1_RA;
    6a90:	4b0b      	ldr	r3, [pc, #44]	; (6ac0 <analogRead+0xf4>)
    6a92:	e7c3      	b.n	6a1c <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    6a94:	f043 0310 	orr.w	r3, r3, #16
    6a98:	f8c8 3000 	str.w	r3, [r8]
    6a9c:	e7e2      	b.n	6a64 <analogRead+0x98>
    6a9e:	bf00      	nop
    6aa0:	0000b5e8 	.word	0x0000b5e8
    6aa4:	1fff9d41 	.word	0x1fff9d41
    6aa8:	1fff9d43 	.word	0x1fff9d43
    6aac:	4003b000 	.word	0x4003b000
    6ab0:	4003b010 	.word	0x4003b010
    6ab4:	1fff9d40 	.word	0x1fff9d40
    6ab8:	1fff9d42 	.word	0x1fff9d42
    6abc:	400bb000 	.word	0x400bb000
    6ac0:	400bb010 	.word	0x400bb010
    6ac4:	400bb00c 	.word	0x400bb00c

00006ac8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    6ac8:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    6aca:	4c10      	ldr	r4, [pc, #64]	; (6b0c <fault_isr+0x44>)
    6acc:	e008      	b.n	6ae0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    6ace:	6823      	ldr	r3, [r4, #0]
    6ad0:	0559      	lsls	r1, r3, #21
    6ad2:	d40d      	bmi.n	6af0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    6ad4:	6823      	ldr	r3, [r4, #0]
    6ad6:	051a      	lsls	r2, r3, #20
    6ad8:	d40f      	bmi.n	6afa <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    6ada:	6823      	ldr	r3, [r4, #0]
    6adc:	04db      	lsls	r3, r3, #19
    6ade:	d411      	bmi.n	6b04 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    6ae0:	6823      	ldr	r3, [r4, #0]
    6ae2:	0358      	lsls	r0, r3, #13
    6ae4:	d5f3      	bpl.n	6ace <fault_isr+0x6>
    6ae6:	f000 fa37 	bl	6f58 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    6aea:	6823      	ldr	r3, [r4, #0]
    6aec:	0559      	lsls	r1, r3, #21
    6aee:	d5f1      	bpl.n	6ad4 <fault_isr+0xc>
    6af0:	f001 fbec 	bl	82cc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    6af4:	6823      	ldr	r3, [r4, #0]
    6af6:	051a      	lsls	r2, r3, #20
    6af8:	d5ef      	bpl.n	6ada <fault_isr+0x12>
    6afa:	f001 fc7d 	bl	83f8 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    6afe:	6823      	ldr	r3, [r4, #0]
    6b00:	04db      	lsls	r3, r3, #19
    6b02:	d5ed      	bpl.n	6ae0 <fault_isr+0x18>
    6b04:	f001 fd0e 	bl	8524 <uart2_status_isr>
    6b08:	e7ea      	b.n	6ae0 <fault_isr+0x18>
    6b0a:	bf00      	nop
    6b0c:	40048034 	.word	0x40048034

00006b10 <unused_isr>:
	}
}

void unused_isr(void)
{
    6b10:	b508      	push	{r3, lr}
	fault_isr();
    6b12:	f7ff ffd9 	bl	6ac8 <fault_isr>
    6b16:	bf00      	nop

00006b18 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    6b18:	4b01      	ldr	r3, [pc, #4]	; (6b20 <startup_early_hook+0x8>)
    6b1a:	2210      	movs	r2, #16
    6b1c:	801a      	strh	r2, [r3, #0]
    6b1e:	4770      	bx	lr
    6b20:	40052000 	.word	0x40052000

00006b24 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    6b24:	4770      	bx	lr
    6b26:	bf00      	nop

00006b28 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    6b28:	7800      	ldrb	r0, [r0, #0]
}
    6b2a:	fab0 f080 	clz	r0, r0
    6b2e:	0940      	lsrs	r0, r0, #5
    6b30:	4770      	bx	lr
    6b32:	bf00      	nop

00006b34 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    6b34:	2301      	movs	r3, #1
    6b36:	7003      	strb	r3, [r0, #0]
    6b38:	4770      	bx	lr
    6b3a:	bf00      	nop

00006b3c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6b3c:	4a1c      	ldr	r2, [pc, #112]	; (6bb0 <pinMode.part.2+0x74>)
    6b3e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6b42:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6b44:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6b46:	d011      	beq.n	6b6c <pinMode.part.2+0x30>
    6b48:	2904      	cmp	r1, #4
    6b4a:	d01b      	beq.n	6b84 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    6b4c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    6b50:	2200      	movs	r2, #0
    6b52:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    6b56:	b129      	cbz	r1, 6b64 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    6b58:	2902      	cmp	r1, #2
    6b5a:	d020      	beq.n	6b9e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    6b5c:	2903      	cmp	r1, #3
    6b5e:	d022      	beq.n	6ba6 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    6b60:	601a      	str	r2, [r3, #0]
    6b62:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    6b64:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b68:	601a      	str	r2, [r3, #0]
    6b6a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6b6c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6b70:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6b74:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6b78:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    6b7a:	681a      	ldr	r2, [r3, #0]
    6b7c:	f022 0220 	bic.w	r2, r2, #32
    6b80:	601a      	str	r2, [r3, #0]
    6b82:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6b84:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6b88:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6b8c:	2001      	movs	r0, #1
    6b8e:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6b92:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    6b94:	681a      	ldr	r2, [r3, #0]
    6b96:	f042 0220 	orr.w	r2, r2, #32
    6b9a:	601a      	str	r2, [r3, #0]
    6b9c:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    6b9e:	f240 1203 	movw	r2, #259	; 0x103
    6ba2:	601a      	str	r2, [r3, #0]
    6ba4:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    6ba6:	f44f 7281 	mov.w	r2, #258	; 0x102
    6baa:	601a      	str	r2, [r3, #0]
    6bac:	4770      	bx	lr
    6bae:	bf00      	nop
    6bb0:	0000b614 	.word	0x0000b614

00006bb4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    6bb4:	b430      	push	{r4, r5}
	RTC_SR = 0;
    6bb6:	4b05      	ldr	r3, [pc, #20]	; (6bcc <rtc_set+0x18>)
	RTC_TPR = 0;
    6bb8:	4d05      	ldr	r5, [pc, #20]	; (6bd0 <rtc_set+0x1c>)
	RTC_TSR = t;
    6bba:	4c06      	ldr	r4, [pc, #24]	; (6bd4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    6bbc:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    6bbe:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    6bc0:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    6bc2:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    6bc4:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    6bc6:	6019      	str	r1, [r3, #0]
}
    6bc8:	bc30      	pop	{r4, r5}
    6bca:	4770      	bx	lr
    6bcc:	4003d014 	.word	0x4003d014
    6bd0:	4003d004 	.word	0x4003d004
    6bd4:	4003d000 	.word	0x4003d000

00006bd8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    6bd8:	2821      	cmp	r0, #33	; 0x21
    6bda:	d801      	bhi.n	6be0 <pinMode+0x8>
    6bdc:	f7ff bfae 	b.w	6b3c <pinMode.part.2>
    6be0:	4770      	bx	lr
    6be2:	bf00      	nop

00006be4 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6be4:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    6be6:	490c      	ldr	r1, [pc, #48]	; (6c18 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6be8:	4b0c      	ldr	r3, [pc, #48]	; (6c1c <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6bea:	4a0d      	ldr	r2, [pc, #52]	; (6c20 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6bec:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    6bee:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6bf0:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    6bf2:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6bf4:	0152      	lsls	r2, r2, #5
    6bf6:	d502      	bpl.n	6bfe <micros+0x1a>
    6bf8:	2b32      	cmp	r3, #50	; 0x32
    6bfa:	bf88      	it	hi
    6bfc:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    6bfe:	4909      	ldr	r1, [pc, #36]	; (6c24 <micros+0x40>)
    6c00:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    6c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c08:	33ff      	adds	r3, #255	; 0xff
    6c0a:	fba1 1303 	umull	r1, r3, r1, r3
    6c0e:	fb02 f000 	mul.w	r0, r2, r0
}
    6c12:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    6c16:	4770      	bx	lr
    6c18:	1fff9d48 	.word	0x1fff9d48
    6c1c:	e000e018 	.word	0xe000e018
    6c20:	e000ed04 	.word	0xe000ed04
    6c24:	aaaaaaab 	.word	0xaaaaaaab

00006c28 <delay>:

void delay(uint32_t ms)
{
    6c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c2c:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6c2e:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    6c30:	4f20      	ldr	r7, [pc, #128]	; (6cb4 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6c32:	4b21      	ldr	r3, [pc, #132]	; (6cb8 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6c34:	4a21      	ldr	r2, [pc, #132]	; (6cbc <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6c36:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    6c38:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6c3a:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    6c3c:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6c3e:	0152      	lsls	r2, r2, #5
    6c40:	d502      	bpl.n	6c48 <delay+0x20>
    6c42:	2b32      	cmp	r3, #50	; 0x32
    6c44:	bf88      	it	hi
    6c46:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    6c48:	b395      	cbz	r5, 6cb0 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    6c4a:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    6c4e:	4e1c      	ldr	r6, [pc, #112]	; (6cc0 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6c50:	f8df 9064 	ldr.w	r9, [pc, #100]	; 6cb8 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6c54:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6cbc <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    6c58:	33ff      	adds	r3, #255	; 0xff
    6c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c5e:	fba6 1303 	umull	r1, r3, r6, r3
    6c62:	fb02 f404 	mul.w	r4, r2, r4
    6c66:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6c6a:	b672      	cpsid	i
	current = SYST_CVR;
    6c6c:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    6c70:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6c72:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    6c76:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    6c78:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    6c7c:	33ff      	adds	r3, #255	; 0xff
    6c7e:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6c82:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    6c86:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    6c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6c8e:	d002      	beq.n	6c96 <delay+0x6e>
    6c90:	2932      	cmp	r1, #50	; 0x32
    6c92:	bf88      	it	hi
    6c94:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    6c96:	fb00 3302 	mla	r3, r0, r2, r3
    6c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    6c9e:	d304      	bcc.n	6caa <delay+0x82>
				ms--;
				if (ms == 0) return;
    6ca0:	3d01      	subs	r5, #1
    6ca2:	d005      	beq.n	6cb0 <delay+0x88>
				start += 1000;
    6ca4:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    6ca8:	e7df      	b.n	6c6a <delay+0x42>
			}
			yield();
    6caa:	f001 fa8b 	bl	81c4 <yield>
		}
    6cae:	e7dc      	b.n	6c6a <delay+0x42>
    6cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6cb4:	1fff9d48 	.word	0x1fff9d48
    6cb8:	e000e018 	.word	0xe000e018
    6cbc:	e000ed04 	.word	0xe000ed04
    6cc0:	aaaaaaab 	.word	0xaaaaaaab

00006cc4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    6cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    6cc6:	4b2d      	ldr	r3, [pc, #180]	; (6d7c <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    6cc8:	492d      	ldr	r1, [pc, #180]	; (6d80 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    6cca:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 6d9c <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    6cce:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 6da0 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    6cd2:	4e2c      	ldr	r6, [pc, #176]	; (6d84 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    6cd4:	4d2c      	ldr	r5, [pc, #176]	; (6d88 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    6cd6:	4c2d      	ldr	r4, [pc, #180]	; (6d8c <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    6cd8:	4a2d      	ldr	r2, [pc, #180]	; (6d90 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    6cda:	4f2e      	ldr	r7, [pc, #184]	; (6d94 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    6cdc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    6ce0:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    6ce2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    6ce6:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    6ce8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    6cec:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    6cee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    6cf2:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    6cf4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    6cf8:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    6cfa:	2000      	movs	r0, #0
    6cfc:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    6cfe:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    6d00:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    6d04:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    6d08:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    6d0c:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    6d0e:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    6d10:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    6d12:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    6d14:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    6d16:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    6d18:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    6d1a:	2209      	movs	r2, #9
    6d1c:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    6d20:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    6d24:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    6d28:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    6d2c:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    6d30:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    6d34:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    6d38:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    6d3a:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    6d3e:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    6d42:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    6d46:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    6d4a:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    6d4c:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    6d50:	4811      	ldr	r0, [pc, #68]	; (6d98 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    6d52:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    6d54:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    6d58:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    6d5c:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    6d5e:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    6d60:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    6d62:	f7ff fdc3 	bl	68ec <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    6d66:	2019      	movs	r0, #25
    6d68:	f7ff ff5e 	bl	6c28 <delay>
	usb_init();
    6d6c:	f000 fe5c 	bl	7a28 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    6d70:	f240 1013 	movw	r0, #275	; 0x113
}
    6d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    6d78:	f7ff bf56 	b.w	6c28 <delay>
    6d7c:	e000e108 	.word	0xe000e108
    6d80:	40038004 	.word	0x40038004
    6d84:	40038014 	.word	0x40038014
    6d88:	40038024 	.word	0x40038024
    6d8c:	4003802c 	.word	0x4003802c
    6d90:	4003801c 	.word	0x4003801c
    6d94:	40038034 	.word	0x40038034
    6d98:	400b8000 	.word	0x400b8000
    6d9c:	4003800c 	.word	0x4003800c
    6da0:	40038008 	.word	0x40038008

00006da4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    6da4:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    6da6:	2b03      	cmp	r3, #3
    6da8:	d814      	bhi.n	6dd4 <usb_rx+0x30>
	__disable_irq();
    6daa:	b672      	cpsid	i
	ret = rx_first[endpoint];
    6dac:	490a      	ldr	r1, [pc, #40]	; (6dd8 <usb_rx+0x34>)
    6dae:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    6db2:	b168      	cbz	r0, 6dd0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    6db4:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    6db6:	4c09      	ldr	r4, [pc, #36]	; (6ddc <usb_rx+0x38>)
    6db8:	8805      	ldrh	r5, [r0, #0]
    6dba:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    6dbe:	6846      	ldr	r6, [r0, #4]
    6dc0:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    6dc4:	1b52      	subs	r2, r2, r5
    6dc6:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    6dca:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    6dcc:	bc70      	pop	{r4, r5, r6}
    6dce:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    6dd0:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    6dd2:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    6dd4:	2000      	movs	r0, #0
    6dd6:	4770      	bx	lr
    6dd8:	1fff9da4 	.word	0x1fff9da4
    6ddc:	1fff9ff8 	.word	0x1fff9ff8

00006de0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    6de0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    6de2:	2803      	cmp	r0, #3
    6de4:	d80b      	bhi.n	6dfe <usb_tx_packet_count+0x1e>
	__disable_irq();
    6de6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    6de8:	4b07      	ldr	r3, [pc, #28]	; (6e08 <usb_tx_packet_count+0x28>)
    6dea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6dee:	b143      	cbz	r3, 6e02 <usb_tx_packet_count+0x22>
    6df0:	2000      	movs	r0, #0
    6df2:	685b      	ldr	r3, [r3, #4]
    6df4:	3001      	adds	r0, #1
    6df6:	2b00      	cmp	r3, #0
    6df8:	d1fb      	bne.n	6df2 <usb_tx_packet_count+0x12>
	__enable_irq();
    6dfa:	b662      	cpsie	i
	return count;
    6dfc:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    6dfe:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    6e00:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    6e02:	4618      	mov	r0, r3
    6e04:	e7f9      	b.n	6dfa <usb_tx_packet_count+0x1a>
    6e06:	bf00      	nop
    6e08:	1fff9df8 	.word	0x1fff9df8

00006e0c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    6e0c:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    6e0e:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    6e10:	4a2b      	ldr	r2, [pc, #172]	; (6ec0 <usb_rx_memory+0xb4>)
    6e12:	7813      	ldrb	r3, [r2, #0]
    6e14:	071d      	lsls	r5, r3, #28
    6e16:	d506      	bpl.n	6e26 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6e18:	4b2a      	ldr	r3, [pc, #168]	; (6ec4 <usb_rx_memory+0xb8>)
    6e1a:	6a19      	ldr	r1, [r3, #32]
    6e1c:	2900      	cmp	r1, #0
    6e1e:	d036      	beq.n	6e8e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6e20:	6a99      	ldr	r1, [r3, #40]	; 0x28
    6e22:	2900      	cmp	r1, #0
    6e24:	d041      	beq.n	6eaa <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    6e26:	7853      	ldrb	r3, [r2, #1]
    6e28:	071c      	lsls	r4, r3, #28
    6e2a:	d506      	bpl.n	6e3a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6e2c:	4b25      	ldr	r3, [pc, #148]	; (6ec4 <usb_rx_memory+0xb8>)
    6e2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    6e30:	2900      	cmp	r1, #0
    6e32:	d03e      	beq.n	6eb2 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6e34:	6c99      	ldr	r1, [r3, #72]	; 0x48
    6e36:	2900      	cmp	r1, #0
    6e38:	d039      	beq.n	6eae <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    6e3a:	7893      	ldrb	r3, [r2, #2]
    6e3c:	0719      	lsls	r1, r3, #28
    6e3e:	d505      	bpl.n	6e4c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6e40:	4b20      	ldr	r3, [pc, #128]	; (6ec4 <usb_rx_memory+0xb8>)
    6e42:	6e19      	ldr	r1, [r3, #96]	; 0x60
    6e44:	2900      	cmp	r1, #0
    6e46:	d036      	beq.n	6eb6 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6e48:	6e99      	ldr	r1, [r3, #104]	; 0x68
    6e4a:	b189      	cbz	r1, 6e70 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    6e4c:	78d3      	ldrb	r3, [r2, #3]
    6e4e:	071b      	lsls	r3, r3, #28
    6e50:	d507      	bpl.n	6e62 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    6e52:	4b1c      	ldr	r3, [pc, #112]	; (6ec4 <usb_rx_memory+0xb8>)
    6e54:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    6e58:	b37a      	cbz	r2, 6eba <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6e5e:	2111      	movs	r1, #17
    6e60:	b13a      	cbz	r2, 6e72 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    6e62:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    6e64:	4b18      	ldr	r3, [pc, #96]	; (6ec8 <usb_rx_memory+0xbc>)
    6e66:	2200      	movs	r2, #0
    6e68:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    6e6a:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    6e6c:	f000 be68 	b.w	7b40 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6e70:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    6e72:	4c15      	ldr	r4, [pc, #84]	; (6ec8 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6e74:	4d15      	ldr	r5, [pc, #84]	; (6ecc <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    6e76:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    6e78:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    6e7c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6e80:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    6e82:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    6e84:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    6e86:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    6e88:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    6e8a:	bc30      	pop	{r4, r5}
    6e8c:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    6e8e:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    6e90:	4c0d      	ldr	r4, [pc, #52]	; (6ec8 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6e92:	4d0f      	ldr	r5, [pc, #60]	; (6ed0 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    6e94:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    6e96:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    6e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6e9e:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    6ea0:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    6ea2:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    6ea4:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    6ea6:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    6ea8:	e7ef      	b.n	6e8a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    6eaa:	2105      	movs	r1, #5
    6eac:	e7e1      	b.n	6e72 <usb_rx_memory+0x66>
    6eae:	2109      	movs	r1, #9
    6eb0:	e7df      	b.n	6e72 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    6eb2:	2208      	movs	r2, #8
    6eb4:	e7ec      	b.n	6e90 <usb_rx_memory+0x84>
    6eb6:	220c      	movs	r2, #12
    6eb8:	e7ea      	b.n	6e90 <usb_rx_memory+0x84>
    6eba:	2210      	movs	r2, #16
    6ebc:	e7e8      	b.n	6e90 <usb_rx_memory+0x84>
    6ebe:	bf00      	nop
    6ec0:	0000b750 	.word	0x0000b750
    6ec4:	1fff8000 	.word	0x1fff8000
    6ec8:	1fff9e21 	.word	0x1fff9e21
    6ecc:	004000c8 	.word	0x004000c8
    6ed0:	00400088 	.word	0x00400088

00006ed4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    6ed4:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    6ed6:	2b03      	cmp	r3, #3
    6ed8:	d81d      	bhi.n	6f16 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    6eda:	4a1b      	ldr	r2, [pc, #108]	; (6f48 <usb_tx+0x74>)
    6edc:	0140      	lsls	r0, r0, #5
    6ede:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    6ee2:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    6ee4:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    6ee6:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    6ee8:	4c18      	ldr	r4, [pc, #96]	; (6f4c <usb_tx+0x78>)
    6eea:	5ce2      	ldrb	r2, [r4, r3]
    6eec:	2a03      	cmp	r2, #3
    6eee:	d81b      	bhi.n	6f28 <usb_tx+0x54>
    6ef0:	e8df f002 	tbb	[pc, r2]
    6ef4:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    6ef8:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    6efa:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    6efc:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    6efe:	f010 0f08 	tst.w	r0, #8
    6f02:	bf14      	ite	ne
    6f04:	23c8      	movne	r3, #200	; 0xc8
    6f06:	2388      	moveq	r3, #136	; 0x88
    6f08:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    6f0c:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    6f0e:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    6f10:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    6f12:	b662      	cpsie	i
}
    6f14:	bc30      	pop	{r4, r5}
    6f16:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    6f18:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    6f1a:	2202      	movs	r2, #2
		break;
    6f1c:	e7ed      	b.n	6efa <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    6f1e:	2205      	movs	r2, #5
    6f20:	e7eb      	b.n	6efa <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    6f22:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    6f24:	2204      	movs	r2, #4
		break;
    6f26:	e7e8      	b.n	6efa <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    6f28:	4a09      	ldr	r2, [pc, #36]	; (6f50 <usb_tx+0x7c>)
    6f2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6f2e:	b138      	cbz	r0, 6f40 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    6f30:	4a08      	ldr	r2, [pc, #32]	; (6f54 <usb_tx+0x80>)
    6f32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6f36:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    6f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    6f3c:	b662      	cpsie	i
		return;
    6f3e:	e7e9      	b.n	6f14 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    6f40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    6f44:	4a03      	ldr	r2, [pc, #12]	; (6f54 <usb_tx+0x80>)
    6f46:	e7f7      	b.n	6f38 <usb_tx+0x64>
    6f48:	1fff8000 	.word	0x1fff8000
    6f4c:	1fff9e30 	.word	0x1fff9e30
    6f50:	1fff9df8 	.word	0x1fff9df8
    6f54:	1fff9e08 	.word	0x1fff9e08

00006f58 <usb_isr>:
}



void usb_isr(void)
{
    6f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    6f5c:	f8df b30c 	ldr.w	fp, [pc, #780]	; 726c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    6f60:	f8df a30c 	ldr.w	sl, [pc, #780]	; 7270 <usb_isr+0x318>
}



void usb_isr(void)
{
    6f64:	b087      	sub	sp, #28
    6f66:	e044      	b.n	6ff2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    6f68:	4fab      	ldr	r7, [pc, #684]	; (7218 <usb_isr+0x2c0>)
    6f6a:	ea4f 0893 	mov.w	r8, r3, lsr #2
    6f6e:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    6f72:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6f74:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    6f78:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    6f7c:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6f7e:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    6f82:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    6f86:	2b00      	cmp	r3, #0
    6f88:	f040 8102 	bne.w	7190 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    6f8c:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    6f90:	0c1b      	lsrs	r3, r3, #16
    6f92:	b299      	uxth	r1, r3
    6f94:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    6f98:	2b00      	cmp	r3, #0
    6f9a:	f000 80f0 	beq.w	717e <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    6f9e:	4b9f      	ldr	r3, [pc, #636]	; (721c <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    6fa0:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    6fa4:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    6fa8:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    6fac:	2a00      	cmp	r2, #0
    6fae:	f000 82c5 	beq.w	753c <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    6fb2:	4d9b      	ldr	r5, [pc, #620]	; (7220 <usb_isr+0x2c8>)
    6fb4:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    6fb8:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    6fba:	4c9a      	ldr	r4, [pc, #616]	; (7224 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    6fbc:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    6fc0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    6fc4:	4419      	add	r1, r3
    6fc6:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    6fca:	f000 fd99 	bl	7b00 <usb_malloc>
					if (packet) {
    6fce:	2800      	cmp	r0, #0
    6fd0:	f000 82ad 	beq.w	752e <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    6fd4:	4a94      	ldr	r2, [pc, #592]	; (7228 <usb_isr+0x2d0>)
    6fd6:	4b95      	ldr	r3, [pc, #596]	; (722c <usb_isr+0x2d4>)
    6fd8:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    6fdc:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    6fe0:	bf18      	it	ne
    6fe2:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    6fe4:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    6fe8:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    6fec:	2308      	movs	r3, #8
    6fee:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    6ff2:	f89b 4000 	ldrb.w	r4, [fp]
    6ff6:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    6ff8:	0761      	lsls	r1, r4, #29
    6ffa:	d51a      	bpl.n	7032 <usb_isr+0xda>
		if (usb_configuration) {
    6ffc:	4b8c      	ldr	r3, [pc, #560]	; (7230 <usb_isr+0x2d8>)
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	b1a3      	cbz	r3, 702c <usb_isr+0xd4>
			t = usb_reboot_timer;
    7002:	498c      	ldr	r1, [pc, #560]	; (7234 <usb_isr+0x2dc>)
    7004:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    7006:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    700a:	b122      	cbz	r2, 7016 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    700c:	3b01      	subs	r3, #1
    700e:	b2db      	uxtb	r3, r3
    7010:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    7012:	b903      	cbnz	r3, 7016 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    7014:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    7016:	4988      	ldr	r1, [pc, #544]	; (7238 <usb_isr+0x2e0>)
    7018:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    701a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    701e:	b12a      	cbz	r2, 702c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    7020:	3b01      	subs	r3, #1
    7022:	b2db      	uxtb	r3, r3
    7024:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    7026:	2b00      	cmp	r3, #0
    7028:	f000 8257 	beq.w	74da <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    702c:	2304      	movs	r3, #4
    702e:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    7032:	f004 0308 	and.w	r3, r4, #8
    7036:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    703a:	2b00      	cmp	r3, #0
    703c:	f000 80cc 	beq.w	71d8 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    7040:	f89a 3000 	ldrb.w	r3, [sl]
    7044:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    7046:	091e      	lsrs	r6, r3, #4
    7048:	d18e      	bne.n	6f68 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    704a:	089c      	lsrs	r4, r3, #2
    704c:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 7218 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    7050:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    7054:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    7058:	f3c2 0283 	ubfx	r2, r2, #2, #4
    705c:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    705e:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    7060:	2a0c      	cmp	r2, #12
    7062:	f200 8088 	bhi.w	7176 <usb_isr+0x21e>
    7066:	e8df f002 	tbb	[pc, r2]
    706a:	7c7c      	.short	0x7c7c
    706c:	86868686 	.word	0x86868686
    7070:	86478686 	.word	0x86478686
    7074:	8686      	.short	0x8686
    7076:	07          	.byte	0x07
    7077:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    7078:	6808      	ldr	r0, [r1, #0]
    707a:	4d70      	ldr	r5, [pc, #448]	; (723c <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    707c:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    707e:	4f70      	ldr	r7, [pc, #448]	; (7240 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    7080:	4e70      	ldr	r6, [pc, #448]	; (7244 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    7082:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    7084:	b281      	uxth	r1, r0
    7086:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    708a:	4b67      	ldr	r3, [pc, #412]	; (7228 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    708c:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    708e:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    7092:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    7094:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    7096:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    709a:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    709c:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    70a0:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    70a4:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    70a8:	4c5b      	ldr	r4, [pc, #364]	; (7218 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    70aa:	f200 80e3 	bhi.w	7274 <usb_isr+0x31c>
    70ae:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    70b2:	f080 8346 	bcs.w	7742 <usb_isr+0x7ea>
    70b6:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    70ba:	f000 82fc 	beq.w	76b6 <usb_isr+0x75e>
    70be:	f200 828d 	bhi.w	75dc <usb_isr+0x684>
    70c2:	2980      	cmp	r1, #128	; 0x80
    70c4:	f000 8377 	beq.w	77b6 <usb_isr+0x85e>
    70c8:	2982      	cmp	r1, #130	; 0x82
    70ca:	f040 82fa 	bne.w	76c2 <usb_isr+0x76a>
    70ce:	88a9      	ldrh	r1, [r5, #4]
    70d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    70d4:	2904      	cmp	r1, #4
    70d6:	f200 82f4 	bhi.w	76c2 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    70da:	485b      	ldr	r0, [pc, #364]	; (7248 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    70dc:	4c5b      	ldr	r4, [pc, #364]	; (724c <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    70de:	0089      	lsls	r1, r1, #2
    70e0:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    70e2:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    70e4:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    70e6:	7802      	ldrb	r2, [r0, #0]
    70e8:	0793      	lsls	r3, r2, #30
    70ea:	f140 8458 	bpl.w	799e <usb_isr+0xa46>
    70ee:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    70f2:	f04f 0e02 	mov.w	lr, #2
    70f6:	e342      	b.n	777e <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    70f8:	4f51      	ldr	r7, [pc, #324]	; (7240 <usb_isr+0x2e8>)
    70fa:	683a      	ldr	r2, [r7, #0]
		if (data) {
    70fc:	b332      	cbz	r2, 714c <usb_isr+0x1f4>
			size = ep0_tx_len;
    70fe:	4b54      	ldr	r3, [pc, #336]	; (7250 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7100:	4e50      	ldr	r6, [pc, #320]	; (7244 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7102:	4954      	ldr	r1, [pc, #336]	; (7254 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    7104:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7106:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7108:	780d      	ldrb	r5, [r1, #0]
    710a:	2840      	cmp	r0, #64	; 0x40
    710c:	4686      	mov	lr, r0
    710e:	f045 0802 	orr.w	r8, r5, #2
    7112:	bf28      	it	cs
    7114:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7118:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    711a:	f084 0401 	eor.w	r4, r4, #1
    711e:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    7120:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7124:	bf0c      	ite	eq
    7126:	2488      	moveq	r4, #136	; 0x88
    7128:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    712a:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    712e:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7130:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7134:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7138:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    713a:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    713c:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    7140:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7142:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    7144:	2800      	cmp	r0, #0
    7146:	f000 8145 	beq.w	73d4 <usb_isr+0x47c>
    714a:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    714c:	4b3b      	ldr	r3, [pc, #236]	; (723c <usb_isr+0x2e4>)
    714e:	881a      	ldrh	r2, [r3, #0]
    7150:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    7154:	d10f      	bne.n	7176 <usb_isr+0x21e>
			setup.bRequest = 0;
    7156:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    7158:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    715a:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    715c:	4b3e      	ldr	r3, [pc, #248]	; (7258 <usb_isr+0x300>)
    715e:	701a      	strb	r2, [r3, #0]
    7160:	e009      	b.n	7176 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    7162:	4a36      	ldr	r2, [pc, #216]	; (723c <usb_isr+0x2e4>)
    7164:	8810      	ldrh	r0, [r2, #0]
    7166:	f242 0221 	movw	r2, #8225	; 0x2021
    716a:	4290      	cmp	r0, r2
    716c:	f000 8137 	beq.w	73de <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    7170:	4a2d      	ldr	r2, [pc, #180]	; (7228 <usb_isr+0x2d0>)
    7172:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    7176:	4a39      	ldr	r2, [pc, #228]	; (725c <usb_isr+0x304>)
    7178:	2301      	movs	r3, #1
    717a:	7013      	strb	r3, [r2, #0]
    717c:	e736      	b.n	6fec <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    717e:	4a2a      	ldr	r2, [pc, #168]	; (7228 <usb_isr+0x2d0>)
    7180:	4b2a      	ldr	r3, [pc, #168]	; (722c <usb_isr+0x2d4>)
    7182:	f019 0f08 	tst.w	r9, #8
    7186:	bf18      	it	ne
    7188:	4613      	movne	r3, r2
    718a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    718e:	e72d      	b.n	6fec <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    7190:	f000 fcd6 	bl	7b40 <usb_free>
				packet = tx_first[endpoint];
    7194:	4a32      	ldr	r2, [pc, #200]	; (7260 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    7196:	4933      	ldr	r1, [pc, #204]	; (7264 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    7198:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    719c:	2b00      	cmp	r3, #0
    719e:	f000 81d1 	beq.w	7544 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    71a2:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    71a4:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    71a6:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    71aa:	f103 0208 	add.w	r2, r3, #8
    71ae:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    71b2:	2c03      	cmp	r4, #3
    71b4:	d805      	bhi.n	71c2 <usb_isr+0x26a>
    71b6:	e8df f004 	tbb	[pc, r4]
    71ba:	022c      	.short	0x022c
    71bc:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    71be:	2202      	movs	r2, #2
    71c0:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    71c2:	881a      	ldrh	r2, [r3, #0]
    71c4:	f019 0f08 	tst.w	r9, #8
    71c8:	bf0c      	ite	eq
    71ca:	2388      	moveq	r3, #136	; 0x88
    71cc:	23c8      	movne	r3, #200	; 0xc8
    71ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    71d2:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    71d6:	e709      	b.n	6fec <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    71d8:	07e0      	lsls	r0, r4, #31
    71da:	f100 8181 	bmi.w	74e0 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    71de:	0621      	lsls	r1, r4, #24
    71e0:	f100 81f2 	bmi.w	75c8 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    71e4:	07a2      	lsls	r2, r4, #30
    71e6:	d506      	bpl.n	71f6 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    71e8:	4a1f      	ldr	r2, [pc, #124]	; (7268 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    71ea:	4920      	ldr	r1, [pc, #128]	; (726c <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    71ec:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    71ee:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    71f0:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    71f2:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    71f4:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    71f6:	06e3      	lsls	r3, r4, #27
    71f8:	d502      	bpl.n	7200 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    71fa:	4b1c      	ldr	r3, [pc, #112]	; (726c <usb_isr+0x314>)
    71fc:	2210      	movs	r2, #16
    71fe:	701a      	strb	r2, [r3, #0]
	}

}
    7200:	b007      	add	sp, #28
    7202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    7206:	2204      	movs	r2, #4
    7208:	558a      	strb	r2, [r1, r6]
						break;
    720a:	e7da      	b.n	71c2 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    720c:	2205      	movs	r2, #5
    720e:	558a      	strb	r2, [r1, r6]
						break;
    7210:	e7d7      	b.n	71c2 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    7212:	2203      	movs	r2, #3
    7214:	558a      	strb	r2, [r1, r6]
						break;
    7216:	e7d4      	b.n	71c2 <usb_isr+0x26a>
    7218:	1fff8000 	.word	0x1fff8000
    721c:	1fff9da4 	.word	0x1fff9da4
    7220:	1fff9d50 	.word	0x1fff9d50
    7224:	1fff9ff8 	.word	0x1fff9ff8
    7228:	004000c8 	.word	0x004000c8
    722c:	00400088 	.word	0x00400088
    7230:	1fff9e2c 	.word	0x1fff9e2c
    7234:	1fff9db5 	.word	0x1fff9db5
    7238:	1fff9e34 	.word	0x1fff9e34
    723c:	1fff9e18 	.word	0x1fff9e18
    7240:	1fff9d4c 	.word	0x1fff9d4c
    7244:	1fff9db4 	.word	0x1fff9db4
    7248:	400720c0 	.word	0x400720c0
    724c:	1fff9e24 	.word	0x1fff9e24
    7250:	1fff9d60 	.word	0x1fff9d60
    7254:	1fff9e20 	.word	0x1fff9e20
    7258:	40072098 	.word	0x40072098
    725c:	40072094 	.word	0x40072094
    7260:	1fff9df8 	.word	0x1fff9df8
    7264:	1fff9e30 	.word	0x1fff9e30
    7268:	40072088 	.word	0x40072088
    726c:	40072080 	.word	0x40072080
    7270:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    7274:	f242 0021 	movw	r0, #8225	; 0x2021
    7278:	4281      	cmp	r1, r0
    727a:	f000 812a 	beq.w	74d2 <usb_isr+0x57a>
    727e:	f200 80d8 	bhi.w	7432 <usb_isr+0x4da>
    7282:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    7286:	f000 8276 	beq.w	7776 <usb_isr+0x81e>
    728a:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    728e:	f040 8218 	bne.w	76c2 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    7292:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    7294:	49b3      	ldr	r1, [pc, #716]	; (7564 <usb_isr+0x60c>)
    7296:	78a8      	ldrb	r0, [r5, #2]
    7298:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    729a:	0612      	lsls	r2, r2, #24
    729c:	f100 833a 	bmi.w	7914 <usb_isr+0x9bc>
    72a0:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    72a4:	49b0      	ldr	r1, [pc, #704]	; (7568 <usb_isr+0x610>)
    72a6:	0613      	lsls	r3, r2, #24
    72a8:	f100 830c 	bmi.w	78c4 <usb_isr+0x96c>
    72ac:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    72b0:	49ad      	ldr	r1, [pc, #692]	; (7568 <usb_isr+0x610>)
    72b2:	0615      	lsls	r5, r2, #24
    72b4:	f100 8301 	bmi.w	78ba <usb_isr+0x962>
    72b8:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    72bc:	49aa      	ldr	r1, [pc, #680]	; (7568 <usb_isr+0x610>)
    72be:	0614      	lsls	r4, r2, #24
    72c0:	f100 82f6 	bmi.w	78b0 <usb_isr+0x958>
    72c4:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    72c8:	49a7      	ldr	r1, [pc, #668]	; (7568 <usb_isr+0x610>)
    72ca:	0610      	lsls	r0, r2, #24
    72cc:	f100 834a 	bmi.w	7964 <usb_isr+0xa0c>
    72d0:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    72d4:	49a4      	ldr	r1, [pc, #656]	; (7568 <usb_isr+0x610>)
    72d6:	0612      	lsls	r2, r2, #24
    72d8:	f100 833f 	bmi.w	795a <usb_isr+0xa02>
    72dc:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    72e0:	49a1      	ldr	r1, [pc, #644]	; (7568 <usb_isr+0x610>)
    72e2:	0613      	lsls	r3, r2, #24
    72e4:	f100 8334 	bmi.w	7950 <usb_isr+0x9f8>
    72e8:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    72ec:	499e      	ldr	r1, [pc, #632]	; (7568 <usb_isr+0x610>)
    72ee:	0615      	lsls	r5, r2, #24
    72f0:	f100 8329 	bmi.w	7946 <usb_isr+0x9ee>
    72f4:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    72f8:	499b      	ldr	r1, [pc, #620]	; (7568 <usb_isr+0x610>)
    72fa:	0614      	lsls	r4, r2, #24
    72fc:	f100 831e 	bmi.w	793c <usb_isr+0x9e4>
    7300:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    7304:	4998      	ldr	r1, [pc, #608]	; (7568 <usb_isr+0x610>)
    7306:	0610      	lsls	r0, r2, #24
    7308:	f100 8313 	bmi.w	7932 <usb_isr+0x9da>
    730c:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    7310:	4995      	ldr	r1, [pc, #596]	; (7568 <usb_isr+0x610>)
    7312:	0612      	lsls	r2, r2, #24
    7314:	f100 8308 	bmi.w	7928 <usb_isr+0x9d0>
    7318:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    731c:	4992      	ldr	r1, [pc, #584]	; (7568 <usb_isr+0x610>)
    731e:	0613      	lsls	r3, r2, #24
    7320:	f100 82fd 	bmi.w	791e <usb_isr+0x9c6>
    7324:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    7328:	498f      	ldr	r1, [pc, #572]	; (7568 <usb_isr+0x610>)
    732a:	0615      	lsls	r5, r2, #24
    732c:	f100 8331 	bmi.w	7992 <usb_isr+0xa3a>
    7330:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    7334:	498c      	ldr	r1, [pc, #560]	; (7568 <usb_isr+0x610>)
    7336:	0614      	lsls	r4, r2, #24
    7338:	f100 8325 	bmi.w	7986 <usb_isr+0xa2e>
    733c:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    7340:	4989      	ldr	r1, [pc, #548]	; (7568 <usb_isr+0x610>)
    7342:	0610      	lsls	r0, r2, #24
    7344:	f100 8319 	bmi.w	797a <usb_isr+0xa22>
    7348:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    734c:	4986      	ldr	r1, [pc, #536]	; (7568 <usb_isr+0x610>)
    734e:	0612      	lsls	r2, r2, #24
    7350:	f100 830d 	bmi.w	796e <usb_isr+0xa16>
    7354:	4885      	ldr	r0, [pc, #532]	; (756c <usb_isr+0x614>)
    7356:	4a86      	ldr	r2, [pc, #536]	; (7570 <usb_isr+0x618>)
    7358:	4986      	ldr	r1, [pc, #536]	; (7574 <usb_isr+0x61c>)
    735a:	9001      	str	r0, [sp, #4]
    735c:	4886      	ldr	r0, [pc, #536]	; (7578 <usb_isr+0x620>)
    735e:	4d87      	ldr	r5, [pc, #540]	; (757c <usb_isr+0x624>)
    7360:	4c87      	ldr	r4, [pc, #540]	; (7580 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    7362:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    7364:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    7366:	9605      	str	r6, [sp, #20]
    7368:	9502      	str	r5, [sp, #8]
    736a:	4680      	mov	r8, r0
    736c:	460f      	mov	r7, r1
    736e:	4616      	mov	r6, r2
    7370:	461d      	mov	r5, r3
    7372:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    7374:	6830      	ldr	r0, [r6, #0]
			while (p) {
    7376:	b128      	cbz	r0, 7384 <usb_isr+0x42c>
				n = p->next;
    7378:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    737a:	f000 fbe1 	bl	7b40 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    737e:	4620      	mov	r0, r4
    7380:	2c00      	cmp	r4, #0
    7382:	d1f9      	bne.n	7378 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    7384:	2300      	movs	r3, #0
    7386:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    7388:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    738a:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    738c:	461a      	mov	r2, r3
    738e:	2300      	movs	r3, #0
    7390:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    7394:	b128      	cbz	r0, 73a2 <usb_isr+0x44a>
				n = p->next;
    7396:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    7398:	f000 fbd2 	bl	7b40 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    739c:	4620      	mov	r0, r4
    739e:	2c00      	cmp	r4, #0
    73a0:	d1f9      	bne.n	7396 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    73a2:	2200      	movs	r2, #0
    73a4:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    73a6:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    73a8:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    73ac:	4611      	mov	r1, r2
    73ae:	2200      	movs	r2, #0
    73b0:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    73b4:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    73b6:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    73b8:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    73ba:	f04f 0100 	mov.w	r1, #0
    73be:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    73c2:	2b03      	cmp	r3, #3
    73c4:	f200 812b 	bhi.w	761e <usb_isr+0x6c6>
    73c8:	e8df f013 	tbh	[pc, r3, lsl #1]
    73cc:	01250170 	.word	0x01250170
    73d0:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    73d4:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    73d8:	bf18      	it	ne
    73da:	2200      	movne	r2, #0
    73dc:	e6b5      	b.n	714a <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    73de:	4a69      	ldr	r2, [pc, #420]	; (7584 <usb_isr+0x62c>)
    73e0:	780d      	ldrb	r5, [r1, #0]
    73e2:	7848      	ldrb	r0, [r1, #1]
    73e4:	7015      	strb	r5, [r2, #0]
    73e6:	7050      	strb	r0, [r2, #1]
    73e8:	788d      	ldrb	r5, [r1, #2]
    73ea:	78c8      	ldrb	r0, [r1, #3]
    73ec:	7095      	strb	r5, [r2, #2]
    73ee:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    73f0:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    73f2:	790d      	ldrb	r5, [r1, #4]
    73f4:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    73f6:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    73f8:	794d      	ldrb	r5, [r1, #5]
    73fa:	7989      	ldrb	r1, [r1, #6]
    73fc:	7155      	strb	r5, [r2, #5]
    73fe:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    7400:	f000 819b 	beq.w	773a <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7404:	4960      	ldr	r1, [pc, #384]	; (7588 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7406:	4e61      	ldr	r6, [pc, #388]	; (758c <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7408:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    740a:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    740c:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7410:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7412:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7416:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7418:	bf0c      	ite	eq
    741a:	2188      	moveq	r1, #136	; 0x88
    741c:	21c8      	movne	r1, #200	; 0xc8
    741e:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7422:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    7426:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    742a:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    742c:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    742e:	6051      	str	r1, [r2, #4]
    7430:	e69e      	b.n	7170 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    7432:	f242 2021 	movw	r0, #8737	; 0x2221
    7436:	4281      	cmp	r1, r0
    7438:	f040 81cb 	bne.w	77d2 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    743c:	4b54      	ldr	r3, [pc, #336]	; (7590 <usb_isr+0x638>)
    743e:	4c55      	ldr	r4, [pc, #340]	; (7594 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    7440:	4955      	ldr	r1, [pc, #340]	; (7598 <usb_isr+0x640>)
    7442:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    7444:	681d      	ldr	r5, [r3, #0]
    7446:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    7448:	f8cd e004 	str.w	lr, [sp, #4]
    744c:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    744e:	2000      	movs	r0, #0
    7450:	9002      	str	r0, [sp, #8]
    7452:	4680      	mov	r8, r0
    7454:	4684      	mov	ip, r0
    7456:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7458:	494b      	ldr	r1, [pc, #300]	; (7588 <usb_isr+0x630>)
    745a:	780d      	ldrb	r5, [r1, #0]
    745c:	f045 0e02 	orr.w	lr, r5, #2
    7460:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    7464:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7466:	9b01      	ldr	r3, [sp, #4]
    7468:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    746a:	9b03      	ldr	r3, [sp, #12]
    746c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    746e:	bf0c      	ite	eq
    7470:	2488      	moveq	r4, #136	; 0x88
    7472:	24c8      	movne	r4, #200	; 0xc8
    7474:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7478:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    747c:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    7480:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    7482:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7484:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 7568 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    7488:	4b40      	ldr	r3, [pc, #256]	; (758c <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    748a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7588 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    748e:	2800      	cmp	r0, #0
    7490:	f040 811e 	bne.w	76d0 <usb_isr+0x778>
    7494:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    7498:	d11b      	bne.n	74d2 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    749a:	f044 0c02 	orr.w	ip, r4, #2
    749e:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    74a2:	9c02      	ldr	r4, [sp, #8]
    74a4:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 7568 <usb_isr+0x610>
    74a8:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    74aa:	2a00      	cmp	r2, #0
    74ac:	f040 8126 	bne.w	76fc <usb_isr+0x7a4>
    74b0:	0402      	lsls	r2, r0, #16
    74b2:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    74b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    74ba:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    74be:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    74c0:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    74c2:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    74c4:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    74c6:	2840      	cmp	r0, #64	; 0x40
    74c8:	d103      	bne.n	74d2 <usb_isr+0x57a>
    74ca:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    74cc:	4a33      	ldr	r2, [pc, #204]	; (759c <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    74ce:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    74d0:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    74d2:	4a33      	ldr	r2, [pc, #204]	; (75a0 <usb_isr+0x648>)
    74d4:	2301      	movs	r3, #1
    74d6:	7013      	strb	r3, [r2, #0]
    74d8:	e64d      	b.n	7176 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    74da:	f000 fc9d 	bl	7e18 <usb_serial_flush_callback>
    74de:	e5a5      	b.n	702c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    74e0:	4b21      	ldr	r3, [pc, #132]	; (7568 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    74e2:	482f      	ldr	r0, [pc, #188]	; (75a0 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    74e4:	4928      	ldr	r1, [pc, #160]	; (7588 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    74e6:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    74e8:	f04f 0e02 	mov.w	lr, #2
    74ec:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    74f0:	4f2c      	ldr	r7, [pc, #176]	; (75a4 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    74f2:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    74f4:	492c      	ldr	r1, [pc, #176]	; (75a8 <usb_isr+0x650>)
    74f6:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    74f8:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    74fa:	4e2c      	ldr	r6, [pc, #176]	; (75ac <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    74fc:	4d2c      	ldr	r5, [pc, #176]	; (75b0 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    74fe:	4c2d      	ldr	r4, [pc, #180]	; (75b4 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    7500:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    7502:	210d      	movs	r1, #13
    7504:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    7506:	21ff      	movs	r1, #255	; 0xff
    7508:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    750a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 75c4 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    750e:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    7510:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    7512:	4d29      	ldr	r5, [pc, #164]	; (75b8 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    7514:	4a29      	ldr	r2, [pc, #164]	; (75bc <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    7516:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    751a:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    751c:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    751e:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    7522:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    7524:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    7526:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    7528:	b007      	add	sp, #28
    752a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    752e:	4a24      	ldr	r2, [pc, #144]	; (75c0 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    7530:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    7534:	7813      	ldrb	r3, [r2, #0]
    7536:	3301      	adds	r3, #1
    7538:	7013      	strb	r3, [r2, #0]
    753a:	e557      	b.n	6fec <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    753c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    7540:	4d0e      	ldr	r5, [pc, #56]	; (757c <usb_isr+0x624>)
    7542:	e53a      	b.n	6fba <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    7544:	5d8b      	ldrb	r3, [r1, r6]
    7546:	2b03      	cmp	r3, #3
    7548:	f200 80f0 	bhi.w	772c <usb_isr+0x7d4>
    754c:	a201      	add	r2, pc, #4	; (adr r2, 7554 <usb_isr+0x5fc>)
    754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7552:	bf00      	nop
    7554:	00006fed 	.word	0x00006fed
    7558:	00006fed 	.word	0x00006fed
    755c:	00007611 	.word	0x00007611
    7560:	0000760b 	.word	0x0000760b
    7564:	1fff9e2c 	.word	0x1fff9e2c
    7568:	1fff8000 	.word	0x1fff8000
    756c:	1fff9e08 	.word	0x1fff9e08
    7570:	1fff9da4 	.word	0x1fff9da4
    7574:	1fff9df8 	.word	0x1fff9df8
    7578:	1fff9e30 	.word	0x1fff9e30
    757c:	1fff9d50 	.word	0x1fff9d50
    7580:	1fff9ff8 	.word	0x1fff9ff8
    7584:	1fffa000 	.word	0x1fffa000
    7588:	1fff9e20 	.word	0x1fff9e20
    758c:	1fff9db4 	.word	0x1fff9db4
    7590:	1fff9d48 	.word	0x1fff9d48
    7594:	1fffa008 	.word	0x1fffa008
    7598:	1fff9e44 	.word	0x1fff9e44
    759c:	1fff9d60 	.word	0x1fff9d60
    75a0:	40072094 	.word	0x40072094
    75a4:	400720c0 	.word	0x400720c0
    75a8:	00400088 	.word	0x00400088
    75ac:	40072088 	.word	0x40072088
    75b0:	40072080 	.word	0x40072080
    75b4:	40072098 	.word	0x40072098
    75b8:	1fff9d64 	.word	0x1fff9d64
    75bc:	1fff9db8 	.word	0x1fff9db8
    75c0:	1fff9e21 	.word	0x1fff9e21
    75c4:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    75c8:	49c1      	ldr	r1, [pc, #772]	; (78d0 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    75ca:	4bc2      	ldr	r3, [pc, #776]	; (78d4 <usb_isr+0x97c>)
    75cc:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    75ce:	200d      	movs	r0, #13
    75d0:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    75d2:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    75d4:	07a2      	lsls	r2, r4, #30
    75d6:	f57f ae0e 	bpl.w	71f6 <usb_isr+0x29e>
    75da:	e605      	b.n	71e8 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    75dc:	f240 3202 	movw	r2, #770	; 0x302
    75e0:	4291      	cmp	r1, r2
    75e2:	f040 80ee 	bne.w	77c2 <usb_isr+0x86a>
    75e6:	88a9      	ldrh	r1, [r5, #4]
    75e8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    75ec:	2904      	cmp	r1, #4
    75ee:	d868      	bhi.n	76c2 <usb_isr+0x76a>
    75f0:	886a      	ldrh	r2, [r5, #2]
    75f2:	2a00      	cmp	r2, #0
    75f4:	d165      	bne.n	76c2 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    75f6:	48b6      	ldr	r0, [pc, #728]	; (78d0 <usb_isr+0x978>)
    75f8:	f8cd e004 	str.w	lr, [sp, #4]
    75fc:	0089      	lsls	r1, r1, #2
    75fe:	4408      	add	r0, r1
    7600:	7801      	ldrb	r1, [r0, #0]
    7602:	f041 0102 	orr.w	r1, r1, #2
    7606:	7001      	strb	r1, [r0, #0]
    7608:	e721      	b.n	744e <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    760a:	2301      	movs	r3, #1
    760c:	558b      	strb	r3, [r1, r6]
						break;
    760e:	e4ed      	b.n	6fec <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    7610:	2300      	movs	r3, #0
    7612:	558b      	strb	r3, [r1, r6]
						break;
    7614:	e4ea      	b.n	6fec <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    7616:	f04f 0301 	mov.w	r3, #1
    761a:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    761e:	3501      	adds	r5, #1
    7620:	2d04      	cmp	r5, #4
    7622:	f106 0604 	add.w	r6, r6, #4
    7626:	f107 0704 	add.w	r7, r7, #4
    762a:	f108 0801 	add.w	r8, r8, #1
    762e:	f47f aea1 	bne.w	7374 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    7632:	4ca9      	ldr	r4, [pc, #676]	; (78d8 <usb_isr+0x980>)
			*reg = epconf;
    7634:	4ba9      	ldr	r3, [pc, #676]	; (78dc <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    7636:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    7638:	4da9      	ldr	r5, [pc, #676]	; (78e0 <usb_isr+0x988>)
    763a:	9f04      	ldr	r7, [sp, #16]
    763c:	9e05      	ldr	r6, [sp, #20]
    763e:	2100      	movs	r1, #0
    7640:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    7642:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7644:	0713      	lsls	r3, r2, #28
    7646:	f100 8105 	bmi.w	7854 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    764a:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    764c:	49a5      	ldr	r1, [pc, #660]	; (78e4 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    764e:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 78f0 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    7652:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7654:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7656:	f04f 0100 	mov.w	r1, #0
    765a:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    765e:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7662:	f100 80e0 	bmi.w	7826 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    7666:	49a0      	ldr	r1, [pc, #640]	; (78e8 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    7668:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    766a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    766c:	2100      	movs	r1, #0
    766e:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    7672:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7676:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7678:	f8df 8274 	ldr.w	r8, [pc, #628]	; 78f0 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    767c:	f100 8101 	bmi.w	7882 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    7680:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    7682:	499a      	ldr	r1, [pc, #616]	; (78ec <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7684:	4c9a      	ldr	r4, [pc, #616]	; (78f0 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    7686:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7688:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    768a:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    768c:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    7690:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7694:	f100 80b0 	bmi.w	77f8 <usb_isr+0x8a0>
    7698:	7833      	ldrb	r3, [r6, #0]
    769a:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    769c:	2100      	movs	r1, #0
    769e:	f083 0201 	eor.w	r2, r3, #1
    76a2:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    76a6:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    76aa:	e6d0      	b.n	744e <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    76ac:	f04f 0300 	mov.w	r3, #0
    76b0:	f888 3000 	strb.w	r3, [r8]
    76b4:	e7b3      	b.n	761e <usb_isr+0x6c6>
    76b6:	88a9      	ldrh	r1, [r5, #4]
    76b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    76bc:	2904      	cmp	r1, #4
    76be:	f240 808d 	bls.w	77dc <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    76c2:	4a83      	ldr	r2, [pc, #524]	; (78d0 <usb_isr+0x978>)
    76c4:	230f      	movs	r3, #15
    76c6:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    76c8:	4a8a      	ldr	r2, [pc, #552]	; (78f4 <usb_isr+0x99c>)
    76ca:	2301      	movs	r3, #1
    76cc:	7013      	strb	r3, [r2, #0]
    76ce:	e552      	b.n	7176 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    76d0:	2840      	cmp	r0, #64	; 0x40
    76d2:	f67f aee2 	bls.w	749a <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    76d6:	f044 0402 	orr.w	r4, r4, #2
    76da:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    76de:	9e02      	ldr	r6, [sp, #8]
    76e0:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    76e2:	b1ba      	cbz	r2, 7714 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    76e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    76e8:	4a83      	ldr	r2, [pc, #524]	; (78f8 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    76ea:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    76ec:	4633      	mov	r3, r6
    76ee:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    76f0:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    76f4:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    76f6:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    76fa:	e6e7      	b.n	74cc <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    76fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7700:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7702:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7704:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7706:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7708:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    770c:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    770e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    7712:	e6d8      	b.n	74c6 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    7714:	f89d 1004 	ldrb.w	r1, [sp, #4]
    7718:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    771a:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    771c:	4a77      	ldr	r2, [pc, #476]	; (78fc <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    771e:	f888 5000 	strb.w	r5, [r8]
    7722:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7724:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7726:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    772a:	e6cf      	b.n	74cc <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    772c:	f019 0f08 	tst.w	r9, #8
    7730:	bf0c      	ite	eq
    7732:	2302      	moveq	r3, #2
    7734:	2303      	movne	r3, #3
    7736:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    7738:	e458      	b.n	6fec <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    773a:	4a71      	ldr	r2, [pc, #452]	; (7900 <usb_isr+0x9a8>)
    773c:	210f      	movs	r1, #15
    773e:	7011      	strb	r1, [r2, #0]
    7740:	e660      	b.n	7404 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    7742:	4a70      	ldr	r2, [pc, #448]	; (7904 <usb_isr+0x9ac>)
    7744:	6854      	ldr	r4, [r2, #4]
    7746:	2c00      	cmp	r4, #0
    7748:	d0bb      	beq.n	76c2 <usb_isr+0x76a>
    774a:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    774c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    7750:	e003      	b.n	775a <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    7752:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    7754:	6854      	ldr	r4, [r2, #4]
    7756:	2c00      	cmp	r4, #0
    7758:	d0b3      	beq.n	76c2 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    775a:	8813      	ldrh	r3, [r2, #0]
    775c:	4283      	cmp	r3, r0
    775e:	d1f8      	bne.n	7752 <usb_isr+0x7fa>
    7760:	8853      	ldrh	r3, [r2, #2]
    7762:	4573      	cmp	r3, lr
    7764:	d1f5      	bne.n	7752 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    7766:	0a00      	lsrs	r0, r0, #8
    7768:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    776a:	bf0c      	ite	eq
    776c:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    7770:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    7774:	e003      	b.n	777e <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7776:	4a64      	ldr	r2, [pc, #400]	; (7908 <usb_isr+0x9b0>)
    7778:	4c64      	ldr	r4, [pc, #400]	; (790c <usb_isr+0x9b4>)
    777a:	7812      	ldrb	r2, [r2, #0]
    777c:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    777e:	88e8      	ldrh	r0, [r5, #6]
    7780:	4570      	cmp	r0, lr
    7782:	f080 813f 	bcs.w	7a04 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7786:	4962      	ldr	r1, [pc, #392]	; (7910 <usb_isr+0x9b8>)
    7788:	780d      	ldrb	r5, [r1, #0]
    778a:	2840      	cmp	r0, #64	; 0x40
    778c:	4684      	mov	ip, r0
    778e:	f045 0e02 	orr.w	lr, r5, #2
    7792:	bf28      	it	cs
    7794:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    7798:	eb04 030c 	add.w	r3, r4, ip
    779c:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    77a0:	9302      	str	r3, [sp, #8]
    77a2:	2301      	movs	r3, #1
    77a4:	6054      	str	r4, [r2, #4]
    77a6:	ebcc 0000 	rsb	r0, ip, r0
    77aa:	ea4f 480c 	mov.w	r8, ip, lsl #16
    77ae:	2200      	movs	r2, #0
    77b0:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    77b2:	24c8      	movs	r4, #200	; 0xc8
    77b4:	e65e      	b.n	7474 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    77b6:	4c55      	ldr	r4, [pc, #340]	; (790c <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    77b8:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    77bc:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    77be:	7062      	strb	r2, [r4, #1]
    77c0:	e7dd      	b.n	777e <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    77c2:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    77c6:	f47f af7c 	bne.w	76c2 <usb_isr+0x76a>
    77ca:	2301      	movs	r3, #1
    77cc:	2200      	movs	r2, #0
    77ce:	9301      	str	r3, [sp, #4]
    77d0:	e63d      	b.n	744e <usb_isr+0x4f6>
    77d2:	f242 3221 	movw	r2, #8993	; 0x2321
    77d6:	4291      	cmp	r1, r2
    77d8:	d0f7      	beq.n	77ca <usb_isr+0x872>
    77da:	e772      	b.n	76c2 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    77dc:	886a      	ldrh	r2, [r5, #2]
    77de:	2a00      	cmp	r2, #0
    77e0:	f47f af6f 	bne.w	76c2 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    77e4:	483a      	ldr	r0, [pc, #232]	; (78d0 <usb_isr+0x978>)
    77e6:	f8cd e004 	str.w	lr, [sp, #4]
    77ea:	0089      	lsls	r1, r1, #2
    77ec:	4408      	add	r0, r1
    77ee:	7801      	ldrb	r1, [r0, #0]
    77f0:	f021 0102 	bic.w	r1, r1, #2
    77f4:	7001      	strb	r1, [r0, #0]
    77f6:	e62a      	b.n	744e <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    77f8:	f000 f982 	bl	7b00 <usb_malloc>
				if (p) {
    77fc:	2800      	cmp	r0, #0
    77fe:	f000 80ef 	beq.w	79e0 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    7802:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7804:	4a3d      	ldr	r2, [pc, #244]	; (78fc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7806:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    780a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    780e:	f000 f977 	bl	7b00 <usb_malloc>
				if (p) {
    7812:	2800      	cmp	r0, #0
    7814:	f000 80de 	beq.w	79d4 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    7818:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    781a:	4a37      	ldr	r2, [pc, #220]	; (78f8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    781c:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7820:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    7824:	e738      	b.n	7698 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7826:	f000 f96b 	bl	7b00 <usb_malloc>
				if (p) {
    782a:	2800      	cmp	r0, #0
    782c:	f000 80c0 	beq.w	79b0 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    7830:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7832:	4a32      	ldr	r2, [pc, #200]	; (78fc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7834:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7838:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    783c:	f000 f960 	bl	7b00 <usb_malloc>
				if (p) {
    7840:	2800      	cmp	r0, #0
    7842:	f000 80af 	beq.w	79a4 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    7846:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7848:	4a2b      	ldr	r2, [pc, #172]	; (78f8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    784a:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    784e:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    7852:	e708      	b.n	7666 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7854:	f000 f954 	bl	7b00 <usb_malloc>
				if (p) {
    7858:	2800      	cmp	r0, #0
    785a:	f000 80cd 	beq.w	79f8 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    785e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7860:	4a26      	ldr	r2, [pc, #152]	; (78fc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7862:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7866:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    786a:	f000 f949 	bl	7b00 <usb_malloc>
				if (p) {
    786e:	2800      	cmp	r0, #0
    7870:	f000 80bc 	beq.w	79ec <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    7874:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7876:	4a20      	ldr	r2, [pc, #128]	; (78f8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    7878:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    787c:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    7880:	e6e3      	b.n	764a <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7882:	f000 f93d 	bl	7b00 <usb_malloc>
				if (p) {
    7886:	2800      	cmp	r0, #0
    7888:	f000 809e 	beq.w	79c8 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    788c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    788e:	4a1b      	ldr	r2, [pc, #108]	; (78fc <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7890:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7894:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    7898:	f000 f932 	bl	7b00 <usb_malloc>
				if (p) {
    789c:	2800      	cmp	r0, #0
    789e:	f000 808d 	beq.w	79bc <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    78a2:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    78a4:	4a14      	ldr	r2, [pc, #80]	; (78f8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    78a6:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    78aa:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    78ae:	e6e7      	b.n	7680 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    78b0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    78b2:	3808      	subs	r0, #8
    78b4:	f000 f944 	bl	7b40 <usb_free>
    78b8:	e504      	b.n	72c4 <usb_isr+0x36c>
    78ba:	6b48      	ldr	r0, [r1, #52]	; 0x34
    78bc:	3808      	subs	r0, #8
    78be:	f000 f93f 	bl	7b40 <usb_free>
    78c2:	e4f9      	b.n	72b8 <usb_isr+0x360>
    78c4:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    78c6:	3808      	subs	r0, #8
    78c8:	f000 f93a 	bl	7b40 <usb_free>
    78cc:	e4ee      	b.n	72ac <usb_isr+0x354>
    78ce:	bf00      	nop
    78d0:	400720c0 	.word	0x400720c0
    78d4:	40072080 	.word	0x40072080
    78d8:	0000b750 	.word	0x0000b750
    78dc:	400720c4 	.word	0x400720c4
    78e0:	1fff9e21 	.word	0x1fff9e21
    78e4:	400720c8 	.word	0x400720c8
    78e8:	400720cc 	.word	0x400720cc
    78ec:	400720d0 	.word	0x400720d0
    78f0:	1fff8000 	.word	0x1fff8000
    78f4:	40072094 	.word	0x40072094
    78f8:	004000c8 	.word	0x004000c8
    78fc:	00400088 	.word	0x00400088
    7900:	1fff9db5 	.word	0x1fff9db5
    7904:	0000b754 	.word	0x0000b754
    7908:	1fff9e2c 	.word	0x1fff9e2c
    790c:	1fff9e24 	.word	0x1fff9e24
    7910:	1fff9e20 	.word	0x1fff9e20
    7914:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7916:	3808      	subs	r0, #8
    7918:	f000 f912 	bl	7b40 <usb_free>
    791c:	e4c0      	b.n	72a0 <usb_isr+0x348>
    791e:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    7920:	3808      	subs	r0, #8
    7922:	f000 f90d 	bl	7b40 <usb_free>
    7926:	e4fd      	b.n	7324 <usb_isr+0x3cc>
    7928:	6f48      	ldr	r0, [r1, #116]	; 0x74
    792a:	3808      	subs	r0, #8
    792c:	f000 f908 	bl	7b40 <usb_free>
    7930:	e4f2      	b.n	7318 <usb_isr+0x3c0>
    7932:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    7934:	3808      	subs	r0, #8
    7936:	f000 f903 	bl	7b40 <usb_free>
    793a:	e4e7      	b.n	730c <usb_isr+0x3b4>
    793c:	6e48      	ldr	r0, [r1, #100]	; 0x64
    793e:	3808      	subs	r0, #8
    7940:	f000 f8fe 	bl	7b40 <usb_free>
    7944:	e4dc      	b.n	7300 <usb_isr+0x3a8>
    7946:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    7948:	3808      	subs	r0, #8
    794a:	f000 f8f9 	bl	7b40 <usb_free>
    794e:	e4d1      	b.n	72f4 <usb_isr+0x39c>
    7950:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7952:	3808      	subs	r0, #8
    7954:	f000 f8f4 	bl	7b40 <usb_free>
    7958:	e4c6      	b.n	72e8 <usb_isr+0x390>
    795a:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    795c:	3808      	subs	r0, #8
    795e:	f000 f8ef 	bl	7b40 <usb_free>
    7962:	e4bb      	b.n	72dc <usb_isr+0x384>
    7964:	6c48      	ldr	r0, [r1, #68]	; 0x44
    7966:	3808      	subs	r0, #8
    7968:	f000 f8ea 	bl	7b40 <usb_free>
    796c:	e4b0      	b.n	72d0 <usb_isr+0x378>
    796e:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    7972:	3808      	subs	r0, #8
    7974:	f000 f8e4 	bl	7b40 <usb_free>
    7978:	e4ec      	b.n	7354 <usb_isr+0x3fc>
    797a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    797e:	3808      	subs	r0, #8
    7980:	f000 f8de 	bl	7b40 <usb_free>
    7984:	e4e0      	b.n	7348 <usb_isr+0x3f0>
    7986:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    798a:	3808      	subs	r0, #8
    798c:	f000 f8d8 	bl	7b40 <usb_free>
    7990:	e4d4      	b.n	733c <usb_isr+0x3e4>
    7992:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    7996:	3808      	subs	r0, #8
    7998:	f000 f8d2 	bl	7b40 <usb_free>
    799c:	e4c8      	b.n	7330 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    799e:	f04f 0e02 	mov.w	lr, #2
    79a2:	e6ec      	b.n	777e <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    79a4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    79a6:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    79aa:	3201      	adds	r2, #1
    79ac:	702a      	strb	r2, [r5, #0]
    79ae:	e65a      	b.n	7666 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    79b0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    79b2:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    79b6:	3201      	adds	r2, #1
    79b8:	702a      	strb	r2, [r5, #0]
    79ba:	e73f      	b.n	783c <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    79bc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    79be:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    79c2:	3201      	adds	r2, #1
    79c4:	702a      	strb	r2, [r5, #0]
    79c6:	e65b      	b.n	7680 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    79c8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    79ca:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    79ce:	3201      	adds	r2, #1
    79d0:	702a      	strb	r2, [r5, #0]
    79d2:	e761      	b.n	7898 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    79d4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    79d6:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    79da:	3201      	adds	r2, #1
    79dc:	702a      	strb	r2, [r5, #0]
    79de:	e65b      	b.n	7698 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    79e0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    79e2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    79e6:	3201      	adds	r2, #1
    79e8:	702a      	strb	r2, [r5, #0]
    79ea:	e710      	b.n	780e <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    79ec:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    79ee:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    79f2:	3201      	adds	r2, #1
    79f4:	702a      	strb	r2, [r5, #0]
    79f6:	e628      	b.n	764a <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    79f8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    79fa:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    79fe:	3201      	adds	r2, #1
    7a00:	702a      	strb	r2, [r5, #0]
    7a02:	e732      	b.n	786a <usb_isr+0x912>
    7a04:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    7a08:	46f4      	mov	ip, lr
    7a0a:	bf28      	it	cs
    7a0c:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    7a10:	eb04 030c 	add.w	r3, r4, ip
    7a14:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    7a16:	2301      	movs	r3, #1
    7a18:	ebcc 000e 	rsb	r0, ip, lr
    7a1c:	ea4f 480c 	mov.w	r8, ip, lsl #16
    7a20:	2200      	movs	r2, #0
    7a22:	9301      	str	r3, [sp, #4]
    7a24:	e518      	b.n	7458 <usb_isr+0x500>
    7a26:	bf00      	nop

00007a28 <usb_init>:
}



void usb_init(void)
{
    7a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    7a2a:	f000 fde7 	bl	85fc <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a2e:	4b29      	ldr	r3, [pc, #164]	; (7ad4 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7a30:	4829      	ldr	r0, [pc, #164]	; (7ad8 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    7a32:	4c2a      	ldr	r4, [pc, #168]	; (7adc <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7a34:	4f2a      	ldr	r7, [pc, #168]	; (7ae0 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7a36:	4d2b      	ldr	r5, [pc, #172]	; (7ae4 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7a38:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 7af8 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    7a3c:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 7afc <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    7a40:	4e29      	ldr	r6, [pc, #164]	; (7ae8 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a42:	2200      	movs	r2, #0
    7a44:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    7a46:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a48:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    7a4a:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a4c:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    7a4e:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a50:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    7a52:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a54:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    7a56:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a58:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    7a5a:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a5c:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    7a5e:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a60:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    7a62:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a64:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    7a66:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a68:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    7a6a:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a6c:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    7a6e:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a70:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    7a72:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a74:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    7a76:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a78:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    7a7a:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a7c:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    7a7e:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a80:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    7a82:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    7a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7a88:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    7a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7a8e:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    7a92:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    7a94:	f3c3 2107 	ubfx	r1, r3, #8, #8
    7a98:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7a9a:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    7a9e:	4913      	ldr	r1, [pc, #76]	; (7aec <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7aa0:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7aa2:	0e1b      	lsrs	r3, r3, #24
    7aa4:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7aa6:	23ff      	movs	r3, #255	; 0xff
    7aa8:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    7aac:	4d10      	ldr	r5, [pc, #64]	; (7af0 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    7aae:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    7ab2:	4810      	ldr	r0, [pc, #64]	; (7af4 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    7ab4:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    7ab6:	2301      	movs	r3, #1
    7ab8:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    7aba:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    7abe:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    7ac0:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    7ac4:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    7ac6:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    7aca:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    7acc:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    7ace:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    7ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ad4:	1fff8000 	.word	0x1fff8000
    7ad8:	40048034 	.word	0x40048034
    7adc:	4007209c 	.word	0x4007209c
    7ae0:	400720b0 	.word	0x400720b0
    7ae4:	400720b4 	.word	0x400720b4
    7ae8:	40072094 	.word	0x40072094
    7aec:	40072010 	.word	0x40072010
    7af0:	e000e449 	.word	0xe000e449
    7af4:	e000e108 	.word	0xe000e108
    7af8:	40072080 	.word	0x40072080
    7afc:	40072088 	.word	0x40072088

00007b00 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    7b00:	b672      	cpsid	i
	avail = usb_buffer_available;
    7b02:	480d      	ldr	r0, [pc, #52]	; (7b38 <usb_malloc+0x38>)
    7b04:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    7b06:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    7b0a:	2b0b      	cmp	r3, #11
    7b0c:	dc10      	bgt.n	7b30 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    7b0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    7b12:	40d9      	lsrs	r1, r3
    7b14:	ea22 0201 	bic.w	r2, r2, r1
    7b18:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7b1a:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    7b1c:	4807      	ldr	r0, [pc, #28]	; (7b3c <usb_malloc+0x3c>)
    7b1e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    7b22:	00db      	lsls	r3, r3, #3
    7b24:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    7b26:	2100      	movs	r1, #0
    7b28:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    7b2a:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    7b2c:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    7b2e:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    7b30:	b662      	cpsie	i
		return NULL;
    7b32:	2000      	movs	r0, #0
    7b34:	4770      	bx	lr
    7b36:	bf00      	nop
    7b38:	1fff874c 	.word	0x1fff874c
    7b3c:	1fff83bc 	.word	0x1fff83bc

00007b40 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    7b40:	4b0d      	ldr	r3, [pc, #52]	; (7b78 <usb_free+0x38>)
    7b42:	4a0e      	ldr	r2, [pc, #56]	; (7b7c <usb_free+0x3c>)
    7b44:	1ac3      	subs	r3, r0, r3
    7b46:	fba2 2303 	umull	r2, r3, r2, r3
    7b4a:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    7b4c:	2b0b      	cmp	r3, #11
    7b4e:	d80c      	bhi.n	7b6a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    7b50:	4a0b      	ldr	r2, [pc, #44]	; (7b80 <usb_free+0x40>)
    7b52:	7812      	ldrb	r2, [r2, #0]
    7b54:	b952      	cbnz	r2, 7b6c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    7b56:	b672      	cpsid	i
	usb_buffer_available |= mask;
    7b58:	480a      	ldr	r0, [pc, #40]	; (7b84 <usb_free+0x44>)
    7b5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    7b5e:	6802      	ldr	r2, [r0, #0]
    7b60:	fa21 f303 	lsr.w	r3, r1, r3
    7b64:	431a      	orrs	r2, r3
    7b66:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7b68:	b662      	cpsie	i
    7b6a:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    7b6c:	4a06      	ldr	r2, [pc, #24]	; (7b88 <usb_free+0x48>)
    7b6e:	7812      	ldrb	r2, [r2, #0]
    7b70:	2a00      	cmp	r2, #0
    7b72:	d0f0      	beq.n	7b56 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    7b74:	f7ff b94a 	b.w	6e0c <usb_rx_memory>
    7b78:	1fff83bc 	.word	0x1fff83bc
    7b7c:	38e38e39 	.word	0x38e38e39
    7b80:	1fff9e21 	.word	0x1fff9e21
    7b84:	1fff874c 	.word	0x1fff874c
    7b88:	1fff9e2c 	.word	0x1fff9e2c

00007b8c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    7b8c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    7b8e:	4d0f      	ldr	r5, [pc, #60]	; (7bcc <usb_serial_getchar+0x40>)
    7b90:	6828      	ldr	r0, [r5, #0]
    7b92:	b178      	cbz	r0, 7bb4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    7b94:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    7b96:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    7b98:	18c1      	adds	r1, r0, r3
    7b9a:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    7b9c:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    7b9e:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    7ba0:	d202      	bcs.n	7ba8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    7ba2:	8043      	strh	r3, [r0, #2]
	}
	return c;
    7ba4:	4620      	mov	r0, r4
}
    7ba6:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    7ba8:	f7ff ffca 	bl	7b40 <usb_free>
		rx_packet = NULL;
    7bac:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    7bae:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    7bb0:	602b      	str	r3, [r5, #0]
    7bb2:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7bb4:	4b06      	ldr	r3, [pc, #24]	; (7bd0 <usb_serial_getchar+0x44>)
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	b12b      	cbz	r3, 7bc6 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    7bba:	2003      	movs	r0, #3
    7bbc:	f7ff f8f2 	bl	6da4 <usb_rx>
    7bc0:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    7bc2:	2800      	cmp	r0, #0
    7bc4:	d1e6      	bne.n	7b94 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7bc6:	f04f 30ff 	mov.w	r0, #4294967295
    7bca:	bd38      	pop	{r3, r4, r5, pc}
    7bcc:	1fff9e40 	.word	0x1fff9e40
    7bd0:	1fff9e2c 	.word	0x1fff9e2c

00007bd4 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    7bd4:	b510      	push	{r4, lr}
	if (!rx_packet) {
    7bd6:	4c09      	ldr	r4, [pc, #36]	; (7bfc <usb_serial_peekchar+0x28>)
    7bd8:	6820      	ldr	r0, [r4, #0]
    7bda:	b118      	cbz	r0, 7be4 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    7bdc:	8843      	ldrh	r3, [r0, #2]
    7bde:	4418      	add	r0, r3
    7be0:	7a00      	ldrb	r0, [r0, #8]
}
    7be2:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7be4:	4b06      	ldr	r3, [pc, #24]	; (7c00 <usb_serial_peekchar+0x2c>)
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	b12b      	cbz	r3, 7bf6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    7bea:	2003      	movs	r0, #3
    7bec:	f7ff f8da 	bl	6da4 <usb_rx>
    7bf0:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    7bf2:	2800      	cmp	r0, #0
    7bf4:	d1f2      	bne.n	7bdc <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7bf6:	f04f 30ff 	mov.w	r0, #4294967295
    7bfa:	bd10      	pop	{r4, pc}
    7bfc:	1fff9e40 	.word	0x1fff9e40
    7c00:	1fff9e2c 	.word	0x1fff9e2c

00007c04 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    7c04:	4b04      	ldr	r3, [pc, #16]	; (7c18 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    7c06:	4a05      	ldr	r2, [pc, #20]	; (7c1c <usb_serial_available+0x18>)
    7c08:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    7c0a:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    7c0c:	b11b      	cbz	r3, 7c16 <usb_serial_available+0x12>
    7c0e:	881a      	ldrh	r2, [r3, #0]
    7c10:	885b      	ldrh	r3, [r3, #2]
    7c12:	1ad3      	subs	r3, r2, r3
    7c14:	4418      	add	r0, r3
	return count;
}
    7c16:	4770      	bx	lr
    7c18:	1fff9e40 	.word	0x1fff9e40
    7c1c:	1fff9ff8 	.word	0x1fff9ff8

00007c20 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    7c20:	4b0b      	ldr	r3, [pc, #44]	; (7c50 <usb_serial_flush_input+0x30>)
    7c22:	781b      	ldrb	r3, [r3, #0]
    7c24:	b19b      	cbz	r3, 7c4e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    7c26:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    7c28:	4c0a      	ldr	r4, [pc, #40]	; (7c54 <usb_serial_flush_input+0x34>)
    7c2a:	6820      	ldr	r0, [r4, #0]
    7c2c:	b148      	cbz	r0, 7c42 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    7c2e:	f7ff ff87 	bl	7b40 <usb_free>
		rx_packet = NULL;
    7c32:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7c34:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    7c36:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7c38:	f7ff f8b4 	bl	6da4 <usb_rx>
		if (!rx) break;
    7c3c:	b130      	cbz	r0, 7c4c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    7c3e:	f7ff ff7f 	bl	7b40 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7c42:	2003      	movs	r0, #3
    7c44:	f7ff f8ae 	bl	6da4 <usb_rx>
		if (!rx) break;
    7c48:	2800      	cmp	r0, #0
    7c4a:	d1f8      	bne.n	7c3e <usb_serial_flush_input+0x1e>
    7c4c:	bd10      	pop	{r4, pc}
    7c4e:	4770      	bx	lr
    7c50:	1fff9e2c 	.word	0x1fff9e2c
    7c54:	1fff9e40 	.word	0x1fff9e40

00007c58 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    7c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7c5c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 7d58 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    7c60:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7c62:	2201      	movs	r2, #1
    7c64:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    7c68:	9101      	str	r1, [sp, #4]
    7c6a:	b369      	cbz	r1, 7cc8 <usb_serial_write+0x70>
    7c6c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 7d5c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    7c70:	4f36      	ldr	r7, [pc, #216]	; (7d4c <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    7c72:	9e01      	ldr	r6, [sp, #4]
    7c74:	4683      	mov	fp, r0
		if (!tx_packet) {
    7c76:	f8d8 0000 	ldr.w	r0, [r8]
    7c7a:	b3b0      	cbz	r0, 7cea <usb_serial_write+0x92>
    7c7c:	4d34      	ldr	r5, [pc, #208]	; (7d50 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    7c7e:	8844      	ldrh	r4, [r0, #2]
    7c80:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    7c84:	42b1      	cmp	r1, r6
    7c86:	bf28      	it	cs
    7c88:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7c8a:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    7c8e:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7c90:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    7c94:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    7c96:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7c98:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    7c9c:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    7ca0:	b151      	cbz	r1, 7cb8 <usb_serial_write+0x60>
    7ca2:	3c01      	subs	r4, #1
    7ca4:	4422      	add	r2, r4
    7ca6:	4459      	add	r1, fp
    7ca8:	f81b 4b01 	ldrb.w	r4, [fp], #1
    7cac:	f802 4f01 	strb.w	r4, [r2, #1]!
    7cb0:	458b      	cmp	fp, r1
    7cb2:	d1f9      	bne.n	7ca8 <usb_serial_write+0x50>
    7cb4:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    7cb8:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    7cbc:	d80b      	bhi.n	7cd6 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    7cbe:	4a25      	ldr	r2, [pc, #148]	; (7d54 <usb_serial_write+0xfc>)
    7cc0:	2105      	movs	r1, #5
    7cc2:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    7cc4:	2e00      	cmp	r6, #0
    7cc6:	d1d6      	bne.n	7c76 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    7cc8:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    7cca:	2300      	movs	r3, #0
    7ccc:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    7cd0:	b003      	add	sp, #12
    7cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    7cd6:	2240      	movs	r2, #64	; 0x40
    7cd8:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    7cda:	4601      	mov	r1, r0
    7cdc:	2004      	movs	r0, #4
    7cde:	f7ff f8f9 	bl	6ed4 <usb_tx>
			tx_packet = NULL;
    7ce2:	2200      	movs	r2, #0
    7ce4:	f8c8 2000 	str.w	r2, [r8]
    7ce8:	e7e9      	b.n	7cbe <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    7cea:	783a      	ldrb	r2, [r7, #0]
    7cec:	b32a      	cbz	r2, 7d3a <usb_serial_write+0xe2>
    7cee:	4d18      	ldr	r5, [pc, #96]	; (7d50 <usb_serial_write+0xf8>)
    7cf0:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    7cf4:	f04f 0a01 	mov.w	sl, #1
    7cf8:	e007      	b.n	7d0a <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7cfa:	3c01      	subs	r4, #1
    7cfc:	d016      	beq.n	7d2c <usb_serial_write+0xd4>
    7cfe:	782a      	ldrb	r2, [r5, #0]
    7d00:	b9a2      	cbnz	r2, 7d2c <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    7d02:	f000 fa5f 	bl	81c4 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    7d06:	783a      	ldrb	r2, [r7, #0]
    7d08:	b1ba      	cbz	r2, 7d3a <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    7d0a:	2004      	movs	r0, #4
    7d0c:	f7ff f868 	bl	6de0 <usb_tx_packet_count>
    7d10:	2807      	cmp	r0, #7
    7d12:	d8f2      	bhi.n	7cfa <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    7d14:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    7d18:	f7ff fef2 	bl	7b00 <usb_malloc>
    7d1c:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    7d20:	2800      	cmp	r0, #0
    7d22:	d1ac      	bne.n	7c7e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    7d24:	4b0c      	ldr	r3, [pc, #48]	; (7d58 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7d26:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    7d28:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7d2a:	d1e8      	bne.n	7cfe <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    7d2c:	2301      	movs	r3, #1
					return -1;
    7d2e:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    7d32:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    7d34:	b003      	add	sp, #12
    7d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    7d3a:	2300      	movs	r3, #0
					return -1;
    7d3c:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    7d40:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    7d44:	b003      	add	sp, #12
    7d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d4a:	bf00      	nop
    7d4c:	1fff9e2c 	.word	0x1fff9e2c
    7d50:	1fff9e3c 	.word	0x1fff9e3c
    7d54:	1fff9e34 	.word	0x1fff9e34
    7d58:	1fff9e35 	.word	0x1fff9e35
    7d5c:	1fff9e38 	.word	0x1fff9e38

00007d60 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    7d60:	b500      	push	{lr}
    7d62:	b083      	sub	sp, #12
    7d64:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    7d66:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    7d68:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    7d6c:	4618      	mov	r0, r3
    7d6e:	f7ff ff73 	bl	7c58 <usb_serial_write>
}
    7d72:	b003      	add	sp, #12
    7d74:	f85d fb04 	ldr.w	pc, [sp], #4

00007d78 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    7d78:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    7d7a:	4d0e      	ldr	r5, [pc, #56]	; (7db4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    7d7c:	4c0e      	ldr	r4, [pc, #56]	; (7db8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    7d7e:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    7d80:	2301      	movs	r3, #1
    7d82:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    7d84:	b128      	cbz	r0, 7d92 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    7d86:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    7d88:	2300      	movs	r3, #0
    7d8a:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    7d8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    7d90:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    7d92:	4b0a      	ldr	r3, [pc, #40]	; (7dbc <usb_serial_write_buffer_free+0x44>)
    7d94:	781b      	ldrb	r3, [r3, #0]
    7d96:	b913      	cbnz	r3, 7d9e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    7d98:	2000      	movs	r0, #0
    7d9a:	7020      	strb	r0, [r4, #0]
			return 0;
    7d9c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    7d9e:	2004      	movs	r0, #4
    7da0:	f7ff f81e 	bl	6de0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    7da4:	2807      	cmp	r0, #7
    7da6:	d8f7      	bhi.n	7d98 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    7da8:	f7ff feaa 	bl	7b00 <usb_malloc>
    7dac:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    7dae:	2800      	cmp	r0, #0
    7db0:	d1e9      	bne.n	7d86 <usb_serial_write_buffer_free+0xe>
    7db2:	e7f1      	b.n	7d98 <usb_serial_write_buffer_free+0x20>
    7db4:	1fff9e38 	.word	0x1fff9e38
    7db8:	1fff9e35 	.word	0x1fff9e35
    7dbc:	1fff9e2c 	.word	0x1fff9e2c

00007dc0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    7dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    7dc2:	4b11      	ldr	r3, [pc, #68]	; (7e08 <usb_serial_flush_output+0x48>)
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	b18b      	cbz	r3, 7dec <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    7dc8:	4e10      	ldr	r6, [pc, #64]	; (7e0c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    7dca:	4d11      	ldr	r5, [pc, #68]	; (7e10 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    7dcc:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    7dce:	2701      	movs	r7, #1
    7dd0:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    7dd2:	b164      	cbz	r4, 7dee <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    7dd4:	4a0f      	ldr	r2, [pc, #60]	; (7e14 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    7dd6:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    7dd8:	2700      	movs	r7, #0
    7dda:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    7ddc:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    7dde:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    7de0:	2004      	movs	r0, #4
    7de2:	f7ff f877 	bl	6ed4 <usb_tx>
		tx_packet = NULL;
    7de6:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    7de8:	2300      	movs	r3, #0
    7dea:	702b      	strb	r3, [r5, #0]
    7dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    7dee:	f7ff fe87 	bl	7b00 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    7df2:	4b08      	ldr	r3, [pc, #32]	; (7e14 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    7df4:	b128      	cbz	r0, 7e02 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    7df6:	4601      	mov	r1, r0
    7df8:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    7dfa:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    7dfc:	f7ff f86a 	bl	6ed4 <usb_tx>
    7e00:	e7f2      	b.n	7de8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    7e02:	701f      	strb	r7, [r3, #0]
    7e04:	e7f0      	b.n	7de8 <usb_serial_flush_output+0x28>
    7e06:	bf00      	nop
    7e08:	1fff9e2c 	.word	0x1fff9e2c
    7e0c:	1fff9e38 	.word	0x1fff9e38
    7e10:	1fff9e35 	.word	0x1fff9e35
    7e14:	1fff9e34 	.word	0x1fff9e34

00007e18 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    7e18:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    7e1a:	4b0e      	ldr	r3, [pc, #56]	; (7e54 <usb_serial_flush_callback+0x3c>)
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	b973      	cbnz	r3, 7e3e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    7e20:	4c0d      	ldr	r4, [pc, #52]	; (7e58 <usb_serial_flush_callback+0x40>)
    7e22:	6821      	ldr	r1, [r4, #0]
    7e24:	b161      	cbz	r1, 7e40 <usb_serial_flush_callback+0x28>
    7e26:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    7e2a:	884b      	ldrh	r3, [r1, #2]
    7e2c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    7e2e:	2004      	movs	r0, #4
    7e30:	f7ff f850 	bl	6ed4 <usb_tx>
		tx_packet = NULL;
    7e34:	6025      	str	r5, [r4, #0]
    7e36:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    7e38:	4b08      	ldr	r3, [pc, #32]	; (7e5c <usb_serial_flush_callback+0x44>)
    7e3a:	2201      	movs	r2, #1
    7e3c:	701a      	strb	r2, [r3, #0]
    7e3e:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    7e40:	f7ff fe5e 	bl	7b00 <usb_malloc>
		if (tx) {
    7e44:	2800      	cmp	r0, #0
    7e46:	d0f7      	beq.n	7e38 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    7e48:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    7e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    7e4e:	2004      	movs	r0, #4
    7e50:	f7ff b840 	b.w	6ed4 <usb_tx>
    7e54:	1fff9e35 	.word	0x1fff9e35
    7e58:	1fff9e38 	.word	0x1fff9e38
    7e5c:	1fff9e34 	.word	0x1fff9e34

00007e60 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    7e60:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7e62:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7e66:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    7e68:	7f43      	ldrb	r3, [r0, #29]
    7e6a:	b933      	cbnz	r3, 7e7a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    7e6c:	7f01      	ldrb	r1, [r0, #28]
    7e6e:	2901      	cmp	r1, #1
    7e70:	d007      	beq.n	7e82 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    7e72:	2903      	cmp	r1, #3
    7e74:	d00f      	beq.n	7e96 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    7e76:	2301      	movs	r3, #1
    7e78:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7e7a:	b902      	cbnz	r2, 7e7e <EventResponder::triggerEventNotImmediate()+0x1e>
    7e7c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    7e7e:	bc10      	pop	{r4}
    7e80:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    7e82:	4c12      	ldr	r4, [pc, #72]	; (7ecc <EventResponder::triggerEventNotImmediate()+0x6c>)
    7e84:	6821      	ldr	r1, [r4, #0]
    7e86:	b1a1      	cbz	r1, 7eb2 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    7e88:	4911      	ldr	r1, [pc, #68]	; (7ed0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    7e8a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    7e8c:	680b      	ldr	r3, [r1, #0]
    7e8e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    7e90:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    7e92:	6158      	str	r0, [r3, #20]
    7e94:	e7ef      	b.n	7e76 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    7e96:	4c0f      	ldr	r4, [pc, #60]	; (7ed4 <EventResponder::triggerEventNotImmediate()+0x74>)
    7e98:	6821      	ldr	r1, [r4, #0]
    7e9a:	b181      	cbz	r1, 7ebe <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    7e9c:	490e      	ldr	r1, [pc, #56]	; (7ed8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    7e9e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    7ea0:	680b      	ldr	r3, [r1, #0]
    7ea2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    7ea4:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    7ea6:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    7ea8:	4b0c      	ldr	r3, [pc, #48]	; (7edc <EventResponder::triggerEventNotImmediate()+0x7c>)
    7eaa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    7eae:	6019      	str	r1, [r3, #0]
    7eb0:	e7e1      	b.n	7e76 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    7eb2:	4b07      	ldr	r3, [pc, #28]	; (7ed0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    7eb4:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    7eb6:	6181      	str	r1, [r0, #24]
				firstYield = this;
    7eb8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    7eba:	6018      	str	r0, [r3, #0]
    7ebc:	e7db      	b.n	7e76 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    7ebe:	4b06      	ldr	r3, [pc, #24]	; (7ed8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    7ec0:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    7ec2:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    7ec4:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    7ec6:	6018      	str	r0, [r3, #0]
    7ec8:	e7ee      	b.n	7ea8 <EventResponder::triggerEventNotImmediate()+0x48>
    7eca:	bf00      	nop
    7ecc:	1fff9e58 	.word	0x1fff9e58
    7ed0:	1fff9e54 	.word	0x1fff9e54
    7ed4:	1fff9e48 	.word	0x1fff9e48
    7ed8:	1fff9e4c 	.word	0x1fff9e4c
    7edc:	e000ed04 	.word	0xe000ed04

00007ee0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7ee0:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7ee2:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7ee4:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7ee6:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7ee8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7eea:	d002      	beq.n	7ef2 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7eec:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7eee:	f7ff bfb7 	b.w	7e60 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7ef2:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7ef4:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7ef6:	4718      	bx	r3

00007ef8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    7ef8:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7efa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7efe:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    7f00:	4c0c      	ldr	r4, [pc, #48]	; (7f34 <EventResponder::runFromInterrupt()+0x3c>)
    7f02:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7f04:	b180      	cbz	r0, 7f28 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    7f06:	4e0c      	ldr	r6, [pc, #48]	; (7f38 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    7f08:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    7f0a:	6943      	ldr	r3, [r0, #20]
    7f0c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    7f0e:	b173      	cbz	r3, 7f2e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    7f10:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7f12:	b902      	cbnz	r2, 7f16 <EventResponder::runFromInterrupt()+0x1e>
    7f14:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    7f16:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    7f18:	6883      	ldr	r3, [r0, #8]
    7f1a:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7f1c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    7f20:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    7f22:	6820      	ldr	r0, [r4, #0]
		if (first) {
    7f24:	2800      	cmp	r0, #0
    7f26:	d1f0      	bne.n	7f0a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    7f28:	b902      	cbnz	r2, 7f2c <EventResponder::runFromInterrupt()+0x34>
    7f2a:	b662      	cpsie	i
    7f2c:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    7f2e:	6033      	str	r3, [r6, #0]
    7f30:	e7ef      	b.n	7f12 <EventResponder::runFromInterrupt()+0x1a>
    7f32:	bf00      	nop
    7f34:	1fff9e48 	.word	0x1fff9e48
    7f38:	1fff9e4c 	.word	0x1fff9e4c

00007f3c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    7f3c:	f7ff bfdc 	b.w	7ef8 <EventResponder::runFromInterrupt()>

00007f40 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    7f40:	4a18      	ldr	r2, [pc, #96]	; (7fa4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    7f42:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    7f44:	6814      	ldr	r4, [r2, #0]
    7f46:	2c00      	cmp	r4, #0
    7f48:	d027      	beq.n	7f9a <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    7f4a:	6803      	ldr	r3, [r0, #0]
    7f4c:	6821      	ldr	r1, [r4, #0]
    7f4e:	428b      	cmp	r3, r1
    7f50:	d20e      	bcs.n	7f70 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    7f52:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    7f54:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    7f56:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    7f58:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    7f5a:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    7f5c:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    7f5e:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    7f60:	2302      	movs	r3, #2
    7f62:	7503      	strb	r3, [r0, #20]
}
    7f64:	bc30      	pop	{r4, r5}
    7f66:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    7f68:	6811      	ldr	r1, [r2, #0]
    7f6a:	428b      	cmp	r3, r1
    7f6c:	4614      	mov	r4, r2
    7f6e:	d308      	bcc.n	7f82 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    7f70:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    7f72:	1a5b      	subs	r3, r3, r1
    7f74:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    7f76:	2a00      	cmp	r2, #0
    7f78:	d1f6      	bne.n	7f68 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    7f7a:	6082      	str	r2, [r0, #8]
		_prev = timer;
    7f7c:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    7f7e:	60a0      	str	r0, [r4, #8]
    7f80:	e7ee      	b.n	7f60 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    7f82:	68d2      	ldr	r2, [r2, #12]
    7f84:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    7f86:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    7f88:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    7f8a:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    7f8c:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    7f8e:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    7f90:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    7f92:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    7f94:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    7f96:	bc30      	pop	{r4, r5}
    7f98:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    7f9a:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    7f9c:	60c4      	str	r4, [r0, #12]
		listActive = this;
    7f9e:	6010      	str	r0, [r2, #0]
    7fa0:	e7de      	b.n	7f60 <MillisTimer::addToActiveList()+0x20>
    7fa2:	bf00      	nop
    7fa4:	1fff9e50 	.word	0x1fff9e50

00007fa8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    7fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    7faa:	4e22      	ldr	r6, [pc, #136]	; (8034 <MillisTimer::runFromTimer()+0x8c>)
    7fac:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    7fae:	b32c      	cbz	r4, 7ffc <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    7fb0:	6823      	ldr	r3, [r4, #0]
    7fb2:	2b00      	cmp	r3, #0
    7fb4:	d13a      	bne.n	802c <MillisTimer::runFromTimer()+0x84>
    7fb6:	4f20      	ldr	r7, [pc, #128]	; (8038 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    7fb8:	461d      	mov	r5, r3
    7fba:	e004      	b.n	7fc6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    7fbc:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    7fbe:	b1ec      	cbz	r4, 7ffc <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    7fc0:	6823      	ldr	r3, [r4, #0]
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	d132      	bne.n	802c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    7fc6:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    7fc8:	b103      	cbz	r3, 7fcc <MillisTimer::runFromTimer()+0x24>
    7fca:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    7fcc:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    7fce:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    7fd0:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    7fd2:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	42bb      	cmp	r3, r7
    7fd8:	d121      	bne.n	801e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7fda:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7fdc:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7fde:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7fe0:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    7fe2:	d020      	beq.n	8026 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7fe4:	f7ff ff3c 	bl	7e60 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    7fe8:	6863      	ldr	r3, [r4, #4]
    7fea:	2b00      	cmp	r3, #0
    7fec:	d0e6      	beq.n	7fbc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    7fee:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    7ff0:	4620      	mov	r0, r4
    7ff2:	f7ff ffa5 	bl	7f40 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    7ff6:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    7ff8:	2c00      	cmp	r4, #0
    7ffa:	d1e1      	bne.n	7fc0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    7ffc:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    8000:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    8002:	4a0e      	ldr	r2, [pc, #56]	; (803c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    8004:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    8006:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    8008:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    800a:	b903      	cbnz	r3, 800e <MillisTimer::runFromTimer()+0x66>
    800c:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    800e:	b128      	cbz	r0, 801c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    8010:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    8012:	f7ff ff95 	bl	7f40 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    8016:	4620      	mov	r0, r4
    8018:	2800      	cmp	r0, #0
    801a:	d1f9      	bne.n	8010 <MillisTimer::runFromTimer()+0x68>
    801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    801e:	4622      	mov	r2, r4
    8020:	2100      	movs	r1, #0
    8022:	4798      	blx	r3
    8024:	e7e0      	b.n	7fe8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    8026:	6883      	ldr	r3, [r0, #8]
    8028:	4798      	blx	r3
    802a:	e7dd      	b.n	7fe8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    802c:	3b01      	subs	r3, #1
    802e:	6023      	str	r3, [r4, #0]
			break;
    8030:	e7e4      	b.n	7ffc <MillisTimer::runFromTimer()+0x54>
    8032:	bf00      	nop
    8034:	1fff9e50 	.word	0x1fff9e50
    8038:	00007ee1 	.word	0x00007ee1
    803c:	1fff9e60 	.word	0x1fff9e60

00008040 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    8040:	4a02      	ldr	r2, [pc, #8]	; (804c <systick_isr+0xc>)
    8042:	6813      	ldr	r3, [r2, #0]
    8044:	3301      	adds	r3, #1
    8046:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    8048:	f7ff bfae 	b.w	7fa8 <MillisTimer::runFromTimer()>
    804c:	1fff9d48 	.word	0x1fff9d48

00008050 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8050:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8052:	f7fd f8fd 	bl	5250 <setup>
	while (1) {
		loop();
    8056:	f7fd f9e1 	bl	541c <loop>
		yield();
    805a:	f000 f8b3 	bl	81c4 <yield>
    805e:	e7fa      	b.n	8056 <main+0x6>

00008060 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    8060:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    8062:	4a06      	ldr	r2, [pc, #24]	; (807c <Print::println()+0x1c>)
	return write(buf, 2);
    8064:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    8066:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    8068:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    806a:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    806c:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    806e:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    8072:	2202      	movs	r2, #2
    8074:	4798      	blx	r3
}
    8076:	b003      	add	sp, #12
    8078:	f85d fb04 	ldr.w	pc, [sp], #4
    807c:	0000b724 	.word	0x0000b724

00008080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    8080:	b5f0      	push	{r4, r5, r6, r7, lr}
    8082:	4607      	mov	r7, r0
    8084:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    8086:	2a00      	cmp	r2, #0
    8088:	d033      	beq.n	80f2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    808a:	2a01      	cmp	r2, #1
    808c:	bf08      	it	eq
    808e:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    8090:	b351      	cbz	r1, 80e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    8092:	2421      	movs	r4, #33	; 0x21
    8094:	e000      	b.n	8098 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    8096:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    8098:	fbb1 f5f2 	udiv	r5, r1, r2
    809c:	fb02 1115 	mls	r1, r2, r5, r1
    80a0:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    80a2:	2909      	cmp	r1, #9
    80a4:	f100 0130 	add.w	r1, r0, #48	; 0x30
    80a8:	bf98      	it	ls
    80aa:	b2c8      	uxtbls	r0, r1
    80ac:	a90a      	add	r1, sp, #40	; 0x28
    80ae:	bf88      	it	hi
    80b0:	3037      	addhi	r0, #55	; 0x37
    80b2:	4421      	add	r1, r4
    80b4:	bf88      	it	hi
    80b6:	b2c0      	uxtbhi	r0, r0
    80b8:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    80bc:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    80be:	4629      	mov	r1, r5
    80c0:	2d00      	cmp	r5, #0
    80c2:	d1e8      	bne.n	8096 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    80c4:	b133      	cbz	r3, 80d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    80c6:	3c01      	subs	r4, #1
    80c8:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    80ca:	ab0a      	add	r3, sp, #40	; 0x28
    80cc:	4423      	add	r3, r4
    80ce:	222d      	movs	r2, #45	; 0x2d
    80d0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    80d4:	683b      	ldr	r3, [r7, #0]
    80d6:	aa01      	add	r2, sp, #4
    80d8:	1911      	adds	r1, r2, r4
    80da:	685b      	ldr	r3, [r3, #4]
    80dc:	4638      	mov	r0, r7
    80de:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    80e2:	4798      	blx	r3
}
    80e4:	b00b      	add	sp, #44	; 0x2c
    80e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    80e8:	2230      	movs	r2, #48	; 0x30
    80ea:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    80ee:	2421      	movs	r4, #33	; 0x21
    80f0:	e7e8      	b.n	80c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    80f2:	6803      	ldr	r3, [r0, #0]
    80f4:	b2c9      	uxtb	r1, r1
    80f6:	681b      	ldr	r3, [r3, #0]
    80f8:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    80fa:	b00b      	add	sp, #44	; 0x2c
    80fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80fe:	bf00      	nop

00008100 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    8100:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    8102:	bfba      	itte	lt
    8104:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    8106:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    8108:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    810a:	220a      	movs	r2, #10
    810c:	f7ff bfb8 	b.w	8080 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00008110 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    8110:	6081      	str	r1, [r0, #8]
    8112:	4770      	bx	lr

00008114 <usb_serial_class::clear()>:
  