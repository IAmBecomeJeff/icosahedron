
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 f1 bb 00 00 a9 bb 00 00     ... ............
      10:	a9 bb 00 00 a9 bb 00 00 a9 bb 00 00 a9 bb 00 00     ................
      20:	a9 bb 00 00 a9 bb 00 00 a9 bb 00 00 f1 bb 00 00     ................
      30:	f1 bb 00 00 a9 bb 00 00 1d d0 00 00 21 d1 00 00     ............!...
      40:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      50:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      60:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      70:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      80:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      90:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      a0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      b0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      c0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      d0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      e0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
      f0:	f1 bb 00 00 79 d4 00 00 f1 bb 00 00 a5 d5 00 00     ....y...........
     100:	f1 bb 00 00 d1 d6 00 00 f1 bb 00 00 f1 bb 00 00     ................
     110:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     120:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     130:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     140:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     150:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     160:	f1 bb 00 00 39 c0 00 00 f1 bb 00 00 f1 bb 00 00     ....9...........
     170:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     180:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     190:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     1a0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00 f1 bb 00 00     ................
     1b0:	f1 bb 00 00 f1 bb 00 00 f1 bb 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00b fd12 	bl	bbf8 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00b fd66 	bl	bda4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00b fcd7 	bl	bc94 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00b fcc8 	bl	bc94 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00e f9ca 	bl	e6a0 <__libc_init_array>

	startup_late_hook();
     30c:	f00b fc7a 	bl	bc04 <startup_late_hook>
	main();
     310:	f00c ff0e 	bl	d130 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c74 	.word	0x1fff8c74
     33c:	00011ab0 	.word	0x00011ab0
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c74 	.word	0x1fff8c74
     348:	1fffabc8 	.word	0x1fffabc8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e42cd8b 	.word	0x5e42cd8b
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c74 	.word	0x1fff8c74
     42c:	00000000 	.word	0x00000000
     430:	00011ab4 	.word	0x00011ab4

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c78 	.word	0x1fff8c78
     460:	00011ab4 	.word	0x00011ab4
     464:	1fff8c74 	.word	0x1fff8c74
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.18]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     490:	3980      	subs	r1, #128	; 0x80
     492:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     494:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     496:	004b      	lsls	r3, r1, #1
     498:	7844      	ldrb	r4, [r0, #1]
     49a:	7882      	ldrb	r2, [r0, #2]
     49c:	b2c9      	uxtb	r1, r1
     49e:	b2db      	uxtb	r3, r3
     4a0:	1a61      	subs	r1, r4, r1
     4a2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ac:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ae:	7083      	strb	r3, [r0, #2]
}
     4b0:	bc10      	pop	{r4}
     4b2:	4770      	bx	lr

000004b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4b4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4b6:	4c1d      	ldr	r4, [pc, #116]	; (52c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x78>)
     4b8:	b083      	sub	sp, #12
     4ba:	6824      	ldr	r4, [r4, #0]
     4bc:	9401      	str	r4, [sp, #4]
	return ret;
     4be:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     4c0:	28ff      	cmp	r0, #255	; 0xff
     4c2:	bf98      	it	ls
     4c4:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4c6:	f44f 748c 	mov.w	r4, #280	; 0x118
     4ca:	eba5 0303 	sub.w	r3, r5, r3
     4ce:	fb04 f303 	mul.w	r3, r4, r3
     4d2:	bf98      	it	ls
     4d4:	b280      	uxthls	r0, r0
     4d6:	fb00 f003 	mul.w	r0, r0, r3
     4da:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e2:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4e4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e8:	d503      	bpl.n	4f2 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x3e>
     4ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ee:	3307      	adds	r3, #7
     4f0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f2:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4f4:	4e0e      	ldr	r6, [pc, #56]	; (530 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f6:	4c0f      	ldr	r4, [pc, #60]	; (534 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4f8:	5d76      	ldrb	r6, [r6, r5]
     4fa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4fe:	f3c3 0546 	ubfx	r5, r3, #1, #7
     502:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     506:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     508:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     50a:	bf4a      	itet	mi
     50c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     50e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     510:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     512:	1a52      	subs	r2, r2, r1
     514:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     518:	b292      	uxth	r2, r2
     51a:	b2a3      	uxth	r3, r4
     51c:	fb02 3303 	mla	r3, r2, r3, r3
     520:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     524:	b280      	uxth	r0, r0
     526:	b003      	add	sp, #12
     528:	bc70      	pop	{r4, r5, r6}
     52a:	4770      	bx	lr
     52c:	1fffa904 	.word	0x1fffa904
     530:	00010950 	.word	0x00010950
     534:	0000fd9c 	.word	0x0000fd9c

00000538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     538:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	4c1e      	ldr	r4, [pc, #120]	; (5b4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x7c>)
     53c:	b083      	sub	sp, #12
     53e:	6824      	ldr	r4, [r4, #0]
     540:	9401      	str	r4, [sp, #4]
	return ret;
     542:	9d01      	ldr	r5, [sp, #4]
     544:	28ff      	cmp	r0, #255	; 0xff
     546:	bf98      	it	ls
     548:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     54a:	f44f 748c 	mov.w	r4, #280	; 0x118
     54e:	eba5 0303 	sub.w	r3, r5, r3
     552:	fb04 f303 	mul.w	r3, r4, r3
     556:	bf98      	it	ls
     558:	b280      	uxthls	r0, r0
     55a:	fb00 f003 	mul.w	r0, r0, r3
     55e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     562:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     566:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     568:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     56a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     56e:	d503      	bpl.n	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x40>
     570:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     574:	3307      	adds	r3, #7
     576:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     578:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     57a:	4e0f      	ldr	r6, [pc, #60]	; (5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     57c:	4c0f      	ldr	r4, [pc, #60]	; (5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     57e:	5d76      	ldrb	r6, [r6, r5]
     580:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     584:	f3c3 0546 	ubfx	r5, r3, #1, #7
     588:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     58c:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     58e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     590:	bf4a      	itet	mi
     592:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     594:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     596:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     598:	1a52      	subs	r2, r2, r1
     59a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     59e:	b292      	uxth	r2, r2
     5a0:	b2a3      	uxth	r3, r4
     5a2:	fb02 3303 	mla	r3, r2, r3, r3
     5a6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5aa:	b280      	uxth	r0, r0
     5ac:	b003      	add	sp, #12
     5ae:	bc70      	pop	{r4, r5, r6}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	1fffa904 	.word	0x1fffa904
     5b8:	00010950 	.word	0x00010950
     5bc:	0000fd9c 	.word	0x0000fd9c

000005c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     5c0:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     5c2:	2101      	movs	r1, #1
     5c4:	4604      	mov	r4, r0
     5c6:	200e      	movs	r0, #14
     5c8:	f00b fb76 	bl	bcb8 <pinMode>
     5cc:	2007      	movs	r0, #7
     5ce:	2101      	movs	r1, #1
     5d0:	f00b fb72 	bl	bcb8 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     5d4:	69a0      	ldr	r0, [r4, #24]
     5d6:	b158      	cbz	r0, 5f0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     5d8:	6803      	ldr	r3, [r0, #0]
     5da:	4a07      	ldr	r2, [pc, #28]	; (5f8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     5dc:	685b      	ldr	r3, [r3, #4]
     5de:	4293      	cmp	r3, r2
     5e0:	d107      	bne.n	5f2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     5e2:	6842      	ldr	r2, [r0, #4]
     5e4:	7b01      	ldrb	r1, [r0, #12]
     5e6:	7813      	ldrb	r3, [r2, #0]
     5e8:	ea23 0301 	bic.w	r3, r3, r1
     5ec:	7013      	strb	r3, [r2, #0]
     5ee:	bd10      	pop	{r4, pc}
     5f0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     5f6:	4718      	bx	r3
     5f8:	00000481 	.word	0x00000481

000005fc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     600:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     602:	6805      	ldr	r5, [r0, #0]
     604:	f88d 3004 	strb.w	r3, [sp, #4]
     608:	f88d 3005 	strb.w	r3, [sp, #5]
     60c:	f88d 3006 	strb.w	r3, [sp, #6]
     610:	682e      	ldr	r6, [r5, #0]
     612:	4a37      	ldr	r2, [pc, #220]	; (6f0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     614:	f88d 3008 	strb.w	r3, [sp, #8]
     618:	4296      	cmp	r6, r2
     61a:	f88d 3009 	strb.w	r3, [sp, #9]
     61e:	f88d 300a 	strb.w	r3, [sp, #10]
     622:	d15f      	bne.n	6e4 <CLEDController::clearLeds(int)+0xe8>
     624:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     626:	9104      	str	r1, [sp, #16]
     628:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     62a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     62c:	a801      	add	r0, sp, #4
     62e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     630:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     634:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     638:	f88d 3020 	strb.w	r3, [sp, #32]
     63c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     63e:	d015      	beq.n	66c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     640:	f88d 301d 	strb.w	r3, [sp, #29]
     644:	f88d 301c 	strb.w	r3, [sp, #28]
     648:	f88d 301b 	strb.w	r3, [sp, #27]
     64c:	f88d 301a 	strb.w	r3, [sp, #26]
     650:	f88d 3019 	strb.w	r3, [sp, #25]
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     658:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     65a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     65c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     660:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     662:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     664:	a903      	add	r1, sp, #12
     666:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     668:	b00b      	add	sp, #44	; 0x2c
     66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     66c:	4a21      	ldr	r2, [pc, #132]	; (6f4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     66e:	7813      	ldrb	r3, [r2, #0]
     670:	3301      	adds	r3, #1
     672:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     676:	f013 0f01 	tst.w	r3, #1
     67a:	bf14      	ite	ne
     67c:	2180      	movne	r1, #128	; 0x80
     67e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     680:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     682:	079a      	lsls	r2, r3, #30
     684:	bf44      	itt	mi
     686:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     68a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     68c:	075b      	lsls	r3, r3, #29
     68e:	bf48      	it	mi
     690:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     694:	3110      	adds	r1, #16
     696:	2200      	movs	r2, #0
     698:	b2c9      	uxtb	r1, r1
     69a:	f10d 031b 	add.w	r3, sp, #27
     69e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6a2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6a6:	b1aa      	cbz	r2, 6d4 <CLEDController::clearLeds(int)+0xd8>
     6a8:	fb9e f2f2 	sdiv	r2, lr, r2
     6ac:	b2d2      	uxtb	r2, r2
     6ae:	1c50      	adds	r0, r2, #1
     6b0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     6b2:	fb00 1501 	mla	r5, r0, r1, r1
     6b6:	122d      	asrs	r5, r5, #8
     6b8:	7018      	strb	r0, [r3, #0]
     6ba:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6bc:	b105      	cbz	r5, 6c0 <CLEDController::clearLeds(int)+0xc4>
     6be:	3e01      	subs	r6, #1
     6c0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6c4:	b100      	cbz	r0, 6c8 <CLEDController::clearLeds(int)+0xcc>
     6c6:	701a      	strb	r2, [r3, #0]
     6c8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6ca:	429f      	cmp	r7, r3
     6cc:	d008      	beq.n	6e0 <CLEDController::clearLeds(int)+0xe4>
     6ce:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6d0:	2a00      	cmp	r2, #0
     6d2:	d1e9      	bne.n	6a8 <CLEDController::clearLeds(int)+0xac>
     6d4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6d6:	f803 2c03 	strb.w	r2, [r3, #-3]
     6da:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6dc:	429f      	cmp	r7, r3
     6de:	d1f6      	bne.n	6ce <CLEDController::clearLeds(int)+0xd2>
     6e0:	6825      	ldr	r5, [r4, #0]
     6e2:	e7b9      	b.n	658 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     6e4:	460a      	mov	r2, r1
     6e6:	ab02      	add	r3, sp, #8
     6e8:	a901      	add	r1, sp, #4
     6ea:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6ec:	b00b      	add	sp, #44	; 0x2c
     6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f0:	000006f9 	.word	0x000006f9
     6f4:	1fff8c90 	.word	0x1fff8c90

000006f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6fc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     6fe:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     700:	789b      	ldrb	r3, [r3, #2]
     702:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     704:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     706:	9101      	str	r1, [sp, #4]
     708:	9202      	str	r2, [sp, #8]
     70a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     70c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     710:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     714:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     718:	d016      	beq.n	748 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71a:	2300      	movs	r3, #0
     71c:	f88d 3015 	strb.w	r3, [sp, #21]
     720:	f88d 3014 	strb.w	r3, [sp, #20]
     724:	f88d 3013 	strb.w	r3, [sp, #19]
     728:	f88d 3012 	strb.w	r3, [sp, #18]
     72c:	f88d 3011 	strb.w	r3, [sp, #17]
     730:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     734:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     736:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     738:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     73e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     740:	a901      	add	r1, sp, #4
     742:	4790      	blx	r2
  }
     744:	b009      	add	sp, #36	; 0x24
     746:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     748:	4a1b      	ldr	r2, [pc, #108]	; (7b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     74a:	7813      	ldrb	r3, [r2, #0]
     74c:	3301      	adds	r3, #1
     74e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     752:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     756:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     758:	bf14      	ite	ne
     75a:	2280      	movne	r2, #128	; 0x80
     75c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     75e:	0799      	lsls	r1, r3, #30
     760:	bf44      	itt	mi
     762:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     766:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     768:	075b      	lsls	r3, r3, #29
     76a:	bf48      	it	mi
     76c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     770:	3210      	adds	r2, #16
     772:	b2d2      	uxtb	r2, r2
     774:	f10d 0313 	add.w	r3, sp, #19
     778:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     77c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     780:	b1ac      	cbz	r4, 7ae <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     782:	fb9e f4f4 	sdiv	r4, lr, r4
     786:	b2e4      	uxtb	r4, r4
     788:	1c61      	adds	r1, r4, #1
     78a:	b2c9      	uxtb	r1, r1
     78c:	fb01 2502 	mla	r5, r1, r2, r2
     790:	122d      	asrs	r5, r5, #8
     792:	7019      	strb	r1, [r3, #0]
     794:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     796:	b105      	cbz	r5, 79a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     798:	3e01      	subs	r6, #1
     79a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     79e:	b101      	cbz	r1, 7a2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a0:	701c      	strb	r4, [r3, #0]
     7a2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7a4:	42bb      	cmp	r3, r7
     7a6:	d0c5      	beq.n	734 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     7a8:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7aa:	2c00      	cmp	r4, #0
     7ac:	d1e9      	bne.n	782 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     7ae:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b0:	f803 4c03 	strb.w	r4, [r3, #-3]
     7b4:	e7f5      	b.n	7a2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7b6:	bf00      	nop
     7b8:	1fff8c90 	.word	0x1fff8c90

000007bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7c0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     7c2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7c4:	789b      	ldrb	r3, [r3, #2]
     7c6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7c8:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     7ca:	9101      	str	r1, [sp, #4]
     7cc:	9202      	str	r2, [sp, #8]
     7ce:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7d0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     7d4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     7d8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7dc:	d017      	beq.n	80e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     7de:	2300      	movs	r3, #0
     7e0:	f88d 3015 	strb.w	r3, [sp, #21]
     7e4:	f88d 3014 	strb.w	r3, [sp, #20]
     7e8:	f88d 3013 	strb.w	r3, [sp, #19]
     7ec:	f88d 3012 	strb.w	r3, [sp, #18]
     7f0:	f88d 3011 	strb.w	r3, [sp, #17]
     7f4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7f8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     7fa:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     7fc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7fe:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     800:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     804:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     806:	a901      	add	r1, sp, #4
     808:	4798      	blx	r3
  }
     80a:	b009      	add	sp, #36	; 0x24
     80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     80e:	4a1b      	ldr	r2, [pc, #108]	; (87c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     810:	7813      	ldrb	r3, [r2, #0]
     812:	3301      	adds	r3, #1
     814:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     818:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     81c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     81e:	bf14      	ite	ne
     820:	2280      	movne	r2, #128	; 0x80
     822:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     824:	0799      	lsls	r1, r3, #30
     826:	bf44      	itt	mi
     828:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     82c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     82e:	075b      	lsls	r3, r3, #29
     830:	bf48      	it	mi
     832:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     836:	3210      	adds	r2, #16
     838:	b2d2      	uxtb	r2, r2
     83a:	f10d 0313 	add.w	r3, sp, #19
     83e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     842:	f44f 7e80 	mov.w	lr, #256	; 0x100
     846:	b1ac      	cbz	r4, 874 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     848:	fb9e f4f4 	sdiv	r4, lr, r4
     84c:	b2e4      	uxtb	r4, r4
     84e:	1c61      	adds	r1, r4, #1
     850:	b2c9      	uxtb	r1, r1
     852:	fb01 2502 	mla	r5, r1, r2, r2
     856:	122d      	asrs	r5, r5, #8
     858:	7019      	strb	r1, [r3, #0]
     85a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     85c:	b105      	cbz	r5, 860 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     85e:	3e01      	subs	r6, #1
     860:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     864:	b101      	cbz	r1, 868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     866:	701c      	strb	r4, [r3, #0]
     868:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     86a:	42bb      	cmp	r3, r7
     86c:	d0c4      	beq.n	7f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     86e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     870:	2c00      	cmp	r4, #0
     872:	d1e9      	bne.n	848 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     874:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     876:	f803 4c03 	strb.w	r4, [r3, #-3]
     87a:	e7f5      	b.n	868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     87c:	1fff8c90 	.word	0x1fff8c90

00000880 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     880:	b570      	push	{r4, r5, r6, lr}
     882:	4604      	mov	r4, r0
     884:	4608      	mov	r0, r1
     886:	460d      	mov	r5, r1
     888:	f00d ffba 	bl	e800 <strlen>
     88c:	6823      	ldr	r3, [r4, #0]
     88e:	4602      	mov	r2, r0
     890:	4629      	mov	r1, r5
     892:	4620      	mov	r0, r4
     894:	685b      	ldr	r3, [r3, #4]
     896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     89a:	4718      	bx	r3

0000089c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     89c:	b538      	push	{r3, r4, r5, lr}
     89e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8a0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8a2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8a4:	f00d ffac 	bl	e800 <strlen>
     8a8:	6823      	ldr	r3, [r4, #0]
     8aa:	4602      	mov	r2, r0
     8ac:	4629      	mov	r1, r5
     8ae:	685b      	ldr	r3, [r3, #4]
     8b0:	4620      	mov	r0, r4
     8b2:	4798      	blx	r3
     8b4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8b6:	4620      	mov	r0, r4
     8b8:	f00c fc42 	bl	d140 <Print::println()>
     8bc:	4428      	add	r0, r5
     8be:	bd38      	pop	{r3, r4, r5, pc}

000008c0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8c4:	780d      	ldrb	r5, [r1, #0]
     8c6:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     8c8:	784d      	ldrb	r5, [r1, #1]
     8ca:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     8cc:	7889      	ldrb	r1, [r1, #2]
     8ce:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d0:	7811      	ldrb	r1, [r2, #0]
     8d2:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     8d4:	7851      	ldrb	r1, [r2, #1]
     8d6:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     8d8:	7892      	ldrb	r2, [r2, #2]
     8da:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8dc:	781a      	ldrb	r2, [r3, #0]
     8de:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     8e0:	785a      	ldrb	r2, [r3, #1]
     8e2:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     8e4:	789b      	ldrb	r3, [r3, #2]
     8e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     8ea:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ec:	f89a b000 	ldrb.w	fp, [sl]
     8f0:	f880 b009 	strb.w	fp, [r0, #9]
     8f4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     8f8:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     8fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     900:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     902:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     904:	9d10      	ldr	r5, [sp, #64]	; 0x40
     906:	9911      	ldr	r1, [sp, #68]	; 0x44
     908:	9a12      	ldr	r2, [sp, #72]	; 0x48
     90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     90c:	f89a b001 	ldrb.w	fp, [sl, #1]
     910:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     914:	f89a a002 	ldrb.w	sl, [sl, #2]
     918:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     91c:	f899 a000 	ldrb.w	sl, [r9]
     920:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     924:	f899 a001 	ldrb.w	sl, [r9, #1]
     928:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     92c:	f899 9002 	ldrb.w	r9, [r9, #2]
     930:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     934:	f898 9000 	ldrb.w	r9, [r8]
     938:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     93c:	f898 9001 	ldrb.w	r9, [r8, #1]
     940:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     944:	f898 8002 	ldrb.w	r8, [r8, #2]
     948:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     94c:	f89c 8000 	ldrb.w	r8, [ip]
     950:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     954:	f89c 8001 	ldrb.w	r8, [ip, #1]
     958:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     95c:	f89c c002 	ldrb.w	ip, [ip, #2]
     960:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     964:	f89e c000 	ldrb.w	ip, [lr]
     968:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     96c:	f89e c001 	ldrb.w	ip, [lr, #1]
     970:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     974:	f89e e002 	ldrb.w	lr, [lr, #2]
     978:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     97c:	f897 e000 	ldrb.w	lr, [r7]
     980:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     984:	f897 e001 	ldrb.w	lr, [r7, #1]
     988:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     98c:	78bf      	ldrb	r7, [r7, #2]
     98e:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     990:	7837      	ldrb	r7, [r6, #0]
     992:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     994:	7877      	ldrb	r7, [r6, #1]
     996:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     998:	78b6      	ldrb	r6, [r6, #2]
     99a:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     99c:	782e      	ldrb	r6, [r5, #0]
     99e:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     9a0:	786e      	ldrb	r6, [r5, #1]
     9a2:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     9a4:	78ad      	ldrb	r5, [r5, #2]
     9a6:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9aa:	780d      	ldrb	r5, [r1, #0]
     9ac:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     9b0:	784d      	ldrb	r5, [r1, #1]
     9b2:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     9b6:	7889      	ldrb	r1, [r1, #2]
     9b8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9bc:	7811      	ldrb	r1, [r2, #0]
     9be:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     9c2:	7851      	ldrb	r1, [r2, #1]
     9c4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     9c8:	7892      	ldrb	r2, [r2, #2]
     9ca:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9d0:	7812      	ldrb	r2, [r2, #0]
     9d2:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     9d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9d8:	7852      	ldrb	r2, [r2, #1]
     9da:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     9de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9e0:	7892      	ldrb	r2, [r2, #2]
     9e2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9e8:	7812      	ldrb	r2, [r2, #0]
     9ea:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     9ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9f0:	7852      	ldrb	r2, [r2, #1]
     9f2:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     9f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9f8:	7892      	ldrb	r2, [r2, #2]
     9fa:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9fe:	781a      	ldrb	r2, [r3, #0]
     a00:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     a04:	785a      	ldrb	r2, [r3, #1]
     a06:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     a0a:	789b      	ldrb	r3, [r3, #2]
     a0c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a14 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a18:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a1a:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a1c:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a1e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a22:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a24:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a26:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a28:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a2a:	d1f8      	bne.n	a1e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a2c:	680b      	ldr	r3, [r1, #0]
     a2e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     a30:	ea4f 6813 	mov.w	r8, r3, lsr #24
     a34:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a38:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a3c:	f04f 33ff 	mov.w	r3, #4294967295
     a40:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a42:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a44:	9305      	str	r3, [sp, #20]
     a46:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a48:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a4c:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a4e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     a52:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a56:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a5a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a5c:	b2f9      	uxtb	r1, r7
     a5e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a62:	9103      	str	r1, [sp, #12]
     a64:	b2e9      	uxtb	r1, r5
     a66:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a68:	fa5f f18c 	uxtb.w	r1, ip
     a6c:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     a6e:	9907      	ldr	r1, [sp, #28]
     a70:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a72:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a74:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a78:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a7c:	d80c      	bhi.n	a98 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a7e:	9905      	ldr	r1, [sp, #20]
     a80:	458c      	cmp	ip, r1
     a82:	dc07      	bgt.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     a84:	290f      	cmp	r1, #15
     a86:	d005      	beq.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     a88:	3101      	adds	r1, #1
     a8a:	b2c9      	uxtb	r1, r1
     a8c:	428b      	cmp	r3, r1
     a8e:	9102      	str	r1, [sp, #8]
     a90:	bf38      	it	cc
     a92:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a94:	b259      	sxtb	r1, r3
     a96:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a98:	a909      	add	r1, sp, #36	; 0x24
     a9a:	9100      	str	r1, [sp, #0]
     a9c:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a9e:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     aa2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     aa6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aaa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     aae:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     ab2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     ab6:	f00a f89b 	bl	abf0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     aba:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     abc:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac0:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     ac4:	46d1      	mov	r9, sl
     ac6:	d1bf      	bne.n	a48 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     ac8:	9806      	ldr	r0, [sp, #24]
     aca:	b00b      	add	sp, #44	; 0x2c
     acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ad0 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     ad0:	4b48      	ldr	r3, [pc, #288]	; (bf4 <updatePaletteIndex(LEDStruct&)+0x124>)
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	2b00      	cmp	r3, #0
     ad6:	f000 808b 	beq.w	bf0 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ade:	b09b      	sub	sp, #108	; 0x6c
     ae0:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     ae4:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     ae6:	2300      	movs	r3, #0
     ae8:	4a43      	ldr	r2, [pc, #268]	; (bf8 <updatePaletteIndex(LEDStruct&)+0x128>)
     aea:	9307      	str	r3, [sp, #28]
     aec:	f8df 910c 	ldr.w	r9, [pc, #268]	; bfc <updatePaletteIndex(LEDStruct&)+0x12c>
     af0:	9009      	str	r0, [sp, #36]	; 0x24
     af2:	f200 2327 	addw	r3, r0, #551	; 0x227
     af6:	9208      	str	r2, [sp, #32]
     af8:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     afa:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     afc:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b00:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b02:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b04:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b06:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b08:	d1f8      	bne.n	afc <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b0a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b0e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b10:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b14:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b18:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b1a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b1e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     b22:	2400      	movs	r4, #0
     b24:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b26:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b2a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     b2e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b32:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b36:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b38:	b2f1      	uxtb	r1, r6
     b3a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b3e:	9103      	str	r1, [sp, #12]
     b40:	b2e9      	uxtb	r1, r5
     b42:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b44:	fa5f f18c 	uxtb.w	r1, ip
     b48:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b4a:	9906      	ldr	r1, [sp, #24]
     b4c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b4e:	aa0c      	add	r2, sp, #48	; 0x30
     b50:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b52:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b56:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b5a:	d80c      	bhi.n	b76 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b5c:	9905      	ldr	r1, [sp, #20]
     b5e:	458c      	cmp	ip, r1
     b60:	dc07      	bgt.n	b72 <updatePaletteIndex(LEDStruct&)+0xa2>
     b62:	290f      	cmp	r1, #15
     b64:	d005      	beq.n	b72 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     b66:	3101      	adds	r1, #1
     b68:	b2c9      	uxtb	r1, r1
     b6a:	428b      	cmp	r3, r1
     b6c:	9102      	str	r1, [sp, #8]
     b6e:	bf38      	it	cc
     b70:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b72:	b259      	sxtb	r1, r3
     b74:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b76:	a90d      	add	r1, sp, #52	; 0x34
     b78:	9100      	str	r1, [sp, #0]
     b7a:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b7c:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     b80:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     b84:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b88:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     b8c:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     b90:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     b94:	f00a f82c 	bl	abf0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b98:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b9a:	46d3      	mov	fp, sl
        g = rhs.g;
     b9c:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ba0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     ba4:	d1bf      	bne.n	b26 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ba8:	aa0e      	add	r2, sp, #56	; 0x38
     baa:	4293      	cmp	r3, r2
     bac:	d018      	beq.n	be0 <updatePaletteIndex(LEDStruct&)+0x110>
     bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     bb2:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     bb6:	e001      	b.n	bbc <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     bb8:	42a3      	cmp	r3, r4
     bba:	d011      	beq.n	be0 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     bbc:	f812 1b01 	ldrb.w	r1, [r2], #1
     bc0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     bc4:	4288      	cmp	r0, r1
     bc6:	d0f7      	beq.n	bb8 <updatePaletteIndex(LEDStruct&)+0xe8>
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <updatePaletteIndex(LEDStruct&)+0x124>)
     bca:	9a07      	ldr	r2, [sp, #28]
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	3201      	adds	r2, #1
     bd0:	4293      	cmp	r3, r2
     bd2:	9207      	str	r2, [sp, #28]
     bd4:	dd09      	ble.n	bea <updatePaletteIndex(LEDStruct&)+0x11a>
     bd6:	9b08      	ldr	r3, [sp, #32]
     bd8:	f853 9f04 	ldr.w	r9, [r3, #4]!
     bdc:	9308      	str	r3, [sp, #32]
     bde:	e78c      	b.n	afa <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be2:	f89d 201c 	ldrb.w	r2, [sp, #28]
     be6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     bea:	b01b      	add	sp, #108	; 0x6c
     bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	1fff8750 	.word	0x1fff8750
     bf8:	00010778 	.word	0x00010778
     bfc:	000112d0 	.word	0x000112d0

00000c00 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c04:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     c06:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c08:	2196      	movs	r1, #150	; 0x96
     c0a:	4889      	ldr	r0, [pc, #548]	; (e30 <initialize()+0x230>)
     c0c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     c10:	aa09      	add	r2, sp, #36	; 0x24
     c12:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     c16:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     c1a:	f009 ffb9 	bl	ab90 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
     c1e:	4b84      	ldr	r3, [pc, #528]	; (e30 <initialize()+0x230>)
     c20:	4984      	ldr	r1, [pc, #528]	; (e34 <initialize()+0x234>)
     c22:	f883 71c6 	strb.w	r7, [r3, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     c26:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     c2a:	4a82      	ldr	r2, [pc, #520]	; (e34 <initialize()+0x234>)
            count++;;
        } while ( u.index != 255);
     c2c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c2e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     c30:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c32:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     c34:	d1f7      	bne.n	c26 <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c36:	6813      	ldr	r3, [r2, #0]
     c38:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     c3a:	ea4f 6813 	mov.w	r8, r3, lsr #24
     c3e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     c42:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c46:	f04f 33ff 	mov.w	r3, #4294967295
     c4a:	46c6      	mov	lr, r8
     c4c:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     c4e:	2400      	movs	r4, #0
     c50:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c52:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c56:	4878      	ldr	r0, [pc, #480]	; (e38 <initialize()+0x238>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c58:	f3c5 2707 	ubfx	r7, r5, #8, #8
     c5c:	f3c5 4607 	ubfx	r6, r5, #16, #8
     c60:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     c62:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c66:	9104      	str	r1, [sp, #16]
     c68:	b2f1      	uxtb	r1, r6
     c6a:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     c6c:	fa5f f18c 	uxtb.w	r1, ip
     c70:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     c72:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     c74:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c76:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c78:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c7c:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     c7e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c82:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c86:	d80c      	bhi.n	ca2 <initialize()+0xa2>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c88:	9906      	ldr	r1, [sp, #24]
     c8a:	458c      	cmp	ip, r1
     c8c:	dc07      	bgt.n	c9e <initialize()+0x9e>
     c8e:	290f      	cmp	r1, #15
     c90:	d005      	beq.n	c9e <initialize()+0x9e>
                    istart8 = lastSlotUsed + 1;
     c92:	3101      	adds	r1, #1
     c94:	b2c9      	uxtb	r1, r1
     c96:	428b      	cmp	r3, r1
     c98:	9103      	str	r1, [sp, #12]
     c9a:	bf38      	it	cc
     c9c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c9e:	b259      	sxtb	r1, r3
     ca0:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ca2:	a909      	add	r1, sp, #36	; 0x24
     ca4:	9100      	str	r1, [sp, #0]
     ca6:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ca8:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     cac:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     cb0:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cb4:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     cb8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     cbc:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     cc0:	f009 ff96 	bl	abf0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     cc4:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cc6:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     cca:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     cce:	46d6      	mov	lr, sl
     cd0:	d1bf      	bne.n	c52 <initialize()+0x52>
     cd2:	495a      	ldr	r1, [pc, #360]	; (e3c <initialize()+0x23c>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     cd4:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     cd6:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     cda:	4a58      	ldr	r2, [pc, #352]	; (e3c <initialize()+0x23c>)
            count++;;
        } while ( u.index != 255);
     cdc:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     cde:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ce0:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ce2:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ce4:	d1f7      	bne.n	cd6 <initialize()+0xd6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ce6:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     ce8:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     cea:	f3c3 4907 	ubfx	r9, r3, #16, #8
     cee:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     cf2:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     cf6:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     cfa:	46ce      	mov	lr, r9
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     cfc:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     cfe:	2400      	movs	r4, #0
     d00:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d02:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d06:	4b4a      	ldr	r3, [pc, #296]	; (e30 <initialize()+0x230>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d08:	f3c5 2707 	ubfx	r7, r5, #8, #8
     d0c:	f3c5 4607 	ubfx	r6, r5, #16, #8
     d10:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     d12:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d16:	9104      	str	r1, [sp, #16]
     d18:	b2f1      	uxtb	r1, r6
     d1a:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     d1c:	fa5f f18c 	uxtb.w	r1, ip
     d20:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     d22:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     d24:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d26:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d28:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d2c:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
     d30:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     d32:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d36:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d3a:	d80c      	bhi.n	d56 <initialize()+0x156>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     d3c:	9906      	ldr	r1, [sp, #24]
     d3e:	458c      	cmp	ip, r1
     d40:	dc07      	bgt.n	d52 <initialize()+0x152>
     d42:	290f      	cmp	r1, #15
     d44:	d005      	beq.n	d52 <initialize()+0x152>
                    istart8 = lastSlotUsed + 1;
     d46:	3101      	adds	r1, #1
     d48:	b2c9      	uxtb	r1, r1
     d4a:	428b      	cmp	r3, r1
     d4c:	9103      	str	r1, [sp, #12]
     d4e:	bf38      	it	cc
     d50:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     d52:	b259      	sxtb	r1, r3
     d54:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d56:	a909      	add	r1, sp, #36	; 0x24
     d58:	9100      	str	r1, [sp, #0]
     d5a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d5c:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     d60:	f88d e021 	strb.w	lr, [sp, #33]	; 0x21
        b = rhs.b;
     d64:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d68:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     d6c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     d70:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     d74:	f009 ff3c 	bl	abf0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     d78:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d7a:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     d7e:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
     d82:	46d0      	mov	r8, sl
     d84:	d1bd      	bne.n	d02 <initialize()+0x102>
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
	updatePaletteIndex(curr_leds);
     d86:	482a      	ldr	r0, [pc, #168]	; (e30 <initialize()+0x230>)
     d88:	f7ff fea2 	bl	ad0 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     d8c:	4b2c      	ldr	r3, [pc, #176]	; (e40 <initialize()+0x240>)
     d8e:	4a2d      	ldr	r2, [pc, #180]	; (e44 <initialize()+0x244>)
     d90:	7818      	ldrb	r0, [r3, #0]
     d92:	4b27      	ldr	r3, [pc, #156]	; (e30 <initialize()+0x230>)
     d94:	f883 022c 	strb.w	r0, [r3, #556]	; 0x22c
     d98:	2300      	movs	r3, #0
     d9a:	e001      	b.n	da0 <initialize()+0x1a0>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     d9c:	2b1f      	cmp	r3, #31
     d9e:	d009      	beq.n	db4 <initialize()+0x1b4>
		if (leds.mode_name == ModeList[i]) {
     da0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     da4:	4281      	cmp	r1, r0
     da6:	b2dc      	uxtb	r4, r3
     da8:	f103 0301 	add.w	r3, r3, #1
     dac:	d1f6      	bne.n	d9c <initialize()+0x19c>
			leds.mode_number = i;
     dae:	4b20      	ldr	r3, [pc, #128]	; (e30 <initialize()+0x230>)
     db0:	f883 422b 	strb.w	r4, [r3, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     db4:	4d24      	ldr	r5, [pc, #144]	; (e48 <initialize()+0x248>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     db6:	4e25      	ldr	r6, [pc, #148]	; (e4c <initialize()+0x24c>)
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     db8:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     dba:	aa09      	add	r2, sp, #36	; 0x24
     dbc:	4628      	mov	r0, r5
     dbe:	2196      	movs	r1, #150	; 0x96
     dc0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
     dc4:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
     dc8:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
     dcc:	f009 fee0 	bl	ab90 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     dd0:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     dd2:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     dd6:	491e      	ldr	r1, [pc, #120]	; (e50 <initialize()+0x250>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     dd8:	f885 31c6 	strb.w	r3, [r5, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     ddc:	f7ff fe1a 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     de0:	491c      	ldr	r1, [pc, #112]	; (e54 <initialize()+0x254>)
     de2:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     de6:	f7ff fe15 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     dea:	4b11      	ldr	r3, [pc, #68]	; (e30 <initialize()+0x230>)
	updatePaletteIndex(next_leds);
     dec:	4628      	mov	r0, r5
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     dee:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
     df2:	f885 322b 	strb.w	r3, [r5, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     df6:	f7ff fe6b 	bl	ad0 <updatePaletteIndex(LEDStruct&)>

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     dfa:	aa09      	add	r2, sp, #36	; 0x24
     dfc:	4630      	mov	r0, r6
     dfe:	2196      	movs	r1, #150	; 0x96
     e00:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
     e04:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
     e08:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
     e0c:	f009 fec0 	bl	ab90 <fill_solid(CRGB*, int, CRGB const&)>
	over_leds.array_type		= OVERLAY;
     e10:	2302      	movs	r3, #2
	over_leds.current_palette	= cequal_gp;
     e12:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     e16:	4910      	ldr	r1, [pc, #64]	; (e58 <initialize()+0x258>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
	over_leds.array_type		= OVERLAY;
     e18:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	over_leds.current_palette	= cequal_gp;
     e1c:	f7ff fdfa 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	over_leds.target_palette	= cequal_gp;
     e20:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     e24:	490c      	ldr	r1, [pc, #48]	; (e58 <initialize()+0x258>)
     e26:	f7ff fdf5 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
}
     e2a:	b00b      	add	sp, #44	; 0x2c
     e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e30:	1fff9e80 	.word	0x1fff9e80
     e34:	00011640 	.word	0x00011640
     e38:	1fffa048 	.word	0x1fffa048
     e3c:	00010da8 	.word	0x00010da8
     e40:	1fff8749 	.word	0x1fff8749
     e44:	1fff8723 	.word	0x1fff8723
     e48:	1fff8cbc 	.word	0x1fff8cbc
     e4c:	1fff9620 	.word	0x1fff9620
     e50:	000113f4 	.word	0x000113f4
     e54:	00010738 	.word	0x00010738
     e58:	00011480 	.word	0x00011480

00000e5c <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e5c:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e5e:	2112      	movs	r1, #18
     e60:	b082      	sub	sp, #8
     e62:	482e      	ldr	r0, [pc, #184]	; (f1c <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e64:	4c2e      	ldr	r4, [pc, #184]	; (f20 <global_debug()+0xc4>)
     e66:	f00b ff67 	bl	cd38 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e6a:	4b2e      	ldr	r3, [pc, #184]	; (f24 <global_debug()+0xc8>)
     e6c:	4620      	mov	r0, r4
     e6e:	7819      	ldrb	r1, [r3, #0]
     e70:	f00c f9b6 	bl	d1e0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e74:	4620      	mov	r0, r4
     e76:	f00c f963 	bl	d140 <Print::println()>
     e7a:	2111      	movs	r1, #17
     e7c:	482a      	ldr	r0, [pc, #168]	; (f28 <global_debug()+0xcc>)
     e7e:	f00b ff5b 	bl	cd38 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e82:	4b2a      	ldr	r3, [pc, #168]	; (f2c <global_debug()+0xd0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e84:	4620      	mov	r0, r4
     e86:	7819      	ldrb	r1, [r3, #0]
     e88:	f00c f9aa 	bl	d1e0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e8c:	4620      	mov	r0, r4
     e8e:	f00c f957 	bl	d140 <Print::println()>
     e92:	2115      	movs	r1, #21
     e94:	4826      	ldr	r0, [pc, #152]	; (f30 <global_debug()+0xd4>)
     e96:	f00b ff4f 	bl	cd38 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     e9a:	4b26      	ldr	r3, [pc, #152]	; (f34 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e9c:	4620      	mov	r0, r4
     e9e:	7819      	ldrb	r1, [r3, #0]
     ea0:	f00c f99e 	bl	d1e0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ea4:	4620      	mov	r0, r4
     ea6:	f00c f94b 	bl	d140 <Print::println()>
     eaa:	2114      	movs	r1, #20
     eac:	4822      	ldr	r0, [pc, #136]	; (f38 <global_debug()+0xdc>)
     eae:	f00b ff43 	bl	cd38 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     eb2:	4b22      	ldr	r3, [pc, #136]	; (f3c <global_debug()+0xe0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     eb4:	4620      	mov	r0, r4
     eb6:	8819      	ldrh	r1, [r3, #0]
     eb8:	f00c f992 	bl	d1e0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ebc:	4620      	mov	r0, r4
     ebe:	f00c f93f 	bl	d140 <Print::println()>
     ec2:	210f      	movs	r1, #15
     ec4:	481e      	ldr	r0, [pc, #120]	; (f40 <global_debug()+0xe4>)
     ec6:	f00b ff37 	bl	cd38 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     eca:	4b1e      	ldr	r3, [pc, #120]	; (f44 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ecc:	4620      	mov	r0, r4
     ece:	8819      	ldrh	r1, [r3, #0]
     ed0:	f00c f986 	bl	d1e0 <Print::print(long)>
     ed4:	2102      	movs	r1, #2
     ed6:	481c      	ldr	r0, [pc, #112]	; (f48 <global_debug()+0xec>)
     ed8:	f00b ff2e 	bl	cd38 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     edc:	4b1b      	ldr	r3, [pc, #108]	; (f4c <global_debug()+0xf0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     ede:	220a      	movs	r2, #10
     ee0:	7819      	ldrb	r1, [r3, #0]
     ee2:	4620      	mov	r0, r4
     ee4:	2300      	movs	r3, #0
     ee6:	f00c f93b 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     eea:	2101      	movs	r1, #1
     eec:	4818      	ldr	r0, [pc, #96]	; (f50 <global_debug()+0xf4>)
     eee:	f00b ff23 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ef2:	4620      	mov	r0, r4
     ef4:	f00c f924 	bl	d140 <Print::println()>
     ef8:	210e      	movs	r1, #14
     efa:	4816      	ldr	r0, [pc, #88]	; (f54 <global_debug()+0xf8>)
     efc:	f00b ff1c 	bl	cd38 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f00:	4b15      	ldr	r3, [pc, #84]	; (f58 <global_debug()+0xfc>)
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	9301      	str	r3, [sp, #4]
	return ret;
     f06:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f08:	2300      	movs	r3, #0
     f0a:	220a      	movs	r2, #10
     f0c:	4620      	mov	r0, r4
     f0e:	f00c f927 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     f12:	4620      	mov	r0, r4
     f14:	f00c f914 	bl	d140 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f18:	b002      	add	sp, #8
     f1a:	bd10      	pop	{r4, pc}
     f1c:	0000ea8c 	.word	0x0000ea8c
     f20:	1fff8790 	.word	0x1fff8790
     f24:	1fff8787 	.word	0x1fff8787
     f28:	0000eaa0 	.word	0x0000eaa0
     f2c:	1fff874c 	.word	0x1fff874c
     f30:	0000eab4 	.word	0x0000eab4
     f34:	1fff875c 	.word	0x1fff875c
     f38:	0000eacc 	.word	0x0000eacc
     f3c:	1fff8cb4 	.word	0x1fff8cb4
     f40:	0000eae4 	.word	0x0000eae4
     f44:	1fff961c 	.word	0x1fff961c
     f48:	0000eaf4 	.word	0x0000eaf4
     f4c:	1fff956c 	.word	0x1fff956c
     f50:	0000eaf8 	.word	0x0000eaf8
     f54:	0000eafc 	.word	0x0000eafc
     f58:	1fffa904 	.word	0x1fffa904

00000f5c <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f5c:	491e      	ldr	r1, [pc, #120]	; (fd8 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f5e:	481f      	ldr	r0, [pc, #124]	; (fdc <begin_transition()+0x80>)
     f60:	880b      	ldrh	r3, [r1, #0]
     f62:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f6a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f6e:	3319      	adds	r3, #25
     f70:	b29b      	uxth	r3, r3
     f72:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f76:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     f7a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f7e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f82:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f84:	b2db      	uxtb	r3, r3
     f86:	b292      	uxth	r2, r2
     f88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     f8c:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f8e:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f90:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f94:	4e12      	ldr	r6, [pc, #72]	; (fe0 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f96:	4d13      	ldr	r5, [pc, #76]	; (fe4 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f98:	5cf3      	ldrb	r3, [r6, r3]
     f9a:	4c13      	ldr	r4, [pc, #76]	; (fe8 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f9c:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     f9e:	b2ff      	uxtb	r7, r7
     fa0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fa4:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fa6:	123f      	asrs	r7, r7, #8
     fa8:	3703      	adds	r7, #3
	switch (transition_type) {
     faa:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fac:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fae:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fb0:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fb2:	d00c      	beq.n	fce <begin_transition()+0x72>
     fb4:	d306      	bcc.n	fc4 <begin_transition()+0x68>
     fb6:	2b02      	cmp	r3, #2
     fb8:	d102      	bne.n	fc0 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fba:	4b0c      	ldr	r3, [pc, #48]	; (fec <begin_transition()+0x90>)
     fbc:	2200      	movs	r2, #0
     fbe:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fc0:	bcf0      	pop	{r4, r5, r6, r7}
     fc2:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     fc4:	4b0a      	ldr	r3, [pc, #40]	; (ff0 <begin_transition()+0x94>)
     fc6:	2200      	movs	r2, #0
     fc8:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fca:	bcf0      	pop	{r4, r5, r6, r7}
     fcc:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     fce:	4b07      	ldr	r3, [pc, #28]	; (fec <begin_transition()+0x90>)
     fd0:	224a      	movs	r2, #74	; 0x4a
     fd2:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fd4:	bcf0      	pop	{r4, r5, r6, r7}
     fd6:	4770      	bx	lr
     fd8:	1fff8788 	.word	0x1fff8788
     fdc:	1fff9510 	.word	0x1fff9510
     fe0:	1fff8754 	.word	0x1fff8754
     fe4:	1fff9e6c 	.word	0x1fff9e6c
     fe8:	1fff9528 	.word	0x1fff9528
     fec:	1fff9548 	.word	0x1fff9548
     ff0:	1fff8cb6 	.word	0x1fff8cb6

00000ff4 <finish_transition()>:

void finish_transition() {
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     ff6:	4cec      	ldr	r4, [pc, #944]	; (13a8 <finish_transition()+0x3b4>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     ff8:	48ec      	ldr	r0, [pc, #944]	; (13ac <finish_transition()+0x3b8>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
     ffa:	b083      	sub	sp, #12
	in_transition = 0;
     ffc:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     ffe:	aa01      	add	r2, sp, #4
    1000:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1002:	7023      	strb	r3, [r4, #0]
    1004:	f88d 3004 	strb.w	r3, [sp, #4]
    1008:	f88d 3005 	strb.w	r3, [sp, #5]
    100c:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1010:	f009 fdbe 	bl	ab90 <fill_solid(CRGB*, int, CRGB const&)>
    1014:	4be6      	ldr	r3, [pc, #920]	; (13b0 <finish_transition()+0x3bc>)
    1016:	4ae7      	ldr	r2, [pc, #924]	; (13b4 <finish_transition()+0x3c0>)
    1018:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    101c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    1020:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    1024:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1028:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    102c:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1030:	f803 1c01 	strb.w	r1, [r3, #-1]
    1034:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    1036:	429d      	cmp	r5, r3
    1038:	f102 0203 	add.w	r2, r2, #3
    103c:	d1ee      	bne.n	101c <finish_transition()+0x28>
    103e:	4cde      	ldr	r4, [pc, #888]	; (13b8 <finish_transition()+0x3c4>)
    1040:	4eda      	ldr	r6, [pc, #872]	; (13ac <finish_transition()+0x3b8>)
    1042:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1046:	f886 31c2 	strb.w	r3, [r6, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    104a:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    104e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1050:	f506 75e4 	add.w	r5, r6, #456	; 0x1c8
    1054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1056:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    105a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    105e:	f894 e1c3 	ldrb.w	lr, [r4, #451]	; 0x1c3
    1062:	f894 71c4 	ldrb.w	r7, [r4, #452]	; 0x1c4
    1066:	f886 e1c3 	strb.w	lr, [r6, #451]	; 0x1c3
    106a:	f886 71c4 	strb.w	r7, [r6, #452]	; 0x1c4
    106e:	f894 e1c5 	ldrb.w	lr, [r4, #453]	; 0x1c5
    1072:	f894 71c6 	ldrb.w	r7, [r4, #454]	; 0x1c6
    1076:	f886 e1c5 	strb.w	lr, [r6, #453]	; 0x1c5
    107a:	f886 71c6 	strb.w	r7, [r6, #454]	; 0x1c6
    107e:	f894 e1c7 	ldrb.w	lr, [r4, #455]	; 0x1c7
    1082:	f886 e1c7 	strb.w	lr, [r6, #455]	; 0x1c7
    1086:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
    108a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    108e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1090:	f506 75fc 	add.w	r5, r6, #504	; 0x1f8
    1094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1096:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    109a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    109e:	f894 e229 	ldrb.w	lr, [r4, #553]	; 0x229
    10a2:	f894 c228 	ldrb.w	ip, [r4, #552]	; 0x228
    10a6:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
    10aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    10ae:	f886 e229 	strb.w	lr, [r6, #553]	; 0x229
    10b2:	f886 c228 	strb.w	ip, [r6, #552]	; 0x228
    10b6:	f886 722a 	strb.w	r7, [r6, #554]	; 0x22a
    10ba:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
    10be:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    10c2:	f894 e22d 	ldrb.w	lr, [r4, #557]	; 0x22d
    10c6:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    10ca:	f894 522f 	ldrb.w	r5, [r4, #559]	; 0x22f
    10ce:	f894 0230 	ldrb.w	r0, [r4, #560]	; 0x230
    10d2:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    10d6:	f886 222b 	strb.w	r2, [r6, #555]	; 0x22b
    10da:	f886 322c 	strb.w	r3, [r6, #556]	; 0x22c
    10de:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    10e2:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    10e6:	f886 e22d 	strb.w	lr, [r6, #557]	; 0x22d
    10ea:	f886 722e 	strb.w	r7, [r6, #558]	; 0x22e
    10ee:	f894 e234 	ldrb.w	lr, [r4, #564]	; 0x234
    10f2:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
    10f6:	f886 522f 	strb.w	r5, [r6, #559]	; 0x22f
    10fa:	f886 0230 	strb.w	r0, [r6, #560]	; 0x230
    10fe:	f894 5236 	ldrb.w	r5, [r4, #566]	; 0x236
    1102:	f894 0237 	ldrb.w	r0, [r4, #567]	; 0x237
    1106:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
    110a:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
    110e:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    1112:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
    1116:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
    111a:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    111e:	f886 7235 	strb.w	r7, [r6, #565]	; 0x235
    1122:	f886 2239 	strb.w	r2, [r6, #569]	; 0x239
    1126:	f886 323a 	strb.w	r3, [r6, #570]	; 0x23a
    112a:	f886 e234 	strb.w	lr, [r6, #564]	; 0x234
    112e:	f886 5236 	strb.w	r5, [r6, #566]	; 0x236
    1132:	f886 0237 	strb.w	r0, [r6, #567]	; 0x237
    1136:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    113a:	f206 233e 	addw	r3, r6, #574	; 0x23e
    113e:	f204 223e 	addw	r2, r4, #574	; 0x23e
    1142:	f206 277a 	addw	r7, r6, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1146:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
    114a:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    114e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1152:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
    1156:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    115a:	f803 1c01 	strb.w	r1, [r3, #-1]
    115e:	3303      	adds	r3, #3
    1160:	429f      	cmp	r7, r3
    1162:	f102 0203 	add.w	r2, r2, #3
    1166:	d1ee      	bne.n	1146 <finish_transition()+0x152>
    1168:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    116c:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    1170:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    1174:	f886 2277 	strb.w	r2, [r6, #631]	; 0x277
    1178:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    117c:	4b8f      	ldr	r3, [pc, #572]	; (13bc <finish_transition()+0x3c8>)
    117e:	f886 0278 	strb.w	r0, [r6, #632]	; 0x278
    1182:	f886 1279 	strb.w	r1, [r6, #633]	; 0x279
    1186:	f894 027b 	ldrb.w	r0, [r4, #635]	; 0x27b
    118a:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    118e:	f886 227a 	strb.w	r2, [r6, #634]	; 0x27a
    1192:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    1196:	f886 027b 	strb.w	r0, [r6, #635]	; 0x27b
    119a:	f886 127c 	strb.w	r1, [r6, #636]	; 0x27c
    119e:	f894 027e 	ldrb.w	r0, [r4, #638]	; 0x27e
    11a2:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    11a6:	f886 227d 	strb.w	r2, [r6, #637]	; 0x27d
    11aa:	4a85      	ldr	r2, [pc, #532]	; (13c0 <finish_transition()+0x3cc>)
    11ac:	f886 027e 	strb.w	r0, [r6, #638]	; 0x27e
    11b0:	f886 127f 	strb.w	r1, [r6, #639]	; 0x27f
    11b4:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    11b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11bc:	f803 1b01 	strb.w	r1, [r3], #1
    11c0:	4283      	cmp	r3, r0
    11c2:	d1f9      	bne.n	11b8 <finish_transition()+0x1c4>
    11c4:	497f      	ldr	r1, [pc, #508]	; (13c4 <finish_transition()+0x3d0>)
    11c6:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    11ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    11ce:	f803 2b01 	strb.w	r2, [r3], #1
    11d2:	4283      	cmp	r3, r0
    11d4:	4a75      	ldr	r2, [pc, #468]	; (13ac <finish_transition()+0x3b8>)
    11d6:	d1f8      	bne.n	11ca <finish_transition()+0x1d6>
    11d8:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    11dc:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    11e0:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    11e4:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    11e8:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    11ec:	f882 3316 	strb.w	r3, [r2, #790]	; 0x316
    11f0:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    11f4:	f882 6317 	strb.w	r6, [r2, #791]	; 0x317
    11f8:	f882 5318 	strb.w	r5, [r2, #792]	; 0x318
    11fc:	f8b4 631c 	ldrh.w	r6, [r4, #796]	; 0x31c
    1200:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    1204:	f882 0319 	strb.w	r0, [r2, #793]	; 0x319
    1208:	f882 131a 	strb.w	r1, [r2, #794]	; 0x31a
    120c:	f8b4 0320 	ldrh.w	r0, [r4, #800]	; 0x320
    1210:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    1214:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
    1218:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
    121c:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
    1220:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
    1224:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
    1228:	f894 5325 	ldrb.w	r5, [r4, #805]	; 0x325
    122c:	f8a2 0320 	strh.w	r0, [r2, #800]	; 0x320
    1230:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
    1234:	f894 0326 	ldrb.w	r0, [r4, #806]	; 0x326
    1238:	f894 1327 	ldrb.w	r1, [r4, #807]	; 0x327
    123c:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
    1240:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    1244:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    1248:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    124c:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
    1250:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    1254:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    1258:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    125c:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    1260:	f8b4 632c 	ldrh.w	r6, [r4, #812]	; 0x32c
    1264:	f8b4 532e 	ldrh.w	r5, [r4, #814]	; 0x32e
    1268:	f8b4 0330 	ldrh.w	r0, [r4, #816]	; 0x330
    126c:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    1270:	f8b4 3334 	ldrh.w	r3, [r4, #820]	; 0x334
    1274:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1278:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    127c:	f8b4 6336 	ldrh.w	r6, [r4, #822]	; 0x336
    1280:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
    1284:	f8a2 0330 	strh.w	r0, [r2, #816]	; 0x330
    1288:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    128c:	f8b4 033a 	ldrh.w	r0, [r4, #826]	; 0x33a
    1290:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    1294:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    1298:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
    129c:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    12a0:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    12a4:	f894 633f 	ldrb.w	r6, [r4, #831]	; 0x33f
    12a8:	f894 5340 	ldrb.w	r5, [r4, #832]	; 0x340
    12ac:	f8a2 033a 	strh.w	r0, [r2, #826]	; 0x33a
    12b0:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    12b4:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341
    12b8:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    12bc:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    12c0:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    12c4:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    12c8:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    12cc:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
    12d0:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    12d4:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    12d8:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    12dc:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    12e0:	f894 6345 	ldrb.w	r6, [r4, #837]	; 0x345
    12e4:	f894 5346 	ldrb.w	r5, [r4, #838]	; 0x346
    12e8:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
    12ec:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    12f0:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    12f4:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    12f8:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    12fc:	f894 634a 	ldrb.w	r6, [r4, #842]	; 0x34a
    1300:	f894 534b 	ldrb.w	r5, [r4, #843]	; 0x34b
    1304:	f882 0347 	strb.w	r0, [r2, #839]	; 0x347
    1308:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    130c:	f894 034c 	ldrb.w	r0, [r4, #844]	; 0x34c
    1310:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    1314:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    1318:	f894 334e 	ldrb.w	r3, [r4, #846]	; 0x34e
    131c:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    1320:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    1324:	f882 034c 	strb.w	r0, [r2, #844]	; 0x34c
    1328:	f894 5350 	ldrb.w	r5, [r4, #848]	; 0x350
    132c:	f894 0351 	ldrb.w	r0, [r4, #849]	; 0x351
    1330:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    1334:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    1338:	f894 1352 	ldrb.w	r1, [r4, #850]	; 0x352
    133c:	f894 3353 	ldrb.w	r3, [r4, #851]	; 0x353
    1340:	f894 634f 	ldrb.w	r6, [r4, #847]	; 0x34f
    1344:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    1348:	f882 0351 	strb.w	r0, [r2, #849]	; 0x351
    134c:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    1350:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    1354:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    1358:	491b      	ldr	r1, [pc, #108]	; (13c8 <finish_transition()+0x3d4>)
    135a:	f894 6354 	ldrb.w	r6, [r4, #852]	; 0x354
    135e:	f894 335d 	ldrb.w	r3, [r4, #861]	; 0x35d
    1362:	f8d4 5358 	ldr.w	r5, [r4, #856]	; 0x358
    1366:	f894 035c 	ldrb.w	r0, [r4, #860]	; 0x35c
    136a:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    136e:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    1372:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    1376:	f882 035c 	strb.w	r0, [r2, #860]	; 0x35c
    137a:	f502 7358 	add.w	r3, r2, #864	; 0x360
    137e:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    1382:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1386:	f843 0b04 	str.w	r0, [r3], #4
    138a:	4293      	cmp	r3, r2
    138c:	d1f9      	bne.n	1382 <finish_transition()+0x38e>
    138e:	4a0f      	ldr	r2, [pc, #60]	; (13cc <finish_transition()+0x3d8>)
    1390:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1394:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1398:	f843 1b04 	str.w	r1, [r3], #4
    139c:	4283      	cmp	r3, r0
    139e:	d1f9      	bne.n	1394 <finish_transition()+0x3a0>
    13a0:	4a0b      	ldr	r2, [pc, #44]	; (13d0 <finish_transition()+0x3dc>)
    13a2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    13a6:	e015      	b.n	13d4 <finish_transition()+0x3e0>
    13a8:	1fff9510 	.word	0x1fff9510
    13ac:	1fff9e80 	.word	0x1fff9e80
    13b0:	1fff9e83 	.word	0x1fff9e83
    13b4:	1fff8cbf 	.word	0x1fff8cbf
    13b8:	1fff8cbc 	.word	0x1fff8cbc
    13bc:	1fffa100 	.word	0x1fffa100
    13c0:	1fff8f3b 	.word	0x1fff8f3b
    13c4:	1fff8f86 	.word	0x1fff8f86
    13c8:	1fff9018 	.word	0x1fff9018
    13cc:	1fff9108 	.word	0x1fff9108
    13d0:	1fff91fb 	.word	0x1fff91fb
    13d4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    13d8:	f803 1b01 	strb.w	r1, [r3], #1
    13dc:	4283      	cmp	r3, r0
    13de:	d1f9      	bne.n	13d4 <finish_transition()+0x3e0>
    13e0:	4a62      	ldr	r2, [pc, #392]	; (156c <finish_transition()+0x578>)
    13e2:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    13e6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13ea:	f843 1b04 	str.w	r1, [r3], #4
    13ee:	4283      	cmp	r3, r0
    13f0:	d1f9      	bne.n	13e6 <finish_transition()+0x3f2>
    13f2:	4a5f      	ldr	r2, [pc, #380]	; (1570 <finish_transition()+0x57c>)
    13f4:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    13f8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13fc:	f843 1b04 	str.w	r1, [r3], #4
    1400:	4283      	cmp	r3, r0
    1402:	495c      	ldr	r1, [pc, #368]	; (1574 <finish_transition()+0x580>)
    1404:	d1f8      	bne.n	13f8 <finish_transition()+0x404>
    1406:	f894 375c 	ldrb.w	r3, [r4, #1884]	; 0x75c
    140a:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    140e:	f894 675e 	ldrb.w	r6, [r4, #1886]	; 0x75e
    1412:	f8b4 5760 	ldrh.w	r5, [r4, #1888]	; 0x760
    1416:	f8b4 0762 	ldrh.w	r0, [r4, #1890]	; 0x762
    141a:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    141e:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    1422:	f8b4 3764 	ldrh.w	r3, [r4, #1892]	; 0x764
    1426:	f894 2766 	ldrb.w	r2, [r4, #1894]	; 0x766
    142a:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    142e:	f8a1 5760 	strh.w	r5, [r1, #1888]	; 0x760
    1432:	f8a1 0762 	strh.w	r0, [r1, #1890]	; 0x762
    1436:	f8a1 3764 	strh.w	r3, [r1, #1892]	; 0x764
    143a:	f881 2766 	strb.w	r2, [r1, #1894]	; 0x766
    143e:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    1442:	f894 6767 	ldrb.w	r6, [r4, #1895]	; 0x767
    1446:	f894 5768 	ldrb.w	r5, [r4, #1896]	; 0x768
    144a:	f894 0769 	ldrb.w	r0, [r4, #1897]	; 0x769
    144e:	4a4a      	ldr	r2, [pc, #296]	; (1578 <finish_transition()+0x584>)
    1450:	f881 376a 	strb.w	r3, [r1, #1898]	; 0x76a
    1454:	f881 6767 	strb.w	r6, [r1, #1895]	; 0x767
    1458:	f881 5768 	strb.w	r5, [r1, #1896]	; 0x768
    145c:	f881 0769 	strb.w	r0, [r1, #1897]	; 0x769
    1460:	f201 736c 	addw	r3, r1, #1900	; 0x76c
    1464:	f201 718c 	addw	r1, r1, #1932	; 0x78c
    1468:	f852 0f04 	ldr.w	r0, [r2, #4]!
    146c:	f843 0b04 	str.w	r0, [r3], #4
    1470:	428b      	cmp	r3, r1
    1472:	d1f9      	bne.n	1468 <finish_transition()+0x474>
    1474:	4a41      	ldr	r2, [pc, #260]	; (157c <finish_transition()+0x588>)
    1476:	f103 0020 	add.w	r0, r3, #32
    147a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    147e:	f843 1b04 	str.w	r1, [r3], #4
    1482:	4283      	cmp	r3, r0
    1484:	d1f9      	bne.n	147a <finish_transition()+0x486>
    1486:	4a3e      	ldr	r2, [pc, #248]	; (1580 <finish_transition()+0x58c>)
    1488:	f103 0020 	add.w	r0, r3, #32
    148c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1490:	f843 1b04 	str.w	r1, [r3], #4
    1494:	4283      	cmp	r3, r0
    1496:	d1f9      	bne.n	148c <finish_transition()+0x498>
    1498:	4a3a      	ldr	r2, [pc, #232]	; (1584 <finish_transition()+0x590>)
    149a:	f103 0020 	add.w	r0, r3, #32
    149e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14a2:	f843 1b04 	str.w	r1, [r3], #4
    14a6:	4283      	cmp	r3, r0
    14a8:	d1f9      	bne.n	149e <finish_transition()+0x4aa>
    14aa:	4a37      	ldr	r2, [pc, #220]	; (1588 <finish_transition()+0x594>)
    14ac:	f103 0020 	add.w	r0, r3, #32
    14b0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14b4:	f843 1b04 	str.w	r1, [r3], #4
    14b8:	4283      	cmp	r3, r0
    14ba:	d1f9      	bne.n	14b0 <finish_transition()+0x4bc>
    14bc:	4a33      	ldr	r2, [pc, #204]	; (158c <finish_transition()+0x598>)
    14be:	f103 0020 	add.w	r0, r3, #32
    14c2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14c6:	f843 1b04 	str.w	r1, [r3], #4
    14ca:	4283      	cmp	r3, r0
    14cc:	4d29      	ldr	r5, [pc, #164]	; (1574 <finish_transition()+0x580>)
    14ce:	d1f8      	bne.n	14c2 <finish_transition()+0x4ce>
    14d0:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
    14d4:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    14d8:	f8d4 1834 	ldr.w	r1, [r4, #2100]	; 0x834
    14dc:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
    14e0:	f894 682e 	ldrb.w	r6, [r4, #2094]	; 0x82e
    14e4:	f8a5 382c 	strh.w	r3, [r5, #2092]	; 0x82c
    14e8:	f8a5 2830 	strh.w	r2, [r5, #2096]	; 0x830
    14ec:	f894 383c 	ldrb.w	r3, [r4, #2108]	; 0x83c
    14f0:	f894 283e 	ldrb.w	r2, [r4, #2110]	; 0x83e
    14f4:	f8c5 1834 	str.w	r1, [r5, #2100]	; 0x834
    14f8:	f8c5 0838 	str.w	r0, [r5, #2104]	; 0x838
    14fc:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    1500:	f894 0840 	ldrb.w	r0, [r4, #2112]	; 0x840
    1504:	f894 783d 	ldrb.w	r7, [r4, #2109]	; 0x83d
    1508:	f885 682e 	strb.w	r6, [r5, #2094]	; 0x82e
    150c:	f885 383c 	strb.w	r3, [r5, #2108]	; 0x83c
    1510:	f894 6841 	ldrb.w	r6, [r4, #2113]	; 0x841
    1514:	f894 3842 	ldrb.w	r3, [r4, #2114]	; 0x842
    1518:	f885 283e 	strb.w	r2, [r5, #2110]	; 0x83e
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    151c:	2400      	movs	r4, #0
    151e:	f885 183f 	strb.w	r1, [r5, #2111]	; 0x83f
    1522:	f885 0840 	strb.w	r0, [r5, #2112]	; 0x840
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1526:	aa01      	add	r2, sp, #4
    1528:	2196      	movs	r1, #150	; 0x96
    152a:	4819      	ldr	r0, [pc, #100]	; (1590 <finish_transition()+0x59c>)
    152c:	f885 3842 	strb.w	r3, [r5, #2114]	; 0x842
    1530:	f885 783d 	strb.w	r7, [r5, #2109]	; 0x83d
    1534:	f885 6841 	strb.w	r6, [r5, #2113]	; 0x841
    1538:	f88d 4004 	strb.w	r4, [sp, #4]
    153c:	f88d 4005 	strb.w	r4, [sp, #5]
    1540:	f88d 4006 	strb.w	r4, [sp, #6]
    1544:	f009 fb24 	bl	ab90 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    1548:	4b12      	ldr	r3, [pc, #72]	; (1594 <finish_transition()+0x5a0>)
void finish_transition() {
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type = CURRENT;
    154a:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    154e:	781b      	ldrb	r3, [r3, #0]
    1550:	b953      	cbnz	r3, 1568 <finish_transition()+0x574>
    1552:	aa01      	add	r2, sp, #4
    1554:	2196      	movs	r1, #150	; 0x96
    1556:	4810      	ldr	r0, [pc, #64]	; (1598 <finish_transition()+0x5a4>)
    1558:	f88d 3004 	strb.w	r3, [sp, #4]
    155c:	f88d 3005 	strb.w	r3, [sp, #5]
    1560:	f88d 3006 	strb.w	r3, [sp, #6]
    1564:	f009 fb14 	bl	ab90 <fill_solid(CRGB*, int, CRGB const&)>
}
    1568:	b003      	add	sp, #12
    156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    156c:	1fff9234 	.word	0x1fff9234
    1570:	1fff9324 	.word	0x1fff9324
    1574:	1fff9e80 	.word	0x1fff9e80
    1578:	1fff9424 	.word	0x1fff9424
    157c:	1fff9444 	.word	0x1fff9444
    1580:	1fff9464 	.word	0x1fff9464
    1584:	1fff9484 	.word	0x1fff9484
    1588:	1fff94a4 	.word	0x1fff94a4
    158c:	1fff94c4 	.word	0x1fff94c4
    1590:	1fff8cbc 	.word	0x1fff8cbc
    1594:	1fff961a 	.word	0x1fff961a
    1598:	1fff9620 	.word	0x1fff9620

0000159c <blending()>:

void blending() {
    159c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15a0:	4d2f      	ldr	r5, [pc, #188]	; (1660 <blending()+0xc4>)
    15a2:	4e30      	ldr	r6, [pc, #192]	; (1664 <blending()+0xc8>)
    15a4:	4c30      	ldr	r4, [pc, #192]	; (1668 <blending()+0xcc>)
    15a6:	4f31      	ldr	r7, [pc, #196]	; (166c <blending()+0xd0>)
    15a8:	b085      	sub	sp, #20
    15aa:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    15ae:	4632      	mov	r2, r6
    15b0:	4629      	mov	r1, r5
    15b2:	783b      	ldrb	r3, [r7, #0]
    15b4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 166c <blending()+0xd0>
    15b8:	a803      	add	r0, sp, #12
    15ba:	3503      	adds	r5, #3
    15bc:	f009 fbda 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    15c4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15cc:	7021      	strb	r1, [r4, #0]
    15ce:	4545      	cmp	r5, r8
        g = rhs.g;
    15d0:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    15d2:	70a3      	strb	r3, [r4, #2]
    15d4:	f106 0603 	add.w	r6, r6, #3
    15d8:	f104 0403 	add.w	r4, r4, #3
    15dc:	d1e7      	bne.n	15ae <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15de:	4e24      	ldr	r6, [pc, #144]	; (1670 <blending()+0xd4>)
    15e0:	6833      	ldr	r3, [r6, #0]
    15e2:	07db      	lsls	r3, r3, #31
    15e4:	d51f      	bpl.n	1626 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e6:	4d23      	ldr	r5, [pc, #140]	; (1674 <blending()+0xd8>)
    15e8:	4c23      	ldr	r4, [pc, #140]	; (1678 <blending()+0xdc>)
    15ea:	682b      	ldr	r3, [r5, #0]
    15ec:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15ee:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	1a5b      	subs	r3, r3, r1
    15f6:	4293      	cmp	r3, r2
    15f8:	d30c      	bcc.n	1614 <blending()+0x78>
    15fa:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15fc:	682a      	ldr	r2, [r5, #0]
    15fe:	9202      	str	r2, [sp, #8]
    1600:	3301      	adds	r3, #1
	return ret;
    1602:	9a02      	ldr	r2, [sp, #8]
    1604:	6022      	str	r2, [r4, #0]
    1606:	b2db      	uxtb	r3, r3
    1608:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    160a:	2bff      	cmp	r3, #255	; 0xff
    160c:	d006      	beq.n	161c <blending()+0x80>
		finish_transition();
	}
}
    160e:	b005      	add	sp, #20
    1610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1614:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1618:	2bff      	cmp	r3, #255	; 0xff
    161a:	d1f8      	bne.n	160e <blending()+0x72>
		finish_transition();
    161c:	f7ff fcea 	bl	ff4 <finish_transition()>
	}
}
    1620:	b005      	add	sp, #20
    1622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1626:	4630      	mov	r0, r6
    1628:	f00a faee 	bl	bc08 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    162c:	4d11      	ldr	r5, [pc, #68]	; (1674 <blending()+0xd8>)
    162e:	b950      	cbnz	r0, 1646 <blending()+0xaa>
    1630:	4c11      	ldr	r4, [pc, #68]	; (1678 <blending()+0xdc>)
    1632:	682b      	ldr	r3, [r5, #0]
    1634:	9303      	str	r3, [sp, #12]
    1636:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    163a:	9b03      	ldr	r3, [sp, #12]
    163c:	1a5b      	subs	r3, r3, r1
    163e:	4293      	cmp	r3, r2
    1640:	d2db      	bcs.n	15fa <blending()+0x5e>
    1642:	783b      	ldrb	r3, [r7, #0]
    1644:	e7e1      	b.n	160a <blending()+0x6e>
    1646:	4b0d      	ldr	r3, [pc, #52]	; (167c <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1648:	682a      	ldr	r2, [r5, #0]
    164a:	781b      	ldrb	r3, [r3, #0]
    164c:	4c0a      	ldr	r4, [pc, #40]	; (1678 <blending()+0xdc>)
    164e:	9201      	str	r2, [sp, #4]
	return ret;
    1650:	9a01      	ldr	r2, [sp, #4]
    1652:	6022      	str	r2, [r4, #0]
    1654:	009b      	lsls	r3, r3, #2
    1656:	4630      	mov	r0, r6
    1658:	6063      	str	r3, [r4, #4]
    165a:	f00a fadb 	bl	bc14 <__cxa_guard_release>
    165e:	e7e8      	b.n	1632 <blending()+0x96>
    1660:	1fff9e80 	.word	0x1fff9e80
    1664:	1fff8cbc 	.word	0x1fff8cbc
    1668:	1fffa6c4 	.word	0x1fffa6c4
    166c:	1fff8cb6 	.word	0x1fff8cb6
    1670:	1fff9604 	.word	0x1fff9604
    1674:	1fffa904 	.word	0x1fffa904
    1678:	1fff960c 	.word	0x1fff960c
    167c:	1fff9e6c 	.word	0x1fff9e6c

00001680 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1684:	4e94      	ldr	r6, [pc, #592]	; (18d8 <wipedown()+0x258>)
    1686:	f896 c000 	ldrb.w	ip, [r6]
    168a:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    168e:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1690:	2b00      	cmp	r3, #0
    1692:	f000 811e 	beq.w	18d2 <wipedown()+0x252>
    1696:	f103 3bff 	add.w	fp, r3, #4294967295
    169a:	fa1f fb8b 	uxth.w	fp, fp
    169e:	488f      	ldr	r0, [pc, #572]	; (18dc <wipedown()+0x25c>)
    16a0:	498f      	ldr	r1, [pc, #572]	; (18e0 <wipedown()+0x260>)
    16a2:	f10b 0b01 	add.w	fp, fp, #1
    16a6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    16aa:	4483      	add	fp, r0
    16ac:	4602      	mov	r2, r0
    16ae:	460d      	mov	r5, r1
    16b0:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16b2:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    16b4:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    16b8:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16bc:	7027      	strb	r7, [r4, #0]
    16be:	3203      	adds	r2, #3
    16c0:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    16c4:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16c8:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16cc:	f884 a001 	strb.w	sl, [r4, #1]
    16d0:	455a      	cmp	r2, fp
        b = rhs.b;
    16d2:	f884 9002 	strb.w	r9, [r4, #2]
    16d6:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16da:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    16de:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    16e2:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    16e6:	f104 0403 	add.w	r4, r4, #3
    16ea:	f1a1 0103 	sub.w	r1, r1, #3
    16ee:	d1e0      	bne.n	16b2 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16f0:	2b4a      	cmp	r3, #74	; 0x4a
    16f2:	d827      	bhi.n	1744 <wipedown()+0xc4>
    16f4:	487b      	ldr	r0, [pc, #492]	; (18e4 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    16f6:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16fa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1702:	eb00 0801 	add.w	r8, r0, r1
    1706:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    170a:	3301      	adds	r3, #1
    170c:	186f      	adds	r7, r5, r1
    170e:	f810 b001 	ldrb.w	fp, [r0, r1]
    1712:	f805 b001 	strb.w	fp, [r5, r1]
    1716:	18ac      	adds	r4, r5, r2
    1718:	b29b      	uxth	r3, r3
        g = rhs.g;
    171a:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    171e:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1722:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1726:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    172a:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    172e:	f887 a001 	strb.w	sl, [r7, #1]
    1732:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1734:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1738:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    173c:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1740:	70a1      	strb	r1, [r4, #2]
    1742:	d1d8      	bne.n	16f6 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1744:	f10c 3aff 	add.w	sl, ip, #4294967295
    1748:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    174c:	2480      	movs	r4, #128	; 0x80
    174e:	eb05 0b0a 	add.w	fp, r5, sl
    1752:	4659      	mov	r1, fp
    1754:	4623      	mov	r3, r4
    1756:	a803      	add	r0, sp, #12
    1758:	aa02      	add	r2, sp, #8
    175a:	2700      	movs	r7, #0
    175c:	f88d 4009 	strb.w	r4, [sp, #9]
    1760:	f88d 400a 	strb.w	r4, [sp, #10]
    1764:	f88d 7008 	strb.w	r7, [sp, #8]
    1768:	f009 fb04 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    176c:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1770:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    1774:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1778:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    177c:	f805 300a 	strb.w	r3, [r5, sl]
    1780:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    1784:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1788:	eb05 0908 	add.w	r9, r5, r8
    178c:	4649      	mov	r1, r9
    178e:	4623      	mov	r3, r4
        g = rhs.g;
    1790:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    1794:	f88b 0002 	strb.w	r0, [fp, #2]
    1798:	aa02      	add	r2, sp, #8
    179a:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    179c:	f88d 7008 	strb.w	r7, [sp, #8]
    17a0:	f88d 4009 	strb.w	r4, [sp, #9]
    17a4:	f88d 400a 	strb.w	r4, [sp, #10]
    17a8:	f009 fae4 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    17ac:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17ae:	f89d 100c 	ldrb.w	r1, [sp, #12]
    17b2:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    17b6:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    17ba:	f89d 000d 	ldrb.w	r0, [sp, #13]
    17be:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17c2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    17c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17ce:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17d2:	eb05 0e0c 	add.w	lr, r5, ip
    17d6:	1868      	adds	r0, r5, r1
    17d8:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    17da:	2a49      	cmp	r2, #73	; 0x49
    17dc:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    17e0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18e0 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    17e4:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    17e8:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17ec:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18d8 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17f0:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    17f2:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    17f4:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    17f6:	d92e      	bls.n	1856 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    17f8:	4f3b      	ldr	r7, [pc, #236]	; (18e8 <wipedown()+0x268>)
    17fa:	683b      	ldr	r3, [r7, #0]
    17fc:	07db      	lsls	r3, r3, #31
    17fe:	d517      	bpl.n	1830 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1800:	4d3a      	ldr	r5, [pc, #232]	; (18ec <wipedown()+0x26c>)
    1802:	4c3b      	ldr	r4, [pc, #236]	; (18f0 <wipedown()+0x270>)
    1804:	682b      	ldr	r3, [r5, #0]
    1806:	9303      	str	r3, [sp, #12]
    1808:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    180c:	9b03      	ldr	r3, [sp, #12]
    180e:	1a5b      	subs	r3, r3, r1
    1810:	4293      	cmp	r3, r2
    1812:	7833      	ldrb	r3, [r6, #0]
    1814:	d306      	bcc.n	1824 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1816:	682a      	ldr	r2, [r5, #0]
    1818:	9202      	str	r2, [sp, #8]
    181a:	3b01      	subs	r3, #1
	return ret;
    181c:	9a02      	ldr	r2, [sp, #8]
    181e:	6022      	str	r2, [r4, #0]
    1820:	b2db      	uxtb	r3, r3
    1822:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    1824:	b90b      	cbnz	r3, 182a <wipedown()+0x1aa>
		finish_transition();
    1826:	f7ff fbe5 	bl	ff4 <finish_transition()>
	}
}
    182a:	b005      	add	sp, #20
    182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1830:	4638      	mov	r0, r7
    1832:	f00a f9e9 	bl	bc08 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1836:	4d2d      	ldr	r5, [pc, #180]	; (18ec <wipedown()+0x26c>)
    1838:	2800      	cmp	r0, #0
    183a:	d0e2      	beq.n	1802 <wipedown()+0x182>
    183c:	4b2d      	ldr	r3, [pc, #180]	; (18f4 <wipedown()+0x274>)
    183e:	682a      	ldr	r2, [r5, #0]
    1840:	781b      	ldrb	r3, [r3, #0]
    1842:	4c2b      	ldr	r4, [pc, #172]	; (18f0 <wipedown()+0x270>)
    1844:	9201      	str	r2, [sp, #4]
	return ret;
    1846:	9a01      	ldr	r2, [sp, #4]
    1848:	6022      	str	r2, [r4, #0]
    184a:	009b      	lsls	r3, r3, #2
    184c:	4638      	mov	r0, r7
    184e:	6063      	str	r3, [r4, #4]
    1850:	f00a f9e0 	bl	bc14 <__cxa_guard_release>
    1854:	e7d6      	b.n	1804 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1856:	1c55      	adds	r5, r2, #1
    1858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    185c:	eb08 0a05 	add.w	sl, r8, r5
    1860:	4651      	mov	r1, sl
    1862:	4623      	mov	r3, r4
    1864:	aa02      	add	r2, sp, #8
    1866:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1868:	f88d 7008 	strb.w	r7, [sp, #8]
    186c:	f88d 4009 	strb.w	r4, [sp, #9]
    1870:	f88d 400a 	strb.w	r4, [sp, #10]
    1874:	f009 fa7e 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1878:	f899 3000 	ldrb.w	r3, [r9]
    187c:	f88d 7008 	strb.w	r7, [sp, #8]
    1880:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    1884:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1888:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    188c:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1890:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    1894:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1898:	f808 c005 	strb.w	ip, [r8, r5]
    189c:	aa02      	add	r2, sp, #8
    189e:	4623      	mov	r3, r4
    18a0:	4649      	mov	r1, r9
    18a2:	a803      	add	r0, sp, #12
        g = rhs.g;
    18a4:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    18a8:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18ac:	f88d 4009 	strb.w	r4, [sp, #9]
    18b0:	f88d 400a 	strb.w	r4, [sp, #10]
    18b4:	f009 fa5e 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18b8:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    18bc:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    18c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18c4:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18c8:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18cc:	f889 3002 	strb.w	r3, [r9, #2]
    18d0:	e792      	b.n	17f8 <wipedown()+0x178>
    18d2:	4d03      	ldr	r5, [pc, #12]	; (18e0 <wipedown()+0x260>)
    18d4:	e70e      	b.n	16f4 <wipedown()+0x74>
    18d6:	bf00      	nop
    18d8:	1fff9548 	.word	0x1fff9548
    18dc:	1fff9e80 	.word	0x1fff9e80
    18e0:	1fffa6c4 	.word	0x1fffa6c4
    18e4:	1fff8cbc 	.word	0x1fff8cbc
    18e8:	1fff9608 	.word	0x1fff9608
    18ec:	1fffa904 	.word	0x1fffa904
    18f0:	1fff952c 	.word	0x1fff952c
    18f4:	1fff9e6c 	.word	0x1fff9e6c

000018f8 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18fc:	4ba2      	ldr	r3, [pc, #648]	; (1b88 <wipeup()+0x290>)
    18fe:	781d      	ldrb	r5, [r3, #0]
    1900:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1902:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1904:	2b00      	cmp	r3, #0
    1906:	f000 8130 	beq.w	1b6a <wipeup()+0x272>
    190a:	f103 3bff 	add.w	fp, r3, #4294967295
    190e:	fa1f fb8b 	uxth.w	fp, fp
    1912:	489e      	ldr	r0, [pc, #632]	; (1b8c <wipeup()+0x294>)
    1914:	499e      	ldr	r1, [pc, #632]	; (1b90 <wipeup()+0x298>)
    1916:	f10b 0b01 	add.w	fp, fp, #1
    191a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    191e:	4483      	add	fp, r0
    1920:	4602      	mov	r2, r0
    1922:	460c      	mov	r4, r1
    1924:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1926:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    192a:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    192e:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1932:	f886 e000 	strb.w	lr, [r6]
    1936:	3203      	adds	r2, #3
    1938:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    193c:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1940:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1944:	f886 a001 	strb.w	sl, [r6, #1]
    1948:	455a      	cmp	r2, fp
        b = rhs.b;
    194a:	f886 9002 	strb.w	r9, [r6, #2]
    194e:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1952:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1956:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    195a:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    195e:	f106 0603 	add.w	r6, r6, #3
    1962:	f1a1 0103 	sub.w	r1, r1, #3
    1966:	d1de      	bne.n	1926 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1968:	2b4a      	cmp	r3, #74	; 0x4a
    196a:	d828      	bhi.n	19be <wipeup()+0xc6>
    196c:	4889      	ldr	r0, [pc, #548]	; (1b94 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    196e:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1972:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1976:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    197a:	eb00 0801 	add.w	r8, r0, r1
    197e:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1982:	3301      	adds	r3, #1
    1984:	eb04 0e01 	add.w	lr, r4, r1
    1988:	f810 b001 	ldrb.w	fp, [r0, r1]
    198c:	f804 b001 	strb.w	fp, [r4, r1]
    1990:	18a6      	adds	r6, r4, r2
    1992:	b29b      	uxth	r3, r3
        g = rhs.g;
    1994:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1998:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    199c:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19a0:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    19a4:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19a8:	f88e a001 	strb.w	sl, [lr, #1]
    19ac:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    19ae:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19b2:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    19b6:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    19ba:	70b1      	strb	r1, [r6, #2]
    19bc:	d1d7      	bne.n	196e <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    19be:	2d00      	cmp	r5, #0
    19c0:	f040 808f 	bne.w	1ae2 <wipeup()+0x1ea>
    19c4:	f10d 0a0c 	add.w	sl, sp, #12
    19c8:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19cc:	4b6e      	ldr	r3, [pc, #440]	; (1b88 <wipeup()+0x290>)
    19ce:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    19d0:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    19d8:	1c5a      	adds	r2, r3, #1
    19da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19de:	eb04 0e03 	add.w	lr, r4, r3
    19e2:	1825      	adds	r5, r4, r0
    19e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19e8:	2680      	movs	r6, #128	; 0x80
    19ea:	eb04 0902 	add.w	r9, r4, r2
    19ee:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19f0:	22ff      	movs	r2, #255	; 0xff
    19f2:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19f4:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    19f8:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    19fc:	f88e 2002 	strb.w	r2, [lr, #2]
    1a00:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a02:	5422      	strb	r2, [r4, r0]
    1a04:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1a06:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1a08:	70aa      	strb	r2, [r5, #2]
    1a0a:	4650      	mov	r0, sl
    1a0c:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a0e:	f88d 6009 	strb.w	r6, [sp, #9]
    1a12:	f88d 600a 	strb.w	r6, [sp, #10]
    1a16:	f88d 8008 	strb.w	r8, [sp, #8]
    1a1a:	f009 f9ab 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1a1e:	4b5a      	ldr	r3, [pc, #360]	; (1b88 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a20:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1a24:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1a26:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a2a:	f88d 8008 	strb.w	r8, [sp, #8]
    1a2e:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a36:	eb04 0805 	add.w	r8, r4, r5
    1a3a:	4633      	mov	r3, r6
    1a3c:	f88d 6009 	strb.w	r6, [sp, #9]
    1a40:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a44:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a48:	55e1      	strb	r1, [r4, r7]
    1a4a:	465a      	mov	r2, fp
    1a4c:	4650      	mov	r0, sl
    1a4e:	4641      	mov	r1, r8
        g = rhs.g;
    1a50:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a54:	f889 6002 	strb.w	r6, [r9, #2]
    1a58:	f009 f98c 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a5c:	4b4e      	ldr	r3, [pc, #312]	; (1b98 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a5e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a62:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a64:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a68:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a6c:	5560      	strb	r0, [r4, r5]
    1a6e:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a70:	4845      	ldr	r0, [pc, #276]	; (1b88 <wipeup()+0x290>)
        g = rhs.g;
    1a72:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1a76:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a7a:	d520      	bpl.n	1abe <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a7c:	4d47      	ldr	r5, [pc, #284]	; (1b9c <wipeup()+0x2a4>)
    1a7e:	4c48      	ldr	r4, [pc, #288]	; (1ba0 <wipeup()+0x2a8>)
    1a80:	682b      	ldr	r3, [r5, #0]
    1a82:	9303      	str	r3, [sp, #12]
    1a84:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a88:	9b03      	ldr	r3, [sp, #12]
    1a8a:	1a5b      	subs	r3, r3, r1
    1a8c:	4293      	cmp	r3, r2
    1a8e:	d30e      	bcc.n	1aae <wipeup()+0x1b6>
    1a90:	4b3d      	ldr	r3, [pc, #244]	; (1b88 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a92:	682a      	ldr	r2, [r5, #0]
    1a94:	781b      	ldrb	r3, [r3, #0]
    1a96:	9202      	str	r2, [sp, #8]
	return ret;
    1a98:	9a02      	ldr	r2, [sp, #8]
    1a9a:	6022      	str	r2, [r4, #0]
    1a9c:	3301      	adds	r3, #1
    1a9e:	4a3a      	ldr	r2, [pc, #232]	; (1b88 <wipeup()+0x290>)
    1aa0:	b2db      	uxtb	r3, r3
    1aa2:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1aa4:	2b4a      	cmp	r3, #74	; 0x4a
    1aa6:	d005      	beq.n	1ab4 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1aa8:	b005      	add	sp, #20
    1aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aae:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1ab0:	2b4a      	cmp	r3, #74	; 0x4a
    1ab2:	d1f9      	bne.n	1aa8 <wipeup()+0x1b0>
		finish_transition();
    1ab4:	f7ff fa9e 	bl	ff4 <finish_transition()>
	}
}
    1ab8:	b005      	add	sp, #20
    1aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1abe:	4836      	ldr	r0, [pc, #216]	; (1b98 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac0:	4d36      	ldr	r5, [pc, #216]	; (1b9c <wipeup()+0x2a4>)
    1ac2:	f00a f8a1 	bl	bc08 <__cxa_guard_acquire>
    1ac6:	2800      	cmp	r0, #0
    1ac8:	d151      	bne.n	1b6e <wipeup()+0x276>
    1aca:	4c35      	ldr	r4, [pc, #212]	; (1ba0 <wipeup()+0x2a8>)
    1acc:	682b      	ldr	r3, [r5, #0]
    1ace:	9303      	str	r3, [sp, #12]
    1ad0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1ad4:	9b03      	ldr	r3, [sp, #12]
    1ad6:	1a5b      	subs	r3, r3, r1
    1ad8:	4293      	cmp	r3, r2
    1ada:	d2d9      	bcs.n	1a90 <wipeup()+0x198>
    1adc:	4b2a      	ldr	r3, [pc, #168]	; (1b88 <wipeup()+0x290>)
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	e7e0      	b.n	1aa4 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1ae2:	3d01      	subs	r5, #1
    1ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ae8:	2680      	movs	r6, #128	; 0x80
    1aea:	eb04 0905 	add.w	r9, r4, r5
    1aee:	f10d 0a0c 	add.w	sl, sp, #12
    1af2:	f10d 0b08 	add.w	fp, sp, #8
    1af6:	f04f 0800 	mov.w	r8, #0
    1afa:	4649      	mov	r1, r9
    1afc:	4633      	mov	r3, r6
    1afe:	4650      	mov	r0, sl
    1b00:	465a      	mov	r2, fp
    1b02:	f88d 8008 	strb.w	r8, [sp, #8]
    1b06:	f88d 6009 	strb.w	r6, [sp, #9]
    1b0a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b0e:	f009 f931 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1b12:	4b1d      	ldr	r3, [pc, #116]	; (1b88 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b14:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b18:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1b1a:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1b1e:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b22:	f88d 8008 	strb.w	r8, [sp, #8]
    1b26:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b2e:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b32:	5562      	strb	r2, [r4, r5]
    1b34:	461f      	mov	r7, r3
    1b36:	4641      	mov	r1, r8
    1b38:	4633      	mov	r3, r6
    1b3a:	465a      	mov	r2, fp
    1b3c:	4650      	mov	r0, sl
        g = rhs.g;
    1b3e:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b42:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b46:	f88d 6009 	strb.w	r6, [sp, #9]
    1b4a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b4e:	f009 f911 	bl	ad74 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b52:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b56:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b5e:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b60:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b64:	f888 3002 	strb.w	r3, [r8, #2]
    1b68:	e730      	b.n	19cc <wipeup()+0xd4>
    1b6a:	4c09      	ldr	r4, [pc, #36]	; (1b90 <wipeup()+0x298>)
    1b6c:	e6fe      	b.n	196c <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b6e:	4b0d      	ldr	r3, [pc, #52]	; (1ba4 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b70:	682a      	ldr	r2, [r5, #0]
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	4c0a      	ldr	r4, [pc, #40]	; (1ba0 <wipeup()+0x2a8>)
    1b76:	9201      	str	r2, [sp, #4]
	return ret;
    1b78:	9a01      	ldr	r2, [sp, #4]
    1b7a:	6022      	str	r2, [r4, #0]
    1b7c:	009b      	lsls	r3, r3, #2
    1b7e:	4806      	ldr	r0, [pc, #24]	; (1b98 <wipeup()+0x2a0>)
    1b80:	6063      	str	r3, [r4, #4]
    1b82:	f00a f847 	bl	bc14 <__cxa_guard_release>
    1b86:	e7a1      	b.n	1acc <wipeup()+0x1d4>
    1b88:	1fff9548 	.word	0x1fff9548
    1b8c:	1fff8cbc 	.word	0x1fff8cbc
    1b90:	1fffa6c4 	.word	0x1fffa6c4
    1b94:	1fff9e80 	.word	0x1fff9e80
    1b98:	1fff9614 	.word	0x1fff9614
    1b9c:	1fffa904 	.word	0x1fffa904
    1ba0:	1fff9e70 	.word	0x1fff9e70
    1ba4:	1fff9e6c 	.word	0x1fff9e6c

00001ba8 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}

void switch_transition(TransitionType tt) {
	switch (tt) {
    1ba8:	2801      	cmp	r0, #1
    1baa:	d006      	beq.n	1bba <switch_transition(TransitionType)+0x12>
    1bac:	d303      	bcc.n	1bb6 <switch_transition(TransitionType)+0xe>
    1bae:	2802      	cmp	r0, #2
    1bb0:	d101      	bne.n	1bb6 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1bb2:	f7ff bea1 	b.w	18f8 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1bb6:	f7ff bcf1 	b.w	159c <blending()>
}

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1bba:	f7ff bd61 	b.w	1680 <wipedown()>
    1bbe:	bf00      	nop

00001bc0 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1bc0:	b510      	push	{r4, lr}
    1bc2:	2110      	movs	r1, #16
    1bc4:	4604      	mov	r4, r0
    1bc6:	4894      	ldr	r0, [pc, #592]	; (1e18 <print_palette(unsigned char)+0x258>)
    1bc8:	f00b f8b6 	bl	cd38 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1bcc:	4621      	mov	r1, r4
    1bce:	2300      	movs	r3, #0
    1bd0:	220a      	movs	r2, #10
    1bd2:	4892      	ldr	r0, [pc, #584]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1bd4:	f00b fac4 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bd8:	2102      	movs	r1, #2
    1bda:	4891      	ldr	r0, [pc, #580]	; (1e20 <print_palette(unsigned char)+0x260>)
    1bdc:	f00b f8ac 	bl	cd38 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1be0:	2c5c      	cmp	r4, #92	; 0x5c
    1be2:	f200 8281 	bhi.w	20e8 <print_palette(unsigned char)+0x528>
    1be6:	e8df f014 	tbh	[pc, r4, lsl #1]
    1bea:	027a      	.short	0x027a
    1bec:	02700275 	.word	0x02700275
    1bf0:	0266026b 	.word	0x0266026b
    1bf4:	025c0261 	.word	0x025c0261
    1bf8:	02520257 	.word	0x02520257
    1bfc:	0248024d 	.word	0x0248024d
    1c00:	023e0243 	.word	0x023e0243
    1c04:	02340239 	.word	0x02340239
    1c08:	022a022f 	.word	0x022a022f
    1c0c:	02200225 	.word	0x02200225
    1c10:	0216021b 	.word	0x0216021b
    1c14:	020c0211 	.word	0x020c0211
    1c18:	02020207 	.word	0x02020207
    1c1c:	01f801fd 	.word	0x01f801fd
    1c20:	01ee01f3 	.word	0x01ee01f3
    1c24:	01e401e9 	.word	0x01e401e9
    1c28:	01da01df 	.word	0x01da01df
    1c2c:	01d001d5 	.word	0x01d001d5
    1c30:	01c601cb 	.word	0x01c601cb
    1c34:	01bc01c1 	.word	0x01bc01c1
    1c38:	01b201b7 	.word	0x01b201b7
    1c3c:	01a801ad 	.word	0x01a801ad
    1c40:	019e01a3 	.word	0x019e01a3
    1c44:	01940199 	.word	0x01940199
    1c48:	018a018f 	.word	0x018a018f
    1c4c:	01800185 	.word	0x01800185
    1c50:	0176017b 	.word	0x0176017b
    1c54:	016c0171 	.word	0x016c0171
    1c58:	01110167 	.word	0x01110167
    1c5c:	0107010c 	.word	0x0107010c
    1c60:	00fd0102 	.word	0x00fd0102
    1c64:	00f300f8 	.word	0x00f300f8
    1c68:	00e900ee 	.word	0x00e900ee
    1c6c:	00df00e4 	.word	0x00df00e4
    1c70:	00d500da 	.word	0x00d500da
    1c74:	00cb00d0 	.word	0x00cb00d0
    1c78:	00c100c6 	.word	0x00c100c6
    1c7c:	00b700bc 	.word	0x00b700bc
    1c80:	00ad00b2 	.word	0x00ad00b2
    1c84:	00a300a8 	.word	0x00a300a8
    1c88:	0099009e 	.word	0x0099009e
    1c8c:	008f0094 	.word	0x008f0094
    1c90:	0085008a 	.word	0x0085008a
    1c94:	007b0080 	.word	0x007b0080
    1c98:	00710076 	.word	0x00710076
    1c9c:	0067006c 	.word	0x0067006c
    1ca0:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1ca4:	495f      	ldr	r1, [pc, #380]	; (1e24 <print_palette(unsigned char)+0x264>)
    1ca6:	485d      	ldr	r0, [pc, #372]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1ca8:	f7fe fdf8 	bl	89c <Print::println(char const*)>
    1cac:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1cae:	495e      	ldr	r1, [pc, #376]	; (1e28 <print_palette(unsigned char)+0x268>)
    1cb0:	485a      	ldr	r0, [pc, #360]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cb2:	f7fe fdf3 	bl	89c <Print::println(char const*)>
    1cb6:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1cb8:	495c      	ldr	r1, [pc, #368]	; (1e2c <print_palette(unsigned char)+0x26c>)
    1cba:	4858      	ldr	r0, [pc, #352]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cbc:	f7fe fdee 	bl	89c <Print::println(char const*)>
    1cc0:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1cc2:	495b      	ldr	r1, [pc, #364]	; (1e30 <print_palette(unsigned char)+0x270>)
    1cc4:	4855      	ldr	r0, [pc, #340]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cc6:	f7fe fde9 	bl	89c <Print::println(char const*)>
    1cca:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1ccc:	4959      	ldr	r1, [pc, #356]	; (1e34 <print_palette(unsigned char)+0x274>)
    1cce:	4853      	ldr	r0, [pc, #332]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cd0:	f7fe fde4 	bl	89c <Print::println(char const*)>
    1cd4:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1cd6:	4958      	ldr	r1, [pc, #352]	; (1e38 <print_palette(unsigned char)+0x278>)
    1cd8:	4850      	ldr	r0, [pc, #320]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cda:	f7fe fddf 	bl	89c <Print::println(char const*)>
    1cde:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1ce0:	4956      	ldr	r1, [pc, #344]	; (1e3c <print_palette(unsigned char)+0x27c>)
    1ce2:	484e      	ldr	r0, [pc, #312]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1ce4:	f7fe fdda 	bl	89c <Print::println(char const*)>
    1ce8:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1cea:	4955      	ldr	r1, [pc, #340]	; (1e40 <print_palette(unsigned char)+0x280>)
    1cec:	484b      	ldr	r0, [pc, #300]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cee:	f7fe fdd5 	bl	89c <Print::println(char const*)>
    1cf2:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1cf4:	4953      	ldr	r1, [pc, #332]	; (1e44 <print_palette(unsigned char)+0x284>)
    1cf6:	4849      	ldr	r0, [pc, #292]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1cf8:	f7fe fdd0 	bl	89c <Print::println(char const*)>
    1cfc:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1cfe:	4952      	ldr	r1, [pc, #328]	; (1e48 <print_palette(unsigned char)+0x288>)
    1d00:	4846      	ldr	r0, [pc, #280]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d02:	f7fe fdcb 	bl	89c <Print::println(char const*)>
    1d06:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1d08:	4950      	ldr	r1, [pc, #320]	; (1e4c <print_palette(unsigned char)+0x28c>)
    1d0a:	4844      	ldr	r0, [pc, #272]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d0c:	f7fe fdc6 	bl	89c <Print::println(char const*)>
    1d10:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1d12:	494f      	ldr	r1, [pc, #316]	; (1e50 <print_palette(unsigned char)+0x290>)
    1d14:	4841      	ldr	r0, [pc, #260]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d16:	f7fe fdc1 	bl	89c <Print::println(char const*)>
    1d1a:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1d1c:	494d      	ldr	r1, [pc, #308]	; (1e54 <print_palette(unsigned char)+0x294>)
    1d1e:	483f      	ldr	r0, [pc, #252]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d20:	f7fe fdbc 	bl	89c <Print::println(char const*)>
    1d24:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1d26:	494c      	ldr	r1, [pc, #304]	; (1e58 <print_palette(unsigned char)+0x298>)
    1d28:	483c      	ldr	r0, [pc, #240]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d2a:	f7fe fdb7 	bl	89c <Print::println(char const*)>
    1d2e:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d30:	494a      	ldr	r1, [pc, #296]	; (1e5c <print_palette(unsigned char)+0x29c>)
    1d32:	483a      	ldr	r0, [pc, #232]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d34:	f7fe fdb2 	bl	89c <Print::println(char const*)>
    1d38:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d3a:	4949      	ldr	r1, [pc, #292]	; (1e60 <print_palette(unsigned char)+0x2a0>)
    1d3c:	4837      	ldr	r0, [pc, #220]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d3e:	f7fe fdad 	bl	89c <Print::println(char const*)>
    1d42:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d44:	4947      	ldr	r1, [pc, #284]	; (1e64 <print_palette(unsigned char)+0x2a4>)
    1d46:	4835      	ldr	r0, [pc, #212]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d48:	f7fe fda8 	bl	89c <Print::println(char const*)>
    1d4c:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d4e:	4946      	ldr	r1, [pc, #280]	; (1e68 <print_palette(unsigned char)+0x2a8>)
    1d50:	4832      	ldr	r0, [pc, #200]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d52:	f7fe fda3 	bl	89c <Print::println(char const*)>
    1d56:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d58:	4944      	ldr	r1, [pc, #272]	; (1e6c <print_palette(unsigned char)+0x2ac>)
    1d5a:	4830      	ldr	r0, [pc, #192]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d5c:	f7fe fd9e 	bl	89c <Print::println(char const*)>
    1d60:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d62:	4943      	ldr	r1, [pc, #268]	; (1e70 <print_palette(unsigned char)+0x2b0>)
    1d64:	482d      	ldr	r0, [pc, #180]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d66:	f7fe fd99 	bl	89c <Print::println(char const*)>
    1d6a:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d6c:	4941      	ldr	r1, [pc, #260]	; (1e74 <print_palette(unsigned char)+0x2b4>)
    1d6e:	482b      	ldr	r0, [pc, #172]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d70:	f7fe fd94 	bl	89c <Print::println(char const*)>
    1d74:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1d76:	4940      	ldr	r1, [pc, #256]	; (1e78 <print_palette(unsigned char)+0x2b8>)
    1d78:	4828      	ldr	r0, [pc, #160]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d7a:	f7fe fd8f 	bl	89c <Print::println(char const*)>
    1d7e:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1d80:	493e      	ldr	r1, [pc, #248]	; (1e7c <print_palette(unsigned char)+0x2bc>)
    1d82:	4826      	ldr	r0, [pc, #152]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d84:	f7fe fd8a 	bl	89c <Print::println(char const*)>
    1d88:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1d8a:	493d      	ldr	r1, [pc, #244]	; (1e80 <print_palette(unsigned char)+0x2c0>)
    1d8c:	4823      	ldr	r0, [pc, #140]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d8e:	f7fe fd85 	bl	89c <Print::println(char const*)>
    1d92:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1d94:	493b      	ldr	r1, [pc, #236]	; (1e84 <print_palette(unsigned char)+0x2c4>)
    1d96:	4821      	ldr	r0, [pc, #132]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1d98:	f7fe fd80 	bl	89c <Print::println(char const*)>
    1d9c:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1d9e:	493a      	ldr	r1, [pc, #232]	; (1e88 <print_palette(unsigned char)+0x2c8>)
    1da0:	481e      	ldr	r0, [pc, #120]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1da2:	f7fe fd7b 	bl	89c <Print::println(char const*)>
    1da6:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1da8:	4938      	ldr	r1, [pc, #224]	; (1e8c <print_palette(unsigned char)+0x2cc>)
    1daa:	481c      	ldr	r0, [pc, #112]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1dac:	f7fe fd76 	bl	89c <Print::println(char const*)>
    1db0:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1db2:	4937      	ldr	r1, [pc, #220]	; (1e90 <print_palette(unsigned char)+0x2d0>)
    1db4:	4819      	ldr	r0, [pc, #100]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1db6:	f7fe fd71 	bl	89c <Print::println(char const*)>
    1dba:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1dbc:	4935      	ldr	r1, [pc, #212]	; (1e94 <print_palette(unsigned char)+0x2d4>)
    1dbe:	4817      	ldr	r0, [pc, #92]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1dc0:	f7fe fd6c 	bl	89c <Print::println(char const*)>
    1dc4:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1dc6:	4934      	ldr	r1, [pc, #208]	; (1e98 <print_palette(unsigned char)+0x2d8>)
    1dc8:	4814      	ldr	r0, [pc, #80]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1dca:	f7fe fd67 	bl	89c <Print::println(char const*)>
    1dce:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1dd0:	4932      	ldr	r1, [pc, #200]	; (1e9c <print_palette(unsigned char)+0x2dc>)
    1dd2:	4812      	ldr	r0, [pc, #72]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1dd4:	f7fe fd62 	bl	89c <Print::println(char const*)>
    1dd8:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1dda:	4931      	ldr	r1, [pc, #196]	; (1ea0 <print_palette(unsigned char)+0x2e0>)
    1ddc:	480f      	ldr	r0, [pc, #60]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1dde:	f7fe fd5d 	bl	89c <Print::println(char const*)>
    1de2:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1de4:	492f      	ldr	r1, [pc, #188]	; (1ea4 <print_palette(unsigned char)+0x2e4>)
    1de6:	480d      	ldr	r0, [pc, #52]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1de8:	f7fe fd58 	bl	89c <Print::println(char const*)>
    1dec:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1dee:	492e      	ldr	r1, [pc, #184]	; (1ea8 <print_palette(unsigned char)+0x2e8>)
    1df0:	480a      	ldr	r0, [pc, #40]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1df2:	f7fe fd53 	bl	89c <Print::println(char const*)>
    1df6:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1df8:	492c      	ldr	r1, [pc, #176]	; (1eac <print_palette(unsigned char)+0x2ec>)
    1dfa:	4808      	ldr	r0, [pc, #32]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1dfc:	f7fe fd4e 	bl	89c <Print::println(char const*)>
    1e00:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1e02:	492b      	ldr	r1, [pc, #172]	; (1eb0 <print_palette(unsigned char)+0x2f0>)
    1e04:	4805      	ldr	r0, [pc, #20]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1e06:	f7fe fd49 	bl	89c <Print::println(char const*)>
    1e0a:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1e0c:	4929      	ldr	r1, [pc, #164]	; (1eb4 <print_palette(unsigned char)+0x2f4>)
    1e0e:	4803      	ldr	r0, [pc, #12]	; (1e1c <print_palette(unsigned char)+0x25c>)
    1e10:	f7fe fd44 	bl	89c <Print::println(char const*)>
    1e14:	bd10      	pop	{r4, pc}
    1e16:	bf00      	nop
    1e18:	0000eb0c 	.word	0x0000eb0c
    1e1c:	1fff8790 	.word	0x1fff8790
    1e20:	0000eb20 	.word	0x0000eb20
    1e24:	0000f0b4 	.word	0x0000f0b4
    1e28:	0000f0a8 	.word	0x0000f0a8
    1e2c:	0000f098 	.word	0x0000f098
    1e30:	0000f088 	.word	0x0000f088
    1e34:	0000f074 	.word	0x0000f074
    1e38:	0000f05c 	.word	0x0000f05c
    1e3c:	0000f044 	.word	0x0000f044
    1e40:	0000f034 	.word	0x0000f034
    1e44:	0000f01c 	.word	0x0000f01c
    1e48:	0000f010 	.word	0x0000f010
    1e4c:	0000f004 	.word	0x0000f004
    1e50:	0000efec 	.word	0x0000efec
    1e54:	0000efe0 	.word	0x0000efe0
    1e58:	0000efd4 	.word	0x0000efd4
    1e5c:	0000efc8 	.word	0x0000efc8
    1e60:	0000efbc 	.word	0x0000efbc
    1e64:	0000efac 	.word	0x0000efac
    1e68:	0000efa0 	.word	0x0000efa0
    1e6c:	0000ef8c 	.word	0x0000ef8c
    1e70:	0000ef80 	.word	0x0000ef80
    1e74:	0000ef70 	.word	0x0000ef70
    1e78:	0000ef64 	.word	0x0000ef64
    1e7c:	0000ef58 	.word	0x0000ef58
    1e80:	0000ef50 	.word	0x0000ef50
    1e84:	0000ef3c 	.word	0x0000ef3c
    1e88:	0000ef2c 	.word	0x0000ef2c
    1e8c:	0000ef18 	.word	0x0000ef18
    1e90:	0000ef0c 	.word	0x0000ef0c
    1e94:	0000ef00 	.word	0x0000ef00
    1e98:	0000eef4 	.word	0x0000eef4
    1e9c:	0000eee4 	.word	0x0000eee4
    1ea0:	0000eed0 	.word	0x0000eed0
    1ea4:	0000eec4 	.word	0x0000eec4
    1ea8:	0000eeb4 	.word	0x0000eeb4
    1eac:	0000eea8 	.word	0x0000eea8
    1eb0:	0000ee98 	.word	0x0000ee98
    1eb4:	0000ee8c 	.word	0x0000ee8c
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1eb8:	498e      	ldr	r1, [pc, #568]	; (20f4 <print_palette(unsigned char)+0x534>)
    1eba:	488f      	ldr	r0, [pc, #572]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ebc:	f7fe fcee 	bl	89c <Print::println(char const*)>
    1ec0:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1ec2:	498e      	ldr	r1, [pc, #568]	; (20fc <print_palette(unsigned char)+0x53c>)
    1ec4:	488c      	ldr	r0, [pc, #560]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ec6:	f7fe fce9 	bl	89c <Print::println(char const*)>
    1eca:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1ecc:	498c      	ldr	r1, [pc, #560]	; (2100 <print_palette(unsigned char)+0x540>)
    1ece:	488a      	ldr	r0, [pc, #552]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ed0:	f7fe fce4 	bl	89c <Print::println(char const*)>
    1ed4:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1ed6:	498b      	ldr	r1, [pc, #556]	; (2104 <print_palette(unsigned char)+0x544>)
    1ed8:	4887      	ldr	r0, [pc, #540]	; (20f8 <print_palette(unsigned char)+0x538>)
    1eda:	f7fe fcdf 	bl	89c <Print::println(char const*)>
    1ede:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1ee0:	4989      	ldr	r1, [pc, #548]	; (2108 <print_palette(unsigned char)+0x548>)
    1ee2:	4885      	ldr	r0, [pc, #532]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ee4:	f7fe fcda 	bl	89c <Print::println(char const*)>
    1ee8:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1eea:	4988      	ldr	r1, [pc, #544]	; (210c <print_palette(unsigned char)+0x54c>)
    1eec:	4882      	ldr	r0, [pc, #520]	; (20f8 <print_palette(unsigned char)+0x538>)
    1eee:	f7fe fcd5 	bl	89c <Print::println(char const*)>
    1ef2:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1ef4:	4986      	ldr	r1, [pc, #536]	; (2110 <print_palette(unsigned char)+0x550>)
    1ef6:	4880      	ldr	r0, [pc, #512]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ef8:	f7fe fcd0 	bl	89c <Print::println(char const*)>
    1efc:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1efe:	4985      	ldr	r1, [pc, #532]	; (2114 <print_palette(unsigned char)+0x554>)
    1f00:	487d      	ldr	r0, [pc, #500]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f02:	f7fe fccb 	bl	89c <Print::println(char const*)>
    1f06:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1f08:	4983      	ldr	r1, [pc, #524]	; (2118 <print_palette(unsigned char)+0x558>)
    1f0a:	487b      	ldr	r0, [pc, #492]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f0c:	f7fe fcc6 	bl	89c <Print::println(char const*)>
    1f10:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1f12:	4982      	ldr	r1, [pc, #520]	; (211c <print_palette(unsigned char)+0x55c>)
    1f14:	4878      	ldr	r0, [pc, #480]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f16:	f7fe fcc1 	bl	89c <Print::println(char const*)>
    1f1a:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1f1c:	4980      	ldr	r1, [pc, #512]	; (2120 <print_palette(unsigned char)+0x560>)
    1f1e:	4876      	ldr	r0, [pc, #472]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f20:	f7fe fcbc 	bl	89c <Print::println(char const*)>
    1f24:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1f26:	497f      	ldr	r1, [pc, #508]	; (2124 <print_palette(unsigned char)+0x564>)
    1f28:	4873      	ldr	r0, [pc, #460]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f2a:	f7fe fcb7 	bl	89c <Print::println(char const*)>
    1f2e:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f30:	497d      	ldr	r1, [pc, #500]	; (2128 <print_palette(unsigned char)+0x568>)
    1f32:	4871      	ldr	r0, [pc, #452]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f34:	f7fe fcb2 	bl	89c <Print::println(char const*)>
    1f38:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f3a:	497c      	ldr	r1, [pc, #496]	; (212c <print_palette(unsigned char)+0x56c>)
    1f3c:	486e      	ldr	r0, [pc, #440]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f3e:	f7fe fcad 	bl	89c <Print::println(char const*)>
    1f42:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f44:	497a      	ldr	r1, [pc, #488]	; (2130 <print_palette(unsigned char)+0x570>)
    1f46:	486c      	ldr	r0, [pc, #432]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f48:	f7fe fca8 	bl	89c <Print::println(char const*)>
    1f4c:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f4e:	4979      	ldr	r1, [pc, #484]	; (2134 <print_palette(unsigned char)+0x574>)
    1f50:	4869      	ldr	r0, [pc, #420]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f52:	f7fe fca3 	bl	89c <Print::println(char const*)>
    1f56:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f58:	4977      	ldr	r1, [pc, #476]	; (2138 <print_palette(unsigned char)+0x578>)
    1f5a:	4867      	ldr	r0, [pc, #412]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f5c:	f7fe fc9e 	bl	89c <Print::println(char const*)>
    1f60:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f62:	4976      	ldr	r1, [pc, #472]	; (213c <print_palette(unsigned char)+0x57c>)
    1f64:	4864      	ldr	r0, [pc, #400]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f66:	f7fe fc99 	bl	89c <Print::println(char const*)>
    1f6a:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f6c:	4974      	ldr	r1, [pc, #464]	; (2140 <print_palette(unsigned char)+0x580>)
    1f6e:	4862      	ldr	r0, [pc, #392]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f70:	f7fe fc94 	bl	89c <Print::println(char const*)>
    1f74:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1f76:	4973      	ldr	r1, [pc, #460]	; (2144 <print_palette(unsigned char)+0x584>)
    1f78:	485f      	ldr	r0, [pc, #380]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f7a:	f7fe fc8f 	bl	89c <Print::println(char const*)>
    1f7e:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1f80:	4971      	ldr	r1, [pc, #452]	; (2148 <print_palette(unsigned char)+0x588>)
    1f82:	485d      	ldr	r0, [pc, #372]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f84:	f7fe fc8a 	bl	89c <Print::println(char const*)>
    1f88:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1f8a:	4970      	ldr	r1, [pc, #448]	; (214c <print_palette(unsigned char)+0x58c>)
    1f8c:	485a      	ldr	r0, [pc, #360]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f8e:	f7fe fc85 	bl	89c <Print::println(char const*)>
    1f92:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1f94:	496e      	ldr	r1, [pc, #440]	; (2150 <print_palette(unsigned char)+0x590>)
    1f96:	4858      	ldr	r0, [pc, #352]	; (20f8 <print_palette(unsigned char)+0x538>)
    1f98:	f7fe fc80 	bl	89c <Print::println(char const*)>
    1f9c:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1f9e:	496d      	ldr	r1, [pc, #436]	; (2154 <print_palette(unsigned char)+0x594>)
    1fa0:	4855      	ldr	r0, [pc, #340]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fa2:	f7fe fc7b 	bl	89c <Print::println(char const*)>
    1fa6:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1fa8:	496b      	ldr	r1, [pc, #428]	; (2158 <print_palette(unsigned char)+0x598>)
    1faa:	4853      	ldr	r0, [pc, #332]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fac:	f7fe fc76 	bl	89c <Print::println(char const*)>
    1fb0:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1fb2:	496a      	ldr	r1, [pc, #424]	; (215c <print_palette(unsigned char)+0x59c>)
    1fb4:	4850      	ldr	r0, [pc, #320]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fb6:	f7fe fc71 	bl	89c <Print::println(char const*)>
    1fba:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1fbc:	4968      	ldr	r1, [pc, #416]	; (2160 <print_palette(unsigned char)+0x5a0>)
    1fbe:	484e      	ldr	r0, [pc, #312]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fc0:	f7fe fc6c 	bl	89c <Print::println(char const*)>
    1fc4:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1fc6:	4967      	ldr	r1, [pc, #412]	; (2164 <print_palette(unsigned char)+0x5a4>)
    1fc8:	484b      	ldr	r0, [pc, #300]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fca:	f7fe fc67 	bl	89c <Print::println(char const*)>
    1fce:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1fd0:	4965      	ldr	r1, [pc, #404]	; (2168 <print_palette(unsigned char)+0x5a8>)
    1fd2:	4849      	ldr	r0, [pc, #292]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fd4:	f7fe fc62 	bl	89c <Print::println(char const*)>
    1fd8:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1fda:	4964      	ldr	r1, [pc, #400]	; (216c <print_palette(unsigned char)+0x5ac>)
    1fdc:	4846      	ldr	r0, [pc, #280]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fde:	f7fe fc5d 	bl	89c <Print::println(char const*)>
    1fe2:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1fe4:	4962      	ldr	r1, [pc, #392]	; (2170 <print_palette(unsigned char)+0x5b0>)
    1fe6:	4844      	ldr	r0, [pc, #272]	; (20f8 <print_palette(unsigned char)+0x538>)
    1fe8:	f7fe fc58 	bl	89c <Print::println(char const*)>
    1fec:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1fee:	4961      	ldr	r1, [pc, #388]	; (2174 <print_palette(unsigned char)+0x5b4>)
    1ff0:	4841      	ldr	r0, [pc, #260]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ff2:	f7fe fc53 	bl	89c <Print::println(char const*)>
    1ff6:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1ff8:	495f      	ldr	r1, [pc, #380]	; (2178 <print_palette(unsigned char)+0x5b8>)
    1ffa:	483f      	ldr	r0, [pc, #252]	; (20f8 <print_palette(unsigned char)+0x538>)
    1ffc:	f7fe fc4e 	bl	89c <Print::println(char const*)>
    2000:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    2002:	495e      	ldr	r1, [pc, #376]	; (217c <print_palette(unsigned char)+0x5bc>)
    2004:	483c      	ldr	r0, [pc, #240]	; (20f8 <print_palette(unsigned char)+0x538>)
    2006:	f7fe fc49 	bl	89c <Print::println(char const*)>
    200a:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    200c:	495c      	ldr	r1, [pc, #368]	; (2180 <print_palette(unsigned char)+0x5c0>)
    200e:	483a      	ldr	r0, [pc, #232]	; (20f8 <print_palette(unsigned char)+0x538>)
    2010:	f7fe fc44 	bl	89c <Print::println(char const*)>
    2014:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    2016:	495b      	ldr	r1, [pc, #364]	; (2184 <print_palette(unsigned char)+0x5c4>)
    2018:	4837      	ldr	r0, [pc, #220]	; (20f8 <print_palette(unsigned char)+0x538>)
    201a:	f7fe fc3f 	bl	89c <Print::println(char const*)>
    201e:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    2020:	4959      	ldr	r1, [pc, #356]	; (2188 <print_palette(unsigned char)+0x5c8>)
    2022:	4835      	ldr	r0, [pc, #212]	; (20f8 <print_palette(unsigned char)+0x538>)
    2024:	f7fe fc3a 	bl	89c <Print::println(char const*)>
    2028:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    202a:	4958      	ldr	r1, [pc, #352]	; (218c <print_palette(unsigned char)+0x5cc>)
    202c:	4832      	ldr	r0, [pc, #200]	; (20f8 <print_palette(unsigned char)+0x538>)
    202e:	f7fe fc35 	bl	89c <Print::println(char const*)>
    2032:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    2034:	4956      	ldr	r1, [pc, #344]	; (2190 <print_palette(unsigned char)+0x5d0>)
    2036:	4830      	ldr	r0, [pc, #192]	; (20f8 <print_palette(unsigned char)+0x538>)
    2038:	f7fe fc30 	bl	89c <Print::println(char const*)>
    203c:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    203e:	4955      	ldr	r1, [pc, #340]	; (2194 <print_palette(unsigned char)+0x5d4>)
    2040:	482d      	ldr	r0, [pc, #180]	; (20f8 <print_palette(unsigned char)+0x538>)
    2042:	f7fe fc2b 	bl	89c <Print::println(char const*)>
    2046:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2048:	4953      	ldr	r1, [pc, #332]	; (2198 <print_palette(unsigned char)+0x5d8>)
    204a:	482b      	ldr	r0, [pc, #172]	; (20f8 <print_palette(unsigned char)+0x538>)
    204c:	f7fe fc26 	bl	89c <Print::println(char const*)>
    2050:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    2052:	4952      	ldr	r1, [pc, #328]	; (219c <print_palette(unsigned char)+0x5dc>)
    2054:	4828      	ldr	r0, [pc, #160]	; (20f8 <print_palette(unsigned char)+0x538>)
    2056:	f7fe fc21 	bl	89c <Print::println(char const*)>
    205a:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    205c:	4950      	ldr	r1, [pc, #320]	; (21a0 <print_palette(unsigned char)+0x5e0>)
    205e:	4826      	ldr	r0, [pc, #152]	; (20f8 <print_palette(unsigned char)+0x538>)
    2060:	f7fe fc1c 	bl	89c <Print::println(char const*)>
    2064:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    2066:	494f      	ldr	r1, [pc, #316]	; (21a4 <print_palette(unsigned char)+0x5e4>)
    2068:	4823      	ldr	r0, [pc, #140]	; (20f8 <print_palette(unsigned char)+0x538>)
    206a:	f7fe fc17 	bl	89c <Print::println(char const*)>
    206e:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    2070:	494d      	ldr	r1, [pc, #308]	; (21a8 <print_palette(unsigned char)+0x5e8>)
    2072:	4821      	ldr	r0, [pc, #132]	; (20f8 <print_palette(unsigned char)+0x538>)
    2074:	f7fe fc12 	bl	89c <Print::println(char const*)>
    2078:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    207a:	494c      	ldr	r1, [pc, #304]	; (21ac <print_palette(unsigned char)+0x5ec>)
    207c:	481e      	ldr	r0, [pc, #120]	; (20f8 <print_palette(unsigned char)+0x538>)
    207e:	f7fe fc0d 	bl	89c <Print::println(char const*)>
    2082:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    2084:	494a      	ldr	r1, [pc, #296]	; (21b0 <print_palette(unsigned char)+0x5f0>)
    2086:	481c      	ldr	r0, [pc, #112]	; (20f8 <print_palette(unsigned char)+0x538>)
    2088:	f7fe fc08 	bl	89c <Print::println(char const*)>
    208c:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    208e:	4949      	ldr	r1, [pc, #292]	; (21b4 <print_palette(unsigned char)+0x5f4>)
    2090:	4819      	ldr	r0, [pc, #100]	; (20f8 <print_palette(unsigned char)+0x538>)
    2092:	f7fe fc03 	bl	89c <Print::println(char const*)>
    2096:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    2098:	4947      	ldr	r1, [pc, #284]	; (21b8 <print_palette(unsigned char)+0x5f8>)
    209a:	4817      	ldr	r0, [pc, #92]	; (20f8 <print_palette(unsigned char)+0x538>)
    209c:	f7fe fbfe 	bl	89c <Print::println(char const*)>
    20a0:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    20a2:	4946      	ldr	r1, [pc, #280]	; (21bc <print_palette(unsigned char)+0x5fc>)
    20a4:	4814      	ldr	r0, [pc, #80]	; (20f8 <print_palette(unsigned char)+0x538>)
    20a6:	f7fe fbf9 	bl	89c <Print::println(char const*)>
    20aa:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    20ac:	4944      	ldr	r1, [pc, #272]	; (21c0 <print_palette(unsigned char)+0x600>)
    20ae:	4812      	ldr	r0, [pc, #72]	; (20f8 <print_palette(unsigned char)+0x538>)
    20b0:	f7fe fbf4 	bl	89c <Print::println(char const*)>
    20b4:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    20b6:	4943      	ldr	r1, [pc, #268]	; (21c4 <print_palette(unsigned char)+0x604>)
    20b8:	480f      	ldr	r0, [pc, #60]	; (20f8 <print_palette(unsigned char)+0x538>)
    20ba:	f7fe fbef 	bl	89c <Print::println(char const*)>
    20be:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    20c0:	4941      	ldr	r1, [pc, #260]	; (21c8 <print_palette(unsigned char)+0x608>)
    20c2:	480d      	ldr	r0, [pc, #52]	; (20f8 <print_palette(unsigned char)+0x538>)
    20c4:	f7fe fbea 	bl	89c <Print::println(char const*)>
    20c8:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20ca:	4940      	ldr	r1, [pc, #256]	; (21cc <print_palette(unsigned char)+0x60c>)
    20cc:	480a      	ldr	r0, [pc, #40]	; (20f8 <print_palette(unsigned char)+0x538>)
    20ce:	f7fe fbe5 	bl	89c <Print::println(char const*)>
    20d2:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    20d4:	493e      	ldr	r1, [pc, #248]	; (21d0 <print_palette(unsigned char)+0x610>)
    20d6:	4808      	ldr	r0, [pc, #32]	; (20f8 <print_palette(unsigned char)+0x538>)
    20d8:	f7fe fbe0 	bl	89c <Print::println(char const*)>
    20dc:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    20de:	493d      	ldr	r1, [pc, #244]	; (21d4 <print_palette(unsigned char)+0x614>)
    20e0:	4805      	ldr	r0, [pc, #20]	; (20f8 <print_palette(unsigned char)+0x538>)
    20e2:	f7fe fbdb 	bl	89c <Print::println(char const*)>
    20e6:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    20e8:	493b      	ldr	r1, [pc, #236]	; (21d8 <print_palette(unsigned char)+0x618>)
    20ea:	4803      	ldr	r0, [pc, #12]	; (20f8 <print_palette(unsigned char)+0x538>)
    20ec:	f7fe fbd6 	bl	89c <Print::println(char const*)>
    20f0:	bd10      	pop	{r4, pc}
    20f2:	bf00      	nop
    20f4:	0000ee78 	.word	0x0000ee78
    20f8:	1fff8790 	.word	0x1fff8790
    20fc:	0000ee68 	.word	0x0000ee68
    2100:	0000ee5c 	.word	0x0000ee5c
    2104:	0000ee50 	.word	0x0000ee50
    2108:	0000ee44 	.word	0x0000ee44
    210c:	0000ee30 	.word	0x0000ee30
    2110:	0000ee24 	.word	0x0000ee24
    2114:	0000ee18 	.word	0x0000ee18
    2118:	0000ee0c 	.word	0x0000ee0c
    211c:	0000edf4 	.word	0x0000edf4
    2120:	0000edec 	.word	0x0000edec
    2124:	0000ee84 	.word	0x0000ee84
    2128:	0000ede0 	.word	0x0000ede0
    212c:	0000edd4 	.word	0x0000edd4
    2130:	0000edc0 	.word	0x0000edc0
    2134:	0000edac 	.word	0x0000edac
    2138:	0000ed9c 	.word	0x0000ed9c
    213c:	0000ed90 	.word	0x0000ed90
    2140:	0000ed84 	.word	0x0000ed84
    2144:	0000ed78 	.word	0x0000ed78
    2148:	0000ed6c 	.word	0x0000ed6c
    214c:	0000ed60 	.word	0x0000ed60
    2150:	0000ed54 	.word	0x0000ed54
    2154:	0000ed48 	.word	0x0000ed48
    2158:	0000ed3c 	.word	0x0000ed3c
    215c:	0000ed30 	.word	0x0000ed30
    2160:	0000ed24 	.word	0x0000ed24
    2164:	0000ed18 	.word	0x0000ed18
    2168:	0000ed08 	.word	0x0000ed08
    216c:	0000ecf4 	.word	0x0000ecf4
    2170:	0000ecd8 	.word	0x0000ecd8
    2174:	0000ecc0 	.word	0x0000ecc0
    2178:	0000eca4 	.word	0x0000eca4
    217c:	0000ec94 	.word	0x0000ec94
    2180:	0000ec84 	.word	0x0000ec84
    2184:	0000ec70 	.word	0x0000ec70
    2188:	0000ec60 	.word	0x0000ec60
    218c:	0000ec58 	.word	0x0000ec58
    2190:	0000ec50 	.word	0x0000ec50
    2194:	0000ec38 	.word	0x0000ec38
    2198:	0000ec28 	.word	0x0000ec28
    219c:	0000ec20 	.word	0x0000ec20
    21a0:	0000ec10 	.word	0x0000ec10
    21a4:	0000ec00 	.word	0x0000ec00
    21a8:	0000ebf0 	.word	0x0000ebf0
    21ac:	0000ebdc 	.word	0x0000ebdc
    21b0:	0000ebc8 	.word	0x0000ebc8
    21b4:	0000ebb4 	.word	0x0000ebb4
    21b8:	0000eb9c 	.word	0x0000eb9c
    21bc:	0000eb84 	.word	0x0000eb84
    21c0:	0000eb74 	.word	0x0000eb74
    21c4:	0000eb60 	.word	0x0000eb60
    21c8:	0000eb4c 	.word	0x0000eb4c
    21cc:	0000eb3c 	.word	0x0000eb3c
    21d0:	0000eb30 	.word	0x0000eb30
    21d4:	0000eb24 	.word	0x0000eb24
    21d8:	0000f0cc 	.word	0x0000f0cc

000021dc <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    21dc:	b538      	push	{r3, r4, r5, lr}
    21de:	2100      	movs	r1, #0
    21e0:	4604      	mov	r4, r0
    21e2:	4885      	ldr	r0, [pc, #532]	; (23f8 <LEDDebug(LEDStruct&)+0x21c>)
    21e4:	f00a fda8 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21e8:	4884      	ldr	r0, [pc, #528]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    21ea:	f00a ffa9 	bl	d140 <Print::println()>
    21ee:	2122      	movs	r1, #34	; 0x22
    21f0:	4883      	ldr	r0, [pc, #524]	; (2400 <LEDDebug(LEDStruct&)+0x224>)
    21f2:	f00a fda1 	bl	cd38 <usb_serial_write>
    21f6:	4881      	ldr	r0, [pc, #516]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    21f8:	f00a ffa2 	bl	d140 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    21fc:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2200:	2b00      	cmp	r3, #0
    2202:	f000 80a1 	beq.w	2348 <LEDDebug(LEDStruct&)+0x16c>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2206:	2b01      	cmp	r3, #1
    2208:	f000 85b5 	beq.w	2d76 <LEDDebug(LEDStruct&)+0xb9a>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    220c:	2b02      	cmp	r3, #2
    220e:	f000 85b8 	beq.w	2d82 <LEDDebug(LEDStruct&)+0xba6>
    2212:	2113      	movs	r1, #19
    2214:	487b      	ldr	r0, [pc, #492]	; (2404 <LEDDebug(LEDStruct&)+0x228>)
    2216:	f00a fd8f 	bl	cd38 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    221a:	4b7b      	ldr	r3, [pc, #492]	; (2408 <LEDDebug(LEDStruct&)+0x22c>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    221c:	4877      	ldr	r0, [pc, #476]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    221e:	7819      	ldrb	r1, [r3, #0]
    2220:	220a      	movs	r2, #10
    2222:	2300      	movs	r3, #0
    2224:	f00a ff9c 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2228:	2103      	movs	r1, #3
    222a:	4878      	ldr	r0, [pc, #480]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    222c:	f00a fd84 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2230:	4872      	ldr	r0, [pc, #456]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2232:	f00a ff85 	bl	d140 <Print::println()>
    2236:	2113      	movs	r1, #19
    2238:	4875      	ldr	r0, [pc, #468]	; (2410 <LEDDebug(LEDStruct&)+0x234>)
    223a:	f00a fd7d 	bl	cd38 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    223e:	2300      	movs	r3, #0
    2240:	220a      	movs	r2, #10
    2242:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2246:	486d      	ldr	r0, [pc, #436]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2248:	f00a ff8a 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    224c:	2103      	movs	r1, #3
    224e:	486f      	ldr	r0, [pc, #444]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    2250:	f00a fd72 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2254:	4869      	ldr	r0, [pc, #420]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2256:	f00a ff73 	bl	d140 <Print::println()>
    225a:	2111      	movs	r1, #17
    225c:	486d      	ldr	r0, [pc, #436]	; (2414 <LEDDebug(LEDStruct&)+0x238>)
    225e:	f00a fd6b 	bl	cd38 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2262:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2266:	4865      	ldr	r0, [pc, #404]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2268:	f00a ffba 	bl	d1e0 <Print::print(long)>
    226c:	2103      	movs	r1, #3
    226e:	4867      	ldr	r0, [pc, #412]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    2270:	f00a fd62 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2274:	4861      	ldr	r0, [pc, #388]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2276:	f00a ff63 	bl	d140 <Print::println()>
    227a:	2114      	movs	r1, #20
    227c:	4866      	ldr	r0, [pc, #408]	; (2418 <LEDDebug(LEDStruct&)+0x23c>)
    227e:	f00a fd5b 	bl	cd38 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2282:	2300      	movs	r3, #0
    2284:	220a      	movs	r2, #10
    2286:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    228a:	485c      	ldr	r0, [pc, #368]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    228c:	f00a ff68 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2290:	2103      	movs	r1, #3
    2292:	485e      	ldr	r0, [pc, #376]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    2294:	f00a fd50 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2298:	4858      	ldr	r0, [pc, #352]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    229a:	f00a ff51 	bl	d140 <Print::println()>
    229e:	2115      	movs	r1, #21
    22a0:	485e      	ldr	r0, [pc, #376]	; (241c <LEDDebug(LEDStruct&)+0x240>)
    22a2:	f00a fd49 	bl	cd38 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22a6:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22aa:	4854      	ldr	r0, [pc, #336]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    22ac:	f00a ff98 	bl	d1e0 <Print::print(long)>
    22b0:	2103      	movs	r1, #3
    22b2:	4856      	ldr	r0, [pc, #344]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    22b4:	f00a fd40 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22b8:	4850      	ldr	r0, [pc, #320]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    22ba:	f00a ff41 	bl	d140 <Print::println()>
    22be:	2111      	movs	r1, #17
    22c0:	4857      	ldr	r0, [pc, #348]	; (2420 <LEDDebug(LEDStruct&)+0x244>)
    22c2:	f00a fd39 	bl	cd38 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22c6:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    22ca:	484c      	ldr	r0, [pc, #304]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    22cc:	f00a ff88 	bl	d1e0 <Print::print(long)>
    22d0:	2103      	movs	r1, #3
    22d2:	484e      	ldr	r0, [pc, #312]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    22d4:	f00a fd30 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22d8:	4848      	ldr	r0, [pc, #288]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    22da:	f00a ff31 	bl	d140 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    22de:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    22e2:	bb63      	cbnz	r3, 233e <LEDDebug(LEDStruct&)+0x162>
    22e4:	2122      	movs	r1, #34	; 0x22
    22e6:	4846      	ldr	r0, [pc, #280]	; (2400 <LEDDebug(LEDStruct&)+0x224>)
    22e8:	f00a fd26 	bl	cd38 <usb_serial_write>
    22ec:	4843      	ldr	r0, [pc, #268]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    22ee:	f00a ff27 	bl	d140 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    22f2:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    22f6:	2b1e      	cmp	r3, #30
    22f8:	f200 852f 	bhi.w	2d5a <LEDDebug(LEDStruct&)+0xb7e>
    22fc:	e8df f013 	tbh	[pc, r3, lsl #1]
    2300:	052d00a2 	.word	0x052d00a2
    2304:	052d052d 	.word	0x052d052d
    2308:	052d052d 	.word	0x052d052d
    230c:	052d0115 	.word	0x052d0115
    2310:	052d052d 	.word	0x052d052d
    2314:	0167052d 	.word	0x0167052d
    2318:	052d052d 	.word	0x052d052d
    231c:	052d052d 	.word	0x052d052d
    2320:	0175052d 	.word	0x0175052d
    2324:	018001a3 	.word	0x018001a3
    2328:	01d20182 	.word	0x01d20182
    232c:	03320253 	.word	0x03320253
    2330:	03d3038e 	.word	0x03d3038e
    2334:	0412052d 	.word	0x0412052d
    2338:	04d40468 	.word	0x04d40468
    233c:	0029      	.short	0x0029
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    233e:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    2342:	f7ff fc3d 	bl	1bc0 <print_palette(unsigned char)>
    2346:	e7cd      	b.n	22e4 <LEDDebug(LEDStruct&)+0x108>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2348:	4936      	ldr	r1, [pc, #216]	; (2424 <LEDDebug(LEDStruct&)+0x248>)
    234a:	482c      	ldr	r0, [pc, #176]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    234c:	f7fe faa6 	bl	89c <Print::println(char const*)>
    2350:	e75f      	b.n	2212 <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2352:	4935      	ldr	r1, [pc, #212]	; (2428 <LEDDebug(LEDStruct&)+0x24c>)
    2354:	4829      	ldr	r0, [pc, #164]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2356:	f7fe faa1 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    235a:	4934      	ldr	r1, [pc, #208]	; (242c <LEDDebug(LEDStruct&)+0x250>)
    235c:	4827      	ldr	r0, [pc, #156]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    235e:	f7fe fa8f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2362:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2366:	4825      	ldr	r0, [pc, #148]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2368:	f00a ff3a 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    236c:	4927      	ldr	r1, [pc, #156]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    236e:	4823      	ldr	r0, [pc, #140]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2370:	f7fe fa94 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2374:	492e      	ldr	r1, [pc, #184]	; (2430 <LEDDebug(LEDStruct&)+0x254>)
    2376:	4821      	ldr	r0, [pc, #132]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2378:	f7fe fa82 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    237c:	2300      	movs	r3, #0
    237e:	220a      	movs	r2, #10
    2380:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    2384:	481d      	ldr	r0, [pc, #116]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2386:	f00a feeb 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    238a:	4920      	ldr	r1, [pc, #128]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    238c:	481b      	ldr	r0, [pc, #108]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    238e:	f7fe fa85 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2392:	4928      	ldr	r1, [pc, #160]	; (2434 <LEDDebug(LEDStruct&)+0x258>)
    2394:	4819      	ldr	r0, [pc, #100]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    2396:	f7fe fa73 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    239a:	2300      	movs	r3, #0
    239c:	220a      	movs	r2, #10
    239e:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    23a2:	4816      	ldr	r0, [pc, #88]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23a4:	f00a fedc 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    23a8:	4918      	ldr	r1, [pc, #96]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    23aa:	4814      	ldr	r0, [pc, #80]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23ac:	f7fe fa76 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23b0:	4921      	ldr	r1, [pc, #132]	; (2438 <LEDDebug(LEDStruct&)+0x25c>)
    23b2:	4812      	ldr	r0, [pc, #72]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23b4:	f7fe fa64 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23b8:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    23bc:	480f      	ldr	r0, [pc, #60]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23be:	f00a ff0f 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    23c2:	4912      	ldr	r1, [pc, #72]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    23c4:	480d      	ldr	r0, [pc, #52]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23c6:	f7fe fa69 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ca:	491c      	ldr	r1, [pc, #112]	; (243c <LEDDebug(LEDStruct&)+0x260>)
    23cc:	480b      	ldr	r0, [pc, #44]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23ce:	f7fe fa57 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23d2:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    23d6:	4809      	ldr	r0, [pc, #36]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23d8:	f00a ff02 	bl	d1e0 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    23dc:	490b      	ldr	r1, [pc, #44]	; (240c <LEDDebug(LEDStruct&)+0x230>)
    23de:	4807      	ldr	r0, [pc, #28]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
    23e0:	f7fe fa5c 	bl	89c <Print::println(char const*)>
    23e4:	2123      	movs	r1, #35	; 0x23
    23e6:	4816      	ldr	r0, [pc, #88]	; (2440 <LEDDebug(LEDStruct&)+0x264>)
    23e8:	f00a fca6 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    23ec:	4803      	ldr	r0, [pc, #12]	; (23fc <LEDDebug(LEDStruct&)+0x220>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    23ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    23f2:	f00a bea5 	b.w	d140 <Print::println()>
    23f6:	bf00      	nop
    23f8:	0000f27c 	.word	0x0000f27c
    23fc:	1fff8790 	.word	0x1fff8790
    2400:	0000f0e4 	.word	0x0000f0e4
    2404:	0000f174 	.word	0x0000f174
    2408:	1fff8722 	.word	0x1fff8722
    240c:	0000f188 	.word	0x0000f188
    2410:	0000f18c 	.word	0x0000f18c
    2414:	0000f1a0 	.word	0x0000f1a0
    2418:	0000f1b4 	.word	0x0000f1b4
    241c:	0000f1cc 	.word	0x0000f1cc
    2420:	0000f1e4 	.word	0x0000f1e4
    2424:	0000f108 	.word	0x0000f108
    2428:	0000faf8 	.word	0x0000faf8
    242c:	0000f240 	.word	0x0000f240
    2430:	0000fb1c 	.word	0x0000fb1c
    2434:	0000fb34 	.word	0x0000fb34
    2438:	0000fb50 	.word	0x0000fb50
    243c:	0000fb6c 	.word	0x0000fb6c
    2440:	0000fba8 	.word	0x0000fba8
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    2444:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2448:	4880      	ldr	r0, [pc, #512]	; (264c <LEDDebug(LEDStruct&)+0x470>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    244a:	2b04      	cmp	r3, #4
    244c:	bf0c      	ite	eq
    244e:	4980      	ldreq	r1, [pc, #512]	; (2650 <LEDDebug(LEDStruct&)+0x474>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2450:	4980      	ldrne	r1, [pc, #512]	; (2654 <LEDDebug(LEDStruct&)+0x478>)
    2452:	f7fe fa23 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2456:	4980      	ldr	r1, [pc, #512]	; (2658 <LEDDebug(LEDStruct&)+0x47c>)
    2458:	487c      	ldr	r0, [pc, #496]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    245a:	f7fe fa11 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    245e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2462:	487a      	ldr	r0, [pc, #488]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2464:	f00a febc 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2468:	497c      	ldr	r1, [pc, #496]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    246a:	4878      	ldr	r0, [pc, #480]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    246c:	f7fe fa16 	bl	89c <Print::println(char const*)>
    2470:	2111      	movs	r1, #17
    2472:	487b      	ldr	r0, [pc, #492]	; (2660 <LEDDebug(LEDStruct&)+0x484>)
    2474:	f00a fc60 	bl	cd38 <usb_serial_write>
    2478:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    247c:	4873      	ldr	r0, [pc, #460]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    247e:	f00a feaf 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2482:	4976      	ldr	r1, [pc, #472]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    2484:	4871      	ldr	r0, [pc, #452]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2486:	f7fe fa09 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    248a:	4976      	ldr	r1, [pc, #472]	; (2664 <LEDDebug(LEDStruct&)+0x488>)
    248c:	486f      	ldr	r0, [pc, #444]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    248e:	f7fe f9f7 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2492:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    2496:	486d      	ldr	r0, [pc, #436]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2498:	f00a fea2 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    249c:	496f      	ldr	r1, [pc, #444]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    249e:	486b      	ldr	r0, [pc, #428]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24a0:	f7fe f9fc 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24a4:	4970      	ldr	r1, [pc, #448]	; (2668 <LEDDebug(LEDStruct&)+0x48c>)
    24a6:	4869      	ldr	r0, [pc, #420]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24a8:	f7fe f9ea 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24ac:	2300      	movs	r3, #0
    24ae:	220a      	movs	r2, #10
    24b0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    24b4:	4865      	ldr	r0, [pc, #404]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24b6:	f00a fe53 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    24ba:	4968      	ldr	r1, [pc, #416]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    24bc:	4863      	ldr	r0, [pc, #396]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24be:	f7fe f9ed 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24c2:	496a      	ldr	r1, [pc, #424]	; (266c <LEDDebug(LEDStruct&)+0x490>)
    24c4:	4861      	ldr	r0, [pc, #388]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24c6:	f7fe f9db 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24ca:	2300      	movs	r3, #0
    24cc:	220a      	movs	r2, #10
    24ce:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    24d2:	485e      	ldr	r0, [pc, #376]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24d4:	f00a fe44 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    24d8:	4960      	ldr	r1, [pc, #384]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    24da:	485c      	ldr	r0, [pc, #368]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24dc:	f7fe f9de 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24e0:	4963      	ldr	r1, [pc, #396]	; (2670 <LEDDebug(LEDStruct&)+0x494>)
    24e2:	485a      	ldr	r0, [pc, #360]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24e4:	f7fe f9cc 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24e8:	2300      	movs	r3, #0
    24ea:	220a      	movs	r2, #10
    24ec:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    24f0:	4856      	ldr	r0, [pc, #344]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24f2:	f00a fe35 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    24f6:	4959      	ldr	r1, [pc, #356]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    24f8:	4854      	ldr	r0, [pc, #336]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    24fa:	f7fe f9cf 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24fe:	495d      	ldr	r1, [pc, #372]	; (2674 <LEDDebug(LEDStruct&)+0x498>)
    2500:	4852      	ldr	r0, [pc, #328]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2502:	f7fe f9bd 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2506:	2300      	movs	r3, #0
    2508:	220a      	movs	r2, #10
    250a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    250e:	484f      	ldr	r0, [pc, #316]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2510:	f00a fe26 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2514:	4951      	ldr	r1, [pc, #324]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    2516:	484d      	ldr	r0, [pc, #308]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2518:	f7fe f9c0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    251c:	4956      	ldr	r1, [pc, #344]	; (2678 <LEDDebug(LEDStruct&)+0x49c>)
    251e:	484b      	ldr	r0, [pc, #300]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2520:	f7fe f9ae 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2524:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2528:	e755      	b.n	23d6 <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    252a:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    252e:	2b07      	cmp	r3, #7
    2530:	f000 8490 	beq.w	2e54 <LEDDebug(LEDStruct&)+0xc78>
    2534:	2b09      	cmp	r3, #9
    2536:	f000 84b6 	beq.w	2ea6 <LEDDebug(LEDStruct&)+0xcca>
    253a:	2b06      	cmp	r3, #6
    253c:	d103      	bne.n	2546 <LEDDebug(LEDStruct&)+0x36a>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    253e:	494f      	ldr	r1, [pc, #316]	; (267c <LEDDebug(LEDStruct&)+0x4a0>)
    2540:	4842      	ldr	r0, [pc, #264]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2542:	f7fe f9ab 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2546:	4944      	ldr	r1, [pc, #272]	; (2658 <LEDDebug(LEDStruct&)+0x47c>)
    2548:	4840      	ldr	r0, [pc, #256]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    254a:	f7fe f999 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    254e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2552:	483e      	ldr	r0, [pc, #248]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2554:	f00a fe44 	bl	d1e0 <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2558:	4940      	ldr	r1, [pc, #256]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    255a:	483c      	ldr	r0, [pc, #240]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    255c:	f7fe f99e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2560:	4947      	ldr	r1, [pc, #284]	; (2680 <LEDDebug(LEDStruct&)+0x4a4>)
    2562:	483a      	ldr	r0, [pc, #232]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2564:	f7fe f98c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2568:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    256c:	4837      	ldr	r0, [pc, #220]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    256e:	f00a fe37 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    2572:	493a      	ldr	r1, [pc, #232]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    2574:	4835      	ldr	r0, [pc, #212]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2576:	f7fe f991 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    257a:	4942      	ldr	r1, [pc, #264]	; (2684 <LEDDebug(LEDStruct&)+0x4a8>)
    257c:	4833      	ldr	r0, [pc, #204]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    257e:	f7fe f97f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2582:	2300      	movs	r3, #0
    2584:	220a      	movs	r2, #10
    2586:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    258a:	4830      	ldr	r0, [pc, #192]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    258c:	f00a fde8 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2590:	4932      	ldr	r1, [pc, #200]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    2592:	482e      	ldr	r0, [pc, #184]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2594:	f7fe f982 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2598:	493b      	ldr	r1, [pc, #236]	; (2688 <LEDDebug(LEDStruct&)+0x4ac>)
    259a:	482c      	ldr	r0, [pc, #176]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    259c:	f7fe f970 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25a0:	2300      	movs	r3, #0
    25a2:	220a      	movs	r2, #10
    25a4:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    25a8:	4828      	ldr	r0, [pc, #160]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    25aa:	f00a fdd9 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    25ae:	492b      	ldr	r1, [pc, #172]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    25b0:	4826      	ldr	r0, [pc, #152]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    25b2:	f7fe f973 	bl	89c <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    25b6:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25ba:	2b09      	cmp	r3, #9
    25bc:	f47f af12 	bne.w	23e4 <LEDDebug(LEDStruct&)+0x208>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25c0:	4932      	ldr	r1, [pc, #200]	; (268c <LEDDebug(LEDStruct&)+0x4b0>)
    25c2:	4822      	ldr	r0, [pc, #136]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    25c4:	f7fe f95c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25c8:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    25cc:	e031      	b.n	2632 <LEDDebug(LEDStruct&)+0x456>
				Serial.println("\t||");
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    25ce:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25d2:	3b0b      	subs	r3, #11
    25d4:	2b05      	cmp	r3, #5
    25d6:	f200 83de 	bhi.w	2d96 <LEDDebug(LEDStruct&)+0xbba>
    25da:	e8df f013 	tbh	[pc, r3, lsl #1]
    25de:	045a      	.short	0x045a
    25e0:	045503d8 	.word	0x045503d8
    25e4:	044b0450 	.word	0x044b0450
    25e8:	0446      	.short	0x0446
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    25ea:	4929      	ldr	r1, [pc, #164]	; (2690 <LEDDebug(LEDStruct&)+0x4b4>)
    25ec:	4817      	ldr	r0, [pc, #92]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    25ee:	f7fe f955 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25f2:	4919      	ldr	r1, [pc, #100]	; (2658 <LEDDebug(LEDStruct&)+0x47c>)
    25f4:	4815      	ldr	r0, [pc, #84]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    25f6:	f7fe f943 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25fa:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25fe:	e6ea      	b.n	23d6 <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    2600:	4924      	ldr	r1, [pc, #144]	; (2694 <LEDDebug(LEDStruct&)+0x4b8>)
    2602:	e7f3      	b.n	25ec <LEDDebug(LEDStruct&)+0x410>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    2604:	4924      	ldr	r1, [pc, #144]	; (2698 <LEDDebug(LEDStruct&)+0x4bc>)
    2606:	4811      	ldr	r0, [pc, #68]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2608:	f7fe f948 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    260c:	4912      	ldr	r1, [pc, #72]	; (2658 <LEDDebug(LEDStruct&)+0x47c>)
    260e:	480f      	ldr	r0, [pc, #60]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2610:	f7fe f936 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2614:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2618:	480c      	ldr	r0, [pc, #48]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    261a:	f00a fde1 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    261e:	490f      	ldr	r1, [pc, #60]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    2620:	480a      	ldr	r0, [pc, #40]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2622:	f7fe f93b 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2626:	491d      	ldr	r1, [pc, #116]	; (269c <LEDDebug(LEDStruct&)+0x4c0>)
    2628:	4808      	ldr	r0, [pc, #32]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    262a:	f7fe f929 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    262e:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2632:	4806      	ldr	r0, [pc, #24]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2634:	2300      	movs	r3, #0
    2636:	220a      	movs	r2, #10
    2638:	f00a fd92 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    263c:	4907      	ldr	r1, [pc, #28]	; (265c <LEDDebug(LEDStruct&)+0x480>)
    263e:	4803      	ldr	r0, [pc, #12]	; (264c <LEDDebug(LEDStruct&)+0x470>)
    2640:	f7fe f92c 	bl	89c <Print::println(char const*)>
    2644:	e6ce      	b.n	23e4 <LEDDebug(LEDStruct&)+0x208>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2646:	4916      	ldr	r1, [pc, #88]	; (26a0 <LEDDebug(LEDStruct&)+0x4c4>)
    2648:	e7d0      	b.n	25ec <LEDDebug(LEDStruct&)+0x410>
    264a:	bf00      	nop
    264c:	1fff8790 	.word	0x1fff8790
    2650:	0000f1f8 	.word	0x0000f1f8
    2654:	0000f21c 	.word	0x0000f21c
    2658:	0000f240 	.word	0x0000f240
    265c:	0000f188 	.word	0x0000f188
    2660:	0000f258 	.word	0x0000f258
    2664:	0000f26c 	.word	0x0000f26c
    2668:	0000f280 	.word	0x0000f280
    266c:	0000f294 	.word	0x0000f294
    2670:	0000f2a4 	.word	0x0000f2a4
    2674:	0000f2b4 	.word	0x0000f2b4
    2678:	0000f2c4 	.word	0x0000f2c4
    267c:	0000f2dc 	.word	0x0000f2dc
    2680:	0000f348 	.word	0x0000f348
    2684:	0000f358 	.word	0x0000f358
    2688:	0000f368 	.word	0x0000f368
    268c:	0000f378 	.word	0x0000f378
    2690:	0000f4dc 	.word	0x0000f4dc
    2694:	0000f524 	.word	0x0000f524
    2698:	0000f548 	.word	0x0000f548
    269c:	0000f56c 	.word	0x0000f56c
    26a0:	0000f500 	.word	0x0000f500
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    26a4:	4997      	ldr	r1, [pc, #604]	; (2904 <LEDDebug(LEDStruct&)+0x728>)
    26a6:	4898      	ldr	r0, [pc, #608]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26a8:	f7fe f8f8 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26ac:	4997      	ldr	r1, [pc, #604]	; (290c <LEDDebug(LEDStruct&)+0x730>)
    26ae:	4896      	ldr	r0, [pc, #600]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26b0:	f7fe f8e6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26b4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26b8:	4893      	ldr	r0, [pc, #588]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26ba:	f00a fd91 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    26be:	4994      	ldr	r1, [pc, #592]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    26c0:	4891      	ldr	r0, [pc, #580]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26c2:	f7fe f8eb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26c6:	4993      	ldr	r1, [pc, #588]	; (2914 <LEDDebug(LEDStruct&)+0x738>)
    26c8:	488f      	ldr	r0, [pc, #572]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26ca:	f7fe f8d9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26ce:	2300      	movs	r3, #0
    26d0:	220a      	movs	r2, #10
    26d2:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    26d6:	488c      	ldr	r0, [pc, #560]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26d8:	f00a fd42 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    26dc:	498c      	ldr	r1, [pc, #560]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    26de:	488a      	ldr	r0, [pc, #552]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26e0:	f7fe f8dc 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26e4:	498c      	ldr	r1, [pc, #560]	; (2918 <LEDDebug(LEDStruct&)+0x73c>)
    26e6:	4888      	ldr	r0, [pc, #544]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26e8:	f7fe f8ca 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26ec:	2300      	movs	r3, #0
    26ee:	220a      	movs	r2, #10
    26f0:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    26f4:	4884      	ldr	r0, [pc, #528]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26f6:	f00a fd33 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    26fa:	4985      	ldr	r1, [pc, #532]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    26fc:	4882      	ldr	r0, [pc, #520]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    26fe:	f7fe f8cd 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2702:	4986      	ldr	r1, [pc, #536]	; (291c <LEDDebug(LEDStruct&)+0x740>)
    2704:	4880      	ldr	r0, [pc, #512]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2706:	f7fe f8bb 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    270a:	2300      	movs	r3, #0
    270c:	220a      	movs	r2, #10
    270e:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2712:	487d      	ldr	r0, [pc, #500]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2714:	f00a fd24 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2718:	497d      	ldr	r1, [pc, #500]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    271a:	487b      	ldr	r0, [pc, #492]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    271c:	f7fe f8be 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2720:	497f      	ldr	r1, [pc, #508]	; (2920 <LEDDebug(LEDStruct&)+0x744>)
    2722:	4879      	ldr	r0, [pc, #484]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2724:	f7fe f8ac 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2728:	2300      	movs	r3, #0
    272a:	220a      	movs	r2, #10
    272c:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2730:	4875      	ldr	r0, [pc, #468]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2732:	f00a fd15 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2736:	4976      	ldr	r1, [pc, #472]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2738:	4873      	ldr	r0, [pc, #460]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    273a:	f7fe f8af 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    273e:	4979      	ldr	r1, [pc, #484]	; (2924 <LEDDebug(LEDStruct&)+0x748>)
    2740:	4871      	ldr	r0, [pc, #452]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2742:	f7fe f89d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2746:	2300      	movs	r3, #0
    2748:	220a      	movs	r2, #10
    274a:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    274e:	486e      	ldr	r0, [pc, #440]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2750:	f00a fd06 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2754:	496e      	ldr	r1, [pc, #440]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2756:	486c      	ldr	r0, [pc, #432]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2758:	f7fe f8a0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    275c:	4972      	ldr	r1, [pc, #456]	; (2928 <LEDDebug(LEDStruct&)+0x74c>)
    275e:	486a      	ldr	r0, [pc, #424]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2760:	f7fe f88e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2764:	2300      	movs	r3, #0
    2766:	220a      	movs	r2, #10
    2768:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    276c:	4866      	ldr	r0, [pc, #408]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    276e:	f00a fcf7 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    2772:	4967      	ldr	r1, [pc, #412]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2774:	4864      	ldr	r0, [pc, #400]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2776:	f7fe f891 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    277a:	496c      	ldr	r1, [pc, #432]	; (292c <LEDDebug(LEDStruct&)+0x750>)
    277c:	4862      	ldr	r0, [pc, #392]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    277e:	f7fe f87f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2782:	2300      	movs	r3, #0
    2784:	220a      	movs	r2, #10
    2786:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    278a:	485f      	ldr	r0, [pc, #380]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    278c:	f00a fce8 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    2790:	495f      	ldr	r1, [pc, #380]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2792:	485d      	ldr	r0, [pc, #372]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2794:	f7fe f882 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2798:	4965      	ldr	r1, [pc, #404]	; (2930 <LEDDebug(LEDStruct&)+0x754>)
    279a:	485b      	ldr	r0, [pc, #364]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    279c:	f7fe f870 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27a0:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    27a4:	e745      	b.n	2632 <LEDDebug(LEDStruct&)+0x456>
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    27a6:	4963      	ldr	r1, [pc, #396]	; (2934 <LEDDebug(LEDStruct&)+0x758>)
    27a8:	4857      	ldr	r0, [pc, #348]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27aa:	f7fe f877 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ae:	4957      	ldr	r1, [pc, #348]	; (290c <LEDDebug(LEDStruct&)+0x730>)
    27b0:	4855      	ldr	r0, [pc, #340]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27b2:	f7fe f865 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27b6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27ba:	4853      	ldr	r0, [pc, #332]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27bc:	f00a fd10 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    27c0:	4953      	ldr	r1, [pc, #332]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    27c2:	4851      	ldr	r0, [pc, #324]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27c4:	f7fe f86a 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27c8:	495b      	ldr	r1, [pc, #364]	; (2938 <LEDDebug(LEDStruct&)+0x75c>)
    27ca:	484f      	ldr	r0, [pc, #316]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27cc:	f7fe f858 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27d0:	2300      	movs	r3, #0
    27d2:	220a      	movs	r2, #10
    27d4:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    27d8:	484b      	ldr	r0, [pc, #300]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27da:	f00a fcc1 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    27de:	494c      	ldr	r1, [pc, #304]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    27e0:	4849      	ldr	r0, [pc, #292]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27e2:	f7fe f85b 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27e6:	4955      	ldr	r1, [pc, #340]	; (293c <LEDDebug(LEDStruct&)+0x760>)
    27e8:	4847      	ldr	r0, [pc, #284]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27ea:	f7fe f849 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27ee:	2300      	movs	r3, #0
    27f0:	220a      	movs	r2, #10
    27f2:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    27f6:	4844      	ldr	r0, [pc, #272]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    27f8:	f00a fcb2 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    27fc:	4944      	ldr	r1, [pc, #272]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    27fe:	4842      	ldr	r0, [pc, #264]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2800:	f7fe f84c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2804:	494e      	ldr	r1, [pc, #312]	; (2940 <LEDDebug(LEDStruct&)+0x764>)
    2806:	4840      	ldr	r0, [pc, #256]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2808:	f7fe f83a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    280c:	2300      	movs	r3, #0
    280e:	220a      	movs	r2, #10
    2810:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2814:	483c      	ldr	r0, [pc, #240]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2816:	f00a fca3 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    281a:	493d      	ldr	r1, [pc, #244]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    281c:	483a      	ldr	r0, [pc, #232]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    281e:	f7fe f83d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2822:	4948      	ldr	r1, [pc, #288]	; (2944 <LEDDebug(LEDStruct&)+0x768>)
    2824:	4838      	ldr	r0, [pc, #224]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2826:	f7fe f82b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    282a:	2300      	movs	r3, #0
    282c:	220a      	movs	r2, #10
    282e:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2832:	4835      	ldr	r0, [pc, #212]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2834:	f00a fc94 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    2838:	4935      	ldr	r1, [pc, #212]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    283a:	4833      	ldr	r0, [pc, #204]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    283c:	f7fe f82e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2840:	4941      	ldr	r1, [pc, #260]	; (2948 <LEDDebug(LEDStruct&)+0x76c>)
    2842:	4831      	ldr	r0, [pc, #196]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2844:	f7fe f81c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2848:	2300      	movs	r3, #0
    284a:	220a      	movs	r2, #10
    284c:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2850:	482d      	ldr	r0, [pc, #180]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2852:	f00a fc85 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2856:	492e      	ldr	r1, [pc, #184]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2858:	482b      	ldr	r0, [pc, #172]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    285a:	f7fe f81f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    285e:	493b      	ldr	r1, [pc, #236]	; (294c <LEDDebug(LEDStruct&)+0x770>)
    2860:	4829      	ldr	r0, [pc, #164]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2862:	f7fe f80d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2866:	2300      	movs	r3, #0
    2868:	220a      	movs	r2, #10
    286a:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    286e:	4826      	ldr	r0, [pc, #152]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2870:	f00a fc76 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2874:	4926      	ldr	r1, [pc, #152]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2876:	4824      	ldr	r0, [pc, #144]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2878:	f7fe f810 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    287c:	4934      	ldr	r1, [pc, #208]	; (2950 <LEDDebug(LEDStruct&)+0x774>)
    287e:	4822      	ldr	r0, [pc, #136]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2880:	f7fd fffe 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2884:	2300      	movs	r3, #0
    2886:	220a      	movs	r2, #10
    2888:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    288c:	481e      	ldr	r0, [pc, #120]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    288e:	f00a fc67 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2892:	491f      	ldr	r1, [pc, #124]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    2894:	481c      	ldr	r0, [pc, #112]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    2896:	f7fe f801 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    289a:	492e      	ldr	r1, [pc, #184]	; (2954 <LEDDebug(LEDStruct&)+0x778>)
    289c:	481a      	ldr	r0, [pc, #104]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    289e:	f7fd ffef 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28a2:	2300      	movs	r3, #0
    28a4:	220a      	movs	r2, #10
    28a6:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    28aa:	4817      	ldr	r0, [pc, #92]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28ac:	f00a fc58 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    28b0:	4917      	ldr	r1, [pc, #92]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    28b2:	4815      	ldr	r0, [pc, #84]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28b4:	f7fd fff2 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28b8:	4927      	ldr	r1, [pc, #156]	; (2958 <LEDDebug(LEDStruct&)+0x77c>)
    28ba:	4813      	ldr	r0, [pc, #76]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28bc:	f7fd ffe0 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c0:	2300      	movs	r3, #0
    28c2:	220a      	movs	r2, #10
    28c4:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    28c8:	480f      	ldr	r0, [pc, #60]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28ca:	f00a fc49 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    28ce:	4910      	ldr	r1, [pc, #64]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    28d0:	480d      	ldr	r0, [pc, #52]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28d2:	f7fd ffe3 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28d6:	4921      	ldr	r1, [pc, #132]	; (295c <LEDDebug(LEDStruct&)+0x780>)
    28d8:	480b      	ldr	r0, [pc, #44]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28da:	f7fd ffd1 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28de:	2300      	movs	r3, #0
    28e0:	220a      	movs	r2, #10
    28e2:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    28e6:	4808      	ldr	r0, [pc, #32]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28e8:	f00a fc3a 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    28ec:	4908      	ldr	r1, [pc, #32]	; (2910 <LEDDebug(LEDStruct&)+0x734>)
    28ee:	4806      	ldr	r0, [pc, #24]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28f0:	f7fd ffd4 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28f4:	491a      	ldr	r1, [pc, #104]	; (2960 <LEDDebug(LEDStruct&)+0x784>)
    28f6:	4804      	ldr	r0, [pc, #16]	; (2908 <LEDDebug(LEDStruct&)+0x72c>)
    28f8:	f7fd ffc2 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28fc:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2900:	e697      	b.n	2632 <LEDDebug(LEDStruct&)+0x456>
    2902:	bf00      	nop
    2904:	0000f654 	.word	0x0000f654
    2908:	1fff8790 	.word	0x1fff8790
    290c:	0000f240 	.word	0x0000f240
    2910:	0000f188 	.word	0x0000f188
    2914:	0000f678 	.word	0x0000f678
    2918:	0000f68c 	.word	0x0000f68c
    291c:	0000f6a0 	.word	0x0000f6a0
    2920:	0000f6b4 	.word	0x0000f6b4
    2924:	0000f6c8 	.word	0x0000f6c8
    2928:	0000f6dc 	.word	0x0000f6dc
    292c:	0000f6f0 	.word	0x0000f6f0
    2930:	0000f704 	.word	0x0000f704
    2934:	0000f718 	.word	0x0000f718
    2938:	0000f73c 	.word	0x0000f73c
    293c:	0000f750 	.word	0x0000f750
    2940:	0000f764 	.word	0x0000f764
    2944:	0000f778 	.word	0x0000f778
    2948:	0000f78c 	.word	0x0000f78c
    294c:	0000f7a0 	.word	0x0000f7a0
    2950:	0000f7b4 	.word	0x0000f7b4
    2954:	0000f7c8 	.word	0x0000f7c8
    2958:	0000f7dc 	.word	0x0000f7dc
    295c:	0000f7f0 	.word	0x0000f7f0
    2960:	0000f804 	.word	0x0000f804
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    2964:	49af      	ldr	r1, [pc, #700]	; (2c24 <LEDDebug(LEDStruct&)+0xa48>)
    2966:	48b0      	ldr	r0, [pc, #704]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2968:	f7fd ff98 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    296c:	49af      	ldr	r1, [pc, #700]	; (2c2c <LEDDebug(LEDStruct&)+0xa50>)
    296e:	48ae      	ldr	r0, [pc, #696]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2970:	f7fd ff86 	bl	880 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    2974:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2978:	2b01      	cmp	r3, #1
    297a:	f000 8271 	beq.w	2e60 <LEDDebug(LEDStruct&)+0xc84>
    297e:	f0c0 8298 	bcc.w	2eb2 <LEDDebug(LEDStruct&)+0xcd6>
    2982:	2b02      	cmp	r3, #2
    2984:	d107      	bne.n	2996 <LEDDebug(LEDStruct&)+0x7ba>
    2986:	49aa      	ldr	r1, [pc, #680]	; (2c30 <LEDDebug(LEDStruct&)+0xa54>)
    2988:	48a7      	ldr	r0, [pc, #668]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    298a:	f7fd ff79 	bl	880 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    298e:	49a9      	ldr	r1, [pc, #676]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2990:	48a5      	ldr	r0, [pc, #660]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2992:	f7fd ff83 	bl	89c <Print::println(char const*)>
    2996:	49a8      	ldr	r1, [pc, #672]	; (2c38 <LEDDebug(LEDStruct&)+0xa5c>)
    2998:	48a3      	ldr	r0, [pc, #652]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    299a:	f7fd ff71 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    299e:	2300      	movs	r3, #0
    29a0:	220a      	movs	r2, #10
    29a2:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    29a6:	48a0      	ldr	r0, [pc, #640]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29a8:	f00a fbda 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    29ac:	49a1      	ldr	r1, [pc, #644]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    29ae:	489e      	ldr	r0, [pc, #632]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29b0:	f7fd ff74 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b4:	49a1      	ldr	r1, [pc, #644]	; (2c3c <LEDDebug(LEDStruct&)+0xa60>)
    29b6:	489c      	ldr	r0, [pc, #624]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29b8:	f7fd ff62 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29bc:	2300      	movs	r3, #0
    29be:	220a      	movs	r2, #10
    29c0:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    29c4:	4898      	ldr	r0, [pc, #608]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29c6:	f00a fbcb 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    29ca:	499a      	ldr	r1, [pc, #616]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    29cc:	4896      	ldr	r0, [pc, #600]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29ce:	f7fd ff65 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29d2:	499b      	ldr	r1, [pc, #620]	; (2c40 <LEDDebug(LEDStruct&)+0xa64>)
    29d4:	4894      	ldr	r0, [pc, #592]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29d6:	f7fd ff53 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29da:	2300      	movs	r3, #0
    29dc:	220a      	movs	r2, #10
    29de:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    29e2:	4891      	ldr	r0, [pc, #580]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29e4:	f00a fbbc 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    29e8:	4992      	ldr	r1, [pc, #584]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    29ea:	488f      	ldr	r0, [pc, #572]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29ec:	f7fd ff56 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29f0:	4994      	ldr	r1, [pc, #592]	; (2c44 <LEDDebug(LEDStruct&)+0xa68>)
    29f2:	488d      	ldr	r0, [pc, #564]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    29f4:	f7fd ff44 	bl	880 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    29f8:	2300      	movs	r3, #0
    29fa:	220a      	movs	r2, #10
    29fc:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2a00:	4889      	ldr	r0, [pc, #548]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a02:	f00a fbad 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2a06:	498b      	ldr	r1, [pc, #556]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2a08:	4887      	ldr	r0, [pc, #540]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a0a:	f7fd ff47 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a0e:	498e      	ldr	r1, [pc, #568]	; (2c48 <LEDDebug(LEDStruct&)+0xa6c>)
    2a10:	4885      	ldr	r0, [pc, #532]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a12:	f7fd ff35 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a16:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    2a1a:	e4dc      	b.n	23d6 <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    2a1c:	498b      	ldr	r1, [pc, #556]	; (2c4c <LEDDebug(LEDStruct&)+0xa70>)
    2a1e:	4882      	ldr	r0, [pc, #520]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a20:	f7fd ff3c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a24:	498a      	ldr	r1, [pc, #552]	; (2c50 <LEDDebug(LEDStruct&)+0xa74>)
    2a26:	4880      	ldr	r0, [pc, #512]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a28:	f7fd ff2a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a2c:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2a30:	487d      	ldr	r0, [pc, #500]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a32:	f00a fbd5 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2a36:	497f      	ldr	r1, [pc, #508]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2a38:	487b      	ldr	r0, [pc, #492]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a3a:	f7fd ff2f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a3e:	4985      	ldr	r1, [pc, #532]	; (2c54 <LEDDebug(LEDStruct&)+0xa78>)
    2a40:	4879      	ldr	r0, [pc, #484]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a42:	f7fd ff1d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a46:	2300      	movs	r3, #0
    2a48:	220a      	movs	r2, #10
    2a4a:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    2a4e:	4876      	ldr	r0, [pc, #472]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a50:	f00a fb86 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    2a54:	4977      	ldr	r1, [pc, #476]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2a56:	4874      	ldr	r0, [pc, #464]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a58:	f7fd ff20 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a5c:	497e      	ldr	r1, [pc, #504]	; (2c58 <LEDDebug(LEDStruct&)+0xa7c>)
    2a5e:	4872      	ldr	r0, [pc, #456]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a60:	f7fd ff0e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a64:	2300      	movs	r3, #0
    2a66:	220a      	movs	r2, #10
    2a68:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2a6c:	486e      	ldr	r0, [pc, #440]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a6e:	f00a fb77 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2a72:	4970      	ldr	r1, [pc, #448]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2a74:	486c      	ldr	r0, [pc, #432]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a76:	f7fd ff11 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a7a:	4978      	ldr	r1, [pc, #480]	; (2c5c <LEDDebug(LEDStruct&)+0xa80>)
    2a7c:	486a      	ldr	r0, [pc, #424]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a7e:	f7fd feff 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a82:	2300      	movs	r3, #0
    2a84:	220a      	movs	r2, #10
    2a86:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2a8a:	4867      	ldr	r0, [pc, #412]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a8c:	f00a fb68 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2a90:	4968      	ldr	r1, [pc, #416]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2a92:	4865      	ldr	r0, [pc, #404]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a94:	f7fd ff02 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a98:	4971      	ldr	r1, [pc, #452]	; (2c60 <LEDDebug(LEDStruct&)+0xa84>)
    2a9a:	4863      	ldr	r0, [pc, #396]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2a9c:	f7fd fef0 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2aa0:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2aa4:	e5c5      	b.n	2632 <LEDDebug(LEDStruct&)+0x456>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2aa6:	496f      	ldr	r1, [pc, #444]	; (2c64 <LEDDebug(LEDStruct&)+0xa88>)
    2aa8:	485f      	ldr	r0, [pc, #380]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2aaa:	f7fd fef7 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aae:	496e      	ldr	r1, [pc, #440]	; (2c68 <LEDDebug(LEDStruct&)+0xa8c>)
    2ab0:	485d      	ldr	r0, [pc, #372]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ab2:	f7fd fee5 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ab6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2aba:	485b      	ldr	r0, [pc, #364]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2abc:	f00a fb90 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2ac0:	495c      	ldr	r1, [pc, #368]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2ac2:	4859      	ldr	r0, [pc, #356]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ac4:	f7fd feea 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ac8:	4968      	ldr	r1, [pc, #416]	; (2c6c <LEDDebug(LEDStruct&)+0xa90>)
    2aca:	4857      	ldr	r0, [pc, #348]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2acc:	f7fd fed8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ad0:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2ad4:	4854      	ldr	r0, [pc, #336]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ad6:	f00a fb83 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2ada:	4956      	ldr	r1, [pc, #344]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2adc:	4852      	ldr	r0, [pc, #328]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ade:	f7fd fedd 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae2:	4963      	ldr	r1, [pc, #396]	; (2c70 <LEDDebug(LEDStruct&)+0xa94>)
    2ae4:	4850      	ldr	r0, [pc, #320]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ae6:	f7fd fecb 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2aea:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2aee:	484e      	ldr	r0, [pc, #312]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2af0:	f00a fb76 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2af4:	494f      	ldr	r1, [pc, #316]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2af6:	484c      	ldr	r0, [pc, #304]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2af8:	f7fd fed0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2afc:	495d      	ldr	r1, [pc, #372]	; (2c74 <LEDDebug(LEDStruct&)+0xa98>)
    2afe:	484a      	ldr	r0, [pc, #296]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b00:	f7fd febe 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b04:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    2b08:	4847      	ldr	r0, [pc, #284]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b0a:	f00a fb69 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2b0e:	4949      	ldr	r1, [pc, #292]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2b10:	4845      	ldr	r0, [pc, #276]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b12:	f7fd fec3 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b16:	4958      	ldr	r1, [pc, #352]	; (2c78 <LEDDebug(LEDStruct&)+0xa9c>)
    2b18:	4843      	ldr	r0, [pc, #268]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b1a:	f7fd feb1 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b1e:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2b22:	e586      	b.n	2632 <LEDDebug(LEDStruct&)+0x456>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2b24:	4955      	ldr	r1, [pc, #340]	; (2c7c <LEDDebug(LEDStruct&)+0xaa0>)
    2b26:	4840      	ldr	r0, [pc, #256]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b28:	f7fd feb8 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b2c:	4954      	ldr	r1, [pc, #336]	; (2c80 <LEDDebug(LEDStruct&)+0xaa4>)
    2b2e:	483e      	ldr	r0, [pc, #248]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b30:	f7fd fea6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b34:	2300      	movs	r3, #0
    2b36:	220a      	movs	r2, #10
    2b38:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2b3c:	483a      	ldr	r0, [pc, #232]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b3e:	f00a fb0f 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2b42:	493c      	ldr	r1, [pc, #240]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2b44:	4838      	ldr	r0, [pc, #224]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b46:	f7fd fea9 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b4a:	494e      	ldr	r1, [pc, #312]	; (2c84 <LEDDebug(LEDStruct&)+0xaa8>)
    2b4c:	4836      	ldr	r0, [pc, #216]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b4e:	f7fd fe97 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b52:	2300      	movs	r3, #0
    2b54:	220a      	movs	r2, #10
    2b56:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2b5a:	4833      	ldr	r0, [pc, #204]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b5c:	f00a fb00 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2b60:	4934      	ldr	r1, [pc, #208]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2b62:	4831      	ldr	r0, [pc, #196]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b64:	f7fd fe9a 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b68:	4947      	ldr	r1, [pc, #284]	; (2c88 <LEDDebug(LEDStruct&)+0xaac>)
    2b6a:	482f      	ldr	r0, [pc, #188]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b6c:	f7fd fe88 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b70:	2300      	movs	r3, #0
    2b72:	220a      	movs	r2, #10
    2b74:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b78:	482b      	ldr	r0, [pc, #172]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b7a:	f00a faf1 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b7e:	492d      	ldr	r1, [pc, #180]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2b80:	4829      	ldr	r0, [pc, #164]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b82:	f7fd fe8b 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b86:	4941      	ldr	r1, [pc, #260]	; (2c8c <LEDDebug(LEDStruct&)+0xab0>)
    2b88:	4827      	ldr	r0, [pc, #156]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b8a:	f7fd fe79 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b8e:	2300      	movs	r3, #0
    2b90:	220a      	movs	r2, #10
    2b92:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2b96:	4824      	ldr	r0, [pc, #144]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2b98:	f00a fae2 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2b9c:	4925      	ldr	r1, [pc, #148]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2b9e:	4822      	ldr	r0, [pc, #136]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ba0:	f7fd fe7c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ba4:	493a      	ldr	r1, [pc, #232]	; (2c90 <LEDDebug(LEDStruct&)+0xab4>)
    2ba6:	4820      	ldr	r0, [pc, #128]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2ba8:	f7fd fe6a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bac:	2300      	movs	r3, #0
    2bae:	220a      	movs	r2, #10
    2bb0:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2bb4:	481c      	ldr	r0, [pc, #112]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bb6:	f00a fad3 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2bba:	491e      	ldr	r1, [pc, #120]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2bbc:	481a      	ldr	r0, [pc, #104]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bbe:	f7fd fe6d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bc2:	4934      	ldr	r1, [pc, #208]	; (2c94 <LEDDebug(LEDStruct&)+0xab8>)
    2bc4:	4818      	ldr	r0, [pc, #96]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bc6:	f7fd fe5b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bca:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2bce:	e402      	b.n	23d6 <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2bd0:	4931      	ldr	r1, [pc, #196]	; (2c98 <LEDDebug(LEDStruct&)+0xabc>)
    2bd2:	4815      	ldr	r0, [pc, #84]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bd4:	f7fd fe62 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bd8:	4930      	ldr	r1, [pc, #192]	; (2c9c <LEDDebug(LEDStruct&)+0xac0>)
    2bda:	4813      	ldr	r0, [pc, #76]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bdc:	f7fd fe50 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2be0:	2300      	movs	r3, #0
    2be2:	220a      	movs	r2, #10
    2be4:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2be8:	480f      	ldr	r0, [pc, #60]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bea:	f00a fab9 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2bee:	4911      	ldr	r1, [pc, #68]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2bf0:	480d      	ldr	r0, [pc, #52]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bf2:	f7fd fe53 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bf6:	492a      	ldr	r1, [pc, #168]	; (2ca0 <LEDDebug(LEDStruct&)+0xac4>)
    2bf8:	480b      	ldr	r0, [pc, #44]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2bfa:	f7fd fe41 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bfe:	2300      	movs	r3, #0
    2c00:	220a      	movs	r2, #10
    2c02:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2c06:	4808      	ldr	r0, [pc, #32]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2c08:	f00a faaa 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2c0c:	4909      	ldr	r1, [pc, #36]	; (2c34 <LEDDebug(LEDStruct&)+0xa58>)
    2c0e:	4806      	ldr	r0, [pc, #24]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2c10:	f7fd fe44 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c14:	4923      	ldr	r1, [pc, #140]	; (2ca4 <LEDDebug(LEDStruct&)+0xac8>)
    2c16:	4804      	ldr	r0, [pc, #16]	; (2c28 <LEDDebug(LEDStruct&)+0xa4c>)
    2c18:	f7fd fe32 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c1c:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2c20:	f7ff bbd9 	b.w	23d6 <LEDDebug(LEDStruct&)+0x1fa>
    2c24:	0000f584 	.word	0x0000f584
    2c28:	1fff8790 	.word	0x1fff8790
    2c2c:	0000f5a8 	.word	0x0000f5a8
    2c30:	0000f5bc 	.word	0x0000f5bc
    2c34:	0000f188 	.word	0x0000f188
    2c38:	0000f5d8 	.word	0x0000f5d8
    2c3c:	0000f5f0 	.word	0x0000f5f0
    2c40:	0000f608 	.word	0x0000f608
    2c44:	0000f620 	.word	0x0000f620
    2c48:	0000f63c 	.word	0x0000f63c
    2c4c:	0000f818 	.word	0x0000f818
    2c50:	0000f83c 	.word	0x0000f83c
    2c54:	0000f854 	.word	0x0000f854
    2c58:	0000f868 	.word	0x0000f868
    2c5c:	0000f880 	.word	0x0000f880
    2c60:	0000f898 	.word	0x0000f898
    2c64:	0000f8b0 	.word	0x0000f8b0
    2c68:	0000f240 	.word	0x0000f240
    2c6c:	0000f8d4 	.word	0x0000f8d4
    2c70:	0000f8ec 	.word	0x0000f8ec
    2c74:	0000f904 	.word	0x0000f904
    2c78:	0000f918 	.word	0x0000f918
    2c7c:	0000f92c 	.word	0x0000f92c
    2c80:	0000f950 	.word	0x0000f950
    2c84:	0000f968 	.word	0x0000f968
    2c88:	0000f980 	.word	0x0000f980
    2c8c:	0000f998 	.word	0x0000f998
    2c90:	0000f9b0 	.word	0x0000f9b0
    2c94:	0000f9c4 	.word	0x0000f9c4
    2c98:	0000f9dc 	.word	0x0000f9dc
    2c9c:	0000fa00 	.word	0x0000fa00
    2ca0:	0000fa10 	.word	0x0000fa10
    2ca4:	0000fa2c 	.word	0x0000fa2c
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2ca8:	4983      	ldr	r1, [pc, #524]	; (2eb8 <LEDDebug(LEDStruct&)+0xcdc>)
    2caa:	4884      	ldr	r0, [pc, #528]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cac:	f7fd fdf6 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2cb0:	4983      	ldr	r1, [pc, #524]	; (2ec0 <LEDDebug(LEDStruct&)+0xce4>)
    2cb2:	4882      	ldr	r0, [pc, #520]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cb4:	f7fd fde4 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2cb8:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2cbc:	487f      	ldr	r0, [pc, #508]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cbe:	f00a fa8f 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2cc2:	4980      	ldr	r1, [pc, #512]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2cc4:	487d      	ldr	r0, [pc, #500]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cc6:	f7fd fde9 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2cca:	497f      	ldr	r1, [pc, #508]	; (2ec8 <LEDDebug(LEDStruct&)+0xcec>)
    2ccc:	487b      	ldr	r0, [pc, #492]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cce:	f7fd fdd7 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2cd2:	2300      	movs	r3, #0
    2cd4:	220a      	movs	r2, #10
    2cd6:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2cda:	4878      	ldr	r0, [pc, #480]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cdc:	f00a fa40 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    2ce0:	4978      	ldr	r1, [pc, #480]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2ce2:	4876      	ldr	r0, [pc, #472]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2ce4:	f7fd fdda 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ce8:	4978      	ldr	r1, [pc, #480]	; (2ecc <LEDDebug(LEDStruct&)+0xcf0>)
    2cea:	4874      	ldr	r0, [pc, #464]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cec:	f7fd fdc8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2cf0:	2300      	movs	r3, #0
    2cf2:	220a      	movs	r2, #10
    2cf4:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2cf8:	4870      	ldr	r0, [pc, #448]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2cfa:	f00a fa31 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    2cfe:	4971      	ldr	r1, [pc, #452]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2d00:	486e      	ldr	r0, [pc, #440]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d02:	f7fd fdcb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d06:	4972      	ldr	r1, [pc, #456]	; (2ed0 <LEDDebug(LEDStruct&)+0xcf4>)
    2d08:	486c      	ldr	r0, [pc, #432]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d0a:	f7fd fdb9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d0e:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2d12:	486a      	ldr	r0, [pc, #424]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d14:	f00a fa64 	bl	d1e0 <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2d18:	496a      	ldr	r1, [pc, #424]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2d1a:	4868      	ldr	r0, [pc, #416]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d1c:	f7fd fdbe 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d20:	496c      	ldr	r1, [pc, #432]	; (2ed4 <LEDDebug(LEDStruct&)+0xcf8>)
    2d22:	4866      	ldr	r0, [pc, #408]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d24:	f7fd fdac 	bl	880 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2d28:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    2d2c:	2b01      	cmp	r3, #1
    2d2e:	f000 808c 	beq.w	2e4a <LEDDebug(LEDStruct&)+0xc6e>
    2d32:	f0c0 80b3 	bcc.w	2e9c <LEDDebug(LEDStruct&)+0xcc0>
    2d36:	2b02      	cmp	r3, #2
    2d38:	d103      	bne.n	2d42 <LEDDebug(LEDStruct&)+0xb66>
    2d3a:	4967      	ldr	r1, [pc, #412]	; (2ed8 <LEDDebug(LEDStruct&)+0xcfc>)
    2d3c:	485f      	ldr	r0, [pc, #380]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d3e:	f7fd fd9f 	bl	880 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2d42:	4960      	ldr	r1, [pc, #384]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2d44:	485d      	ldr	r0, [pc, #372]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d46:	f7fd fda9 	bl	89c <Print::println(char const*)>
    2d4a:	4964      	ldr	r1, [pc, #400]	; (2edc <LEDDebug(LEDStruct&)+0xd00>)
    2d4c:	485b      	ldr	r0, [pc, #364]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d4e:	f7fd fd97 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d52:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2d56:	f7ff bb3e 	b.w	23d6 <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2d5a:	4961      	ldr	r1, [pc, #388]	; (2ee0 <LEDDebug(LEDStruct&)+0xd04>)
    2d5c:	4857      	ldr	r0, [pc, #348]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d5e:	f7fd fd9d 	bl	89c <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2d62:	4960      	ldr	r1, [pc, #384]	; (2ee4 <LEDDebug(LEDStruct&)+0xd08>)
    2d64:	4855      	ldr	r0, [pc, #340]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d66:	f7fd fd99 	bl	89c <Print::println(char const*)>
			Serial.println("");
    2d6a:	495d      	ldr	r1, [pc, #372]	; (2ee0 <LEDDebug(LEDStruct&)+0xd04>)
    2d6c:	4853      	ldr	r0, [pc, #332]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d6e:	f7fd fd95 	bl	89c <Print::println(char const*)>
			break;
    2d72:	f7ff bb37 	b.w	23e4 <LEDDebug(LEDStruct&)+0x208>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2d76:	495c      	ldr	r1, [pc, #368]	; (2ee8 <LEDDebug(LEDStruct&)+0xd0c>)
    2d78:	4850      	ldr	r0, [pc, #320]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d7a:	f7fd fd8f 	bl	89c <Print::println(char const*)>
    2d7e:	f7ff ba48 	b.w	2212 <LEDDebug(LEDStruct&)+0x36>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2d82:	495a      	ldr	r1, [pc, #360]	; (2eec <LEDDebug(LEDStruct&)+0xd10>)
    2d84:	484d      	ldr	r0, [pc, #308]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d86:	f7fd fd89 	bl	89c <Print::println(char const*)>
    2d8a:	f7ff ba42 	b.w	2212 <LEDDebug(LEDStruct&)+0x36>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2d8e:	4958      	ldr	r1, [pc, #352]	; (2ef0 <LEDDebug(LEDStruct&)+0xd14>)
    2d90:	484a      	ldr	r0, [pc, #296]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d92:	f7fd fd83 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d96:	4957      	ldr	r1, [pc, #348]	; (2ef4 <LEDDebug(LEDStruct&)+0xd18>)
    2d98:	4848      	ldr	r0, [pc, #288]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2d9a:	f7fd fd71 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d9e:	2300      	movs	r3, #0
    2da0:	220a      	movs	r2, #10
    2da2:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2da6:	4845      	ldr	r0, [pc, #276]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2da8:	f00a f9da 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2dac:	4945      	ldr	r1, [pc, #276]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2dae:	4843      	ldr	r0, [pc, #268]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2db0:	f7fd fd74 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2db4:	4950      	ldr	r1, [pc, #320]	; (2ef8 <LEDDebug(LEDStruct&)+0xd1c>)
    2db6:	4841      	ldr	r0, [pc, #260]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2db8:	f7fd fd62 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2dbc:	2300      	movs	r3, #0
    2dbe:	220a      	movs	r2, #10
    2dc0:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2dc4:	483d      	ldr	r0, [pc, #244]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2dc6:	f00a f9cb 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2dca:	493e      	ldr	r1, [pc, #248]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2dcc:	483b      	ldr	r0, [pc, #236]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2dce:	f7fd fd65 	bl	89c <Print::println(char const*)>
			if (!leds.fire_sync) {
    2dd2:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2dd6:	b1cd      	cbz	r5, 2e0c <LEDDebug(LEDStruct&)+0xc30>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dd8:	4948      	ldr	r1, [pc, #288]	; (2efc <LEDDebug(LEDStruct&)+0xd20>)
    2dda:	4838      	ldr	r0, [pc, #224]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2ddc:	f7fd fd50 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2de0:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2de4:	4835      	ldr	r0, [pc, #212]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2de6:	f00a f9fb 	bl	d1e0 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2dea:	4936      	ldr	r1, [pc, #216]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2dec:	4833      	ldr	r0, [pc, #204]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2dee:	f7fd fd55 	bl	89c <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2df2:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2df6:	3b0f      	subs	r3, #15
    2df8:	2b01      	cmp	r3, #1
    2dfa:	f63f aaf3 	bhi.w	23e4 <LEDDebug(LEDStruct&)+0x208>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dfe:	4940      	ldr	r1, [pc, #256]	; (2f00 <LEDDebug(LEDStruct&)+0xd24>)
    2e00:	482e      	ldr	r0, [pc, #184]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e02:	f7fd fd3d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e06:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2e0a:	e412      	b.n	2632 <LEDDebug(LEDStruct&)+0x456>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e0c:	493d      	ldr	r1, [pc, #244]	; (2f04 <LEDDebug(LEDStruct&)+0xd28>)
    2e0e:	482b      	ldr	r0, [pc, #172]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e10:	f7fd fd36 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e14:	462b      	mov	r3, r5
    2e16:	220a      	movs	r2, #10
    2e18:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2e1c:	4827      	ldr	r0, [pc, #156]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e1e:	f00a f99f 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2e22:	4928      	ldr	r1, [pc, #160]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2e24:	4825      	ldr	r0, [pc, #148]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e26:	f7fd fd39 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e2a:	4937      	ldr	r1, [pc, #220]	; (2f08 <LEDDebug(LEDStruct&)+0xd2c>)
    2e2c:	4823      	ldr	r0, [pc, #140]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e2e:	f7fd fd27 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e32:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2e36:	4821      	ldr	r0, [pc, #132]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e38:	462b      	mov	r3, r5
    2e3a:	220a      	movs	r2, #10
    2e3c:	f00a f990 	bl	d160 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2e40:	4920      	ldr	r1, [pc, #128]	; (2ec4 <LEDDebug(LEDStruct&)+0xce8>)
    2e42:	481e      	ldr	r0, [pc, #120]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e44:	f7fd fd2a 	bl	89c <Print::println(char const*)>
    2e48:	e7c6      	b.n	2dd8 <LEDDebug(LEDStruct&)+0xbfc>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e4a:	4930      	ldr	r1, [pc, #192]	; (2f0c <LEDDebug(LEDStruct&)+0xd30>)
    2e4c:	481b      	ldr	r0, [pc, #108]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e4e:	f7fd fd17 	bl	880 <Print::write(char const*)>
    2e52:	e776      	b.n	2d42 <LEDDebug(LEDStruct&)+0xb66>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    2e54:	492e      	ldr	r1, [pc, #184]	; (2f10 <LEDDebug(LEDStruct&)+0xd34>)
    2e56:	4819      	ldr	r0, [pc, #100]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e58:	f7fd fd20 	bl	89c <Print::println(char const*)>
    2e5c:	f7ff bb73 	b.w	2546 <LEDDebug(LEDStruct&)+0x36a>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2e60:	492c      	ldr	r1, [pc, #176]	; (2f14 <LEDDebug(LEDStruct&)+0xd38>)
    2e62:	4816      	ldr	r0, [pc, #88]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e64:	f7fd fd1a 	bl	89c <Print::println(char const*)>
    2e68:	e595      	b.n	2996 <LEDDebug(LEDStruct&)+0x7ba>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2e6a:	492b      	ldr	r1, [pc, #172]	; (2f18 <LEDDebug(LEDStruct&)+0xd3c>)
    2e6c:	4813      	ldr	r0, [pc, #76]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e6e:	f7fd fd15 	bl	89c <Print::println(char const*)>
    2e72:	e790      	b.n	2d96 <LEDDebug(LEDStruct&)+0xbba>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2e74:	4929      	ldr	r1, [pc, #164]	; (2f1c <LEDDebug(LEDStruct&)+0xd40>)
    2e76:	4811      	ldr	r0, [pc, #68]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e78:	f7fd fd10 	bl	89c <Print::println(char const*)>
    2e7c:	e78b      	b.n	2d96 <LEDDebug(LEDStruct&)+0xbba>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2e7e:	4928      	ldr	r1, [pc, #160]	; (2f20 <LEDDebug(LEDStruct&)+0xd44>)
    2e80:	480e      	ldr	r0, [pc, #56]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e82:	f7fd fd0b 	bl	89c <Print::println(char const*)>
    2e86:	e786      	b.n	2d96 <LEDDebug(LEDStruct&)+0xbba>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2e88:	4926      	ldr	r1, [pc, #152]	; (2f24 <LEDDebug(LEDStruct&)+0xd48>)
    2e8a:	480c      	ldr	r0, [pc, #48]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e8c:	f7fd fd06 	bl	89c <Print::println(char const*)>
    2e90:	e781      	b.n	2d96 <LEDDebug(LEDStruct&)+0xbba>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2e92:	4925      	ldr	r1, [pc, #148]	; (2f28 <LEDDebug(LEDStruct&)+0xd4c>)
    2e94:	4809      	ldr	r0, [pc, #36]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2e96:	f7fd fd01 	bl	89c <Print::println(char const*)>
    2e9a:	e77c      	b.n	2d96 <LEDDebug(LEDStruct&)+0xbba>
    2e9c:	4923      	ldr	r1, [pc, #140]	; (2f2c <LEDDebug(LEDStruct&)+0xd50>)
    2e9e:	4807      	ldr	r0, [pc, #28]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2ea0:	f7fd fcee 	bl	880 <Print::write(char const*)>
    2ea4:	e74d      	b.n	2d42 <LEDDebug(LEDStruct&)+0xb66>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    2ea6:	4922      	ldr	r1, [pc, #136]	; (2f30 <LEDDebug(LEDStruct&)+0xd54>)
    2ea8:	4804      	ldr	r0, [pc, #16]	; (2ebc <LEDDebug(LEDStruct&)+0xce0>)
    2eaa:	f7fd fcf7 	bl	89c <Print::println(char const*)>
    2eae:	f7ff bb4a 	b.w	2546 <LEDDebug(LEDStruct&)+0x36a>
    2eb2:	4920      	ldr	r1, [pc, #128]	; (2f34 <LEDDebug(LEDStruct&)+0xd58>)
    2eb4:	e568      	b.n	2988 <LEDDebug(LEDStruct&)+0x7ac>
    2eb6:	bf00      	nop
    2eb8:	0000fa44 	.word	0x0000fa44
    2ebc:	1fff8790 	.word	0x1fff8790
    2ec0:	0000fa68 	.word	0x0000fa68
    2ec4:	0000f188 	.word	0x0000f188
    2ec8:	0000fa80 	.word	0x0000fa80
    2ecc:	0000fa98 	.word	0x0000fa98
    2ed0:	0000fab0 	.word	0x0000fab0
    2ed4:	0000fac4 	.word	0x0000fac4
    2ed8:	0000fad8 	.word	0x0000fad8
    2edc:	0000fae8 	.word	0x0000fae8
    2ee0:	0000f27c 	.word	0x0000f27c
    2ee4:	0000fb84 	.word	0x0000fb84
    2ee8:	0000f12c 	.word	0x0000f12c
    2eec:	0000f150 	.word	0x0000f150
    2ef0:	0000f3fc 	.word	0x0000f3fc
    2ef4:	0000f468 	.word	0x0000f468
    2ef8:	0000f47c 	.word	0x0000f47c
    2efc:	0000f4b8 	.word	0x0000f4b8
    2f00:	0000f4c8 	.word	0x0000f4c8
    2f04:	0000f490 	.word	0x0000f490
    2f08:	0000f4a4 	.word	0x0000f4a4
    2f0c:	0000fae0 	.word	0x0000fae0
    2f10:	0000f300 	.word	0x0000f300
    2f14:	0000f5cc 	.word	0x0000f5cc
    2f18:	0000f3b4 	.word	0x0000f3b4
    2f1c:	0000f390 	.word	0x0000f390
    2f20:	0000f444 	.word	0x0000f444
    2f24:	0000f420 	.word	0x0000f420
    2f28:	0000f3d8 	.word	0x0000f3d8
    2f2c:	0000f5c8 	.word	0x0000f5c8
    2f30:	0000f324 	.word	0x0000f324
    2f34:	0000f5c4 	.word	0x0000f5c4

00002f38 <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f3c:	b08d      	sub	sp, #52	; 0x34
    2f3e:	2134      	movs	r1, #52	; 0x34
    2f40:	4605      	mov	r5, r0
    2f42:	9009      	str	r0, [sp, #36]	; 0x24
    2f44:	4846      	ldr	r0, [pc, #280]	; (3060 <change_palette(LEDStruct&) [clone .part.12]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    2f46:	4c47      	ldr	r4, [pc, #284]	; (3064 <change_palette(LEDStruct&) [clone .part.12]+0x12c>)
    2f48:	f009 fef6 	bl	cd38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2f4c:	4846      	ldr	r0, [pc, #280]	; (3068 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f4e:	f00a f8f7 	bl	d140 <Print::println()>
    2f52:	2133      	movs	r1, #51	; 0x33
    2f54:	4845      	ldr	r0, [pc, #276]	; (306c <change_palette(LEDStruct&) [clone .part.12]+0x134>)
    2f56:	f009 feef 	bl	cd38 <usb_serial_write>
    2f5a:	4843      	ldr	r0, [pc, #268]	; (3068 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f5c:	f00a f8f0 	bl	d140 <Print::println()>
    2f60:	2133      	movs	r1, #51	; 0x33
    2f62:	4843      	ldr	r0, [pc, #268]	; (3070 <change_palette(LEDStruct&) [clone .part.12]+0x138>)
    2f64:	f009 fee8 	bl	cd38 <usb_serial_write>
    2f68:	483f      	ldr	r0, [pc, #252]	; (3068 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f6a:	f00a f8e9 	bl	d140 <Print::println()>
    2f6e:	4841      	ldr	r0, [pc, #260]	; (3074 <change_palette(LEDStruct&) [clone .part.12]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2f70:	4a41      	ldr	r2, [pc, #260]	; (3078 <change_palette(LEDStruct&) [clone .part.12]+0x140>)
    2f72:	8803      	ldrh	r3, [r0, #0]
    2f74:	7811      	ldrb	r1, [r2, #0]
    2f76:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2f7e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2f82:	3319      	adds	r3, #25
    2f84:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f86:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2f8a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2f8c:	fb12 f201 	smulbb	r2, r2, r1
    2f90:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f92:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    2f94:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2f98:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2f9c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2f9e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2fa2:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2fa4:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2fa6:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2fa8:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2faa:	d1f8      	bne.n	2f9e <change_palette(LEDStruct&) [clone .part.12]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2fac:	f8d8 3000 	ldr.w	r3, [r8]
    2fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2fb2:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    2fb4:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2fb8:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    2fbc:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2fc0:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2fc4:	f04f 33ff 	mov.w	r3, #4294967295
    2fc8:	9207      	str	r2, [sp, #28]
    2fca:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2fcc:	2400      	movs	r4, #0
    2fce:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2fd0:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2fd4:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2fd6:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    2fda:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2fde:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2fe2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    2fe4:	b2f9      	uxtb	r1, r7
    2fe6:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2fea:	9104      	str	r1, [sp, #16]
    2fec:	b2e9      	uxtb	r1, r5
    2fee:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2ff0:	fa5f f18c 	uxtb.w	r1, ip
    2ff4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2ff6:	9908      	ldr	r1, [sp, #32]
    2ff8:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2ffa:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2ffc:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3000:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3004:	d80c      	bhi.n	3020 <change_palette(LEDStruct&) [clone .part.12]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3006:	9906      	ldr	r1, [sp, #24]
    3008:	458c      	cmp	ip, r1
    300a:	dc07      	bgt.n	301c <change_palette(LEDStruct&) [clone .part.12]+0xe4>
    300c:	290f      	cmp	r1, #15
    300e:	d005      	beq.n	301c <change_palette(LEDStruct&) [clone .part.12]+0xe4>
                    istart8 = lastSlotUsed + 1;
    3010:	3101      	adds	r1, #1
    3012:	b2c9      	uxtb	r1, r1
    3014:	428b      	cmp	r3, r1
    3016:	9103      	str	r1, [sp, #12]
    3018:	bf38      	it	cc
    301a:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    301c:	b259      	sxtb	r1, r3
    301e:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3020:	a90b      	add	r1, sp, #44	; 0x2c
    3022:	9100      	str	r1, [sp, #0]
    3024:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3026:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    302a:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    302e:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3032:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    3036:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    303a:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    303e:	f007 fdd7 	bl	abf0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3042:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3044:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3048:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    304c:	46ca      	mov	sl, r9
    304e:	d1bf      	bne.n	2fd0 <change_palette(LEDStruct&) [clone .part.12]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    3050:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3052:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    3056:	f7fe fdb3 	bl	1bc0 <print_palette(unsigned char)>
	}
}
    305a:	b00d      	add	sp, #52	; 0x34
    305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3060:	0000fbcc 	.word	0x0000fbcc
    3064:	00010778 	.word	0x00010778
    3068:	1fff8790 	.word	0x1fff8790
    306c:	0000fc04 	.word	0x0000fc04
    3070:	0000fc38 	.word	0x0000fc38
    3074:	1fff8788 	.word	0x1fff8788
    3078:	1fff8750 	.word	0x1fff8750

0000307c <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    307c:	4b24      	ldr	r3, [pc, #144]	; (3110 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    307e:	4a25      	ldr	r2, [pc, #148]	; (3114 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    3080:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    3082:	2100      	movs	r1, #0
    3084:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3086:	2b07      	cmp	r3, #7
    3088:	d809      	bhi.n	309e <juggle_update(LEDStruct&)+0x22>
    308a:	e8df f003 	tbb	[pc, r3]
    308e:	1c13      	.short	0x1c13
    3090:	04342e25 	.word	0x04342e25
    3094:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    3096:	4b20      	ldr	r3, [pc, #128]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    3098:	881b      	ldrh	r3, [r3, #0]
    309a:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    309e:	f7ff b89d 	b.w	21dc <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    30a2:	4b1d      	ldr	r3, [pc, #116]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    30a4:	881b      	ldrh	r3, [r3, #0]
    30a6:	3300      	adds	r3, #0
    30a8:	bf18      	it	ne
    30aa:	2301      	movne	r3, #1
    30ac:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    30b0:	f7ff b894 	b.w	21dc <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    30b4:	4b18      	ldr	r3, [pc, #96]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    30b6:	881b      	ldrh	r3, [r3, #0]
    30b8:	3300      	adds	r3, #0
    30ba:	bf18      	it	ne
    30bc:	2301      	movne	r3, #1
    30be:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30c2:	f7ff b88b 	b.w	21dc <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    30c6:	4b14      	ldr	r3, [pc, #80]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    30c8:	881b      	ldrh	r3, [r3, #0]
    30ca:	3300      	adds	r3, #0
    30cc:	bf18      	it	ne
    30ce:	2301      	movne	r3, #1
    30d0:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30d4:	f7ff b882 	b.w	21dc <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    30d8:	4b0f      	ldr	r3, [pc, #60]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    30da:	881b      	ldrh	r3, [r3, #0]
    30dc:	3300      	adds	r3, #0
    30de:	bf18      	it	ne
    30e0:	2301      	movne	r3, #1
    30e2:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30e6:	f7ff b879 	b.w	21dc <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    30ea:	4b0b      	ldr	r3, [pc, #44]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    30ec:	881b      	ldrh	r3, [r3, #0]
    30ee:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30f2:	f7ff b873 	b.w	21dc <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    30f6:	4b08      	ldr	r3, [pc, #32]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    30f8:	881b      	ldrh	r3, [r3, #0]
    30fa:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30fe:	f7ff b86d 	b.w	21dc <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    3102:	4b05      	ldr	r3, [pc, #20]	; (3118 <juggle_update(LEDStruct&)+0x9c>)
    3104:	881b      	ldrh	r3, [r3, #0]
    3106:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    310a:	f7ff b867 	b.w	21dc <LEDDebug(LEDStruct&)>
    310e:	bf00      	nop
    3110:	1fff9e66 	.word	0x1fff9e66
    3114:	1fff9619 	.word	0x1fff9619
    3118:	1fff9e64 	.word	0x1fff9e64

0000311c <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3120:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    3124:	b089      	sub	sp, #36	; 0x24
    3126:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3128:	2b00      	cmp	r3, #0
    312a:	f040 809d 	bne.w	3268 <juggle(LEDStruct&)+0x14c>
    312e:	4ed4      	ldr	r6, [pc, #848]	; (3480 <juggle(LEDStruct&)+0x364>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3130:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3134:	8833      	ldrh	r3, [r6, #0]
    3136:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    313a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    313e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3142:	3019      	adds	r0, #25
    3144:	b280      	uxth	r0, r0
    3146:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    314a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    314e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3152:	3519      	adds	r5, #25
    3154:	b2ad      	uxth	r5, r5
    3156:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    315a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    315e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3162:	3319      	adds	r3, #25
    3164:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3168:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    316c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3170:	3319      	adds	r3, #25
    3172:	b29b      	uxth	r3, r3
    3174:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3178:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    317c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3180:	3119      	adds	r1, #25
    3182:	b289      	uxth	r1, r1
    3184:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3188:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    318c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3190:	3219      	adds	r2, #25
    3192:	b292      	uxth	r2, r2
    3194:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3198:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    319c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    31a0:	f10e 0e19 	add.w	lr, lr, #25
    31a4:	fa1f fe8e 	uxth.w	lr, lr
    31a8:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    31ac:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    31b0:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    31b4:	f10c 0c19 	add.w	ip, ip, #25
    31b8:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31bc:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31c0:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    31c4:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31c8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31cc:	b2ff      	uxtb	r7, r7
    31ce:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    31d2:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    31d6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31da:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    31de:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    31e0:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    31e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31e6:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31ea:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31ee:	ea4f 2e27 	mov.w	lr, r7, asr #8
    31f2:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    31f6:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31f8:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31fc:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3200:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3204:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3208:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    320a:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    320e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3212:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3216:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3218:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    321c:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3220:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3224:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3228:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    322a:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    322e:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3232:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3236:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    323a:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    323c:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    323e:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3242:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3246:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    324a:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    324e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3252:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3256:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    325a:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    325e:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3262:	2b00      	cmp	r3, #0
    3264:	f040 8177 	bne.w	3556 <juggle(LEDStruct&)+0x43a>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3268:	4b86      	ldr	r3, [pc, #536]	; (3484 <juggle(LEDStruct&)+0x368>)
    326a:	781b      	ldrb	r3, [r3, #0]
    326c:	2b00      	cmp	r3, #0
    326e:	f040 817d 	bne.w	356c <juggle(LEDStruct&)+0x450>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    3272:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3276:	b1d3      	cbz	r3, 32ae <juggle(LEDStruct&)+0x192>
    3278:	4b83      	ldr	r3, [pc, #524]	; (3488 <juggle(LEDStruct&)+0x36c>)
    327a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    327e:	2200      	movs	r2, #0
    3280:	f103 0027 	add.w	r0, r3, #39	; 0x27
    3284:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    3288:	e001      	b.n	328e <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    328a:	4283      	cmp	r3, r0
    328c:	d00f      	beq.n	32ae <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    328e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3292:	428a      	cmp	r2, r1
    3294:	d1f9      	bne.n	328a <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3296:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    329a:	4a7c      	ldr	r2, [pc, #496]	; (348c <juggle(LEDStruct&)+0x370>)
    329c:	fba2 2303 	umull	r2, r3, r2, r3
    32a0:	08db      	lsrs	r3, r3, #3
    32a2:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    32a4:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    32a6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    32aa:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    32ae:	2196      	movs	r1, #150	; 0x96
    32b0:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    32b4:	4620      	mov	r0, r4
    32b6:	f007 fd2d 	bl	ad14 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    32ba:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    32be:	2900      	cmp	r1, #0
    32c0:	f040 80ec 	bne.w	349c <juggle(LEDStruct&)+0x380>
		if (leds.juggle_phased) {
    32c4:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    32c8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    32cc:	2f00      	cmp	r7, #0
    32ce:	f000 81ac 	beq.w	362a <juggle(LEDStruct&)+0x50e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    32d2:	2b00      	cmp	r3, #0
    32d4:	f000 8273 	beq.w	37be <juggle(LEDStruct&)+0x6a2>
    32d8:	486d      	ldr	r0, [pc, #436]	; (3490 <juggle(LEDStruct&)+0x374>)
    32da:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    32de:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 3494 <juggle(LEDStruct&)+0x378>
    32e2:	9003      	str	r0, [sp, #12]
    32e4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 3498 <juggle(LEDStruct&)+0x37c>
    32e8:	460f      	mov	r7, r1
    32ea:	f10d 0a1c 	add.w	sl, sp, #28
    32ee:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    32f2:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    32f6:	e05d      	b.n	33b4 <juggle(LEDStruct&)+0x298>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32f8:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    32fc:	443b      	add	r3, r7
    32fe:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3300:	f8d9 1000 	ldr.w	r1, [r9]
    3304:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3306:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3308:	9904      	ldr	r1, [sp, #16]
    330a:	bf98      	it	ls
    330c:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    330e:	f44f 708c 	mov.w	r0, #280	; 0x118
    3312:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3316:	bf98      	it	ls
    3318:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    331a:	fb03 f301 	mul.w	r3, r3, r1
    331e:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3320:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3322:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3326:	d503      	bpl.n	3330 <juggle(LEDStruct&)+0x214>
    3328:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    332c:	3107      	adds	r1, #7
    332e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3330:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3332:	9e03      	ldr	r6, [sp, #12]
    3334:	5c36      	ldrb	r6, [r6, r0]
    3336:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    333a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    333e:	fb06 0101 	mla	r1, r6, r1, r0
    3342:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3344:	041e      	lsls	r6, r3, #16
    3346:	bf48      	it	mi
    3348:	4249      	negmi	r1, r1
    334a:	b20e      	sxth	r6, r1
    334c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3350:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3354:	9100      	str	r1, [sp, #0]
    3356:	4650      	mov	r0, sl
    3358:	4641      	mov	r1, r8
    335a:	f007 fd3b 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    335e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3362:	2296      	movs	r2, #150	; 0x96
    3364:	b29b      	uxth	r3, r3
    3366:	fb02 f303 	mul.w	r3, r2, r3
    336a:	0c1b      	lsrs	r3, r3, #16
    336c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3370:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3372:	5ce2      	ldrb	r2, [r4, r3]
    3374:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3378:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    337c:	54e2      	strb	r2, [r4, r3]
    337e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3382:	784a      	ldrb	r2, [r1, #1]
    3384:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3388:	704a      	strb	r2, [r1, #1]
    338a:	788b      	ldrb	r3, [r1, #2]
    338c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3390:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3394:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3396:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    339a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    339e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    33a2:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33a4:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    33a6:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33a8:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    33aa:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33ac:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    33b0:	f240 8205 	bls.w	37be <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    33b4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    33b8:	2900      	cmp	r1, #0
    33ba:	d19d      	bne.n	32f8 <juggle(LEDStruct&)+0x1dc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    33bc:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    33c0:	443b      	add	r3, r7
    33c2:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    33c4:	f8d9 1000 	ldr.w	r1, [r9]
    33c8:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    33ca:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    33cc:	9905      	ldr	r1, [sp, #20]
    33ce:	bf98      	it	ls
    33d0:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    33d2:	f44f 708c 	mov.w	r0, #280	; 0x118
    33d6:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    33da:	bf98      	it	ls
    33dc:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    33de:	fb03 f301 	mul.w	r3, r3, r1
    33e2:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33e4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33e6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33ea:	d503      	bpl.n	33f4 <juggle(LEDStruct&)+0x2d8>
    33ec:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    33f0:	3107      	adds	r1, #7
    33f2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33f4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33f6:	9e03      	ldr	r6, [sp, #12]
    33f8:	5c36      	ldrb	r6, [r6, r0]
    33fa:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    33fe:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3402:	fb06 0101 	mla	r1, r6, r1, r0
    3406:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3408:	041e      	lsls	r6, r3, #16
    340a:	bf48      	it	mi
    340c:	4249      	negmi	r1, r1
    340e:	b20e      	sxth	r6, r1
    3410:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3414:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3418:	9100      	str	r1, [sp, #0]
    341a:	4650      	mov	r0, sl
    341c:	4641      	mov	r1, r8
    341e:	f007 fcd9 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3422:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3426:	b29b      	uxth	r3, r3
    3428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    342c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3430:	0c1b      	lsrs	r3, r3, #16
    3432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3436:	18e1      	adds	r1, r4, r3
    3438:	5ce2      	ldrb	r2, [r4, r3]
    343a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    343e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3442:	54e2      	strb	r2, [r4, r3]
    3444:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3448:	784a      	ldrb	r2, [r1, #1]
    344a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    344e:	704a      	strb	r2, [r1, #1]
    3450:	788b      	ldrb	r3, [r1, #2]
    3452:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3456:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    345a:	708b      	strb	r3, [r1, #2]
    345c:	4622      	mov	r2, r4
    345e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3460:	7819      	ldrb	r1, [r3, #0]
    3462:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3466:	7859      	ldrb	r1, [r3, #1]
    3468:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    346c:	7899      	ldrb	r1, [r3, #2]
    346e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3472:	3303      	adds	r3, #3
LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    3474:	429d      	cmp	r5, r3
    3476:	f1a2 0203 	sub.w	r2, r2, #3
    347a:	d1f1      	bne.n	3460 <juggle(LEDStruct&)+0x344>
    347c:	e78b      	b.n	3396 <juggle(LEDStruct&)+0x27a>
    347e:	bf00      	nop
    3480:	1fff8788 	.word	0x1fff8788
    3484:	1fff9619 	.word	0x1fff9619
    3488:	1fff875f 	.word	0x1fff875f
    348c:	cccccccd 	.word	0xcccccccd
    3490:	00010950 	.word	0x00010950
    3494:	1fffa904 	.word	0x1fffa904
    3498:	0000fd9c 	.word	0x0000fd9c
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    349c:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    34a0:	2e00      	cmp	r6, #0
    34a2:	d067      	beq.n	3574 <juggle(LEDStruct&)+0x458>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34a4:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    34a8:	2b00      	cmp	r3, #0
    34aa:	f000 8188 	beq.w	37be <juggle(LEDStruct&)+0x6a2>
    34ae:	2500      	movs	r5, #0
    34b0:	f10d 0a1c 	add.w	sl, sp, #28
    34b4:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    34b8:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    34bc:	e039      	b.n	3532 <juggle(LEDStruct&)+0x416>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    34be:	fb06 f305 	mul.w	r3, r6, r5
    34c2:	2900      	cmp	r1, #0
    34c4:	f000 81b5 	beq.w	3832 <juggle(LEDStruct&)+0x716>
    34c8:	2295      	movs	r2, #149	; 0x95
    34ca:	2100      	movs	r1, #0
    34cc:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    34d0:	f7fc fff0 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    34d4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    34d8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34dc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    34e0:	9100      	str	r1, [sp, #0]
    34e2:	4607      	mov	r7, r0
    34e4:	4641      	mov	r1, r8
    34e6:	4650      	mov	r0, sl
    34e8:	f007 fc74 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34ec:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    34f0:	18e1      	adds	r1, r4, r3
    34f2:	5ce2      	ldrb	r2, [r4, r3]
    34f4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34f8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34fc:	54e2      	strb	r2, [r4, r3]
    34fe:	784a      	ldrb	r2, [r1, #1]
    3500:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3504:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3508:	704a      	strb	r2, [r1, #1]
    350a:	788b      	ldrb	r3, [r1, #2]
    350c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3510:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3514:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3516:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    351a:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    351e:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3522:	3501      	adds	r5, #1
    3524:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3526:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3528:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    352a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    352e:	f240 8146 	bls.w	37be <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    3532:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3536:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    353a:	2b00      	cmp	r3, #0
    353c:	d1bf      	bne.n	34be <juggle(LEDStruct&)+0x3a2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    353e:	2900      	cmp	r1, #0
    3540:	f000 81b8 	beq.w	38b4 <juggle(LEDStruct&)+0x798>
    3544:	4619      	mov	r1, r3
    3546:	2295      	movs	r2, #149	; 0x95
    3548:	fb06 f305 	mul.w	r3, r6, r5
    354c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3550:	f7fc fff2 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3554:	e7be      	b.n	34d4 <juggle(LEDStruct&)+0x3b8>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3556:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    355a:	fa02 f300 	lsl.w	r3, r2, r0
    355e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3562:	4bd0      	ldr	r3, [pc, #832]	; (38a4 <juggle(LEDStruct&)+0x788>)
    3564:	781b      	ldrb	r3, [r3, #0]
    3566:	2b00      	cmp	r3, #0
    3568:	f43f ae83 	beq.w	3272 <juggle(LEDStruct&)+0x156>
    356c:	4620      	mov	r0, r4
    356e:	f7ff fd85 	bl	307c <juggle_update(LEDStruct&)>
    3572:	e67e      	b.n	3272 <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3574:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3578:	2900      	cmp	r1, #0
    357a:	f000 8120 	beq.w	37be <juggle(LEDStruct&)+0x6a2>
    357e:	f10d 0a1c 	add.w	sl, sp, #28
    3582:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3586:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    358a:	e03c      	b.n	3606 <juggle(LEDStruct&)+0x4ea>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    358c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3590:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3594:	4431      	add	r1, r6
    3596:	2b00      	cmp	r3, #0
    3598:	f000 8114 	beq.w	37c4 <juggle(LEDStruct&)+0x6a8>
    359c:	2300      	movs	r3, #0
    359e:	4408      	add	r0, r1
    35a0:	2295      	movs	r2, #149	; 0x95
    35a2:	4619      	mov	r1, r3
    35a4:	f7fc ff86 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    35a8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    35ac:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35b0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35b4:	9100      	str	r1, [sp, #0]
    35b6:	4607      	mov	r7, r0
    35b8:	4641      	mov	r1, r8
    35ba:	4650      	mov	r0, sl
    35bc:	f007 fc0a 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35c0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    35c4:	18e1      	adds	r1, r4, r3
    35c6:	5ce2      	ldrb	r2, [r4, r3]
    35c8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    35cc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35d0:	54e2      	strb	r2, [r4, r3]
    35d2:	784a      	ldrb	r2, [r1, #1]
    35d4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35d8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35dc:	704a      	strb	r2, [r1, #1]
    35de:	788b      	ldrb	r3, [r1, #2]
    35e0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    35e4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35e8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35ea:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35ee:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35f2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    35f6:	3601      	adds	r6, #1
    35f8:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35fa:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35fc:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35fe:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3602:	f240 80dc 	bls.w	37be <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    3606:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    360a:	2b00      	cmp	r3, #0
    360c:	d1be      	bne.n	358c <juggle(LEDStruct&)+0x470>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    360e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3612:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3616:	4431      	add	r1, r6
    3618:	4408      	add	r0, r1
    361a:	2a00      	cmp	r2, #0
    361c:	f000 8185 	beq.w	392a <juggle(LEDStruct&)+0x80e>
    3620:	4619      	mov	r1, r3
    3622:	2295      	movs	r2, #149	; 0x95
    3624:	f7fc ff88 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3628:	e7be      	b.n	35a8 <juggle(LEDStruct&)+0x48c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    362a:	2b00      	cmp	r3, #0
    362c:	f000 80c7 	beq.w	37be <juggle(LEDStruct&)+0x6a2>
    3630:	4b9d      	ldr	r3, [pc, #628]	; (38a8 <juggle(LEDStruct&)+0x78c>)
    3632:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3636:	f8df 9274 	ldr.w	r9, [pc, #628]	; 38ac <juggle(LEDStruct&)+0x790>
    363a:	9303      	str	r3, [sp, #12]
    363c:	f8df b270 	ldr.w	fp, [pc, #624]	; 38b0 <juggle(LEDStruct&)+0x794>
    3640:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3644:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3648:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    364c:	e057      	b.n	36fe <juggle(LEDStruct&)+0x5e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    364e:	f8d9 3000 	ldr.w	r3, [r9]
    3652:	9306      	str	r3, [sp, #24]
	return ret;
    3654:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3656:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    365a:	fb0a f303 	mul.w	r3, sl, r3
    365e:	0209      	lsls	r1, r1, #8
    3660:	fb03 f301 	mul.w	r3, r3, r1
    3664:	0379      	lsls	r1, r7, #13
    3666:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    366a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    366c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    366e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3672:	d503      	bpl.n	367c <juggle(LEDStruct&)+0x560>
    3674:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3678:	3307      	adds	r3, #7
    367a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    367c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    367e:	9e03      	ldr	r6, [sp, #12]
    3680:	5c36      	ldrb	r6, [r6, r0]
    3682:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3686:	f3c3 0346 	ubfx	r3, r3, #1, #7
    368a:	fb06 0303 	mla	r3, r6, r3, r0
    368e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3690:	040e      	lsls	r6, r1, #16
    3692:	bf48      	it	mi
    3694:	425b      	negmi	r3, r3
    3696:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    369a:	b21e      	sxth	r6, r3
    369c:	a805      	add	r0, sp, #20
    369e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    36a2:	9100      	str	r1, [sp, #0]
    36a4:	4641      	mov	r1, r8
    36a6:	f007 fb95 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    36aa:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    36ae:	2296      	movs	r2, #150	; 0x96
    36b0:	b29b      	uxth	r3, r3
    36b2:	fb02 f303 	mul.w	r3, r2, r3
    36b6:	0c1b      	lsrs	r3, r3, #16
    36b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    36bc:	18e1      	adds	r1, r4, r3
    36be:	5ce2      	ldrb	r2, [r4, r3]
    36c0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    36c4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36c8:	54e2      	strb	r2, [r4, r3]
    36ca:	f89d 3015 	ldrb.w	r3, [sp, #21]
    36ce:	784a      	ldrb	r2, [r1, #1]
    36d0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36d4:	704a      	strb	r2, [r1, #1]
    36d6:	788b      	ldrb	r3, [r1, #2]
    36d8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    36dc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36e0:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36e2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    36e6:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36ea:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    36ee:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36f0:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36f2:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36f4:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36f6:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36f8:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36fc:	d95f      	bls.n	37be <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36fe:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3702:	2b00      	cmp	r3, #0
    3704:	d1a3      	bne.n	364e <juggle(LEDStruct&)+0x532>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3706:	f8d9 3000 	ldr.w	r3, [r9]
    370a:	9307      	str	r3, [sp, #28]
	return ret;
    370c:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    370e:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3712:	fb0a f101 	mul.w	r1, sl, r1
    3716:	021b      	lsls	r3, r3, #8
    3718:	fb03 f301 	mul.w	r3, r3, r1
    371c:	0379      	lsls	r1, r7, #13
    371e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    3722:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3724:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3726:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    372a:	d503      	bpl.n	3734 <juggle(LEDStruct&)+0x618>
    372c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3730:	3307      	adds	r3, #7
    3732:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3734:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3736:	9e03      	ldr	r6, [sp, #12]
    3738:	5c36      	ldrb	r6, [r6, r0]
    373a:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    373e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3742:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    3746:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3748:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    374a:	bf48      	it	mi
    374c:	425b      	negmi	r3, r3
    374e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3752:	b21e      	sxth	r6, r3
    3754:	a805      	add	r0, sp, #20
    3756:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    375a:	9100      	str	r1, [sp, #0]
    375c:	4641      	mov	r1, r8
    375e:	f007 fb39 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3762:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3766:	b29b      	uxth	r3, r3
    3768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    376c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3770:	0c1b      	lsrs	r3, r3, #16
    3772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3776:	18e1      	adds	r1, r4, r3
    3778:	5ce2      	ldrb	r2, [r4, r3]
    377a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    377e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3782:	54e2      	strb	r2, [r4, r3]
    3784:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3788:	784a      	ldrb	r2, [r1, #1]
    378a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    378e:	704a      	strb	r2, [r1, #1]
    3790:	788b      	ldrb	r3, [r1, #2]
    3792:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3796:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    379a:	708b      	strb	r3, [r1, #2]
    379c:	4622      	mov	r2, r4
    379e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37a0:	7819      	ldrb	r1, [r3, #0]
    37a2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    37a6:	7859      	ldrb	r1, [r3, #1]
    37a8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    37ac:	7899      	ldrb	r1, [r3, #2]
    37ae:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    37b2:	3303      	adds	r3, #3
    37b4:	42ab      	cmp	r3, r5
    37b6:	f1a2 0203 	sub.w	r2, r2, #3
    37ba:	d1f1      	bne.n	37a0 <juggle(LEDStruct&)+0x684>
    37bc:	e791      	b.n	36e2 <juggle(LEDStruct&)+0x5c6>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    37be:	b009      	add	sp, #36	; 0x24
    37c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    37c4:	4408      	add	r0, r1
    37c6:	224a      	movs	r2, #74	; 0x4a
    37c8:	4619      	mov	r1, r3
    37ca:	f7fc fe73 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    37ce:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    37d2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    37d6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    37da:	9100      	str	r1, [sp, #0]
    37dc:	4607      	mov	r7, r0
    37de:	4641      	mov	r1, r8
    37e0:	4650      	mov	r0, sl
    37e2:	f007 faf7 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    37e6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    37ea:	18e1      	adds	r1, r4, r3
    37ec:	5ce2      	ldrb	r2, [r4, r3]
    37ee:	f89d 001c 	ldrb.w	r0, [sp, #28]
    37f2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    37f6:	54e2      	strb	r2, [r4, r3]
    37f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    37fc:	784a      	ldrb	r2, [r1, #1]
    37fe:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3802:	704a      	strb	r2, [r1, #1]
    3804:	788b      	ldrb	r3, [r1, #2]
    3806:	f89d 201e 	ldrb.w	r2, [sp, #30]
    380a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    380e:	708b      	strb	r3, [r1, #2]
    3810:	4622      	mov	r2, r4
    3812:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3814:	7819      	ldrb	r1, [r3, #0]
    3816:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    381a:	7859      	ldrb	r1, [r3, #1]
    381c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3820:	7899      	ldrb	r1, [r3, #2]
    3822:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3826:	3303      	adds	r3, #3
    3828:	42ab      	cmp	r3, r5
    382a:	f1a2 0203 	sub.w	r2, r2, #3
    382e:	d1f1      	bne.n	3814 <juggle(LEDStruct&)+0x6f8>
    3830:	e6db      	b.n	35ea <juggle(LEDStruct&)+0x4ce>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3832:	224a      	movs	r2, #74	; 0x4a
    3834:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3838:	f7fc fe3c 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    383c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3840:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3844:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3848:	9100      	str	r1, [sp, #0]
    384a:	4607      	mov	r7, r0
    384c:	4641      	mov	r1, r8
    384e:	4650      	mov	r0, sl
    3850:	f007 fac0 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3854:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3858:	18e1      	adds	r1, r4, r3
    385a:	5ce2      	ldrb	r2, [r4, r3]
    385c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3860:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3864:	54e2      	strb	r2, [r4, r3]
    3866:	f89d 301d 	ldrb.w	r3, [sp, #29]
    386a:	784a      	ldrb	r2, [r1, #1]
    386c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3870:	704a      	strb	r2, [r1, #1]
    3872:	788b      	ldrb	r3, [r1, #2]
    3874:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3878:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    387c:	708b      	strb	r3, [r1, #2]
    387e:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3882:	4623      	mov	r3, r4
    3884:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3886:	7819      	ldrb	r1, [r3, #0]
    3888:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    388c:	7859      	ldrb	r1, [r3, #1]
    388e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3892:	7899      	ldrb	r1, [r3, #2]
    3894:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3898:	3303      	adds	r3, #3
    389a:	4283      	cmp	r3, r0
    389c:	f1a2 0203 	sub.w	r2, r2, #3
    38a0:	d1f1      	bne.n	3886 <juggle(LEDStruct&)+0x76a>
    38a2:	e638      	b.n	3516 <juggle(LEDStruct&)+0x3fa>
    38a4:	1fff9619 	.word	0x1fff9619
    38a8:	00010950 	.word	0x00010950
    38ac:	1fffa904 	.word	0x1fffa904
    38b0:	0000fd9c 	.word	0x0000fd9c
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    38b4:	fb06 f305 	mul.w	r3, r6, r5
    38b8:	224a      	movs	r2, #74	; 0x4a
    38ba:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    38be:	f7fc fe3b 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    38c2:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    38c6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    38ca:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    38ce:	9100      	str	r1, [sp, #0]
    38d0:	4607      	mov	r7, r0
    38d2:	4641      	mov	r1, r8
    38d4:	4650      	mov	r0, sl
    38d6:	f007 fa7d 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38da:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    38de:	18e1      	adds	r1, r4, r3
    38e0:	5ce2      	ldrb	r2, [r4, r3]
    38e2:	f89d 001c 	ldrb.w	r0, [sp, #28]
    38e6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    38ea:	54e2      	strb	r2, [r4, r3]
    38ec:	f89d 301d 	ldrb.w	r3, [sp, #29]
    38f0:	784a      	ldrb	r2, [r1, #1]
    38f2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    38f6:	704a      	strb	r2, [r1, #1]
    38f8:	788b      	ldrb	r3, [r1, #2]
    38fa:	f89d 201e 	ldrb.w	r2, [sp, #30]
    38fe:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3902:	708b      	strb	r3, [r1, #2]
    3904:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3908:	4623      	mov	r3, r4
    390a:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    390c:	7819      	ldrb	r1, [r3, #0]
    390e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3912:	7859      	ldrb	r1, [r3, #1]
    3914:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3918:	7899      	ldrb	r1, [r3, #2]
    391a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    391e:	3303      	adds	r3, #3
    3920:	4283      	cmp	r3, r0
    3922:	f1a2 0203 	sub.w	r2, r2, #3
    3926:	d1f1      	bne.n	390c <juggle(LEDStruct&)+0x7f0>
    3928:	e5f5      	b.n	3516 <juggle(LEDStruct&)+0x3fa>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    392a:	4613      	mov	r3, r2
    392c:	4611      	mov	r1, r2
    392e:	224a      	movs	r2, #74	; 0x4a
    3930:	f7fc fe02 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3934:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3938:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    393c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3940:	9100      	str	r1, [sp, #0]
    3942:	4607      	mov	r7, r0
    3944:	4641      	mov	r1, r8
    3946:	4650      	mov	r0, sl
    3948:	f007 fa44 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    394c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3950:	18e1      	adds	r1, r4, r3
    3952:	5ce2      	ldrb	r2, [r4, r3]
    3954:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3958:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    395c:	54e2      	strb	r2, [r4, r3]
    395e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3962:	784a      	ldrb	r2, [r1, #1]
    3964:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3968:	704a      	strb	r2, [r1, #1]
    396a:	788b      	ldrb	r3, [r1, #2]
    396c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3970:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3974:	708b      	strb	r3, [r1, #2]
    3976:	4622      	mov	r2, r4
    3978:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    397a:	7819      	ldrb	r1, [r3, #0]
    397c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3980:	7859      	ldrb	r1, [r3, #1]
    3982:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3986:	7899      	ldrb	r1, [r3, #2]
    3988:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    398c:	3303      	adds	r3, #3
    398e:	42ab      	cmp	r3, r5
    3990:	f1a2 0203 	sub.w	r2, r2, #3
    3994:	d1f1      	bne.n	397a <juggle(LEDStruct&)+0x85e>
    3996:	e628      	b.n	35ea <juggle(LEDStruct&)+0x4ce>

00003998 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    399c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    39a0:	b08d      	sub	sp, #52	; 0x34
    39a2:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    39a4:	2b00      	cmp	r3, #0
    39a6:	f040 809d 	bne.w	3ae4 <juggle_half(LEDStruct&)+0x14c>
    39aa:	4ec5      	ldr	r6, [pc, #788]	; (3cc0 <juggle_half(LEDStruct&)+0x328>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    39ac:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    39b0:	8833      	ldrh	r3, [r6, #0]
    39b2:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    39b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    39ba:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    39be:	3019      	adds	r0, #25
    39c0:	b280      	uxth	r0, r0
    39c2:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    39c6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    39ca:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    39ce:	3519      	adds	r5, #25
    39d0:	b2ad      	uxth	r5, r5
    39d2:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    39d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    39da:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39de:	3319      	adds	r3, #25
    39e0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    39e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    39e8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39ec:	3319      	adds	r3, #25
    39ee:	b29b      	uxth	r3, r3
    39f0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    39f8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    39fc:	3119      	adds	r1, #25
    39fe:	b289      	uxth	r1, r1
    3a00:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3a04:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3a08:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a0c:	3219      	adds	r2, #25
    3a0e:	b292      	uxth	r2, r2
    3a10:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3a14:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3a18:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3a1c:	f10e 0e19 	add.w	lr, lr, #25
    3a20:	fa1f fe8e 	uxth.w	lr, lr
    3a24:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3a28:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3a2c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3a30:	f10c 0c19 	add.w	ip, ip, #25
    3a34:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a38:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a3c:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3a40:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a44:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a48:	b2ff      	uxtb	r7, r7
    3a4a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3a4e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3a52:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a56:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3a5a:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3a5c:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a62:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a66:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a6a:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3a6e:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3a72:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a74:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a78:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a80:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3a84:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3a86:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3a8a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a8e:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a92:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a94:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a98:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3a9c:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3aa0:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3aa4:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3aa6:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3aaa:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3aae:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3ab2:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3ab6:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3ab8:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3aba:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3abe:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3ac2:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ac6:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3aca:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3ace:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3ad2:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3ad6:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3ada:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3ade:	2b00      	cmp	r3, #0
    3ae0:	f040 8290 	bne.w	4004 <juggle_half(LEDStruct&)+0x66c>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3ae4:	4b77      	ldr	r3, [pc, #476]	; (3cc4 <juggle_half(LEDStruct&)+0x32c>)
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	f040 8296 	bne.w	401a <juggle_half(LEDStruct&)+0x682>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3aee:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3af2:	b113      	cbz	r3, 3afa <juggle_half(LEDStruct&)+0x162>
    3af4:	2300      	movs	r3, #0
    3af6:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3afa:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3afe:	2196      	movs	r1, #150	; 0x96
    3b00:	4620      	mov	r0, r4
    3b02:	f007 f907 	bl	ad14 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3b06:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b0a:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3b0e:	2f00      	cmp	r7, #0
    3b10:	f040 8199 	bne.w	3e46 <juggle_half(LEDStruct&)+0x4ae>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b14:	2a00      	cmp	r2, #0
    3b16:	f000 8350 	beq.w	41ba <juggle_half(LEDStruct&)+0x822>
    3b1a:	4b6b      	ldr	r3, [pc, #428]	; (3cc8 <juggle_half(LEDStruct&)+0x330>)
    3b1c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3ccc <juggle_half(LEDStruct&)+0x334>
    3b20:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3cd0 <juggle_half(LEDStruct&)+0x338>
    3b24:	9303      	str	r3, [sp, #12]
    3b26:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3b2a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3b2e:	b2be      	uxth	r6, r7
    3b30:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b32:	9a03      	ldr	r2, [sp, #12]
    3b34:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3b38:	6812      	ldr	r2, [r2, #0]
    3b3a:	9207      	str	r2, [sp, #28]
    3b3c:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3b3e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3b40:	9a07      	ldr	r2, [sp, #28]
    3b42:	bf98      	it	ls
    3b44:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3b46:	f44f 718c 	mov.w	r1, #280	; 0x118
    3b4a:	bf98      	it	ls
    3b4c:	b29b      	uxthls	r3, r3
    3b4e:	fb01 f202 	mul.w	r2, r1, r2
    3b52:	fb03 f302 	mul.w	r3, r3, r2
    3b56:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3b5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3b5e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b60:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b62:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b66:	d503      	bpl.n	3b70 <juggle_half(LEDStruct&)+0x1d8>
    3b68:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3b6c:	3207      	adds	r2, #7
    3b6e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b70:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b72:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3b76:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3b7a:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3b7e:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3b82:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b84:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3b86:	bf48      	it	mi
    3b88:	4255      	negmi	r5, r2
    3b8a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b8e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b92:	bf54      	ite	pl
    3b94:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3b96:	b22d      	sxthmi	r5, r5
    3b98:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b9c:	9100      	str	r1, [sp, #0]
    3b9e:	4648      	mov	r0, r9
    3ba0:	4641      	mov	r1, r8
    3ba2:	f007 f917 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3ba6:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3baa:	2226      	movs	r2, #38	; 0x26
    3bac:	b29b      	uxth	r3, r3
    3bae:	fb02 f303 	mul.w	r3, r2, r3
    3bb2:	0c1b      	lsrs	r3, r3, #16
    3bb4:	3325      	adds	r3, #37	; 0x25
    3bb6:	b29b      	uxth	r3, r3
    3bb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bbc:	18e1      	adds	r1, r4, r3
    3bbe:	5ce2      	ldrb	r2, [r4, r3]
    3bc0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3bc4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3bc8:	54e2      	strb	r2, [r4, r3]
    3bca:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3bce:	784a      	ldrb	r2, [r1, #1]
    3bd0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3bd4:	704a      	strb	r2, [r1, #1]
    3bd6:	788b      	ldrb	r3, [r1, #2]
    3bd8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3bdc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3be0:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3be2:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3be6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3bea:	4416      	add	r6, r2
    3bec:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bee:	9b03      	ldr	r3, [sp, #12]
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	9306      	str	r3, [sp, #24]
    3bf4:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3bf6:	9a06      	ldr	r2, [sp, #24]
    3bf8:	bf98      	it	ls
    3bfa:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3bfc:	f44f 738c 	mov.w	r3, #280	; 0x118
    3c00:	bf98      	it	ls
    3c02:	b2b6      	uxthls	r6, r6
    3c04:	fb03 f202 	mul.w	r2, r3, r2
    3c08:	fb06 f202 	mul.w	r2, r6, r2
    3c0c:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3c10:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c14:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3c16:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c1a:	d503      	bpl.n	3c24 <juggle_half(LEDStruct&)+0x28c>
    3c1c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3c20:	3307      	adds	r3, #7
    3c22:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c24:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c26:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3c2a:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3c2e:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3c32:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3c36:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c38:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3c3a:	bf48      	it	mi
    3c3c:	425b      	negmi	r3, r3
    3c3e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c42:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3c46:	b21d      	sxth	r5, r3
    3c48:	4648      	mov	r0, r9
    3c4a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c4e:	9100      	str	r1, [sp, #0]
    3c50:	4641      	mov	r1, r8
    3c52:	f007 f8bf 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c56:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c5a:	2226      	movs	r2, #38	; 0x26
    3c5c:	b29b      	uxth	r3, r3
    3c5e:	fb02 f303 	mul.w	r3, r2, r3
    3c62:	0c1b      	lsrs	r3, r3, #16
    3c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c68:	18e1      	adds	r1, r4, r3
    3c6a:	5ce2      	ldrb	r2, [r4, r3]
    3c6c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3c70:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3c74:	54e2      	strb	r2, [r4, r3]
    3c76:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3c7a:	784a      	ldrb	r2, [r1, #1]
    3c7c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3c80:	704a      	strb	r2, [r1, #1]
    3c82:	788b      	ldrb	r3, [r1, #2]
    3c84:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3c88:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3c8c:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c8e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3c92:	3701      	adds	r7, #1
    3c94:	b2ff      	uxtb	r7, r7
    3c96:	42bb      	cmp	r3, r7
    3c98:	461a      	mov	r2, r3
    3c9a:	f63f af48 	bhi.w	3b2e <juggle_half(LEDStruct&)+0x196>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3c9e:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3ca2:	2a00      	cmp	r2, #0
    3ca4:	f000 819a 	beq.w	3fdc <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    3ca8:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3cac:	2f00      	cmp	r7, #0
    3cae:	f040 81c1 	bne.w	4034 <juggle_half(LEDStruct&)+0x69c>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3cb2:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	f000 80c2 	beq.w	3e40 <juggle_half(LEDStruct&)+0x4a8>
    3cbc:	e00a      	b.n	3cd4 <juggle_half(LEDStruct&)+0x33c>
    3cbe:	bf00      	nop
    3cc0:	1fff8788 	.word	0x1fff8788
    3cc4:	1fff9619 	.word	0x1fff9619
    3cc8:	1fffa904 	.word	0x1fffa904
    3ccc:	00010950 	.word	0x00010950
    3cd0:	0000fd9c 	.word	0x0000fd9c
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3cd4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3cd8:	3301      	adds	r3, #1
    3cda:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cdc:	9a03      	ldr	r2, [sp, #12]
    3cde:	b2be      	uxth	r6, r7
    3ce0:	6812      	ldr	r2, [r2, #0]
    3ce2:	920b      	str	r2, [sp, #44]	; 0x2c
    3ce4:	4433      	add	r3, r6
    3ce6:	b29b      	uxth	r3, r3
    3ce8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3cec:	bf9c      	itt	ls
    3cee:	021b      	lslls	r3, r3, #8
    3cf0:	b29b      	uxthls	r3, r3
    3cf2:	fb09 f202 	mul.w	r2, r9, r2
    3cf6:	fb03 f302 	mul.w	r3, r3, r2
    3cfa:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cfe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3d02:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d04:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d06:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d0a:	d503      	bpl.n	3d14 <juggle_half(LEDStruct&)+0x37c>
    3d0c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3d10:	3207      	adds	r2, #7
    3d12:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d14:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d16:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3d1a:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3d1e:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3d22:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3d26:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d28:	b2ad      	uxth	r5, r5
    3d2a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3d2e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3d32:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d36:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3d38:	bf48      	it	mi
    3d3a:	426d      	negmi	r5, r5
    3d3c:	4641      	mov	r1, r8
    3d3e:	a809      	add	r0, sp, #36	; 0x24
    3d40:	b22d      	sxth	r5, r5
    3d42:	f007 f847 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d46:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d4a:	2226      	movs	r2, #38	; 0x26
    3d4c:	b29b      	uxth	r3, r3
    3d4e:	fb02 f303 	mul.w	r3, r2, r3
    3d52:	0c1b      	lsrs	r3, r3, #16
    3d54:	3370      	adds	r3, #112	; 0x70
    3d56:	b29b      	uxth	r3, r3
    3d58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d5c:	18e1      	adds	r1, r4, r3
    3d5e:	5ce2      	ldrb	r2, [r4, r3]
    3d60:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3d64:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d68:	54e2      	strb	r2, [r4, r3]
    3d6a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3d6e:	784a      	ldrb	r2, [r1, #1]
    3d70:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d74:	704a      	strb	r2, [r1, #1]
    3d76:	788b      	ldrb	r3, [r1, #2]
    3d78:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3d7c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d80:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d82:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3d86:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d8a:	4413      	add	r3, r2
    3d8c:	3301      	adds	r3, #1
    3d8e:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d90:	9b03      	ldr	r3, [sp, #12]
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	930a      	str	r3, [sp, #40]	; 0x28
    3d96:	b2b6      	uxth	r6, r6
    3d98:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3d9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3d9c:	bf9c      	itt	ls
    3d9e:	0236      	lslls	r6, r6, #8
    3da0:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3da2:	fb09 f202 	mul.w	r2, r9, r2
    3da6:	fb06 f202 	mul.w	r2, r6, r2
    3daa:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3dae:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3db2:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3db4:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3db8:	d503      	bpl.n	3dc2 <juggle_half(LEDStruct&)+0x42a>
    3dba:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3dbe:	3307      	adds	r3, #7
    3dc0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3dc2:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3dc4:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3dc8:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3dcc:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3dd0:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3dd4:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3dd6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3dd8:	bf48      	it	mi
    3dda:	425b      	negmi	r3, r3
    3ddc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3de0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3de4:	b21d      	sxth	r5, r3
    3de6:	a809      	add	r0, sp, #36	; 0x24
    3de8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3dec:	9100      	str	r1, [sp, #0]
    3dee:	4641      	mov	r1, r8
    3df0:	f006 fff0 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3df4:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3df8:	b29b      	uxth	r3, r3
    3dfa:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3dfe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e02:	0c1b      	lsrs	r3, r3, #16
    3e04:	334b      	adds	r3, #75	; 0x4b
    3e06:	b29b      	uxth	r3, r3
    3e08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e0c:	18e1      	adds	r1, r4, r3
    3e0e:	5ce2      	ldrb	r2, [r4, r3]
    3e10:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3e14:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e18:	54e2      	strb	r2, [r4, r3]
    3e1a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3e1e:	784a      	ldrb	r2, [r1, #1]
    3e20:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3e24:	704a      	strb	r2, [r1, #1]
    3e26:	788b      	ldrb	r3, [r1, #2]
    3e28:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3e2c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e30:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e32:	3701      	adds	r7, #1
    3e34:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e38:	b2ff      	uxtb	r7, r7
    3e3a:	42bb      	cmp	r3, r7
    3e3c:	f63f af4a 	bhi.w	3cd4 <juggle_half(LEDStruct&)+0x33c>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3e40:	b00d      	add	sp, #52	; 0x34
    3e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e46:	2a00      	cmp	r2, #0
    3e48:	f000 81b7 	beq.w	41ba <juggle_half(LEDStruct&)+0x822>
    3e4c:	4b75      	ldr	r3, [pc, #468]	; (4024 <juggle_half(LEDStruct&)+0x68c>)
    3e4e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 402c <juggle_half(LEDStruct&)+0x694>
    3e52:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 4030 <juggle_half(LEDStruct&)+0x698>
    3e56:	9303      	str	r3, [sp, #12]
    3e58:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3e5c:	2700      	movs	r7, #0
    3e5e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e62:	b2be      	uxth	r6, r7
    3e64:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e66:	9a03      	ldr	r2, [sp, #12]
    3e68:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3e6c:	6812      	ldr	r2, [r2, #0]
    3e6e:	9205      	str	r2, [sp, #20]
    3e70:	440b      	add	r3, r1
    3e72:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e74:	9a05      	ldr	r2, [sp, #20]
    3e76:	bf98      	it	ls
    3e78:	021b      	lslls	r3, r3, #8
    3e7a:	f44f 718c 	mov.w	r1, #280	; 0x118
    3e7e:	bf98      	it	ls
    3e80:	b29b      	uxthls	r3, r3
    3e82:	fb01 f202 	mul.w	r2, r1, r2
    3e86:	fb03 f302 	mul.w	r3, r3, r2
    3e8a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e92:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e94:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e98:	d503      	bpl.n	3ea2 <juggle_half(LEDStruct&)+0x50a>
    3e9a:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e9e:	3207      	adds	r2, #7
    3ea0:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ea2:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ea4:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3ea8:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3eac:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3eb0:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3eb4:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3eb6:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3eb8:	bf48      	it	mi
    3eba:	4255      	negmi	r5, r2
    3ebc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3ec0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ec4:	bf54      	ite	pl
    3ec6:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3ec8:	b22d      	sxthmi	r5, r5
    3eca:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ece:	9100      	str	r1, [sp, #0]
    3ed0:	4648      	mov	r0, r9
    3ed2:	4641      	mov	r1, r8
    3ed4:	f006 ff7e 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3ed8:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3edc:	2226      	movs	r2, #38	; 0x26
    3ede:	b29b      	uxth	r3, r3
    3ee0:	fb02 f303 	mul.w	r3, r2, r3
    3ee4:	0c1b      	lsrs	r3, r3, #16
    3ee6:	3325      	adds	r3, #37	; 0x25
    3ee8:	b29b      	uxth	r3, r3
    3eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3eee:	18e1      	adds	r1, r4, r3
    3ef0:	5ce2      	ldrb	r2, [r4, r3]
    3ef2:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3ef6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3efa:	54e2      	strb	r2, [r4, r3]
    3efc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3f00:	784a      	ldrb	r2, [r1, #1]
    3f02:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f06:	704a      	strb	r2, [r1, #1]
    3f08:	788b      	ldrb	r3, [r1, #2]
    3f0a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3f0e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f12:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3f14:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3f18:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f1c:	4416      	add	r6, r2
    3f1e:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f20:	9b03      	ldr	r3, [sp, #12]
    3f22:	681b      	ldr	r3, [r3, #0]
    3f24:	9304      	str	r3, [sp, #16]
    3f26:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3f28:	9b04      	ldr	r3, [sp, #16]
    3f2a:	bf98      	it	ls
    3f2c:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3f2e:	f44f 728c 	mov.w	r2, #280	; 0x118
    3f32:	bf98      	it	ls
    3f34:	b2b6      	uxthls	r6, r6
    3f36:	fb02 f303 	mul.w	r3, r2, r3
    3f3a:	fb06 f303 	mul.w	r3, r6, r3
    3f3e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3f46:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f48:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f4a:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f4e:	d503      	bpl.n	3f58 <juggle_half(LEDStruct&)+0x5c0>
    3f50:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3f54:	3207      	adds	r2, #7
    3f56:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f58:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f5a:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3f5e:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3f62:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3f66:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3f6a:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f6c:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3f6e:	bf48      	it	mi
    3f70:	4252      	negmi	r2, r2
    3f72:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3f76:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3f7a:	b215      	sxth	r5, r2
    3f7c:	4648      	mov	r0, r9
    3f7e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3f82:	9100      	str	r1, [sp, #0]
    3f84:	4641      	mov	r1, r8
    3f86:	f006 ff25 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f8a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3f8e:	2226      	movs	r2, #38	; 0x26
    3f90:	b29b      	uxth	r3, r3
    3f92:	fb02 f303 	mul.w	r3, r2, r3
    3f96:	0c1b      	lsrs	r3, r3, #16
    3f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f9c:	18e1      	adds	r1, r4, r3
    3f9e:	5ce2      	ldrb	r2, [r4, r3]
    3fa0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3fa4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3fa8:	54e2      	strb	r2, [r4, r3]
    3faa:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3fae:	784a      	ldrb	r2, [r1, #1]
    3fb0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3fb4:	704a      	strb	r2, [r1, #1]
    3fb6:	788b      	ldrb	r3, [r1, #2]
    3fb8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3fbc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3fc0:	708b      	strb	r3, [r1, #2]

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3fc2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3fc6:	3701      	adds	r7, #1
    3fc8:	b2ff      	uxtb	r7, r7
    3fca:	42bb      	cmp	r3, r7
    3fcc:	461a      	mov	r2, r3
    3fce:	f63f af48 	bhi.w	3e62 <juggle_half(LEDStruct&)+0x4ca>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3fd2:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3fd6:	2a00      	cmp	r2, #0
    3fd8:	f47f ae66 	bne.w	3ca8 <juggle_half(LEDStruct&)+0x310>
    3fdc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3fe0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fe2:	7822      	ldrb	r2, [r4, #0]
    3fe4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3fe8:	7862      	ldrb	r2, [r4, #1]
    3fea:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3fee:	78a2      	ldrb	r2, [r4, #2]
    3ff0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3ff4:	3403      	adds	r4, #3
    3ff6:	42a1      	cmp	r1, r4
    3ff8:	f1a3 0303 	sub.w	r3, r3, #3
    3ffc:	d1f1      	bne.n	3fe2 <juggle_half(LEDStruct&)+0x64a>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3ffe:	b00d      	add	sp, #52	; 0x34
    4000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    4004:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4008:	fa02 f300 	lsl.w	r3, r2, r0
    400c:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4010:	4b05      	ldr	r3, [pc, #20]	; (4028 <juggle_half(LEDStruct&)+0x690>)
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	2b00      	cmp	r3, #0
    4016:	f43f ad6a 	beq.w	3aee <juggle_half(LEDStruct&)+0x156>
    401a:	4620      	mov	r0, r4
    401c:	f7ff f82e 	bl	307c <juggle_update(LEDStruct&)>
    4020:	e565      	b.n	3aee <juggle_half(LEDStruct&)+0x156>
    4022:	bf00      	nop
    4024:	1fffa904 	.word	0x1fffa904
    4028:	1fff9619 	.word	0x1fff9619
    402c:	00010950 	.word	0x00010950
    4030:	0000fd9c 	.word	0x0000fd9c
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4034:	2b00      	cmp	r3, #0
    4036:	f43f af03 	beq.w	3e40 <juggle_half(LEDStruct&)+0x4a8>
    403a:	2700      	movs	r7, #0
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    403c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4040:	3301      	adds	r3, #1
    4042:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4044:	9a03      	ldr	r2, [sp, #12]
    4046:	b2be      	uxth	r6, r7
    4048:	6812      	ldr	r2, [r2, #0]
    404a:	9209      	str	r2, [sp, #36]	; 0x24
    404c:	4433      	add	r3, r6
    404e:	b29b      	uxth	r3, r3
    4050:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4052:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4054:	bf98      	it	ls
    4056:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4058:	f44f 718c 	mov.w	r1, #280	; 0x118
    405c:	bf98      	it	ls
    405e:	b29b      	uxthls	r3, r3
    4060:	fb01 f202 	mul.w	r2, r1, r2
    4064:	fb03 f302 	mul.w	r3, r3, r2
    4068:	f3c3 430e 	ubfx	r3, r3, #16, #15
    406c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4070:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4072:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4076:	d503      	bpl.n	4080 <juggle_half(LEDStruct&)+0x6e8>
    4078:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    407c:	3207      	adds	r2, #7
    407e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4080:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4082:	f3c2 0246 	ubfx	r2, r2, #1, #7
    4086:	f81b 5001 	ldrb.w	r5, [fp, r1]
    408a:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    408e:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4092:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4094:	b2ad      	uxth	r5, r5
    4096:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    409a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    409e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    40a2:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    40a4:	bf48      	it	mi
    40a6:	426d      	negmi	r5, r5
    40a8:	4641      	mov	r1, r8
    40aa:	4648      	mov	r0, r9
    40ac:	b22d      	sxth	r5, r5
    40ae:	f006 fe91 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    40b2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    40b6:	2226      	movs	r2, #38	; 0x26
    40b8:	b29b      	uxth	r3, r3
    40ba:	fb02 f303 	mul.w	r3, r2, r3
    40be:	0c1b      	lsrs	r3, r3, #16
    40c0:	3370      	adds	r3, #112	; 0x70
    40c2:	b29b      	uxth	r3, r3
    40c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40c8:	18e1      	adds	r1, r4, r3
    40ca:	5ce2      	ldrb	r2, [r4, r3]
    40cc:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    40d0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    40d4:	54e2      	strb	r2, [r4, r3]
    40d6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    40da:	784a      	ldrb	r2, [r1, #1]
    40dc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40e0:	704a      	strb	r2, [r1, #1]
    40e2:	788b      	ldrb	r3, [r1, #2]
    40e4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    40e8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40ec:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    40ee:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    40f2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    40f6:	4413      	add	r3, r2
    40f8:	3301      	adds	r3, #1
    40fa:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40fc:	9b03      	ldr	r3, [sp, #12]
    40fe:	681b      	ldr	r3, [r3, #0]
    4100:	9308      	str	r3, [sp, #32]
    4102:	b2b6      	uxth	r6, r6
    4104:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    4106:	9b08      	ldr	r3, [sp, #32]
    4108:	bf98      	it	ls
    410a:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    410c:	f44f 728c 	mov.w	r2, #280	; 0x118
    4110:	bf98      	it	ls
    4112:	b2b6      	uxthls	r6, r6
    4114:	fb02 f303 	mul.w	r3, r2, r3
    4118:	fb06 f303 	mul.w	r3, r6, r3
    411c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4120:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4124:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4126:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4128:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    412c:	d503      	bpl.n	4136 <juggle_half(LEDStruct&)+0x79e>
    412e:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    4132:	3207      	adds	r2, #7
    4134:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4136:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4138:	f3c2 0246 	ubfx	r2, r2, #1, #7
    413c:	f81b 5001 	ldrb.w	r5, [fp, r1]
    4140:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    4144:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4148:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    414a:	b2ad      	uxth	r5, r5
    414c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4150:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4154:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4158:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    415a:	bf48      	it	mi
    415c:	426d      	negmi	r5, r5
    415e:	4641      	mov	r1, r8
    4160:	4648      	mov	r0, r9
    4162:	b22d      	sxth	r5, r5
    4164:	f006 fe36 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4168:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    416c:	b29b      	uxth	r3, r3
    416e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    4172:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4176:	0c1b      	lsrs	r3, r3, #16
    4178:	334b      	adds	r3, #75	; 0x4b
    417a:	b29b      	uxth	r3, r3
    417c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4180:	18e1      	adds	r1, r4, r3
    4182:	5ce2      	ldrb	r2, [r4, r3]
    4184:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4188:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    418c:	54e2      	strb	r2, [r4, r3]
    418e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4192:	784a      	ldrb	r2, [r1, #1]
    4194:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4198:	704a      	strb	r2, [r1, #1]
    419a:	788b      	ldrb	r3, [r1, #2]
    419c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    41a0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41a4:	708b      	strb	r3, [r1, #2]
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    41a6:	3701      	adds	r7, #1
    41a8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    41ac:	b2ff      	uxtb	r7, r7
    41ae:	42bb      	cmp	r3, r7
    41b0:	f63f af44 	bhi.w	403c <juggle_half(LEDStruct&)+0x6a4>
		}
	}
	else {
		strip_sync(leds);
	}
}
    41b4:	b00d      	add	sp, #52	; 0x34
    41b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    41ba:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    41be:	2b00      	cmp	r3, #0
    41c0:	f43f af0c 	beq.w	3fdc <juggle_half(LEDStruct&)+0x644>
    41c4:	e63c      	b.n	3e40 <juggle_half(LEDStruct&)+0x4a8>
    41c6:	bf00      	nop

000041c8 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    41c8:	4b1a      	ldr	r3, [pc, #104]	; (4234 <rainbow_update(LEDStruct&)+0x6c>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    41ca:	4a1b      	ldr	r2, [pc, #108]	; (4238 <rainbow_update(LEDStruct&)+0x70>)
	switch (update_var) {
    41cc:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    41ce:	2100      	movs	r1, #0
    41d0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    41d2:	2b04      	cmp	r3, #4
    41d4:	d808      	bhi.n	41e8 <rainbow_update(LEDStruct&)+0x20>
    41d6:	e8df f003 	tbb	[pc, r3]
    41da:	1e0f      	.short	0x1e0f
    41dc:	2703      	.short	0x2703
    41de:	09          	.byte	0x09
    41df:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    41e0:	4b16      	ldr	r3, [pc, #88]	; (423c <rainbow_update(LEDStruct&)+0x74>)
    41e2:	881b      	ldrh	r3, [r3, #0]
    41e4:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    41e8:	f7fd bff8 	b.w	21dc <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    41ec:	4b13      	ldr	r3, [pc, #76]	; (423c <rainbow_update(LEDStruct&)+0x74>)
    41ee:	881b      	ldrh	r3, [r3, #0]
    41f0:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		default:	break;
	}
	LEDDebug(leds);
    41f4:	f7fd bff2 	b.w	21dc <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    41f8:	4b10      	ldr	r3, [pc, #64]	; (423c <rainbow_update(LEDStruct&)+0x74>)
    41fa:	881b      	ldrh	r3, [r3, #0]
    41fc:	2b00      	cmp	r3, #0
    41fe:	bf14      	ite	ne
    4200:	2301      	movne	r3, #1
    4202:	2300      	moveq	r3, #0
    4204:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4208:	bf14      	ite	ne
    420a:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    420c:	234b      	moveq	r3, #75	; 0x4b
    420e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4212:	f7fd bfe3 	b.w	21dc <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    4216:	4b09      	ldr	r3, [pc, #36]	; (423c <rainbow_update(LEDStruct&)+0x74>)
    4218:	881b      	ldrh	r3, [r3, #0]
    421a:	3300      	adds	r3, #0
    421c:	bf18      	it	ne
    421e:	2301      	movne	r3, #1
    4220:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4224:	f7fd bfda 	b.w	21dc <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    4228:	4b04      	ldr	r3, [pc, #16]	; (423c <rainbow_update(LEDStruct&)+0x74>)
    422a:	881b      	ldrh	r3, [r3, #0]
    422c:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4230:	f7fd bfd4 	b.w	21dc <LEDDebug(LEDStruct&)>
    4234:	1fff9e66 	.word	0x1fff9e66
    4238:	1fff9619 	.word	0x1fff9619
    423c:	1fff9e64 	.word	0x1fff9e64

00004240 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4240:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4248:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    424a:	2b00      	cmp	r3, #0
    424c:	d15c      	bne.n	4308 <rainbow_march(LEDStruct&)+0xc8>
    424e:	4869      	ldr	r0, [pc, #420]	; (43f4 <rainbow_march(LEDStruct&)+0x1b4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4250:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4254:	8803      	ldrh	r3, [r0, #0]
    4256:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    425a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    425e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4262:	3319      	adds	r3, #25
    4264:	b29b      	uxth	r3, r3
    4266:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    426a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    426e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4272:	3219      	adds	r2, #25
    4274:	b292      	uxth	r2, r2
    4276:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    427a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    427e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4282:	3119      	adds	r1, #25
    4284:	b289      	uxth	r1, r1
    4286:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    428a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    428e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4292:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4296:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4298:	3619      	adds	r6, #25
    429a:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    429c:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42a0:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42a4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    42a8:	b2ed      	uxtb	r5, r5
    42aa:	121b      	asrs	r3, r3, #8
    42ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    42b0:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    42b2:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42b6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42ba:	11ed      	asrs	r5, r5, #7
    42bc:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    42be:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42c2:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42c4:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    42c6:	2606      	movs	r6, #6
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    42c8:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    42ca:	4573      	cmp	r3, lr
    42cc:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    42ce:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    42d2:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    42d6:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    42da:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    42de:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    42e2:	f000 8085 	beq.w	43f0 <rainbow_march(LEDStruct&)+0x1b0>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42e6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42ea:	b2d2      	uxtb	r2, r2
    42ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    42f0:	1212      	asrs	r2, r2, #8
    42f2:	4472      	add	r2, lr
    42f4:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    42f6:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    42fa:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    42fe:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    4302:	4620      	mov	r0, r4
    4304:	f7fd ff6a 	bl	21dc <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4308:	4b3b      	ldr	r3, [pc, #236]	; (43f8 <rainbow_march(LEDStruct&)+0x1b8>)
    430a:	781b      	ldrb	r3, [r3, #0]
    430c:	2b00      	cmp	r3, #0
    430e:	d16b      	bne.n	43e8 <rainbow_march(LEDStruct&)+0x1a8>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4310:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4314:	bb43      	cbnz	r3, 4368 <rainbow_march(LEDStruct&)+0x128>
    4316:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    431a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    431e:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    4320:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4324:	b2d2      	uxtb	r2, r2
    4326:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    432a:	bb4b      	cbnz	r3, 4380 <rainbow_march(LEDStruct&)+0x140>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    432c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4330:	2b00      	cmp	r3, #0
    4332:	d151      	bne.n	43d8 <rainbow_march(LEDStruct&)+0x198>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4334:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4338:	214b      	movs	r1, #75	; 0x4b
    433a:	4620      	mov	r0, r4
    433c:	f006 fc38 	bl	abb0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4340:	4620      	mov	r0, r4
    4342:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4346:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4348:	7802      	ldrb	r2, [r0, #0]
    434a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    434e:	7842      	ldrb	r2, [r0, #1]
    4350:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4354:	7882      	ldrb	r2, [r0, #2]
    4356:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    435a:	3003      	adds	r0, #3
    435c:	4288      	cmp	r0, r1
    435e:	f1a3 0303 	sub.w	r3, r3, #3
    4362:	d1f1      	bne.n	4348 <rainbow_march(LEDStruct&)+0x108>
    4364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4368:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    436c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4370:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    4372:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4376:	b2d2      	uxtb	r2, r2
    4378:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    437c:	2b00      	cmp	r3, #0
    437e:	d0d5      	beq.n	432c <rainbow_march(LEDStruct&)+0xec>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4380:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4384:	2125      	movs	r1, #37	; 0x25
    4386:	4620      	mov	r0, r4
    4388:	f006 fc12 	bl	abb0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    438c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4390:	4623      	mov	r3, r4
    4392:	4621      	mov	r1, r4
    4394:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4396:	7810      	ldrb	r0, [r2, #0]
    4398:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    439c:	7850      	ldrb	r0, [r2, #1]
    439e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    43a2:	7890      	ldrb	r0, [r2, #2]
    43a4:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    43a8:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    43aa:	42aa      	cmp	r2, r5
    43ac:	f1a1 0103 	sub.w	r1, r1, #3
    43b0:	d1f1      	bne.n	4396 <rainbow_march(LEDStruct&)+0x156>
    43b2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    43b6:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    43b8:	7802      	ldrb	r2, [r0, #0]
    43ba:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    43be:	7842      	ldrb	r2, [r0, #1]
    43c0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    43c4:	7882      	ldrb	r2, [r0, #2]
    43c6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    43ca:	3003      	adds	r0, #3
    43cc:	4288      	cmp	r0, r1
    43ce:	f1a3 0303 	sub.w	r3, r3, #3
    43d2:	d1f1      	bne.n	43b8 <rainbow_march(LEDStruct&)+0x178>
    43d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    43d8:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    43dc:	4620      	mov	r0, r4
    43de:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    43e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    43e4:	f006 bbe4 	b.w	abb0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    43e8:	4620      	mov	r0, r4
    43ea:	f7ff feed 	bl	41c8 <rainbow_update(LEDStruct&)>
    43ee:	e78f      	b.n	4310 <rainbow_march(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43f0:	461a      	mov	r2, r3
    43f2:	e780      	b.n	42f6 <rainbow_march(LEDStruct&)+0xb6>
    43f4:	1fff8788 	.word	0x1fff8788
    43f8:	1fff9619 	.word	0x1fff9619

000043fc <rainbow_march_beat(LEDStruct&)>:
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    43fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    43fe:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    4402:	b083      	sub	sp, #12
    4404:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4406:	2b00      	cmp	r3, #0
    4408:	d15c      	bne.n	44c4 <rainbow_march_beat(LEDStruct&)+0xc8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    440a:	489e      	ldr	r0, [pc, #632]	; (4684 <rainbow_march_beat(LEDStruct&)+0x288>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    440c:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4410:	8803      	ldrh	r3, [r0, #0]
    4412:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4416:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    441a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    441e:	3319      	adds	r3, #25
    4420:	b29b      	uxth	r3, r3
    4422:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4426:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    442a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    442e:	3219      	adds	r2, #25
    4430:	b292      	uxth	r2, r2
    4432:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4436:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    443a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    443e:	3119      	adds	r1, #25
    4440:	b289      	uxth	r1, r1
    4442:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4446:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    444a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    444e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4452:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4454:	3619      	adds	r6, #25
    4456:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4458:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    445c:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4460:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4464:	b2ed      	uxtb	r5, r5
    4466:	121b      	asrs	r3, r3, #8
    4468:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    446c:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    446e:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4472:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4476:	11ed      	asrs	r5, r5, #7
    4478:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    447a:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    447e:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4480:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4482:	2606      	movs	r6, #6
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4484:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4486:	4573      	cmp	r3, lr
    4488:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    448a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    448e:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    4492:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4496:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    449a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    449e:	f000 80ef 	beq.w	4680 <rainbow_march_beat(LEDStruct&)+0x284>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    44a2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    44a6:	b2d2      	uxtb	r2, r2
    44a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    44ac:	1212      	asrs	r2, r2, #8
    44ae:	4472      	add	r2, lr
    44b0:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    44b2:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    44b6:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    44ba:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    44be:	4620      	mov	r0, r4
    44c0:	f7fd fe8c 	bl	21dc <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    44c4:	4b70      	ldr	r3, [pc, #448]	; (4688 <rainbow_march_beat(LEDStruct&)+0x28c>)
    44c6:	781b      	ldrb	r3, [r3, #0]
    44c8:	2b00      	cmp	r3, #0
    44ca:	f040 80cd 	bne.w	4668 <rainbow_march_beat(LEDStruct&)+0x26c>

	if (leds.this_dir == 0) {
    44ce:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44d2:	4a6e      	ldr	r2, [pc, #440]	; (468c <rainbow_march_beat(LEDStruct&)+0x290>)
    44d4:	2b00      	cmp	r3, #0
    44d6:	d163      	bne.n	45a0 <rainbow_march_beat(LEDStruct&)+0x1a4>
    44d8:	6812      	ldr	r2, [r2, #0]
    44da:	9200      	str	r2, [sp, #0]
	return ret;
    44dc:	9900      	ldr	r1, [sp, #0]
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10);
    44de:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    44e2:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    44e6:	f44f 728c 	mov.w	r2, #280	; 0x118
    44ea:	fb02 f201 	mul.w	r2, r2, r1
    44ee:	021b      	lsls	r3, r3, #8
    44f0:	fb03 f302 	mul.w	r3, r3, r2
    44f4:	0e1b      	lsrs	r3, r3, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    44f6:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    44f8:	064e      	lsls	r6, r1, #25
    44fa:	f100 80ad 	bmi.w	4658 <rainbow_march_beat(LEDStruct&)+0x25c>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    44fe:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4502:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    4506:	4962      	ldr	r1, [pc, #392]	; (4690 <rainbow_march_beat(LEDStruct&)+0x294>)
    4508:	1112      	asrs	r2, r2, #4
    450a:	0052      	lsls	r2, r2, #1
    450c:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    450e:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4510:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4512:	fb12 f000 	smulbb	r0, r2, r0
    4516:	eb01 1120 	add.w	r1, r1, r0, asr #4
    451a:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    451c:	0618      	lsls	r0, r3, #24
    451e:	bf48      	it	mi
    4520:	4249      	negmi	r1, r1
    4522:	b249      	sxtb	r1, r1

    y += 128;
    4524:	3980      	subs	r1, #128	; 0x80
    4526:	b2c9      	uxtb	r1, r1
    4528:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    452c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    4530:	442b      	add	r3, r5
    4532:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4536:	eb03 2222 	add.w	r2, r3, r2, asr #8
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10));
	}

	if (!leds.rainbow_split) {
    453a:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10);
    453e:	b2d2      	uxtb	r2, r2
    4540:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10));
	}

	if (!leds.rainbow_split) {
    4544:	2b00      	cmp	r3, #0
    4546:	d062      	beq.n	460e <rainbow_march_beat(LEDStruct&)+0x212>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4548:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    454c:	2125      	movs	r1, #37	; 0x25
    454e:	4620      	mov	r0, r4
    4550:	f006 fb2e 	bl	abb0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4554:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4558:	4623      	mov	r3, r4
    455a:	4621      	mov	r1, r4
    455c:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    455e:	7810      	ldrb	r0, [r2, #0]
    4560:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    4564:	7850      	ldrb	r0, [r2, #1]
    4566:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    456a:	7890      	ldrb	r0, [r2, #2]
    456c:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4570:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    4572:	42aa      	cmp	r2, r5
    4574:	f1a1 0103 	sub.w	r1, r1, #3
    4578:	d1f1      	bne.n	455e <rainbow_march_beat(LEDStruct&)+0x162>
    457a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    457e:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4580:	781a      	ldrb	r2, [r3, #0]
    4582:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4586:	785a      	ldrb	r2, [r3, #1]
    4588:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    458c:	789a      	ldrb	r2, [r3, #2]
    458e:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4592:	3303      	adds	r3, #3
    4594:	428b      	cmp	r3, r1
    4596:	f1a0 0003 	sub.w	r0, r0, #3
    459a:	d1f1      	bne.n	4580 <rainbow_march_beat(LEDStruct&)+0x184>
		strip_sync(leds);
	}
}
    459c:	b003      	add	sp, #12
    459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45a0:	6812      	ldr	r2, [r2, #0]
    45a2:	9201      	str	r2, [sp, #4]
	return ret;
    45a4:	9901      	ldr	r1, [sp, #4]

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10));
    45a6:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    45aa:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    45ae:	f44f 728c 	mov.w	r2, #280	; 0x118
    45b2:	fb02 f201 	mul.w	r2, r2, r1
    45b6:	021b      	lsls	r3, r3, #8
    45b8:	fb03 f302 	mul.w	r3, r3, r2
    45bc:	0e1b      	lsrs	r3, r3, #24
    45be:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    45c0:	064a      	lsls	r2, r1, #25
    45c2:	d441      	bmi.n	4648 <rainbow_march_beat(LEDStruct&)+0x24c>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    45c4:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    45c8:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    45cc:	4930      	ldr	r1, [pc, #192]	; (4690 <rainbow_march_beat(LEDStruct&)+0x294>)
    45ce:	1112      	asrs	r2, r2, #4
    45d0:	0052      	lsls	r2, r2, #1
    45d2:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    45d4:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    45d6:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    45d8:	fb12 f000 	smulbb	r0, r2, r0
    45dc:	eb01 1120 	add.w	r1, r1, r0, asr #4
    45e0:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    45e2:	061b      	lsls	r3, r3, #24
    45e4:	bf48      	it	mi
    45e6:	4249      	negmi	r1, r1
    45e8:	b249      	sxtb	r1, r1

    y += 128;
    45ea:	3980      	subs	r1, #128	; 0x80
    45ec:	b2c9      	uxtb	r1, r1
    45ee:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    45f2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    45f6:	1b5b      	subs	r3, r3, r5
    45f8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    45fc:	eba3 2222 	sub.w	r2, r3, r2, asr #8
	}

	if (!leds.rainbow_split) {
    4600:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10));
    4604:	b2d2      	uxtb	r2, r2
    4606:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}

	if (!leds.rainbow_split) {
    460a:	2b00      	cmp	r3, #0
    460c:	d19c      	bne.n	4548 <rainbow_march_beat(LEDStruct&)+0x14c>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    460e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4612:	bb6b      	cbnz	r3, 4670 <rainbow_march_beat(LEDStruct&)+0x274>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4614:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4618:	214b      	movs	r1, #75	; 0x4b
    461a:	4620      	mov	r0, r4
    461c:	f006 fac8 	bl	abb0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4620:	4620      	mov	r0, r4
    4622:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4626:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4628:	781a      	ldrb	r2, [r3, #0]
    462a:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    462e:	785a      	ldrb	r2, [r3, #1]
    4630:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4634:	789a      	ldrb	r2, [r3, #2]
    4636:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    463a:	3303      	adds	r3, #3
    463c:	4299      	cmp	r1, r3
    463e:	f1a0 0003 	sub.w	r0, r0, #3
    4642:	d1f1      	bne.n	4628 <rainbow_march_beat(LEDStruct&)+0x22c>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4644:	b003      	add	sp, #12
    4646:	bdf0      	pop	{r4, r5, r6, r7, pc}
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4648:	43c9      	mvns	r1, r1
    464a:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    464c:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4650:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    4652:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    4656:	e7b9      	b.n	45cc <rainbow_march_beat(LEDStruct&)+0x1d0>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4658:	43c9      	mvns	r1, r1
    465a:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    465c:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4660:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    4662:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    4666:	e74e      	b.n	4506 <rainbow_march_beat(LEDStruct&)+0x10a>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4668:	4620      	mov	r0, r4
    466a:	f7ff fdad 	bl	41c8 <rainbow_update(LEDStruct&)>
    466e:	e72e      	b.n	44ce <rainbow_march_beat(LEDStruct&)+0xd2>
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 10));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4670:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4674:	4620      	mov	r0, r4
    4676:	2196      	movs	r1, #150	; 0x96
    4678:	f006 fa9a 	bl	abb0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    467c:	b003      	add	sp, #12
    467e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4680:	461a      	mov	r2, r3
    4682:	e716      	b.n	44b2 <rainbow_march_beat(LEDStruct&)+0xb6>
    4684:	1fff8788 	.word	0x1fff8788
    4688:	1fff9619 	.word	0x1fff9619
    468c:	1fffa904 	.word	0x1fffa904
    4690:	0000ff24 	.word	0x0000ff24

00004694 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4694:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4696:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    469a:	f89d 6018 	ldrb.w	r6, [sp, #24]
    469e:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    46a2:	250b      	movs	r5, #11
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    46a4:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    46a6:	3c0f      	subs	r4, #15
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    46a8:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    46ac:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    46ae:	f04f 050f 	mov.w	r5, #15
    46b2:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    46b6:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    46ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    46be:	d93d      	bls.n	473c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    46c0:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    46c2:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    46c4:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    46c8:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    46cc:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    46d0:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    46d4:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    46d8:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    46dc:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    46e0:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46e4:	4c1f      	ldr	r4, [pc, #124]	; (4764 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    46e6:	8823      	ldrh	r3, [r4, #0]
    46e8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    46ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    46f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    46f4:	3319      	adds	r3, #25
    46f6:	b29b      	uxth	r3, r3
    46f8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    46fc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4700:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4704:	3219      	adds	r2, #25
    4706:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4708:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    470c:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4710:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4712:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4718:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    471c:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    471e:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4720:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4724:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4728:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    472c:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4730:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4734:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    4736:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    473c:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4740:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    4744:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4748:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    474c:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4750:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    4754:	b112      	cbz	r2, 475c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    4756:	2225      	movs	r2, #37	; 0x25
    4758:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    475c:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    4760:	e7c0      	b.n	46e4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    4762:	bf00      	nop
    4764:	1fff8788 	.word	0x1fff8788

00004768 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4768:	4b19      	ldr	r3, [pc, #100]	; (47d0 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    476a:	4a1a      	ldr	r2, [pc, #104]	; (47d4 <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    476c:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    476e:	2100      	movs	r1, #0
    4770:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4772:	2b05      	cmp	r3, #5
    4774:	d808      	bhi.n	4788 <fire_update(LEDStruct&)+0x20>
    4776:	e8df f003 	tbb	[pc, r3]
    477a:	150f      	.short	0x150f
    477c:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4780:	4b15      	ldr	r3, [pc, #84]	; (47d8 <fire_update(LEDStruct&)+0x70>)
    4782:	881b      	ldrh	r3, [r3, #0]
    4784:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4788:	f7fd bd28 	b.w	21dc <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    478c:	4b12      	ldr	r3, [pc, #72]	; (47d8 <fire_update(LEDStruct&)+0x70>)
    478e:	881b      	ldrh	r3, [r3, #0]
    4790:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    4794:	f7fd bd22 	b.w	21dc <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    4798:	4b0f      	ldr	r3, [pc, #60]	; (47d8 <fire_update(LEDStruct&)+0x70>)
    479a:	881b      	ldrh	r3, [r3, #0]
    479c:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    47a0:	f7fd bd1c 	b.w	21dc <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    47a4:	4b0c      	ldr	r3, [pc, #48]	; (47d8 <fire_update(LEDStruct&)+0x70>)
    47a6:	881b      	ldrh	r3, [r3, #0]
    47a8:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    47ac:	f7fd bd16 	b.w	21dc <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    47b0:	4b09      	ldr	r3, [pc, #36]	; (47d8 <fire_update(LEDStruct&)+0x70>)
    47b2:	881b      	ldrh	r3, [r3, #0]
    47b4:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    47b8:	f7fd bd10 	b.w	21dc <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    47bc:	4b06      	ldr	r3, [pc, #24]	; (47d8 <fire_update(LEDStruct&)+0x70>)
    47be:	881b      	ldrh	r3, [r3, #0]
    47c0:	3300      	adds	r3, #0
    47c2:	bf18      	it	ne
    47c4:	2301      	movne	r3, #1
    47c6:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    47ca:	f7fd bd07 	b.w	21dc <LEDDebug(LEDStruct&)>
    47ce:	bf00      	nop
    47d0:	1fff9e66 	.word	0x1fff9e66
    47d4:	1fff9619 	.word	0x1fff9619
    47d8:	1fff9e64 	.word	0x1fff9e64

000047dc <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    47dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    47e0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    47e4:	4dd0      	ldr	r5, [pc, #832]	; (4b28 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    47e6:	b086      	sub	sp, #24
    47e8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    47ea:	2b00      	cmp	r3, #0
    47ec:	f000 8229 	beq.w	4c42 <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    47f0:	4bce      	ldr	r3, [pc, #824]	; (4b2c <fire(LEDStruct&)+0x350>)
    47f2:	781b      	ldrb	r3, [r3, #0]
    47f4:	2b00      	cmp	r3, #0
    47f6:	f040 8220 	bne.w	4c3a <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    47fa:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    47fe:	2b00      	cmp	r3, #0
    4800:	f000 82d1 	beq.w	4da6 <fire(LEDStruct&)+0x5ca>
    4804:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4808:	882a      	ldrh	r2, [r5, #0]
    480a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    480e:	004f      	lsls	r7, r1, #1
    4810:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    4814:	fb97 f7f3 	sdiv	r7, r7, r3
    4818:	3702      	adds	r7, #2
    481a:	b2ff      	uxtb	r7, r7
    481c:	44a6      	add	lr, r4
    481e:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4822:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4826:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    482a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    482e:	3219      	adds	r2, #25
    4830:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4832:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4836:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    483a:	b2c9      	uxtb	r1, r1
    483c:	fb11 f107 	smulbb	r1, r1, r7
    4840:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4844:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4848:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    484a:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    484c:	d1e9      	bne.n	4822 <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    484e:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4852:	802a      	strh	r2, [r5, #0]
    4854:	2e00      	cmp	r6, #0
    4856:	f000 80f5 	beq.w	4a44 <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    485a:	f1a3 0e03 	sub.w	lr, r3, #3
    485e:	f1be 0f01 	cmp.w	lr, #1
    4862:	f04f 0c01 	mov.w	ip, #1
    4866:	dd1a      	ble.n	489e <fire(LEDStruct&)+0xc2>
    4868:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    486c:	f203 277e 	addw	r7, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4870:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 4b30 <fire(LEDStruct&)+0x354>
    4874:	4420      	add	r0, r4
    4876:	4427      	add	r7, r4
    4878:	f504 7820 	add.w	r8, r4, #640	; 0x280
    487c:	7801      	ldrb	r1, [r0, #0]
    487e:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4882:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    4886:	fb89 a601 	smull	sl, r6, r9, r1
    488a:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    488e:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4890:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4894:	d1f2      	bne.n	487c <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    4896:	f1bc 0f00 	cmp.w	ip, #0
    489a:	f000 8102 	beq.w	4aa2 <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    489e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    48a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    48a6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    48aa:	3219      	adds	r2, #25
    48ac:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    48ae:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    48b2:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    48b6:	802a      	strh	r2, [r5, #0]
    48b8:	b2c9      	uxtb	r1, r1
    48ba:	428e      	cmp	r6, r1
    48bc:	489a      	ldr	r0, [pc, #616]	; (4b28 <fire(LEDStruct&)+0x34c>)
    48be:	d926      	bls.n	490e <fire(LEDStruct&)+0x132>
    48c0:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    48c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    48c8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    48cc:	3219      	adds	r2, #25
    48ce:	b292      	uxth	r2, r2
    48d0:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    48d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    48d8:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    48dc:	3619      	adds	r6, #25
    48de:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    48e0:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    48e4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    48e8:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    48ea:	b2d2      	uxtb	r2, r2
    48ec:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    48f0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    48f4:	eb04 2222 	add.w	r2, r4, r2, asr #8
    48f8:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    48fc:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    48fe:	8006      	strh	r6, [r0, #0]
    4900:	3960      	subs	r1, #96	; 0x60
    4902:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    4906:	fa80 f051 	uqadd8	r0, r0, r1
    490a:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    490e:	f1bc 0f00 	cmp.w	ip, #0
    4912:	d112      	bne.n	493a <fire(LEDStruct&)+0x15e>
    4914:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4916:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    491a:	4983      	ldr	r1, [pc, #524]	; (4b28 <fire(LEDStruct&)+0x34c>)
    491c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4920:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4924:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4928:	3219      	adds	r2, #25
    492a:	b292      	uxth	r2, r2
    492c:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4930:	b2c0      	uxtb	r0, r0
    4932:	4286      	cmp	r6, r0
    4934:	802a      	strh	r2, [r5, #0]
    4936:	f200 80cd 	bhi.w	4ad4 <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    493a:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    493e:	2a00      	cmp	r2, #0
    4940:	d15f      	bne.n	4a02 <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4942:	2b00      	cmp	r3, #0
    4944:	f000 8226 	beq.w	4d94 <fire(LEDStruct&)+0x5b8>
    4948:	f204 277f 	addw	r7, r4, #639	; 0x27f
    494c:	4690      	mov	r8, r2
    494e:	46b9      	mov	r9, r7
    4950:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    4952:	3b01      	subs	r3, #1
    4954:	ebc8 0503 	rsb	r5, r8, r3
    4958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    495c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4960:	4630      	mov	r0, r6
    4962:	f006 fa15 	bl	ad90 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4966:	f89d 3014 	ldrb.w	r3, [sp, #20]
    496a:	5563      	strb	r3, [r4, r5]
    496c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    496e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4972:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4976:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4978:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    497a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    497e:	f108 0801 	add.w	r8, r8, #1
    4982:	4543      	cmp	r3, r8
    4984:	dce5      	bgt.n	4952 <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4986:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    498a:	b30a      	cbz	r2, 49d0 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    498c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4990:	2a00      	cmp	r2, #0
    4992:	f040 81bf 	bne.w	4d14 <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4996:	4690      	mov	r8, r2
    4998:	2b00      	cmp	r3, #0
    499a:	f000 81fe 	beq.w	4d9a <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    499e:	eb08 0503 	add.w	r5, r8, r3
    49a2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    49a6:	4630      	mov	r0, r6
    49a8:	f006 f9f2 	bl	ad90 <HeatColor(unsigned char)>
    49ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    49b0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    49b4:	54e2      	strb	r2, [r4, r3]
    49b6:	4423      	add	r3, r4
        g = rhs.g;
    49b8:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    49bc:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    49c0:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    49c2:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    49c4:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    49c8:	f108 0801 	add.w	r8, r8, #1
    49cc:	4543      	cmp	r3, r8
    49ce:	dce6      	bgt.n	499e <fire(LEDStruct&)+0x1c2>
    49d0:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    49d4:	2a00      	cmp	r2, #0
    49d6:	f000 80ad 	beq.w	4b34 <fire(LEDStruct&)+0x358>
    49da:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    49de:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    49e0:	781a      	ldrb	r2, [r3, #0]
    49e2:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    49e6:	785a      	ldrb	r2, [r3, #1]
    49e8:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    49ec:	789a      	ldrb	r2, [r3, #2]
    49ee:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    49f2:	3303      	adds	r3, #3
    49f4:	4299      	cmp	r1, r3
    49f6:	f1a4 0403 	sub.w	r4, r4, #3
    49fa:	d1f1      	bne.n	49e0 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    49fc:	b006      	add	sp, #24
    49fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4a02:	2b00      	cmp	r3, #0
    4a04:	f000 80ea 	beq.w	4bdc <fire(LEDStruct&)+0x400>
    4a08:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4a0c:	46b9      	mov	r9, r7
    4a0e:	4625      	mov	r5, r4
    4a10:	f04f 0800 	mov.w	r8, #0
    4a14:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4a16:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4a1a:	4630      	mov	r0, r6
    4a1c:	f006 f9b8 	bl	ad90 <HeatColor(unsigned char)>
    4a20:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a24:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4a28:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a2c:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4a2e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4a30:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4a32:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a36:	f108 0801 	add.w	r8, r8, #1
    4a3a:	4543      	cmp	r3, r8
    4a3c:	f105 0503 	add.w	r5, r5, #3
    4a40:	dce9      	bgt.n	4a16 <fire(LEDStruct&)+0x23a>
    4a42:	e7a0      	b.n	4986 <fire(LEDStruct&)+0x1aa>
    4a44:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4a48:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4a4c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4a50:	fb9e fef3 	sdiv	lr, lr, r3
    4a54:	f10e 0e02 	add.w	lr, lr, #2
    4a58:	fa5f fe8e 	uxtb.w	lr, lr
    4a5c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4a60:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4a64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4a68:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a6c:	3219      	adds	r2, #25
    4a6e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a70:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4a74:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4a78:	b2c9      	uxtb	r1, r1
    4a7a:	fb11 f10e 	smulbb	r1, r1, lr
    4a7e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4a82:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4a84:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4a88:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4a8a:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4a8c:	dbe8      	blt.n	4a60 <fire(LEDStruct&)+0x284>
    4a8e:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4a90:	f1a3 0e03 	sub.w	lr, r3, #3
    4a94:	f1be 0f01 	cmp.w	lr, #1
    4a98:	f04f 0c00 	mov.w	ip, #0
    4a9c:	f73f aee4 	bgt.w	4868 <fire(LEDStruct&)+0x8c>
    4aa0:	e6fd      	b.n	489e <fire(LEDStruct&)+0xc2>
    4aa2:	f203 26c7 	addw	r6, r3, #711	; 0x2c7
    4aa6:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4aaa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4b30 <fire(LEDStruct&)+0x354>
    4aae:	4426      	add	r6, r4
    4ab0:	4427      	add	r7, r4
    4ab2:	7831      	ldrb	r1, [r6, #0]
    4ab4:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    4ab8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4abc:	fb88 9001 	smull	r9, r0, r8, r1
    4ac0:	f10e 3eff 	add.w	lr, lr, #4294967295
    4ac4:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4ac8:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4acc:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4ad0:	d1ef      	bne.n	4ab2 <fire(LEDStruct&)+0x2d6>
    4ad2:	e6e4      	b.n	489e <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ad4:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4ad8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4adc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ae0:	3219      	adds	r2, #25
    4ae2:	b292      	uxth	r2, r2
    4ae4:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4ae8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4aec:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4af0:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4af2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4af6:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4af8:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4afa:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4afe:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4b02:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4b04:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4b08:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4b0c:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4b10:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b14:	800d      	strh	r5, [r1, #0]
    4b16:	1201      	asrs	r1, r0, #8
    4b18:	3960      	subs	r1, #96	; 0x60
    4b1a:	4630      	mov	r0, r6
    4b1c:	fa80 f051 	uqadd8	r0, r0, r1
    4b20:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
    4b24:	e709      	b.n	493a <fire(LEDStruct&)+0x15e>
    4b26:	bf00      	nop
    4b28:	1fff8788 	.word	0x1fff8788
    4b2c:	1fff9619 	.word	0x1fff9619
    4b30:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4b34:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4b38:	2a00      	cmp	r2, #0
    4b3a:	d15a      	bne.n	4bf2 <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	f43f af5d 	beq.w	49fc <fire(LEDStruct&)+0x220>
    4b42:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4b46:	46b9      	mov	r9, r7
    4b48:	f04f 0800 	mov.w	r8, #0
    4b4c:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    4b4e:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    4b52:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4b56:	354b      	adds	r5, #75	; 0x4b
    4b58:	4445      	add	r5, r8
    4b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4b5e:	4630      	mov	r0, r6
    4b60:	f006 f916 	bl	ad90 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b64:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4b68:	5563      	strb	r3, [r4, r5]
    4b6a:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4b6c:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4b70:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4b74:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4b76:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4b78:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4b7c:	f108 0801 	add.w	r8, r8, #1
    4b80:	4543      	cmp	r3, r8
    4b82:	dce4      	bgt.n	4b4e <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    4b84:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4b88:	2a00      	cmp	r2, #0
    4b8a:	f43f af37 	beq.w	49fc <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    4b8e:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4b92:	2a00      	cmp	r2, #0
    4b94:	f000 80dd 	beq.w	4d52 <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    4b98:	2b00      	cmp	r3, #0
    4b9a:	f43f af2f 	beq.w	49fc <fire(LEDStruct&)+0x220>
    4b9e:	4625      	mov	r5, r4
    4ba0:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4ba4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4ba8:	4630      	mov	r0, r6
    4baa:	f006 f8f1 	bl	ad90 <HeatColor(unsigned char)>
    4bae:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4bb2:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4bb6:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4bba:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    4bbe:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    4bc2:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    4bc6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4bca:	f108 0801 	add.w	r8, r8, #1
    4bce:	4543      	cmp	r3, r8
    4bd0:	f105 0503 	add.w	r5, r5, #3
    4bd4:	dce6      	bgt.n	4ba4 <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4bd6:	b006      	add	sp, #24
    4bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4bdc:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4be0:	2b00      	cmp	r3, #0
    4be2:	f040 80da 	bne.w	4d9a <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4be6:	f1bc 0f00 	cmp.w	ip, #0
    4bea:	f47f aef6 	bne.w	49da <fire(LEDStruct&)+0x1fe>
    4bee:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	f43f af02 	beq.w	49fc <fire(LEDStruct&)+0x220>
    4bf8:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4bfc:	46b9      	mov	r9, r7
    4bfe:	4625      	mov	r5, r4
    4c00:	f04f 0800 	mov.w	r8, #0
    4c04:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4c06:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4c0a:	4630      	mov	r0, r6
    4c0c:	f006 f8c0 	bl	ad90 <HeatColor(unsigned char)>
    4c10:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c14:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4c18:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c1c:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4c20:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    4c24:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4c28:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4c2c:	f108 0801 	add.w	r8, r8, #1
    4c30:	4543      	cmp	r3, r8
    4c32:	f1a5 0503 	sub.w	r5, r5, #3
    4c36:	dce6      	bgt.n	4c06 <fire(LEDStruct&)+0x42a>
    4c38:	e7a4      	b.n	4b84 <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4c3a:	4620      	mov	r0, r4
    4c3c:	f7ff fd94 	bl	4768 <fire_update(LEDStruct&)>
    4c40:	e5db      	b.n	47fa <fire(LEDStruct&)+0x1e>
    4c42:	882b      	ldrh	r3, [r5, #0]
    4c44:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4c48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4c4c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4c50:	3119      	adds	r1, #25
    4c52:	b289      	uxth	r1, r1
    4c54:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4c58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4c5c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c60:	3219      	adds	r2, #25
    4c62:	b292      	uxth	r2, r2
    4c64:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4c68:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4c6c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4c70:	f10e 0e19 	add.w	lr, lr, #25
    4c74:	fa1f fe8e 	uxth.w	lr, lr
    4c78:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4c7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    4c80:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4c84:	3619      	adds	r6, #25
    4c86:	b2b6      	uxth	r6, r6
    4c88:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4c8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4c90:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c94:	3319      	adds	r3, #25
    4c96:	b29b      	uxth	r3, r3
    4c98:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4c9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ca0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4ca4:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ca8:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4cac:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4cb0:	b2f6      	uxtb	r6, r6
    4cb2:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cb6:	3719      	adds	r7, #25
    4cb8:	b2db      	uxtb	r3, r3
    4cba:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4cbe:	b2bf      	uxth	r7, r7
    4cc0:	11b6      	asrs	r6, r6, #6
    4cc2:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    4cc6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4cca:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4cce:	119b      	asrs	r3, r3, #6
    4cd0:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4cd4:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    4cd8:	333c      	adds	r3, #60	; 0x3c
    4cda:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4cde:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4ce2:	fa5f f883 	uxtb.w	r8, r3
    4ce6:	fa5f fc8c 	uxtb.w	ip, ip
    4cea:	3601      	adds	r6, #1
    4cec:	f10e 0314 	add.w	r3, lr, #20
    4cf0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4cf4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4cf8:	f8cd c000 	str.w	ip, [sp]
    4cfc:	f8cd 8004 	str.w	r8, [sp, #4]
    4d00:	9602      	str	r6, [sp, #8]
    4d02:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4d06:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    4d0a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d0c:	802f      	strh	r7, [r5, #0]
    4d0e:	f7ff fcc1 	bl	4694 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4d12:	e56d      	b.n	47f0 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4d14:	2b00      	cmp	r3, #0
    4d16:	d040      	beq.n	4d9a <fire(LEDStruct&)+0x5be>
    4d18:	4625      	mov	r5, r4
    4d1a:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4d1e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4d22:	4630      	mov	r0, r6
    4d24:	f006 f834 	bl	ad90 <HeatColor(unsigned char)>
    4d28:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d2c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4d30:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d34:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    4d38:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4d3c:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4d40:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d44:	f108 0801 	add.w	r8, r8, #1
    4d48:	4543      	cmp	r3, r8
    4d4a:	f1a5 0503 	sub.w	r5, r5, #3
    4d4e:	dce6      	bgt.n	4d1e <fire(LEDStruct&)+0x542>
    4d50:	e63e      	b.n	49d0 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4d52:	4690      	mov	r8, r2
    4d54:	2b00      	cmp	r3, #0
    4d56:	f43f ae51 	beq.w	49fc <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4d5a:	334b      	adds	r3, #75	; 0x4b
    4d5c:	ebc8 0503 	rsb	r5, r8, r3
    4d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4d64:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4d68:	4630      	mov	r0, r6
    4d6a:	f006 f811 	bl	ad90 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4d72:	5563      	strb	r3, [r4, r5]
    4d74:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4d76:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4d7a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4d7e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4d80:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4d82:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d86:	f108 0801 	add.w	r8, r8, #1
    4d8a:	4543      	cmp	r3, r8
    4d8c:	dce5      	bgt.n	4d5a <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4d8e:	b006      	add	sp, #24
    4d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4d94:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4d98:	b163      	cbz	r3, 4db4 <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4d9a:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    4d9e:	2b00      	cmp	r3, #0
    4da0:	f47f ae1b 	bne.w	49da <fire(LEDStruct&)+0x1fe>
    4da4:	e62a      	b.n	49fc <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4da6:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    4daa:	b10a      	cbz	r2, 4db0 <fire(LEDStruct&)+0x5d4>
    4dac:	882a      	ldrh	r2, [r5, #0]
    4dae:	e554      	b.n	485a <fire(LEDStruct&)+0x7e>
    4db0:	882a      	ldrh	r2, [r5, #0]
    4db2:	e66d      	b.n	4a90 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4db4:	f1bc 0f00 	cmp.w	ip, #0
    4db8:	f47f ae0f 	bne.w	49da <fire(LEDStruct&)+0x1fe>
    4dbc:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4dc0:	e6bc      	b.n	4b3c <fire(LEDStruct&)+0x360>
    4dc2:	bf00      	nop

00004dc4 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    4dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4dc8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4dcc:	4dd0      	ldr	r5, [pc, #832]	; (5110 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    4dce:	b087      	sub	sp, #28
    4dd0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	f000 81da 	beq.w	518c <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    4dd8:	4bce      	ldr	r3, [pc, #824]	; (5114 <torch(LEDStruct&)+0x350>)
    4dda:	781b      	ldrb	r3, [r3, #0]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	f040 8242 	bne.w	5266 <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4de2:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    4de6:	4663      	mov	r3, ip
    4de8:	f1bc 0f00 	cmp.w	ip, #0
    4dec:	f000 823f 	beq.w	526e <torch(LEDStruct&)+0x4aa>
    4df0:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4df4:	882a      	ldrh	r2, [r5, #0]
    4df6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4dfa:	004f      	lsls	r7, r1, #1
    4dfc:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    4e00:	fb97 f7fc 	sdiv	r7, r7, ip
    4e04:	3702      	adds	r7, #2
    4e06:	b2ff      	uxtb	r7, r7
    4e08:	44a6      	add	lr, r4
    4e0a:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4e0e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e12:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e16:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e1a:	3219      	adds	r2, #25
    4e1c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e1e:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4e22:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4e26:	b2c9      	uxtb	r1, r1
    4e28:	fb11 f107 	smulbb	r1, r1, r7
    4e2c:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4e30:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4e34:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4e36:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4e38:	d1e9      	bne.n	4e0e <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4e3a:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4e3e:	802a      	strh	r2, [r5, #0]
    4e40:	2e00      	cmp	r6, #0
    4e42:	f000 816b 	beq.w	511c <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e46:	f1ac 0703 	sub.w	r7, ip, #3
    4e4a:	2f01      	cmp	r7, #1
    4e4c:	f04f 0901 	mov.w	r9, #1
    4e50:	dd1a      	ble.n	4e88 <torch(LEDStruct&)+0xc4>
    4e52:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    4e56:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4e5a:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 5118 <torch(LEDStruct&)+0x354>
    4e5e:	4420      	add	r0, r4
    4e60:	4426      	add	r6, r4
    4e62:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    4e66:	7801      	ldrb	r1, [r0, #0]
    4e68:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    4e6c:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    4e70:	fb88 ba01 	smull	fp, sl, r8, r1
    4e74:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e78:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4e7a:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e7e:	d1f2      	bne.n	4e66 <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    4e80:	f1b9 0f00 	cmp.w	r9, #0
    4e84:	f000 812c 	beq.w	50e0 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e88:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e90:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e94:	3219      	adds	r2, #25
    4e96:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    4e98:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4e9c:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4ea0:	802a      	strh	r2, [r5, #0]
    4ea2:	b2c0      	uxtb	r0, r0
    4ea4:	4286      	cmp	r6, r0
    4ea6:	499a      	ldr	r1, [pc, #616]	; (5110 <torch(LEDStruct&)+0x34c>)
    4ea8:	d928      	bls.n	4efc <torch(LEDStruct&)+0x138>
    4eaa:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4eae:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4eb2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4eb6:	3219      	adds	r2, #25
    4eb8:	b292      	uxth	r2, r2
    4eba:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4ebe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4ec2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4ec6:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ec8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ecc:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ece:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ed0:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ed4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4ed8:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4eda:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4ede:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ee2:	800e      	strh	r6, [r1, #0]
    4ee4:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4ee8:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    4eec:	1200      	asrs	r0, r0, #8
    4eee:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    4ef2:	4630      	mov	r0, r6
    4ef4:	fa80 f051 	uqadd8	r0, r0, r1
    4ef8:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    4efc:	f1b9 0f00 	cmp.w	r9, #0
    4f00:	d112      	bne.n	4f28 <torch(LEDStruct&)+0x164>
    4f02:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4f04:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4f08:	4981      	ldr	r1, [pc, #516]	; (5110 <torch(LEDStruct&)+0x34c>)
    4f0a:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4f0e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4f12:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4f16:	3219      	adds	r2, #25
    4f18:	b292      	uxth	r2, r2
    4f1a:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4f1e:	b2c0      	uxtb	r0, r0
    4f20:	4286      	cmp	r6, r0
    4f22:	802a      	strh	r2, [r5, #0]
    4f24:	f200 80af 	bhi.w	5086 <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4f28:	f1bc 0f00 	cmp.w	ip, #0
    4f2c:	f000 81a4 	beq.w	5278 <torch(LEDStruct&)+0x4b4>
    4f30:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4f34:	2600      	movs	r6, #0
    4f36:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    4f3a:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    4f3e:	199d      	adds	r5, r3, r6
    4f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4f44:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4f48:	4648      	mov	r0, r9
    4f4a:	f005 ff21 	bl	ad90 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4f52:	5563      	strb	r3, [r4, r5]
    4f54:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4f56:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f5a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4f5e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4f60:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4f62:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4f66:	3601      	adds	r6, #1
    4f68:	42b3      	cmp	r3, r6
    4f6a:	dce6      	bgt.n	4f3a <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4f6c:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4f70:	2e00      	cmp	r6, #0
    4f72:	d175      	bne.n	5060 <torch(LEDStruct&)+0x29c>
    4f74:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4f78:	2b00      	cmp	r3, #0
    4f7a:	f000 8183 	beq.w	5284 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4f7e:	334a      	adds	r3, #74	; 0x4a
    4f80:	1b9d      	subs	r5, r3, r6
    4f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4f86:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4f8a:	4648      	mov	r0, r9
    4f8c:	f005 ff00 	bl	ad90 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f90:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4f94:	5563      	strb	r3, [r4, r5]
    4f96:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4f98:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f9c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4fa0:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4fa2:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4fa4:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4fa8:	3601      	adds	r6, #1
    4faa:	42b3      	cmp	r3, r6
    4fac:	dce7      	bgt.n	4f7e <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4fae:	2b4b      	cmp	r3, #75	; 0x4b
    4fb0:	d047      	beq.n	5042 <torch(LEDStruct&)+0x27e>
    4fb2:	f10d 0914 	add.w	r9, sp, #20
    4fb6:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    4fba:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4fbc:	4626      	mov	r6, r4
    4fbe:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4fc0:	f04f 0a01 	mov.w	sl, #1
    4fc4:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4fc8:	f8cd a000 	str.w	sl, [sp]
    4fcc:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    4fd0:	fb98 f3f3 	sdiv	r3, r8, r3
    4fd4:	441a      	add	r2, r3
    4fd6:	b2d2      	uxtb	r2, r2
    4fd8:	23ff      	movs	r3, #255	; 0xff
    4fda:	4659      	mov	r1, fp
    4fdc:	4648      	mov	r0, r9
    4fde:	f005 fef9 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4fe2:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4fe6:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4fea:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4fee:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4ff0:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4ff2:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4ff4:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    4ff8:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    4ffc:	fb98 f8f2 	sdiv	r8, r8, r2
    5000:	eb08 0203 	add.w	r2, r8, r3
    5004:	b2d2      	uxtb	r2, r2
    5006:	23ff      	movs	r3, #255	; 0xff
    5008:	4659      	mov	r1, fp
    500a:	f8cd a000 	str.w	sl, [sp]
    500e:	4648      	mov	r0, r9
    5010:	f005 fee0 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5014:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    5018:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    501c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5020:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5024:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    5028:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    502c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5030:	3501      	adds	r5, #1
    5032:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    5036:	42aa      	cmp	r2, r5
    5038:	f106 0603 	add.w	r6, r6, #3
    503c:	f1a7 0703 	sub.w	r7, r7, #3
    5040:	dcc0      	bgt.n	4fc4 <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    5042:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5046:	2b00      	cmp	r3, #0
    5048:	f040 8096 	bne.w	5178 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    504c:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    5050:	f894 231b 	ldrb.w	r2, [r4, #795]	; 0x31b
    5054:	1a9b      	subs	r3, r3, r2
    5056:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
}
    505a:	b007      	add	sp, #28
    505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5060:	4621      	mov	r1, r4
    5062:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5066:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5068:	7810      	ldrb	r0, [r2, #0]
    506a:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    506e:	7850      	ldrb	r0, [r2, #1]
    5070:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    5074:	7890      	ldrb	r0, [r2, #2]
    5076:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    507a:	3203      	adds	r2, #3
    507c:	4295      	cmp	r5, r2
    507e:	f1a1 0103 	sub.w	r1, r1, #3
    5082:	d1f1      	bne.n	5068 <torch(LEDStruct&)+0x2a4>
    5084:	e793      	b.n	4fae <torch(LEDStruct&)+0x1ea>
    5086:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    508a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    508e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5092:	3219      	adds	r2, #25
    5094:	b292      	uxth	r2, r2
    5096:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    509a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    509e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    50a2:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50a4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    50a8:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    50aa:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50ac:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    50b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    50b4:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    50b6:	eb04 2222 	add.w	r2, r4, r2, asr #8
    50ba:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    50be:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    50c2:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    50c6:	800d      	strh	r5, [r1, #0]
    50c8:	1201      	asrs	r1, r0, #8
    50ca:	3960      	subs	r1, #96	; 0x60
    50cc:	4630      	mov	r0, r6
    50ce:	fa80 f051 	uqadd8	r0, r0, r1
    50d2:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    50d6:	f1bc 0f00 	cmp.w	ip, #0
    50da:	f47f af29 	bne.w	4f30 <torch(LEDStruct&)+0x16c>
    50de:	e0cf      	b.n	5280 <torch(LEDStruct&)+0x4bc>
    50e0:	f20c 26c7 	addw	r6, ip, #711	; 0x2c7
    50e4:	f20c 2ec9 	addw	lr, ip, #713	; 0x2c9
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    50e8:	f8df 802c 	ldr.w	r8, [pc, #44]	; 5118 <torch(LEDStruct&)+0x354>
    50ec:	4426      	add	r6, r4
    50ee:	44a6      	add	lr, r4
    50f0:	7831      	ldrb	r1, [r6, #0]
    50f2:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    50f6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    50fa:	fb88 a001 	smull	sl, r0, r8, r1
    50fe:	3f01      	subs	r7, #1
    5100:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    5104:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    5106:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    510a:	d1f1      	bne.n	50f0 <torch(LEDStruct&)+0x32c>
    510c:	e6bc      	b.n	4e88 <torch(LEDStruct&)+0xc4>
    510e:	bf00      	nop
    5110:	1fff8788 	.word	0x1fff8788
    5114:	1fff9619 	.word	0x1fff9619
    5118:	55555556 	.word	0x55555556
    511c:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    5120:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5124:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    5128:	fb9e fefc 	sdiv	lr, lr, ip
    512c:	f10e 0e02 	add.w	lr, lr, #2
    5130:	fa5f fe8e 	uxtb.w	lr, lr
    5134:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    5138:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    513c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5140:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5144:	3219      	adds	r2, #25
    5146:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5148:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    514c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    5150:	b2c9      	uxtb	r1, r1
    5152:	fb11 f10e 	smulbb	r1, r1, lr
    5156:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    515a:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    515c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    5160:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    5162:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    5164:	dbe8      	blt.n	5138 <torch(LEDStruct&)+0x374>
    5166:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5168:	f1ac 0703 	sub.w	r7, ip, #3
    516c:	2f01      	cmp	r7, #1
    516e:	f04f 0900 	mov.w	r9, #0
    5172:	f73f ae6e 	bgt.w	4e52 <torch(LEDStruct&)+0x8e>
    5176:	e687      	b.n	4e88 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    5178:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    517c:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    5180:	4413      	add	r3, r2
    5182:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
	else			   { leds.torch_index -= leds.torch_diff; }
}
    5186:	b007      	add	sp, #28
    5188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    518c:	882b      	ldrh	r3, [r5, #0]
    518e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    5192:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5196:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    519a:	3119      	adds	r1, #25
    519c:	b289      	uxth	r1, r1
    519e:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    51a2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    51a6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    51aa:	3219      	adds	r2, #25
    51ac:	b292      	uxth	r2, r2
    51ae:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    51b2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    51b6:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    51ba:	f10e 0e19 	add.w	lr, lr, #25
    51be:	fa1f fe8e 	uxth.w	lr, lr
    51c2:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    51c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    51ca:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    51ce:	3619      	adds	r6, #25
    51d0:	b2b6      	uxth	r6, r6
    51d2:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    51d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    51da:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    51de:	3319      	adds	r3, #25
    51e0:	b29b      	uxth	r3, r3
    51e2:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    51e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    51ea:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    51ee:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51f2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    51f6:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    51fa:	b2f6      	uxtb	r6, r6
    51fc:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5200:	3719      	adds	r7, #25
    5202:	b2db      	uxtb	r3, r3
    5204:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    5208:	b2bf      	uxth	r7, r7
    520a:	11b6      	asrs	r6, r6, #6
    520c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    5210:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    5214:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    5218:	119b      	asrs	r3, r3, #6
    521a:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    521e:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    5222:	333c      	adds	r3, #60	; 0x3c
    5224:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    5228:	f3c6 1681 	ubfx	r6, r6, #6, #2
    522c:	fa5f fc8c 	uxtb.w	ip, ip
    5230:	fa5f f883 	uxtb.w	r8, r3
    5234:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5238:	f10e 0314 	add.w	r3, lr, #20
    523c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    5240:	3601      	adds	r6, #1
    5242:	f8cd c000 	str.w	ip, [sp]
    5246:	f8cd 8004 	str.w	r8, [sp, #4]
    524a:	9602      	str	r6, [sp, #8]
    524c:	b2db      	uxtb	r3, r3
    524e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    5252:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5256:	802f      	strh	r7, [r5, #0]
    5258:	f7ff fa1c 	bl	4694 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    525c:	4b0b      	ldr	r3, [pc, #44]	; (528c <torch(LEDStruct&)+0x4c8>)
    525e:	781b      	ldrb	r3, [r3, #0]
    5260:	2b00      	cmp	r3, #0
    5262:	f43f adbe 	beq.w	4de2 <torch(LEDStruct&)+0x1e>
    5266:	4620      	mov	r0, r4
    5268:	f7ff fa7e 	bl	4768 <fire_update(LEDStruct&)>
    526c:	e5b9      	b.n	4de2 <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    526e:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    5272:	b14a      	cbz	r2, 5288 <torch(LEDStruct&)+0x4c4>
    5274:	882a      	ldrh	r2, [r5, #0]
    5276:	e5e6      	b.n	4e46 <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5278:	f1b9 0f00 	cmp.w	r9, #0
    527c:	f47f aef0 	bne.w	5060 <torch(LEDStruct&)+0x29c>
    5280:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5284:	2300      	movs	r3, #0
    5286:	e696      	b.n	4fb6 <torch(LEDStruct&)+0x1f2>
    5288:	882a      	ldrh	r2, [r5, #0]
    528a:	e76d      	b.n	5168 <torch(LEDStruct&)+0x3a4>
    528c:	1fff9619 	.word	0x1fff9619

00005290 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5290:	4b0e      	ldr	r3, [pc, #56]	; (52cc <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5292:	4a0f      	ldr	r2, [pc, #60]	; (52d0 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    5294:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5296:	2100      	movs	r1, #0
    5298:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    529a:	b13b      	cbz	r3, 52ac <confetti_update(LEDStruct&)+0x1c>
    529c:	2b01      	cmp	r3, #1
    529e:	d103      	bne.n	52a8 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    52a0:	4b0c      	ldr	r3, [pc, #48]	; (52d4 <confetti_update(LEDStruct&)+0x44>)
    52a2:	881b      	ldrh	r3, [r3, #0]
    52a4:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    52a8:	f7fc bf98 	b.w	21dc <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    52ac:	4b09      	ldr	r3, [pc, #36]	; (52d4 <confetti_update(LEDStruct&)+0x44>)
    52ae:	881b      	ldrh	r3, [r3, #0]
    52b0:	2b00      	cmp	r3, #0
    52b2:	bf14      	ite	ne
    52b4:	2301      	movne	r3, #1
    52b6:	2300      	moveq	r3, #0
    52b8:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    52bc:	bf14      	ite	ne
    52be:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    52c0:	234b      	moveq	r3, #75	; 0x4b
    52c2:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    52c6:	f7fc bf89 	b.w	21dc <LEDDebug(LEDStruct&)>
    52ca:	bf00      	nop
    52cc:	1fff9e66 	.word	0x1fff9e66
    52d0:	1fff9619 	.word	0x1fff9619
    52d4:	1fff9e64 	.word	0x1fff9e64

000052d8 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    52d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    52da:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    52de:	4e4b      	ldr	r6, [pc, #300]	; (540c <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    52e0:	b085      	sub	sp, #20
    52e2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    52e4:	bb8b      	cbnz	r3, 534a <confetti(LEDStruct&)+0x72>
    52e6:	8833      	ldrh	r3, [r6, #0]
    52e8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    52ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    52f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52f4:	3319      	adds	r3, #25
    52f6:	b29b      	uxth	r3, r3
    52f8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    52fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5300:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5304:	3119      	adds	r1, #25
    5306:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5308:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    530c:	b2d2      	uxtb	r2, r2
    530e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    5312:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5314:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    5318:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    531a:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    531c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    5320:	2714      	movs	r7, #20
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5322:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5324:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5326:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    5328:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    532c:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    5330:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    5334:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5338:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    533c:	2b00      	cmp	r3, #0
    533e:	d15c      	bne.n	53fa <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    5340:	234b      	movs	r3, #75	; 0x4b
    5342:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.confetti_fade		= cf;
    5346:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    534a:	4b31      	ldr	r3, [pc, #196]	; (5410 <confetti(LEDStruct&)+0x138>)
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	2b00      	cmp	r3, #0
    5350:	d157      	bne.n	5402 <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    5352:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    5356:	4620      	mov	r0, r4
    5358:	2196      	movs	r1, #150	; 0x96
    535a:	f005 fcdb 	bl	ad14 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    535e:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5360:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5364:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5368:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    536c:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    5370:	3319      	adds	r3, #25
    5372:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5374:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    537c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5380:	3719      	adds	r7, #25
    5382:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5384:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5388:	fb03 f305 	mul.w	r3, r3, r5
    538c:	2101      	movs	r1, #1
    538e:	0c1d      	lsrs	r5, r3, #16
    5390:	9100      	str	r1, [sp, #0]
    5392:	a803      	add	r0, sp, #12
    5394:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    5398:	b2d2      	uxtb	r2, r2
    539a:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    539c:	8037      	strh	r7, [r6, #0]
    539e:	f005 fd19 	bl	add4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    53a2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    53a6:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    53a8:	5ce2      	ldrb	r2, [r4, r3]
    53aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
    53ae:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    53b2:	54e2      	strb	r2, [r4, r3]
    53b4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    53b8:	784a      	ldrb	r2, [r1, #1]
    53ba:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    53be:	704a      	strb	r2, [r1, #1]
    53c0:	788b      	ldrb	r3, [r1, #2]
    53c2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    53c6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    53ca:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    53cc:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    53d0:	b98b      	cbnz	r3, 53f6 <confetti(LEDStruct&)+0x11e>
    53d2:	4620      	mov	r0, r4
    53d4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    53d8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    53da:	781a      	ldrb	r2, [r3, #0]
    53dc:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    53e0:	785a      	ldrb	r2, [r3, #1]
    53e2:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    53e6:	789a      	ldrb	r2, [r3, #2]
    53e8:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    53ec:	3303      	adds	r3, #3
    53ee:	428b      	cmp	r3, r1
    53f0:	f1a0 0003 	sub.w	r0, r0, #3
    53f4:	d1f1      	bne.n	53da <confetti(LEDStruct&)+0x102>
}
    53f6:	b005      	add	sp, #20
    53f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    53fa:	2396      	movs	r3, #150	; 0x96
    53fc:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    5400:	e7a1      	b.n	5346 <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    5402:	4620      	mov	r0, r4
    5404:	f7ff ff44 	bl	5290 <confetti_update(LEDStruct&)>
    5408:	e7a3      	b.n	5352 <confetti(LEDStruct&)+0x7a>
    540a:	bf00      	nop
    540c:	1fff8788 	.word	0x1fff8788
    5410:	1fff9619 	.word	0x1fff9619

00005414 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5414:	4b24      	ldr	r3, [pc, #144]	; (54a8 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5416:	4a25      	ldr	r2, [pc, #148]	; (54ac <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    5418:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    541a:	2100      	movs	r1, #0
    541c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    541e:	2b09      	cmp	r3, #9
    5420:	d80a      	bhi.n	5438 <one_sin_update(LEDStruct&)+0x24>
    5422:	e8df f003 	tbb	[pc, r3]
    5426:	1e10      	.short	0x1e10
    5428:	322d2823 	.word	0x322d2823
    542c:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    5430:	4b1f      	ldr	r3, [pc, #124]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    5432:	881b      	ldrh	r3, [r3, #0]
    5434:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5438:	f7fc bed0 	b.w	21dc <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    543c:	4b1c      	ldr	r3, [pc, #112]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    543e:	881b      	ldrh	r3, [r3, #0]
    5440:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    5444:	e7f8      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5446:	4b1a      	ldr	r3, [pc, #104]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    5448:	881b      	ldrh	r3, [r3, #0]
    544a:	2b00      	cmp	r3, #0
    544c:	bf14      	ite	ne
    544e:	2301      	movne	r3, #1
    5450:	2300      	moveq	r3, #0
    5452:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5456:	bf14      	ite	ne
    5458:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    545a:	234b      	moveq	r3, #75	; 0x4b
    545c:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    5460:	e7ea      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    5462:	4b13      	ldr	r3, [pc, #76]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    5464:	881b      	ldrh	r3, [r3, #0]
    5466:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    546a:	e7e5      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    546c:	4b10      	ldr	r3, [pc, #64]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    546e:	881b      	ldrh	r3, [r3, #0]
    5470:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    5474:	e7e0      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    5476:	4b0e      	ldr	r3, [pc, #56]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    5478:	881b      	ldrh	r3, [r3, #0]
    547a:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    547e:	e7db      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    5480:	4b0b      	ldr	r3, [pc, #44]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    5482:	881b      	ldrh	r3, [r3, #0]
    5484:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5488:	e7d6      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    548a:	4b09      	ldr	r3, [pc, #36]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    548c:	881b      	ldrh	r3, [r3, #0]
    548e:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    5492:	e7d1      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    5494:	4b06      	ldr	r3, [pc, #24]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    5496:	881b      	ldrh	r3, [r3, #0]
    5498:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    549c:	e7cc      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    549e:	4b04      	ldr	r3, [pc, #16]	; (54b0 <one_sin_update(LEDStruct&)+0x9c>)
    54a0:	881b      	ldrh	r3, [r3, #0]
    54a2:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    54a6:	e7c7      	b.n	5438 <one_sin_update(LEDStruct&)+0x24>
    54a8:	1fff9e66 	.word	0x1fff9e66
    54ac:	1fff9619 	.word	0x1fff9619
    54b0:	1fff9e64 	.word	0x1fff9e64

000054b4 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    54b8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    54bc:	b085      	sub	sp, #20
    54be:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    54c0:	2b00      	cmp	r3, #0
    54c2:	f040 80be 	bne.w	5642 <one_sin(LEDStruct&)+0x18e>
    54c6:	f8df c32c 	ldr.w	ip, [pc, #812]	; 57f4 <one_sin(LEDStruct&)+0x340>
    54ca:	f8bc 3000 	ldrh.w	r3, [ip]
    54ce:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    54d2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    54d6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    54da:	3619      	adds	r6, #25
    54dc:	b2b6      	uxth	r6, r6
    54de:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    54e2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    54e6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    54ea:	3119      	adds	r1, #25
    54ec:	b289      	uxth	r1, r1
    54ee:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    54f2:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    54f6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    54fa:	3519      	adds	r5, #25
    54fc:	b2ad      	uxth	r5, r5
    54fe:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    5502:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5506:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    550a:	3319      	adds	r3, #25
    550c:	b29b      	uxth	r3, r3
    550e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5512:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    5516:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    551a:	3719      	adds	r7, #25
    551c:	b2bf      	uxth	r7, r7
    551e:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    5522:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5526:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    552a:	3019      	adds	r0, #25
    552c:	b280      	uxth	r0, r0
    552e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5532:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5536:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    553a:	3219      	adds	r2, #25
    553c:	b292      	uxth	r2, r2
    553e:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    5542:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5546:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    554a:	f10e 0e19 	add.w	lr, lr, #25
    554e:	fa1f fe8e 	uxth.w	lr, lr
    5552:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    5556:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    555a:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    555e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5562:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5566:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    556a:	f108 0819 	add.w	r8, r8, #25
    556e:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the rando