
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 bd b2 00 00 75 b2 00 00     ... ........u...
      10:	75 b2 00 00 75 b2 00 00 75 b2 00 00 75 b2 00 00     u...u...u...u...
      20:	75 b2 00 00 75 b2 00 00 75 b2 00 00 bd b2 00 00     u...u...u.......
      30:	bd b2 00 00 75 b2 00 00 e9 c6 00 00 ed c7 00 00     ....u...........
      40:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      50:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      60:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      70:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      80:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      90:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      a0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      b0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      c0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      d0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      e0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      f0:	bd b2 00 00 c1 ca 00 00 bd b2 00 00 ed cb 00 00     ................
     100:	bd b2 00 00 19 cd 00 00 bd b2 00 00 bd b2 00 00     ................
     110:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     120:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     130:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     140:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     150:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     160:	bd b2 00 00 05 b7 00 00 bd b2 00 00 bd b2 00 00     ................
     170:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     180:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     190:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     1a0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     1b0:	bd b2 00 00 bd b2 00 00 bd b2 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00b f878 	bl	b2c4 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00b f8cc 	bl	b470 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00b f83d 	bl	b360 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00b f82e 	bl	b360 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00d fcee 	bl	dce8 <__libc_init_array>

	startup_late_hook();
     30c:	f00a ffe0 	bl	b2d0 <startup_late_hook>
	main();
     310:	f00c fa74 	bl	c7fc <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8840 	.word	0x1fff8840
     33c:	0001109c 	.word	0x0001109c
     340:	1fff871c 	.word	0x1fff871c
     344:	1fff8840 	.word	0x1fff8840
     348:	1fffafa8 	.word	0x1fffafa8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e6f999b 	.word	0x5e6f999b
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8840 	.word	0x1fff8840
     42c:	00000000 	.word	0x00000000
     430:	000110a0 	.word	0x000110a0

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8844 	.word	0x1fff8844
     460:	000110a0 	.word	0x000110a0
     464:	1fff8840 	.word	0x1fff8840
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>:
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
     490:	b430      	push	{r4, r5}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     492:	4d0e      	ldr	r5, [pc, #56]	; (4cc <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]+0x3c>)
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
     494:	f890 4231 	ldrb.w	r4, [r0, #561]	; 0x231
     498:	882b      	ldrh	r3, [r5, #0]
     49a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     49e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     4a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4a6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4aa:	3319      	adds	r3, #25
     4ac:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4ae:	eb03 2213 	add.w	r2, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4b2:	802b      	strh	r3, [r5, #0]
     4b4:	b2d3      	uxtb	r3, r2
     4b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     4ba:	1d22      	adds	r2, r4, #4
     4bc:	eb01 13e3 	add.w	r3, r1, r3, asr #7
     4c0:	f880 2231 	strb.w	r2, [r0, #561]	; 0x231
     4c4:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
}
     4c8:	bc30      	pop	{r4, r5}
     4ca:	4770      	bx	lr
     4cc:	1fff8784 	.word	0x1fff8784

000004d0 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.17]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     4d0:	3980      	subs	r1, #128	; 0x80
     4d2:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     4d4:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     4d6:	004b      	lsls	r3, r1, #1
     4d8:	7844      	ldrb	r4, [r0, #1]
     4da:	7882      	ldrb	r2, [r0, #2]
     4dc:	b2c9      	uxtb	r1, r1
     4de:	b2db      	uxtb	r3, r3
     4e0:	1a61      	subs	r1, r4, r1
     4e2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4e4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ec:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ee:	7083      	strb	r3, [r0, #2]
}
     4f0:	bc10      	pop	{r4}
     4f2:	4770      	bx	lr

000004f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4f4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f6:	4c1d      	ldr	r4, [pc, #116]	; (56c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x78>)
     4f8:	b083      	sub	sp, #12
     4fa:	6824      	ldr	r4, [r4, #0]
     4fc:	9401      	str	r4, [sp, #4]
	return ret;
     4fe:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     500:	28ff      	cmp	r0, #255	; 0xff
     502:	bf98      	it	ls
     504:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     506:	f44f 748c 	mov.w	r4, #280	; 0x118
     50a:	eba5 0303 	sub.w	r3, r5, r3
     50e:	fb04 f303 	mul.w	r3, r4, r3
     512:	bf98      	it	ls
     514:	b280      	uxthls	r0, r0
     516:	fb00 f003 	mul.w	r0, r0, r3
     51a:	f3c0 400e 	ubfx	r0, r0, #16, #15
     51e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     522:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     524:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     528:	d503      	bpl.n	532 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x3e>
     52a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     52e:	3307      	adds	r3, #7
     530:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     532:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     534:	4e0e      	ldr	r6, [pc, #56]	; (570 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     536:	4c0f      	ldr	r4, [pc, #60]	; (574 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     538:	5d76      	ldrb	r6, [r6, r5]
     53a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     53e:	f3c3 0546 	ubfx	r5, r3, #1, #7
     542:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     546:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     548:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     54a:	bf4a      	itet	mi
     54c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     54e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     550:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     552:	1a52      	subs	r2, r2, r1
     554:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     558:	b292      	uxth	r2, r2
     55a:	b2a3      	uxth	r3, r4
     55c:	fb02 3303 	mla	r3, r2, r3, r3
     560:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     564:	b280      	uxth	r0, r0
     566:	b003      	add	sp, #12
     568:	bc70      	pop	{r4, r5, r6}
     56a:	4770      	bx	lr
     56c:	1ffface8 	.word	0x1ffface8
     570:	0000ed30 	.word	0x0000ed30
     574:	0000e56c 	.word	0x0000e56c

00000578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     578:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     57a:	4c1e      	ldr	r4, [pc, #120]	; (5f4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)
     57c:	b083      	sub	sp, #12
     57e:	6824      	ldr	r4, [r4, #0]
     580:	9401      	str	r4, [sp, #4]
	return ret;
     582:	9d01      	ldr	r5, [sp, #4]
     584:	28ff      	cmp	r0, #255	; 0xff
     586:	bf98      	it	ls
     588:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     58a:	f44f 748c 	mov.w	r4, #280	; 0x118
     58e:	eba5 0303 	sub.w	r3, r5, r3
     592:	fb04 f303 	mul.w	r3, r4, r3
     596:	bf98      	it	ls
     598:	b280      	uxthls	r0, r0
     59a:	fb00 f003 	mul.w	r0, r0, r3
     59e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     5a2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     5a6:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5a8:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5aa:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5ae:	d503      	bpl.n	5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x40>
     5b0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5b4:	3307      	adds	r3, #7
     5b6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5b8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     5ba:	4e0f      	ldr	r6, [pc, #60]	; (5f8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5bc:	4c0f      	ldr	r4, [pc, #60]	; (5fc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5be:	5d76      	ldrb	r6, [r6, r5]
     5c0:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     5c4:	f3c3 0546 	ubfx	r5, r3, #1, #7
     5c8:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     5cc:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5ce:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     5d0:	bf4a      	itet	mi
     5d2:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5d4:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     5d6:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     5d8:	1a52      	subs	r2, r2, r1
     5da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     5de:	b292      	uxth	r2, r2
     5e0:	b2a3      	uxth	r3, r4
     5e2:	fb02 3303 	mla	r3, r2, r3, r3
     5e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5ea:	b280      	uxth	r0, r0
     5ec:	b003      	add	sp, #12
     5ee:	bc70      	pop	{r4, r5, r6}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	1ffface8 	.word	0x1ffface8
     5f8:	0000ed30 	.word	0x0000ed30
     5fc:	0000e56c 	.word	0x0000e56c

00000600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>:
    return result;
}

/// beatsin16 generates a 16-bit sine wave at a given BPM,
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     600:	b4f0      	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     602:	4c1b      	ldr	r4, [pc, #108]	; (670 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x70>)
     604:	b082      	sub	sp, #8
     606:	6824      	ldr	r4, [r4, #0]
     608:	9401      	str	r4, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     60a:	28ff      	cmp	r0, #255	; 0xff
	return ret;
     60c:	9e01      	ldr	r6, [sp, #4]
     60e:	bf98      	it	ls
     610:	0200      	lslls	r0, r0, #8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
     612:	f44f 748c 	mov.w	r4, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     616:	bf98      	it	ls
     618:	b280      	uxthls	r0, r0
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
     61a:	fb04 f606 	mul.w	r6, r4, r6
     61e:	fb00 f606 	mul.w	r6, r0, r6
     622:	eb03 4616 	add.w	r6, r3, r6, lsr #16
     626:	b2b6      	uxth	r6, r6
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     628:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     62a:	f3c6 04ca 	ubfx	r4, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     62e:	d503      	bpl.n	638 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x38>
     630:	f5c4 64ff 	rsb	r4, r4, #2040	; 0x7f8
     634:	3407      	adds	r4, #7
     636:	b2a4      	uxth	r4, r4

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     638:	0a20      	lsrs	r0, r4, #8
    uint8_t  m   = slope[section];
     63a:	4d0e      	ldr	r5, [pc, #56]	; (674 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x74>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     63c:	4b0e      	ldr	r3, [pc, #56]	; (678 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x78>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     63e:	5c2f      	ldrb	r7, [r5, r0]
     640:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
     644:	f3c4 0546 	ubfx	r5, r4, #1, #7
     648:	fb07 3405 	mla	r4, r7, r5, r3
     64c:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     64e:	0433      	lsls	r3, r6, #16
     650:	bf48      	it	mi
     652:	4264      	negmi	r4, r4
     654:	b224      	sxth	r4, r4
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     656:	1a52      	subs	r2, r2, r1
     658:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     65c:	b292      	uxth	r2, r2
     65e:	b2a3      	uxth	r3, r4
     660:	fb02 3303 	mla	r3, r2, r3, r3
     664:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     668:	b280      	uxth	r0, r0
     66a:	b002      	add	sp, #8
     66c:	bcf0      	pop	{r4, r5, r6, r7}
     66e:	4770      	bx	lr
     670:	1ffface8 	.word	0x1ffface8
     674:	0000ed30 	.word	0x0000ed30
     678:	0000e56c 	.word	0x0000e56c

0000067c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     67c:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     67e:	4b18      	ldr	r3, [pc, #96]	; (6e0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x64>)
     680:	b083      	sub	sp, #12
     682:	681b      	ldr	r3, [r3, #0]
     684:	9301      	str	r3, [sp, #4]
	return ret;
     686:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     688:	f44f 738c 	mov.w	r3, #280	; 0x118
     68c:	fb03 f606 	mul.w	r6, r3, r6
     690:	fb00 f006 	mul.w	r0, r0, r6
     694:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     696:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     698:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     69c:	d503      	bpl.n	6a6 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x2a>
     69e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     6a2:	3307      	adds	r3, #7
     6a4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     6a6:	0a18      	lsrs	r0, r3, #8
     6a8:	4d0e      	ldr	r5, [pc, #56]	; (6e4 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x68>)
    uint8_t  m   = slope[section];
     6aa:	4c0f      	ldr	r4, [pc, #60]	; (6e8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     6ac:	5c24      	ldrb	r4, [r4, r0]
     6ae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     6b2:	f3c3 0546 	ubfx	r5, r3, #1, #7
     6b6:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     6ba:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     6bc:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     6be:	bf48      	it	mi
     6c0:	4264      	negmi	r4, r4
     6c2:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     6c4:	1a53      	subs	r3, r2, r1
     6c6:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     6ca:	b29a      	uxth	r2, r3
     6cc:	b2a3      	uxth	r3, r4
     6ce:	fb02 3303 	mla	r3, r2, r3, r3
     6d2:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     6d6:	b280      	uxth	r0, r0
     6d8:	b003      	add	sp, #12
     6da:	bc70      	pop	{r4, r5, r6}
     6dc:	4770      	bx	lr
     6de:	bf00      	nop
     6e0:	1ffface8 	.word	0x1ffface8
     6e4:	0000e56c 	.word	0x0000e56c
     6e8:	0000ed30 	.word	0x0000ed30

000006ec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     6ec:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     6ee:	2101      	movs	r1, #1
     6f0:	4604      	mov	r4, r0
     6f2:	200e      	movs	r0, #14
     6f4:	f00a fe46 	bl	b384 <pinMode>
     6f8:	2007      	movs	r0, #7
     6fa:	2101      	movs	r1, #1
     6fc:	f00a fe42 	bl	b384 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     700:	69a0      	ldr	r0, [r4, #24]
     702:	b158      	cbz	r0, 71c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     704:	6803      	ldr	r3, [r0, #0]
     706:	4a07      	ldr	r2, [pc, #28]	; (724 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     708:	685b      	ldr	r3, [r3, #4]
     70a:	4293      	cmp	r3, r2
     70c:	d107      	bne.n	71e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     70e:	6842      	ldr	r2, [r0, #4]
     710:	7b01      	ldrb	r1, [r0, #12]
     712:	7813      	ldrb	r3, [r2, #0]
     714:	ea23 0301 	bic.w	r3, r3, r1
     718:	7013      	strb	r3, [r2, #0]
     71a:	bd10      	pop	{r4, pc}
     71c:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     722:	4718      	bx	r3
     724:	00000481 	.word	0x00000481

00000728 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     72c:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     72e:	6805      	ldr	r5, [r0, #0]
     730:	f88d 3004 	strb.w	r3, [sp, #4]
     734:	f88d 3005 	strb.w	r3, [sp, #5]
     738:	f88d 3006 	strb.w	r3, [sp, #6]
     73c:	682e      	ldr	r6, [r5, #0]
     73e:	4a37      	ldr	r2, [pc, #220]	; (81c <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     740:	f88d 3008 	strb.w	r3, [sp, #8]
     744:	4296      	cmp	r6, r2
     746:	f88d 3009 	strb.w	r3, [sp, #9]
     74a:	f88d 300a 	strb.w	r3, [sp, #10]
     74e:	d15f      	bne.n	810 <CLEDController::clearLeds(int)+0xe8>
     750:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     752:	9104      	str	r1, [sp, #16]
     754:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     756:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     758:	a801      	add	r0, sp, #4
     75a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     75c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     760:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     764:	f88d 3020 	strb.w	r3, [sp, #32]
     768:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     76a:	d015      	beq.n	798 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     76c:	f88d 301d 	strb.w	r3, [sp, #29]
     770:	f88d 301c 	strb.w	r3, [sp, #28]
     774:	f88d 301b 	strb.w	r3, [sp, #27]
     778:	f88d 301a 	strb.w	r3, [sp, #26]
     77c:	f88d 3019 	strb.w	r3, [sp, #25]
     780:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     784:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     786:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     788:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     78c:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     78e:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     790:	a903      	add	r1, sp, #12
     792:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     794:	b00b      	add	sp, #44	; 0x2c
     796:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     798:	4a21      	ldr	r2, [pc, #132]	; (820 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     79a:	7813      	ldrb	r3, [r2, #0]
     79c:	3301      	adds	r3, #1
     79e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7a2:	f013 0f01 	tst.w	r3, #1
     7a6:	bf14      	ite	ne
     7a8:	2180      	movne	r1, #128	; 0x80
     7aa:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7ac:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     7ae:	079a      	lsls	r2, r3, #30
     7b0:	bf44      	itt	mi
     7b2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     7b6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     7b8:	075b      	lsls	r3, r3, #29
     7ba:	bf48      	it	mi
     7bc:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     7c0:	3110      	adds	r1, #16
     7c2:	2200      	movs	r2, #0
     7c4:	b2c9      	uxtb	r1, r1
     7c6:	f10d 031b 	add.w	r3, sp, #27
     7ca:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ce:	f44f 7e80 	mov.w	lr, #256	; 0x100
     7d2:	b1aa      	cbz	r2, 800 <CLEDController::clearLeds(int)+0xd8>
     7d4:	fb9e f2f2 	sdiv	r2, lr, r2
     7d8:	b2d2      	uxtb	r2, r2
     7da:	1c50      	adds	r0, r2, #1
     7dc:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     7de:	fb00 1501 	mla	r5, r0, r1, r1
     7e2:	122d      	asrs	r5, r5, #8
     7e4:	7018      	strb	r0, [r3, #0]
     7e6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7e8:	b105      	cbz	r5, 7ec <CLEDController::clearLeds(int)+0xc4>
     7ea:	3e01      	subs	r6, #1
     7ec:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7f0:	b100      	cbz	r0, 7f4 <CLEDController::clearLeds(int)+0xcc>
     7f2:	701a      	strb	r2, [r3, #0]
     7f4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7f6:	429f      	cmp	r7, r3
     7f8:	d008      	beq.n	80c <CLEDController::clearLeds(int)+0xe4>
     7fa:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7fc:	2a00      	cmp	r2, #0
     7fe:	d1e9      	bne.n	7d4 <CLEDController::clearLeds(int)+0xac>
     800:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     802:	f803 2c03 	strb.w	r2, [r3, #-3]
     806:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     808:	429f      	cmp	r7, r3
     80a:	d1f6      	bne.n	7fa <CLEDController::clearLeds(int)+0xd2>
     80c:	6825      	ldr	r5, [r4, #0]
     80e:	e7b9      	b.n	784 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     810:	460a      	mov	r2, r1
     812:	ab02      	add	r3, sp, #8
     814:	a901      	add	r1, sp, #4
     816:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     818:	b00b      	add	sp, #44	; 0x2c
     81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     81c:	00000825 	.word	0x00000825
     820:	1fff885c 	.word	0x1fff885c

00000824 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     828:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     82a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     82c:	789b      	ldrb	r3, [r3, #2]
     82e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     830:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     832:	9101      	str	r1, [sp, #4]
     834:	9202      	str	r2, [sp, #8]
     836:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     838:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     83c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     840:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     844:	d016      	beq.n	874 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     846:	2300      	movs	r3, #0
     848:	f88d 3015 	strb.w	r3, [sp, #21]
     84c:	f88d 3014 	strb.w	r3, [sp, #20]
     850:	f88d 3013 	strb.w	r3, [sp, #19]
     854:	f88d 3012 	strb.w	r3, [sp, #18]
     858:	f88d 3011 	strb.w	r3, [sp, #17]
     85c:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     860:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     862:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     864:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     866:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     86a:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     86c:	a901      	add	r1, sp, #4
     86e:	4790      	blx	r2
  }
     870:	b009      	add	sp, #36	; 0x24
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     874:	4a1b      	ldr	r2, [pc, #108]	; (8e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     876:	7813      	ldrb	r3, [r2, #0]
     878:	3301      	adds	r3, #1
     87a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     87e:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     882:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     884:	bf14      	ite	ne
     886:	2280      	movne	r2, #128	; 0x80
     888:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     88a:	0799      	lsls	r1, r3, #30
     88c:	bf44      	itt	mi
     88e:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     892:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     894:	075b      	lsls	r3, r3, #29
     896:	bf48      	it	mi
     898:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     89c:	3210      	adds	r2, #16
     89e:	b2d2      	uxtb	r2, r2
     8a0:	f10d 0313 	add.w	r3, sp, #19
     8a4:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8a8:	f44f 7e80 	mov.w	lr, #256	; 0x100
     8ac:	b1ac      	cbz	r4, 8da <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     8ae:	fb9e f4f4 	sdiv	r4, lr, r4
     8b2:	b2e4      	uxtb	r4, r4
     8b4:	1c61      	adds	r1, r4, #1
     8b6:	b2c9      	uxtb	r1, r1
     8b8:	fb01 2502 	mla	r5, r1, r2, r2
     8bc:	122d      	asrs	r5, r5, #8
     8be:	7019      	strb	r1, [r3, #0]
     8c0:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     8c2:	b105      	cbz	r5, 8c6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     8c4:	3e01      	subs	r6, #1
     8c6:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     8ca:	b101      	cbz	r1, 8ce <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     8cc:	701c      	strb	r4, [r3, #0]
     8ce:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     8d0:	42bb      	cmp	r3, r7
     8d2:	d0c5      	beq.n	860 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     8d4:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8d6:	2c00      	cmp	r4, #0
     8d8:	d1e9      	bne.n	8ae <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     8da:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8dc:	f803 4c03 	strb.w	r4, [r3, #-3]
     8e0:	e7f5      	b.n	8ce <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     8e2:	bf00      	nop
     8e4:	1fff885c 	.word	0x1fff885c

000008e8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ec:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     8ee:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     8f0:	789b      	ldrb	r3, [r3, #2]
     8f2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8f4:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     8f6:	9101      	str	r1, [sp, #4]
     8f8:	9202      	str	r2, [sp, #8]
     8fa:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8fc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     900:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     904:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     908:	d017      	beq.n	93a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     90a:	2300      	movs	r3, #0
     90c:	f88d 3015 	strb.w	r3, [sp, #21]
     910:	f88d 3014 	strb.w	r3, [sp, #20]
     914:	f88d 3013 	strb.w	r3, [sp, #19]
     918:	f88d 3012 	strb.w	r3, [sp, #18]
     91c:	f88d 3011 	strb.w	r3, [sp, #17]
     920:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     924:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     926:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     928:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     92a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     92c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     930:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     932:	a901      	add	r1, sp, #4
     934:	4798      	blx	r3
  }
     936:	b009      	add	sp, #36	; 0x24
     938:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     93a:	4a1b      	ldr	r2, [pc, #108]	; (9a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     93c:	7813      	ldrb	r3, [r2, #0]
     93e:	3301      	adds	r3, #1
     940:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     944:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     948:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     94a:	bf14      	ite	ne
     94c:	2280      	movne	r2, #128	; 0x80
     94e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     950:	0799      	lsls	r1, r3, #30
     952:	bf44      	itt	mi
     954:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     958:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     95a:	075b      	lsls	r3, r3, #29
     95c:	bf48      	it	mi
     95e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     962:	3210      	adds	r2, #16
     964:	b2d2      	uxtb	r2, r2
     966:	f10d 0313 	add.w	r3, sp, #19
     96a:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     96e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     972:	b1ac      	cbz	r4, 9a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     974:	fb9e f4f4 	sdiv	r4, lr, r4
     978:	b2e4      	uxtb	r4, r4
     97a:	1c61      	adds	r1, r4, #1
     97c:	b2c9      	uxtb	r1, r1
     97e:	fb01 2502 	mla	r5, r1, r2, r2
     982:	122d      	asrs	r5, r5, #8
     984:	7019      	strb	r1, [r3, #0]
     986:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     988:	b105      	cbz	r5, 98c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     98a:	3e01      	subs	r6, #1
     98c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     990:	b101      	cbz	r1, 994 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     992:	701c      	strb	r4, [r3, #0]
     994:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     996:	42bb      	cmp	r3, r7
     998:	d0c4      	beq.n	924 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     99a:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     99c:	2c00      	cmp	r4, #0
     99e:	d1e9      	bne.n	974 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     9a0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     9a2:	f803 4c03 	strb.w	r4, [r3, #-3]
     9a6:	e7f5      	b.n	994 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     9a8:	1fff885c 	.word	0x1fff885c

000009ac <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	4604      	mov	r4, r0
     9b0:	4608      	mov	r0, r1
     9b2:	460d      	mov	r5, r1
     9b4:	f00d fa84 	bl	dec0 <strlen>
     9b8:	6823      	ldr	r3, [r4, #0]
     9ba:	4602      	mov	r2, r0
     9bc:	4629      	mov	r1, r5
     9be:	4620      	mov	r0, r4
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     9c6:	4718      	bx	r3

000009c8 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9c8:	b538      	push	{r3, r4, r5, lr}
     9ca:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9cc:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9ce:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9d0:	f00d fa76 	bl	dec0 <strlen>
     9d4:	6823      	ldr	r3, [r4, #0]
     9d6:	4602      	mov	r2, r0
     9d8:	4629      	mov	r1, r5
     9da:	685b      	ldr	r3, [r3, #4]
     9dc:	4620      	mov	r0, r4
     9de:	4798      	blx	r3
     9e0:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9e2:	4620      	mov	r0, r4
     9e4:	f00b ff12 	bl	c80c <Print::println()>
     9e8:	4428      	add	r0, r5
     9ea:	bd38      	pop	{r3, r4, r5, pc}

000009ec <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9f0:	780d      	ldrb	r5, [r1, #0]
     9f2:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     9f4:	784d      	ldrb	r5, [r1, #1]
     9f6:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     9f8:	7889      	ldrb	r1, [r1, #2]
     9fa:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9fc:	7811      	ldrb	r1, [r2, #0]
     9fe:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     a00:	7851      	ldrb	r1, [r2, #1]
     a02:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     a04:	7892      	ldrb	r2, [r2, #2]
     a06:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a08:	781a      	ldrb	r2, [r3, #0]
     a0a:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     a0c:	785a      	ldrb	r2, [r3, #1]
     a0e:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     a10:	789b      	ldrb	r3, [r3, #2]
     a12:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     a16:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a18:	f89a b000 	ldrb.w	fp, [sl]
     a1c:	f880 b009 	strb.w	fp, [r0, #9]
     a20:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     a24:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     a28:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     a2c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     a2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a30:	9d10      	ldr	r5, [sp, #64]	; 0x40
     a32:	9911      	ldr	r1, [sp, #68]	; 0x44
     a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
     a36:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     a38:	f89a b001 	ldrb.w	fp, [sl, #1]
     a3c:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     a40:	f89a a002 	ldrb.w	sl, [sl, #2]
     a44:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a48:	f899 a000 	ldrb.w	sl, [r9]
     a4c:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     a50:	f899 a001 	ldrb.w	sl, [r9, #1]
     a54:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     a58:	f899 9002 	ldrb.w	r9, [r9, #2]
     a5c:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a60:	f898 9000 	ldrb.w	r9, [r8]
     a64:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     a68:	f898 9001 	ldrb.w	r9, [r8, #1]
     a6c:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     a70:	f898 8002 	ldrb.w	r8, [r8, #2]
     a74:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a78:	f89c 8000 	ldrb.w	r8, [ip]
     a7c:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     a80:	f89c 8001 	ldrb.w	r8, [ip, #1]
     a84:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     a88:	f89c c002 	ldrb.w	ip, [ip, #2]
     a8c:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a90:	f89e c000 	ldrb.w	ip, [lr]
     a94:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     a98:	f89e c001 	ldrb.w	ip, [lr, #1]
     a9c:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     aa0:	f89e e002 	ldrb.w	lr, [lr, #2]
     aa4:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aa8:	f897 e000 	ldrb.w	lr, [r7]
     aac:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     ab0:	f897 e001 	ldrb.w	lr, [r7, #1]
     ab4:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     ab8:	78bf      	ldrb	r7, [r7, #2]
     aba:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     abc:	7837      	ldrb	r7, [r6, #0]
     abe:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     ac0:	7877      	ldrb	r7, [r6, #1]
     ac2:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     ac4:	78b6      	ldrb	r6, [r6, #2]
     ac6:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac8:	782e      	ldrb	r6, [r5, #0]
     aca:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     acc:	786e      	ldrb	r6, [r5, #1]
     ace:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     ad0:	78ad      	ldrb	r5, [r5, #2]
     ad2:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ad6:	780d      	ldrb	r5, [r1, #0]
     ad8:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     adc:	784d      	ldrb	r5, [r1, #1]
     ade:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     ae2:	7889      	ldrb	r1, [r1, #2]
     ae4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ae8:	7811      	ldrb	r1, [r2, #0]
     aea:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     aee:	7851      	ldrb	r1, [r2, #1]
     af0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     af4:	7892      	ldrb	r2, [r2, #2]
     af6:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     afc:	7812      	ldrb	r2, [r2, #0]
     afe:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     b02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     b04:	7852      	ldrb	r2, [r2, #1]
     b06:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     b0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     b0c:	7892      	ldrb	r2, [r2, #2]
     b0e:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b12:	9a14      	ldr	r2, [sp, #80]	; 0x50
     b14:	7812      	ldrb	r2, [r2, #0]
     b16:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
     b1c:	7852      	ldrb	r2, [r2, #1]
     b1e:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     b22:	9a14      	ldr	r2, [sp, #80]	; 0x50
     b24:	7892      	ldrb	r2, [r2, #2]
     b26:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b2a:	781a      	ldrb	r2, [r3, #0]
     b2c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     b30:	785a      	ldrb	r2, [r3, #1]
     b32:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     b36:	789b      	ldrb	r3, [r3, #2]
     b38:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b40 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b44:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b46:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b48:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b4a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b4e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b50:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b52:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b54:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b56:	d1f8      	bne.n	b4a <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b58:	680b      	ldr	r3, [r1, #0]
     b5a:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     b5c:	ea4f 6813 	mov.w	r8, r3, lsr #24
     b60:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b64:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b68:	f04f 33ff 	mov.w	r3, #4294967295
     b6c:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b6e:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b70:	9305      	str	r3, [sp, #20]
     b72:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b74:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b78:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b7a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     b7e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b82:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b86:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b88:	b2f9      	uxtb	r1, r7
     b8a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b8e:	9103      	str	r1, [sp, #12]
     b90:	b2e9      	uxtb	r1, r5
     b92:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b94:	fa5f f18c 	uxtb.w	r1, ip
     b98:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b9a:	9907      	ldr	r1, [sp, #28]
     b9c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b9e:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ba0:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ba4:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ba8:	d80c      	bhi.n	bc4 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     baa:	9905      	ldr	r1, [sp, #20]
     bac:	458c      	cmp	ip, r1
     bae:	dc07      	bgt.n	bc0 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     bb0:	290f      	cmp	r1, #15
     bb2:	d005      	beq.n	bc0 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     bb4:	3101      	adds	r1, #1
     bb6:	b2c9      	uxtb	r1, r1
     bb8:	428b      	cmp	r3, r1
     bba:	9102      	str	r1, [sp, #8]
     bbc:	bf38      	it	cc
     bbe:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     bc0:	b259      	sxtb	r1, r3
     bc2:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bc4:	a909      	add	r1, sp, #36	; 0x24
     bc6:	9100      	str	r1, [sp, #0]
     bc8:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bca:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     bce:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     bd2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bd6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     bda:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     bde:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     be2:	f009 fb6b 	bl	a2bc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     be6:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     be8:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bec:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     bf0:	46d1      	mov	r9, sl
     bf2:	d1bf      	bne.n	b74 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     bf4:	9806      	ldr	r0, [sp, #24]
     bf6:	b00b      	add	sp, #44	; 0x2c
     bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bfc <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     bfc:	4b48      	ldr	r3, [pc, #288]	; (d20 <updatePaletteIndex(LEDStruct&)+0x124>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	2b00      	cmp	r3, #0
     c02:	f000 808b 	beq.w	d1c <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c0a:	b09b      	sub	sp, #108	; 0x6c
     c0c:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     c10:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     c12:	2300      	movs	r3, #0
     c14:	4a43      	ldr	r2, [pc, #268]	; (d24 <updatePaletteIndex(LEDStruct&)+0x128>)
     c16:	9307      	str	r3, [sp, #28]
     c18:	f8df 910c 	ldr.w	r9, [pc, #268]	; d28 <updatePaletteIndex(LEDStruct&)+0x12c>
     c1c:	9009      	str	r0, [sp, #36]	; 0x24
     c1e:	f200 2327 	addw	r3, r0, #551	; 0x227
     c22:	9208      	str	r2, [sp, #32]
     c24:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     c26:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     c28:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     c2c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c2e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     c30:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c32:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     c34:	d1f8      	bne.n	c28 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c36:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     c3a:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c3c:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c40:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c44:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c46:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     c4a:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     c4e:	2400      	movs	r4, #0
     c50:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c52:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c56:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     c5a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c5e:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     c62:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     c64:	b2f1      	uxtb	r1, r6
     c66:	f3c5 6507 	ubfx	r5, r5, #24, #8
     c6a:	9103      	str	r1, [sp, #12]
     c6c:	b2e9      	uxtb	r1, r5
     c6e:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     c70:	fa5f f18c 	uxtb.w	r1, ip
     c74:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     c76:	9906      	ldr	r1, [sp, #24]
     c78:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c7a:	aa0c      	add	r2, sp, #48	; 0x30
     c7c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     c7e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c82:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c86:	d80c      	bhi.n	ca2 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c88:	9905      	ldr	r1, [sp, #20]
     c8a:	458c      	cmp	ip, r1
     c8c:	dc07      	bgt.n	c9e <updatePaletteIndex(LEDStruct&)+0xa2>
     c8e:	290f      	cmp	r1, #15
     c90:	d005      	beq.n	c9e <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     c92:	3101      	adds	r1, #1
     c94:	b2c9      	uxtb	r1, r1
     c96:	428b      	cmp	r3, r1
     c98:	9102      	str	r1, [sp, #8]
     c9a:	bf38      	it	cc
     c9c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c9e:	b259      	sxtb	r1, r3
     ca0:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ca2:	a90d      	add	r1, sp, #52	; 0x34
     ca4:	9100      	str	r1, [sp, #0]
     ca6:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ca8:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     cac:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     cb0:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cb4:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     cb8:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     cbc:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     cc0:	f009 fafc 	bl	a2bc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     cc4:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cc6:	46d3      	mov	fp, sl
        g = rhs.g;
     cc8:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ccc:	f8dd 8010 	ldr.w	r8, [sp, #16]
     cd0:	d1bf      	bne.n	c52 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     cd4:	aa0e      	add	r2, sp, #56	; 0x38
     cd6:	4293      	cmp	r3, r2
     cd8:	d018      	beq.n	d0c <updatePaletteIndex(LEDStruct&)+0x110>
     cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     cde:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     ce2:	e001      	b.n	ce8 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     ce4:	42a3      	cmp	r3, r4
     ce6:	d011      	beq.n	d0c <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     ce8:	f812 1b01 	ldrb.w	r1, [r2], #1
     cec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     cf0:	4288      	cmp	r0, r1
     cf2:	d0f7      	beq.n	ce4 <updatePaletteIndex(LEDStruct&)+0xe8>
     cf4:	4b0a      	ldr	r3, [pc, #40]	; (d20 <updatePaletteIndex(LEDStruct&)+0x124>)
     cf6:	9a07      	ldr	r2, [sp, #28]
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	3201      	adds	r2, #1
     cfc:	4293      	cmp	r3, r2
     cfe:	9207      	str	r2, [sp, #28]
     d00:	dd09      	ble.n	d16 <updatePaletteIndex(LEDStruct&)+0x11a>
     d02:	9b08      	ldr	r3, [sp, #32]
     d04:	f853 9f04 	ldr.w	r9, [r3, #4]!
     d08:	9308      	str	r3, [sp, #32]
     d0a:	e78c      	b.n	c26 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d0e:	f89d 201c 	ldrb.w	r2, [sp, #28]
     d12:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     d16:	b01b      	add	sp, #108	; 0x6c
     d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d1c:	4770      	bx	lr
     d1e:	bf00      	nop
     d20:	1fff8750 	.word	0x1fff8750
     d24:	0000eb18 	.word	0x0000eb18
     d28:	000108c8 	.word	0x000108c8

00000d2c <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d30:	4d42      	ldr	r5, [pc, #264]	; (e3c <initialize()+0x110>)
		}
	}
}

// Initialization function
void initialize() {
     d32:	b082      	sub	sp, #8
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d34:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     d36:	2400      	movs	r4, #0
     d38:	4628      	mov	r0, r5
     d3a:	2196      	movs	r1, #150	; 0x96
     d3c:	f88d 4004 	strb.w	r4, [sp, #4]
     d40:	f88d 4005 	strb.w	r4, [sp, #5]
     d44:	f88d 4006 	strb.w	r4, [sp, #6]
     d48:	f009 fa88 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     d4c:	493c      	ldr	r1, [pc, #240]	; (e40 <initialize()+0x114>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     d4e:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     d52:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     d56:	f7ff fef3 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     d5a:	493a      	ldr	r1, [pc, #232]	; (e44 <initialize()+0x118>)
     d5c:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     d60:	f7ff feee 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     d64:	4628      	mov	r0, r5
     d66:	f7ff ff49 	bl	bfc <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     d6a:	4b37      	ldr	r3, [pc, #220]	; (e48 <initialize()+0x11c>)
     d6c:	4a37      	ldr	r2, [pc, #220]	; (e4c <initialize()+0x120>)
     d6e:	7818      	ldrb	r0, [r3, #0]
     d70:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     d74:	4623      	mov	r3, r4
     d76:	e001      	b.n	d7c <initialize()+0x50>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     d78:	2b1d      	cmp	r3, #29
     d7a:	d008      	beq.n	d8e <initialize()+0x62>
		if (leds.mode_name == ModeList[i]) {
     d7c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     d80:	4281      	cmp	r1, r0
     d82:	b2dc      	uxtb	r4, r3
     d84:	f103 0301 	add.w	r3, r3, #1
     d88:	d1f6      	bne.n	d78 <initialize()+0x4c>
			leds.mode_number = i;
     d8a:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d8e:	4e30      	ldr	r6, [pc, #192]	; (e50 <initialize()+0x124>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; e64 <initialize()+0x138>
	curr_over_leds.array_type		= CURR_OVERLAY;
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d94:	4f2f      	ldr	r7, [pc, #188]	; (e54 <initialize()+0x128>)
     d96:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d98:	aa01      	add	r2, sp, #4
     d9a:	4630      	mov	r0, r6
     d9c:	2196      	movs	r1, #150	; 0x96
     d9e:	f88d 4004 	strb.w	r4, [sp, #4]
     da2:	f88d 4005 	strb.w	r4, [sp, #5]
     da6:	f88d 4006 	strb.w	r4, [sp, #6]
     daa:	f009 fa57 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     dae:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     db0:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     db4:	4928      	ldr	r1, [pc, #160]	; (e58 <initialize()+0x12c>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     db6:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     dba:	f7ff fec1 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     dbe:	4927      	ldr	r1, [pc, #156]	; (e5c <initialize()+0x130>)
     dc0:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     dc4:	f7ff febc 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     dc8:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     dcc:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     dd0:	4630      	mov	r0, r6
     dd2:	f7ff ff13 	bl	bfc <updatePaletteIndex(LEDStruct&)>

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     dd6:	aa01      	add	r2, sp, #4
     dd8:	4640      	mov	r0, r8
     dda:	2196      	movs	r1, #150	; 0x96
     ddc:	f88d 4004 	strb.w	r4, [sp, #4]
     de0:	f88d 4005 	strb.w	r4, [sp, #5]
     de4:	f88d 4006 	strb.w	r4, [sp, #6]
     de8:	f009 fa38 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
     dec:	2302      	movs	r3, #2
	curr_over_leds.current_palette	= cequal_gp;
     dee:	f508 70e4 	add.w	r0, r8, #456	; 0x1c8
     df2:	491b      	ldr	r1, [pc, #108]	; (e60 <initialize()+0x134>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_over_leds.array_type		= CURR_OVERLAY;
     df4:	f888 31c6 	strb.w	r3, [r8, #454]	; 0x1c6
	curr_over_leds.current_palette	= cequal_gp;
     df8:	f7ff fea2 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	curr_over_leds.target_palette	= cequal_gp;
     dfc:	f508 70fc 	add.w	r0, r8, #504	; 0x1f8
     e00:	4917      	ldr	r1, [pc, #92]	; (e60 <initialize()+0x134>)
     e02:	f7ff fe9d 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     e06:	aa01      	add	r2, sp, #4
     e08:	4638      	mov	r0, r7
     e0a:	2196      	movs	r1, #150	; 0x96
     e0c:	f88d 4004 	strb.w	r4, [sp, #4]
     e10:	f88d 4005 	strb.w	r4, [sp, #5]
     e14:	f88d 4006 	strb.w	r4, [sp, #6]
     e18:	f009 fa20 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
     e1c:	2303      	movs	r3, #3
	next_over_leds.current_palette = cequal_gp;
     e1e:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     e22:	490f      	ldr	r1, [pc, #60]	; (e60 <initialize()+0x134>)
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	next_over_leds.array_type = NEXT_OVERLAY;
     e24:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	next_over_leds.current_palette = cequal_gp;
     e28:	f7ff fe8a 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	next_over_leds.target_palette = cequal_gp;
     e2c:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     e30:	490b      	ldr	r1, [pc, #44]	; (e60 <initialize()+0x134>)
     e32:	f7ff fe85 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
}
     e36:	b002      	add	sp, #8
     e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e3c:	1fffa26c 	.word	0x1fffa26c
     e40:	00010ca4 	.word	0x00010ca4
     e44:	0000ec8c 	.word	0x0000ec8c
     e48:	1fff8749 	.word	0x1fff8749
     e4c:	1fff8723 	.word	0x1fff8723
     e50:	1fff8884 	.word	0x1fff8884
     e54:	1fff9a2c 	.word	0x1fff9a2c
     e58:	00010aa8 	.word	0x00010aa8
     e5c:	00010a68 	.word	0x00010a68
     e60:	00010b1c 	.word	0x00010b1c
     e64:	1fff91d8 	.word	0x1fff91d8

00000e68 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e68:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e6a:	2112      	movs	r1, #18
     e6c:	b082      	sub	sp, #8
     e6e:	4834      	ldr	r0, [pc, #208]	; (f40 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e70:	4c34      	ldr	r4, [pc, #208]	; (f44 <global_debug()+0xdc>)
     e72:	f00b fac7 	bl	c404 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e76:	4b34      	ldr	r3, [pc, #208]	; (f48 <global_debug()+0xe0>)
     e78:	4620      	mov	r0, r4
     e7a:	7819      	ldrb	r1, [r3, #0]
     e7c:	f00b fd16 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e80:	4620      	mov	r0, r4
     e82:	f00b fcc3 	bl	c80c <Print::println()>
     e86:	2111      	movs	r1, #17
     e88:	4830      	ldr	r0, [pc, #192]	; (f4c <global_debug()+0xe4>)
     e8a:	f00b fabb 	bl	c404 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e8e:	4b30      	ldr	r3, [pc, #192]	; (f50 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e90:	4620      	mov	r0, r4
     e92:	7819      	ldrb	r1, [r3, #0]
     e94:	f00b fd0a 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e98:	4620      	mov	r0, r4
     e9a:	f00b fcb7 	bl	c80c <Print::println()>
     e9e:	2115      	movs	r1, #21
     ea0:	482c      	ldr	r0, [pc, #176]	; (f54 <global_debug()+0xec>)
     ea2:	f00b faaf 	bl	c404 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     ea6:	4b2c      	ldr	r3, [pc, #176]	; (f58 <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea8:	4620      	mov	r0, r4
     eaa:	7819      	ldrb	r1, [r3, #0]
     eac:	f00b fcfe 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     eb0:	4620      	mov	r0, r4
     eb2:	f00b fcab 	bl	c80c <Print::println()>
     eb6:	2111      	movs	r1, #17
     eb8:	4828      	ldr	r0, [pc, #160]	; (f5c <global_debug()+0xf4>)
     eba:	f00b faa3 	bl	c404 <usb_serial_write>
	Serial.print("(T) Mode Timer:\t\t");
	Serial.println(mode_change_time);
     ebe:	4b28      	ldr	r3, [pc, #160]	; (f60 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ec0:	4620      	mov	r0, r4
     ec2:	8819      	ldrh	r1, [r3, #0]
     ec4:	f00b fcf2 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ec8:	4620      	mov	r0, r4
     eca:	f00b fc9f 	bl	c80c <Print::println()>
     ece:	2114      	movs	r1, #20
     ed0:	4824      	ldr	r0, [pc, #144]	; (f64 <global_debug()+0xfc>)
     ed2:	f00b fa97 	bl	c404 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     ed6:	4b24      	ldr	r3, [pc, #144]	; (f68 <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ed8:	4620      	mov	r0, r4
     eda:	8819      	ldrh	r1, [r3, #0]
     edc:	f00b fce6 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ee0:	4620      	mov	r0, r4
     ee2:	f00b fc93 	bl	c80c <Print::println()>
     ee6:	210f      	movs	r1, #15
     ee8:	4820      	ldr	r0, [pc, #128]	; (f6c <global_debug()+0x104>)
     eea:	f00b fa8b 	bl	c404 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     eee:	4b20      	ldr	r3, [pc, #128]	; (f70 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ef0:	4620      	mov	r0, r4
     ef2:	8819      	ldrh	r1, [r3, #0]
     ef4:	f00b fcda 	bl	c8ac <Print::print(long)>
     ef8:	2102      	movs	r1, #2
     efa:	481e      	ldr	r0, [pc, #120]	; (f74 <global_debug()+0x10c>)
     efc:	f00b fa82 	bl	c404 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     f00:	4b1d      	ldr	r3, [pc, #116]	; (f78 <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f02:	220a      	movs	r2, #10
     f04:	7819      	ldrb	r1, [r3, #0]
     f06:	4620      	mov	r0, r4
     f08:	2300      	movs	r3, #0
     f0a:	f00b fc8f 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f0e:	2101      	movs	r1, #1
     f10:	481a      	ldr	r0, [pc, #104]	; (f7c <global_debug()+0x114>)
     f12:	f00b fa77 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     f16:	4620      	mov	r0, r4
     f18:	f00b fc78 	bl	c80c <Print::println()>
     f1c:	210e      	movs	r1, #14
     f1e:	4818      	ldr	r0, [pc, #96]	; (f80 <global_debug()+0x118>)
     f20:	f00b fa70 	bl	c404 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f24:	4b17      	ldr	r3, [pc, #92]	; (f84 <global_debug()+0x11c>)
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	9301      	str	r3, [sp, #4]
	return ret;
     f2a:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f2c:	2300      	movs	r3, #0
     f2e:	220a      	movs	r2, #10
     f30:	4620      	mov	r0, r4
     f32:	f00b fc7b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     f36:	4620      	mov	r0, r4
     f38:	f00b fc68 	bl	c80c <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f3c:	b002      	add	sp, #8
     f3e:	bd10      	pop	{r4, pc}
     f40:	0000f1fc 	.word	0x0000f1fc
     f44:	1fff878c 	.word	0x1fff878c
     f48:	1fff8783 	.word	0x1fff8783
     f4c:	0000f210 	.word	0x0000f210
     f50:	1fff874a 	.word	0x1fff874a
     f54:	0000f224 	.word	0x0000f224
     f58:	1fff8758 	.word	0x1fff8758
     f5c:	0000f23c 	.word	0x0000f23c
     f60:	1fff871c 	.word	0x1fff871c
     f64:	0000f250 	.word	0x0000f250
     f68:	1fff8880 	.word	0x1fff8880
     f6c:	0000f268 	.word	0x0000f268
     f70:	1fff91d2 	.word	0x1fff91d2
     f74:	0000f278 	.word	0x0000f278
     f78:	1fff9131 	.word	0x1fff9131
     f7c:	0000f27c 	.word	0x0000f27c
     f80:	0000f280 	.word	0x0000f280
     f84:	1ffface8 	.word	0x1ffface8

00000f88 <begin_transition()>:
     f88:	491e      	ldr	r1, [pc, #120]	; (1004 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f8a:	481f      	ldr	r0, [pc, #124]	; (1008 <begin_transition()+0x80>)
     f8c:	880b      	ldrh	r3, [r1, #0]
     f8e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f96:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f9a:	3319      	adds	r3, #25
     f9c:	b29b      	uxth	r3, r3
     f9e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     fa2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     fa6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     faa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fae:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fb0:	b2db      	uxtb	r3, r3
     fb2:	b292      	uxth	r2, r2
     fb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     fb8:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fba:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     fbc:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     fc0:	4e12      	ldr	r6, [pc, #72]	; (100c <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     fc2:	4d13      	ldr	r5, [pc, #76]	; (1010 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fc4:	5cf3      	ldrb	r3, [r6, r3]
     fc6:	4c13      	ldr	r4, [pc, #76]	; (1014 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fc8:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     fca:	b2ff      	uxtb	r7, r7
     fcc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fd0:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fd2:	123f      	asrs	r7, r7, #8
     fd4:	3703      	adds	r7, #3
	switch (transition_type) {
     fd6:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fd8:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fda:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fdc:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fde:	d00c      	beq.n	ffa <begin_transition()+0x72>
     fe0:	d306      	bcc.n	ff0 <begin_transition()+0x68>
     fe2:	2b02      	cmp	r3, #2
     fe4:	d102      	bne.n	fec <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <begin_transition()+0x90>)
     fe8:	2200      	movs	r2, #0
     fea:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fec:	bcf0      	pop	{r4, r5, r6, r7}
     fee:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     ff0:	4b0a      	ldr	r3, [pc, #40]	; (101c <begin_transition()+0x94>)
     ff2:	2200      	movs	r2, #0
     ff4:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     ff6:	bcf0      	pop	{r4, r5, r6, r7}
     ff8:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     ffa:	4b07      	ldr	r3, [pc, #28]	; (1018 <begin_transition()+0x90>)
     ffc:	224a      	movs	r2, #74	; 0x4a
     ffe:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
    1000:	bcf0      	pop	{r4, r5, r6, r7}
    1002:	4770      	bx	lr
    1004:	1fff8784 	.word	0x1fff8784
    1008:	1fff90d0 	.word	0x1fff90d0
    100c:	1fff8720 	.word	0x1fff8720
    1010:	1fff9a19 	.word	0x1fff9a19
    1014:	1fff90dc 	.word	0x1fff90dc
    1018:	1fff910c 	.word	0x1fff910c
    101c:	1fff8882 	.word	0x1fff8882

00001020 <LEDStruct::operator=(LEDStruct const&)>:
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    1020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1022:	1cca      	adds	r2, r1, #3
    1024:	4604      	mov	r4, r0
    1026:	1cc3      	adds	r3, r0, #3
    1028:	460d      	mov	r5, r1
    102a:	f200 10c5 	addw	r0, r0, #453	; 0x1c5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    102e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    1032:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    1036:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    103a:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    103e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    1042:	f803 1c01 	strb.w	r1, [r3, #-1]
    1046:	3303      	adds	r3, #3
    1048:	4298      	cmp	r0, r3
    104a:	f102 0203 	add.w	r2, r2, #3
    104e:	d1ee      	bne.n	102e <LEDStruct::operator=(LEDStruct const&)+0xe>
    1050:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    1054:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
    1058:	f895 31c3 	ldrb.w	r3, [r5, #451]	; 0x1c3
    105c:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
    1060:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    1064:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
    1068:	f895 11c5 	ldrb.w	r1, [r5, #453]	; 0x1c5
    106c:	f895 21c6 	ldrb.w	r2, [r5, #454]	; 0x1c6
    1070:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
    1074:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
    1078:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
    107c:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1080:	2230      	movs	r2, #48	; 0x30
    1082:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
    1086:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    108a:	f00c fe55 	bl	dd38 <memmove>
    108e:	2230      	movs	r2, #48	; 0x30
    1090:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    1094:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    1098:	f00c fe4e 	bl	dd38 <memmove>
    109c:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
    10a0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    10a4:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
    10a8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    10ac:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
    10b0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    10b4:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
    10b8:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
    10bc:	f895 122c 	ldrb.w	r1, [r5, #556]	; 0x22c
    10c0:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    10c4:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    10c8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    10cc:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    10d0:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
    10d4:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    10d8:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    10dc:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    10e0:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    10e4:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    10e8:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
    10ec:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
    10f0:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    10f4:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    10f8:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    10fc:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
    1100:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
    1104:	f895 1234 	ldrb.w	r1, [r5, #564]	; 0x234
    1108:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    110c:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    1110:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    1114:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    1118:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    111c:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
    1120:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    1124:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
    1128:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    112c:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
    1130:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    1134:	f205 223e 	addw	r2, r5, #574	; 0x23e
    1138:	f204 233e 	addw	r3, r4, #574	; 0x23e
    113c:	f204 207a 	addw	r0, r4, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1140:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    1144:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    1148:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    114c:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1150:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    1154:	f803 1c01 	strb.w	r1, [r3, #-1]
    1158:	3303      	adds	r3, #3
    115a:	4298      	cmp	r0, r3
    115c:	f102 0203 	add.w	r2, r2, #3
    1160:	d1ee      	bne.n	1140 <LEDStruct::operator=(LEDStruct const&)+0x120>
    1162:	f895 3277 	ldrb.w	r3, [r5, #631]	; 0x277
    1166:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
    116a:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
    116e:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    1172:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
    1176:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    117a:	f895 327a 	ldrb.w	r3, [r5, #634]	; 0x27a
    117e:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    1182:	f895 327b 	ldrb.w	r3, [r5, #635]	; 0x27b
    1186:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    118a:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    118e:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    1192:	f895 327d 	ldrb.w	r3, [r5, #637]	; 0x27d
    1196:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    119a:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
    119e:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    11a2:	f895 327f 	ldrb.w	r3, [r5, #639]	; 0x27f
    11a6:	f884 327f 	strb.w	r3, [r4, #639]	; 0x27f
    11aa:	f205 227f 	addw	r2, r5, #639	; 0x27f
    11ae:	f504 7320 	add.w	r3, r4, #640	; 0x280
    11b2:	f204 20cb 	addw	r0, r4, #715	; 0x2cb
    11b6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11ba:	f803 1b01 	strb.w	r1, [r3], #1
    11be:	4283      	cmp	r3, r0
    11c0:	d1f9      	bne.n	11b6 <LEDStruct::operator=(LEDStruct const&)+0x196>
    11c2:	f205 22ca 	addw	r2, r5, #714	; 0x2ca
    11c6:	f204 3016 	addw	r0, r4, #790	; 0x316
    11ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11ce:	f803 1b01 	strb.w	r1, [r3], #1
    11d2:	4283      	cmp	r3, r0
    11d4:	d1f9      	bne.n	11ca <LEDStruct::operator=(LEDStruct const&)+0x1aa>
    11d6:	f895 0316 	ldrb.w	r0, [r5, #790]	; 0x316
    11da:	f8b5 1318 	ldrh.w	r1, [r5, #792]	; 0x318
    11de:	f8b5 231a 	ldrh.w	r2, [r5, #794]	; 0x31a
    11e2:	f8b5 331c 	ldrh.w	r3, [r5, #796]	; 0x31c
    11e6:	f8a4 331c 	strh.w	r3, [r4, #796]	; 0x31c
    11ea:	f884 0316 	strb.w	r0, [r4, #790]	; 0x316
    11ee:	f8a4 1318 	strh.w	r1, [r4, #792]	; 0x318
    11f2:	f8a4 231a 	strh.w	r2, [r4, #794]	; 0x31a
    11f6:	f895 331e 	ldrb.w	r3, [r5, #798]	; 0x31e
    11fa:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
    11fe:	f895 331f 	ldrb.w	r3, [r5, #799]	; 0x31f
    1202:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
    1206:	f895 3320 	ldrb.w	r3, [r5, #800]	; 0x320
    120a:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
    120e:	f895 3321 	ldrb.w	r3, [r5, #801]	; 0x321
    1212:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
    1216:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    121a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
    121e:	f895 3323 	ldrb.w	r3, [r5, #803]	; 0x323
    1222:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
    1226:	f8b5 0328 	ldrh.w	r0, [r5, #808]	; 0x328
    122a:	f8b5 132a 	ldrh.w	r1, [r5, #810]	; 0x32a
    122e:	f8b5 232c 	ldrh.w	r2, [r5, #812]	; 0x32c
    1232:	f8b5 332e 	ldrh.w	r3, [r5, #814]	; 0x32e
    1236:	f8b5 7324 	ldrh.w	r7, [r5, #804]	; 0x324
    123a:	f8b5 6326 	ldrh.w	r6, [r5, #806]	; 0x326
    123e:	f8a4 6326 	strh.w	r6, [r4, #806]	; 0x326
    1242:	f8a4 0328 	strh.w	r0, [r4, #808]	; 0x328
    1246:	f8a4 132a 	strh.w	r1, [r4, #810]	; 0x32a
    124a:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c
    124e:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    1252:	f8a4 7324 	strh.w	r7, [r4, #804]	; 0x324
    1256:	f8b5 6330 	ldrh.w	r6, [r5, #816]	; 0x330
    125a:	f8b5 1334 	ldrh.w	r1, [r5, #820]	; 0x334
    125e:	f8b5 2336 	ldrh.w	r2, [r5, #822]	; 0x336
    1262:	f8b5 3338 	ldrh.w	r3, [r5, #824]	; 0x338
    1266:	f8b5 0332 	ldrh.w	r0, [r5, #818]	; 0x332
    126a:	f8a4 0332 	strh.w	r0, [r4, #818]	; 0x332
    126e:	f8a4 1334 	strh.w	r1, [r4, #820]	; 0x334
    1272:	f8a4 2336 	strh.w	r2, [r4, #822]	; 0x336
    1276:	f8a4 6330 	strh.w	r6, [r4, #816]	; 0x330
    127a:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
    127e:	f895 333a 	ldrb.w	r3, [r5, #826]	; 0x33a
    1282:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
    1286:	f895 333b 	ldrb.w	r3, [r5, #827]	; 0x33b
    128a:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
    128e:	f895 333c 	ldrb.w	r3, [r5, #828]	; 0x33c
    1292:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
    1296:	f895 333d 	ldrb.w	r3, [r5, #829]	; 0x33d
    129a:	f884 333d 	strb.w	r3, [r4, #829]	; 0x33d
    129e:	f895 333e 	ldrb.w	r3, [r5, #830]	; 0x33e
    12a2:	f884 333e 	strb.w	r3, [r4, #830]	; 0x33e
    12a6:	f895 333f 	ldrb.w	r3, [r5, #831]	; 0x33f
    12aa:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
    12ae:	f895 3340 	ldrb.w	r3, [r5, #832]	; 0x340
    12b2:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
    12b6:	f895 3341 	ldrb.w	r3, [r5, #833]	; 0x341
    12ba:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
    12be:	f895 3342 	ldrb.w	r3, [r5, #834]	; 0x342
    12c2:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    12c6:	f895 3343 	ldrb.w	r3, [r5, #835]	; 0x343
    12ca:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
    12ce:	f895 3344 	ldrb.w	r3, [r5, #836]	; 0x344
    12d2:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
    12d6:	f895 3345 	ldrb.w	r3, [r5, #837]	; 0x345
    12da:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    12de:	f895 3346 	ldrb.w	r3, [r5, #838]	; 0x346
    12e2:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    12e6:	f895 3347 	ldrb.w	r3, [r5, #839]	; 0x347
    12ea:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
    12ee:	f895 3348 	ldrb.w	r3, [r5, #840]	; 0x348
    12f2:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    12f6:	f895 3349 	ldrb.w	r3, [r5, #841]	; 0x349
    12fa:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
    12fe:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    1302:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    1306:	f895 334b 	ldrb.w	r3, [r5, #843]	; 0x34b
    130a:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    130e:	f895 334c 	ldrb.w	r3, [r5, #844]	; 0x34c
    1312:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    1316:	f895 334d 	ldrb.w	r3, [r5, #845]	; 0x34d
    131a:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    131e:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    1322:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    1326:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    132a:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    132e:	f895 1350 	ldrb.w	r1, [r5, #848]	; 0x350
    1332:	f8d5 2354 	ldr.w	r2, [r5, #852]	; 0x354
    1336:	f895 3358 	ldrb.w	r3, [r5, #856]	; 0x358
    133a:	f884 3358 	strb.w	r3, [r4, #856]	; 0x358
    133e:	f884 1350 	strb.w	r1, [r4, #848]	; 0x350
    1342:	f8c4 2354 	str.w	r2, [r4, #852]	; 0x354
    1346:	f895 3359 	ldrb.w	r3, [r5, #857]	; 0x359
    134a:	f884 3359 	strb.w	r3, [r4, #857]	; 0x359
    134e:	f504 7257 	add.w	r2, r4, #860	; 0x35c
    1352:	f505 7156 	add.w	r1, r5, #856	; 0x358
    1356:	f204 434c 	addw	r3, r4, #1100	; 0x44c
    135a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    135e:	f842 0b04 	str.w	r0, [r2], #4
    1362:	4293      	cmp	r3, r2
    1364:	d1f9      	bne.n	135a <LEDStruct::operator=(LEDStruct const&)+0x33a>
    1366:	f505 6289 	add.w	r2, r5, #1096	; 0x448
    136a:	f204 503c 	addw	r0, r4, #1340	; 0x53c
    136e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1372:	f843 1b04 	str.w	r1, [r3], #4
    1376:	4283      	cmp	r3, r0
    1378:	d1f9      	bne.n	136e <LEDStruct::operator=(LEDStruct const&)+0x34e>
    137a:	f205 523b 	addw	r2, r5, #1339	; 0x53b
    137e:	f504 60af 	add.w	r0, r4, #1400	; 0x578
    1382:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1386:	f803 1b01 	strb.w	r1, [r3], #1
    138a:	4283      	cmp	r3, r0
    138c:	d1f9      	bne.n	1382 <LEDStruct::operator=(LEDStruct const&)+0x362>
    138e:	f205 5174 	addw	r1, r5, #1396	; 0x574
    1392:	f504 62cd 	add.w	r2, r4, #1640	; 0x668
    1396:	f851 0f04 	ldr.w	r0, [r1, #4]!
    139a:	f843 0b04 	str.w	r0, [r3], #4
    139e:	429a      	cmp	r2, r3
    13a0:	d1f9      	bne.n	1396 <LEDStruct::operator=(LEDStruct const&)+0x376>
    13a2:	4613      	mov	r3, r2
    13a4:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
    13a8:	f205 6264 	addw	r2, r5, #1636	; 0x664
    13ac:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13b0:	f843 1b04 	str.w	r1, [r3], #4
    13b4:	4298      	cmp	r0, r3
    13b6:	d1f9      	bne.n	13ac <LEDStruct::operator=(LEDStruct const&)+0x38c>
    13b8:	f895 3758 	ldrb.w	r3, [r5, #1880]	; 0x758
    13bc:	f884 3758 	strb.w	r3, [r4, #1880]	; 0x758
    13c0:	f8b5 175a 	ldrh.w	r1, [r5, #1882]	; 0x75a
    13c4:	f8b5 275c 	ldrh.w	r2, [r5, #1884]	; 0x75c
    13c8:	f8b5 375e 	ldrh.w	r3, [r5, #1886]	; 0x75e
    13cc:	f8a4 375e 	strh.w	r3, [r4, #1886]	; 0x75e
    13d0:	f8a4 175a 	strh.w	r1, [r4, #1882]	; 0x75a
    13d4:	f8a4 275c 	strh.w	r2, [r4, #1884]	; 0x75c
    13d8:	f895 3760 	ldrb.w	r3, [r5, #1888]	; 0x760
    13dc:	f884 3760 	strb.w	r3, [r4, #1888]	; 0x760
    13e0:	f895 3761 	ldrb.w	r3, [r5, #1889]	; 0x761
    13e4:	f884 3761 	strb.w	r3, [r4, #1889]	; 0x761
    13e8:	f895 3762 	ldrb.w	r3, [r5, #1890]	; 0x762
    13ec:	f884 3762 	strb.w	r3, [r4, #1890]	; 0x762
    13f0:	f895 3763 	ldrb.w	r3, [r5, #1891]	; 0x763
    13f4:	f884 3763 	strb.w	r3, [r4, #1891]	; 0x763
    13f8:	f895 3764 	ldrb.w	r3, [r5, #1892]	; 0x764
    13fc:	f884 3764 	strb.w	r3, [r4, #1892]	; 0x764
    1400:	f205 7164 	addw	r1, r5, #1892	; 0x764
    1404:	f504 63ed 	add.w	r3, r4, #1896	; 0x768
    1408:	f504 62f1 	add.w	r2, r4, #1928	; 0x788
    140c:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1410:	f843 0b04 	str.w	r0, [r3], #4
    1414:	429a      	cmp	r2, r3
    1416:	d1f9      	bne.n	140c <LEDStruct::operator=(LEDStruct const&)+0x3ec>
    1418:	f205 7184 	addw	r1, r5, #1924	; 0x784
    141c:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
    1420:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1424:	f842 0b04 	str.w	r0, [r2], #4
    1428:	4293      	cmp	r3, r2
    142a:	d1f9      	bne.n	1420 <LEDStruct::operator=(LEDStruct const&)+0x400>
    142c:	f205 72a4 	addw	r2, r5, #1956	; 0x7a4
    1430:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
    1434:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1438:	f843 1b04 	str.w	r1, [r3], #4
    143c:	4283      	cmp	r3, r0
    143e:	d1f9      	bne.n	1434 <LEDStruct::operator=(LEDStruct const&)+0x414>
    1440:	f205 72c4 	addw	r2, r5, #1988	; 0x7c4
    1444:	f504 60fd 	add.w	r0, r4, #2024	; 0x7e8
    1448:	f852 1f04 	ldr.w	r1, [r2, #4]!
    144c:	f843 1b04 	str.w	r1, [r3], #4
    1450:	4283      	cmp	r3, r0
    1452:	d1f9      	bne.n	1448 <LEDStruct::operator=(LEDStruct const&)+0x428>
    1454:	f205 72e4 	addw	r2, r5, #2020	; 0x7e4
    1458:	f604 0008 	addw	r0, r4, #2056	; 0x808
    145c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1460:	f843 1b04 	str.w	r1, [r3], #4
    1464:	4283      	cmp	r3, r0
    1466:	d1f9      	bne.n	145c <LEDStruct::operator=(LEDStruct const&)+0x43c>
    1468:	f605 0204 	addw	r2, r5, #2052	; 0x804
    146c:	f604 0028 	addw	r0, r4, #2088	; 0x828
    1470:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1474:	f843 1b04 	str.w	r1, [r3], #4
    1478:	4283      	cmp	r3, r0
    147a:	d1f9      	bne.n	1470 <LEDStruct::operator=(LEDStruct const&)+0x450>
    147c:	f895 3828 	ldrb.w	r3, [r5, #2088]	; 0x828
    1480:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
    1484:	f895 3829 	ldrb.w	r3, [r5, #2089]	; 0x829
    1488:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
    148c:	f895 082a 	ldrb.w	r0, [r5, #2090]	; 0x82a
    1490:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
    1494:	f895 182b 	ldrb.w	r1, [r5, #2091]	; 0x82b
    1498:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
    149c:	f8c4 282c 	str.w	r2, [r4, #2092]	; 0x82c
    14a0:	f884 082a 	strb.w	r0, [r4, #2090]	; 0x82a
    14a4:	f884 182b 	strb.w	r1, [r4, #2091]	; 0x82b
    14a8:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    14ac:	f895 3834 	ldrb.w	r3, [r5, #2100]	; 0x834
    14b0:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
    14b4:	f895 3835 	ldrb.w	r3, [r5, #2101]	; 0x835
    14b8:	f884 3835 	strb.w	r3, [r4, #2101]	; 0x835
    14bc:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
    14c0:	f884 3836 	strb.w	r3, [r4, #2102]	; 0x836
    14c4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
    14c8:	f884 3837 	strb.w	r3, [r4, #2103]	; 0x837
    14cc:	f895 3838 	ldrb.w	r3, [r5, #2104]	; 0x838
    14d0:	f884 3838 	strb.w	r3, [r4, #2104]	; 0x838
    14d4:	f895 3839 	ldrb.w	r3, [r5, #2105]	; 0x839
    14d8:	f884 3839 	strb.w	r3, [r4, #2105]	; 0x839
    14dc:	f895 383a 	ldrb.w	r3, [r5, #2106]	; 0x83a
    14e0:	f884 383a 	strb.w	r3, [r4, #2106]	; 0x83a
    14e4:	4620      	mov	r0, r4
    14e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000014e8 <finish_transition()>:

void finish_transition() {
    14e8:	b530      	push	{r4, r5, lr}
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14ea:	4d1d      	ldr	r5, [pc, #116]	; (1560 <finish_transition()+0x78>)
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    14ec:	4c1d      	ldr	r4, [pc, #116]	; (1564 <finish_transition()+0x7c>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    14ee:	b083      	sub	sp, #12
	in_transition = 0;
    14f0:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14f2:	4628      	mov	r0, r5
    14f4:	aa01      	add	r2, sp, #4
    14f6:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    14f8:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14fa:	f88d 3004 	strb.w	r3, [sp, #4]
    14fe:	f88d 3005 	strb.w	r3, [sp, #5]
    1502:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1506:	f008 fea9 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds = next_leds;
    150a:	4628      	mov	r0, r5
    150c:	4916      	ldr	r1, [pc, #88]	; (1568 <finish_transition()+0x80>)
    150e:	f7ff fd87 	bl	1020 <LEDStruct::operator=(LEDStruct const&)>
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    1512:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    1516:	b13b      	cbz	r3, 1528 <finish_transition()+0x40>
    1518:	4c14      	ldr	r4, [pc, #80]	; (156c <finish_transition()+0x84>)
    151a:	4915      	ldr	r1, [pc, #84]	; (1570 <finish_transition()+0x88>)
    151c:	4620      	mov	r0, r4
    151e:	f7ff fd7f 	bl	1020 <LEDStruct::operator=(LEDStruct const&)>
    1522:	2302      	movs	r3, #2
    1524:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    1528:	2400      	movs	r4, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    152a:	aa01      	add	r2, sp, #4
    152c:	2196      	movs	r1, #150	; 0x96
    152e:	480e      	ldr	r0, [pc, #56]	; (1568 <finish_transition()+0x80>)
    1530:	f88d 4004 	strb.w	r4, [sp, #4]
    1534:	f88d 4005 	strb.w	r4, [sp, #5]
    1538:	f88d 4006 	strb.w	r4, [sp, #6]
    153c:	f008 fe8e 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1540:	aa01      	add	r2, sp, #4
    1542:	2196      	movs	r1, #150	; 0x96
    1544:	480a      	ldr	r0, [pc, #40]	; (1570 <finish_transition()+0x88>)
    1546:	f88d 4004 	strb.w	r4, [sp, #4]
    154a:	f88d 4005 	strb.w	r4, [sp, #5]
    154e:	f88d 4006 	strb.w	r4, [sp, #6]
    1552:	f008 fe83 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    1556:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
}
    155a:	b003      	add	sp, #12
    155c:	bd30      	pop	{r4, r5, pc}
    155e:	bf00      	nop
    1560:	1fffa26c 	.word	0x1fffa26c
    1564:	1fff90d0 	.word	0x1fff90d0
    1568:	1fff8884 	.word	0x1fff8884
    156c:	1fff91d8 	.word	0x1fff91d8
    1570:	1fff9a2c 	.word	0x1fff9a2c

00001574 <blending()>:

void blending() {
    1574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1578:	4d2f      	ldr	r5, [pc, #188]	; (1638 <blending()+0xc4>)
    157a:	4e30      	ldr	r6, [pc, #192]	; (163c <blending()+0xc8>)
    157c:	4c30      	ldr	r4, [pc, #192]	; (1640 <blending()+0xcc>)
    157e:	4f31      	ldr	r7, [pc, #196]	; (1644 <blending()+0xd0>)
    1580:	b085      	sub	sp, #20
    1582:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    1586:	4632      	mov	r2, r6
    1588:	4629      	mov	r1, r5
    158a:	783b      	ldrb	r3, [r7, #0]
    158c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1644 <blending()+0xd0>
    1590:	a803      	add	r0, sp, #12
    1592:	3503      	adds	r5, #3
    1594:	f008 ff54 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1598:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    159c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15a4:	7021      	strb	r1, [r4, #0]
    15a6:	4545      	cmp	r5, r8
        g = rhs.g;
    15a8:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    15aa:	70a3      	strb	r3, [r4, #2]
    15ac:	f106 0603 	add.w	r6, r6, #3
    15b0:	f104 0403 	add.w	r4, r4, #3
    15b4:	d1e7      	bne.n	1586 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15b6:	4e24      	ldr	r6, [pc, #144]	; (1648 <blending()+0xd4>)
    15b8:	6833      	ldr	r3, [r6, #0]
    15ba:	07db      	lsls	r3, r3, #31
    15bc:	d51f      	bpl.n	15fe <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15be:	4d23      	ldr	r5, [pc, #140]	; (164c <blending()+0xd8>)
    15c0:	4c23      	ldr	r4, [pc, #140]	; (1650 <blending()+0xdc>)
    15c2:	682b      	ldr	r3, [r5, #0]
    15c4:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15c6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	1a5b      	subs	r3, r3, r1
    15ce:	4293      	cmp	r3, r2
    15d0:	d30c      	bcc.n	15ec <blending()+0x78>
    15d2:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15d4:	682a      	ldr	r2, [r5, #0]
    15d6:	9202      	str	r2, [sp, #8]
    15d8:	3301      	adds	r3, #1
	return ret;
    15da:	9a02      	ldr	r2, [sp, #8]
    15dc:	6022      	str	r2, [r4, #0]
    15de:	b2db      	uxtb	r3, r3
    15e0:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    15e2:	2bff      	cmp	r3, #255	; 0xff
    15e4:	d006      	beq.n	15f4 <blending()+0x80>
		finish_transition();
	}
}
    15e6:	b005      	add	sp, #20
    15e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    15ec:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    15f0:	2bff      	cmp	r3, #255	; 0xff
    15f2:	d1f8      	bne.n	15e6 <blending()+0x72>
		finish_transition();
    15f4:	f7ff ff78 	bl	14e8 <finish_transition()>
	}
}
    15f8:	b005      	add	sp, #20
    15fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15fe:	4630      	mov	r0, r6
    1600:	f009 fe68 	bl	b2d4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1604:	4d11      	ldr	r5, [pc, #68]	; (164c <blending()+0xd8>)
    1606:	b950      	cbnz	r0, 161e <blending()+0xaa>
    1608:	4c11      	ldr	r4, [pc, #68]	; (1650 <blending()+0xdc>)
    160a:	682b      	ldr	r3, [r5, #0]
    160c:	9303      	str	r3, [sp, #12]
    160e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1612:	9b03      	ldr	r3, [sp, #12]
    1614:	1a5b      	subs	r3, r3, r1
    1616:	4293      	cmp	r3, r2
    1618:	d2db      	bcs.n	15d2 <blending()+0x5e>
    161a:	783b      	ldrb	r3, [r7, #0]
    161c:	e7e1      	b.n	15e2 <blending()+0x6e>
    161e:	4b0d      	ldr	r3, [pc, #52]	; (1654 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1620:	682a      	ldr	r2, [r5, #0]
    1622:	781b      	ldrb	r3, [r3, #0]
    1624:	4c0a      	ldr	r4, [pc, #40]	; (1650 <blending()+0xdc>)
    1626:	9201      	str	r2, [sp, #4]
	return ret;
    1628:	9a01      	ldr	r2, [sp, #4]
    162a:	6022      	str	r2, [r4, #0]
    162c:	009b      	lsls	r3, r3, #2
    162e:	4630      	mov	r0, r6
    1630:	6063      	str	r3, [r4, #4]
    1632:	f009 fe55 	bl	b2e0 <__cxa_guard_release>
    1636:	e7e8      	b.n	160a <blending()+0x96>
    1638:	1fffa26c 	.word	0x1fffa26c
    163c:	1fff8884 	.word	0x1fff8884
    1640:	1fffaaa8 	.word	0x1fffaaa8
    1644:	1fff8882 	.word	0x1fff8882
    1648:	1fff91c4 	.word	0x1fff91c4
    164c:	1ffface8 	.word	0x1ffface8
    1650:	1fff90d4 	.word	0x1fff90d4
    1654:	1fff9a19 	.word	0x1fff9a19

00001658 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    165c:	4e94      	ldr	r6, [pc, #592]	; (18b0 <wipedown()+0x258>)
    165e:	f896 c000 	ldrb.w	ip, [r6]
    1662:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    1666:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1668:	2b00      	cmp	r3, #0
    166a:	f000 811e 	beq.w	18aa <wipedown()+0x252>
    166e:	f103 3bff 	add.w	fp, r3, #4294967295
    1672:	fa1f fb8b 	uxth.w	fp, fp
    1676:	488f      	ldr	r0, [pc, #572]	; (18b4 <wipedown()+0x25c>)
    1678:	498f      	ldr	r1, [pc, #572]	; (18b8 <wipedown()+0x260>)
    167a:	f10b 0b01 	add.w	fp, fp, #1
    167e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1682:	4483      	add	fp, r0
    1684:	4602      	mov	r2, r0
    1686:	460d      	mov	r5, r1
    1688:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    168a:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    168c:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1690:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1694:	7027      	strb	r7, [r4, #0]
    1696:	3203      	adds	r2, #3
    1698:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    169c:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16a0:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16a4:	f884 a001 	strb.w	sl, [r4, #1]
    16a8:	455a      	cmp	r2, fp
        b = rhs.b;
    16aa:	f884 9002 	strb.w	r9, [r4, #2]
    16ae:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16b2:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    16b6:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    16ba:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    16be:	f104 0403 	add.w	r4, r4, #3
    16c2:	f1a1 0103 	sub.w	r1, r1, #3
    16c6:	d1e0      	bne.n	168a <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16c8:	2b4a      	cmp	r3, #74	; 0x4a
    16ca:	d827      	bhi.n	171c <wipedown()+0xc4>
    16cc:	487b      	ldr	r0, [pc, #492]	; (18bc <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    16ce:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16da:	eb00 0801 	add.w	r8, r0, r1
    16de:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16e2:	3301      	adds	r3, #1
    16e4:	186f      	adds	r7, r5, r1
    16e6:	f810 b001 	ldrb.w	fp, [r0, r1]
    16ea:	f805 b001 	strb.w	fp, [r5, r1]
    16ee:	18ac      	adds	r4, r5, r2
    16f0:	b29b      	uxth	r3, r3
        g = rhs.g;
    16f2:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    16f6:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16fa:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16fe:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1702:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1706:	f887 a001 	strb.w	sl, [r7, #1]
    170a:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    170c:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1710:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    1714:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1718:	70a1      	strb	r1, [r4, #2]
    171a:	d1d8      	bne.n	16ce <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    171c:	f10c 3aff 	add.w	sl, ip, #4294967295
    1720:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1724:	2480      	movs	r4, #128	; 0x80
    1726:	eb05 0b0a 	add.w	fp, r5, sl
    172a:	4659      	mov	r1, fp
    172c:	4623      	mov	r3, r4
    172e:	a803      	add	r0, sp, #12
    1730:	aa02      	add	r2, sp, #8
    1732:	2700      	movs	r7, #0
    1734:	f88d 4009 	strb.w	r4, [sp, #9]
    1738:	f88d 400a 	strb.w	r4, [sp, #10]
    173c:	f88d 7008 	strb.w	r7, [sp, #8]
    1740:	f008 fe7e 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1744:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1748:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    174c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1750:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1754:	f805 300a 	strb.w	r3, [r5, sl]
    1758:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    175c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1760:	eb05 0908 	add.w	r9, r5, r8
    1764:	4649      	mov	r1, r9
    1766:	4623      	mov	r3, r4
        g = rhs.g;
    1768:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    176c:	f88b 0002 	strb.w	r0, [fp, #2]
    1770:	aa02      	add	r2, sp, #8
    1772:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1774:	f88d 7008 	strb.w	r7, [sp, #8]
    1778:	f88d 4009 	strb.w	r4, [sp, #9]
    177c:	f88d 400a 	strb.w	r4, [sp, #10]
    1780:	f008 fe5e 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    1784:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1786:	f89d 100c 	ldrb.w	r1, [sp, #12]
    178a:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    178e:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    1792:	f89d 000d 	ldrb.w	r0, [sp, #13]
    1796:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    179a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    179e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17a6:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17aa:	eb05 0e0c 	add.w	lr, r5, ip
    17ae:	1868      	adds	r0, r5, r1
    17b0:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    17b2:	2a49      	cmp	r2, #73	; 0x49
    17b4:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    17b8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18b8 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    17bc:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    17c0:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17c4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18b0 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17c8:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    17ca:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    17cc:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    17ce:	d92e      	bls.n	182e <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    17d0:	4f3b      	ldr	r7, [pc, #236]	; (18c0 <wipedown()+0x268>)
    17d2:	683b      	ldr	r3, [r7, #0]
    17d4:	07db      	lsls	r3, r3, #31
    17d6:	d517      	bpl.n	1808 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17d8:	4d3a      	ldr	r5, [pc, #232]	; (18c4 <wipedown()+0x26c>)
    17da:	4c3b      	ldr	r4, [pc, #236]	; (18c8 <wipedown()+0x270>)
    17dc:	682b      	ldr	r3, [r5, #0]
    17de:	9303      	str	r3, [sp, #12]
    17e0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    17e4:	9b03      	ldr	r3, [sp, #12]
    17e6:	1a5b      	subs	r3, r3, r1
    17e8:	4293      	cmp	r3, r2
    17ea:	7833      	ldrb	r3, [r6, #0]
    17ec:	d306      	bcc.n	17fc <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17ee:	682a      	ldr	r2, [r5, #0]
    17f0:	9202      	str	r2, [sp, #8]
    17f2:	3b01      	subs	r3, #1
	return ret;
    17f4:	9a02      	ldr	r2, [sp, #8]
    17f6:	6022      	str	r2, [r4, #0]
    17f8:	b2db      	uxtb	r3, r3
    17fa:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    17fc:	b90b      	cbnz	r3, 1802 <wipedown()+0x1aa>
		finish_transition();
    17fe:	f7ff fe73 	bl	14e8 <finish_transition()>
	}
}
    1802:	b005      	add	sp, #20
    1804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1808:	4638      	mov	r0, r7
    180a:	f009 fd63 	bl	b2d4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    180e:	4d2d      	ldr	r5, [pc, #180]	; (18c4 <wipedown()+0x26c>)
    1810:	2800      	cmp	r0, #0
    1812:	d0e2      	beq.n	17da <wipedown()+0x182>
    1814:	4b2d      	ldr	r3, [pc, #180]	; (18cc <wipedown()+0x274>)
    1816:	682a      	ldr	r2, [r5, #0]
    1818:	781b      	ldrb	r3, [r3, #0]
    181a:	4c2b      	ldr	r4, [pc, #172]	; (18c8 <wipedown()+0x270>)
    181c:	9201      	str	r2, [sp, #4]
	return ret;
    181e:	9a01      	ldr	r2, [sp, #4]
    1820:	6022      	str	r2, [r4, #0]
    1822:	009b      	lsls	r3, r3, #2
    1824:	4638      	mov	r0, r7
    1826:	6063      	str	r3, [r4, #4]
    1828:	f009 fd5a 	bl	b2e0 <__cxa_guard_release>
    182c:	e7d6      	b.n	17dc <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    182e:	1c55      	adds	r5, r2, #1
    1830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1834:	eb08 0a05 	add.w	sl, r8, r5
    1838:	4651      	mov	r1, sl
    183a:	4623      	mov	r3, r4
    183c:	aa02      	add	r2, sp, #8
    183e:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1840:	f88d 7008 	strb.w	r7, [sp, #8]
    1844:	f88d 4009 	strb.w	r4, [sp, #9]
    1848:	f88d 400a 	strb.w	r4, [sp, #10]
    184c:	f008 fdf8 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1850:	f899 3000 	ldrb.w	r3, [r9]
    1854:	f88d 7008 	strb.w	r7, [sp, #8]
    1858:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    185c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1860:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1864:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1868:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    186c:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1870:	f808 c005 	strb.w	ip, [r8, r5]
    1874:	aa02      	add	r2, sp, #8
    1876:	4623      	mov	r3, r4
    1878:	4649      	mov	r1, r9
    187a:	a803      	add	r0, sp, #12
        g = rhs.g;
    187c:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    1880:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1884:	f88d 4009 	strb.w	r4, [sp, #9]
    1888:	f88d 400a 	strb.w	r4, [sp, #10]
    188c:	f008 fdd8 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1890:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1894:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1898:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    189c:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18a0:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18a4:	f889 3002 	strb.w	r3, [r9, #2]
    18a8:	e792      	b.n	17d0 <wipedown()+0x178>
    18aa:	4d03      	ldr	r5, [pc, #12]	; (18b8 <wipedown()+0x260>)
    18ac:	e70e      	b.n	16cc <wipedown()+0x74>
    18ae:	bf00      	nop
    18b0:	1fff910c 	.word	0x1fff910c
    18b4:	1fffa26c 	.word	0x1fffa26c
    18b8:	1fffaaa8 	.word	0x1fffaaa8
    18bc:	1fff8884 	.word	0x1fff8884
    18c0:	1fff91c8 	.word	0x1fff91c8
    18c4:	1ffface8 	.word	0x1ffface8
    18c8:	1fff90e0 	.word	0x1fff90e0
    18cc:	1fff9a19 	.word	0x1fff9a19

000018d0 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18d4:	4ba2      	ldr	r3, [pc, #648]	; (1b60 <wipeup()+0x290>)
    18d6:	781d      	ldrb	r5, [r3, #0]
    18d8:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18da:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18dc:	2b00      	cmp	r3, #0
    18de:	f000 8130 	beq.w	1b42 <wipeup()+0x272>
    18e2:	f103 3bff 	add.w	fp, r3, #4294967295
    18e6:	fa1f fb8b 	uxth.w	fp, fp
    18ea:	489e      	ldr	r0, [pc, #632]	; (1b64 <wipeup()+0x294>)
    18ec:	499e      	ldr	r1, [pc, #632]	; (1b68 <wipeup()+0x298>)
    18ee:	f10b 0b01 	add.w	fp, fp, #1
    18f2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    18f6:	4483      	add	fp, r0
    18f8:	4602      	mov	r2, r0
    18fa:	460c      	mov	r4, r1
    18fc:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18fe:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1902:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1906:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    190a:	f886 e000 	strb.w	lr, [r6]
    190e:	3203      	adds	r2, #3
    1910:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1914:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1918:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    191c:	f886 a001 	strb.w	sl, [r6, #1]
    1920:	455a      	cmp	r2, fp
        b = rhs.b;
    1922:	f886 9002 	strb.w	r9, [r6, #2]
    1926:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    192a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    192e:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    1932:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    1936:	f106 0603 	add.w	r6, r6, #3
    193a:	f1a1 0103 	sub.w	r1, r1, #3
    193e:	d1de      	bne.n	18fe <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1940:	2b4a      	cmp	r3, #74	; 0x4a
    1942:	d828      	bhi.n	1996 <wipeup()+0xc6>
    1944:	4889      	ldr	r0, [pc, #548]	; (1b6c <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    1946:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    194a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    194e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1952:	eb00 0801 	add.w	r8, r0, r1
    1956:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    195a:	3301      	adds	r3, #1
    195c:	eb04 0e01 	add.w	lr, r4, r1
    1960:	f810 b001 	ldrb.w	fp, [r0, r1]
    1964:	f804 b001 	strb.w	fp, [r4, r1]
    1968:	18a6      	adds	r6, r4, r2
    196a:	b29b      	uxth	r3, r3
        g = rhs.g;
    196c:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1970:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1974:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1978:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    197c:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1980:	f88e a001 	strb.w	sl, [lr, #1]
    1984:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1986:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    198a:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    198e:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    1992:	70b1      	strb	r1, [r6, #2]
    1994:	d1d7      	bne.n	1946 <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    1996:	2d00      	cmp	r5, #0
    1998:	f040 808f 	bne.w	1aba <wipeup()+0x1ea>
    199c:	f10d 0a0c 	add.w	sl, sp, #12
    19a0:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19a4:	4b6e      	ldr	r3, [pc, #440]	; (1b60 <wipeup()+0x290>)
    19a6:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    19a8:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    19b0:	1c5a      	adds	r2, r3, #1
    19b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19b6:	eb04 0e03 	add.w	lr, r4, r3
    19ba:	1825      	adds	r5, r4, r0
    19bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19c0:	2680      	movs	r6, #128	; 0x80
    19c2:	eb04 0902 	add.w	r9, r4, r2
    19c6:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19c8:	22ff      	movs	r2, #255	; 0xff
    19ca:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19cc:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    19d0:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    19d4:	f88e 2002 	strb.w	r2, [lr, #2]
    19d8:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19da:	5422      	strb	r2, [r4, r0]
    19dc:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    19de:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    19e0:	70aa      	strb	r2, [r5, #2]
    19e2:	4650      	mov	r0, sl
    19e4:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19e6:	f88d 6009 	strb.w	r6, [sp, #9]
    19ea:	f88d 600a 	strb.w	r6, [sp, #10]
    19ee:	f88d 8008 	strb.w	r8, [sp, #8]
    19f2:	f008 fd25 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    19f6:	4b5a      	ldr	r3, [pc, #360]	; (1b60 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19f8:	f89d 100c 	ldrb.w	r1, [sp, #12]
    19fc:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    19fe:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a02:	f88d 8008 	strb.w	r8, [sp, #8]
    1a06:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a0e:	eb04 0805 	add.w	r8, r4, r5
    1a12:	4633      	mov	r3, r6
    1a14:	f88d 6009 	strb.w	r6, [sp, #9]
    1a18:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a1c:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a20:	55e1      	strb	r1, [r4, r7]
    1a22:	465a      	mov	r2, fp
    1a24:	4650      	mov	r0, sl
    1a26:	4641      	mov	r1, r8
        g = rhs.g;
    1a28:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a2c:	f889 6002 	strb.w	r6, [r9, #2]
    1a30:	f008 fd06 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a34:	4b4e      	ldr	r3, [pc, #312]	; (1b70 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a36:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a3a:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a3c:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a40:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a44:	5560      	strb	r0, [r4, r5]
    1a46:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a48:	4845      	ldr	r0, [pc, #276]	; (1b60 <wipeup()+0x290>)
        g = rhs.g;
    1a4a:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1a4e:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a52:	d520      	bpl.n	1a96 <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a54:	4d47      	ldr	r5, [pc, #284]	; (1b74 <wipeup()+0x2a4>)
    1a56:	4c48      	ldr	r4, [pc, #288]	; (1b78 <wipeup()+0x2a8>)
    1a58:	682b      	ldr	r3, [r5, #0]
    1a5a:	9303      	str	r3, [sp, #12]
    1a5c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a60:	9b03      	ldr	r3, [sp, #12]
    1a62:	1a5b      	subs	r3, r3, r1
    1a64:	4293      	cmp	r3, r2
    1a66:	d30e      	bcc.n	1a86 <wipeup()+0x1b6>
    1a68:	4b3d      	ldr	r3, [pc, #244]	; (1b60 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a6a:	682a      	ldr	r2, [r5, #0]
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	9202      	str	r2, [sp, #8]
	return ret;
    1a70:	9a02      	ldr	r2, [sp, #8]
    1a72:	6022      	str	r2, [r4, #0]
    1a74:	3301      	adds	r3, #1
    1a76:	4a3a      	ldr	r2, [pc, #232]	; (1b60 <wipeup()+0x290>)
    1a78:	b2db      	uxtb	r3, r3
    1a7a:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1a7c:	2b4a      	cmp	r3, #74	; 0x4a
    1a7e:	d005      	beq.n	1a8c <wipeup()+0x1bc>
		finish_transition();
	}
}
    1a80:	b005      	add	sp, #20
    1a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a86:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1a88:	2b4a      	cmp	r3, #74	; 0x4a
    1a8a:	d1f9      	bne.n	1a80 <wipeup()+0x1b0>
		finish_transition();
    1a8c:	f7ff fd2c 	bl	14e8 <finish_transition()>
	}
}
    1a90:	b005      	add	sp, #20
    1a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a96:	4836      	ldr	r0, [pc, #216]	; (1b70 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a98:	4d36      	ldr	r5, [pc, #216]	; (1b74 <wipeup()+0x2a4>)
    1a9a:	f009 fc1b 	bl	b2d4 <__cxa_guard_acquire>
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d151      	bne.n	1b46 <wipeup()+0x276>
    1aa2:	4c35      	ldr	r4, [pc, #212]	; (1b78 <wipeup()+0x2a8>)
    1aa4:	682b      	ldr	r3, [r5, #0]
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1aac:	9b03      	ldr	r3, [sp, #12]
    1aae:	1a5b      	subs	r3, r3, r1
    1ab0:	4293      	cmp	r3, r2
    1ab2:	d2d9      	bcs.n	1a68 <wipeup()+0x198>
    1ab4:	4b2a      	ldr	r3, [pc, #168]	; (1b60 <wipeup()+0x290>)
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	e7e0      	b.n	1a7c <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1aba:	3d01      	subs	r5, #1
    1abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ac0:	2680      	movs	r6, #128	; 0x80
    1ac2:	eb04 0905 	add.w	r9, r4, r5
    1ac6:	f10d 0a0c 	add.w	sl, sp, #12
    1aca:	f10d 0b08 	add.w	fp, sp, #8
    1ace:	f04f 0800 	mov.w	r8, #0
    1ad2:	4649      	mov	r1, r9
    1ad4:	4633      	mov	r3, r6
    1ad6:	4650      	mov	r0, sl
    1ad8:	465a      	mov	r2, fp
    1ada:	f88d 8008 	strb.w	r8, [sp, #8]
    1ade:	f88d 6009 	strb.w	r6, [sp, #9]
    1ae2:	f88d 600a 	strb.w	r6, [sp, #10]
    1ae6:	f008 fcab 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1aea:	4b1d      	ldr	r3, [pc, #116]	; (1b60 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1aec:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1af0:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1af2:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1af6:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1afa:	f88d 8008 	strb.w	r8, [sp, #8]
    1afe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b06:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b0a:	5562      	strb	r2, [r4, r5]
    1b0c:	461f      	mov	r7, r3
    1b0e:	4641      	mov	r1, r8
    1b10:	4633      	mov	r3, r6
    1b12:	465a      	mov	r2, fp
    1b14:	4650      	mov	r0, sl
        g = rhs.g;
    1b16:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b1a:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b1e:	f88d 6009 	strb.w	r6, [sp, #9]
    1b22:	f88d 600a 	strb.w	r6, [sp, #10]
    1b26:	f008 fc8b 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b2a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b2e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b32:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b36:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b38:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b3c:	f888 3002 	strb.w	r3, [r8, #2]
    1b40:	e730      	b.n	19a4 <wipeup()+0xd4>
    1b42:	4c09      	ldr	r4, [pc, #36]	; (1b68 <wipeup()+0x298>)
    1b44:	e6fe      	b.n	1944 <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b46:	4b0d      	ldr	r3, [pc, #52]	; (1b7c <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b48:	682a      	ldr	r2, [r5, #0]
    1b4a:	781b      	ldrb	r3, [r3, #0]
    1b4c:	4c0a      	ldr	r4, [pc, #40]	; (1b78 <wipeup()+0x2a8>)
    1b4e:	9201      	str	r2, [sp, #4]
	return ret;
    1b50:	9a01      	ldr	r2, [sp, #4]
    1b52:	6022      	str	r2, [r4, #0]
    1b54:	009b      	lsls	r3, r3, #2
    1b56:	4806      	ldr	r0, [pc, #24]	; (1b70 <wipeup()+0x2a0>)
    1b58:	6063      	str	r3, [r4, #4]
    1b5a:	f009 fbc1 	bl	b2e0 <__cxa_guard_release>
    1b5e:	e7a1      	b.n	1aa4 <wipeup()+0x1d4>
    1b60:	1fff910c 	.word	0x1fff910c
    1b64:	1fff8884 	.word	0x1fff8884
    1b68:	1fffaaa8 	.word	0x1fffaaa8
    1b6c:	1fffa26c 	.word	0x1fffa26c
    1b70:	1fff91cc 	.word	0x1fff91cc
    1b74:	1ffface8 	.word	0x1ffface8
    1b78:	1fff9a1c 	.word	0x1fff9a1c
    1b7c:	1fff9a19 	.word	0x1fff9a19

00001b80 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1b80:	2801      	cmp	r0, #1
    1b82:	d006      	beq.n	1b92 <switch_transition(TransitionType)+0x12>
    1b84:	d303      	bcc.n	1b8e <switch_transition(TransitionType)+0xe>
    1b86:	2802      	cmp	r0, #2
    1b88:	d101      	bne.n	1b8e <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1b8a:	f7ff bea1 	b.w	18d0 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1b8e:	f7ff bcf1 	b.w	1574 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1b92:	f7ff bd61 	b.w	1658 <wipedown()>
    1b96:	bf00      	nop

00001b98 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1b98:	b510      	push	{r4, lr}
    1b9a:	2110      	movs	r1, #16
    1b9c:	4604      	mov	r4, r0
    1b9e:	4894      	ldr	r0, [pc, #592]	; (1df0 <print_palette(unsigned char)+0x258>)
    1ba0:	f00a fc30 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ba4:	4621      	mov	r1, r4
    1ba6:	2300      	movs	r3, #0
    1ba8:	220a      	movs	r2, #10
    1baa:	4892      	ldr	r0, [pc, #584]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1bac:	f00a fe3e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bb0:	2102      	movs	r1, #2
    1bb2:	4891      	ldr	r0, [pc, #580]	; (1df8 <print_palette(unsigned char)+0x260>)
    1bb4:	f00a fc26 	bl	c404 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1bb8:	2c5c      	cmp	r4, #92	; 0x5c
    1bba:	f200 8281 	bhi.w	20c0 <print_palette(unsigned char)+0x528>
    1bbe:	e8df f014 	tbh	[pc, r4, lsl #1]
    1bc2:	027a      	.short	0x027a
    1bc4:	02700275 	.word	0x02700275
    1bc8:	0266026b 	.word	0x0266026b
    1bcc:	025c0261 	.word	0x025c0261
    1bd0:	02520257 	.word	0x02520257
    1bd4:	0248024d 	.word	0x0248024d
    1bd8:	023e0243 	.word	0x023e0243
    1bdc:	02340239 	.word	0x02340239
    1be0:	022a022f 	.word	0x022a022f
    1be4:	02200225 	.word	0x02200225
    1be8:	0216021b 	.word	0x0216021b
    1bec:	020c0211 	.word	0x020c0211
    1bf0:	02020207 	.word	0x02020207
    1bf4:	01f801fd 	.word	0x01f801fd
    1bf8:	01ee01f3 	.word	0x01ee01f3
    1bfc:	01e401e9 	.word	0x01e401e9
    1c00:	01da01df 	.word	0x01da01df
    1c04:	01d001d5 	.word	0x01d001d5
    1c08:	01c601cb 	.word	0x01c601cb
    1c0c:	01bc01c1 	.word	0x01bc01c1
    1c10:	01b201b7 	.word	0x01b201b7
    1c14:	01a801ad 	.word	0x01a801ad
    1c18:	019e01a3 	.word	0x019e01a3
    1c1c:	01940199 	.word	0x01940199
    1c20:	018a018f 	.word	0x018a018f
    1c24:	01800185 	.word	0x01800185
    1c28:	0176017b 	.word	0x0176017b
    1c2c:	016c0171 	.word	0x016c0171
    1c30:	01110167 	.word	0x01110167
    1c34:	0107010c 	.word	0x0107010c
    1c38:	00fd0102 	.word	0x00fd0102
    1c3c:	00f300f8 	.word	0x00f300f8
    1c40:	00e900ee 	.word	0x00e900ee
    1c44:	00df00e4 	.word	0x00df00e4
    1c48:	00d500da 	.word	0x00d500da
    1c4c:	00cb00d0 	.word	0x00cb00d0
    1c50:	00c100c6 	.word	0x00c100c6
    1c54:	00b700bc 	.word	0x00b700bc
    1c58:	00ad00b2 	.word	0x00ad00b2
    1c5c:	00a300a8 	.word	0x00a300a8
    1c60:	0099009e 	.word	0x0099009e
    1c64:	008f0094 	.word	0x008f0094
    1c68:	0085008a 	.word	0x0085008a
    1c6c:	007b0080 	.word	0x007b0080
    1c70:	00710076 	.word	0x00710076
    1c74:	0067006c 	.word	0x0067006c
    1c78:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1c7c:	495f      	ldr	r1, [pc, #380]	; (1dfc <print_palette(unsigned char)+0x264>)
    1c7e:	485d      	ldr	r0, [pc, #372]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c80:	f7fe fea2 	bl	9c8 <Print::println(char const*)>
    1c84:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1c86:	495e      	ldr	r1, [pc, #376]	; (1e00 <print_palette(unsigned char)+0x268>)
    1c88:	485a      	ldr	r0, [pc, #360]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c8a:	f7fe fe9d 	bl	9c8 <Print::println(char const*)>
    1c8e:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1c90:	495c      	ldr	r1, [pc, #368]	; (1e04 <print_palette(unsigned char)+0x26c>)
    1c92:	4858      	ldr	r0, [pc, #352]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c94:	f7fe fe98 	bl	9c8 <Print::println(char const*)>
    1c98:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1c9a:	495b      	ldr	r1, [pc, #364]	; (1e08 <print_palette(unsigned char)+0x270>)
    1c9c:	4855      	ldr	r0, [pc, #340]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c9e:	f7fe fe93 	bl	9c8 <Print::println(char const*)>
    1ca2:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1ca4:	4959      	ldr	r1, [pc, #356]	; (1e0c <print_palette(unsigned char)+0x274>)
    1ca6:	4853      	ldr	r0, [pc, #332]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1ca8:	f7fe fe8e 	bl	9c8 <Print::println(char const*)>
    1cac:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1cae:	4958      	ldr	r1, [pc, #352]	; (1e10 <print_palette(unsigned char)+0x278>)
    1cb0:	4850      	ldr	r0, [pc, #320]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cb2:	f7fe fe89 	bl	9c8 <Print::println(char const*)>
    1cb6:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1cb8:	4956      	ldr	r1, [pc, #344]	; (1e14 <print_palette(unsigned char)+0x27c>)
    1cba:	484e      	ldr	r0, [pc, #312]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cbc:	f7fe fe84 	bl	9c8 <Print::println(char const*)>
    1cc0:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1cc2:	4955      	ldr	r1, [pc, #340]	; (1e18 <print_palette(unsigned char)+0x280>)
    1cc4:	484b      	ldr	r0, [pc, #300]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cc6:	f7fe fe7f 	bl	9c8 <Print::println(char const*)>
    1cca:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1ccc:	4953      	ldr	r1, [pc, #332]	; (1e1c <print_palette(unsigned char)+0x284>)
    1cce:	4849      	ldr	r0, [pc, #292]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cd0:	f7fe fe7a 	bl	9c8 <Print::println(char const*)>
    1cd4:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1cd6:	4952      	ldr	r1, [pc, #328]	; (1e20 <print_palette(unsigned char)+0x288>)
    1cd8:	4846      	ldr	r0, [pc, #280]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cda:	f7fe fe75 	bl	9c8 <Print::println(char const*)>
    1cde:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1ce0:	4950      	ldr	r1, [pc, #320]	; (1e24 <print_palette(unsigned char)+0x28c>)
    1ce2:	4844      	ldr	r0, [pc, #272]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1ce4:	f7fe fe70 	bl	9c8 <Print::println(char const*)>
    1ce8:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1cea:	494f      	ldr	r1, [pc, #316]	; (1e28 <print_palette(unsigned char)+0x290>)
    1cec:	4841      	ldr	r0, [pc, #260]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cee:	f7fe fe6b 	bl	9c8 <Print::println(char const*)>
    1cf2:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1cf4:	494d      	ldr	r1, [pc, #308]	; (1e2c <print_palette(unsigned char)+0x294>)
    1cf6:	483f      	ldr	r0, [pc, #252]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cf8:	f7fe fe66 	bl	9c8 <Print::println(char const*)>
    1cfc:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1cfe:	494c      	ldr	r1, [pc, #304]	; (1e30 <print_palette(unsigned char)+0x298>)
    1d00:	483c      	ldr	r0, [pc, #240]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d02:	f7fe fe61 	bl	9c8 <Print::println(char const*)>
    1d06:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d08:	494a      	ldr	r1, [pc, #296]	; (1e34 <print_palette(unsigned char)+0x29c>)
    1d0a:	483a      	ldr	r0, [pc, #232]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d0c:	f7fe fe5c 	bl	9c8 <Print::println(char const*)>
    1d10:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d12:	4949      	ldr	r1, [pc, #292]	; (1e38 <print_palette(unsigned char)+0x2a0>)
    1d14:	4837      	ldr	r0, [pc, #220]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d16:	f7fe fe57 	bl	9c8 <Print::println(char const*)>
    1d1a:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d1c:	4947      	ldr	r1, [pc, #284]	; (1e3c <print_palette(unsigned char)+0x2a4>)
    1d1e:	4835      	ldr	r0, [pc, #212]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d20:	f7fe fe52 	bl	9c8 <Print::println(char const*)>
    1d24:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d26:	4946      	ldr	r1, [pc, #280]	; (1e40 <print_palette(unsigned char)+0x2a8>)
    1d28:	4832      	ldr	r0, [pc, #200]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d2a:	f7fe fe4d 	bl	9c8 <Print::println(char const*)>
    1d2e:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d30:	4944      	ldr	r1, [pc, #272]	; (1e44 <print_palette(unsigned char)+0x2ac>)
    1d32:	4830      	ldr	r0, [pc, #192]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d34:	f7fe fe48 	bl	9c8 <Print::println(char const*)>
    1d38:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d3a:	4943      	ldr	r1, [pc, #268]	; (1e48 <print_palette(unsigned char)+0x2b0>)
    1d3c:	482d      	ldr	r0, [pc, #180]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d3e:	f7fe fe43 	bl	9c8 <Print::println(char const*)>
    1d42:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d44:	4941      	ldr	r1, [pc, #260]	; (1e4c <print_palette(unsigned char)+0x2b4>)
    1d46:	482b      	ldr	r0, [pc, #172]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d48:	f7fe fe3e 	bl	9c8 <Print::println(char const*)>
    1d4c:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1d4e:	4940      	ldr	r1, [pc, #256]	; (1e50 <print_palette(unsigned char)+0x2b8>)
    1d50:	4828      	ldr	r0, [pc, #160]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d52:	f7fe fe39 	bl	9c8 <Print::println(char const*)>
    1d56:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1d58:	493e      	ldr	r1, [pc, #248]	; (1e54 <print_palette(unsigned char)+0x2bc>)
    1d5a:	4826      	ldr	r0, [pc, #152]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d5c:	f7fe fe34 	bl	9c8 <Print::println(char const*)>
    1d60:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1d62:	493d      	ldr	r1, [pc, #244]	; (1e58 <print_palette(unsigned char)+0x2c0>)
    1d64:	4823      	ldr	r0, [pc, #140]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d66:	f7fe fe2f 	bl	9c8 <Print::println(char const*)>
    1d6a:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1d6c:	493b      	ldr	r1, [pc, #236]	; (1e5c <print_palette(unsigned char)+0x2c4>)
    1d6e:	4821      	ldr	r0, [pc, #132]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d70:	f7fe fe2a 	bl	9c8 <Print::println(char const*)>
    1d74:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1d76:	493a      	ldr	r1, [pc, #232]	; (1e60 <print_palette(unsigned char)+0x2c8>)
    1d78:	481e      	ldr	r0, [pc, #120]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d7a:	f7fe fe25 	bl	9c8 <Print::println(char const*)>
    1d7e:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1d80:	4938      	ldr	r1, [pc, #224]	; (1e64 <print_palette(unsigned char)+0x2cc>)
    1d82:	481c      	ldr	r0, [pc, #112]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d84:	f7fe fe20 	bl	9c8 <Print::println(char const*)>
    1d88:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1d8a:	4937      	ldr	r1, [pc, #220]	; (1e68 <print_palette(unsigned char)+0x2d0>)
    1d8c:	4819      	ldr	r0, [pc, #100]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d8e:	f7fe fe1b 	bl	9c8 <Print::println(char const*)>
    1d92:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1d94:	4935      	ldr	r1, [pc, #212]	; (1e6c <print_palette(unsigned char)+0x2d4>)
    1d96:	4817      	ldr	r0, [pc, #92]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d98:	f7fe fe16 	bl	9c8 <Print::println(char const*)>
    1d9c:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1d9e:	4934      	ldr	r1, [pc, #208]	; (1e70 <print_palette(unsigned char)+0x2d8>)
    1da0:	4814      	ldr	r0, [pc, #80]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1da2:	f7fe fe11 	bl	9c8 <Print::println(char const*)>
    1da6:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1da8:	4932      	ldr	r1, [pc, #200]	; (1e74 <print_palette(unsigned char)+0x2dc>)
    1daa:	4812      	ldr	r0, [pc, #72]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dac:	f7fe fe0c 	bl	9c8 <Print::println(char const*)>
    1db0:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1db2:	4931      	ldr	r1, [pc, #196]	; (1e78 <print_palette(unsigned char)+0x2e0>)
    1db4:	480f      	ldr	r0, [pc, #60]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1db6:	f7fe fe07 	bl	9c8 <Print::println(char const*)>
    1dba:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1dbc:	492f      	ldr	r1, [pc, #188]	; (1e7c <print_palette(unsigned char)+0x2e4>)
    1dbe:	480d      	ldr	r0, [pc, #52]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dc0:	f7fe fe02 	bl	9c8 <Print::println(char const*)>
    1dc4:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1dc6:	492e      	ldr	r1, [pc, #184]	; (1e80 <print_palette(unsigned char)+0x2e8>)
    1dc8:	480a      	ldr	r0, [pc, #40]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dca:	f7fe fdfd 	bl	9c8 <Print::println(char const*)>
    1dce:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1dd0:	492c      	ldr	r1, [pc, #176]	; (1e84 <print_palette(unsigned char)+0x2ec>)
    1dd2:	4808      	ldr	r0, [pc, #32]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dd4:	f7fe fdf8 	bl	9c8 <Print::println(char const*)>
    1dd8:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1dda:	492b      	ldr	r1, [pc, #172]	; (1e88 <print_palette(unsigned char)+0x2f0>)
    1ddc:	4805      	ldr	r0, [pc, #20]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dde:	f7fe fdf3 	bl	9c8 <Print::println(char const*)>
    1de2:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1de4:	4929      	ldr	r1, [pc, #164]	; (1e8c <print_palette(unsigned char)+0x2f4>)
    1de6:	4803      	ldr	r0, [pc, #12]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1de8:	f7fe fdee 	bl	9c8 <Print::println(char const*)>
    1dec:	bd10      	pop	{r4, pc}
    1dee:	bf00      	nop
    1df0:	0000f290 	.word	0x0000f290
    1df4:	1fff878c 	.word	0x1fff878c
    1df8:	0000f2a4 	.word	0x0000f2a4
    1dfc:	0000f838 	.word	0x0000f838
    1e00:	0000f82c 	.word	0x0000f82c
    1e04:	0000f81c 	.word	0x0000f81c
    1e08:	0000f80c 	.word	0x0000f80c
    1e0c:	0000f7f8 	.word	0x0000f7f8
    1e10:	0000f7e0 	.word	0x0000f7e0
    1e14:	0000f7c8 	.word	0x0000f7c8
    1e18:	0000f7b8 	.word	0x0000f7b8
    1e1c:	0000f7a0 	.word	0x0000f7a0
    1e20:	0000f794 	.word	0x0000f794
    1e24:	0000f788 	.word	0x0000f788
    1e28:	0000f770 	.word	0x0000f770
    1e2c:	0000f764 	.word	0x0000f764
    1e30:	0000f758 	.word	0x0000f758
    1e34:	0000f74c 	.word	0x0000f74c
    1e38:	0000f740 	.word	0x0000f740
    1e3c:	0000f730 	.word	0x0000f730
    1e40:	0000f724 	.word	0x0000f724
    1e44:	0000f710 	.word	0x0000f710
    1e48:	0000f704 	.word	0x0000f704
    1e4c:	0000f6f4 	.word	0x0000f6f4
    1e50:	0000f6e8 	.word	0x0000f6e8
    1e54:	0000f6dc 	.word	0x0000f6dc
    1e58:	0000f6d4 	.word	0x0000f6d4
    1e5c:	0000f6c0 	.word	0x0000f6c0
    1e60:	0000f6b0 	.word	0x0000f6b0
    1e64:	0000f69c 	.word	0x0000f69c
    1e68:	0000f690 	.word	0x0000f690
    1e6c:	0000f684 	.word	0x0000f684
    1e70:	0000f678 	.word	0x0000f678
    1e74:	0000f668 	.word	0x0000f668
    1e78:	0000f654 	.word	0x0000f654
    1e7c:	0000f648 	.word	0x0000f648
    1e80:	0000f638 	.word	0x0000f638
    1e84:	0000f62c 	.word	0x0000f62c
    1e88:	0000f61c 	.word	0x0000f61c
    1e8c:	0000f610 	.word	0x0000f610
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1e90:	498e      	ldr	r1, [pc, #568]	; (20cc <print_palette(unsigned char)+0x534>)
    1e92:	488f      	ldr	r0, [pc, #572]	; (20d0 <print_palette(unsigned char)+0x538>)
    1e94:	f7fe fd98 	bl	9c8 <Print::println(char const*)>
    1e98:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1e9a:	498e      	ldr	r1, [pc, #568]	; (20d4 <print_palette(unsigned char)+0x53c>)
    1e9c:	488c      	ldr	r0, [pc, #560]	; (20d0 <print_palette(unsigned char)+0x538>)
    1e9e:	f7fe fd93 	bl	9c8 <Print::println(char const*)>
    1ea2:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1ea4:	498c      	ldr	r1, [pc, #560]	; (20d8 <print_palette(unsigned char)+0x540>)
    1ea6:	488a      	ldr	r0, [pc, #552]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ea8:	f7fe fd8e 	bl	9c8 <Print::println(char const*)>
    1eac:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1eae:	498b      	ldr	r1, [pc, #556]	; (20dc <print_palette(unsigned char)+0x544>)
    1eb0:	4887      	ldr	r0, [pc, #540]	; (20d0 <print_palette(unsigned char)+0x538>)
    1eb2:	f7fe fd89 	bl	9c8 <Print::println(char const*)>
    1eb6:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1eb8:	4989      	ldr	r1, [pc, #548]	; (20e0 <print_palette(unsigned char)+0x548>)
    1eba:	4885      	ldr	r0, [pc, #532]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ebc:	f7fe fd84 	bl	9c8 <Print::println(char const*)>
    1ec0:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1ec2:	4988      	ldr	r1, [pc, #544]	; (20e4 <print_palette(unsigned char)+0x54c>)
    1ec4:	4882      	ldr	r0, [pc, #520]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ec6:	f7fe fd7f 	bl	9c8 <Print::println(char const*)>
    1eca:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1ecc:	4986      	ldr	r1, [pc, #536]	; (20e8 <print_palette(unsigned char)+0x550>)
    1ece:	4880      	ldr	r0, [pc, #512]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ed0:	f7fe fd7a 	bl	9c8 <Print::println(char const*)>
    1ed4:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1ed6:	4985      	ldr	r1, [pc, #532]	; (20ec <print_palette(unsigned char)+0x554>)
    1ed8:	487d      	ldr	r0, [pc, #500]	; (20d0 <print_palette(unsigned char)+0x538>)
    1eda:	f7fe fd75 	bl	9c8 <Print::println(char const*)>
    1ede:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1ee0:	4983      	ldr	r1, [pc, #524]	; (20f0 <print_palette(unsigned char)+0x558>)
    1ee2:	487b      	ldr	r0, [pc, #492]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ee4:	f7fe fd70 	bl	9c8 <Print::println(char const*)>
    1ee8:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1eea:	4982      	ldr	r1, [pc, #520]	; (20f4 <print_palette(unsigned char)+0x55c>)
    1eec:	4878      	ldr	r0, [pc, #480]	; (20d0 <print_palette(unsigned char)+0x538>)
    1eee:	f7fe fd6b 	bl	9c8 <Print::println(char const*)>
    1ef2:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1ef4:	4980      	ldr	r1, [pc, #512]	; (20f8 <print_palette(unsigned char)+0x560>)
    1ef6:	4876      	ldr	r0, [pc, #472]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ef8:	f7fe fd66 	bl	9c8 <Print::println(char const*)>
    1efc:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1efe:	497f      	ldr	r1, [pc, #508]	; (20fc <print_palette(unsigned char)+0x564>)
    1f00:	4873      	ldr	r0, [pc, #460]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f02:	f7fe fd61 	bl	9c8 <Print::println(char const*)>
    1f06:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f08:	497d      	ldr	r1, [pc, #500]	; (2100 <print_palette(unsigned char)+0x568>)
    1f0a:	4871      	ldr	r0, [pc, #452]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f0c:	f7fe fd5c 	bl	9c8 <Print::println(char const*)>
    1f10:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f12:	497c      	ldr	r1, [pc, #496]	; (2104 <print_palette(unsigned char)+0x56c>)
    1f14:	486e      	ldr	r0, [pc, #440]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f16:	f7fe fd57 	bl	9c8 <Print::println(char const*)>
    1f1a:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f1c:	497a      	ldr	r1, [pc, #488]	; (2108 <print_palette(unsigned char)+0x570>)
    1f1e:	486c      	ldr	r0, [pc, #432]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f20:	f7fe fd52 	bl	9c8 <Print::println(char const*)>
    1f24:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f26:	4979      	ldr	r1, [pc, #484]	; (210c <print_palette(unsigned char)+0x574>)
    1f28:	4869      	ldr	r0, [pc, #420]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f2a:	f7fe fd4d 	bl	9c8 <Print::println(char const*)>
    1f2e:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f30:	4977      	ldr	r1, [pc, #476]	; (2110 <print_palette(unsigned char)+0x578>)
    1f32:	4867      	ldr	r0, [pc, #412]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f34:	f7fe fd48 	bl	9c8 <Print::println(char const*)>
    1f38:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f3a:	4976      	ldr	r1, [pc, #472]	; (2114 <print_palette(unsigned char)+0x57c>)
    1f3c:	4864      	ldr	r0, [pc, #400]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f3e:	f7fe fd43 	bl	9c8 <Print::println(char const*)>
    1f42:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f44:	4974      	ldr	r1, [pc, #464]	; (2118 <print_palette(unsigned char)+0x580>)
    1f46:	4862      	ldr	r0, [pc, #392]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f48:	f7fe fd3e 	bl	9c8 <Print::println(char const*)>
    1f4c:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1f4e:	4973      	ldr	r1, [pc, #460]	; (211c <print_palette(unsigned char)+0x584>)
    1f50:	485f      	ldr	r0, [pc, #380]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f52:	f7fe fd39 	bl	9c8 <Print::println(char const*)>
    1f56:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1f58:	4971      	ldr	r1, [pc, #452]	; (2120 <print_palette(unsigned char)+0x588>)
    1f5a:	485d      	ldr	r0, [pc, #372]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f5c:	f7fe fd34 	bl	9c8 <Print::println(char const*)>
    1f60:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1f62:	4970      	ldr	r1, [pc, #448]	; (2124 <print_palette(unsigned char)+0x58c>)
    1f64:	485a      	ldr	r0, [pc, #360]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f66:	f7fe fd2f 	bl	9c8 <Print::println(char const*)>
    1f6a:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1f6c:	496e      	ldr	r1, [pc, #440]	; (2128 <print_palette(unsigned char)+0x590>)
    1f6e:	4858      	ldr	r0, [pc, #352]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f70:	f7fe fd2a 	bl	9c8 <Print::println(char const*)>
    1f74:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1f76:	496d      	ldr	r1, [pc, #436]	; (212c <print_palette(unsigned char)+0x594>)
    1f78:	4855      	ldr	r0, [pc, #340]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f7a:	f7fe fd25 	bl	9c8 <Print::println(char const*)>
    1f7e:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1f80:	496b      	ldr	r1, [pc, #428]	; (2130 <print_palette(unsigned char)+0x598>)
    1f82:	4853      	ldr	r0, [pc, #332]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f84:	f7fe fd20 	bl	9c8 <Print::println(char const*)>
    1f88:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1f8a:	496a      	ldr	r1, [pc, #424]	; (2134 <print_palette(unsigned char)+0x59c>)
    1f8c:	4850      	ldr	r0, [pc, #320]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f8e:	f7fe fd1b 	bl	9c8 <Print::println(char const*)>
    1f92:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1f94:	4968      	ldr	r1, [pc, #416]	; (2138 <print_palette(unsigned char)+0x5a0>)
    1f96:	484e      	ldr	r0, [pc, #312]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f98:	f7fe fd16 	bl	9c8 <Print::println(char const*)>
    1f9c:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1f9e:	4967      	ldr	r1, [pc, #412]	; (213c <print_palette(unsigned char)+0x5a4>)
    1fa0:	484b      	ldr	r0, [pc, #300]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fa2:	f7fe fd11 	bl	9c8 <Print::println(char const*)>
    1fa6:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1fa8:	4965      	ldr	r1, [pc, #404]	; (2140 <print_palette(unsigned char)+0x5a8>)
    1faa:	4849      	ldr	r0, [pc, #292]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fac:	f7fe fd0c 	bl	9c8 <Print::println(char const*)>
    1fb0:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1fb2:	4964      	ldr	r1, [pc, #400]	; (2144 <print_palette(unsigned char)+0x5ac>)
    1fb4:	4846      	ldr	r0, [pc, #280]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fb6:	f7fe fd07 	bl	9c8 <Print::println(char const*)>
    1fba:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1fbc:	4962      	ldr	r1, [pc, #392]	; (2148 <print_palette(unsigned char)+0x5b0>)
    1fbe:	4844      	ldr	r0, [pc, #272]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fc0:	f7fe fd02 	bl	9c8 <Print::println(char const*)>
    1fc4:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1fc6:	4961      	ldr	r1, [pc, #388]	; (214c <print_palette(unsigned char)+0x5b4>)
    1fc8:	4841      	ldr	r0, [pc, #260]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fca:	f7fe fcfd 	bl	9c8 <Print::println(char const*)>
    1fce:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1fd0:	495f      	ldr	r1, [pc, #380]	; (2150 <print_palette(unsigned char)+0x5b8>)
    1fd2:	483f      	ldr	r0, [pc, #252]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fd4:	f7fe fcf8 	bl	9c8 <Print::println(char const*)>
    1fd8:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1fda:	495e      	ldr	r1, [pc, #376]	; (2154 <print_palette(unsigned char)+0x5bc>)
    1fdc:	483c      	ldr	r0, [pc, #240]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fde:	f7fe fcf3 	bl	9c8 <Print::println(char const*)>
    1fe2:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1fe4:	495c      	ldr	r1, [pc, #368]	; (2158 <print_palette(unsigned char)+0x5c0>)
    1fe6:	483a      	ldr	r0, [pc, #232]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fe8:	f7fe fcee 	bl	9c8 <Print::println(char const*)>
    1fec:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1fee:	495b      	ldr	r1, [pc, #364]	; (215c <print_palette(unsigned char)+0x5c4>)
    1ff0:	4837      	ldr	r0, [pc, #220]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ff2:	f7fe fce9 	bl	9c8 <Print::println(char const*)>
    1ff6:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1ff8:	4959      	ldr	r1, [pc, #356]	; (2160 <print_palette(unsigned char)+0x5c8>)
    1ffa:	4835      	ldr	r0, [pc, #212]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ffc:	f7fe fce4 	bl	9c8 <Print::println(char const*)>
    2000:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    2002:	4958      	ldr	r1, [pc, #352]	; (2164 <print_palette(unsigned char)+0x5cc>)
    2004:	4832      	ldr	r0, [pc, #200]	; (20d0 <print_palette(unsigned char)+0x538>)
    2006:	f7fe fcdf 	bl	9c8 <Print::println(char const*)>
    200a:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    200c:	4956      	ldr	r1, [pc, #344]	; (2168 <print_palette(unsigned char)+0x5d0>)
    200e:	4830      	ldr	r0, [pc, #192]	; (20d0 <print_palette(unsigned char)+0x538>)
    2010:	f7fe fcda 	bl	9c8 <Print::println(char const*)>
    2014:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    2016:	4955      	ldr	r1, [pc, #340]	; (216c <print_palette(unsigned char)+0x5d4>)
    2018:	482d      	ldr	r0, [pc, #180]	; (20d0 <print_palette(unsigned char)+0x538>)
    201a:	f7fe fcd5 	bl	9c8 <Print::println(char const*)>
    201e:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2020:	4953      	ldr	r1, [pc, #332]	; (2170 <print_palette(unsigned char)+0x5d8>)
    2022:	482b      	ldr	r0, [pc, #172]	; (20d0 <print_palette(unsigned char)+0x538>)
    2024:	f7fe fcd0 	bl	9c8 <Print::println(char const*)>
    2028:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    202a:	4952      	ldr	r1, [pc, #328]	; (2174 <print_palette(unsigned char)+0x5dc>)
    202c:	4828      	ldr	r0, [pc, #160]	; (20d0 <print_palette(unsigned char)+0x538>)
    202e:	f7fe fccb 	bl	9c8 <Print::println(char const*)>
    2032:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    2034:	4950      	ldr	r1, [pc, #320]	; (2178 <print_palette(unsigned char)+0x5e0>)
    2036:	4826      	ldr	r0, [pc, #152]	; (20d0 <print_palette(unsigned char)+0x538>)
    2038:	f7fe fcc6 	bl	9c8 <Print::println(char const*)>
    203c:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    203e:	494f      	ldr	r1, [pc, #316]	; (217c <print_palette(unsigned char)+0x5e4>)
    2040:	4823      	ldr	r0, [pc, #140]	; (20d0 <print_palette(unsigned char)+0x538>)
    2042:	f7fe fcc1 	bl	9c8 <Print::println(char const*)>
    2046:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    2048:	494d      	ldr	r1, [pc, #308]	; (2180 <print_palette(unsigned char)+0x5e8>)
    204a:	4821      	ldr	r0, [pc, #132]	; (20d0 <print_palette(unsigned char)+0x538>)
    204c:	f7fe fcbc 	bl	9c8 <Print::println(char const*)>
    2050:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    2052:	494c      	ldr	r1, [pc, #304]	; (2184 <print_palette(unsigned char)+0x5ec>)
    2054:	481e      	ldr	r0, [pc, #120]	; (20d0 <print_palette(unsigned char)+0x538>)
    2056:	f7fe fcb7 	bl	9c8 <Print::println(char const*)>
    205a:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    205c:	494a      	ldr	r1, [pc, #296]	; (2188 <print_palette(unsigned char)+0x5f0>)
    205e:	481c      	ldr	r0, [pc, #112]	; (20d0 <print_palette(unsigned char)+0x538>)
    2060:	f7fe fcb2 	bl	9c8 <Print::println(char const*)>
    2064:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    2066:	4949      	ldr	r1, [pc, #292]	; (218c <print_palette(unsigned char)+0x5f4>)
    2068:	4819      	ldr	r0, [pc, #100]	; (20d0 <print_palette(unsigned char)+0x538>)
    206a:	f7fe fcad 	bl	9c8 <Print::println(char const*)>
    206e:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    2070:	4947      	ldr	r1, [pc, #284]	; (2190 <print_palette(unsigned char)+0x5f8>)
    2072:	4817      	ldr	r0, [pc, #92]	; (20d0 <print_palette(unsigned char)+0x538>)
    2074:	f7fe fca8 	bl	9c8 <Print::println(char const*)>
    2078:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    207a:	4946      	ldr	r1, [pc, #280]	; (2194 <print_palette(unsigned char)+0x5fc>)
    207c:	4814      	ldr	r0, [pc, #80]	; (20d0 <print_palette(unsigned char)+0x538>)
    207e:	f7fe fca3 	bl	9c8 <Print::println(char const*)>
    2082:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    2084:	4944      	ldr	r1, [pc, #272]	; (2198 <print_palette(unsigned char)+0x600>)
    2086:	4812      	ldr	r0, [pc, #72]	; (20d0 <print_palette(unsigned char)+0x538>)
    2088:	f7fe fc9e 	bl	9c8 <Print::println(char const*)>
    208c:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    208e:	4943      	ldr	r1, [pc, #268]	; (219c <print_palette(unsigned char)+0x604>)
    2090:	480f      	ldr	r0, [pc, #60]	; (20d0 <print_palette(unsigned char)+0x538>)
    2092:	f7fe fc99 	bl	9c8 <Print::println(char const*)>
    2096:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    2098:	4941      	ldr	r1, [pc, #260]	; (21a0 <print_palette(unsigned char)+0x608>)
    209a:	480d      	ldr	r0, [pc, #52]	; (20d0 <print_palette(unsigned char)+0x538>)
    209c:	f7fe fc94 	bl	9c8 <Print::println(char const*)>
    20a0:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20a2:	4940      	ldr	r1, [pc, #256]	; (21a4 <print_palette(unsigned char)+0x60c>)
    20a4:	480a      	ldr	r0, [pc, #40]	; (20d0 <print_palette(unsigned char)+0x538>)
    20a6:	f7fe fc8f 	bl	9c8 <Print::println(char const*)>
    20aa:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    20ac:	493e      	ldr	r1, [pc, #248]	; (21a8 <print_palette(unsigned char)+0x610>)
    20ae:	4808      	ldr	r0, [pc, #32]	; (20d0 <print_palette(unsigned char)+0x538>)
    20b0:	f7fe fc8a 	bl	9c8 <Print::println(char const*)>
    20b4:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    20b6:	493d      	ldr	r1, [pc, #244]	; (21ac <print_palette(unsigned char)+0x614>)
    20b8:	4805      	ldr	r0, [pc, #20]	; (20d0 <print_palette(unsigned char)+0x538>)
    20ba:	f7fe fc85 	bl	9c8 <Print::println(char const*)>
    20be:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    20c0:	493b      	ldr	r1, [pc, #236]	; (21b0 <print_palette(unsigned char)+0x618>)
    20c2:	4803      	ldr	r0, [pc, #12]	; (20d0 <print_palette(unsigned char)+0x538>)
    20c4:	f7fe fc80 	bl	9c8 <Print::println(char const*)>
    20c8:	bd10      	pop	{r4, pc}
    20ca:	bf00      	nop
    20cc:	0000f5fc 	.word	0x0000f5fc
    20d0:	1fff878c 	.word	0x1fff878c
    20d4:	0000f5ec 	.word	0x0000f5ec
    20d8:	0000f5e0 	.word	0x0000f5e0
    20dc:	0000f5d4 	.word	0x0000f5d4
    20e0:	0000f5c8 	.word	0x0000f5c8
    20e4:	0000f5b4 	.word	0x0000f5b4
    20e8:	0000f5a8 	.word	0x0000f5a8
    20ec:	0000f59c 	.word	0x0000f59c
    20f0:	0000f590 	.word	0x0000f590
    20f4:	0000f578 	.word	0x0000f578
    20f8:	0000f570 	.word	0x0000f570
    20fc:	0000f608 	.word	0x0000f608
    2100:	0000f564 	.word	0x0000f564
    2104:	0000f558 	.word	0x0000f558
    2108:	0000f544 	.word	0x0000f544
    210c:	0000f530 	.word	0x0000f530
    2110:	0000f520 	.word	0x0000f520
    2114:	0000f514 	.word	0x0000f514
    2118:	0000f508 	.word	0x0000f508
    211c:	0000f4fc 	.word	0x0000f4fc
    2120:	0000f4f0 	.word	0x0000f4f0
    2124:	0000f4e4 	.word	0x0000f4e4
    2128:	0000f4d8 	.word	0x0000f4d8
    212c:	0000f4cc 	.word	0x0000f4cc
    2130:	0000f4c0 	.word	0x0000f4c0
    2134:	0000f4b4 	.word	0x0000f4b4
    2138:	0000f4a8 	.word	0x0000f4a8
    213c:	0000f49c 	.word	0x0000f49c
    2140:	0000f48c 	.word	0x0000f48c
    2144:	0000f478 	.word	0x0000f478
    2148:	0000f45c 	.word	0x0000f45c
    214c:	0000f444 	.word	0x0000f444
    2150:	0000f428 	.word	0x0000f428
    2154:	0000f418 	.word	0x0000f418
    2158:	0000f408 	.word	0x0000f408
    215c:	0000f3f4 	.word	0x0000f3f4
    2160:	0000f3e4 	.word	0x0000f3e4
    2164:	0000f3dc 	.word	0x0000f3dc
    2168:	0000f3d4 	.word	0x0000f3d4
    216c:	0000f3bc 	.word	0x0000f3bc
    2170:	0000f3ac 	.word	0x0000f3ac
    2174:	0000f3a4 	.word	0x0000f3a4
    2178:	0000f394 	.word	0x0000f394
    217c:	0000f384 	.word	0x0000f384
    2180:	0000f374 	.word	0x0000f374
    2184:	0000f360 	.word	0x0000f360
    2188:	0000f34c 	.word	0x0000f34c
    218c:	0000f338 	.word	0x0000f338
    2190:	0000f320 	.word	0x0000f320
    2194:	0000f308 	.word	0x0000f308
    2198:	0000f2f8 	.word	0x0000f2f8
    219c:	0000f2e4 	.word	0x0000f2e4
    21a0:	0000f2d0 	.word	0x0000f2d0
    21a4:	0000f2c0 	.word	0x0000f2c0
    21a8:	0000f2b4 	.word	0x0000f2b4
    21ac:	0000f2a8 	.word	0x0000f2a8
    21b0:	0000f850 	.word	0x0000f850

000021b4 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    21b4:	b538      	push	{r3, r4, r5, lr}
    21b6:	2100      	movs	r1, #0
    21b8:	4604      	mov	r4, r0
    21ba:	4898      	ldr	r0, [pc, #608]	; (241c <LEDDebug(LEDStruct&)+0x268>)
    21bc:	f00a f922 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21c0:	4897      	ldr	r0, [pc, #604]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    21c2:	f00a fb23 	bl	c80c <Print::println()>
    21c6:	2122      	movs	r1, #34	; 0x22
    21c8:	4896      	ldr	r0, [pc, #600]	; (2424 <LEDDebug(LEDStruct&)+0x270>)
    21ca:	f00a f91b 	bl	c404 <usb_serial_write>
    21ce:	4894      	ldr	r0, [pc, #592]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    21d0:	f00a fb1c 	bl	c80c <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    21d4:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    21d8:	2b00      	cmp	r3, #0
    21da:	f000 80af 	beq.w	233c <LEDDebug(LEDStruct&)+0x188>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    21de:	2b01      	cmp	r3, #1
    21e0:	f000 854d 	beq.w	2c7e <LEDDebug(LEDStruct&)+0xaca>
    21e4:	2113      	movs	r1, #19
    21e6:	4890      	ldr	r0, [pc, #576]	; (2428 <LEDDebug(LEDStruct&)+0x274>)
    21e8:	f00a f90c 	bl	c404 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    21ec:	4b8f      	ldr	r3, [pc, #572]	; (242c <LEDDebug(LEDStruct&)+0x278>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21ee:	488c      	ldr	r0, [pc, #560]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    21f0:	7819      	ldrb	r1, [r3, #0]
    21f2:	220a      	movs	r2, #10
    21f4:	2300      	movs	r3, #0
    21f6:	f00a fb19 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    21fa:	2103      	movs	r1, #3
    21fc:	488c      	ldr	r0, [pc, #560]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    21fe:	f00a f901 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2202:	4887      	ldr	r0, [pc, #540]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2204:	f00a fb02 	bl	c80c <Print::println()>
    2208:	2113      	movs	r1, #19
    220a:	488a      	ldr	r0, [pc, #552]	; (2434 <LEDDebug(LEDStruct&)+0x280>)
    220c:	f00a f8fa 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2210:	2300      	movs	r3, #0
    2212:	220a      	movs	r2, #10
    2214:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2218:	4881      	ldr	r0, [pc, #516]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    221a:	f00a fb07 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    221e:	2103      	movs	r1, #3
    2220:	4883      	ldr	r0, [pc, #524]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2222:	f00a f8ef 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2226:	487e      	ldr	r0, [pc, #504]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2228:	f00a faf0 	bl	c80c <Print::println()>
    222c:	2111      	movs	r1, #17
    222e:	4882      	ldr	r0, [pc, #520]	; (2438 <LEDDebug(LEDStruct&)+0x284>)
    2230:	f00a f8e8 	bl	c404 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2234:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2238:	4879      	ldr	r0, [pc, #484]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    223a:	f00a fb37 	bl	c8ac <Print::print(long)>
    223e:	2103      	movs	r1, #3
    2240:	487b      	ldr	r0, [pc, #492]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2242:	f00a f8df 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2246:	4876      	ldr	r0, [pc, #472]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2248:	f00a fae0 	bl	c80c <Print::println()>
    224c:	2111      	movs	r1, #17
    224e:	487b      	ldr	r0, [pc, #492]	; (243c <LEDDebug(LEDStruct&)+0x288>)
    2250:	f00a f8d8 	bl	c404 <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEAR"); }
    2254:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    2258:	2b01      	cmp	r3, #1
    225a:	d074      	beq.n	2346 <LEDDebug(LEDStruct&)+0x192>
    225c:	2107      	movs	r1, #7
    225e:	4878      	ldr	r0, [pc, #480]	; (2440 <LEDDebug(LEDStruct&)+0x28c>)
    2260:	f00a f8d0 	bl	c404 <usb_serial_write>
    2264:	2103      	movs	r1, #3
    2266:	4872      	ldr	r0, [pc, #456]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2268:	f00a f8cc 	bl	c404 <usb_serial_write>
    226c:	486c      	ldr	r0, [pc, #432]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    226e:	f00a facd 	bl	c80c <Print::println()>
    2272:	2114      	movs	r1, #20
    2274:	4873      	ldr	r0, [pc, #460]	; (2444 <LEDDebug(LEDStruct&)+0x290>)
    2276:	f00a f8c5 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    227a:	2300      	movs	r3, #0
    227c:	220a      	movs	r2, #10
    227e:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    2282:	4867      	ldr	r0, [pc, #412]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2284:	f00a fad2 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2288:	2103      	movs	r1, #3
    228a:	4869      	ldr	r0, [pc, #420]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    228c:	f00a f8ba 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2290:	4863      	ldr	r0, [pc, #396]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2292:	f00a fabb 	bl	c80c <Print::println()>
    2296:	2115      	movs	r1, #21
    2298:	486b      	ldr	r0, [pc, #428]	; (2448 <LEDDebug(LEDStruct&)+0x294>)
    229a:	f00a f8b3 	bl	c404 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    229e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22a2:	485f      	ldr	r0, [pc, #380]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22a4:	f00a fb02 	bl	c8ac <Print::print(long)>
    22a8:	2103      	movs	r1, #3
    22aa:	4861      	ldr	r0, [pc, #388]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    22ac:	f00a f8aa 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22b0:	485b      	ldr	r0, [pc, #364]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22b2:	f00a faab 	bl	c80c <Print::println()>
    22b6:	2111      	movs	r1, #17
    22b8:	4864      	ldr	r0, [pc, #400]	; (244c <LEDDebug(LEDStruct&)+0x298>)
    22ba:	f00a f8a3 	bl	c404 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22be:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    22c2:	4857      	ldr	r0, [pc, #348]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22c4:	f00a faf2 	bl	c8ac <Print::print(long)>
    22c8:	2103      	movs	r1, #3
    22ca:	4859      	ldr	r0, [pc, #356]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    22cc:	f00a f89a 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22d0:	4853      	ldr	r0, [pc, #332]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22d2:	f00a fa9b 	bl	c80c <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    22d6:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    22da:	bb53      	cbnz	r3, 2332 <LEDDebug(LEDStruct&)+0x17e>
    22dc:	2122      	movs	r1, #34	; 0x22
    22de:	4851      	ldr	r0, [pc, #324]	; (2424 <LEDDebug(LEDStruct&)+0x270>)
    22e0:	f00a f890 	bl	c404 <usb_serial_write>
    22e4:	484e      	ldr	r0, [pc, #312]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22e6:	f00a fa91 	bl	c80c <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    22ea:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    22ee:	2b1c      	cmp	r3, #28
    22f0:	f200 84b7 	bhi.w	2c62 <LEDDebug(LEDStruct&)+0xaae>
    22f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    22f8:	04b500c0 	.word	0x04b500c0
    22fc:	04b504b5 	.word	0x04b504b5
    2300:	04b504b5 	.word	0x04b504b5
    2304:	013d04b5 	.word	0x013d04b5
    2308:	04b504b5 	.word	0x04b504b5
    230c:	04b504b5 	.word	0x04b504b5
    2310:	04b50198 	.word	0x04b50198
    2314:	04b504b5 	.word	0x04b504b5
    2318:	01af01a4 	.word	0x01af01a4
    231c:	01b301b1 	.word	0x01b301b1
    2320:	027901f8 	.word	0x027901f8
    2324:	03b40358 	.word	0x03b40358
    2328:	03f304b5 	.word	0x03f304b5
    232c:	04720449 	.word	0x04720449
    2330:	002c      	.short	0x002c
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2332:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    2336:	f7ff fc2f 	bl	1b98 <print_palette(unsigned char)>
    233a:	e7cf      	b.n	22dc <LEDDebug(LEDStruct&)+0x128>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    233c:	4944      	ldr	r1, [pc, #272]	; (2450 <LEDDebug(LEDStruct&)+0x29c>)
    233e:	4838      	ldr	r0, [pc, #224]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2340:	f7fe fb42 	bl	9c8 <Print::println(char const*)>
    2344:	e74e      	b.n	21e4 <LEDDebug(LEDStruct&)+0x30>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2346:	4943      	ldr	r1, [pc, #268]	; (2454 <LEDDebug(LEDStruct&)+0x2a0>)
    2348:	4835      	ldr	r0, [pc, #212]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    234a:	f7fe fb2f 	bl	9ac <Print::write(char const*)>
    234e:	e789      	b.n	2264 <LEDDebug(LEDStruct&)+0xb0>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2350:	4941      	ldr	r1, [pc, #260]	; (2458 <LEDDebug(LEDStruct&)+0x2a4>)
    2352:	4833      	ldr	r0, [pc, #204]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2354:	f7fe fb38 	bl	9c8 <Print::println(char const*)>
    2358:	4940      	ldr	r1, [pc, #256]	; (245c <LEDDebug(LEDStruct&)+0x2a8>)
    235a:	4831      	ldr	r0, [pc, #196]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    235c:	f7fe fb26 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2360:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2364:	482e      	ldr	r0, [pc, #184]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2366:	f00a faa1 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    236a:	4931      	ldr	r1, [pc, #196]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    236c:	482c      	ldr	r0, [pc, #176]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    236e:	f7fe fb2b 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2372:	493b      	ldr	r1, [pc, #236]	; (2460 <LEDDebug(LEDStruct&)+0x2ac>)
    2374:	482a      	ldr	r0, [pc, #168]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2376:	f7fe fb19 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    237a:	2300      	movs	r3, #0
    237c:	220a      	movs	r2, #10
    237e:	f894 1834 	ldrb.w	r1, [r4, #2100]	; 0x834
    2382:	4827      	ldr	r0, [pc, #156]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2384:	f00a fa52 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2388:	4929      	ldr	r1, [pc, #164]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    238a:	4825      	ldr	r0, [pc, #148]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    238c:	f7fe fb1c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2390:	4934      	ldr	r1, [pc, #208]	; (2464 <LEDDebug(LEDStruct&)+0x2b0>)
    2392:	4823      	ldr	r0, [pc, #140]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2394:	f7fe fb0a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2398:	2300      	movs	r3, #0
    239a:	220a      	movs	r2, #10
    239c:	f894 1835 	ldrb.w	r1, [r4, #2101]	; 0x835
    23a0:	481f      	ldr	r0, [pc, #124]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23a2:	f00a fa43 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    23a6:	4922      	ldr	r1, [pc, #136]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    23a8:	481d      	ldr	r0, [pc, #116]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23aa:	f7fe fb0d 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ae:	492e      	ldr	r1, [pc, #184]	; (2468 <LEDDebug(LEDStruct&)+0x2b4>)
    23b0:	481b      	ldr	r0, [pc, #108]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23b2:	f7fe fafb 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23b6:	2300      	movs	r3, #0
    23b8:	220a      	movs	r2, #10
    23ba:	f894 1836 	ldrb.w	r1, [r4, #2102]	; 0x836
    23be:	4818      	ldr	r0, [pc, #96]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23c0:	f00a fa34 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) plasma_beat3:\t");
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
    23c4:	491a      	ldr	r1, [pc, #104]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    23c6:	4816      	ldr	r0, [pc, #88]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23c8:	f7fe fafe 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23cc:	4927      	ldr	r1, [pc, #156]	; (246c <LEDDebug(LEDStruct&)+0x2b8>)
    23ce:	4814      	ldr	r0, [pc, #80]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23d0:	f7fe faec 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23d4:	2300      	movs	r3, #0
    23d6:	220a      	movs	r2, #10
    23d8:	f894 1839 	ldrb.w	r1, [r4, #2105]	; 0x839
    23dc:	4810      	ldr	r0, [pc, #64]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23de:	f00a fa25 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) plasma_range1:\t");
			Serial.print(leds.plasma_range1);
			Serial.println("\t||");
    23e2:	4913      	ldr	r1, [pc, #76]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    23e4:	480e      	ldr	r0, [pc, #56]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23e6:	f7fe faef 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ea:	4921      	ldr	r1, [pc, #132]	; (2470 <LEDDebug(LEDStruct&)+0x2bc>)
    23ec:	480c      	ldr	r0, [pc, #48]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23ee:	f7fe fadd 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23f2:	f894 183a 	ldrb.w	r1, [r4, #2106]	; 0x83a
    23f6:	480a      	ldr	r0, [pc, #40]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23f8:	2300      	movs	r3, #0
    23fa:	220a      	movs	r2, #10
    23fc:	f00a fa16 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) plasma_range2:\t");
			Serial.print(leds.plasma_range2);
			Serial.println("\t||");
    2400:	490b      	ldr	r1, [pc, #44]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2402:	4807      	ldr	r0, [pc, #28]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2404:	f7fe fae0 	bl	9c8 <Print::println(char const*)>
    2408:	2123      	movs	r1, #35	; 0x23
    240a:	481a      	ldr	r0, [pc, #104]	; (2474 <LEDDebug(LEDStruct&)+0x2c0>)
    240c:	f009 fffa 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2410:	4803      	ldr	r0, [pc, #12]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    2412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2416:	f00a b9f9 	b.w	c80c <Print::println()>
    241a:	bf00      	nop
    241c:	0000fa24 	.word	0x0000fa24
    2420:	1fff878c 	.word	0x1fff878c
    2424:	0000f868 	.word	0x0000f868
    2428:	0000f8d4 	.word	0x0000f8d4
    242c:	1fff871e 	.word	0x1fff871e
    2430:	0000f8e8 	.word	0x0000f8e8
    2434:	0000f8ec 	.word	0x0000f8ec
    2438:	0000f900 	.word	0x0000f900
    243c:	0000f914 	.word	0x0000f914
    2440:	0000f930 	.word	0x0000f930
    2444:	0000f938 	.word	0x0000f938
    2448:	0000f950 	.word	0x0000f950
    244c:	0000f968 	.word	0x0000f968
    2450:	0000f88c 	.word	0x0000f88c
    2454:	0000f928 	.word	0x0000f928
    2458:	00010184 	.word	0x00010184
    245c:	0000f9e8 	.word	0x0000f9e8
    2460:	000101a8 	.word	0x000101a8
    2464:	000101c0 	.word	0x000101c0
    2468:	000101d8 	.word	0x000101d8
    246c:	000101f0 	.word	0x000101f0
    2470:	00010208 	.word	0x00010208
    2474:	00010244 	.word	0x00010244
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    2478:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    247c:	2b04      	cmp	r3, #4
    247e:	f000 84b9 	beq.w	2df4 <LEDDebug(LEDStruct&)+0xc40>
			else if(leds.mode_name == MULTI_JUGGLE)	{ Serial.println("===========MULTI JUGGLE==========="); }
    2482:	2b06      	cmp	r3, #6
    2484:	bf0c      	ite	eq
    2486:	4982      	ldreq	r1, [pc, #520]	; (2690 <LEDDebug(LEDStruct&)+0x4dc>)
			else									{ Serial.println("==============JUGGLE=============="); } // 34 characters
    2488:	4982      	ldrne	r1, [pc, #520]	; (2694 <LEDDebug(LEDStruct&)+0x4e0>)
    248a:	4883      	ldr	r0, [pc, #524]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    248c:	f7fe fa9c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2490:	4982      	ldr	r1, [pc, #520]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    2492:	4881      	ldr	r0, [pc, #516]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2494:	f7fe fa8a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2498:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    249c:	487e      	ldr	r0, [pc, #504]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    249e:	f00a fa05 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24a2:	497f      	ldr	r1, [pc, #508]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24a4:	487c      	ldr	r0, [pc, #496]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24a6:	f7fe fa8f 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24aa:	497e      	ldr	r1, [pc, #504]	; (26a4 <LEDDebug(LEDStruct&)+0x4f0>)
    24ac:	487a      	ldr	r0, [pc, #488]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24ae:	f7fe fa7d 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24b2:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    24b6:	4878      	ldr	r0, [pc, #480]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24b8:	f00a f9f8 	bl	c8ac <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    24bc:	4978      	ldr	r1, [pc, #480]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24be:	4876      	ldr	r0, [pc, #472]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24c0:	f7fe fa82 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24c4:	4978      	ldr	r1, [pc, #480]	; (26a8 <LEDDebug(LEDStruct&)+0x4f4>)
    24c6:	4874      	ldr	r0, [pc, #464]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24c8:	f7fe fa70 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24cc:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    24d0:	4871      	ldr	r0, [pc, #452]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24d2:	f00a f9eb 	bl	c8ac <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    24d6:	4972      	ldr	r1, [pc, #456]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24d8:	486f      	ldr	r0, [pc, #444]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24da:	f7fe fa75 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24de:	4973      	ldr	r1, [pc, #460]	; (26ac <LEDDebug(LEDStruct&)+0x4f8>)
    24e0:	486d      	ldr	r0, [pc, #436]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24e2:	f7fe fa63 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24e6:	2300      	movs	r3, #0
    24e8:	220a      	movs	r2, #10
    24ea:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    24ee:	486a      	ldr	r0, [pc, #424]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24f0:	f00a f99c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    24f4:	496a      	ldr	r1, [pc, #424]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24f6:	4868      	ldr	r0, [pc, #416]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24f8:	f7fe fa66 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24fc:	496c      	ldr	r1, [pc, #432]	; (26b0 <LEDDebug(LEDStruct&)+0x4fc>)
    24fe:	4866      	ldr	r0, [pc, #408]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2500:	f7fe fa54 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2504:	2300      	movs	r3, #0
    2506:	220a      	movs	r2, #10
    2508:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    250c:	4862      	ldr	r0, [pc, #392]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    250e:	f00a f98d 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2512:	4963      	ldr	r1, [pc, #396]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2514:	4860      	ldr	r0, [pc, #384]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2516:	f7fe fa57 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    251a:	4966      	ldr	r1, [pc, #408]	; (26b4 <LEDDebug(LEDStruct&)+0x500>)
    251c:	485e      	ldr	r0, [pc, #376]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    251e:	f7fe fa45 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2522:	2300      	movs	r3, #0
    2524:	220a      	movs	r2, #10
    2526:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    252a:	485b      	ldr	r0, [pc, #364]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    252c:	f00a f97e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2530:	495b      	ldr	r1, [pc, #364]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2532:	4859      	ldr	r0, [pc, #356]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2534:	f7fe fa48 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2538:	495f      	ldr	r1, [pc, #380]	; (26b8 <LEDDebug(LEDStruct&)+0x504>)
    253a:	4857      	ldr	r0, [pc, #348]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    253c:	f7fe fa36 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2540:	2300      	movs	r3, #0
    2542:	220a      	movs	r2, #10
    2544:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2548:	4853      	ldr	r0, [pc, #332]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    254a:	f00a f96f 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    254e:	4954      	ldr	r1, [pc, #336]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2550:	4851      	ldr	r0, [pc, #324]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2552:	f7fe fa39 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2556:	4959      	ldr	r1, [pc, #356]	; (26bc <LEDDebug(LEDStruct&)+0x508>)
    2558:	484f      	ldr	r0, [pc, #316]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    255a:	f7fe fa27 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    255e:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2562:	484d      	ldr	r0, [pc, #308]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2564:	f00a f9a2 	bl	c8ac <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2568:	494d      	ldr	r1, [pc, #308]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    256a:	484b      	ldr	r0, [pc, #300]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    256c:	f7fe fa2c 	bl	9c8 <Print::println(char const*)>
			break;
    2570:	e74a      	b.n	2408 <LEDDebug(LEDStruct&)+0x254>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    2572:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2576:	2b08      	cmp	r3, #8
    2578:	f000 841a 	beq.w	2db0 <LEDDebug(LEDStruct&)+0xbfc>
    257c:	2b0a      	cmp	r3, #10
    257e:	f000 8433 	beq.w	2de8 <LEDDebug(LEDStruct&)+0xc34>
    2582:	2b07      	cmp	r3, #7
    2584:	d103      	bne.n	258e <LEDDebug(LEDStruct&)+0x3da>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    2586:	494e      	ldr	r1, [pc, #312]	; (26c0 <LEDDebug(LEDStruct&)+0x50c>)
    2588:	4843      	ldr	r0, [pc, #268]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    258a:	f7fe fa1d 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    258e:	4943      	ldr	r1, [pc, #268]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    2590:	4841      	ldr	r0, [pc, #260]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2592:	f7fe fa0b 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2596:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    259a:	483f      	ldr	r0, [pc, #252]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    259c:	f00a f986 	bl	c8ac <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    25a0:	493f      	ldr	r1, [pc, #252]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25a2:	483d      	ldr	r0, [pc, #244]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25a4:	f7fe fa10 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25a8:	4946      	ldr	r1, [pc, #280]	; (26c4 <LEDDebug(LEDStruct&)+0x510>)
    25aa:	483b      	ldr	r0, [pc, #236]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25ac:	f7fe f9fe 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25b0:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    25b4:	4838      	ldr	r0, [pc, #224]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25b6:	f00a f979 	bl	c8ac <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    25ba:	4939      	ldr	r1, [pc, #228]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25bc:	4836      	ldr	r0, [pc, #216]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25be:	f7fe fa03 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25c2:	4941      	ldr	r1, [pc, #260]	; (26c8 <LEDDebug(LEDStruct&)+0x514>)
    25c4:	4834      	ldr	r0, [pc, #208]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25c6:	f7fe f9f1 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25ca:	2300      	movs	r3, #0
    25cc:	220a      	movs	r2, #10
    25ce:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    25d2:	4831      	ldr	r0, [pc, #196]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25d4:	f00a f92a 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    25d8:	4931      	ldr	r1, [pc, #196]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25da:	482f      	ldr	r0, [pc, #188]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25dc:	f7fe f9f4 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25e0:	493a      	ldr	r1, [pc, #232]	; (26cc <LEDDebug(LEDStruct&)+0x518>)
    25e2:	482d      	ldr	r0, [pc, #180]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25e4:	f7fe f9e2 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25e8:	2300      	movs	r3, #0
    25ea:	220a      	movs	r2, #10
    25ec:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    25f0:	4829      	ldr	r0, [pc, #164]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25f2:	f00a f91b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    25f6:	492a      	ldr	r1, [pc, #168]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25f8:	4827      	ldr	r0, [pc, #156]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25fa:	f7fe f9e5 	bl	9c8 <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    25fe:	f894 522c 	ldrb.w	r5, [r4, #556]	; 0x22c
    2602:	2d0a      	cmp	r5, #10
    2604:	f47f af00 	bne.w	2408 <LEDDebug(LEDStruct&)+0x254>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2608:	4931      	ldr	r1, [pc, #196]	; (26d0 <LEDDebug(LEDStruct&)+0x51c>)
    260a:	4823      	ldr	r0, [pc, #140]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    260c:	f7fe f9ce 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2610:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2614:	4820      	ldr	r0, [pc, #128]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2616:	462a      	mov	r2, r5
    2618:	2300      	movs	r3, #0
    261a:	f00a f907 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (e) juggle_beat:\t");
				Serial.print(leds.juggle_beat);
				Serial.println("\t||");
    261e:	4920      	ldr	r1, [pc, #128]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2620:	481d      	ldr	r0, [pc, #116]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2622:	f7fe f9d1 	bl	9c8 <Print::println(char const*)>
    2626:	e6ef      	b.n	2408 <LEDDebug(LEDStruct&)+0x254>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    2628:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    262c:	3b0c      	subs	r3, #12
    262e:	2b03      	cmp	r3, #3
    2630:	f200 8376 	bhi.w	2d20 <LEDDebug(LEDStruct&)+0xb6c>
    2634:	e8df f013 	tbh	[pc, r3, lsl #1]
    2638:	037003d1 	.word	0x037003d1
    263c:	03c703cc 	.word	0x03c703cc
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    2640:	4924      	ldr	r1, [pc, #144]	; (26d4 <LEDDebug(LEDStruct&)+0x520>)
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2642:	4815      	ldr	r0, [pc, #84]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2644:	f7fe f9c0 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2648:	4914      	ldr	r1, [pc, #80]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    264a:	4813      	ldr	r0, [pc, #76]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    264c:	f7fe f9ae 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2650:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2654:	e785      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
    2656:	4920      	ldr	r1, [pc, #128]	; (26d8 <LEDDebug(LEDStruct&)+0x524>)
    2658:	e7f3      	b.n	2642 <LEDDebug(LEDStruct&)+0x48e>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    265a:	4920      	ldr	r1, [pc, #128]	; (26dc <LEDDebug(LEDStruct&)+0x528>)
    265c:	e7f1      	b.n	2642 <LEDDebug(LEDStruct&)+0x48e>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    265e:	4920      	ldr	r1, [pc, #128]	; (26e0 <LEDDebug(LEDStruct&)+0x52c>)
    2660:	480d      	ldr	r0, [pc, #52]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2662:	f7fe f9b1 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2666:	490d      	ldr	r1, [pc, #52]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    2668:	480b      	ldr	r0, [pc, #44]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    266a:	f7fe f99f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    266e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2672:	4809      	ldr	r0, [pc, #36]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2674:	f00a f91a 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2678:	4909      	ldr	r1, [pc, #36]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    267a:	4807      	ldr	r0, [pc, #28]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    267c:	f7fe f9a4 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2680:	4918      	ldr	r1, [pc, #96]	; (26e4 <LEDDebug(LEDStruct&)+0x530>)
    2682:	4805      	ldr	r0, [pc, #20]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2684:	f7fe f992 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2688:	f894 133a 	ldrb.w	r1, [r4, #826]	; 0x33a
    268c:	e6b3      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
    268e:	bf00      	nop
    2690:	0000f9a0 	.word	0x0000f9a0
    2694:	0000f9c4 	.word	0x0000f9c4
    2698:	1fff878c 	.word	0x1fff878c
    269c:	0000f9e8 	.word	0x0000f9e8
    26a0:	0000f8e8 	.word	0x0000f8e8
    26a4:	0000fa00 	.word	0x0000fa00
    26a8:	0000fa14 	.word	0x0000fa14
    26ac:	0000fa28 	.word	0x0000fa28
    26b0:	0000fa3c 	.word	0x0000fa3c
    26b4:	0000fa4c 	.word	0x0000fa4c
    26b8:	0000fa5c 	.word	0x0000fa5c
    26bc:	0000fa6c 	.word	0x0000fa6c
    26c0:	0000fa84 	.word	0x0000fa84
    26c4:	0000faf0 	.word	0x0000faf0
    26c8:	0000fb00 	.word	0x0000fb00
    26cc:	0000fb10 	.word	0x0000fb10
    26d0:	0000fb20 	.word	0x0000fb20
    26d4:	0000fc28 	.word	0x0000fc28
    26d8:	0000fc4c 	.word	0x0000fc4c
    26dc:	0000fc70 	.word	0x0000fc70
    26e0:	0000fc94 	.word	0x0000fc94
    26e4:	0000fcb8 	.word	0x0000fcb8
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    26e8:	4997      	ldr	r1, [pc, #604]	; (2948 <LEDDebug(LEDStruct&)+0x794>)
    26ea:	4898      	ldr	r0, [pc, #608]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    26ec:	f7fe f96c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26f0:	4997      	ldr	r1, [pc, #604]	; (2950 <LEDDebug(LEDStruct&)+0x79c>)
    26f2:	4896      	ldr	r0, [pc, #600]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    26f4:	f7fe f95a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26f8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26fc:	4893      	ldr	r0, [pc, #588]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    26fe:	f00a f8d5 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2702:	4994      	ldr	r1, [pc, #592]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2704:	4891      	ldr	r0, [pc, #580]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2706:	f7fe f95f 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    270a:	4993      	ldr	r1, [pc, #588]	; (2958 <LEDDebug(LEDStruct&)+0x7a4>)
    270c:	488f      	ldr	r0, [pc, #572]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    270e:	f7fe f94d 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2712:	2300      	movs	r3, #0
    2714:	220a      	movs	r2, #10
    2716:	f894 133b 	ldrb.w	r1, [r4, #827]	; 0x33b
    271a:	488c      	ldr	r0, [pc, #560]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    271c:	f00a f886 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2720:	498c      	ldr	r1, [pc, #560]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2722:	488a      	ldr	r0, [pc, #552]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2724:	f7fe f950 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2728:	498c      	ldr	r1, [pc, #560]	; (295c <LEDDebug(LEDStruct&)+0x7a8>)
    272a:	4888      	ldr	r0, [pc, #544]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    272c:	f7fe f93e 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2730:	2300      	movs	r3, #0
    2732:	220a      	movs	r2, #10
    2734:	f894 133c 	ldrb.w	r1, [r4, #828]	; 0x33c
    2738:	4884      	ldr	r0, [pc, #528]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    273a:	f00a f877 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    273e:	4985      	ldr	r1, [pc, #532]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2740:	4882      	ldr	r0, [pc, #520]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2742:	f7fe f941 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2746:	4986      	ldr	r1, [pc, #536]	; (2960 <LEDDebug(LEDStruct&)+0x7ac>)
    2748:	4880      	ldr	r0, [pc, #512]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    274a:	f7fe f92f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    274e:	2300      	movs	r3, #0
    2750:	220a      	movs	r2, #10
    2752:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
    2756:	487d      	ldr	r0, [pc, #500]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2758:	f00a f868 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    275c:	497d      	ldr	r1, [pc, #500]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    275e:	487b      	ldr	r0, [pc, #492]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2760:	f7fe f932 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2764:	497f      	ldr	r1, [pc, #508]	; (2964 <LEDDebug(LEDStruct&)+0x7b0>)
    2766:	4879      	ldr	r0, [pc, #484]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2768:	f7fe f920 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    276c:	2300      	movs	r3, #0
    276e:	220a      	movs	r2, #10
    2770:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2774:	4875      	ldr	r0, [pc, #468]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2776:	f00a f859 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    277a:	4976      	ldr	r1, [pc, #472]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    277c:	4873      	ldr	r0, [pc, #460]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    277e:	f7fe f923 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2782:	4979      	ldr	r1, [pc, #484]	; (2968 <LEDDebug(LEDStruct&)+0x7b4>)
    2784:	4871      	ldr	r0, [pc, #452]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2786:	f7fe f911 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    278a:	2300      	movs	r3, #0
    278c:	220a      	movs	r2, #10
    278e:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2792:	486e      	ldr	r0, [pc, #440]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2794:	f00a f84a 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2798:	496e      	ldr	r1, [pc, #440]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    279a:	486c      	ldr	r0, [pc, #432]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    279c:	f7fe f914 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27a0:	4972      	ldr	r1, [pc, #456]	; (296c <LEDDebug(LEDStruct&)+0x7b8>)
    27a2:	486a      	ldr	r0, [pc, #424]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27a4:	f7fe f902 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27a8:	2300      	movs	r3, #0
    27aa:	220a      	movs	r2, #10
    27ac:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    27b0:	4866      	ldr	r0, [pc, #408]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27b2:	f00a f83b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    27b6:	4967      	ldr	r1, [pc, #412]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    27b8:	4864      	ldr	r0, [pc, #400]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27ba:	f7fe f905 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27be:	496c      	ldr	r1, [pc, #432]	; (2970 <LEDDebug(LEDStruct&)+0x7bc>)
    27c0:	4862      	ldr	r0, [pc, #392]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27c2:	f7fe f8f3 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27c6:	2300      	movs	r3, #0
    27c8:	220a      	movs	r2, #10
    27ca:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    27ce:	485f      	ldr	r0, [pc, #380]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27d0:	f00a f82c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    27d4:	495f      	ldr	r1, [pc, #380]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    27d6:	485d      	ldr	r0, [pc, #372]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27d8:	f7fe f8f6 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27dc:	4965      	ldr	r1, [pc, #404]	; (2974 <LEDDebug(LEDStruct&)+0x7c0>)
    27de:	485b      	ldr	r0, [pc, #364]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27e0:	f7fe f8e4 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27e4:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    27e8:	e605      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    27ea:	4963      	ldr	r1, [pc, #396]	; (2978 <LEDDebug(LEDStruct&)+0x7c4>)
    27ec:	4857      	ldr	r0, [pc, #348]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27ee:	f7fe f8eb 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27f2:	4957      	ldr	r1, [pc, #348]	; (2950 <LEDDebug(LEDStruct&)+0x79c>)
    27f4:	4855      	ldr	r0, [pc, #340]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27f6:	f7fe f8d9 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27fa:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27fe:	4853      	ldr	r0, [pc, #332]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2800:	f00a f854 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2804:	4953      	ldr	r1, [pc, #332]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2806:	4851      	ldr	r0, [pc, #324]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2808:	f7fe f8de 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    280c:	495b      	ldr	r1, [pc, #364]	; (297c <LEDDebug(LEDStruct&)+0x7c8>)
    280e:	484f      	ldr	r0, [pc, #316]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2810:	f7fe f8cc 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2814:	2300      	movs	r3, #0
    2816:	220a      	movs	r2, #10
    2818:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    281c:	484b      	ldr	r0, [pc, #300]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    281e:	f00a f805 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    2822:	494c      	ldr	r1, [pc, #304]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2824:	4849      	ldr	r0, [pc, #292]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2826:	f7fe f8cf 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    282a:	4955      	ldr	r1, [pc, #340]	; (2980 <LEDDebug(LEDStruct&)+0x7cc>)
    282c:	4847      	ldr	r0, [pc, #284]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    282e:	f7fe f8bd 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2832:	2300      	movs	r3, #0
    2834:	220a      	movs	r2, #10
    2836:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    283a:	4844      	ldr	r0, [pc, #272]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    283c:	f009 fff6 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    2840:	4944      	ldr	r1, [pc, #272]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2842:	4842      	ldr	r0, [pc, #264]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2844:	f7fe f8c0 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2848:	494e      	ldr	r1, [pc, #312]	; (2984 <LEDDebug(LEDStruct&)+0x7d0>)
    284a:	4840      	ldr	r0, [pc, #256]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    284c:	f7fe f8ae 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2850:	2300      	movs	r3, #0
    2852:	220a      	movs	r2, #10
    2854:	f894 133c 	ldrb.w	r1, [r4, #828]	; 0x33c
    2858:	483c      	ldr	r0, [pc, #240]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    285a:	f009 ffe7 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    285e:	493d      	ldr	r1, [pc, #244]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2860:	483a      	ldr	r0, [pc, #232]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2862:	f7fe f8b1 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2866:	4948      	ldr	r1, [pc, #288]	; (2988 <LEDDebug(LEDStruct&)+0x7d4>)
    2868:	4838      	ldr	r0, [pc, #224]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    286a:	f7fe f89f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    286e:	2300      	movs	r3, #0
    2870:	220a      	movs	r2, #10
    2872:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    2876:	4835      	ldr	r0, [pc, #212]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2878:	f009 ffd8 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    287c:	4935      	ldr	r1, [pc, #212]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    287e:	4833      	ldr	r0, [pc, #204]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2880:	f7fe f8a2 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2884:	4941      	ldr	r1, [pc, #260]	; (298c <LEDDebug(LEDStruct&)+0x7d8>)
    2886:	4831      	ldr	r0, [pc, #196]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2888:	f7fe f890 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    288c:	2300      	movs	r3, #0
    288e:	220a      	movs	r2, #10
    2890:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2894:	482d      	ldr	r0, [pc, #180]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2896:	f009 ffc9 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    289a:	492e      	ldr	r1, [pc, #184]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    289c:	482b      	ldr	r0, [pc, #172]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    289e:	f7fe f893 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28a2:	493b      	ldr	r1, [pc, #236]	; (2990 <LEDDebug(LEDStruct&)+0x7dc>)
    28a4:	4829      	ldr	r0, [pc, #164]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28a6:	f7fe f881 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28aa:	2300      	movs	r3, #0
    28ac:	220a      	movs	r2, #10
    28ae:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    28b2:	4826      	ldr	r0, [pc, #152]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28b4:	f009 ffba 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    28b8:	4926      	ldr	r1, [pc, #152]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    28ba:	4824      	ldr	r0, [pc, #144]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28bc:	f7fe f884 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28c0:	4934      	ldr	r1, [pc, #208]	; (2994 <LEDDebug(LEDStruct&)+0x7e0>)
    28c2:	4822      	ldr	r0, [pc, #136]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28c4:	f7fe f872 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c8:	2300      	movs	r3, #0
    28ca:	220a      	movs	r2, #10
    28cc:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
    28d0:	481e      	ldr	r0, [pc, #120]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28d2:	f009 ffab 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    28d6:	491f      	ldr	r1, [pc, #124]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    28d8:	481c      	ldr	r0, [pc, #112]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28da:	f7fe f875 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28de:	492e      	ldr	r1, [pc, #184]	; (2998 <LEDDebug(LEDStruct&)+0x7e4>)
    28e0:	481a      	ldr	r0, [pc, #104]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28e2:	f7fe f863 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28e6:	2300      	movs	r3, #0
    28e8:	220a      	movs	r2, #10
    28ea:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    28ee:	4817      	ldr	r0, [pc, #92]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28f0:	f009 ff9c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    28f4:	4917      	ldr	r1, [pc, #92]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    28f6:	4815      	ldr	r0, [pc, #84]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28f8:	f7fe f866 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28fc:	4927      	ldr	r1, [pc, #156]	; (299c <LEDDebug(LEDStruct&)+0x7e8>)
    28fe:	4813      	ldr	r0, [pc, #76]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2900:	f7fe f854 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2904:	2300      	movs	r3, #0
    2906:	220a      	movs	r2, #10
    2908:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    290c:	480f      	ldr	r0, [pc, #60]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    290e:	f009 ff8d 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2912:	4910      	ldr	r1, [pc, #64]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2914:	480d      	ldr	r0, [pc, #52]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2916:	f7fe f857 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    291a:	4921      	ldr	r1, [pc, #132]	; (29a0 <LEDDebug(LEDStruct&)+0x7ec>)
    291c:	480b      	ldr	r0, [pc, #44]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    291e:	f7fe f845 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2922:	2300      	movs	r3, #0
    2924:	220a      	movs	r2, #10
    2926:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    292a:	4808      	ldr	r0, [pc, #32]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    292c:	f009 ff7e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    2930:	4908      	ldr	r1, [pc, #32]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2932:	4806      	ldr	r0, [pc, #24]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2934:	f7fe f848 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2938:	491a      	ldr	r1, [pc, #104]	; (29a4 <LEDDebug(LEDStruct&)+0x7f0>)
    293a:	4804      	ldr	r0, [pc, #16]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    293c:	f7fe f836 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2940:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2944:	e557      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
    2946:	bf00      	nop
    2948:	0000fda0 	.word	0x0000fda0
    294c:	1fff878c 	.word	0x1fff878c
    2950:	0000f9e8 	.word	0x0000f9e8
    2954:	0000f8e8 	.word	0x0000f8e8
    2958:	0000fdc4 	.word	0x0000fdc4
    295c:	0000fdd8 	.word	0x0000fdd8
    2960:	0000fdec 	.word	0x0000fdec
    2964:	0000fe00 	.word	0x0000fe00
    2968:	0000fe14 	.word	0x0000fe14
    296c:	0000fe28 	.word	0x0000fe28
    2970:	0000fe3c 	.word	0x0000fe3c
    2974:	0000fe50 	.word	0x0000fe50
    2978:	0000fe64 	.word	0x0000fe64
    297c:	0000fe88 	.word	0x0000fe88
    2980:	0000fe9c 	.word	0x0000fe9c
    2984:	0000feb0 	.word	0x0000feb0
    2988:	0000fec4 	.word	0x0000fec4
    298c:	0000fed8 	.word	0x0000fed8
    2990:	0000feec 	.word	0x0000feec
    2994:	0000ff00 	.word	0x0000ff00
    2998:	0000ff14 	.word	0x0000ff14
    299c:	0000ff28 	.word	0x0000ff28
    29a0:	0000ff3c 	.word	0x0000ff3c
    29a4:	0000ff50 	.word	0x0000ff50
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    29a8:	49b8      	ldr	r1, [pc, #736]	; (2c8c <LEDDebug(LEDStruct&)+0xad8>)
    29aa:	48b9      	ldr	r0, [pc, #740]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29ac:	f7fe f80c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b0:	49b8      	ldr	r1, [pc, #736]	; (2c94 <LEDDebug(LEDStruct&)+0xae0>)
    29b2:	48b7      	ldr	r0, [pc, #732]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29b4:	f7fd fffa 	bl	9ac <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    29b8:	f894 3350 	ldrb.w	r3, [r4, #848]	; 0x350
    29bc:	2b01      	cmp	r3, #1
    29be:	f000 81fd 	beq.w	2dbc <LEDDebug(LEDStruct&)+0xc08>
    29c2:	f0c0 820f 	bcc.w	2de4 <LEDDebug(LEDStruct&)+0xc30>
    29c6:	2b02      	cmp	r3, #2
    29c8:	d107      	bne.n	29da <LEDDebug(LEDStruct&)+0x826>
    29ca:	49b3      	ldr	r1, [pc, #716]	; (2c98 <LEDDebug(LEDStruct&)+0xae4>)
    29cc:	48b0      	ldr	r0, [pc, #704]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29ce:	f7fd ffed 	bl	9ac <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    29d2:	49b2      	ldr	r1, [pc, #712]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    29d4:	48ae      	ldr	r0, [pc, #696]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29d6:	f7fd fff7 	bl	9c8 <Print::println(char const*)>
    29da:	49b1      	ldr	r1, [pc, #708]	; (2ca0 <LEDDebug(LEDStruct&)+0xaec>)
    29dc:	48ac      	ldr	r0, [pc, #688]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29de:	f7fd ffe5 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29e2:	2300      	movs	r3, #0
    29e4:	220a      	movs	r2, #10
    29e6:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    29ea:	48a9      	ldr	r0, [pc, #676]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29ec:	f009 ff1e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    29f0:	49aa      	ldr	r1, [pc, #680]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    29f2:	48a7      	ldr	r0, [pc, #668]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29f4:	f7fd ffe8 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29f8:	49aa      	ldr	r1, [pc, #680]	; (2ca4 <LEDDebug(LEDStruct&)+0xaf0>)
    29fa:	48a5      	ldr	r0, [pc, #660]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29fc:	f7fd ffd6 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a00:	2300      	movs	r3, #0
    2a02:	220a      	movs	r2, #10
    2a04:	f894 1359 	ldrb.w	r1, [r4, #857]	; 0x359
    2a08:	48a1      	ldr	r0, [pc, #644]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a0a:	f009 ff0f 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    2a0e:	49a3      	ldr	r1, [pc, #652]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a10:	489f      	ldr	r0, [pc, #636]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a12:	f7fd ffd9 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a16:	49a4      	ldr	r1, [pc, #656]	; (2ca8 <LEDDebug(LEDStruct&)+0xaf4>)
    2a18:	489d      	ldr	r0, [pc, #628]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a1a:	f7fd ffc7 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a1e:	2300      	movs	r3, #0
    2a20:	220a      	movs	r2, #10
    2a22:	f894 1758 	ldrb.w	r1, [r4, #1880]	; 0x758
    2a26:	489a      	ldr	r0, [pc, #616]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a28:	f009 ff00 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2a2c:	499b      	ldr	r1, [pc, #620]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a2e:	4898      	ldr	r0, [pc, #608]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a30:	f7fd ffca 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a34:	499d      	ldr	r1, [pc, #628]	; (2cac <LEDDebug(LEDStruct&)+0xaf8>)
    2a36:	4896      	ldr	r0, [pc, #600]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a38:	f7fd ffb8 	bl	9ac <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2a3c:	2300      	movs	r3, #0
    2a3e:	220a      	movs	r2, #10
    2a40:	f8d4 1354 	ldr.w	r1, [r4, #852]	; 0x354
    2a44:	4892      	ldr	r0, [pc, #584]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a46:	f009 fef1 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2a4a:	4994      	ldr	r1, [pc, #592]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a4c:	4890      	ldr	r0, [pc, #576]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a4e:	f7fd ffbb 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a52:	4997      	ldr	r1, [pc, #604]	; (2cb0 <LEDDebug(LEDStruct&)+0xafc>)
    2a54:	488e      	ldr	r0, [pc, #568]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a56:	f7fd ffa9 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a5a:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    2a5e:	e580      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2a60:	4994      	ldr	r1, [pc, #592]	; (2cb4 <LEDDebug(LEDStruct&)+0xb00>)
    2a62:	488b      	ldr	r0, [pc, #556]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a64:	f7fd ffb0 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a68:	4993      	ldr	r1, [pc, #588]	; (2cb8 <LEDDebug(LEDStruct&)+0xb04>)
    2a6a:	4889      	ldr	r0, [pc, #548]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a6c:	f7fd ff9e 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a70:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2a74:	4886      	ldr	r0, [pc, #536]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a76:	f009 ff19 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2a7a:	4988      	ldr	r1, [pc, #544]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a7c:	4884      	ldr	r0, [pc, #528]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a7e:	f7fd ffa3 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a82:	498e      	ldr	r1, [pc, #568]	; (2cbc <LEDDebug(LEDStruct&)+0xb08>)
    2a84:	4882      	ldr	r0, [pc, #520]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a86:	f7fd ff91 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a8a:	f8b4 175a 	ldrh.w	r1, [r4, #1882]	; 0x75a
    2a8e:	4880      	ldr	r0, [pc, #512]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a90:	f009 ff0c 	bl	c8ac <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2a94:	4981      	ldr	r1, [pc, #516]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a96:	487e      	ldr	r0, [pc, #504]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a98:	f7fd ff96 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a9c:	4988      	ldr	r1, [pc, #544]	; (2cc0 <LEDDebug(LEDStruct&)+0xb0c>)
    2a9e:	487c      	ldr	r0, [pc, #496]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aa0:	f7fd ff84 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2aa4:	f8b4 175c 	ldrh.w	r1, [r4, #1884]	; 0x75c
    2aa8:	4879      	ldr	r0, [pc, #484]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aaa:	f009 feff 	bl	c8ac <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2aae:	497b      	ldr	r1, [pc, #492]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2ab0:	4877      	ldr	r0, [pc, #476]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ab2:	f7fd ff89 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ab6:	4983      	ldr	r1, [pc, #524]	; (2cc4 <LEDDebug(LEDStruct&)+0xb10>)
    2ab8:	4875      	ldr	r0, [pc, #468]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aba:	f7fd ff77 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2abe:	f8b4 175e 	ldrh.w	r1, [r4, #1886]	; 0x75e
    2ac2:	4873      	ldr	r0, [pc, #460]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ac4:	f009 fef2 	bl	c8ac <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2ac8:	4974      	ldr	r1, [pc, #464]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2aca:	4871      	ldr	r0, [pc, #452]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2acc:	f7fd ff7c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ad0:	497d      	ldr	r1, [pc, #500]	; (2cc8 <LEDDebug(LEDStruct&)+0xb14>)
    2ad2:	486f      	ldr	r0, [pc, #444]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ad4:	f7fd ff6a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ad8:	f894 1761 	ldrb.w	r1, [r4, #1889]	; 0x761
    2adc:	e48b      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2ade:	497b      	ldr	r1, [pc, #492]	; (2ccc <LEDDebug(LEDStruct&)+0xb18>)
    2ae0:	486b      	ldr	r0, [pc, #428]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ae2:	f7fd ff71 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae6:	497a      	ldr	r1, [pc, #488]	; (2cd0 <LEDDebug(LEDStruct&)+0xb1c>)
    2ae8:	4869      	ldr	r0, [pc, #420]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aea:	f7fd ff5f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2aee:	2300      	movs	r3, #0
    2af0:	220a      	movs	r2, #10
    2af2:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2af6:	4866      	ldr	r0, [pc, #408]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2af8:	f009 fe98 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2afc:	4967      	ldr	r1, [pc, #412]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2afe:	4864      	ldr	r0, [pc, #400]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b00:	f7fd ff62 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b04:	4973      	ldr	r1, [pc, #460]	; (2cd4 <LEDDebug(LEDStruct&)+0xb20>)
    2b06:	4862      	ldr	r0, [pc, #392]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b08:	f7fd ff50 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b0c:	2300      	movs	r3, #0
    2b0e:	220a      	movs	r2, #10
    2b10:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2b14:	485e      	ldr	r0, [pc, #376]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b16:	f009 fe89 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2b1a:	4960      	ldr	r1, [pc, #384]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b1c:	485c      	ldr	r0, [pc, #368]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b1e:	f7fd ff53 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b22:	496d      	ldr	r1, [pc, #436]	; (2cd8 <LEDDebug(LEDStruct&)+0xb24>)
    2b24:	485a      	ldr	r0, [pc, #360]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b26:	f7fd ff41 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b2a:	2300      	movs	r3, #0
    2b2c:	220a      	movs	r2, #10
    2b2e:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b32:	4857      	ldr	r0, [pc, #348]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b34:	f009 fe7a 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b38:	4958      	ldr	r1, [pc, #352]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b3a:	4855      	ldr	r0, [pc, #340]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b3c:	f7fd ff44 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b40:	4966      	ldr	r1, [pc, #408]	; (2cdc <LEDDebug(LEDStruct&)+0xb28>)
    2b42:	4853      	ldr	r0, [pc, #332]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b44:	f7fd ff32 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b48:	2300      	movs	r3, #0
    2b4a:	220a      	movs	r2, #10
    2b4c:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2b50:	484f      	ldr	r0, [pc, #316]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b52:	f009 fe6b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2b56:	4951      	ldr	r1, [pc, #324]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b58:	484d      	ldr	r0, [pc, #308]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b5a:	f7fd ff35 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b5e:	4960      	ldr	r1, [pc, #384]	; (2ce0 <LEDDebug(LEDStruct&)+0xb2c>)
    2b60:	484b      	ldr	r0, [pc, #300]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b62:	f7fd ff23 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b66:	2300      	movs	r3, #0
    2b68:	220a      	movs	r2, #10
    2b6a:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2b6e:	4848      	ldr	r0, [pc, #288]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b70:	f009 fe5c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2b74:	4949      	ldr	r1, [pc, #292]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b76:	4846      	ldr	r0, [pc, #280]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b78:	f7fd ff26 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b7c:	4959      	ldr	r1, [pc, #356]	; (2ce4 <LEDDebug(LEDStruct&)+0xb30>)
    2b7e:	4844      	ldr	r0, [pc, #272]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b80:	f7fd ff14 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b84:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2b88:	e4eb      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2b8a:	4957      	ldr	r1, [pc, #348]	; (2ce8 <LEDDebug(LEDStruct&)+0xb34>)
    2b8c:	4840      	ldr	r0, [pc, #256]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b8e:	f7fd ff1b 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b92:	4956      	ldr	r1, [pc, #344]	; (2cec <LEDDebug(LEDStruct&)+0xb38>)
    2b94:	483e      	ldr	r0, [pc, #248]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b96:	f7fd ff09 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b9a:	2300      	movs	r3, #0
    2b9c:	220a      	movs	r2, #10
    2b9e:	f894 1763 	ldrb.w	r1, [r4, #1891]	; 0x763
    2ba2:	483b      	ldr	r0, [pc, #236]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ba4:	f009 fe42 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2ba8:	493c      	ldr	r1, [pc, #240]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2baa:	4839      	ldr	r0, [pc, #228]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bac:	f7fd ff0c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb0:	494f      	ldr	r1, [pc, #316]	; (2cf0 <LEDDebug(LEDStruct&)+0xb3c>)
    2bb2:	4837      	ldr	r0, [pc, #220]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bb4:	f7fd fefa 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bb8:	2300      	movs	r3, #0
    2bba:	220a      	movs	r2, #10
    2bbc:	f894 1764 	ldrb.w	r1, [r4, #1892]	; 0x764
    2bc0:	4833      	ldr	r0, [pc, #204]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bc2:	f009 fe33 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2bc6:	4935      	ldr	r1, [pc, #212]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2bc8:	4831      	ldr	r0, [pc, #196]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bca:	f7fd fefd 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bce:	4949      	ldr	r1, [pc, #292]	; (2cf4 <LEDDebug(LEDStruct&)+0xb40>)
    2bd0:	482f      	ldr	r0, [pc, #188]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bd2:	f7fd feeb 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bd6:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2bda:	e4c2      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2bdc:	4946      	ldr	r1, [pc, #280]	; (2cf8 <LEDDebug(LEDStruct&)+0xb44>)
    2bde:	482c      	ldr	r0, [pc, #176]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2be0:	f7fd fef2 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2be4:	4934      	ldr	r1, [pc, #208]	; (2cb8 <LEDDebug(LEDStruct&)+0xb04>)
    2be6:	482a      	ldr	r0, [pc, #168]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2be8:	f7fd fee0 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bec:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2bf0:	4827      	ldr	r0, [pc, #156]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bf2:	f009 fe5b 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2bf6:	4929      	ldr	r1, [pc, #164]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2bf8:	4825      	ldr	r0, [pc, #148]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bfa:	f7fd fee5 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bfe:	493f      	ldr	r1, [pc, #252]	; (2cfc <LEDDebug(LEDStruct&)+0xb48>)
    2c00:	4823      	ldr	r0, [pc, #140]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c02:	f7fd fed3 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c06:	2300      	movs	r3, #0
    2c08:	220a      	movs	r2, #10
    2c0a:	f894 1828 	ldrb.w	r1, [r4, #2088]	; 0x828
    2c0e:	4820      	ldr	r0, [pc, #128]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c10:	f009 fe0c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2c14:	4921      	ldr	r1, [pc, #132]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2c16:	481e      	ldr	r0, [pc, #120]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c18:	f7fd fed6 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c1c:	4938      	ldr	r1, [pc, #224]	; (2d00 <LEDDebug(LEDStruct&)+0xb4c>)
    2c1e:	481c      	ldr	r0, [pc, #112]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c20:	f7fd fec4 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c24:	2300      	movs	r3, #0
    2c26:	220a      	movs	r2, #10
    2c28:	f894 1829 	ldrb.w	r1, [r4, #2089]	; 0x829
    2c2c:	4818      	ldr	r0, [pc, #96]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c2e:	f009 fdfd 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    2c32:	491a      	ldr	r1, [pc, #104]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2c34:	4816      	ldr	r0, [pc, #88]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c36:	f7fd fec7 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c3a:	4932      	ldr	r1, [pc, #200]	; (2d04 <LEDDebug(LEDStruct&)+0xb50>)
    2c3c:	4814      	ldr	r0, [pc, #80]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c3e:	f7fd feb5 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c42:	f894 182a 	ldrb.w	r1, [r4, #2090]	; 0x82a
    2c46:	4812      	ldr	r0, [pc, #72]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c48:	f009 fe30 	bl	c8ac <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    2c4c:	4913      	ldr	r1, [pc, #76]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2c4e:	4810      	ldr	r0, [pc, #64]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c50:	f7fd feba 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c54:	492c      	ldr	r1, [pc, #176]	; (2d08 <LEDDebug(LEDStruct&)+0xb54>)
    2c56:	480e      	ldr	r0, [pc, #56]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c58:	f7fd fea8 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c5c:	f894 182b 	ldrb.w	r1, [r4, #2091]	; 0x82b
    2c60:	e47f      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.println("\t||");
			break;


		default:
			Serial.println("");
    2c62:	492a      	ldr	r1, [pc, #168]	; (2d0c <LEDDebug(LEDStruct&)+0xb58>)
    2c64:	480a      	ldr	r0, [pc, #40]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c66:	f7fd feaf 	bl	9c8 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2c6a:	4929      	ldr	r1, [pc, #164]	; (2d10 <LEDDebug(LEDStruct&)+0xb5c>)
    2c6c:	4808      	ldr	r0, [pc, #32]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c6e:	f7fd feab 	bl	9c8 <Print::println(char const*)>
			Serial.println("");
    2c72:	4926      	ldr	r1, [pc, #152]	; (2d0c <LEDDebug(LEDStruct&)+0xb58>)
    2c74:	4806      	ldr	r0, [pc, #24]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c76:	f7fd fea7 	bl	9c8 <Print::println(char const*)>
			break;
    2c7a:	f7ff bbc5 	b.w	2408 <LEDDebug(LEDStruct&)+0x254>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2c7e:	4925      	ldr	r1, [pc, #148]	; (2d14 <LEDDebug(LEDStruct&)+0xb60>)
    2c80:	4803      	ldr	r0, [pc, #12]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c82:	f7fd fea1 	bl	9c8 <Print::println(char const*)>
    2c86:	f7ff baad 	b.w	21e4 <LEDDebug(LEDStruct&)+0x30>
    2c8a:	bf00      	nop
    2c8c:	0000fcd0 	.word	0x0000fcd0
    2c90:	1fff878c 	.word	0x1fff878c
    2c94:	0000fcf4 	.word	0x0000fcf4
    2c98:	0000fd08 	.word	0x0000fd08
    2c9c:	0000f8e8 	.word	0x0000f8e8
    2ca0:	0000fd24 	.word	0x0000fd24
    2ca4:	0000fd3c 	.word	0x0000fd3c
    2ca8:	0000fd54 	.word	0x0000fd54
    2cac:	0000fd6c 	.word	0x0000fd6c
    2cb0:	0000fd88 	.word	0x0000fd88
    2cb4:	0000ff64 	.word	0x0000ff64
    2cb8:	0000f9e8 	.word	0x0000f9e8
    2cbc:	0000ff88 	.word	0x0000ff88
    2cc0:	0000ffa0 	.word	0x0000ffa0
    2cc4:	0000ffb8 	.word	0x0000ffb8
    2cc8:	0000ffcc 	.word	0x0000ffcc
    2ccc:	0000ffe0 	.word	0x0000ffe0
    2cd0:	00010004 	.word	0x00010004
    2cd4:	0001001c 	.word	0x0001001c
    2cd8:	00010034 	.word	0x00010034
    2cdc:	0001004c 	.word	0x0001004c
    2ce0:	00010064 	.word	0x00010064
    2ce4:	00010078 	.word	0x00010078
    2ce8:	00010090 	.word	0x00010090
    2cec:	000100b4 	.word	0x000100b4
    2cf0:	000100c4 	.word	0x000100c4
    2cf4:	000100e0 	.word	0x000100e0
    2cf8:	000100f8 	.word	0x000100f8
    2cfc:	0001011c 	.word	0x0001011c
    2d00:	00010134 	.word	0x00010134
    2d04:	00010150 	.word	0x00010150
    2d08:	0001016c 	.word	0x0001016c
    2d0c:	0000fa24 	.word	0x0000fa24
    2d10:	00010220 	.word	0x00010220
    2d14:	0000f8b0 	.word	0x0000f8b0
			break;

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2d18:	4939      	ldr	r1, [pc, #228]	; (2e00 <LEDDebug(LEDStruct&)+0xc4c>)
    2d1a:	483a      	ldr	r0, [pc, #232]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d1c:	f7fd fe54 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d20:	4939      	ldr	r1, [pc, #228]	; (2e08 <LEDDebug(LEDStruct&)+0xc54>)
    2d22:	4838      	ldr	r0, [pc, #224]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d24:	f7fd fe42 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d28:	2300      	movs	r3, #0
    2d2a:	220a      	movs	r2, #10
    2d2c:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2d30:	4834      	ldr	r0, [pc, #208]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d32:	f009 fd7b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2d36:	4935      	ldr	r1, [pc, #212]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2d38:	4832      	ldr	r0, [pc, #200]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d3a:	f7fd fe45 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d3e:	4934      	ldr	r1, [pc, #208]	; (2e10 <LEDDebug(LEDStruct&)+0xc5c>)
    2d40:	4830      	ldr	r0, [pc, #192]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d42:	f7fd fe33 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d46:	2300      	movs	r3, #0
    2d48:	220a      	movs	r2, #10
    2d4a:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2d4e:	482d      	ldr	r0, [pc, #180]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d50:	f009 fd6c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2d54:	492d      	ldr	r1, [pc, #180]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2d56:	482b      	ldr	r0, [pc, #172]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d58:	f7fd fe36 	bl	9c8 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2d5c:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    2d60:	b13d      	cbz	r5, 2d72 <LEDDebug(LEDStruct&)+0xbbe>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d62:	492c      	ldr	r1, [pc, #176]	; (2e14 <LEDDebug(LEDStruct&)+0xc60>)
    2d64:	4827      	ldr	r0, [pc, #156]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d66:	f7fd fe21 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d6a:	f894 1316 	ldrb.w	r1, [r4, #790]	; 0x316
    2d6e:	f7ff bbf8 	b.w	2562 <LEDDebug(LEDStruct&)+0x3ae>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d72:	4929      	ldr	r1, [pc, #164]	; (2e18 <LEDDebug(LEDStruct&)+0xc64>)
    2d74:	4823      	ldr	r0, [pc, #140]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d76:	f7fd fe19 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d7a:	462b      	mov	r3, r5
    2d7c:	220a      	movs	r2, #10
    2d7e:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2d82:	4820      	ldr	r0, [pc, #128]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d84:	f009 fd52 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2d88:	4920      	ldr	r1, [pc, #128]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2d8a:	481e      	ldr	r0, [pc, #120]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d8c:	f7fd fe1c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d90:	4922      	ldr	r1, [pc, #136]	; (2e1c <LEDDebug(LEDStruct&)+0xc68>)
    2d92:	481c      	ldr	r0, [pc, #112]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d94:	f7fd fe0a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d98:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2d9c:	4819      	ldr	r0, [pc, #100]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d9e:	462b      	mov	r3, r5
    2da0:	220a      	movs	r2, #10
    2da2:	f009 fd43 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2da6:	4919      	ldr	r1, [pc, #100]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2da8:	4816      	ldr	r0, [pc, #88]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2daa:	f7fd fe0d 	bl	9c8 <Print::println(char const*)>
    2dae:	e7d8      	b.n	2d62 <LEDDebug(LEDStruct&)+0xbae>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    2db0:	491b      	ldr	r1, [pc, #108]	; (2e20 <LEDDebug(LEDStruct&)+0xc6c>)
    2db2:	4814      	ldr	r0, [pc, #80]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2db4:	f7fd fe08 	bl	9c8 <Print::println(char const*)>
    2db8:	f7ff bbe9 	b.w	258e <LEDDebug(LEDStruct&)+0x3da>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2dbc:	4919      	ldr	r1, [pc, #100]	; (2e24 <LEDDebug(LEDStruct&)+0xc70>)
    2dbe:	4811      	ldr	r0, [pc, #68]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dc0:	f7fd fe02 	bl	9c8 <Print::println(char const*)>
    2dc4:	e609      	b.n	29da <LEDDebug(LEDStruct&)+0x826>
		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2dc6:	4918      	ldr	r1, [pc, #96]	; (2e28 <LEDDebug(LEDStruct&)+0xc74>)
    2dc8:	480e      	ldr	r0, [pc, #56]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dca:	f7fd fdfd 	bl	9c8 <Print::println(char const*)>
    2dce:	e7a7      	b.n	2d20 <LEDDebug(LEDStruct&)+0xb6c>

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2dd0:	4916      	ldr	r1, [pc, #88]	; (2e2c <LEDDebug(LEDStruct&)+0xc78>)
    2dd2:	480c      	ldr	r0, [pc, #48]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dd4:	f7fd fdf8 	bl	9c8 <Print::println(char const*)>
    2dd8:	e7a2      	b.n	2d20 <LEDDebug(LEDStruct&)+0xb6c>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
    2dda:	4915      	ldr	r1, [pc, #84]	; (2e30 <LEDDebug(LEDStruct&)+0xc7c>)
    2ddc:	4809      	ldr	r0, [pc, #36]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dde:	f7fd fdf3 	bl	9c8 <Print::println(char const*)>
    2de2:	e79d      	b.n	2d20 <LEDDebug(LEDStruct&)+0xb6c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2de4:	4913      	ldr	r1, [pc, #76]	; (2e34 <LEDDebug(LEDStruct&)+0xc80>)
    2de6:	e5f1      	b.n	29cc <LEDDebug(LEDStruct&)+0x818>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    2de8:	4913      	ldr	r1, [pc, #76]	; (2e38 <LEDDebug(LEDStruct&)+0xc84>)
    2dea:	4806      	ldr	r0, [pc, #24]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dec:	f7fd fdec 	bl	9c8 <Print::println(char const*)>
    2df0:	f7ff bbcd 	b.w	258e <LEDDebug(LEDStruct&)+0x3da>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    2df4:	4911      	ldr	r1, [pc, #68]	; (2e3c <LEDDebug(LEDStruct&)+0xc88>)
    2df6:	4803      	ldr	r0, [pc, #12]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2df8:	f7fd fde6 	bl	9c8 <Print::println(char const*)>
    2dfc:	f7ff bb48 	b.w	2490 <LEDDebug(LEDStruct&)+0x2dc>
    2e00:	0000fb5c 	.word	0x0000fb5c
    2e04:	1fff878c 	.word	0x1fff878c
    2e08:	0000fbc8 	.word	0x0000fbc8
    2e0c:	0000f8e8 	.word	0x0000f8e8
    2e10:	0000fbdc 	.word	0x0000fbdc
    2e14:	0000fc18 	.word	0x0000fc18
    2e18:	0000fbf0 	.word	0x0000fbf0
    2e1c:	0000fc04 	.word	0x0000fc04
    2e20:	0000faa8 	.word	0x0000faa8
    2e24:	0000fd18 	.word	0x0000fd18
    2e28:	0000fba4 	.word	0x0000fba4
    2e2c:	0000fb80 	.word	0x0000fb80
    2e30:	0000fb38 	.word	0x0000fb38
    2e34:	0000fd10 	.word	0x0000fd10
    2e38:	0000facc 	.word	0x0000facc
    2e3c:	0000f97c 	.word	0x0000f97c

00002e40 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2e40:	b538      	push	{r3, r4, r5, lr}
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2e42:	4d1c      	ldr	r5, [pc, #112]	; (2eb4 <change_palette(LEDStruct&) [clone .part.11]+0x74>)
    2e44:	4604      	mov	r4, r0
    2e46:	2134      	movs	r1, #52	; 0x34
    2e48:	481b      	ldr	r0, [pc, #108]	; (2eb8 <change_palette(LEDStruct&) [clone .part.11]+0x78>)
    2e4a:	f009 fadb 	bl	c404 <usb_serial_write>
    2e4e:	4628      	mov	r0, r5
    2e50:	f009 fcdc 	bl	c80c <Print::println()>
    2e54:	2133      	movs	r1, #51	; 0x33
    2e56:	4819      	ldr	r0, [pc, #100]	; (2ebc <change_palette(LEDStruct&) [clone .part.11]+0x7c>)
    2e58:	f009 fad4 	bl	c404 <usb_serial_write>
    2e5c:	4628      	mov	r0, r5
    2e5e:	f009 fcd5 	bl	c80c <Print::println()>
    2e62:	2133      	movs	r1, #51	; 0x33
    2e64:	4816      	ldr	r0, [pc, #88]	; (2ec0 <change_palette(LEDStruct&) [clone .part.11]+0x80>)
    2e66:	f009 facd 	bl	c404 <usb_serial_write>
    2e6a:	4628      	mov	r0, r5
    2e6c:	f009 fcce 	bl	c80c <Print::println()>
    2e70:	4814      	ldr	r0, [pc, #80]	; (2ec4 <change_palette(LEDStruct&) [clone .part.11]+0x84>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2e72:	4a15      	ldr	r2, [pc, #84]	; (2ec8 <change_palette(LEDStruct&) [clone .part.11]+0x88>)
    2e74:	8803      	ldrh	r3, [r0, #0]
    2e76:	7811      	ldrb	r1, [r2, #0]
		leds.target_palette = palettes[leds.palette_index];
    2e78:	4d14      	ldr	r5, [pc, #80]	; (2ecc <change_palette(LEDStruct&) [clone .part.11]+0x8c>)
    2e7a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2e7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2e82:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2e86:	3319      	adds	r3, #25
    2e88:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e8a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2e8e:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2e90:	fb12 f201 	smulbb	r2, r2, r1
    2e94:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e96:	8003      	strh	r3, [r0, #0]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2e98:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
		leds.target_palette = palettes[leds.palette_index];
    2e9c:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    2ea0:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    2ea4:	f7fd fe4c 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
		if (DEBUG) { print_palette(leds.palette_index); }
    2ea8:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
	}
}
    2eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2eb0:	f7fe be72 	b.w	1b98 <print_palette(unsigned char)>
    2eb4:	1fff878c 	.word	0x1fff878c
    2eb8:	00010268 	.word	0x00010268
    2ebc:	000102a0 	.word	0x000102a0
    2ec0:	000102d4 	.word	0x000102d4
    2ec4:	1fff8784 	.word	0x1fff8784
    2ec8:	1fff8750 	.word	0x1fff8750
    2ecc:	0000eb18 	.word	0x0000eb18

00002ed0 <juggle_update(LEDStruct&)>:

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    2ed0:	4b24      	ldr	r3, [pc, #144]	; (2f64 <juggle_update(LEDStruct&)+0x94>)
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2ed2:	4a25      	ldr	r2, [pc, #148]	; (2f68 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    2ed4:	781b      	ldrb	r3, [r3, #0]
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2ed6:	2100      	movs	r1, #0
    2ed8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    2eda:	2b07      	cmp	r3, #7
    2edc:	d809      	bhi.n	2ef2 <juggle_update(LEDStruct&)+0x22>
    2ede:	e8df f003 	tbb	[pc, r3]
    2ee2:	1c13      	.short	0x1c13
    2ee4:	04342e25 	.word	0x04342e25
    2ee8:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    2eea:	4b20      	ldr	r3, [pc, #128]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2eec:	881b      	ldrh	r3, [r3, #0]
    2eee:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2ef2:	f7ff b95f 	b.w	21b4 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    2ef6:	4b1d      	ldr	r3, [pc, #116]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2ef8:	881b      	ldrh	r3, [r3, #0]
    2efa:	3300      	adds	r3, #0
    2efc:	bf18      	it	ne
    2efe:	2301      	movne	r3, #1
    2f00:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    2f04:	f7ff b956 	b.w	21b4 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    2f08:	4b18      	ldr	r3, [pc, #96]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f0a:	881b      	ldrh	r3, [r3, #0]
    2f0c:	3300      	adds	r3, #0
    2f0e:	bf18      	it	ne
    2f10:	2301      	movne	r3, #1
    2f12:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f16:	f7ff b94d 	b.w	21b4 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    2f1a:	4b14      	ldr	r3, [pc, #80]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f1c:	881b      	ldrh	r3, [r3, #0]
    2f1e:	3300      	adds	r3, #0
    2f20:	bf18      	it	ne
    2f22:	2301      	movne	r3, #1
    2f24:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f28:	f7ff b944 	b.w	21b4 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    2f2c:	4b0f      	ldr	r3, [pc, #60]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f2e:	881b      	ldrh	r3, [r3, #0]
    2f30:	3300      	adds	r3, #0
    2f32:	bf18      	it	ne
    2f34:	2301      	movne	r3, #1
    2f36:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f3a:	f7ff b93b 	b.w	21b4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    2f3e:	4b0b      	ldr	r3, [pc, #44]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f40:	881b      	ldrh	r3, [r3, #0]
    2f42:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f46:	f7ff b935 	b.w	21b4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    2f4a:	4b08      	ldr	r3, [pc, #32]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f52:	f7ff b92f 	b.w	21b4 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    2f56:	4b05      	ldr	r3, [pc, #20]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f58:	881b      	ldrh	r3, [r3, #0]
    2f5a:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f5e:	f7ff b929 	b.w	21b4 <LEDDebug(LEDStruct&)>
    2f62:	bf00      	nop
    2f64:	1fff9a18 	.word	0x1fff9a18
    2f68:	1fff91d1 	.word	0x1fff91d1
    2f6c:	1fff90d2 	.word	0x1fff90d2

00002f70 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2f74:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2f78:	b084      	sub	sp, #16
    2f7a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	f040 80a9 	bne.w	30d4 <juggle(LEDStruct&)+0x164>
    2f82:	4ecc      	ldr	r6, [pc, #816]	; (32b4 <juggle(LEDStruct&)+0x344>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2f84:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    2f88:	8833      	ldrh	r3, [r6, #0]
    2f8a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2f92:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2f96:	3019      	adds	r0, #25
    2f98:	b280      	uxth	r0, r0
    2f9a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2f9e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    2fa2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2fa6:	3519      	adds	r5, #25
    2fa8:	b2ad      	uxth	r5, r5
    2faa:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    2fae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2fb2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2fb6:	3319      	adds	r3, #25
    2fb8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2fbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2fc0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2fc4:	3319      	adds	r3, #25
    2fc6:	b29b      	uxth	r3, r3
    2fc8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2fcc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2fd0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2fd4:	3119      	adds	r1, #25
    2fd6:	b289      	uxth	r1, r1
    2fd8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2fdc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2fe0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2fe4:	3219      	adds	r2, #25
    2fe6:	b292      	uxth	r2, r2
    2fe8:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2fec:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2ff0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2ff4:	f10e 0e19 	add.w	lr, lr, #25
    2ff8:	fa1f fe8e 	uxth.w	lr, lr
    2ffc:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3000:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3004:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3008:	f10c 0c19 	add.w	ip, ip, #25
    300c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3010:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3014:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3018:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    301c:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3020:	b2df      	uxtb	r7, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3022:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3026:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3028:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    302c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3030:	b2c9      	uxtb	r1, r1
    3032:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    303a:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    303c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3040:	f108 0819 	add.w	r8, r8, #25
    3044:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3048:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    304c:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    304e:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3050:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3054:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3058:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    305c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    3060:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3064:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3066:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    306a:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    306e:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    3072:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3076:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3078:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    307c:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    3080:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3084:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3088:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    308c:	f107 050a 	add.w	r5, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3090:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3092:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3094:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3098:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    309c:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    30a0:	f884 c234 	strb.w	ip, [r4, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    30a4:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    30a8:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    30ac:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    30b0:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    30b4:	f1bc 0f00 	cmp.w	ip, #0
    30b8:	d004      	beq.n	30c4 <juggle(LEDStruct&)+0x154>
    30ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30be:	408b      	lsls	r3, r1
    30c0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    30c4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    30c8:	2b06      	cmp	r3, #6
    30ca:	f000 830e 	beq.w	36ea <juggle(LEDStruct&)+0x77a>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    30ce:	2b04      	cmp	r3, #4
    30d0:	f000 8312 	beq.w	36f8 <juggle(LEDStruct&)+0x788>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    30d4:	4b78      	ldr	r3, [pc, #480]	; (32b8 <juggle(LEDStruct&)+0x348>)
    30d6:	781b      	ldrb	r3, [r3, #0]
    30d8:	2b00      	cmp	r3, #0
    30da:	f040 8302 	bne.w	36e2 <juggle(LEDStruct&)+0x772>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    30de:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    30e2:	b1d3      	cbz	r3, 311a <juggle(LEDStruct&)+0x1aa>
    30e4:	4b75      	ldr	r3, [pc, #468]	; (32bc <juggle(LEDStruct&)+0x34c>)
    30e6:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    30ea:	2200      	movs	r2, #0
    30ec:	f103 0027 	add.w	r0, r3, #39	; 0x27
    30f0:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    30f4:	e001      	b.n	30fa <juggle(LEDStruct&)+0x18a>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    30f6:	4298      	cmp	r0, r3
    30f8:	d00f      	beq.n	311a <juggle(LEDStruct&)+0x1aa>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    30fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    30fe:	428a      	cmp	r2, r1
    3100:	d1f9      	bne.n	30f6 <juggle(LEDStruct&)+0x186>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3102:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    3106:	4a6e      	ldr	r2, [pc, #440]	; (32c0 <juggle(LEDStruct&)+0x350>)
    3108:	fba2 2303 	umull	r2, r3, r2, r3
    310c:	08db      	lsrs	r3, r3, #3
    310e:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3110:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3112:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3116:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    311a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    311e:	2196      	movs	r1, #150	; 0x96
    3120:	4620      	mov	r0, r4
    3122:	f007 f95d 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3126:	f894 6235 	ldrb.w	r6, [r4, #565]	; 0x235
		if (leds.juggle_phased) {
    312a:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    312e:	2e00      	cmp	r6, #0
    3130:	f040 80b0 	bne.w	3294 <juggle(LEDStruct&)+0x324>
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3134:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    3138:	2b00      	cmp	r3, #0
    313a:	f000 8115 	beq.w	3368 <juggle(LEDStruct&)+0x3f8>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    313e:	2a00      	cmp	r2, #0
    3140:	f000 81eb 	beq.w	351a <juggle(LEDStruct&)+0x5aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3144:	f8df 9180 	ldr.w	r9, [pc, #384]	; 32c8 <juggle(LEDStruct&)+0x358>
    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    uint8_t  m   = slope[section];
    3148:	f8df 8180 	ldr.w	r8, [pc, #384]	; 32cc <juggle(LEDStruct&)+0x35c>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    314c:	4f5d      	ldr	r7, [pc, #372]	; (32c4 <juggle(LEDStruct&)+0x354>)
    314e:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    3152:	e05f      	b.n	3214 <juggle(LEDStruct&)+0x2a4>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3154:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3158:	4432      	add	r2, r6
    315a:	4413      	add	r3, r2
    315c:	f8d9 2000 	ldr.w	r2, [r9]
    3160:	9203      	str	r2, [sp, #12]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3162:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3164:	9903      	ldr	r1, [sp, #12]
    3166:	bf98      	it	ls
    3168:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    316a:	f44f 728c 	mov.w	r2, #280	; 0x118
    316e:	fb02 f201 	mul.w	r2, r2, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3172:	bf98      	it	ls
    3174:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3176:	fb03 f302 	mul.w	r3, r3, r2
    317a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    317c:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    317e:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3182:	d503      	bpl.n	318c <juggle(LEDStruct&)+0x21c>
    3184:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3188:	3207      	adds	r2, #7
    318a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    318c:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    318e:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3192:	f818 0001 	ldrb.w	r0, [r8, r1]
    3196:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    319a:	fb00 1202 	mla	r2, r0, r2, r1

    if( theta & 0x8000 ) y = -y;
    319e:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    31a0:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    31a2:	bf48      	it	mi
    31a4:	4252      	negmi	r2, r2
    31a6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    31aa:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    31ae:	fa0f fa82 	sxth.w	sl, r2
    31b2:	a802      	add	r0, sp, #8
    31b4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    31b8:	9100      	str	r1, [sp, #0]
    31ba:	4629      	mov	r1, r5
    31bc:	f007 f970 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    31c0:	f5aa 4300 	sub.w	r3, sl, #32768	; 0x8000
    31c4:	b29a      	uxth	r2, r3
    31c6:	2396      	movs	r3, #150	; 0x96
    31c8:	fb03 f302 	mul.w	r3, r3, r2
    31cc:	0c1b      	lsrs	r3, r3, #16
    31ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31d2:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    31d4:	5ce2      	ldrb	r2, [r4, r3]
    31d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    31da:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    31de:	54e2      	strb	r2, [r4, r3]
    31e0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    31e4:	784a      	ldrb	r2, [r1, #1]
    31e6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    31ea:	704a      	strb	r2, [r1, #1]
    31ec:	788b      	ldrb	r3, [r1, #2]
    31ee:	f89d 200a 	ldrb.w	r2, [sp, #10]
    31f2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    31f6:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    31f8:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    31fc:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3200:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3204:	3601      	adds	r6, #1
    3206:	b2f6      	uxtb	r6, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3208:	440b      	add	r3, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    320a:	42b2      	cmp	r2, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    320c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3210:	f240 8183 	bls.w	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3214:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3218:	2b00      	cmp	r3, #0
    321a:	d19b      	bne.n	3154 <juggle(LEDStruct&)+0x1e4>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    321c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3220:	4432      	add	r2, r6
    3222:	4619      	mov	r1, r3
    3224:	4410      	add	r0, r2
    3226:	224a      	movs	r2, #74	; 0x4a
    3228:	f7fd f9ea 	bl	600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    322c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3230:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3234:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3238:	9100      	str	r1, [sp, #0]
    323a:	4682      	mov	sl, r0
    323c:	4629      	mov	r1, r5
    323e:	a802      	add	r0, sp, #8
    3240:	f007 f92e 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3244:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    3248:	18e1      	adds	r1, r4, r3
    324a:	5ce2      	ldrb	r2, [r4, r3]
    324c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3250:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3254:	54e2      	strb	r2, [r4, r3]
    3256:	f89d 3009 	ldrb.w	r3, [sp, #9]
    325a:	784a      	ldrb	r2, [r1, #1]
    325c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3260:	704a      	strb	r2, [r1, #1]
    3262:	788b      	ldrb	r3, [r1, #2]
    3264:	f89d 200a 	ldrb.w	r2, [sp, #10]
    3268:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    326c:	708b      	strb	r3, [r1, #2]
    326e:	4622      	mov	r2, r4
    3270:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3274:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3276:	7819      	ldrb	r1, [r3, #0]
    3278:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    327c:	7859      	ldrb	r1, [r3, #1]
    327e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3282:	7899      	ldrb	r1, [r3, #2]
    3284:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3288:	3303      	adds	r3, #3
LEDStruct curr_over_leds;
LEDStruct next_over_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    328a:	4298      	cmp	r0, r3
    328c:	f1a2 0203 	sub.w	r2, r2, #3
    3290:	d1f1      	bne.n	3276 <juggle(LEDStruct&)+0x306>
    3292:	e7b1      	b.n	31f8 <juggle(LEDStruct&)+0x288>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    3294:	2b00      	cmp	r3, #0
    3296:	f000 80e7 	beq.w	3468 <juggle(LEDStruct&)+0x4f8>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    329a:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    329e:	2b00      	cmp	r3, #0
    32a0:	f000 813b 	beq.w	351a <juggle(LEDStruct&)+0x5aa>
    32a4:	2700      	movs	r7, #0
    32a6:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    32aa:	ae03      	add	r6, sp, #12
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    32ac:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
    32b0:	e048      	b.n	3344 <juggle(LEDStruct&)+0x3d4>
    32b2:	bf00      	nop
    32b4:	1fff8784 	.word	0x1fff8784
    32b8:	1fff91d1 	.word	0x1fff91d1
    32bc:	1fff875b 	.word	0x1fff875b
    32c0:	cccccccd 	.word	0xcccccccd
    32c4:	0000e56c 	.word	0x0000e56c
    32c8:	1ffface8 	.word	0x1ffface8
    32cc:	0000ed30 	.word	0x0000ed30
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32d0:	fb08 f307 	mul.w	r3, r8, r7
    32d4:	2900      	cmp	r1, #0
    32d6:	f000 815a 	beq.w	358e <juggle(LEDStruct&)+0x61e>
    32da:	2295      	movs	r2, #149	; 0x95
    32dc:	2100      	movs	r1, #0
    32de:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    32e2:	f7fd f907 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32e6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    32ea:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    32ee:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    32f2:	9100      	str	r1, [sp, #0]
    32f4:	4681      	mov	r9, r0
    32f6:	4629      	mov	r1, r5
    32f8:	4630      	mov	r0, r6
    32fa:	f007 f8d1 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    32fe:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3302:	18e1      	adds	r1, r4, r3
    3304:	5ce2      	ldrb	r2, [r4, r3]
    3306:	f89d 000c 	ldrb.w	r0, [sp, #12]
    330a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    330e:	54e2      	strb	r2, [r4, r3]
    3310:	784a      	ldrb	r2, [r1, #1]
    3312:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3316:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    331a:	704a      	strb	r2, [r1, #1]
    331c:	788b      	ldrb	r3, [r1, #2]
    331e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3322:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3326:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3328:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    332c:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3330:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3334:	3701      	adds	r7, #1
    3336:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3338:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    333a:	42ba      	cmp	r2, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    333c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3340:	f240 80eb 	bls.w	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.this_dir) {
    3344:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3348:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    334c:	2b00      	cmp	r3, #0
    334e:	d1bf      	bne.n	32d0 <juggle(LEDStruct&)+0x360>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3350:	2900      	cmp	r1, #0
    3352:	f000 818b 	beq.w	366c <juggle(LEDStruct&)+0x6fc>
    3356:	4619      	mov	r1, r3
    3358:	2295      	movs	r2, #149	; 0x95
    335a:	fb08 f307 	mul.w	r3, r8, r7
    335e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3362:	f7fd f909 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3366:	e7be      	b.n	32e6 <juggle(LEDStruct&)+0x376>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3368:	2a00      	cmp	r2, #0
    336a:	f000 80d6 	beq.w	351a <juggle(LEDStruct&)+0x5aa>
    336e:	4698      	mov	r8, r3
    3370:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    3374:	ae03      	add	r6, sp, #12
    3376:	f104 07e1 	add.w	r7, r4, #225	; 0xe1
    337a:	e036      	b.n	33ea <juggle(LEDStruct&)+0x47a>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    337c:	2295      	movs	r2, #149	; 0x95
    337e:	2100      	movs	r1, #0
    3380:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3384:	f7fd f93c 	bl	600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    3388:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    338c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3390:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3394:	9100      	str	r1, [sp, #0]
    3396:	4681      	mov	r9, r0
    3398:	4629      	mov	r1, r5
    339a:	4630      	mov	r0, r6
    339c:	f007 f880 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33a0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    33a4:	18e1      	adds	r1, r4, r3
    33a6:	5ce2      	ldrb	r2, [r4, r3]
    33a8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    33ac:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    33b0:	54e2      	strb	r2, [r4, r3]
    33b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    33b6:	784a      	ldrb	r2, [r1, #1]
    33b8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    33bc:	704a      	strb	r2, [r1, #1]
    33be:	788b      	ldrb	r3, [r1, #2]
    33c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    33c4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    33c8:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33ca:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    33ce:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    33d2:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    33d6:	f108 0801 	add.w	r8, r8, #1
    33da:	fa5f f888 	uxtb.w	r8, r8
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33de:	440b      	add	r3, r1
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    33e0:	4542      	cmp	r2, r8
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33e2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    33e6:	f240 8098 	bls.w	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    33ea:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    33ee:	ea4f 3348 	mov.w	r3, r8, lsl #13
    33f2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
    33f6:	2900      	cmp	r1, #0
    33f8:	d1c0      	bne.n	337c <juggle(LEDStruct&)+0x40c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    33fa:	224a      	movs	r2, #74	; 0x4a
    33fc:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3400:	f7fd f8fe 	bl	600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    3404:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3408:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    340c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3410:	9100      	str	r1, [sp, #0]
    3412:	4681      	mov	r9, r0
    3414:	4629      	mov	r1, r5
    3416:	4630      	mov	r0, r6
    3418:	f007 f842 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    341c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3420:	18e1      	adds	r1, r4, r3
    3422:	5ce2      	ldrb	r2, [r4, r3]
    3424:	f89d 000c 	ldrb.w	r0, [sp, #12]
    3428:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    342c:	54e2      	strb	r2, [r4, r3]
    342e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3432:	784a      	ldrb	r2, [r1, #1]
    3434:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3438:	704a      	strb	r2, [r1, #1]
    343a:	788b      	ldrb	r3, [r1, #2]
    343c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3440:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3444:	708b      	strb	r3, [r1, #2]
    3446:	4622      	mov	r2, r4
    3448:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    344a:	7819      	ldrb	r1, [r3, #0]
    344c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3450:	7859      	ldrb	r1, [r3, #1]
    3452:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3456:	7899      	ldrb	r1, [r3, #2]
    3458:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    345c:	3303      	adds	r3, #3
    345e:	42bb      	cmp	r3, r7
    3460:	f1a2 0203 	sub.w	r2, r2, #3
    3464:	d1f1      	bne.n	344a <juggle(LEDStruct&)+0x4da>
    3466:	e7b0      	b.n	33ca <juggle(LEDStruct&)+0x45a>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3468:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    346c:	2a00      	cmp	r2, #0
    346e:	d054      	beq.n	351a <juggle(LEDStruct&)+0x5aa>
    3470:	4698      	mov	r8, r3
    3472:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    3476:	ae03      	add	r6, sp, #12
    3478:	f104 07e1 	add.w	r7, r4, #225	; 0xe1
    347c:	e03c      	b.n	34f8 <juggle(LEDStruct&)+0x588>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    347e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3482:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3486:	4442      	add	r2, r8
    3488:	2b00      	cmp	r3, #0
    348a:	d049      	beq.n	3520 <juggle(LEDStruct&)+0x5b0>
    348c:	2300      	movs	r3, #0
    348e:	4410      	add	r0, r2
    3490:	4619      	mov	r1, r3
    3492:	2295      	movs	r2, #149	; 0x95
    3494:	f7fd f82e 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3498:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    349c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34a0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    34a4:	9100      	str	r1, [sp, #0]
    34a6:	4681      	mov	r9, r0
    34a8:	4629      	mov	r1, r5
    34aa:	4630      	mov	r0, r6
    34ac:	f006 fff8 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34b0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    34b4:	18e1      	adds	r1, r4, r3
    34b6:	5ce2      	ldrb	r2, [r4, r3]
    34b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    34bc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34c0:	54e2      	strb	r2, [r4, r3]
    34c2:	784a      	ldrb	r2, [r1, #1]
    34c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    34c8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34cc:	704a      	strb	r2, [r1, #1]
    34ce:	788b      	ldrb	r3, [r1, #2]
    34d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    34d4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    34d8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34da:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    34de:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34e2:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    34e6:	f108 0801 	add.w	r8, r8, #1
    34ea:	fa5f f888 	uxtb.w	r8, r8
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34ee:	440b      	add	r3, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34f0:	4542      	cmp	r2, r8
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34f2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34f6:	d910      	bls.n	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.this_dir) {
    34f8:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    34fc:	2b00      	cmp	r3, #0
    34fe:	d1be      	bne.n	347e <juggle(LEDStruct&)+0x50e>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3500:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3504:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3508:	4442      	add	r2, r8
    350a:	4410      	add	r0, r2
    350c:	2900      	cmp	r1, #0
    350e:	d077      	beq.n	3600 <juggle(LEDStruct&)+0x690>
    3510:	4619      	mov	r1, r3
    3512:	2295      	movs	r2, #149	; 0x95
    3514:	f7fd f830 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3518:	e7be      	b.n	3498 <juggle(LEDStruct&)+0x528>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    351a:	b004      	add	sp, #16
    351c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3520:	4619      	mov	r1, r3
    3522:	4410      	add	r0, r2
    3524:	224a      	movs	r2, #74	; 0x4a
    3526:	f7fc ffe5 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    352a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    352e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3532:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3536:	9100      	str	r1, [sp, #0]
    3538:	4681      	mov	r9, r0
    353a:	4629      	mov	r1, r5
    353c:	4630      	mov	r0, r6
    353e:	f006 ffaf 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3542:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3546:	18e1      	adds	r1, r4, r3
    3548:	5ce2      	ldrb	r2, [r4, r3]
    354a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    354e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3552:	54e2      	strb	r2, [r4, r3]
    3554:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3558:	784a      	ldrb	r2, [r1, #1]
    355a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    355e:	704a      	strb	r2, [r1, #1]
    3560:	788b      	ldrb	r3, [r1, #2]
    3562:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3566:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    356a:	708b      	strb	r3, [r1, #2]
    356c:	4622      	mov	r2, r4
    356e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3570:	7819      	ldrb	r1, [r3, #0]
    3572:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3576:	7859      	ldrb	r1, [r3, #1]
    3578:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    357c:	7899      	ldrb	r1, [r3, #2]
    357e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3582:	3303      	adds	r3, #3
    3584:	429f      	cmp	r7, r3
    3586:	f1a2 0203 	sub.w	r2, r2, #3
    358a:	d1f1      	bne.n	3570 <juggle(LEDStruct&)+0x600>
    358c:	e7a5      	b.n	34da <juggle(LEDStruct&)+0x56a>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    358e:	224a      	movs	r2, #74	; 0x4a
    3590:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3594:	f7fc ffae 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3598:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    359c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35a0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35a4:	9100      	str	r1, [sp, #0]
    35a6:	4681      	mov	r9, r0
    35a8:	4629      	mov	r1, r5
    35aa:	4630      	mov	r0, r6
    35ac:	f006 ff78 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35b0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    35b4:	18e1      	adds	r1, r4, r3
    35b6:	5ce2      	ldrb	r2, [r4, r3]
    35b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    35bc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35c0:	54e2      	strb	r2, [r4, r3]
    35c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    35c6:	784a      	ldrb	r2, [r1, #1]
    35c8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35cc:	704a      	strb	r2, [r1, #1]
    35ce:	788b      	ldrb	r3, [r1, #2]
    35d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    35d4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35d8:	708b      	strb	r3, [r1, #2]
    35da:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    35de:	4623      	mov	r3, r4
    35e0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35e2:	7819      	ldrb	r1, [r3, #0]
    35e4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35e8:	7859      	ldrb	r1, [r3, #1]
    35ea:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35ee:	7899      	ldrb	r1, [r3, #2]
    35f0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35f4:	3303      	adds	r3, #3
    35f6:	4298      	cmp	r0, r3
    35f8:	f1a2 0203 	sub.w	r2, r2, #3
    35fc:	d1f1      	bne.n	35e2 <juggle(LEDStruct&)+0x672>
    35fe:	e693      	b.n	3328 <juggle(LEDStruct&)+0x3b8>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3600:	460b      	mov	r3, r1
    3602:	224a      	movs	r2, #74	; 0x4a
    3604:	f7fc ffb8 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3608:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    360c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3610:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3614:	9100      	str	r1, [sp, #0]
    3616:	4681      	mov	r9, r0
    3618:	4629      	mov	r1, r5
    361a:	4630      	mov	r0, r6
    361c:	f006 ff40 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3620:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3624:	18e1      	adds	r1, r4, r3
    3626:	5ce2      	ldrb	r2, [r4, r3]
    3628:	f89d 000c 	ldrb.w	r0, [sp, #12]
    362c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3630:	54e2      	strb	r2, [r4, r3]
    3632:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3636:	784a      	ldrb	r2, [r1, #1]
    3638:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    363c:	704a      	strb	r2, [r1, #1]
    363e:	788b      	ldrb	r3, [r1, #2]
    3640:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3644:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3648:	708b      	strb	r3, [r1, #2]
    364a:	4622      	mov	r2, r4
    364c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    364e:	7819      	ldrb	r1, [r3, #0]
    3650:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3654:	7859      	ldrb	r1, [r3, #1]
    3656:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    365a:	7899      	ldrb	r1, [r3, #2]
    365c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3660:	3303      	adds	r3, #3
    3662:	429f      	cmp	r7, r3
    3664:	f1a2 0203 	sub.w	r2, r2, #3
    3668:	d1f1      	bne.n	364e <juggle(LEDStruct&)+0x6de>
    366a:	e736      	b.n	34da <juggle(LEDStruct&)+0x56a>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    366c:	fb08 f307 	mul.w	r3, r8, r7
    3670:	224a      	movs	r2, #74	; 0x4a
    3672:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3676:	f7fc ff7f 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    367a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    367e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3682:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3686:	9100      	str	r1, [sp, #0]
    3688:	4681      	mov	r9, r0
    368a:	4629      	mov	r1, r5
    368c:	4630      	mov	r0, r6
    368e:	f006 ff07 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3692:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3696:	18e1      	adds	r1, r4, r3
    3698:	5ce2      	ldrb	r2, [r4, r3]
    369a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    369e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36a2:	54e2      	strb	r2, [r4, r3]
    36a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    36a8:	784a      	ldrb	r2, [r1, #1]
    36aa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36ae:	704a      	strb	r2, [r1, #1]
    36b0:	788b      	ldrb	r3, [r1, #2]
    36b2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    36b6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36ba:	708b      	strb	r3, [r1, #2]
    36bc:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    36c0:	4623      	mov	r3, r4
    36c2:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36c4:	7819      	ldrb	r1, [r3, #0]
    36c6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    36ca:	7859      	ldrb	r1, [r3, #1]
    36cc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    36d0:	7899      	ldrb	r1, [r3, #2]
    36d2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36d6:	3303      	adds	r3, #3
    36d8:	4283      	cmp	r3, r0
    36da:	f1a2 0203 	sub.w	r2, r2, #3
    36de:	d1f1      	bne.n	36c4 <juggle(LEDStruct&)+0x754>
    36e0:	e622      	b.n	3328 <juggle(LEDStruct&)+0x3b8>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    36e2:	4620      	mov	r0, r4
    36e4:	f7ff fbf4 	bl	2ed0 <juggle_update(LEDStruct&)>
    36e8:	e4f9      	b.n	30de <juggle(LEDStruct&)+0x16e>
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    36ea:	3741      	adds	r7, #65	; 0x41
    36ec:	230f      	movs	r3, #15
    36ee:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
    36f2:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    36f6:	e4ed      	b.n	30d4 <juggle(LEDStruct&)+0x164>
    36f8:	4620      	mov	r0, r4
    36fa:	f7fc fec9 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    36fe:	e4e9      	b.n	30d4 <juggle(LEDStruct&)+0x164>

00003700 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3704:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3708:	b08d      	sub	sp, #52	; 0x34
    370a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    370c:	2b00      	cmp	r3, #0
    370e:	f040 80a9 	bne.w	3864 <juggle_half(LEDStruct&)+0x164>
    3712:	4ecc      	ldr	r6, [pc, #816]	; (3a44 <juggle_half(LEDStruct&)+0x344>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3714:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3718:	8833      	ldrh	r3, [r6, #0]
    371a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    371e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3722:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3726:	3019      	adds	r0, #25
    3728:	b280      	uxth	r0, r0
    372a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    372e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3732:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3736:	3519      	adds	r5, #25
    3738:	b2ad      	uxth	r5, r5
    373a:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    373e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3742:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3746:	3319      	adds	r3, #25
    3748:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    374c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3750:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3754:	3319      	adds	r3, #25
    3756:	b29b      	uxth	r3, r3
    3758:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    375c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3760:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3764:	3119      	adds	r1, #25
    3766:	b289      	uxth	r1, r1
    3768:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    376c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3770:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3774:	3219      	adds	r2, #25
    3776:	b292      	uxth	r2, r2
    3778:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    377c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3780:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3784:	f10e 0e19 	add.w	lr, lr, #25
    3788:	fa1f fe8e 	uxth.w	lr, lr
    378c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3790:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3794:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3798:	f10c 0c19 	add.w	ip, ip, #25
    379c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37a0:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37a4:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37a8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37ac:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37b0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37b4:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37b6:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37b8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37bc:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    37c0:	b2c9      	uxtb	r1, r1
    37c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37ca:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37cc:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37d0:	f108 0819 	add.w	r8, r8, #25
    37d4:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    37d8:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    37dc:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37de:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    37e0:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37e4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    37e8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    37ec:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    37f0:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37f4:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    37f6:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37fa:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37fe:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    3802:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3806:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3808:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    380c:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    3810:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3814:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3818:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    381c:	f107 050a 	add.w	r5, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3820:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3822:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3824:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3828:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    382c:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3830:	f884 c234 	strb.w	ip, [r4, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3834:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3838:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    383c:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3840:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3844:	f1bc 0f00 	cmp.w	ip, #0
    3848:	d004      	beq.n	3854 <juggle_half(LEDStruct&)+0x154>
    384a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    384e:	408b      	lsls	r3, r1
    3850:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3854:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    3858:	2b06      	cmp	r3, #6
    385a:	f000 838a 	beq.w	3f72 <juggle_half(LEDStruct&)+0x872>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    385e:	2b04      	cmp	r3, #4
    3860:	f000 838e 	beq.w	3f80 <juggle_half(LEDStruct&)+0x880>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3864:	4b78      	ldr	r3, [pc, #480]	; (3a48 <juggle_half(LEDStruct&)+0x348>)
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	2b00      	cmp	r3, #0
    386a:	f040 82ae 	bne.w	3dca <juggle_half(LEDStruct&)+0x6ca>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    386e:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3872:	b113      	cbz	r3, 387a <juggle_half(LEDStruct&)+0x17a>
    3874:	2300      	movs	r3, #0
    3876:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    387a:	2196      	movs	r1, #150	; 0x96
    387c:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3880:	4620      	mov	r0, r4
    3882:	f006 fdad 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3886:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    388a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    388e:	2f00      	cmp	r7, #0
    3890:	f040 81af 	bne.w	3bf2 <juggle_half(LEDStruct&)+0x4f2>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3894:	2900      	cmp	r1, #0
    3896:	f000 8377 	beq.w	3f88 <juggle_half(LEDStruct&)+0x888>
    389a:	4b6c      	ldr	r3, [pc, #432]	; (3a4c <juggle_half(LEDStruct&)+0x34c>)
    389c:	9302      	str	r3, [sp, #8]
    389e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    38a2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 3a50 <juggle_half(LEDStruct&)+0x350>
    38a6:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3a54 <juggle_half(LEDStruct&)+0x354>
    38aa:	ab0b      	add	r3, sp, #44	; 0x2c
    38ac:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    38b0:	9303      	str	r3, [sp, #12]
    38b2:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    38b6:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    38ba:	b2be      	uxth	r6, r7
    38bc:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    38be:	f8d9 1000 	ldr.w	r1, [r9]
    38c2:	9107      	str	r1, [sp, #28]
    38c4:	4403      	add	r3, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    38c6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    38c8:	9907      	ldr	r1, [sp, #28]
    38ca:	bf98      	it	ls
    38cc:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    38ce:	f44f 708c 	mov.w	r0, #280	; 0x118
    38d2:	bf98      	it	ls
    38d4:	b29b      	uxthls	r3, r3
    38d6:	fb00 f101 	mul.w	r1, r0, r1
    38da:	fb03 f301 	mul.w	r3, r3, r1
    38de:	f3c3 430e 	ubfx	r3, r3, #16, #15
    38e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    38e6:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    38e8:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    38ea:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    38ee:	d503      	bpl.n	38f8 <juggle_half(LEDStruct&)+0x1f8>
    38f0:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    38f4:	3107      	adds	r1, #7
    38f6:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    38f8:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38fc:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3900:	9902      	ldr	r1, [sp, #8]
    3902:	f81b 500e 	ldrb.w	r5, [fp, lr]
    3906:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    390a:	fb05 1100 	mla	r1, r5, r0, r1
    390e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3910:	0418      	lsls	r0, r3, #16
    3912:	bf4c      	ite	mi
    3914:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3916:	b20d      	sxthpl	r5, r1
    3918:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    391c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3920:	9803      	ldr	r0, [sp, #12]
    3922:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3924:	bf48      	it	mi
    3926:	b22d      	sxthmi	r5, r5
    3928:	4641      	mov	r1, r8
    392a:	f006 fdb9 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    392e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3932:	b29b      	uxth	r3, r3
    3934:	fb0a f303 	mul.w	r3, sl, r3
    3938:	0c1b      	lsrs	r3, r3, #16
    393a:	3325      	adds	r3, #37	; 0x25
    393c:	b29b      	uxth	r3, r3
    393e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3942:	18e1      	adds	r1, r4, r3
    3944:	5ce2      	ldrb	r2, [r4, r3]
    3946:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    394a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    394e:	54e2      	strb	r2, [r4, r3]
    3950:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3954:	784a      	ldrb	r2, [r1, #1]
    3956:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    395a:	704a      	strb	r2, [r1, #1]
    395c:	788b      	ldrb	r3, [r1, #2]
    395e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3962:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3966:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3968:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    396c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3970:	4416      	add	r6, r2
    3972:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3974:	f8d9 3000 	ldr.w	r3, [r9]
    3978:	9306      	str	r3, [sp, #24]
    397a:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    397c:	9b06      	ldr	r3, [sp, #24]
    397e:	bf98      	it	ls
    3980:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3982:	f44f 728c 	mov.w	r2, #280	; 0x118
    3986:	bf98      	it	ls
    3988:	b2b6      	uxthls	r6, r6
    398a:	fb02 f303 	mul.w	r3, r2, r3
    398e:	fb06 f303 	mul.w	r3, r6, r3
    3992:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    399a:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    399c:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    39a0:	d503      	bpl.n	39aa <juggle_half(LEDStruct&)+0x2aa>
    39a2:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    39a6:	3207      	adds	r2, #7
    39a8:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    39aa:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39ac:	f3c2 0146 	ubfx	r1, r2, #1, #7
    39b0:	9a02      	ldr	r2, [sp, #8]
    39b2:	f81b 5000 	ldrb.w	r5, [fp, r0]
    39b6:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    39ba:	9803      	ldr	r0, [sp, #12]
    39bc:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    39c0:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39c2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    39c4:	bf48      	it	mi
    39c6:	4255      	negmi	r5, r2
    39c8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39cc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39d0:	bf54      	ite	pl
    39d2:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    39d4:	b22d      	sxthmi	r5, r5
    39d6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    39da:	9100      	str	r1, [sp, #0]
    39dc:	4641      	mov	r1, r8
    39de:	f006 fd5f 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39e2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    39e6:	b29b      	uxth	r3, r3
    39e8:	fb0a f303 	mul.w	r3, sl, r3
    39ec:	0c1b      	lsrs	r3, r3, #16
    39ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39f2:	18e1      	adds	r1, r4, r3
    39f4:	5ce2      	ldrb	r2, [r4, r3]
    39f6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    39fa:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    39fe:	54e2      	strb	r2, [r4, r3]
    3a00:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3a04:	784a      	ldrb	r2, [r1, #1]
    3a06:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a0a:	704a      	strb	r2, [r1, #1]
    3a0c:	788b      	ldrb	r3, [r1, #2]
    3a0e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3a12:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a16:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3a18:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3a1c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a20:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3a24:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3a26:	440a      	add	r2, r1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a28:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3a2a:	b2d2      	uxtb	r2, r2
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a2c:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3a2e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a32:	4619      	mov	r1, r3
    3a34:	f63f af3f 	bhi.w	38b6 <juggle_half(LEDStruct&)+0x1b6>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3a38:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3a3c:	2a00      	cmp	r2, #0
    3a3e:	f000 81b0 	beq.w	3da2 <juggle_half(LEDStruct&)+0x6a2>
    3a42:	e009      	b.n	3a58 <juggle_half(LEDStruct&)+0x358>
    3a44:	1fff8784 	.word	0x1fff8784
    3a48:	1fff91d1 	.word	0x1fff91d1
    3a4c:	0000e56c 	.word	0x0000e56c
    3a50:	1ffface8 	.word	0x1ffface8
    3a54:	0000ed30 	.word	0x0000ed30
		if (leds.this_dir) {
    3a58:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3a5c:	2f00      	cmp	r7, #0
    3a5e:	f040 81bf 	bne.w	3de0 <juggle_half(LEDStruct&)+0x6e0>
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a62:	2b00      	cmp	r3, #0
    3a64:	f000 80c2 	beq.w	3bec <juggle_half(LEDStruct&)+0x4ec>
    3a68:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3a6c:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3a70:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3a74:	3301      	adds	r3, #1
    3a76:	440b      	add	r3, r1
    3a78:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a7a:	f8d9 1000 	ldr.w	r1, [r9]
    3a7e:	910b      	str	r1, [sp, #44]	; 0x2c
    3a80:	4433      	add	r3, r6
    3a82:	b29b      	uxth	r3, r3
    3a84:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3a86:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3a88:	bf9c      	itt	ls
    3a8a:	021b      	lslls	r3, r3, #8
    3a8c:	b29b      	uxthls	r3, r3
    3a8e:	fb0a f101 	mul.w	r1, sl, r1
    3a92:	fb03 f301 	mul.w	r3, r3, r1
    3a96:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3a9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3a9e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3aa0:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3aa2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3aa6:	d503      	bpl.n	3ab0 <juggle_half(LEDStruct&)+0x3b0>
    3aa8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3aac:	3107      	adds	r1, #7
    3aae:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ab0:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ab4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ab6:	9902      	ldr	r1, [sp, #8]
    3ab8:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3abc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3ac0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3ac4:	fb05 050e 	mla	r5, r5, lr, r0
    3ac8:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3aca:	0418      	lsls	r0, r3, #16
    3acc:	bf48      	it	mi
    3ace:	426d      	negmi	r5, r5
    3ad0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3ad4:	9100      	str	r1, [sp, #0]
    3ad6:	a809      	add	r0, sp, #36	; 0x24
    3ad8:	4641      	mov	r1, r8
    3ada:	b22d      	sxth	r5, r5
    3adc:	f006 fce0 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3ae0:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3ae4:	2226      	movs	r2, #38	; 0x26
    3ae6:	b29b      	uxth	r3, r3
    3ae8:	fb02 f303 	mul.w	r3, r2, r3
    3aec:	0c1b      	lsrs	r3, r3, #16
    3aee:	3370      	adds	r3, #112	; 0x70
    3af0:	b29b      	uxth	r3, r3
    3af2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3af6:	18e1      	adds	r1, r4, r3
    3af8:	5ce2      	ldrb	r2, [r4, r3]
    3afa:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3afe:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b02:	54e2      	strb	r2, [r4, r3]
    3b04:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3b08:	784a      	ldrb	r2, [r1, #1]
    3b0a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b0e:	704a      	strb	r2, [r1, #1]
    3b10:	788b      	ldrb	r3, [r1, #2]
    3b12:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3b16:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b1a:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3b1c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3b20:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3b24:	4413      	add	r3, r2
    3b26:	3301      	adds	r3, #1
    3b28:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b2a:	f8d9 3000 	ldr.w	r3, [r9]
    3b2e:	930a      	str	r3, [sp, #40]	; 0x28
    3b30:	b2b6      	uxth	r6, r6
    3b32:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b36:	bf9c      	itt	ls
    3b38:	0236      	lslls	r6, r6, #8
    3b3a:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3b3c:	fb0a f202 	mul.w	r2, sl, r2
    3b40:	fb06 f202 	mul.w	r2, r6, r2
    3b44:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3b48:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b4c:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b4e:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b52:	d503      	bpl.n	3b5c <juggle_half(LEDStruct&)+0x45c>
    3b54:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3b58:	3307      	adds	r3, #7
    3b5a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b5c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b5e:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3b62:	9b02      	ldr	r3, [sp, #8]
    3b64:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3b68:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3b6c:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3b70:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b72:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3b74:	bf48      	it	mi
    3b76:	425b      	negmi	r3, r3
    3b78:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b7c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b80:	b21d      	sxth	r5, r3
    3b82:	a809      	add	r0, sp, #36	; 0x24
    3b84:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b88:	9100      	str	r1, [sp, #0]
    3b8a:	4641      	mov	r1, r8
    3b8c:	f006 fc88 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b90:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b94:	b29b      	uxth	r3, r3
    3b96:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3b9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b9e:	0c1b      	lsrs	r3, r3, #16
    3ba0:	334b      	adds	r3, #75	; 0x4b
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ba8:	18e1      	adds	r1, r4, r3
    3baa:	5ce2      	ldrb	r2, [r4, r3]
    3bac:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3bb0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3bb4:	54e2      	strb	r2, [r4, r3]
    3bb6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3bba:	784a      	ldrb	r2, [r1, #1]
    3bbc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3bc0:	704a      	strb	r2, [r1, #1]
    3bc2:	788b      	ldrb	r3, [r1, #2]
    3bc4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3bc8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3bcc:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    3bce:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3bd2:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3bd6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3bda:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3bdc:	440a      	add	r2, r1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3bde:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3be0:	b2d2      	uxtb	r2, r2
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3be2:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3be4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3be8:	f63f af42 	bhi.w	3a70 <juggle_half(LEDStruct&)+0x370>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3bec:	b00d      	add	sp, #52	; 0x34
    3bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3bf2:	2900      	cmp	r1, #0
    3bf4:	f000 81c8 	beq.w	3f88 <juggle_half(LEDStruct&)+0x888>
    3bf8:	4b76      	ldr	r3, [pc, #472]	; (3dd4 <juggle_half(LEDStruct&)+0x6d4>)
    3bfa:	9302      	str	r3, [sp, #8]
    3bfc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3c00:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 3dd8 <juggle_half(LEDStruct&)+0x6d8>
    3c04:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 3ddc <juggle_half(LEDStruct&)+0x6dc>
    3c08:	ab0b      	add	r3, sp, #44	; 0x2c
    3c0a:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3c0e:	2700      	movs	r7, #0
    3c10:	9303      	str	r3, [sp, #12]
    3c12:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c16:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3c1a:	b2be      	uxth	r6, r7
    3c1c:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c1e:	f8d9 1000 	ldr.w	r1, [r9]
    3c22:	9105      	str	r1, [sp, #20]
    3c24:	4403      	add	r3, r0
    3c26:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3c28:	9905      	ldr	r1, [sp, #20]
    3c2a:	bf98      	it	ls
    3c2c:	021b      	lslls	r3, r3, #8
    3c2e:	f44f 708c 	mov.w	r0, #280	; 0x118
    3c32:	bf98      	it	ls
    3c34:	b29b      	uxthls	r3, r3
    3c36:	fb00 f101 	mul.w	r1, r0, r1
    3c3a:	fb03 f301 	mul.w	r3, r3, r1
    3c3e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3c42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c46:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3c48:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c4c:	d503      	bpl.n	3c56 <juggle_half(LEDStruct&)+0x556>
    3c4e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3c52:	3107      	adds	r1, #7
    3c54:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c56:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c5a:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3c5e:	9902      	ldr	r1, [sp, #8]
    3c60:	f81b 500e 	ldrb.w	r5, [fp, lr]
    3c64:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    3c68:	fb05 1100 	mla	r1, r5, r0, r1
    3c6c:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3c6e:	0418      	lsls	r0, r3, #16
    3c70:	bf4c      	ite	mi
    3c72:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c74:	b20d      	sxthpl	r5, r1
    3c76:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c7a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c7e:	9803      	ldr	r0, [sp, #12]
    3c80:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3c82:	bf48      	it	mi
    3c84:	b22d      	sxthmi	r5, r5
    3c86:	4641      	mov	r1, r8
    3c88:	f006 fc0a 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c8c:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c90:	b29b      	uxth	r3, r3
    3c92:	fb0a f303 	mul.w	r3, sl, r3
    3c96:	0c1b      	lsrs	r3, r3, #16
    3c98:	3325      	adds	r3, #37	; 0x25
    3c9a:	b29b      	uxth	r3, r3
    3c9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ca0:	18e1      	adds	r1, r4, r3
    3ca2:	5ce2      	ldrb	r2, [r4, r3]
    3ca4:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3ca8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3cac:	54e2      	strb	r2, [r4, r3]
    3cae:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3cb2:	784a      	ldrb	r2, [r1, #1]
    3cb4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3cb8:	704a      	strb	r2, [r1, #1]
    3cba:	788b      	ldrb	r3, [r1, #2]
    3cbc:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3cc0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3cc4:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3cc6:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3cca:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3cce:	4416      	add	r6, r2
    3cd0:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cd2:	f8d9 3000 	ldr.w	r3, [r9]
    3cd6:	9304      	str	r3, [sp, #16]
    3cd8:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3cda:	9b04      	ldr	r3, [sp, #16]
    3cdc:	bf98      	it	ls
    3cde:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3ce0:	f44f 728c 	mov.w	r2, #280	; 0x118
    3ce4:	bf98      	it	ls
    3ce6:	b2b6      	uxthls	r6, r6
    3ce8:	fb02 f303 	mul.w	r3, r2, r3
    3cec:	fb06 f303 	mul.w	r3, r6, r3
    3cf0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cf4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3cf8:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cfa:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cfc:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d00:	d503      	bpl.n	3d0a <juggle_half(LEDStruct&)+0x60a>
    3d02:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3d06:	3207      	adds	r2, #7
    3d08:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d0a:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d0c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3d10:	9a02      	ldr	r2, [sp, #8]
    3d12:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d16:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    3d1a:	9803      	ldr	r0, [sp, #12]
    3d1c:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3d20:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d22:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3d24:	bf48      	it	mi
    3d26:	4255      	negmi	r5, r2
    3d28:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3d2c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d30:	bf54      	ite	pl
    3d32:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3d34:	b22d      	sxthmi	r5, r5
    3d36:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d3a:	9100      	str	r1, [sp, #0]
    3d3c:	4641      	mov	r1, r8
    3d3e:	f006 fbaf 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d42:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d46:	b29b      	uxth	r3, r3
    3d48:	fb0a f303 	mul.w	r3, sl, r3
    3d4c:	0c1b      	lsrs	r3, r3, #16
    3d4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d52:	18e1      	adds	r1, r4, r3
    3d54:	5ce2      	ldrb	r2, [r4, r3]
    3d56:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3d5a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d5e:	54e2      	strb	r2, [r4, r3]
    3d60:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3d64:	784a      	ldrb	r2, [r1, #1]
    3d66:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d6a:	704a      	strb	r2, [r1, #1]
    3d6c:	788b      	ldrb	r3, [r1, #2]
    3d6e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3d72:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d76:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3d78:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3d7c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d80:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d84:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3d86:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d88:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3d8a:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d8c:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3d8e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d92:	4619      	mov	r1, r3
    3d94:	f63f af3f 	bhi.w	3c16 <juggle_half(LEDStruct&)+0x516>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3d98:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3d9c:	2a00      	cmp	r2, #0
    3d9e:	f47f ae5b 	bne.w	3a58 <juggle_half(LEDStruct&)+0x358>
    3da2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3da6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3da8:	7822      	ldrb	r2, [r4, #0]
    3daa:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3dae:	7862      	ldrb	r2, [r4, #1]
    3db0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3db4:	78a2      	ldrb	r2, [r4, #2]
    3db6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3dba:	3403      	adds	r4, #3
    3dbc:	42a1      	cmp	r1, r4
    3dbe:	f1a3 0303 	sub.w	r3, r3, #3
    3dc2:	d1f1      	bne.n	3da8 <juggle_half(LEDStruct&)+0x6a8>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3dc4:	b00d      	add	sp, #52	; 0x34
    3dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3dca:	4620      	mov	r0, r4
    3dcc:	f7ff f880 	bl	2ed0 <juggle_update(LEDStruct&)>
    3dd0:	e54d      	b.n	386e <juggle_half(LEDStruct&)+0x16e>
    3dd2:	bf00      	nop
    3dd4:	0000e56c 	.word	0x0000e56c
    3dd8:	1ffface8 	.word	0x1ffface8
    3ddc:	0000ed30 	.word	0x0000ed30
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3de0:	2b00      	cmp	r3, #0
    3de2:	f43f af03 	beq.w	3bec <juggle_half(LEDStruct&)+0x4ec>
    3de6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3dea:	2700      	movs	r7, #0
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3dec:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3df0:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3df4:	3301      	adds	r3, #1
    3df6:	440b      	add	r3, r1
    3df8:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dfa:	f8d9 1000 	ldr.w	r1, [r9]
    3dfe:	9109      	str	r1, [sp, #36]	; 0x24
    3e00:	4433      	add	r3, r6
    3e02:	b29b      	uxth	r3, r3
    3e04:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e06:	9909      	ldr	r1, [sp, #36]	; 0x24
    3e08:	bf9c      	itt	ls
    3e0a:	021b      	lslls	r3, r3, #8
    3e0c:	b29b      	uxthls	r3, r3
    3e0e:	fb0a f101 	mul.w	r1, sl, r1
    3e12:	fb03 f301 	mul.w	r3, r3, r1
    3e16:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e1e:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e20:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e24:	d503      	bpl.n	3e2e <juggle_half(LEDStruct&)+0x72e>
    3e26:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3e2a:	3107      	adds	r1, #7
    3e2c:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e2e:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e32:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e34:	9902      	ldr	r1, [sp, #8]
    3e36:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3e3a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3e3e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e42:	fb05 050e 	mla	r5, r5, lr, r0
    3e46:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3e48:	0418      	lsls	r0, r3, #16
    3e4a:	bf48      	it	mi
    3e4c:	426d      	negmi	r5, r5
    3e4e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3e52:	9803      	ldr	r0, [sp, #12]
    3e54:	9100      	str	r1, [sp, #0]
    3e56:	b22d      	sxth	r5, r5
    3e58:	4641      	mov	r1, r8
    3e5a:	f006 fb21 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e5e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e62:	2226      	movs	r2, #38	; 0x26
    3e64:	b29b      	uxth	r3, r3
    3e66:	fb02 f303 	mul.w	r3, r2, r3
    3e6a:	0c1b      	lsrs	r3, r3, #16
    3e6c:	3370      	adds	r3, #112	; 0x70
    3e6e:	b29b      	uxth	r3, r3
    3e70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e74:	18e1      	adds	r1, r4, r3
    3e76:	5ce2      	ldrb	r2, [r4, r3]
    3e78:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3e7c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e80:	54e2      	strb	r2, [r4, r3]
    3e82:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3e86:	784a      	ldrb	r2, [r1, #1]
    3e88:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3e8c:	704a      	strb	r2, [r1, #1]
    3e8e:	788b      	ldrb	r3, [r1, #2]
    3e90:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3e94:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e98:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e9a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e9e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3ea2:	4413      	add	r3, r2
    3ea4:	3301      	adds	r3, #1
    3ea6:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ea8:	f8d9 3000 	ldr.w	r3, [r9]
    3eac:	9308      	str	r3, [sp, #32]
    3eae:	b2b6      	uxth	r6, r6
    3eb0:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3eb2:	9b08      	ldr	r3, [sp, #32]
    3eb4:	bf9c      	itt	ls
    3eb6:	0236      	lslls	r6, r6, #8
    3eb8:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3eba:	fb0a f303 	mul.w	r3, sl, r3
    3ebe:	fb06 f303 	mul.w	r3, r6, r3
    3ec2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3ec6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3eca:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ecc:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ece:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ed2:	d503      	bpl.n	3edc <juggle_half(LEDStruct&)+0x7dc>
    3ed4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3ed8:	3207      	adds	r2, #7
    3eda:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3edc:	9802      	ldr	r0, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ede:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ee0:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3ee4:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3ee8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    3eec:	9803      	ldr	r0, [sp, #12]
    3eee:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3ef2:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ef4:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3ef6:	bf48      	it	mi
    3ef8:	426d      	negmi	r5, r5
    3efa:	b22d      	sxth	r5, r5
    3efc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3f00:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3f04:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3f08:	9100      	str	r1, [sp, #0]
    3f0a:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    3f0e:	4641      	mov	r1, r8
    3f10:	b2ad      	uxth	r5, r5
    3f12:	f006 fac5 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f16:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3f1a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3f1e:	0c1b      	lsrs	r3, r3, #16
    3f20:	334b      	adds	r3, #75	; 0x4b
    3f22:	b29b      	uxth	r3, r3
    3f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f28:	18e1      	adds	r1, r4, r3
    3f2a:	5ce2      	ldrb	r2, [r4, r3]
    3f2c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3f30:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f34:	54e2      	strb	r2, [r4, r3]
    3f36:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3f3a:	784a      	ldrb	r2, [r1, #1]
    3f3c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f40:	704a      	strb	r2, [r1, #1]
    3f42:	788b      	ldrb	r3, [r1, #2]
    3f44:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3f48:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f4c:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    3f4e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3f52:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f56:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f5a:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3f5c:	440a      	add	r2, r1
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f5e:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3f60:	b2d2      	uxtb	r2, r2
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f62:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3f64:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f68:	f63f af42 	bhi.w	3df0 <juggle_half(LEDStruct&)+0x6f0>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3f6c:	b00d      	add	sp, #52	; 0x34
    3f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3f72:	3741      	adds	r7, #65	; 0x41
    3f74:	230f      	movs	r3, #15
    3f76:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
    3f7a:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    3f7e:	e471      	b.n	3864 <juggle_half(LEDStruct&)+0x164>
    3f80:	4620      	mov	r0, r4
    3f82:	f7fc fa85 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    3f86:	e46d      	b.n	3864 <juggle_half(LEDStruct&)+0x164>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3f88:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	f43f af08 	beq.w	3da2 <juggle_half(LEDStruct&)+0x6a2>
    3f92:	e62b      	b.n	3bec <juggle_half(LEDStruct&)+0x4ec>

00003f94 <multi_juggle(LEDStruct&)>:
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    3f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3f98:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    3f9c:	b089      	sub	sp, #36	; 0x24
    3f9e:	4605      	mov	r5, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	f040 80a9 	bne.w	40f8 <multi_juggle(LEDStruct&)+0x164>
    3fa6:	4ebd      	ldr	r6, [pc, #756]	; (429c <multi_juggle(LEDStruct&)+0x308>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3fa8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3fac:	8833      	ldrh	r3, [r6, #0]
    3fae:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3fb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3fb6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3fba:	3019      	adds	r0, #25
    3fbc:	b280      	uxth	r0, r0
    3fbe:	eb00 2440 	add.w	r4, r0, r0, lsl #9
    3fc2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    3fc6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    3fca:	3419      	adds	r4, #25
    3fcc:	b2a4      	uxth	r4, r4
    3fce:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    3fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    3fd6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fda:	3319      	adds	r3, #25
    3fdc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3fe0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3fe4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fe8:	3319      	adds	r3, #25
    3fea:	b29b      	uxth	r3, r3
    3fec:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3ff0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3ff4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3ff8:	3119      	adds	r1, #25
    3ffa:	b289      	uxth	r1, r1
    3ffc:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4000:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4004:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4008:	3219      	adds	r2, #25
    400a:	b292      	uxth	r2, r2
    400c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4010:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4014:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4018:	f10e 0e19 	add.w	lr, lr, #25
    401c:	fa1f fe8e 	uxth.w	lr, lr
    4020:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    4024:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    4028:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    402c:	f10c 0c19 	add.w	ip, ip, #25
    4030:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4034:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4038:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    403c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4040:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4044:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4048:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    404a:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    404c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4050:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4054:	b2c9      	uxtb	r1, r1
    4056:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    405a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    405e:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4060:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4064:	f108 0819 	add.w	r8, r8, #25
    4068:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    406c:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    4070:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4072:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4074:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4078:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    407c:	eb04 2414 	add.w	r4, r4, r4, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    4080:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    4084:	f3c4 14c0 	ubfx	r4, r4, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4088:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    408a:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    408e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4092:	f885 2230 	strb.w	r2, [r5, #560]	; 0x230
    4096:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    409a:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    409c:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    40a0:	f885 0235 	strb.w	r0, [r5, #565]	; 0x235
	leds.juggle_phased		 = jp;
    40a4:	f885 4236 	strb.w	r4, [r5, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    40a8:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    40ac:	f885 1232 	strb.w	r1, [r5, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    40b0:	f107 040a 	add.w	r4, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    40b4:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    40b6:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    40b8:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40bc:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    40c0:	f885 21c4 	strb.w	r2, [r5, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    40c4:	f885 c234 	strb.w	ip, [r5, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    40c8:	f885 4231 	strb.w	r4, [r5, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    40cc:	f885 122e 	strb.w	r1, [r5, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    40d0:	f885 122a 	strb.w	r1, [r5, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    40d4:	f885 01c3 	strb.w	r0, [r5, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    40d8:	f1bc 0f00 	cmp.w	ip, #0
    40dc:	d004      	beq.n	40e8 <multi_juggle(LEDStruct&)+0x154>
    40de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    40e2:	408b      	lsls	r3, r1
    40e4:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    40e8:	f895 322c 	ldrb.w	r3, [r5, #556]	; 0x22c
    40ec:	2b06      	cmp	r3, #6
    40ee:	f000 80be 	beq.w	426e <multi_juggle(LEDStruct&)+0x2da>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    40f2:	2b04      	cmp	r3, #4
    40f4:	f000 80c2 	beq.w	427c <multi_juggle(LEDStruct&)+0x2e8>
// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    40f8:	4b69      	ldr	r3, [pc, #420]	; (42a0 <multi_juggle(LEDStruct&)+0x30c>)
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2b00      	cmp	r3, #0
    40fe:	f040 80b2 	bne.w	4266 <multi_juggle(LEDStruct&)+0x2d2>

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    4102:	f895 2232 	ldrb.w	r2, [r5, #562]	; 0x232
    4106:	4f67      	ldr	r7, [pc, #412]	; (42a4 <multi_juggle(LEDStruct&)+0x310>)
    4108:	2196      	movs	r1, #150	; 0x96
    410a:	4628      	mov	r0, r5
    410c:	f006 f968 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4110:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    4114:	2b00      	cmp	r3, #0
    4116:	d074      	beq.n	4202 <multi_juggle(LEDStruct&)+0x26e>
    4118:	f8df b198 	ldr.w	fp, [pc, #408]	; 42b4 <multi_juggle(LEDStruct&)+0x320>
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    411c:	9703      	str	r7, [sp, #12]
    411e:	f505 79e4 	add.w	r9, r5, #456	; 0x1c8
    4122:	2200      	movs	r2, #0
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
    4124:	f04f 084b 	mov.w	r8, #75	; 0x4b
    4128:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    412c:	f895 1231 	ldrb.w	r1, [r5, #561]	; 0x231
    4130:	fb98 f3f3 	sdiv	r3, r8, r3
    4134:	b290      	uxth	r0, r2
    4136:	fb10 f603 	smulbb	r6, r0, r3
    413a:	1c54      	adds	r4, r2, #1
    413c:	4408      	add	r0, r1
    413e:	fb14 f303 	smulbb	r3, r4, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    4142:	28ff      	cmp	r0, #255	; 0xff
    4144:	b299      	uxth	r1, r3
    4146:	bf9c      	itt	ls
    4148:	0203      	lslls	r3, r0, #8
    414a:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    414c:	9b03      	ldr	r3, [sp, #12]
    414e:	681b      	ldr	r3, [r3, #0]
    4150:	9307      	str	r3, [sp, #28]
	return ret;
    4152:	9b07      	ldr	r3, [sp, #28]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4154:	fb0a f303 	mul.w	r3, sl, r3
    4158:	fb00 f303 	mul.w	r3, r0, r3
    415c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4160:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    4164:	b2b6      	uxth	r6, r6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4166:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    416a:	d003      	beq.n	4174 <multi_juggle(LEDStruct&)+0x1e0>
    416c:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    4170:	3007      	adds	r0, #7
    4172:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4174:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4178:	4f4b      	ldr	r7, [pc, #300]	; (42a8 <multi_juggle(LEDStruct&)+0x314>)
    417a:	f81b 300c 	ldrb.w	r3, [fp, ip]
    417e:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
    4182:	f3c0 0046 	ubfx	r0, r0, #1, #7
    4186:	fb03 c000 	mla	r0, r3, r0, ip

    if( theta & 0x8000 ) y = -y;
    418a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    418e:	b283      	uxth	r3, r0

    if( theta & 0x8000 ) y = -y;
    4190:	bf18      	it	ne
    4192:	425b      	negne	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4194:	43f0      	mvns	r0, r6
    4196:	b21b      	sxth	r3, r3
    4198:	4401      	add	r1, r0
    419a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    419e:	f895 0233 	ldrb.w	r0, [r5, #563]	; 0x233
    41a2:	f895 e22f 	ldrb.w	lr, [r5, #559]	; 0x22f
    41a6:	b29b      	uxth	r3, r3
    41a8:	b289      	uxth	r1, r1
    41aa:	fb01 3103 	mla	r1, r1, r3, r3
    41ae:	fb00 e202 	mla	r2, r0, r2, lr
    41b2:	eb06 4611 	add.w	r6, r6, r1, lsr #16
    41b6:	f895 1228 	ldrb.w	r1, [r5, #552]	; 0x228
    41ba:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    41be:	9100      	str	r1, [sp, #0]
    41c0:	a806      	add	r0, sp, #24
    41c2:	4649      	mov	r1, r9
    41c4:	b2b6      	uxth	r6, r6
    41c6:	b2d2      	uxtb	r2, r2
    41c8:	f006 f96a 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    41cc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    41d0:	18e9      	adds	r1, r5, r3
    41d2:	5cea      	ldrb	r2, [r5, r3]
    41d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    41d8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    41dc:	54ea      	strb	r2, [r5, r3]
    41de:	f89d 3019 	ldrb.w	r3, [sp, #25]
    41e2:	784a      	ldrb	r2, [r1, #1]
    41e4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    41e8:	704a      	strb	r2, [r1, #1]
    41ea:	788b      	ldrb	r3, [r1, #2]
    41ec:	f89d 201a 	ldrb.w	r2, [sp, #26]
    41f0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41f4:	708b      	strb	r3, [r1, #2]

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    41f6:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    41fa:	b2e2      	uxtb	r2, r4
    41fc:	4293      	cmp	r3, r2
    41fe:	d895      	bhi.n	412c <multi_juggle(LEDStruct&)+0x198>
    4200:	9f03      	ldr	r7, [sp, #12]
    4202:	462a      	mov	r2, r5
    4204:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4208:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    420a:	7819      	ldrb	r1, [r3, #0]
    420c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4210:	7859      	ldrb	r1, [r3, #1]
    4212:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    4216:	7899      	ldrb	r1, [r3, #2]
    4218:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    421c:	3303      	adds	r3, #3
    421e:	4298      	cmp	r0, r3
    4220:	f1a2 0203 	sub.w	r2, r2, #3
    4224:	d1f1      	bne.n	420a <multi_juggle(LEDStruct&)+0x276>
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4226:	4e21      	ldr	r6, [pc, #132]	; (42ac <multi_juggle(LEDStruct&)+0x318>)
    4228:	6833      	ldr	r3, [r6, #0]
    422a:	07db      	lsls	r3, r3, #31
    422c:	d514      	bpl.n	4258 <multi_juggle(LEDStruct&)+0x2c4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    422e:	683b      	ldr	r3, [r7, #0]
    4230:	4c1f      	ldr	r4, [pc, #124]	; (42b0 <multi_juggle(LEDStruct&)+0x31c>)
    4232:	9306      	str	r3, [sp, #24]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4234:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4238:	9b06      	ldr	r3, [sp, #24]
    423a:	1a5b      	subs	r3, r3, r1
    423c:	4293      	cmp	r3, r2
    423e:	d308      	bcc.n	4252 <multi_juggle(LEDStruct&)+0x2be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4240:	683a      	ldr	r2, [r7, #0]
    4242:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    4246:	9205      	str	r2, [sp, #20]
	return ret;
    4248:	9a05      	ldr	r2, [sp, #20]
    424a:	6022      	str	r2, [r4, #0]
    424c:	3301      	adds	r3, #1
    424e:	f885 322f 	strb.w	r3, [r5, #559]	; 0x22f
}
    4252:	b009      	add	sp, #36	; 0x24
    4254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4258:	4630      	mov	r0, r6
    425a:	f007 f83b 	bl	b2d4 <__cxa_guard_acquire>
    425e:	b988      	cbnz	r0, 4284 <multi_juggle(LEDStruct&)+0x2f0>
    4260:	4c13      	ldr	r4, [pc, #76]	; (42b0 <multi_juggle(LEDStruct&)+0x31c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4262:	683b      	ldr	r3, [r7, #0]
    4264:	e7e5      	b.n	4232 <multi_juggle(LEDStruct&)+0x29e>
// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4266:	4628      	mov	r0, r5
    4268:	f7fe fe32 	bl	2ed0 <juggle_update(LEDStruct&)>
    426c:	e749      	b.n	4102 <multi_juggle(LEDStruct&)+0x16e>
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    426e:	3741      	adds	r7, #65	; 0x41
    4270:	230f      	movs	r3, #15
    4272:	f885 7231 	strb.w	r7, [r5, #561]	; 0x231
    4276:	f885 3230 	strb.w	r3, [r5, #560]	; 0x230
    427a:	e73d      	b.n	40f8 <multi_juggle(LEDStruct&)+0x164>
    427c:	4628      	mov	r0, r5
    427e:	f7fc f907 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    4282:	e739      	b.n	40f8 <multi_juggle(LEDStruct&)+0x164>
    4284:	683b      	ldr	r3, [r7, #0]
    4286:	4c0a      	ldr	r4, [pc, #40]	; (42b0 <multi_juggle(LEDStruct&)+0x31c>)
    4288:	9304      	str	r3, [sp, #16]
	return ret;
    428a:	9b04      	ldr	r3, [sp, #16]
    428c:	6023      	str	r3, [r4, #0]
    428e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4292:	4630      	mov	r0, r6
    4294:	6063      	str	r3, [r4, #4]
    4296:	f007 f823 	bl	b2e0 <__cxa_guard_release>
    429a:	e7e2      	b.n	4262 <multi_juggle(LEDStruct&)+0x2ce>
    429c:	1fff8784 	.word	0x1fff8784
    42a0:	1fff91d1 	.word	0x1fff91d1
    42a4:	1ffface8 	.word	0x1ffface8
    42a8:	0000e56c 	.word	0x0000e56c
    42ac:	1fff9a14 	.word	0x1fff9a14
    42b0:	1fff90fc 	.word	0x1fff90fc
    42b4:	0000ed30 	.word	0x0000ed30

000042b8 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    42b8:	4b1a      	ldr	r3, [pc, #104]	; (4324 <rainbow_update(LEDStruct&)+0x6c>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    42ba:	4a1b      	ldr	r2, [pc, #108]	; (4328 <rainbow_update(LEDStruct&)+0x70>)
	switch (update_var) {
    42bc:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    42be:	2100      	movs	r1, #0
    42c0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    42c2:	2b04      	cmp	r3, #4
    42c4:	d808      	bhi.n	42d8 <rainbow_update(LEDStruct&)+0x20>
    42c6:	e8df f003 	tbb	[pc, r3]
    42ca:	1e0f      	.short	0x1e0f
    42cc:	2703      	.short	0x2703
    42ce:	09          	.byte	0x09
    42cf:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    42d0:	4b16      	ldr	r3, [pc, #88]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    42d2:	881b      	ldrh	r3, [r3, #0]
    42d4:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    42d8:	f7fd bf6c 	b.w	21b4 <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    42dc:	4b13      	ldr	r3, [pc, #76]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    42de:	881b      	ldrh	r3, [r3, #0]
    42e0:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		default:	break;
	}
	LEDDebug(leds);
    42e4:	f7fd bf66 	b.w	21b4 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    42e8:	4b10      	ldr	r3, [pc, #64]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    42ea:	881b      	ldrh	r3, [r3, #0]
    42ec:	2b00      	cmp	r3, #0
    42ee:	bf14      	ite	ne
    42f0:	2301      	movne	r3, #1
    42f2:	2300      	moveq	r3, #0
    42f4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    42f8:	bf14      	ite	ne
    42fa:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    42fc:	234b      	moveq	r3, #75	; 0x4b
    42fe:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4302:	f7fd bf57 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    4306:	4b09      	ldr	r3, [pc, #36]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    4308:	881b      	ldrh	r3, [r3, #0]
    430a:	3300      	adds	r3, #0
    430c:	bf18      	it	ne
    430e:	2301      	movne	r3, #1
    4310:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4314:	f7fd bf4e 	b.w	21b4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    4318:	4b04      	ldr	r3, [pc, #16]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    431a:	881b      	ldrh	r3, [r3, #0]
    431c:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4320:	f7fd bf48 	b.w	21b4 <LEDDebug(LEDStruct&)>
    4324:	1fff9a18 	.word	0x1fff9a18
    4328:	1fff91d1 	.word	0x1fff91d1
    432c:	1fff90d2 	.word	0x1fff90d2

00004330 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4330:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4338:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    433a:	2b00      	cmp	r3, #0
    433c:	d15c      	bne.n	43f8 <rainbow_march(LEDStruct&)+0xc8>
    433e:	4869      	ldr	r0, [pc, #420]	; (44e4 <rainbow_march(LEDStruct&)+0x1b4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4340:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4344:	8803      	ldrh	r3, [r0, #0]
    4346:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    434a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    434e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4352:	3319      	adds	r3, #25
    4354:	b29b      	uxth	r3, r3
    4356:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    435a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    435e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4362:	3219      	adds	r2, #25
    4364:	b292      	uxth	r2, r2
    4366:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    436a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    436e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4372:	3119      	adds	r1, #25
    4374:	b289      	uxth	r1, r1
    4376:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    437a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    437e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4382:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4386:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4388:	3619      	adds	r6, #25
    438a:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    438c:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4390:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4394:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4398:	b2ed      	uxtb	r5, r5
    439a:	121b      	asrs	r3, r3, #8
    439c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    43a0:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    43a2:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43a6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43aa:	11ed      	asrs	r5, r5, #7
    43ac:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    43ae:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43b2:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43b4:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    43b6:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    43b8:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43ba:	4573      	cmp	r3, lr
    43bc:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    43be:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    43c2:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    43c6:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    43ca:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    43ce:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43d2:	f000 8085 	beq.w	44e0 <rainbow_march(LEDStruct&)+0x1b0>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43d6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43da:	b2d2      	uxtb	r2, r2
    43dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    43e0:	1212      	asrs	r2, r2, #8
    43e2:	4472      	add	r2, lr
    43e4:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    43e6:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    43ea:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    43ee:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    43f2:	4620      	mov	r0, r4
    43f4:	f7fd fede 	bl	21b4 <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    43f8:	4b3b      	ldr	r3, [pc, #236]	; (44e8 <rainbow_march(LEDStruct&)+0x1b8>)
    43fa:	781b      	ldrb	r3, [r3, #0]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d16b      	bne.n	44d8 <rainbow_march(LEDStruct&)+0x1a8>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4400:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4404:	bb43      	cbnz	r3, 4458 <rainbow_march(LEDStruct&)+0x128>
    4406:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    440a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    440e:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    4410:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4414:	b2d2      	uxtb	r2, r2
    4416:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    441a:	bb4b      	cbnz	r3, 4470 <rainbow_march(LEDStruct&)+0x140>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    441c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4420:	2b00      	cmp	r3, #0
    4422:	d151      	bne.n	44c8 <rainbow_march(LEDStruct&)+0x198>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4424:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4428:	214b      	movs	r1, #75	; 0x4b
    442a:	4620      	mov	r0, r4
    442c:	f005 ff26 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4430:	4620      	mov	r0, r4
    4432:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4436:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4438:	7802      	ldrb	r2, [r0, #0]
    443a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    443e:	7842      	ldrb	r2, [r0, #1]
    4440:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4444:	7882      	ldrb	r2, [r0, #2]
    4446:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    444a:	3003      	adds	r0, #3
    444c:	4288      	cmp	r0, r1
    444e:	f1a3 0303 	sub.w	r3, r3, #3
    4452:	d1f1      	bne.n	4438 <rainbow_march(LEDStruct&)+0x108>
    4454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4458:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    445c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4460:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    4462:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4466:	b2d2      	uxtb	r2, r2
    4468:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    446c:	2b00      	cmp	r3, #0
    446e:	d0d5      	beq.n	441c <rainbow_march(LEDStruct&)+0xec>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4470:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4474:	2125      	movs	r1, #37	; 0x25
    4476:	4620      	mov	r0, r4
    4478:	f005 ff00 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    447c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4480:	4623      	mov	r3, r4
    4482:	4621      	mov	r1, r4
    4484:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4486:	7810      	ldrb	r0, [r2, #0]
    4488:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    448c:	7850      	ldrb	r0, [r2, #1]
    448e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4492:	7890      	ldrb	r0, [r2, #2]
    4494:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4498:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    449a:	42aa      	cmp	r2, r5
    449c:	f1a1 0103 	sub.w	r1, r1, #3
    44a0:	d1f1      	bne.n	4486 <rainbow_march(LEDStruct&)+0x156>
    44a2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    44a6:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    44a8:	7802      	ldrb	r2, [r0, #0]
    44aa:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    44ae:	7842      	ldrb	r2, [r0, #1]
    44b0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    44b4:	7882      	ldrb	r2, [r0, #2]
    44b6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    44ba:	3003      	adds	r0, #3
    44bc:	4288      	cmp	r0, r1
    44be:	f1a3 0303 	sub.w	r3, r3, #3
    44c2:	d1f1      	bne.n	44a8 <rainbow_march(LEDStruct&)+0x178>
    44c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    44c8:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    44cc:	4620      	mov	r0, r4
    44ce:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    44d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    44d4:	f005 bed2 	b.w	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    44d8:	4620      	mov	r0, r4
    44da:	f7ff feed 	bl	42b8 <rainbow_update(LEDStruct&)>
    44de:	e78f      	b.n	4400 <rainbow_march(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    44e0:	461a      	mov	r2, r3
    44e2:	e780      	b.n	43e6 <rainbow_march(LEDStruct&)+0xb6>
    44e4:	1fff8784 	.word	0x1fff8784
    44e8:	1fff91d1 	.word	0x1fff91d1

000044ec <rainbow_march_beat(LEDStruct&)>:
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    44ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    44ee:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    44f2:	b083      	sub	sp, #12
    44f4:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    44f6:	2b00      	cmp	r3, #0
    44f8:	d15c      	bne.n	45b4 <rainbow_march_beat(LEDStruct&)+0xc8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44fa:	489c      	ldr	r0, [pc, #624]	; (476c <rainbow_march_beat(LEDStruct&)+0x280>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    44fc:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4500:	8803      	ldrh	r3, [r0, #0]
    4502:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4506:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    450a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    450e:	3319      	adds	r3, #25
    4510:	b29b      	uxth	r3, r3
    4512:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4516:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    451a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    451e:	3219      	adds	r2, #25
    4520:	b292      	uxth	r2, r2
    4522:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4526:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    452a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    452e:	3119      	adds	r1, #25
    4530:	b289      	uxth	r1, r1
    4532:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4536:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    453a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    453e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4542:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4544:	3619      	adds	r6, #25
    4546:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4548:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    454c:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4550:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4554:	b2ed      	uxtb	r5, r5
    4556:	121b      	asrs	r3, r3, #8
    4558:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    455c:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    455e:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4562:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4566:	11ed      	asrs	r5, r5, #7
    4568:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    456a:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    456e:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4570:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4572:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4574:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4576:	4573      	cmp	r3, lr
    4578:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    457a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    457e:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    4582:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4586:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    458a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    458e:	f000 80eb 	beq.w	4768 <rainbow_march_beat(LEDStruct&)+0x27c>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4592:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4596:	b2d2      	uxtb	r2, r2
    4598:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    459c:	1212      	asrs	r2, r2, #8
    459e:	4472      	add	r2, lr
    45a0:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    45a2:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    45a6:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    45aa:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    45ae:	4620      	mov	r0, r4
    45b0:	f7fd fe00 	bl	21b4 <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    45b4:	4b6e      	ldr	r3, [pc, #440]	; (4770 <rainbow_march_beat(LEDStruct&)+0x284>)
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	2b00      	cmp	r3, #0
    45ba:	f040 80c9 	bne.w	4750 <rainbow_march_beat(LEDStruct&)+0x264>

	if (leds.this_dir == 0) {
    45be:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45c2:	4a6c      	ldr	r2, [pc, #432]	; (4774 <rainbow_march_beat(LEDStruct&)+0x288>)
    45c4:	2b00      	cmp	r3, #0
    45c6:	d161      	bne.n	468c <rainbow_march_beat(LEDStruct&)+0x1a0>
    45c8:	6812      	ldr	r2, [r2, #0]
    45ca:	9200      	str	r2, [sp, #0]
	return ret;
    45cc:	9900      	ldr	r1, [sp, #0]
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    45ce:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    45d2:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    45d6:	f44f 728c 	mov.w	r2, #280	; 0x118
    45da:	fb02 f201 	mul.w	r2, r2, r1
    45de:	021b      	lsls	r3, r3, #8
    45e0:	fb03 f302 	mul.w	r3, r3, r2
    45e4:	0e1b      	lsrs	r3, r3, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    45e6:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    45e8:	0648      	lsls	r0, r1, #25
    45ea:	f100 80a9 	bmi.w	4740 <rainbow_march_beat(LEDStruct&)+0x254>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    45ee:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    45f2:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    45f6:	4960      	ldr	r1, [pc, #384]	; (4778 <rainbow_march_beat(LEDStruct&)+0x28c>)
    45f8:	1112      	asrs	r2, r2, #4
    45fa:	0052      	lsls	r2, r2, #1
    45fc:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    45fe:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4600:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4602:	fb12 f000 	smulbb	r0, r2, r0
    4606:	eb01 1120 	add.w	r1, r1, r0, asr #4
    460a:	b2ca      	uxtb	r2, r1
    if( theta & 0x80 ) y = -y;
    460c:	0619      	lsls	r1, r3, #24
    460e:	bf48      	it	mi
    4610:	4252      	negmi	r2, r2
    4612:	b252      	sxtb	r2, r2
    4614:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

    y += 128;
    4618:	3a80      	subs	r2, #128	; 0x80
    461a:	b2d2      	uxtb	r2, r2
    461c:	442b      	add	r3, r5
    461e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4622:	eb03 12e2 	add.w	r2, r3, r2, asr #7
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4626:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    462a:	b2d2      	uxtb	r2, r2
    462c:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4630:	2b00      	cmp	r3, #0
    4632:	d060      	beq.n	46f6 <rainbow_march_beat(LEDStruct&)+0x20a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4634:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4638:	2125      	movs	r1, #37	; 0x25
    463a:	4620      	mov	r0, r4
    463c:	f005 fe1e 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4640:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4644:	4623      	mov	r3, r4
    4646:	4621      	mov	r1, r4
    4648:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    464a:	7810      	ldrb	r0, [r2, #0]
    464c:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    4650:	7850      	ldrb	r0, [r2, #1]
    4652:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4656:	7890      	ldrb	r0, [r2, #2]
    4658:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    465c:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    465e:	42aa      	cmp	r2, r5
    4660:	f1a1 0103 	sub.w	r1, r1, #3
    4664:	d1f1      	bne.n	464a <rainbow_march_beat(LEDStruct&)+0x15e>
    4666:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    466a:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    466c:	781a      	ldrb	r2, [r3, #0]
    466e:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4672:	785a      	ldrb	r2, [r3, #1]
    4674:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4678:	789a      	ldrb	r2, [r3, #2]
    467a:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    467e:	3303      	adds	r3, #3
    4680:	428b      	cmp	r3, r1
    4682:	f1a0 0003 	sub.w	r0, r0, #3
    4686:	d1f1      	bne.n	466c <rainbow_march_beat(LEDStruct&)+0x180>
		strip_sync(leds);
	}
}
    4688:	b003      	add	sp, #12
    468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    468c:	6812      	ldr	r2, [r2, #0]
    468e:	9201      	str	r2, [sp, #4]
	return ret;
    4690:	9901      	ldr	r1, [sp, #4]

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4692:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    4696:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    469a:	f44f 728c 	mov.w	r2, #280	; 0x118
    469e:	fb02 f201 	mul.w	r2, r2, r1
    46a2:	021b      	lsls	r3, r3, #8
    46a4:	fb03 f302 	mul.w	r3, r3, r2
    46a8:	0e1b      	lsrs	r3, r3, #24
    46aa:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    46ac:	064a      	lsls	r2, r1, #25
    46ae:	d43f      	bmi.n	4730 <rainbow_march_beat(LEDStruct&)+0x244>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    46b0:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    46b4:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    46b8:	492f      	ldr	r1, [pc, #188]	; (4778 <rainbow_march_beat(LEDStruct&)+0x28c>)
    46ba:	1112      	asrs	r2, r2, #4
    46bc:	0052      	lsls	r2, r2, #1
    46be:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    46c0:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    46c2:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    46c4:	fb12 f000 	smulbb	r0, r2, r0
    46c8:	eb01 1120 	add.w	r1, r1, r0, asr #4
    46cc:	b2ca      	uxtb	r2, r1
    if( theta & 0x80 ) y = -y;
    46ce:	061b      	lsls	r3, r3, #24
    46d0:	bf48      	it	mi
    46d2:	4252      	negmi	r2, r2
    46d4:	b252      	sxtb	r2, r2
    46d6:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

    y += 128;
    46da:	3a80      	subs	r2, #128	; 0x80
    46dc:	b2d2      	uxtb	r2, r2
    46de:	1b5b      	subs	r3, r3, r5
    46e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    46e4:	eba3 12e2 	sub.w	r2, r3, r2, asr #7
	}

	if (!leds.rainbow_split) {
    46e8:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    46ec:	b2d2      	uxtb	r2, r2
    46ee:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}

	if (!leds.rainbow_split) {
    46f2:	2b00      	cmp	r3, #0
    46f4:	d19e      	bne.n	4634 <rainbow_march_beat(LEDStruct&)+0x148>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    46f6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    46fa:	bb6b      	cbnz	r3, 4758 <rainbow_march_beat(LEDStruct&)+0x26c>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    46fc:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4700:	214b      	movs	r1, #75	; 0x4b
    4702:	4620      	mov	r0, r4
    4704:	f005 fdba 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4708:	4620      	mov	r0, r4
    470a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    470e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4710:	781a      	ldrb	r2, [r3, #0]
    4712:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4716:	785a      	ldrb	r2, [r3, #1]
    4718:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    471c:	789a      	ldrb	r2, [r3, #2]
    471e:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4722:	3303      	adds	r3, #3
    4724:	4299      	cmp	r1, r3
    4726:	f1a0 0003 	sub.w	r0, r0, #3
    472a:	d1f1      	bne.n	4710 <rainbow_march_beat(LEDStruct&)+0x224>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    472c:	b003      	add	sp, #12
    472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4730:	43c9      	mvns	r1, r1
    4732:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4734:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4738:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    473a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    473e:	e7bb      	b.n	46b8 <rainbow_march_beat(LEDStruct&)+0x1cc>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4740:	43c9      	mvns	r1, r1
    4742:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4744:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4748:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    474a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    474e:	e752      	b.n	45f6 <rainbow_march_beat(LEDStruct&)+0x10a>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4750:	4620      	mov	r0, r4
    4752:	f7ff fdb1 	bl	42b8 <rainbow_update(LEDStruct&)>
    4756:	e732      	b.n	45be <rainbow_march_beat(LEDStruct&)+0xd2>
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4758:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    475c:	4620      	mov	r0, r4
    475e:	2196      	movs	r1, #150	; 0x96
    4760:	f005 fd8c 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4764:	b003      	add	sp, #12
    4766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4768:	461a      	mov	r2, r3
    476a:	e71a      	b.n	45a2 <rainbow_march_beat(LEDStruct&)+0xb6>
    476c:	1fff8784 	.word	0x1fff8784
    4770:	1fff91d1 	.word	0x1fff91d1
    4774:	1ffface8 	.word	0x1ffface8
    4778:	0000e70c 	.word	0x0000e70c

0000477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
    477c:	b5f0      	push	{r4, r5, r6, r7, lr}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    477e:	4d20      	ldr	r5, [pc, #128]	; (4800 <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)+0x84>)
    4780:	f89d 4014 	ldrb.w	r4, [sp, #20]
    4784:	882a      	ldrh	r2, [r5, #0]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4786:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
    478a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    478e:	f243 6719 	movw	r7, #13849	; 0x3619
    4792:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    4796:	443a      	add	r2, r7
    4798:	b292      	uxth	r2, r2
    479a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    479e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    47a2:	443e      	add	r6, r7
    47a4:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47a6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    47aa:	eb06 2716 	add.w	r7, r6, r6, lsr #8
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
    47ae:	b2d2      	uxtb	r2, r2
	leds.fire_cooling2	= fc - 10 + random8(21);
    47b0:	b2ff      	uxtb	r7, r7

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
    47b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    47b6:	3b0a      	subs	r3, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    47b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
    47bc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    47c0:	eb03 2222 	add.w	r2, r3, r2, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    47c4:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    47c8:	f1a4 030a 	sub.w	r3, r4, #10
    47cc:	eb03 2727 	add.w	r7, r3, r7, asr #8
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    47d0:	f04f 0e01 	mov.w	lr, #1
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    47d4:	f880 1316 	strb.w	r1, [r0, #790]	; 0x316

	leds.fire_sparking2 = fs - 10 + random8(21);
    47d8:	f880 227d 	strb.w	r2, [r0, #637]	; 0x27d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    47dc:	210c      	movs	r1, #12
	leds.delay_time			= 15;
    47de:	220f      	movs	r2, #15
	leds.use_palette		= 0; 
    47e0:	2300      	movs	r3, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47e2:	802e      	strh	r6, [r5, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    47e4:	f880 427e 	strb.w	r4, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
	leds.fire_cooling2	= fc - 10 + random8(21);
    47e8:	f880 727f 	strb.w	r7, [r0, #639]	; 0x27f
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    47ec:	f880 e22e 	strb.w	lr, [r0, #558]	; 0x22e
	leds.mode_type			= FIRE;
    47f0:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
	leds.delay_time			= 15;
    47f4:	f880 21c3 	strb.w	r2, [r0, #451]	; 0x1c3
	leds.use_palette		= 0; 
    47f8:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    47fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47fe:	bf00      	nop
    4800:	1fff8784 	.word	0x1fff8784

00004804 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4804:	4b16      	ldr	r3, [pc, #88]	; (4860 <fire_update(LEDStruct&)+0x5c>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4806:	4a17      	ldr	r2, [pc, #92]	; (4864 <fire_update(LEDStruct&)+0x60>)
	switch (update_var) {
    4808:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    480a:	2100      	movs	r1, #0
    480c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    480e:	2b04      	cmp	r3, #4
    4810:	d808      	bhi.n	4824 <fire_update(LEDStruct&)+0x20>
    4812:	e8df f003 	tbb	[pc, r3]
    4816:	1812      	.short	0x1812
    4818:	1e03      	.short	0x1e03
    481a:	09          	.byte	0x09
    481b:	00          	.byte	0x00
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    481c:	4b12      	ldr	r3, [pc, #72]	; (4868 <fire_update(LEDStruct&)+0x64>)
    481e:	881b      	ldrh	r3, [r3, #0]
    4820:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4824:	f7fd bcc6 	b.w	21b4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    4828:	4b0f      	ldr	r3, [pc, #60]	; (4868 <fire_update(LEDStruct&)+0x64>)
    482a:	881b      	ldrh	r3, [r3, #0]
    482c:	3300      	adds	r3, #0
    482e:	bf18      	it	ne
    4830:	2301      	movne	r3, #1
    4832:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
		default:	break;
	}
	LEDDebug(leds);
    4836:	f7fd bcbd 	b.w	21b4 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    483a:	4b0b      	ldr	r3, [pc, #44]	; (4868 <fire_update(LEDStruct&)+0x64>)
    483c:	881b      	ldrh	r3, [r3, #0]
    483e:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4842:	f7fd bcb7 	b.w	21b4 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    4846:	4b08      	ldr	r3, [pc, #32]	; (4868 <fire_update(LEDStruct&)+0x64>)
    4848:	881b      	ldrh	r3, [r3, #0]
    484a:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    484e:	f7fd bcb1 	b.w	21b4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4852:	4b05      	ldr	r3, [pc, #20]	; (4868 <fire_update(LEDStruct&)+0x64>)
    4854:	881b      	ldrh	r3, [r3, #0]
    4856:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    485a:	f7fd bcab 	b.w	21b4 <LEDDebug(LEDStruct&)>
    485e:	bf00      	nop
    4860:	1fff9a18 	.word	0x1fff9a18
    4864:	1fff91d1 	.word	0x1fff91d1
    4868:	1fff90d2 	.word	0x1fff90d2

0000486c <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    486c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4870:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4874:	4ec1      	ldr	r6, [pc, #772]	; (4b7c <fire(LEDStruct&)+0x310>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    4876:	b085      	sub	sp, #20
    4878:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    487a:	2b00      	cmp	r3, #0
    487c:	f000 8186 	beq.w	4b8c <fire(LEDStruct&)+0x320>
	if (keyboard_update) { fire_update(leds); }
    4880:	4bbf      	ldr	r3, [pc, #764]	; (4b80 <fire(LEDStruct&)+0x314>)
    4882:	781b      	ldrb	r3, [r3, #0]
    4884:	2b00      	cmp	r3, #0
    4886:	f040 8175 	bne.w	4b74 <fire(LEDStruct&)+0x308>
    488a:	f894 227e 	ldrb.w	r2, [r4, #638]	; 0x27e
    488e:	49bd      	ldr	r1, [pc, #756]	; (4b84 <fire(LEDStruct&)+0x318>)
    4890:	8833      	ldrh	r3, [r6, #0]
    4892:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4896:	0052      	lsls	r2, r2, #1
    4898:	fb81 1e02 	smull	r1, lr, r1, r2
    489c:	17d2      	asrs	r2, r2, #31
    489e:	ebc2 0eee 	rsb	lr, r2, lr, asr #3
    48a2:	f10e 0e02 	add.w	lr, lr, #2
    48a6:	f204 277f 	addw	r7, r4, #639	; 0x27f
    48aa:	fa5f fe8e 	uxtb.w	lr, lr
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    48ae:	4638      	mov	r0, r7
    48b0:	f204 25ca 	addw	r5, r4, #714	; 0x2ca
    48b4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    48b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    48bc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    48c0:	3319      	adds	r3, #25
    48c2:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    48c4:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    48c8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    48cc:	b2d2      	uxtb	r2, r2
    48ce:	fb12 f20e 	smulbb	r2, r2, lr
    48d2:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < ONE_SIDE; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
    48d6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < ONE_SIDE; i++) {
    48da:	4285      	cmp	r5, r0
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
    48dc:	7002      	strb	r2, [r0, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < ONE_SIDE; i++) {
    48de:	d1e9      	bne.n	48b4 <fire(LEDStruct&)+0x48>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = ONE_SIDE - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    48e0:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 4b88 <fire(LEDStruct&)+0x31c>
    48e4:	8033      	strh	r3, [r6, #0]
    48e6:	f204 21c7 	addw	r1, r4, #711	; 0x2c7
    48ea:	f204 2ec9 	addw	lr, r4, #713	; 0x2c9
    48ee:	f504 7c20 	add.w	ip, r4, #640	; 0x280
    48f2:	780a      	ldrb	r2, [r1, #0]
    48f4:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    48f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    48fc:	fb88 9002 	smull	r9, r0, r8, r2
    4900:	eba0 72e2 	sub.w	r2, r0, r2, asr #31
	for (int i = 0; i < ONE_SIDE; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = ONE_SIDE - 3; k >= 2; k--) {
    4904:	458c      	cmp	ip, r1
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4906:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	for (int i = 0; i < ONE_SIDE; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = ONE_SIDE - 3; k >= 2; k--) {
    490a:	d1f2      	bne.n	48f2 <fire(LEDStruct&)+0x86>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    490c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4910:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4914:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4918:	3319      	adds	r3, #25
    491a:	b29b      	uxth	r3, r3
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    491c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4920:	f894 027c 	ldrb.w	r0, [r4, #636]	; 0x27c
    4924:	8033      	strh	r3, [r6, #0]
    4926:	b2d2      	uxtb	r2, r2
    4928:	4290      	cmp	r0, r2
    492a:	4994      	ldr	r1, [pc, #592]	; (4b7c <fire(LEDStruct&)+0x310>)
    492c:	d926      	bls.n	497c <fire(LEDStruct&)+0x110>
    492e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4932:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4936:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    493a:	3319      	adds	r3, #25
    493c:	b29b      	uxth	r3, r3
    493e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4942:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4946:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    494a:	3219      	adds	r2, #25
    494c:	b290      	uxth	r0, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    494e:	eb00 2210 	add.w	r2, r0, r0, lsr #8
    4952:	eb03 2313 	add.w	r3, r3, r3, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4956:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4958:	b2db      	uxtb	r3, r3
    495a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    495e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4962:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4966:	ebc2 124e 	rsb	r2, r2, lr, lsl #5
    496a:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    496c:	8008      	strh	r0, [r1, #0]
    496e:	3a60      	subs	r2, #96	; 0x60
    4970:	f893 1280 	ldrb.w	r1, [r3, #640]	; 0x280
    4974:	fa81 f152 	uqadd8	r1, r1, r2
    4978:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
	}

	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
    497c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4980:	2b00      	cmp	r3, #0
    4982:	d14f      	bne.n	4a24 <fire(LEDStruct&)+0x1b8>
    4984:	f894 227f 	ldrb.w	r2, [r4, #639]	; 0x27f
    4988:	497e      	ldr	r1, [pc, #504]	; (4b84 <fire(LEDStruct&)+0x318>)
    498a:	8833      	ldrh	r3, [r6, #0]
    498c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4990:	0052      	lsls	r2, r2, #1
    4992:	fb81 1e02 	smull	r1, lr, r1, r2
    4996:	17d2      	asrs	r2, r2, #31
    4998:	ebc2 0eee 	rsb	lr, r2, lr, asr #3
    499c:	f10e 0e02 	add.w	lr, lr, #2
    49a0:	fa5f fe8e 	uxtb.w	lr, lr
    49a4:	f204 3c15 	addw	ip, r4, #789	; 0x315
    49a8:	4628      	mov	r0, r5
    49aa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    49ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    49b2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    49b6:	3319      	adds	r3, #25
    49b8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49ba:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    49be:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    49c2:	b2d2      	uxtb	r2, r2
    49c4:	fb12 f20e 	smulbb	r2, r2, lr
    49c8:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		for (int i = 0; i < ONE_SIDE; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
    49cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
    49d0:	4584      	cmp	ip, r0
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
    49d2:	7002      	strb	r2, [r0, #0]
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
    49d4:	d1e9      	bne.n	49aa <fire(LEDStruct&)+0x13e>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
		}
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    49d6:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 4b88 <fire(LEDStruct&)+0x31c>
    49da:	8033      	strh	r3, [r6, #0]
    49dc:	f204 3112 	addw	r1, r4, #786	; 0x312
    49e0:	f504 7e45 	add.w	lr, r4, #788	; 0x314
    49e4:	f204 2ccb 	addw	ip, r4, #715	; 0x2cb
    49e8:	780a      	ldrb	r2, [r1, #0]
    49ea:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    49ee:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    49f2:	fb88 9002 	smull	r9, r0, r8, r2
    49f6:	eba0 72e2 	sub.w	r2, r0, r2, asr #31
	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
		}
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
    49fa:	458c      	cmp	ip, r1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    49fc:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
		}
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
    4a00:	d1f2      	bne.n	49e8 <fire(LEDStruct&)+0x17c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a02:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a0a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a0e:	3319      	adds	r3, #25
    4a10:	b29b      	uxth	r3, r3
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4a12:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4a16:	f894 027d 	ldrb.w	r0, [r4, #637]	; 0x27d
    4a1a:	8033      	strh	r3, [r6, #0]
    4a1c:	b2d2      	uxtb	r2, r2
    4a1e:	4290      	cmp	r0, r2
    4a20:	4956      	ldr	r1, [pc, #344]	; (4b7c <fire(LEDStruct&)+0x310>)
    4a22:	d87e      	bhi.n	4b22 <fire(LEDStruct&)+0x2b6>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4a24:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a28:	4626      	mov	r6, r4
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d047      	beq.n	4abe <fire(LEDStruct&)+0x252>
    4a2e:	f104 09e1 	add.w	r9, r4, #225	; 0xe1
    4a32:	f10d 080c 	add.w	r8, sp, #12
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4a36:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4a3a:	4640      	mov	r0, r8
    4a3c:	f005 fd0e 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a40:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4a44:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4a48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a4c:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4a4e:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4a50:	70b3      	strb	r3, [r6, #2]
    4a52:	3603      	adds	r6, #3
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < ONE_SIDE; j++) {
    4a54:	45b1      	cmp	r9, r6
    4a56:	d1ee      	bne.n	4a36 <fire(LEDStruct&)+0x1ca>
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4a58:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a5c:	b19b      	cbz	r3, 4a86 <fire(LEDStruct&)+0x21a>
    4a5e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4a62:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a64:	7822      	ldrb	r2, [r4, #0]
    4a66:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4a6a:	7862      	ldrb	r2, [r4, #1]
    4a6c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4a70:	78a2      	ldrb	r2, [r4, #2]
    4a72:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4a76:	3403      	adds	r4, #3
    4a78:	42a1      	cmp	r1, r4
    4a7a:	f1a3 0303 	sub.w	r3, r3, #3
    4a7e:	d1f1      	bne.n	4a64 <fire(LEDStruct&)+0x1f8>
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4a80:	b005      	add	sp, #20
    4a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4a86:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a8a:	b38b      	cbz	r3, 4af0 <fire(LEDStruct&)+0x284>
    4a8c:	f1a4 06e1 	sub.w	r6, r4, #225	; 0xe1
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4a90:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4a94:	4640      	mov	r0, r8
    4a96:	f005 fce1 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a9a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4a9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4aa2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4aa6:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
        g = rhs.g;
    4aaa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4aae:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
    4ab2:	3c03      	subs	r4, #3
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < ONE_SIDE; j++) {
    4ab4:	42b4      	cmp	r4, r6
    4ab6:	d1eb      	bne.n	4a90 <fire(LEDStruct&)+0x224>
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4ab8:	b005      	add	sp, #20
    4aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4abe:	f1a4 09e1 	sub.w	r9, r4, #225	; 0xe1
    4ac2:	f10d 080c 	add.w	r8, sp, #12
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4ac6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4aca:	4640      	mov	r0, r8
    4acc:	f005 fcc6 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ad0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4ad4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4ad8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4adc:	f886 10de 	strb.w	r1, [r6, #222]	; 0xde
        g = rhs.g;
    4ae0:	f886 20df 	strb.w	r2, [r6, #223]	; 0xdf
        b = rhs.b;
    4ae4:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
    4ae8:	3e03      	subs	r6, #3
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE; j++) {
    4aea:	45b1      	cmp	r9, r6
    4aec:	d1eb      	bne.n	4ac6 <fire(LEDStruct&)+0x25a>
    4aee:	e7b3      	b.n	4a58 <fire(LEDStruct&)+0x1ec>
    4af0:	f104 06e1 	add.w	r6, r4, #225	; 0xe1
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4af4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4af8:	4640      	mov	r0, r8
    4afa:	f005 fcaf 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4afe:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4b02:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4b06:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b0a:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
        g = rhs.g;
    4b0e:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
        b = rhs.b;
    4b12:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3
    4b16:	3403      	adds	r4, #3
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE; j++) {
    4b18:	42a6      	cmp	r6, r4
    4b1a:	d1eb      	bne.n	4af4 <fire(LEDStruct&)+0x288>
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4b1c:	b005      	add	sp, #20
    4b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b22:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b2a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b2e:	3319      	adds	r3, #25
    4b30:	b29b      	uxth	r3, r3
    4b32:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4b36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b3a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4b3e:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b40:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b44:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4b46:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b48:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4b4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4b50:	b2d2      	uxtb	r2, r2
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4b52:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4b56:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4b5a:	ebc2 1246 	rsb	r2, r2, r6, lsl #5
    4b5e:	f893 62cb 	ldrb.w	r6, [r3, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b62:	8008      	strh	r0, [r1, #0]
    4b64:	1212      	asrs	r2, r2, #8
    4b66:	3a60      	subs	r2, #96	; 0x60
    4b68:	4631      	mov	r1, r6
    4b6a:	fa81 f152 	uqadd8	r1, r1, r2
    4b6e:	f883 12cb 	strb.w	r1, [r3, #715]	; 0x2cb
    4b72:	e757      	b.n	4a24 <fire(LEDStruct&)+0x1b8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4b74:	4620      	mov	r0, r4
    4b76:	f7ff fe45 	bl	4804 <fire_update(LEDStruct&)>
    4b7a:	e686      	b.n	488a <fire(LEDStruct&)+0x1e>
    4b7c:	1fff8784 	.word	0x1fff8784
    4b80:	1fff91d1 	.word	0x1fff91d1
    4b84:	1b4e81b5 	.word	0x1b4e81b5
    4b88:	55555556 	.word	0x55555556
    4b8c:	8833      	ldrh	r3, [r6, #0]
    4b8e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4b92:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4b96:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4b9a:	3119      	adds	r1, #25
    4b9c:	b289      	uxth	r1, r1
    4b9e:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4ba2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4ba6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4baa:	3219      	adds	r2, #25
    4bac:	b292      	uxth	r2, r2
    4bae:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    4bb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4bb6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4bba:	3319      	adds	r3, #25
    4bbc:	b29b      	uxth	r3, r3
    4bbe:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4bc2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4bc6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4bca:	3519      	adds	r5, #25
    4bcc:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bce:	eb05 2715 	add.w	r7, r5, r5, lsr #8
    4bd2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4bd6:	b2d2      	uxtb	r2, r2
    4bd8:	b2ff      	uxtb	r7, r7
    4bda:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4bde:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
    4be2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    4be6:	b2db      	uxtb	r3, r3
    4be8:	eb02 024e 	add.w	r2, r2, lr, lsl #1
    4bec:	11bf      	asrs	r7, r7, #6
    4bee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4bf2:	373c      	adds	r7, #60	; 0x3c
    4bf4:	119b      	asrs	r3, r3, #6
    4bf6:	1212      	asrs	r2, r2, #8
    4bf8:	b2ff      	uxtb	r7, r7
    4bfa:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4bfe:	3332      	adds	r3, #50	; 0x32
    4c00:	3214      	adds	r2, #20
    4c02:	9700      	str	r7, [sp, #0]
    4c04:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c0c:	8035      	strh	r5, [r6, #0]
    4c0e:	f7ff fdb5 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
    4c12:	e635      	b.n	4880 <fire(LEDStruct&)+0x14>

00004c14 <fire_mirror(LEDStruct&)>:
}




void fire_mirror(LEDStruct& leds) {
    4c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4c18:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4c1c:	4ed6      	ldr	r6, [pc, #856]	; (4f78 <fire_mirror(LEDStruct&)+0x364>)
}




void fire_mirror(LEDStruct& leds) {
    4c1e:	b084      	sub	sp, #16
    4c20:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4c22:	2b00      	cmp	r3, #0
    4c24:	f000 81df 	beq.w	4fe6 <fire_mirror(LEDStruct&)+0x3d2>
	if (keyboard_update) { fire_update(leds); }
    4c28:	4bd4      	ldr	r3, [pc, #848]	; (4f7c <fire_mirror(LEDStruct&)+0x368>)
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	f040 81d6 	bne.w	4fde <fire_mirror(LEDStruct&)+0x3ca>
    4c32:	f894 227e 	ldrb.w	r2, [r4, #638]	; 0x27e
    4c36:	4fd2      	ldr	r7, [pc, #840]	; (4f80 <fire_mirror(LEDStruct&)+0x36c>)
    4c38:	8833      	ldrh	r3, [r6, #0]
    4c3a:	fb87 1702 	smull	r1, r7, r7, r2
    4c3e:	4417      	add	r7, r2
    4c40:	10ff      	asrs	r7, r7, #3
    4c42:	3702      	adds	r7, #2
    4c44:	f204 257f 	addw	r5, r4, #639	; 0x27f
    4c48:	b2ff      	uxtb	r7, r7
}




void fire_mirror(LEDStruct& leds) {
    4c4a:	4628      	mov	r0, r5
    4c4c:	f504 7e29 	add.w	lr, r4, #676	; 0x2a4
    4c50:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c58:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c5c:	3319      	adds	r3, #25
    4c5e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c60:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4c64:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    4c68:	b2d2      	uxtb	r2, r2
    4c6a:	fb12 f207 	smulbb	r2, r2, r7
    4c6e:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < ONE_SIDE / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
    4c72:	ea22 72e2 	bic.w	r2, r2, r2, asr #31

void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < ONE_SIDE / 2; i++) {
    4c76:	4586      	cmp	lr, r0
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
    4c78:	7002      	strb	r2, [r0, #0]

void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < ONE_SIDE / 2; i++) {
    4c7a:	d1e9      	bne.n	4c50 <fire_mirror(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
	}

	for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4c7c:	f8df c308 	ldr.w	ip, [pc, #776]	; 4f88 <fire_mirror(LEDStruct&)+0x374>
    4c80:	8033      	strh	r3, [r6, #0]
    4c82:	f204 21a1 	addw	r1, r4, #673	; 0x2a1
    4c86:	f204 27a3 	addw	r7, r4, #675	; 0x2a3
    4c8a:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    4c8e:	780a      	ldrb	r2, [r1, #0]
    4c90:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    4c94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    4c98:	fb8c 8002 	smull	r8, r0, ip, r2
    4c9c:	eba0 72e2 	sub.w	r2, r0, r2, asr #31

	for (int i = 0; i < ONE_SIDE / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
	}

	for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4ca0:	458e      	cmp	lr, r1
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4ca2:	f807 2d01 	strb.w	r2, [r7, #-1]!

	for (int i = 0; i < ONE_SIDE / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
	}

	for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4ca6:	d1f2      	bne.n	4c8e <fire_mirror(LEDStruct&)+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ca8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4cac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4cb0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4cb4:	3319      	adds	r3, #25
    4cb6:	b29b      	uxth	r3, r3
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (random8() < leds.fire_sparking) {
    4cb8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4cbc:	f894 027c 	ldrb.w	r0, [r4, #636]	; 0x27c
    4cc0:	8033      	strh	r3, [r6, #0]
    4cc2:	b2d2      	uxtb	r2, r2
    4cc4:	4290      	cmp	r0, r2
    4cc6:	49ac      	ldr	r1, [pc, #688]	; (4f78 <fire_mirror(LEDStruct&)+0x364>)
    4cc8:	d927      	bls.n	4d1a <fire_mirror(LEDStruct&)+0x106>
    4cca:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4cce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4cd2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4cd6:	3319      	adds	r3, #25
    4cd8:	b29b      	uxth	r3, r3
    4cda:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4cde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4ce2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4ce6:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ce8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cec:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4cee:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4cf0:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4cf4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4cf8:	b2d2      	uxtb	r2, r2
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4cfa:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4cfe:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    4d02:	ebc2 1247 	rsb	r2, r2, r7, lsl #5
    4d06:	f893 7280 	ldrb.w	r7, [r3, #640]	; 0x280
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d0a:	8008      	strh	r0, [r1, #0]
    4d0c:	1212      	asrs	r2, r2, #8
    4d0e:	3a60      	subs	r2, #96	; 0x60
    4d10:	4639      	mov	r1, r7
    4d12:	fa81 f152 	uqadd8	r1, r1, r2
    4d16:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4d1a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d150      	bne.n	4dc4 <fire_mirror(LEDStruct&)+0x1b0>
    4d22:	f894 227f 	ldrb.w	r2, [r4, #639]	; 0x27f
    4d26:	4f97      	ldr	r7, [pc, #604]	; (4f84 <fire_mirror(LEDStruct&)+0x370>)
    4d28:	8833      	ldrh	r3, [r6, #0]
    4d2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4d2e:	0052      	lsls	r2, r2, #1
    4d30:	fb87 1702 	smull	r1, r7, r7, r2
    4d34:	4417      	add	r7, r2
    4d36:	17d2      	asrs	r2, r2, #31
    4d38:	ebc2 1767 	rsb	r7, r2, r7, asr #5
    4d3c:	3702      	adds	r7, #2
    4d3e:	b2ff      	uxtb	r7, r7
    4d40:	f204 20ca 	addw	r0, r4, #714	; 0x2ca
    4d44:	f204 2eef 	addw	lr, r4, #751	; 0x2ef
    4d48:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4d50:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d54:	3319      	adds	r3, #25
    4d56:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d58:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4d5c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    4d60:	b2d2      	uxtb	r2, r2
    4d62:	fb12 f207 	smulbb	r2, r2, r7
    4d66:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		for (int i = 0; i < ONE_SIDE / 2; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
    4d6a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
    4d6e:	4586      	cmp	lr, r0
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
    4d70:	7002      	strb	r2, [r0, #0]
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
    4d72:	d1e9      	bne.n	4d48 <fire_mirror(LEDStruct&)+0x134>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
		}
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4d74:	f8df c210 	ldr.w	ip, [pc, #528]	; 4f88 <fire_mirror(LEDStruct&)+0x374>
    4d78:	8033      	strh	r3, [r6, #0]
    4d7a:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    4d7e:	f204 27ee 	addw	r7, r4, #750	; 0x2ee
    4d82:	f204 2ecb 	addw	lr, r4, #715	; 0x2cb
    4d86:	780a      	ldrb	r2, [r1, #0]
    4d88:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    4d8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    4d90:	fb8c 8002 	smull	r8, r0, ip, r2
    4d94:	eba0 72e2 	sub.w	r2, r0, r2, asr #31

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
		}
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4d98:	458e      	cmp	lr, r1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4d9a:	f807 2d01 	strb.w	r2, [r7, #-1]!

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
		}
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4d9e:	d1f2      	bne.n	4d86 <fire_mirror(LEDStruct&)+0x172>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4da0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4da4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4da8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4dac:	3319      	adds	r3, #25
    4dae:	b29b      	uxth	r3, r3
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4db0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4db4:	f894 027d 	ldrb.w	r0, [r4, #637]	; 0x27d
    4db8:	8033      	strh	r3, [r6, #0]
    4dba:	b2d2      	uxtb	r2, r2
    4dbc:	4290      	cmp	r0, r2
    4dbe:	496e      	ldr	r1, [pc, #440]	; (4f78 <fire_mirror(LEDStruct&)+0x364>)
    4dc0:	f200 80e4 	bhi.w	4f8c <fire_mirror(LEDStruct&)+0x378>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	if (leds.this_dir) {
    4dc4:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d03f      	beq.n	4e4c <fire_mirror(LEDStruct&)+0x238>
    4dcc:	46a0      	mov	r8, r4
    4dce:	f104 096f 	add.w	r9, r4, #111	; 0x6f
    4dd2:	4627      	mov	r7, r4
    4dd4:	ae03      	add	r6, sp, #12
		for (int j = 0; j < ONE_SIDE / 2; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4dd6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4dda:	4630      	mov	r0, r6
    4ddc:	f005 fb3e 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4de0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4de4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4de8:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4dec:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    4dee:	70bb      	strb	r3, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4df0:	7039      	strb	r1, [r7, #0]
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4df2:	7829      	ldrb	r1, [r5, #0]
    4df4:	4630      	mov	r0, r6
    4df6:	3703      	adds	r7, #3
    4df8:	f005 fb30 	bl	a45c <HeatColor(unsigned char)>
    4dfc:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4e00:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4e04:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e08:	f888 10de 	strb.w	r1, [r8, #222]	; 0xde
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	if (leds.this_dir) {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
    4e0c:	45b9      	cmp	r9, r7
        g = rhs.g;
    4e0e:	f888 20df 	strb.w	r2, [r8, #223]	; 0xdf
        b = rhs.b;
    4e12:	f888 30e0 	strb.w	r3, [r8, #224]	; 0xe0
    4e16:	f1a8 0803 	sub.w	r8, r8, #3
    4e1a:	d1dc      	bne.n	4dd6 <fire_mirror(LEDStruct&)+0x1c2>
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
		}
	}


	if (leds.fire_sync) { strip_sync(leds); }
    4e1c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4e20:	2b00      	cmp	r3, #0
    4e22:	d047      	beq.n	4eb4 <fire_mirror(LEDStruct&)+0x2a0>
    4e24:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4e28:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e2a:	7822      	ldrb	r2, [r4, #0]
    4e2c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4e30:	7862      	ldrb	r2, [r4, #1]
    4e32:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4e36:	78a2      	ldrb	r2, [r4, #2]
    4e38:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4e3c:	3403      	adds	r4, #3
    4e3e:	42a1      	cmp	r1, r4
    4e40:	f1a3 0303 	sub.w	r3, r3, #3
    4e44:	d1f1      	bne.n	4e2a <fire_mirror(LEDStruct&)+0x216>
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4e46:	b004      	add	sp, #16
    4e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	if (leds.this_dir) {
    4e4c:	4699      	mov	r9, r3
    4e4e:	46a0      	mov	r8, r4
    4e50:	4627      	mov	r7, r4
    4e52:	46aa      	mov	sl, r5
    4e54:	ae03      	add	r6, sp, #12
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
			leds.led_data[ONE_SIDE / 2 - 1 - j] = HeatColor(leds.heat[j]);
    4e56:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    4e5a:	4630      	mov	r0, r6
    4e5c:	f005 fafe 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e60:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4e64:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4e68:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4e6c:	f888 206d 	strb.w	r2, [r8, #109]	; 0x6d
        b = rhs.b;
    4e70:	f888 306e 	strb.w	r3, [r8, #110]	; 0x6e
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e74:	f888 106c 	strb.w	r1, [r8, #108]	; 0x6c
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
    4e78:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4e7c:	4630      	mov	r0, r6
			leds.led_data[j] = HeatColor(leds.heat[j]);
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
    4e7e:	f109 0901 	add.w	r9, r9, #1
			leds.led_data[ONE_SIDE / 2 - 1 - j] = HeatColor(leds.heat[j]);
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
    4e82:	f005 faeb 	bl	a45c <HeatColor(unsigned char)>
    4e86:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4e8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4e8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e92:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
			leds.led_data[j] = HeatColor(leds.heat[j]);
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
    4e96:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
        g = rhs.g;
    4e9a:	f887 2070 	strb.w	r2, [r7, #112]	; 0x70
        b = rhs.b;
    4e9e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    4ea2:	f1a8 0803 	sub.w	r8, r8, #3
    4ea6:	f107 0703 	add.w	r7, r7, #3
    4eaa:	d1d4      	bne.n	4e56 <fire_mirror(LEDStruct&)+0x242>
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
		}
	}


	if (leds.fire_sync) { strip_sync(leds); }
    4eac:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d1b7      	bne.n	4e24 <fire_mirror(LEDStruct&)+0x210>
	else {
		if (leds.this_dir) {
    4eb4:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    4eb8:	f204 28ca 	addw	r8, r4, #714	; 0x2ca
    4ebc:	b36f      	cbz	r7, 4f1a <fire_mirror(LEDStruct&)+0x306>
    4ebe:	4625      	mov	r5, r4
    4ec0:	46c1      	mov	r9, r8
    4ec2:	2725      	movs	r7, #37	; 0x25
			for (int j = 0; j < ONE_SIDE / 2; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4ec4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    4ec8:	4630      	mov	r0, r6
    4eca:	f005 fac7 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ece:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4ed2:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4ed6:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4eda:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4ede:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ee2:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4ee6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4eea:	4630      	mov	r0, r6
    4eec:	f005 fab6 	bl	a45c <HeatColor(unsigned char)>
    4ef0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4ef4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4ef8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4efc:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1


	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
    4f00:	3f01      	subs	r7, #1
        g = rhs.g;
    4f02:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    4f06:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
    4f0a:	f1a4 0403 	sub.w	r4, r4, #3
    4f0e:	f105 0503 	add.w	r5, r5, #3
    4f12:	d1d7      	bne.n	4ec4 <fire_mirror(LEDStruct&)+0x2b0>
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4f14:	b004      	add	sp, #16
    4f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}


	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4f1a:	46c1      	mov	r9, r8
    4f1c:	4625      	mov	r5, r4
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
    4f1e:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    4f22:	4630      	mov	r0, r6
    4f24:	f005 fa9a 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f28:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4f2c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4f30:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f34:	f885 2151 	strb.w	r2, [r5, #337]	; 0x151
        b = rhs.b;
    4f38:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f3c:	f885 1150 	strb.w	r1, [r5, #336]	; 0x150
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
    4f40:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4f44:	4630      	mov	r0, r6
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
    4f46:	3701      	adds	r7, #1
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
    4f48:	f005 fa88 	bl	a45c <HeatColor(unsigned char)>
    4f4c:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4f50:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4f54:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f58:	f884 1150 	strb.w	r1, [r4, #336]	; 0x150
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
    4f5c:	2f25      	cmp	r7, #37	; 0x25
        g = rhs.g;
    4f5e:	f884 2151 	strb.w	r2, [r4, #337]	; 0x151
        b = rhs.b;
    4f62:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    4f66:	f105 0503 	add.w	r5, r5, #3
    4f6a:	f1a4 0403 	sub.w	r4, r4, #3
    4f6e:	d1d6      	bne.n	4f1e <fire_mirror(LEDStruct&)+0x30a>
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4f70:	b004      	add	sp, #16
    4f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f76:	bf00      	nop
    4f78:	1fff8784 	.word	0x1fff8784
    4f7c:	1fff91d1 	.word	0x1fff91d1
    4f80:	88888889 	.word	0x88888889
    4f84:	dd67c8a7 	.word	0xdd67c8a7
    4f88:	55555556 	.word	0x55555556
    4f8c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4f90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4f94:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4f98:	3319      	adds	r3, #25
    4f9a:	b29b      	uxth	r3, r3
    4f9c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4fa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4fa4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4fa8:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4faa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fae:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fb0:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fb2:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4fba:	b2d2      	uxtb	r2, r2
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4fbc:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4fc0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4fc4:	ebc2 1246 	rsb	r2, r2, r6, lsl #5
    4fc8:	f893 62cb 	ldrb.w	r6, [r3, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fcc:	8008      	strh	r0, [r1, #0]
    4fce:	1212      	asrs	r2, r2, #8
    4fd0:	3a60      	subs	r2, #96	; 0x60
    4fd2:	4631      	mov	r1, r6
    4fd4:	fa81 f152 	uqadd8	r1, r1, r2
    4fd8:	f883 12cb 	strb.w	r1, [r3, #715]	; 0x2cb
    4fdc:	e6f2      	b.n	4dc4 <fire_mirror(LEDStruct&)+0x1b0>



void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4fde:	4620      	mov	r0, r4
    4fe0:	f7ff fc10 	bl	4804 <fire_update(LEDStruct&)>
    4fe4:	e625      	b.n	4c32 <fire_mirror(LEDStruct&)+0x1e>
    4fe6:	8833      	ldrh	r3, [r6, #0]
    4fe8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4fec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4ff0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4ff4:	3119      	adds	r1, #25
    4ff6:	b289      	uxth	r1, r1
    4ff8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4ffc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5000:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5004:	3219      	adds	r2, #25
    5006:	b292      	uxth	r2, r2
    5008:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    500c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5010:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5014:	3319      	adds	r3, #25
    5016:	b29b      	uxth	r3, r3
    5018:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    501c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5020:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5024:	3519      	adds	r5, #25
    5026:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5028:	eb05 2715 	add.w	r7, r5, r5, lsr #8
    502c:	eb02 2212 	add.w	r2, r2, r2, lsr #8




void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    5030:	b2d2      	uxtb	r2, r2
    5032:	b2ff      	uxtb	r7, r7
    5034:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5038:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
    503c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    5040:	b2db      	uxtb	r3, r3
    5042:	eb02 024e 	add.w	r2, r2, lr, lsl #1
    5046:	11bf      	asrs	r7, r7, #6
    5048:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    504c:	373c      	adds	r7, #60	; 0x3c
    504e:	119b      	asrs	r3, r3, #6
    5050:	1212      	asrs	r2, r2, #8
    5052:	b2ff      	uxtb	r7, r7
    5054:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5058:	3332      	adds	r3, #50	; 0x32
    505a:	3214      	adds	r2, #20
    505c:	9700      	str	r7, [sp, #0]
    505e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    5062:	b2db      	uxtb	r3, r3
    5064:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5066:	8035      	strh	r5, [r6, #0]
    5068:	f7ff fb88 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
    506c:	e5dc      	b.n	4c28 <fire_mirror(LEDStruct&)+0x14>
    506e:	bf00      	nop

00005070 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5070:	4b0e      	ldr	r3, [pc, #56]	; (50ac <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5072:	4a0f      	ldr	r2, [pc, #60]	; (50b0 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    5074:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5076:	2100      	movs	r1, #0
    5078:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    507a:	b13b      	cbz	r3, 508c <confetti_update(LEDStruct&)+0x1c>
    507c:	2b01      	cmp	r3, #1
    507e:	d103      	bne.n	5088 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    5080:	4b0c      	ldr	r3, [pc, #48]	; (50b4 <confetti_update(LEDStruct&)+0x44>)
    5082:	881b      	ldrh	r3, [r3, #0]
    5084:	f880 333a 	strb.w	r3, [r0, #826]	; 0x33a
		default: break;
	}
	LEDDebug(leds);
    5088:	f7fd b894 	b.w	21b4 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    508c:	4b09      	ldr	r3, [pc, #36]	; (50b4 <confetti_update(LEDStruct&)+0x44>)
    508e:	881b      	ldrh	r3, [r3, #0]
    5090:	2b00      	cmp	r3, #0
    5092:	bf14      	ite	ne
    5094:	2301      	movne	r3, #1
    5096:	2300      	moveq	r3, #0
    5098:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    509c:	bf14      	ite	ne
    509e:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    50a0:	234b      	moveq	r3, #75	; 0x4b
    50a2:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    50a6:	f7fd b885 	b.w	21b4 <LEDDebug(LEDStruct&)>
    50aa:	bf00      	nop
    50ac:	1fff9a18 	.word	0x1fff9a18
    50b0:	1fff91d1 	.word	0x1fff91d1
    50b4:	1fff90d2 	.word	0x1fff90d2

000050b8 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    50b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    50ba:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    50be:	4e4b      	ldr	r6, [pc, #300]	; (51ec <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    50c0:	b085      	sub	sp, #20
    50c2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    50c4:	bb8b      	cbnz	r3, 512a <confetti(LEDStruct&)+0x72>
    50c6:	8833      	ldrh	r3, [r6, #0]
    50c8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    50cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    50d0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    50d4:	3319      	adds	r3, #25
    50d6:	b29b      	uxth	r3, r3
    50d8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    50dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    50e0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    50e4:	3119      	adds	r1, #25
    50e6:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50e8:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    50ec:	b2d2      	uxtb	r2, r2
    50ee:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    50f2:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50f4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    50f8:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    50fa:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    50fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    5100:	2713      	movs	r7, #19
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5102:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5104:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5106:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    5108:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    510c:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    5110:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    5114:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5118:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    511c:	2b00      	cmp	r3, #0
    511e:	d15c      	bne.n	51da <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    5120:	234b      	movs	r3, #75	; 0x4b
    5122:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
	leds.confetti_fade		= cf;
    5126:	f884 233a 	strb.w	r2, [r4, #826]	; 0x33a
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    512a:	4b31      	ldr	r3, [pc, #196]	; (51f0 <confetti(LEDStruct&)+0x138>)
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2b00      	cmp	r3, #0
    5130:	d157      	bne.n	51e2 <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    5132:	f894 233a 	ldrb.w	r2, [r4, #826]	; 0x33a
    5136:	4620      	mov	r0, r4
    5138:	2196      	movs	r1, #150	; 0x96
    513a:	f005 f951 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    513e:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5140:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5144:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    514c:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    5150:	3319      	adds	r3, #25
    5152:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5154:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5158:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    515c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5160:	3719      	adds	r7, #25
    5162:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5164:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5168:	fb03 f305 	mul.w	r3, r3, r5
    516c:	2101      	movs	r1, #1
    516e:	0c1d      	lsrs	r5, r3, #16
    5170:	9100      	str	r1, [sp, #0]
    5172:	a803      	add	r0, sp, #12
    5174:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    5178:	b2d2      	uxtb	r2, r2
    517a:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    517c:	8037      	strh	r7, [r6, #0]
    517e:	f005 f98f 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5182:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5186:	18e1      	adds	r1, r4, r3
    5188:	5ce2      	ldrb	r2, [r4, r3]
    518a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    518e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5192:	54e2      	strb	r2, [r4, r3]
    5194:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5198:	784a      	ldrb	r2, [r1, #1]
    519a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    519e:	704a      	strb	r2, [r1, #1]
    51a0:	788b      	ldrb	r3, [r1, #2]
    51a2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    51a6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    51aa:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    51ac:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    51b0:	b98b      	cbnz	r3, 51d6 <confetti(LEDStruct&)+0x11e>
    51b2:	4620      	mov	r0, r4
    51b4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    51b8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    51ba:	781a      	ldrb	r2, [r3, #0]
    51bc:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    51c0:	785a      	ldrb	r2, [r3, #1]
    51c2:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    51c6:	789a      	ldrb	r2, [r3, #2]
    51c8:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    51cc:	3303      	adds	r3, #3
    51ce:	428b      	cmp	r3, r1
    51d0:	f1a0 0003 	sub.w	r0, r0, #3
    51d4:	d1f1      	bne.n	51ba <confetti(LEDStruct&)+0x102>
}
    51d6:	b005      	add	sp, #20
    51d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    51da:	2396      	movs	r3, #150	; 0x96
    51dc:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
    51e0:	e7a1      	b.n	5126 <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    51e2:	4620      	mov	r0, r4
    51e4:	f7ff ff44 	bl	5070 <confetti_update(LEDStruct&)>
    51e8:	e7a3      	b.n	5132 <confetti(LEDStruct&)+0x7a>
    51ea:	bf00      	nop
    51ec:	1fff8784 	.word	0x1fff8784
    51f0:	1fff91d1 	.word	0x1fff91d1

000051f4 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    51f4:	4b24      	ldr	r3, [pc, #144]	; (5288 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    51f6:	4a25      	ldr	r2, [pc, #148]	; (528c <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    51f8:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    51fa:	2100      	movs	r1, #0
    51fc:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    51fe:	2b09      	cmp	r3, #9
    5200:	d80a      	bhi.n	5218 <one_sin_update(LEDStruct&)+0x24>
    5202:	e8df f003 	tbb	[pc, r3]
    5206:	1e10      	.short	0x1e10
    5208:	322d2823 	.word	0x322d2823
    520c:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    5210:	4b1f      	ldr	r3, [pc, #124]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5212:	881b      	ldrh	r3, [r3, #0]
    5214:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5218:	f7fc bfcc 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    521c:	4b1c      	ldr	r3, [pc, #112]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    521e:	881b      	ldrh	r3, [r3, #0]
    5220:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5224:	e7f8      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5226:	4b1a      	ldr	r3, [pc, #104]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5228:	881b      	ldrh	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5236:	bf14      	ite	ne
    5238:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    523a:	234b      	moveq	r3, #75	; 0x4b
    523c:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
    5240:	e7ea      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    5242:	4b13      	ldr	r3, [pc, #76]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5244:	881b      	ldrh	r3, [r3, #0]
    5246:	f880 333b 	strb.w	r3, [r0, #827]	; 0x33b
    524a:	e7e5      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    524c:	4b10      	ldr	r3, [pc, #64]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    524e:	881b      	ldrh	r3, [r3, #0]
    5250:	f880 333c 	strb.w	r3, [r0, #828]	; 0x33c
    5254:	e7e0      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    5256:	4b0e      	ldr	r3, [pc, #56]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5258:	881b      	ldrh	r3, [r3, #0]
    525a:	f880 333d 	strb.w	r3, [r0, #829]	; 0x33d
    525e:	e7db      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    5260:	4b0b      	ldr	r3, [pc, #44]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5262:	881b      	ldrh	r3, [r3, #0]
    5264:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
    5268:	e7d6      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    526a:	4b09      	ldr	r3, [pc, #36]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    526c:	881b      	ldrh	r3, [r3, #0]
    526e:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5272:	e7d1      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    5274:	4b06      	ldr	r3, [pc, #24]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5276:	881b      	ldrh	r3, [r3, #0]
    5278:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    527c:	e7cc      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    527e:	4b04      	ldr	r3, [pc, #16]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5280:	881b      	ldrh	r3, [r3, #0]
    5282:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    5286:	e7c7      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
    5288:	1fff9a18 	.word	0x1fff9a18
    528c:	1fff91d1 	.word	0x1fff91d1
    5290:	1fff90d2 	.word	0x1fff90d2

00005294 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    5294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    5298:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    529c:	b085      	sub	sp, #20
    529e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    52a0:	2b00      	cmp	r3, #0
    52a2:	f040 80be 	bne.w	5422 <one_sin(LEDStruct&)+0x18e>
    52a6:	f8df c32c 	ldr.w	ip, [pc, #812]	; 55d4 <one_sin(LEDStruct&)+0x340>
    52aa:	f8bc 3000 	ldrh.w	r3, [ip]
    52ae:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    52b2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    52b6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    52ba:	3619      	adds	r6, #25
    52bc:	b2b6      	uxth	r6, r6
    52be:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    52c2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    52c6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    52ca:	3119      	adds	r1, #25
    52cc:	b289      	uxth	r1, r1
    52ce:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    52d2:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    52d6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    52da:	3519      	adds	r5, #25
    52dc:	b2ad      	uxth	r5, r5
    52de:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    52e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    52e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52ea:	3319      	adds	r3, #25
    52ec:	b29b      	uxth	r3, r3
    52ee:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    52f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    52f6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    52fa:	3719      	adds	r7, #25
    52fc:	b2bf      	uxth	r7, r7
    52fe:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    5302:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5306:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    530a:	3019      	adds	r0, #25
    530c:	b280      	uxth	r0, r0
    530e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5312:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5316:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    531a:	3219      	adds	r2, #25
    531c:	b292      	uxth	r2, r2
    531e:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    5322:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5326:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    532a:	f10e 0e19 	add.w	lr, lr, #25
    532e:	fa1f fe8e 	uxth.w	lr, lr
    5332:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    5336:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    533a:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    533e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5342:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5346:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    534a:	f108 0819 	add.w	r8, r8, #25
    534e:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5352:	b2db      	uxtb	r3, r3
    5354:	b2c9      	uxtb	r1, r1
    5356:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5358:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    535c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5360:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5364:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5368:	ea4f 1aa2 	mov.w	sl, r2, asr #6
    536c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5370:	fa5f f289 	uxtb.w	r2, r9
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5374:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5378:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    537a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    537e:	119b      	asrs	r3, r3, #6
    5380:	3101      	adds	r1, #1
    5382:	f3c5 1542 	ubfx	r5, r5, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5386:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    538a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    538e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5392:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5394:	f103 0964 	add.w	r9, r3, #100	; 0x64
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5398:	f8ac 8000 	strh.w	r8, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    539c:	f10a 0314 	add.w	r3, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53a0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53a4:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53ac:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53b0:	fa5f fa81 	uxtb.w	sl, r1
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    53b4:	f04f 0814 	mov.w	r8, #20
    53b8:	1d69      	adds	r1, r5, #5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53ba:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    53be:	2501      	movs	r5, #1
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    53c0:	220f      	movs	r2, #15

	leds.use_full_range = ufr;
    53c2:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53c6:	fa5f f989 	uxtb.w	r9, r9
    53ca:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53d0:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53d2:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    53d6:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    53da:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    53de:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    53e2:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    53e6:	2e00      	cmp	r6, #0
    53e8:	f040 80e8 	bne.w	55bc <one_sin(LEDStruct&)+0x328>
	else { leds.strip_range = ONE_SIDE; }
    53ec:	224b      	movs	r2, #75	; 0x4b
    53ee:	f8a4 2338 	strh.w	r2, [r4, #824]	; 0x338

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    53f2:	4d76      	ldr	r5, [pc, #472]	; (55cc <one_sin(LEDStruct&)+0x338>)

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    53f4:	f884 a33b 	strb.w	sl, [r4, #827]	; 0x33b
	leds.sin_speed		= ss + (saf/5);
    53f8:	fba5 2503 	umull	r2, r5, r5, r3
    53fc:	eb01 0295 	add.w	r2, r1, r5, lsr #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5400:	2100      	movs	r1, #0
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5402:	f884 933d 	strb.w	r9, [r4, #829]	; 0x33d
	leds.sin_rot		= sr;
    5406:	f884 733e 	strb.w	r7, [r4, #830]	; 0x33e
	leds.sin_phase		= sp;
    540a:	f884 0342 	strb.w	r0, [r4, #834]	; 0x342
	leds.sin_all_freq	= saf;
    540e:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
	leds.bg_clr			= bc;
    5412:	f884 e34b 	strb.w	lr, [r4, #843]	; 0x34b
	leds.bg_bri			= bb;
    5416:	f884 c34c 	strb.w	ip, [r4, #844]	; 0x34c
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    541a:	f884 233c 	strb.w	r2, [r4, #828]	; 0x33c
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    541e:	f884 1341 	strb.w	r1, [r4, #833]	; 0x341
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    5422:	4b6b      	ldr	r3, [pc, #428]	; (55d0 <one_sin(LEDStruct&)+0x33c>)
    5424:	781b      	ldrb	r3, [r3, #0]
    5426:	2b00      	cmp	r3, #0
    5428:	f040 80cc 	bne.w	55c4 <one_sin(LEDStruct&)+0x330>

	leds.sin_start += leds.sin_inc;
    542c:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    5430:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    5434:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    5438:	440b      	add	r3, r1
    543a:	b2db      	uxtb	r3, r3
    543c:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
	leds.sin_index = leds.sin_start;
    5440:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
	if (leds.this_dir) {
    5444:	2a00      	cmp	r2, #0
    5446:	f000 80b1 	beq.w	55ac <one_sin(LEDStruct&)+0x318>
		leds.sin_phase += leds.sin_speed;
    544a:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
    544e:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    5452:	4413      	add	r3, r2
    5454:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5458:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    545c:	2b00      	cmp	r3, #0
    545e:	f000 808e 	beq.w	557e <one_sin(LEDStruct&)+0x2ea>
    5462:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    5466:	4625      	mov	r5, r4
    5468:	1c67      	adds	r7, r4, #1
    546a:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    546c:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5470:	e05c      	b.n	552c <one_sin(LEDStruct&)+0x298>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5472:	2900      	cmp	r1, #0
        in = 255 - in;
    5474:	bfbc      	itt	lt
    5476:	43d2      	mvnlt	r2, r2
    5478:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    547a:	0052      	lsls	r2, r2, #1
    547c:	b2d2      	uxtb	r2, r2
    547e:	1c53      	adds	r3, r2, #1
    5480:	fb03 f202 	mul.w	r2, r3, r2
    5484:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5486:	fb02 f303 	mul.w	r3, r2, r3
    548a:	121b      	asrs	r3, r3, #8
    548c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5490:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5494:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5496:	05d3      	lsls	r3, r2, #23
    5498:	bf54      	ite	pl
    549a:	fa5f fb82 	uxtbpl.w	fp, r2
    549e:	f04f 0bff 	movmi.w	fp, #255	; 0xff
    54a2:	ebc0 0b0b 	rsb	fp, r0, fp
    54a6:	fa5f fb8b 	uxtb.w	fp, fp
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    54aa:	f894 234c 	ldrb.w	r2, [r4, #844]	; 0x34c
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    54ae:	f894 334b 	ldrb.w	r3, [r4, #843]	; 0x34b
    54b2:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    54b6:	4629      	mov	r1, r5
    54b8:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    54ba:	f88d 300c 	strb.w	r3, [sp, #12]
    54be:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    54c2:	f005 f9eb 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    54c6:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    54ca:	f894 233b 	ldrb.w	r2, [r4, #827]	; 0x33b
    54ce:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    54d2:	9100      	str	r1, [sp, #0]
    54d4:	fb02 320a 	mla	r2, r2, sl, r3
    54d8:	b2d2      	uxtb	r2, r2
    54da:	465b      	mov	r3, fp
    54dc:	4649      	mov	r1, r9
    54de:	a803      	add	r0, sp, #12
    54e0:	f004 ffde 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    54e4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    54e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    54ec:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    54f0:	f807 3c01 	strb.w	r3, [r7, #-1]
    54f4:	786a      	ldrb	r2, [r5, #1]
    54f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    54fa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    54fe:	706a      	strb	r2, [r5, #1]
    5500:	78ab      	ldrb	r3, [r5, #2]
    5502:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5506:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    550a:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    550c:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    5510:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5514:	f8b4 2338 	ldrh.w	r2, [r4, #824]	; 0x338
    5518:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    551a:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    551c:	42b2      	cmp	r2, r6
    551e:	f105 0503 	add.w	r5, r5, #3
    5522:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5526:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    552a:	dd28      	ble.n	557e <one_sin(LEDStruct&)+0x2ea>
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    552c:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
    5530:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
    5534:	fa5f fa86 	uxtb.w	sl, r6
    5538:	fb03 220a 	mla	r2, r3, sl, r2
    553c:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    553e:	b251      	sxtb	r1, r2
    5540:	2900      	cmp	r1, #0
        in = 255 - in;
    5542:	bfba      	itte	lt
    5544:	43d3      	mvnlt	r3, r2
    5546:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5548:	4613      	movge	r3, r2
    554a:	005b      	lsls	r3, r3, #1
    554c:	b2db      	uxtb	r3, r3
    554e:	1c58      	adds	r0, r3, #1
    5550:	fb00 f303 	mul.w	r3, r0, r3
    5554:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5556:	fb03 f000 	mul.w	r0, r3, r0
    555a:	1200      	asrs	r0, r0, #8
    555c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5560:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    5564:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5566:	05d8      	lsls	r0, r3, #23
    5568:	f894 033d 	ldrb.w	r0, [r4, #829]	; 0x33d

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    556c:	bf54      	ite	pl
    556e:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5570:	23ff      	movmi	r3, #255	; 0xff
    5572:	4298      	cmp	r0, r3
    5574:	f4ff af7d 	bcc.w	5472 <one_sin(LEDStruct&)+0x1de>
    5578:	f04f 0b00 	mov.w	fp, #0
    557c:	e795      	b.n	54aa <one_sin(LEDStruct&)+0x216>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    557e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5582:	b983      	cbnz	r3, 55a6 <one_sin(LEDStruct&)+0x312>
    5584:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5588:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    558a:	7822      	ldrb	r2, [r4, #0]
    558c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    5590:	7862      	ldrb	r2, [r4, #1]
    5592:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    5596:	78a2      	ldrb	r2, [r4, #2]
    5598:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    559c:	3403      	adds	r4, #3
    559e:	42a1      	cmp	r1, r4
    55a0:	f1a3 0303 	sub.w	r3, r3, #3
    55a4:	d1f1      	bne.n	558a <one_sin(LEDStruct&)+0x2f6>
}
    55a6:	b005      	add	sp, #20
    55a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    55ac:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
    55b0:	f894 233c 	ldrb.w	r2, [r4, #828]	; 0x33c
    55b4:	1a9b      	subs	r3, r3, r2
    55b6:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    55ba:	e74d      	b.n	5458 <one_sin(LEDStruct&)+0x1c4>
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    55bc:	2296      	movs	r2, #150	; 0x96
    55be:	f8a4 2338 	strh.w	r2, [r4, #824]	; 0x338
    55c2:	e716      	b.n	53f2 <one_sin(LEDStruct&)+0x15e>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    55c4:	4620      	mov	r0, r4
    55c6:	f7ff fe15 	bl	51f4 <one_sin_update(LEDStruct&)>
    55ca:	e72f      	b.n	542c <one_sin(LEDStruct&)+0x198>
    55cc:	cccccccd 	.word	0xcccccccd
    55d0:	1fff91d1 	.word	0x1fff91d1
    55d4:	1fff8784 	.word	0x1fff8784

000055d8 <fireworks_update(LEDStruct&)>:

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    55d8:	b510      	push	{r4, lr}
	keyboard_update = 0;
	switch (update_var) {
    55da:	4b0f      	ldr	r3, [pc, #60]	; (5618 <fireworks_update(LEDStruct&)+0x40>)
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    55dc:	4a0f      	ldr	r2, [pc, #60]	; (561c <fireworks_update(LEDStruct&)+0x44>)
	switch (update_var) {
    55de:	781b      	ldrb	r3, [r3, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    55e0:	2100      	movs	r1, #0

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    55e2:	b082      	sub	sp, #8
    55e4:	4604      	mov	r4, r0
	keyboard_update = 0;
    55e6:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    55e8:	b98b      	cbnz	r3, 560e <fireworks_update(LEDStruct&)+0x36>
		case 0:	leds.use_overlay = (bool)update_arg;	
    55ea:	4a0d      	ldr	r2, [pc, #52]	; (5620 <fireworks_update(LEDStruct&)+0x48>)
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    55ec:	480d      	ldr	r0, [pc, #52]	; (5624 <fireworks_update(LEDStruct&)+0x4c>)
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:	leds.use_overlay = (bool)update_arg;	
    55ee:	8812      	ldrh	r2, [r2, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    55f0:	f88d 3004 	strb.w	r3, [sp, #4]
    55f4:	1a52      	subs	r2, r2, r1
    55f6:	bf18      	it	ne
    55f8:	2201      	movne	r2, #1
    55fa:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    55fe:	2196      	movs	r1, #150	; 0x96
    5600:	aa01      	add	r2, sp, #4
    5602:	f88d 3005 	strb.w	r3, [sp, #5]
    5606:	f88d 3006 	strb.w	r3, [sp, #6]
    560a:	f004 fe27 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
			break; //a
		default:	break;
	}
	LEDDebug(leds);
    560e:	4620      	mov	r0, r4
    5610:	f7fc fdd0 	bl	21b4 <LEDDebug(LEDStruct&)>
}
    5614:	b002      	add	sp, #8
    5616:	bd10      	pop	{r4, pc}
    5618:	1fff9a18 	.word	0x1fff9a18
    561c:	1fff91d1 	.word	0x1fff91d1
    5620:	1fff90d2 	.word	0x1fff90d2
    5624:	1fff91d8 	.word	0x1fff91d8

00005628 <prepare_for_explosion(LEDStruct&)>:

void prepare_for_explosion(LEDStruct& leds) {
    5628:	b570      	push	{r4, r5, r6, lr}
    562a:	4604      	mov	r4, r0
    562c:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    562e:	4d1b      	ldr	r5, [pc, #108]	; (569c <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    5630:	2002      	movs	r0, #2
    5632:	f005 fda1 	bl	b178 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5636:	882b      	ldrh	r3, [r5, #0]
    5638:	4418      	add	r0, r3
    563a:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    563e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5642:	f243 6319 	movw	r3, #13849	; 0x3619
    5646:	4418      	add	r0, r3
    5648:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    564a:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    564e:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    5652:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5656:	b2d2      	uxtb	r2, r2
    5658:	4403      	add	r3, r0
    565a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    565e:	b29b      	uxth	r3, r3
    5660:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    5662:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    5664:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	LEDDebug(leds);
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5668:	321b      	adds	r2, #27
    566a:	f884 234d 	strb.w	r2, [r4, #845]	; 0x34d
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    566e:	f884 134e 	strb.w	r1, [r4, #846]	; 0x34e
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    5672:	f884 6350 	strb.w	r6, [r4, #848]	; 0x350
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    5676:	f884 634f 	strb.w	r6, [r4, #847]	; 0x34f
	leds.exploded = false;
    567a:	f884 6358 	strb.w	r6, [r4, #856]	; 0x358
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    567e:	4620      	mov	r0, r4
    5680:	aa01      	add	r2, sp, #4
    5682:	2196      	movs	r1, #150	; 0x96
    5684:	802b      	strh	r3, [r5, #0]
    5686:	f88d 6004 	strb.w	r6, [sp, #4]
    568a:	f88d 6005 	strb.w	r6, [sp, #5]
    568e:	f88d 6006 	strb.w	r6, [sp, #6]
    5692:	f004 fde3 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
}
    5696:	b002      	add	sp, #8
    5698:	bd70      	pop	{r4, r5, r6, pc}
    569a:	bf00      	nop
    569c:	1fff8784 	.word	0x1fff8784

000056a0 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    56a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    56a4:	f890 3358 	ldrb.w	r3, [r0, #856]	; 0x358
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    56a8:	b087      	sub	sp, #28
    56aa:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    56ac:	2b00      	cmp	r3, #0
    56ae:	f000 8089 	beq.w	57c4 <fadeup(LEDStruct&)+0x124>
    56b2:	f890 334d 	ldrb.w	r3, [r0, #845]	; 0x34d
    56b6:	9303      	str	r3, [sp, #12]
    56b8:	4606      	mov	r6, r0
    56ba:	4618      	mov	r0, r3
    56bc:	4b5d      	ldr	r3, [pc, #372]	; (5834 <fadeup(LEDStruct&)+0x194>)
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    56c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    56c8:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    56cc:	3419      	adds	r4, #25
    56ce:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56d0:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    56d4:	b2db      	uxtb	r3, r3
    56d6:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    56da:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    56de:	ea4f 2929 	mov.w	r9, r9, asr #8
    56e2:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    56e6:	2301      	movs	r3, #1
    56e8:	fa5f f989 	uxtb.w	r9, r9
    56ec:	f886 3350 	strb.w	r3, [r6, #848]	; 0x350
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    56f0:	f886 9359 	strb.w	r9, [r6, #857]	; 0x359
    56f4:	f008 f894 	bl	d820 <__aeabi_ui2f>
    56f8:	f506 7b56 	add.w	fp, r6, #856	; 0x358
    56fc:	f206 5a74 	addw	sl, r6, #1396	; 0x574
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5700:	465b      	mov	r3, fp
    5702:	f506 6889 	add.w	r8, r6, #1096	; 0x448
    5706:	f206 573b 	addw	r7, r6, #1339	; 0x53b
    570a:	46d3      	mov	fp, sl
    570c:	9001      	str	r0, [sp, #4]
    570e:	f206 6664 	addw	r6, r6, #1636	; 0x664
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5712:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5714:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5716:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    571a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    571e:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5722:	3419      	adds	r4, #25
    5724:	b2a4      	uxth	r4, r4
    5726:	2373      	movs	r3, #115	; 0x73
    5728:	fb03 f004 	mul.w	r0, r3, r4
    572c:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5734:	300a      	adds	r0, #10
    5736:	b280      	uxth	r0, r0
    5738:	f008 f872 	bl	d820 <__aeabi_ui2f>
    573c:	493e      	ldr	r1, [pc, #248]	; (5838 <fadeup(LEDStruct&)+0x198>)
    573e:	f008 f97b 	bl	da38 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5742:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5746:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    574a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    574e:	3319      	adds	r3, #25
    5750:	b29b      	uxth	r3, r3
    5752:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    575a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    575e:	3419      	adds	r4, #25
    5760:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5762:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5766:	b2c9      	uxtb	r1, r1
    5768:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    576c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5770:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    5772:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    5776:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5778:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    577c:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5780:	b2c8      	uxtb	r0, r1
    5782:	f008 f84d 	bl	d820 <__aeabi_ui2f>
    5786:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5788:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    578a:	4a2c      	ldr	r2, [pc, #176]	; (583c <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    578c:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5790:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5792:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5796:	d8be      	bhi.n	5716 <fadeup(LEDStruct&)+0x76>
    5798:	9a03      	ldr	r2, [sp, #12]
    579a:	9e02      	ldr	r6, [sp, #8]
    579c:	4f25      	ldr	r7, [pc, #148]	; (5834 <fadeup(LEDStruct&)+0x194>)
    579e:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    57a2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    57a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    57aa:	18f5      	adds	r5, r6, r3
    57ac:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    57ae:	22ff      	movs	r2, #255	; 0xff
    57b0:	803c      	strh	r4, [r7, #0]
    57b2:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    57b4:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    57b6:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    57b8:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    57ba:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    57bc:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    57be:	b007      	add	sp, #28
    57c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    57c4:	9d02      	ldr	r5, [sp, #8]
    57c6:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    57ca:	f895 134d 	ldrb.w	r1, [r5, #845]	; 0x34d
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57ce:	f895 234e 	ldrb.w	r2, [r5, #846]	; 0x34e
    57d2:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    57d6:	3305      	adds	r3, #5
    57d8:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    57da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    57de:	f885 334f 	strb.w	r3, [r5, #847]	; 0x34f
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    57e2:	4429      	add	r1, r5
    57e4:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57e6:	24ff      	movs	r4, #255	; 0xff
    57e8:	f88d 3016 	strb.w	r3, [sp, #22]
    57ec:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    57f0:	f005 f854 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    57f4:	f895 134d 	ldrb.w	r1, [r5, #845]	; 0x34d
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57f8:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    57fc:	f895 234f 	ldrb.w	r2, [r5, #847]	; 0x34f
    5800:	f88d 3014 	strb.w	r3, [sp, #20]
    5804:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    5808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    580c:	a805      	add	r0, sp, #20
    580e:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5810:	f88d 4015 	strb.w	r4, [sp, #21]
    5814:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5818:	f005 f840 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    581c:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    5820:	2bff      	cmp	r3, #255	; 0xff
    5822:	d1cc      	bne.n	57be <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    5824:	9a02      	ldr	r2, [sp, #8]
    5826:	2301      	movs	r3, #1
    5828:	f882 3358 	strb.w	r3, [r2, #856]	; 0x358
		}
	}
}
    582c:	b007      	add	sp, #28
    582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5832:	bf00      	nop
    5834:	1fff8784 	.word	0x1fff8784
    5838:	42c80000 	.word	0x42c80000
    583c:	437f0000 	.word	0x437f0000

00005840 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5844:	4b65      	ldr	r3, [pc, #404]	; (59dc <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    5846:	4605      	mov	r5, r0
    5848:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    584a:	781a      	ldrb	r2, [r3, #0]
    584c:	2196      	movs	r1, #150	; 0x96
    584e:	f004 fdc7 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5852:	f895 4359 	ldrb.w	r4, [r5, #857]	; 0x359
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    5856:	2600      	movs	r6, #0
    5858:	f885 6758 	strb.w	r6, [r5, #1880]	; 0x758
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    585c:	2c00      	cmp	r4, #0
    585e:	d07e      	beq.n	595e <explosion(LEDStruct&)+0x11e>
    5860:	f8df 9190 	ldr.w	r9, [pc, #400]	; 59f4 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5864:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5868:	e03b      	b.n	58e2 <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    586a:	f8d4 135c 	ldr.w	r1, [r4, #860]	; 0x35c
    586e:	4650      	mov	r0, sl
    5870:	f007 ff26 	bl	d6c0 <__addsf3>
    5874:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5876:	2100      	movs	r1, #0
    5878:	4638      	mov	r0, r7
    587a:	f008 f9c7 	bl	dc0c <__aeabi_fcmplt>
    587e:	4958      	ldr	r1, [pc, #352]	; (59e0 <explosion(LEDStruct&)+0x1a0>)
    5880:	2800      	cmp	r0, #0
    5882:	d168      	bne.n	5956 <explosion(LEDStruct&)+0x116>
    5884:	4638      	mov	r0, r7
    5886:	f008 f9df 	bl	dc48 <__aeabi_fcmpgt>
    588a:	b100      	cbz	r0, 588e <explosion(LEDStruct&)+0x4e>
    588c:	4f54      	ldr	r7, [pc, #336]	; (59e0 <explosion(LEDStruct&)+0x1a0>)
    588e:	f8c4 735c 	str.w	r7, [r4, #860]	; 0x35c
		leds.spark_vel[x] *= gravity;
    5892:	4651      	mov	r1, sl
    5894:	f8d9 0000 	ldr.w	r0, [r9]
    5898:	f008 f81a 	bl	d8d0 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    589c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    58a0:	f8c4 044c 	str.w	r0, [r4, #1100]	; 0x44c
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    58a4:	f8d4 0578 	ldr.w	r0, [r4, #1400]	; 0x578
    58a8:	f008 f812 	bl	d8d0 <__aeabi_fmul>
    58ac:	4601      	mov	r1, r0
    58ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    58b2:	f007 ff03 	bl	d6bc <__aeabi_fsub>
    58b6:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
    58ba:	f008 f809 	bl	d8d0 <__aeabi_fmul>
    58be:	f8c4 0668 	str.w	r0, [r4, #1640]	; 0x668
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    58c2:	f008 f9f1 	bl	dca8 <__aeabi_f2uiz>
    58c6:	f895 3758 	ldrb.w	r3, [r5, #1880]	; 0x758
    58ca:	b2c0      	uxtb	r0, r0
    58cc:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    58ce:	f106 0601 	add.w	r6, r6, #1
    58d2:	f895 3359 	ldrb.w	r3, [r5, #857]	; 0x359
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    58d6:	bf38      	it	cc
    58d8:	f885 0758 	strbcc.w	r0, [r5, #1880]	; 0x758
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    58dc:	b2f6      	uxtb	r6, r6
    58de:	42b3      	cmp	r3, r6
    58e0:	d93b      	bls.n	595a <explosion(LEDStruct&)+0x11a>
    58e2:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    58e6:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
    58ea:	f008 f9b7 	bl	dc5c <__aeabi_f2iz>
    58ee:	4607      	mov	r7, r0
    58f0:	f8d4 0668 	ldr.w	r0, [r4, #1640]	; 0x668
    58f4:	f008 f9d8 	bl	dca8 <__aeabi_f2uiz>
    58f8:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    58fc:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5900:	a901      	add	r1, sp, #4
    5902:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5904:	f88d 3000 	strb.w	r3, [sp]
    5908:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    590c:	f004 ffc6 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5910:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    5914:	1829      	adds	r1, r5, r0
    5916:	5c2b      	ldrb	r3, [r5, r0]
    5918:	f89d 2004 	ldrb.w	r2, [sp, #4]
    591c:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5920:	542b      	strb	r3, [r5, r0]
    5922:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5926:	784a      	ldrb	r2, [r1, #1]
    5928:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    592c:	704a      	strb	r2, [r1, #1]
    592e:	788b      	ldrb	r3, [r1, #2]
    5930:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5934:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5938:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    593a:	708b      	strb	r3, [r1, #2]
    593c:	f892 353c 	ldrb.w	r3, [r2, #1340]	; 0x53c
    5940:	f8d4 a44c 	ldr.w	sl, [r4, #1100]	; 0x44c
    5944:	2b00      	cmp	r3, #0
    5946:	d190      	bne.n	586a <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    5948:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
    594c:	4651      	mov	r1, sl
    594e:	f007 feb5 	bl	d6bc <__aeabi_fsub>
    5952:	4607      	mov	r7, r0
    5954:	e78f      	b.n	5876 <explosion(LEDStruct&)+0x36>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5956:	2700      	movs	r7, #0
    5958:	e799      	b.n	588e <explosion(LEDStruct&)+0x4e>
    595a:	f895 4758 	ldrb.w	r4, [r5, #1880]	; 0x758
    595e:	462a      	mov	r2, r5
    5960:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    5964:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5966:	7819      	ldrb	r1, [r3, #0]
    5968:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    596c:	7859      	ldrb	r1, [r3, #1]
    596e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    5972:	7899      	ldrb	r1, [r3, #2]
    5974:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    5978:	3303      	adds	r3, #3
    597a:	4283      	cmp	r3, r0
    597c:	f1a2 0203 	sub.w	r2, r2, #3
    5980:	d1f1      	bne.n	5966 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    5982:	bb44      	cbnz	r4, 59d6 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5984:	aa01      	add	r2, sp, #4
    5986:	2196      	movs	r1, #150	; 0x96
    5988:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    598a:	f88d 4004 	strb.w	r4, [sp, #4]
    598e:	f88d 4005 	strb.w	r4, [sp, #5]
    5992:	f88d 4006 	strb.w	r4, [sp, #6]
    5996:	f004 fc61 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    599a:	4812      	ldr	r0, [pc, #72]	; (59e4 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    599c:	4c12      	ldr	r4, [pc, #72]	; (59e8 <explosion(LEDStruct&)+0x1a8>)
    599e:	8803      	ldrh	r3, [r0, #0]
    59a0:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    59a2:	4912      	ldr	r1, [pc, #72]	; (59ec <explosion(LEDStruct&)+0x1ac>)
    59a4:	4a12      	ldr	r2, [pc, #72]	; (59f0 <explosion(LEDStruct&)+0x1b0>)
    59a6:	9401      	str	r4, [sp, #4]
    59a8:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    59ac:	8809      	ldrh	r1, [r1, #0]
    59ae:	8812      	ldrh	r2, [r2, #0]
    59b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59b4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59b8:	440a      	add	r2, r1
    59ba:	3319      	adds	r3, #25
    59bc:	b29b      	uxth	r3, r3
    59be:	b292      	uxth	r2, r2
	return ret;
    59c0:	9901      	ldr	r1, [sp, #4]
    59c2:	8003      	strh	r3, [r0, #0]
    59c4:	fb03 f302 	mul.w	r3, r3, r2
    59c8:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    59cc:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    59ce:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    59d2:	f885 2350 	strb.w	r2, [r5, #848]	; 0x350
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    59d6:	b002      	add	sp, #8
    59d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59dc:	1fff8748 	.word	0x1fff8748
    59e0:	42940000 	.word	0x42940000
    59e4:	1fff8784 	.word	0x1fff8784
    59e8:	1ffface8 	.word	0x1ffface8
    59ec:	1fff874e 	.word	0x1fff874e
    59f0:	1fff874c 	.word	0x1fff874c
    59f4:	1fff8754 	.word	0x1fff8754

000059f8 <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    59f8:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    59fa:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
    59fe:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    5a00:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    5a02:	d01c      	beq.n	5a3e <fireworks_render(LEDStruct&)+0x46>
    5a04:	d317      	bcc.n	5a36 <fireworks_render(LEDStruct&)+0x3e>
    5a06:	2b02      	cmp	r3, #2
    5a08:	d113      	bne.n	5a32 <fireworks_render(LEDStruct&)+0x3a>
    5a0a:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5a0c:	aa01      	add	r2, sp, #4
    5a0e:	2196      	movs	r1, #150	; 0x96
    5a10:	4604      	mov	r4, r0
    5a12:	f88d 3004 	strb.w	r3, [sp, #4]
    5a16:	f88d 3005 	strb.w	r3, [sp, #5]
    5a1a:	f88d 3006 	strb.w	r3, [sp, #6]
    5a1e:	f004 fc1d 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5a22:	4a0b      	ldr	r2, [pc, #44]	; (5a50 <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    5a24:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
    5a28:	6812      	ldr	r2, [r2, #0]
    5a2a:	9201      	str	r2, [sp, #4]
	return ret;
    5a2c:	9a01      	ldr	r2, [sp, #4]
    5a2e:	429a      	cmp	r2, r3
    5a30:	d209      	bcs.n	5a46 <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5a32:	b002      	add	sp, #8
    5a34:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    5a36:	f7ff fe33 	bl	56a0 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5a3a:	b002      	add	sp, #8
    5a3c:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    5a3e:	f7ff feff 	bl	5840 <explosion(LEDStruct&)>
			break;
	}
}
    5a42:	b002      	add	sp, #8
    5a44:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    5a46:	4620      	mov	r0, r4
    5a48:	f7ff fdee 	bl	5628 <prepare_for_explosion(LEDStruct&)>
    5a4c:	e7f1      	b.n	5a32 <fireworks_render(LEDStruct&)+0x3a>
    5a4e:	bf00      	nop
    5a50:	1ffface8 	.word	0x1ffface8

00005a54 <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5a56:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5a5a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5a5c:	b9fb      	cbnz	r3, 5a9e <fireworks(LEDStruct&)+0x4a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a5e:	493e      	ldr	r1, [pc, #248]	; (5b58 <fireworks(LEDStruct&)+0x104>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    5a60:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5a64:	880b      	ldrh	r3, [r1, #0]
    5a66:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5a6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5a6e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5a72:	3319      	adds	r3, #25
    5a74:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a76:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a7a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    5a7e:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    5a80:	2616      	movs	r6, #22
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    5a82:	250f      	movs	r5, #15

	leds.current_stage		= WAITING;
    5a84:	2002      	movs	r0, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a86:	800b      	strh	r3, [r1, #0]

	leds.use_overlay		= uo;
    5a88:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    5a8c:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= FIREWORKS;
    5a90:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    5a94:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.current_stage		= WAITING;
    5a98:	f884 0350 	strb.w	r0, [r4, #848]	; 0x350

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    5a9c:	b972      	cbnz	r2, 5abc <fireworks(LEDStruct&)+0x68>
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5a9e:	4b2f      	ldr	r3, [pc, #188]	; (5b5c <fireworks(LEDStruct&)+0x108>)
    5aa0:	781b      	ldrb	r3, [r3, #0]
    5aa2:	b993      	cbnz	r3, 5aca <fireworks(LEDStruct&)+0x76>

	fireworks_render(leds);
    5aa4:	4620      	mov	r0, r4
    5aa6:	f7ff ffa7 	bl	59f8 <fireworks_render(LEDStruct&)>

	if (leds.use_overlay) {
    5aaa:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
    5aae:	b123      	cbz	r3, 5aba <fireworks(LEDStruct&)+0x66>
		if (leds.array_type == CURRENT) { 
    5ab0:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    5ab4:	b16b      	cbz	r3, 5ad2 <fireworks(LEDStruct&)+0x7e>
			fireworks_render(curr_over_leds); 
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
    5ab6:	2b01      	cmp	r3, #1
    5ab8:	d02c      	beq.n	5b14 <fireworks(LEDStruct&)+0xc0>
    5aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    5abc:	4b28      	ldr	r3, [pc, #160]	; (5b60 <fireworks(LEDStruct&)+0x10c>)
    5abe:	f883 0350 	strb.w	r0, [r3, #848]	; 0x350
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5ac2:	4b26      	ldr	r3, [pc, #152]	; (5b5c <fireworks(LEDStruct&)+0x108>)
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d0ec      	beq.n	5aa4 <fireworks(LEDStruct&)+0x50>
    5aca:	4620      	mov	r0, r4
    5acc:	f7ff fd84 	bl	55d8 <fireworks_update(LEDStruct&)>
    5ad0:	e7e8      	b.n	5aa4 <fireworks(LEDStruct&)+0x50>

	fireworks_render(leds);

	if (leds.use_overlay) {
		if (leds.array_type == CURRENT) { 
			fireworks_render(curr_over_leds); 
    5ad2:	4824      	ldr	r0, [pc, #144]	; (5b64 <fireworks(LEDStruct&)+0x110>)
    5ad4:	f7ff ff90 	bl	59f8 <fireworks_render(LEDStruct&)>
    5ad8:	4b22      	ldr	r3, [pc, #136]	; (5b64 <fireworks(LEDStruct&)+0x110>)
    5ada:	4620      	mov	r0, r4
    5adc:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5ae0:	3401      	adds	r4, #1
    5ae2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5ae6:	7819      	ldrb	r1, [r3, #0]
    5ae8:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5aec:	f804 2c01 	strb.w	r2, [r4, #-1]
    5af0:	7841      	ldrb	r1, [r0, #1]
    5af2:	785a      	ldrb	r2, [r3, #1]
    5af4:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    5af8:	7041      	strb	r1, [r0, #1]
    5afa:	7882      	ldrb	r2, [r0, #2]
    5afc:	7899      	ldrb	r1, [r3, #2]
    5afe:	fa82 f251 	uqadd8	r2, r2, r1
    5b02:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5b04:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5b06:	7082      	strb	r2, [r0, #2]
    5b08:	f104 0403 	add.w	r4, r4, #3
    5b0c:	f100 0003 	add.w	r0, r0, #3
    5b10:	d1e7      	bne.n	5ae2 <fireworks(LEDStruct&)+0x8e>
    5b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
			fireworks_render(next_over_leds); 
    5b14:	4812      	ldr	r0, [pc, #72]	; (5b60 <fireworks(LEDStruct&)+0x10c>)
    5b16:	f7ff ff6f 	bl	59f8 <fireworks_render(LEDStruct&)>
    5b1a:	4b11      	ldr	r3, [pc, #68]	; (5b60 <fireworks(LEDStruct&)+0x10c>)
    5b1c:	4620      	mov	r0, r4
    5b1e:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5b22:	3401      	adds	r4, #1
    5b24:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5b28:	7819      	ldrb	r1, [r3, #0]
    5b2a:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5b2e:	f804 2c01 	strb.w	r2, [r4, #-1]
    5b32:	7841      	ldrb	r1, [r0, #1]
    5b34:	785a      	ldrb	r2, [r3, #1]
    5b36:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    5b3a:	7041      	strb	r1, [r0, #1]
    5b3c:	7882      	ldrb	r2, [r0, #2]
    5b3e:	7899      	ldrb	r1, [r3, #2]
    5b40:	fa82 f251 	uqadd8	r2, r2, r1
    5b44:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5b46:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5b48:	7082      	strb	r2, [r0, #2]
    5b4a:	f104 0403 	add.w	r4, r4, #3
    5b4e:	f100 0003 	add.w	r0, r0, #3
    5b52:	d1e7      	bne.n	5b24 <fireworks(LEDStruct&)+0xd0>
    5b54:	e7b1      	b.n	5aba <fireworks(LEDStruct&)+0x66>
    5b56:	bf00      	nop
    5b58:	1fff8784 	.word	0x1fff8784
    5b5c:	1fff91d1 	.word	0x1fff91d1
    5b60:	1fff9a2c 	.word	0x1fff9a2c
    5b64:	1fff91d8 	.word	0x1fff91d8

00005b68 <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5b68:	4b2a      	ldr	r3, [pc, #168]	; (5c14 <two_sin_update(LEDStruct&)+0xac>)
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5b6a:	4a2b      	ldr	r2, [pc, #172]	; (5c18 <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    5b6c:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5b6e:	2100      	movs	r1, #0
    5b70:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5b72:	2b0b      	cmp	r3, #11
    5b74:	d80b      	bhi.n	5b8e <two_sin_update(LEDStruct&)+0x26>
    5b76:	e8df f003 	tbb	[pc, r3]
    5b7a:	1f11      	.short	0x1f11
    5b7c:	332e2924 	.word	0x332e2924
    5b80:	06423d38 	.word	0x06423d38
    5b84:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    5b86:	4b25      	ldr	r3, [pc, #148]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5b88:	881b      	ldrh	r3, [r3, #0]
    5b8a:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    5b8e:	f7fc bb11 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    5b92:	4b22      	ldr	r3, [pc, #136]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5b94:	881b      	ldrh	r3, [r3, #0]
    5b96:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    5b9a:	e7f8      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5b9c:	4b1f      	ldr	r3, [pc, #124]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5b9e:	881b      	ldrh	r3, [r3, #0]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	bf14      	ite	ne
    5ba4:	2301      	movne	r3, #1
    5ba6:	2300      	moveq	r3, #0
    5ba8:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5bac:	bf14      	ite	ne
    5bae:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5bb0:	234b      	moveq	r3, #75	; 0x4b
    5bb2:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
    5bb6:	e7ea      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    5bb8:	4b18      	ldr	r3, [pc, #96]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bba:	881b      	ldrh	r3, [r3, #0]
    5bbc:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5bc0:	e7e5      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    5bc2:	4b16      	ldr	r3, [pc, #88]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bc4:	881b      	ldrh	r3, [r3, #0]
    5bc6:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    5bca:	e7e0      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5bcc:	4b13      	ldr	r3, [pc, #76]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bce:	881b      	ldrh	r3, [r3, #0]
    5bd0:	f880 333c 	strb.w	r3, [r0, #828]	; 0x33c
    5bd4:	e7db      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    5bd6:	4b11      	ldr	r3, [pc, #68]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bd8:	881b      	ldrh	r3, [r3, #0]
    5bda:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    5bde:	e7d6      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5be0:	4b0e      	ldr	r3, [pc, #56]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5be2:	881b      	ldrh	r3, [r3, #0]
    5be4:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
    5be8:	e7d1      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    5bea:	4b0c      	ldr	r3, [pc, #48]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bec:	881b      	ldrh	r3, [r3, #0]
    5bee:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    5bf2:	e7cc      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    5bf4:	4b09      	ldr	r3, [pc, #36]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bf6:	881b      	ldrh	r3, [r3, #0]
    5bf8:	f880 333d 	strb.w	r3, [r0, #829]	; 0x33d
    5bfc:	e7c7      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    5bfe:	4b07      	ldr	r3, [pc, #28]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5c00:	881b      	ldrh	r3, [r3, #0]
    5c02:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    5c06:	e7c2      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    5c08:	4b04      	ldr	r3, [pc, #16]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5c0a:	881b      	ldrh	r3, [r3, #0]
    5c0c:	f880 3348 	strb.w	r3, [r0, #840]	; 0x348
    5c10:	e7bd      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
    5c12:	bf00      	nop
    5c14:	1fff9a18 	.word	0x1fff9a18
    5c18:	1fff91d1 	.word	0x1fff91d1
    5c1c:	1fff90d2 	.word	0x1fff90d2

00005c20 <two_sin(LEDStruct&)>:
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5c24:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5c28:	b083      	sub	sp, #12
    5c2a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	f040 80cb 	bne.w	5dc8 <two_sin(LEDStruct&)+0x1a8>
    5c32:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 6000 <two_sin(LEDStruct&)+0x3e0>
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
    5c36:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5c3a:	f8ba 3000 	ldrh.w	r3, [sl]
    5c3e:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    5c42:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    5c46:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5c4a:	3619      	adds	r6, #25
    5c4c:	b2b6      	uxth	r6, r6
    5c4e:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    5c52:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    5c56:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    5c5a:	f10c 0c19 	add.w	ip, ip, #25
    5c5e:	fa1f fc8c 	uxth.w	ip, ip
    5c62:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    5c66:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    5c6a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5c6e:	f10e 0e19 	add.w	lr, lr, #25
    5c72:	fa1f fe8e 	uxth.w	lr, lr
    5c76:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    5c7a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    5c7e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5c82:	3119      	adds	r1, #25
    5c84:	b289      	uxth	r1, r1
    5c86:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    5c8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    5c8e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5c92:	3719      	adds	r7, #25
    5c94:	b2bf      	uxth	r7, r7
    5c96:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    5c9a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5c9e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5ca2:	3519      	adds	r5, #25
    5ca4:	b2ad      	uxth	r5, r5
    5ca6:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    5caa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    5cae:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5cb2:	3019      	adds	r0, #25
    5cb4:	b280      	uxth	r0, r0
    5cb6:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5cba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5cbe:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5cc2:	3219      	adds	r2, #25
    5cc4:	b292      	uxth	r2, r2
    5cc6:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5cca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5cce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5cd2:	3319      	adds	r3, #25
    5cd4:	b29b      	uxth	r3, r3
    5cd6:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    5cda:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5cde:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    5ce2:	f109 0919 	add.w	r9, r9, #25
    5ce6:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cea:	eb09 2819 	add.w	r8, r9, r9, lsr #8
    5cee:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5cf2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cf6:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cfa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cfe:	b2c9      	uxtb	r1, r1
    5d00:	b2d2      	uxtb	r2, r2
    5d02:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5d06:	b2db      	uxtb	r3, r3
    5d08:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d0c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5d10:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5d18:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    5d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5d20:	1112      	asrs	r2, r2, #4
    5d22:	ea4f 2828 	mov.w	r8, r8, asr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d26:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d2a:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d2c:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d30:	b2ed      	uxtb	r5, r5
    5d32:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d34:	111b      	asrs	r3, r3, #4
    5d36:	f102 0b20 	add.w	fp, r2, #32
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d3a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d3e:	f108 020c 	add.w	r2, r8, #12
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d42:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    5d46:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d4a:	3903      	subs	r1, #3
    5d4c:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5d54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d58:	3320      	adds	r3, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d5a:	f8aa 9000 	strh.w	r9, [sl]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
    5d5e:	f04f 0815 	mov.w	r8, #21

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5d62:	f04f 0901 	mov.w	r9, #1
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
    5d66:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d6a:	fa5f fc8c 	uxtb.w	ip, ip
    5d6e:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d72:	b2c9      	uxtb	r1, r1
    5d74:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d76:	f3c5 2507 	ubfx	r5, r5, #8, #8
    5d7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d7e:	fa5f fb8b 	uxtb.w	fp, fp
    5d82:	b2d2      	uxtb	r2, r2
    5d84:	b2db      	uxtb	r3, r3

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5d86:	f884 922e 	strb.w	r9, [r4, #558]	; 0x22e
	leds.mode_type			= TWO_SIN;
    5d8a:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5d8e:	2e00      	cmp	r6, #0
    5d90:	f040 812b 	bne.w	5fea <two_sin(LEDStruct&)+0x3ca>
	else					 { leds.strip_range = ONE_SIDE; }
    5d94:	264b      	movs	r6, #75	; 0x4b
    5d96:	f8a4 6338 	strh.w	r6, [r4, #824]	; 0x338
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5d9a:	2600      	movs	r6, #0
	leds.use_palette		= 0;
	leds.use_full_range		=