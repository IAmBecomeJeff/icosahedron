
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 bd b2 00 00 75 b2 00 00     ... ........u...
      10:	75 b2 00 00 75 b2 00 00 75 b2 00 00 75 b2 00 00     u...u...u...u...
      20:	75 b2 00 00 75 b2 00 00 75 b2 00 00 bd b2 00 00     u...u...u.......
      30:	bd b2 00 00 75 b2 00 00 e9 c6 00 00 ed c7 00 00     ....u...........
      40:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      50:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      60:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      70:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      80:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      90:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      a0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      b0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      c0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      d0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      e0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
      f0:	bd b2 00 00 c1 ca 00 00 bd b2 00 00 ed cb 00 00     ................
     100:	bd b2 00 00 19 cd 00 00 bd b2 00 00 bd b2 00 00     ................
     110:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     120:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     130:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     140:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     150:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     160:	bd b2 00 00 05 b7 00 00 bd b2 00 00 bd b2 00 00     ................
     170:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     180:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     190:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     1a0:	bd b2 00 00 bd b2 00 00 bd b2 00 00 bd b2 00 00     ................
     1b0:	bd b2 00 00 bd b2 00 00 bd b2 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00b f878 	bl	b2c4 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00b f8cc 	bl	b470 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00b f83d 	bl	b360 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00b f82e 	bl	b360 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00d fcee 	bl	dce8 <__libc_init_array>

	startup_late_hook();
     30c:	f00a ffe0 	bl	b2d0 <startup_late_hook>
	main();
     310:	f00c fa74 	bl	c7fc <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8840 	.word	0x1fff8840
     33c:	0001109c 	.word	0x0001109c
     340:	1fff871c 	.word	0x1fff871c
     344:	1fff8840 	.word	0x1fff8840
     348:	1fffafa8 	.word	0x1fffafa8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e5e6b1b 	.word	0x5e5e6b1b
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8840 	.word	0x1fff8840
     42c:	00000000 	.word	0x00000000
     430:	000110a0 	.word	0x000110a0

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8844 	.word	0x1fff8844
     460:	000110a0 	.word	0x000110a0
     464:	1fff8840 	.word	0x1fff8840
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>:
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
     490:	b430      	push	{r4, r5}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     492:	4d0e      	ldr	r5, [pc, #56]	; (4cc <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]+0x3c>)
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
     494:	f890 4231 	ldrb.w	r4, [r0, #561]	; 0x231
     498:	882b      	ldrh	r3, [r5, #0]
     49a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     49e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     4a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4a6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4aa:	3319      	adds	r3, #25
     4ac:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4ae:	eb03 2213 	add.w	r2, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4b2:	802b      	strh	r3, [r5, #0]
     4b4:	b2d3      	uxtb	r3, r2
     4b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     4ba:	1d22      	adds	r2, r4, #4
     4bc:	eb01 13e3 	add.w	r3, r1, r3, asr #7
     4c0:	f880 2231 	strb.w	r2, [r0, #561]	; 0x231
     4c4:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
}
     4c8:	bc30      	pop	{r4, r5}
     4ca:	4770      	bx	lr
     4cc:	1fff8784 	.word	0x1fff8784

000004d0 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.17]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     4d0:	3980      	subs	r1, #128	; 0x80
     4d2:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     4d4:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     4d6:	004b      	lsls	r3, r1, #1
     4d8:	7844      	ldrb	r4, [r0, #1]
     4da:	7882      	ldrb	r2, [r0, #2]
     4dc:	b2c9      	uxtb	r1, r1
     4de:	b2db      	uxtb	r3, r3
     4e0:	1a61      	subs	r1, r4, r1
     4e2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4e4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ec:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ee:	7083      	strb	r3, [r0, #2]
}
     4f0:	bc10      	pop	{r4}
     4f2:	4770      	bx	lr

000004f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4f4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f6:	4c1d      	ldr	r4, [pc, #116]	; (56c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x78>)
     4f8:	b083      	sub	sp, #12
     4fa:	6824      	ldr	r4, [r4, #0]
     4fc:	9401      	str	r4, [sp, #4]
	return ret;
     4fe:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     500:	28ff      	cmp	r0, #255	; 0xff
     502:	bf98      	it	ls
     504:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     506:	f44f 748c 	mov.w	r4, #280	; 0x118
     50a:	eba5 0303 	sub.w	r3, r5, r3
     50e:	fb04 f303 	mul.w	r3, r4, r3
     512:	bf98      	it	ls
     514:	b280      	uxthls	r0, r0
     516:	fb00 f003 	mul.w	r0, r0, r3
     51a:	f3c0 400e 	ubfx	r0, r0, #16, #15
     51e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     522:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     524:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     528:	d503      	bpl.n	532 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x3e>
     52a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     52e:	3307      	adds	r3, #7
     530:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     532:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     534:	4e0e      	ldr	r6, [pc, #56]	; (570 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     536:	4c0f      	ldr	r4, [pc, #60]	; (574 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     538:	5d76      	ldrb	r6, [r6, r5]
     53a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     53e:	f3c3 0546 	ubfx	r5, r3, #1, #7
     542:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     546:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     548:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     54a:	bf4a      	itet	mi
     54c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     54e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     550:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     552:	1a52      	subs	r2, r2, r1
     554:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     558:	b292      	uxth	r2, r2
     55a:	b2a3      	uxth	r3, r4
     55c:	fb02 3303 	mla	r3, r2, r3, r3
     560:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     564:	b280      	uxth	r0, r0
     566:	b003      	add	sp, #12
     568:	bc70      	pop	{r4, r5, r6}
     56a:	4770      	bx	lr
     56c:	1ffface8 	.word	0x1ffface8
     570:	0000ed30 	.word	0x0000ed30
     574:	0000e56c 	.word	0x0000e56c

00000578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     578:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     57a:	4c1e      	ldr	r4, [pc, #120]	; (5f4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)
     57c:	b083      	sub	sp, #12
     57e:	6824      	ldr	r4, [r4, #0]
     580:	9401      	str	r4, [sp, #4]
	return ret;
     582:	9d01      	ldr	r5, [sp, #4]
     584:	28ff      	cmp	r0, #255	; 0xff
     586:	bf98      	it	ls
     588:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     58a:	f44f 748c 	mov.w	r4, #280	; 0x118
     58e:	eba5 0303 	sub.w	r3, r5, r3
     592:	fb04 f303 	mul.w	r3, r4, r3
     596:	bf98      	it	ls
     598:	b280      	uxthls	r0, r0
     59a:	fb00 f003 	mul.w	r0, r0, r3
     59e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     5a2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     5a6:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5a8:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5aa:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5ae:	d503      	bpl.n	5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x40>
     5b0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5b4:	3307      	adds	r3, #7
     5b6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5b8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     5ba:	4e0f      	ldr	r6, [pc, #60]	; (5f8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5bc:	4c0f      	ldr	r4, [pc, #60]	; (5fc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5be:	5d76      	ldrb	r6, [r6, r5]
     5c0:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     5c4:	f3c3 0546 	ubfx	r5, r3, #1, #7
     5c8:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     5cc:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5ce:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     5d0:	bf4a      	itet	mi
     5d2:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5d4:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     5d6:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     5d8:	1a52      	subs	r2, r2, r1
     5da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     5de:	b292      	uxth	r2, r2
     5e0:	b2a3      	uxth	r3, r4
     5e2:	fb02 3303 	mla	r3, r2, r3, r3
     5e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5ea:	b280      	uxth	r0, r0
     5ec:	b003      	add	sp, #12
     5ee:	bc70      	pop	{r4, r5, r6}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	1ffface8 	.word	0x1ffface8
     5f8:	0000ed30 	.word	0x0000ed30
     5fc:	0000e56c 	.word	0x0000e56c

00000600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>:
    return result;
}

/// beatsin16 generates a 16-bit sine wave at a given BPM,
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     600:	b4f0      	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     602:	4c1b      	ldr	r4, [pc, #108]	; (670 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x70>)
     604:	b082      	sub	sp, #8
     606:	6824      	ldr	r4, [r4, #0]
     608:	9401      	str	r4, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     60a:	28ff      	cmp	r0, #255	; 0xff
	return ret;
     60c:	9e01      	ldr	r6, [sp, #4]
     60e:	bf98      	it	ls
     610:	0200      	lslls	r0, r0, #8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
     612:	f44f 748c 	mov.w	r4, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     616:	bf98      	it	ls
     618:	b280      	uxthls	r0, r0
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
     61a:	fb04 f606 	mul.w	r6, r4, r6
     61e:	fb00 f606 	mul.w	r6, r0, r6
     622:	eb03 4616 	add.w	r6, r3, r6, lsr #16
     626:	b2b6      	uxth	r6, r6
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     628:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     62a:	f3c6 04ca 	ubfx	r4, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     62e:	d503      	bpl.n	638 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x38>
     630:	f5c4 64ff 	rsb	r4, r4, #2040	; 0x7f8
     634:	3407      	adds	r4, #7
     636:	b2a4      	uxth	r4, r4

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     638:	0a20      	lsrs	r0, r4, #8
    uint8_t  m   = slope[section];
     63a:	4d0e      	ldr	r5, [pc, #56]	; (674 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x74>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     63c:	4b0e      	ldr	r3, [pc, #56]	; (678 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]+0x78>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     63e:	5c2f      	ldrb	r7, [r5, r0]
     640:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
     644:	f3c4 0546 	ubfx	r5, r4, #1, #7
     648:	fb07 3405 	mla	r4, r7, r5, r3
     64c:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     64e:	0433      	lsls	r3, r6, #16
     650:	bf48      	it	mi
     652:	4264      	negmi	r4, r4
     654:	b224      	sxth	r4, r4
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     656:	1a52      	subs	r2, r2, r1
     658:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     65c:	b292      	uxth	r2, r2
     65e:	b2a3      	uxth	r3, r4
     660:	fb02 3303 	mla	r3, r2, r3, r3
     664:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     668:	b280      	uxth	r0, r0
     66a:	b002      	add	sp, #8
     66c:	bcf0      	pop	{r4, r5, r6, r7}
     66e:	4770      	bx	lr
     670:	1ffface8 	.word	0x1ffface8
     674:	0000ed30 	.word	0x0000ed30
     678:	0000e56c 	.word	0x0000e56c

0000067c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     67c:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     67e:	4b18      	ldr	r3, [pc, #96]	; (6e0 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x64>)
     680:	b083      	sub	sp, #12
     682:	681b      	ldr	r3, [r3, #0]
     684:	9301      	str	r3, [sp, #4]
	return ret;
     686:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     688:	f44f 738c 	mov.w	r3, #280	; 0x118
     68c:	fb03 f606 	mul.w	r6, r3, r6
     690:	fb00 f006 	mul.w	r0, r0, r6
     694:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     696:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     698:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     69c:	d503      	bpl.n	6a6 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x2a>
     69e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     6a2:	3307      	adds	r3, #7
     6a4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     6a6:	0a18      	lsrs	r0, r3, #8
     6a8:	4d0e      	ldr	r5, [pc, #56]	; (6e4 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x68>)
    uint8_t  m   = slope[section];
     6aa:	4c0f      	ldr	r4, [pc, #60]	; (6e8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     6ac:	5c24      	ldrb	r4, [r4, r0]
     6ae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     6b2:	f3c3 0546 	ubfx	r5, r3, #1, #7
     6b6:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     6ba:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     6bc:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     6be:	bf48      	it	mi
     6c0:	4264      	negmi	r4, r4
     6c2:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     6c4:	1a53      	subs	r3, r2, r1
     6c6:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     6ca:	b29a      	uxth	r2, r3
     6cc:	b2a3      	uxth	r3, r4
     6ce:	fb02 3303 	mla	r3, r2, r3, r3
     6d2:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     6d6:	b280      	uxth	r0, r0
     6d8:	b003      	add	sp, #12
     6da:	bc70      	pop	{r4, r5, r6}
     6dc:	4770      	bx	lr
     6de:	bf00      	nop
     6e0:	1ffface8 	.word	0x1ffface8
     6e4:	0000e56c 	.word	0x0000e56c
     6e8:	0000ed30 	.word	0x0000ed30

000006ec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     6ec:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     6ee:	2101      	movs	r1, #1
     6f0:	4604      	mov	r4, r0
     6f2:	200e      	movs	r0, #14
     6f4:	f00a fe46 	bl	b384 <pinMode>
     6f8:	2007      	movs	r0, #7
     6fa:	2101      	movs	r1, #1
     6fc:	f00a fe42 	bl	b384 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     700:	69a0      	ldr	r0, [r4, #24]
     702:	b158      	cbz	r0, 71c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     704:	6803      	ldr	r3, [r0, #0]
     706:	4a07      	ldr	r2, [pc, #28]	; (724 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     708:	685b      	ldr	r3, [r3, #4]
     70a:	4293      	cmp	r3, r2
     70c:	d107      	bne.n	71e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     70e:	6842      	ldr	r2, [r0, #4]
     710:	7b01      	ldrb	r1, [r0, #12]
     712:	7813      	ldrb	r3, [r2, #0]
     714:	ea23 0301 	bic.w	r3, r3, r1
     718:	7013      	strb	r3, [r2, #0]
     71a:	bd10      	pop	{r4, pc}
     71c:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     722:	4718      	bx	r3
     724:	00000481 	.word	0x00000481

00000728 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     72c:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     72e:	6805      	ldr	r5, [r0, #0]
     730:	f88d 3004 	strb.w	r3, [sp, #4]
     734:	f88d 3005 	strb.w	r3, [sp, #5]
     738:	f88d 3006 	strb.w	r3, [sp, #6]
     73c:	682e      	ldr	r6, [r5, #0]
     73e:	4a37      	ldr	r2, [pc, #220]	; (81c <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     740:	f88d 3008 	strb.w	r3, [sp, #8]
     744:	4296      	cmp	r6, r2
     746:	f88d 3009 	strb.w	r3, [sp, #9]
     74a:	f88d 300a 	strb.w	r3, [sp, #10]
     74e:	d15f      	bne.n	810 <CLEDController::clearLeds(int)+0xe8>
     750:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     752:	9104      	str	r1, [sp, #16]
     754:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     756:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     758:	a801      	add	r0, sp, #4
     75a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     75c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     760:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     764:	f88d 3020 	strb.w	r3, [sp, #32]
     768:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     76a:	d015      	beq.n	798 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     76c:	f88d 301d 	strb.w	r3, [sp, #29]
     770:	f88d 301c 	strb.w	r3, [sp, #28]
     774:	f88d 301b 	strb.w	r3, [sp, #27]
     778:	f88d 301a 	strb.w	r3, [sp, #26]
     77c:	f88d 3019 	strb.w	r3, [sp, #25]
     780:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     784:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     786:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     788:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     78c:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     78e:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     790:	a903      	add	r1, sp, #12
     792:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     794:	b00b      	add	sp, #44	; 0x2c
     796:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     798:	4a21      	ldr	r2, [pc, #132]	; (820 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     79a:	7813      	ldrb	r3, [r2, #0]
     79c:	3301      	adds	r3, #1
     79e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7a2:	f013 0f01 	tst.w	r3, #1
     7a6:	bf14      	ite	ne
     7a8:	2180      	movne	r1, #128	; 0x80
     7aa:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7ac:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     7ae:	079a      	lsls	r2, r3, #30
     7b0:	bf44      	itt	mi
     7b2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     7b6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     7b8:	075b      	lsls	r3, r3, #29
     7ba:	bf48      	it	mi
     7bc:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     7c0:	3110      	adds	r1, #16
     7c2:	2200      	movs	r2, #0
     7c4:	b2c9      	uxtb	r1, r1
     7c6:	f10d 031b 	add.w	r3, sp, #27
     7ca:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ce:	f44f 7e80 	mov.w	lr, #256	; 0x100
     7d2:	b1aa      	cbz	r2, 800 <CLEDController::clearLeds(int)+0xd8>
     7d4:	fb9e f2f2 	sdiv	r2, lr, r2
     7d8:	b2d2      	uxtb	r2, r2
     7da:	1c50      	adds	r0, r2, #1
     7dc:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     7de:	fb00 1501 	mla	r5, r0, r1, r1
     7e2:	122d      	asrs	r5, r5, #8
     7e4:	7018      	strb	r0, [r3, #0]
     7e6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7e8:	b105      	cbz	r5, 7ec <CLEDController::clearLeds(int)+0xc4>
     7ea:	3e01      	subs	r6, #1
     7ec:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7f0:	b100      	cbz	r0, 7f4 <CLEDController::clearLeds(int)+0xcc>
     7f2:	701a      	strb	r2, [r3, #0]
     7f4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7f6:	429f      	cmp	r7, r3
     7f8:	d008      	beq.n	80c <CLEDController::clearLeds(int)+0xe4>
     7fa:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7fc:	2a00      	cmp	r2, #0
     7fe:	d1e9      	bne.n	7d4 <CLEDController::clearLeds(int)+0xac>
     800:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     802:	f803 2c03 	strb.w	r2, [r3, #-3]
     806:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     808:	429f      	cmp	r7, r3
     80a:	d1f6      	bne.n	7fa <CLEDController::clearLeds(int)+0xd2>
     80c:	6825      	ldr	r5, [r4, #0]
     80e:	e7b9      	b.n	784 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     810:	460a      	mov	r2, r1
     812:	ab02      	add	r3, sp, #8
     814:	a901      	add	r1, sp, #4
     816:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     818:	b00b      	add	sp, #44	; 0x2c
     81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     81c:	00000825 	.word	0x00000825
     820:	1fff885c 	.word	0x1fff885c

00000824 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     828:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     82a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     82c:	789b      	ldrb	r3, [r3, #2]
     82e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     830:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     832:	9101      	str	r1, [sp, #4]
     834:	9202      	str	r2, [sp, #8]
     836:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     838:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     83c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     840:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     844:	d016      	beq.n	874 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     846:	2300      	movs	r3, #0
     848:	f88d 3015 	strb.w	r3, [sp, #21]
     84c:	f88d 3014 	strb.w	r3, [sp, #20]
     850:	f88d 3013 	strb.w	r3, [sp, #19]
     854:	f88d 3012 	strb.w	r3, [sp, #18]
     858:	f88d 3011 	strb.w	r3, [sp, #17]
     85c:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     860:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     862:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     864:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     866:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     86a:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     86c:	a901      	add	r1, sp, #4
     86e:	4790      	blx	r2
  }
     870:	b009      	add	sp, #36	; 0x24
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     874:	4a1b      	ldr	r2, [pc, #108]	; (8e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     876:	7813      	ldrb	r3, [r2, #0]
     878:	3301      	adds	r3, #1
     87a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     87e:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     882:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     884:	bf14      	ite	ne
     886:	2280      	movne	r2, #128	; 0x80
     888:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     88a:	0799      	lsls	r1, r3, #30
     88c:	bf44      	itt	mi
     88e:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     892:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     894:	075b      	lsls	r3, r3, #29
     896:	bf48      	it	mi
     898:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     89c:	3210      	adds	r2, #16
     89e:	b2d2      	uxtb	r2, r2
     8a0:	f10d 0313 	add.w	r3, sp, #19
     8a4:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8a8:	f44f 7e80 	mov.w	lr, #256	; 0x100
     8ac:	b1ac      	cbz	r4, 8da <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     8ae:	fb9e f4f4 	sdiv	r4, lr, r4
     8b2:	b2e4      	uxtb	r4, r4
     8b4:	1c61      	adds	r1, r4, #1
     8b6:	b2c9      	uxtb	r1, r1
     8b8:	fb01 2502 	mla	r5, r1, r2, r2
     8bc:	122d      	asrs	r5, r5, #8
     8be:	7019      	strb	r1, [r3, #0]
     8c0:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     8c2:	b105      	cbz	r5, 8c6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     8c4:	3e01      	subs	r6, #1
     8c6:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     8ca:	b101      	cbz	r1, 8ce <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     8cc:	701c      	strb	r4, [r3, #0]
     8ce:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     8d0:	42bb      	cmp	r3, r7
     8d2:	d0c5      	beq.n	860 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     8d4:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8d6:	2c00      	cmp	r4, #0
     8d8:	d1e9      	bne.n	8ae <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     8da:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8dc:	f803 4c03 	strb.w	r4, [r3, #-3]
     8e0:	e7f5      	b.n	8ce <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     8e2:	bf00      	nop
     8e4:	1fff885c 	.word	0x1fff885c

000008e8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ec:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     8ee:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     8f0:	789b      	ldrb	r3, [r3, #2]
     8f2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8f4:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     8f6:	9101      	str	r1, [sp, #4]
     8f8:	9202      	str	r2, [sp, #8]
     8fa:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8fc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     900:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     904:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     908:	d017      	beq.n	93a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     90a:	2300      	movs	r3, #0
     90c:	f88d 3015 	strb.w	r3, [sp, #21]
     910:	f88d 3014 	strb.w	r3, [sp, #20]
     914:	f88d 3013 	strb.w	r3, [sp, #19]
     918:	f88d 3012 	strb.w	r3, [sp, #18]
     91c:	f88d 3011 	strb.w	r3, [sp, #17]
     920:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     924:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     926:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     928:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     92a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     92c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     930:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     932:	a901      	add	r1, sp, #4
     934:	4798      	blx	r3
  }
     936:	b009      	add	sp, #36	; 0x24
     938:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     93a:	4a1b      	ldr	r2, [pc, #108]	; (9a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     93c:	7813      	ldrb	r3, [r2, #0]
     93e:	3301      	adds	r3, #1
     940:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     944:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     948:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     94a:	bf14      	ite	ne
     94c:	2280      	movne	r2, #128	; 0x80
     94e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     950:	0799      	lsls	r1, r3, #30
     952:	bf44      	itt	mi
     954:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     958:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     95a:	075b      	lsls	r3, r3, #29
     95c:	bf48      	it	mi
     95e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     962:	3210      	adds	r2, #16
     964:	b2d2      	uxtb	r2, r2
     966:	f10d 0313 	add.w	r3, sp, #19
     96a:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     96e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     972:	b1ac      	cbz	r4, 9a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     974:	fb9e f4f4 	sdiv	r4, lr, r4
     978:	b2e4      	uxtb	r4, r4
     97a:	1c61      	adds	r1, r4, #1
     97c:	b2c9      	uxtb	r1, r1
     97e:	fb01 2502 	mla	r5, r1, r2, r2
     982:	122d      	asrs	r5, r5, #8
     984:	7019      	strb	r1, [r3, #0]
     986:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     988:	b105      	cbz	r5, 98c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     98a:	3e01      	subs	r6, #1
     98c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     990:	b101      	cbz	r1, 994 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     992:	701c      	strb	r4, [r3, #0]
     994:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     996:	42bb      	cmp	r3, r7
     998:	d0c4      	beq.n	924 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     99a:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     99c:	2c00      	cmp	r4, #0
     99e:	d1e9      	bne.n	974 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     9a0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     9a2:	f803 4c03 	strb.w	r4, [r3, #-3]
     9a6:	e7f5      	b.n	994 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     9a8:	1fff885c 	.word	0x1fff885c

000009ac <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	4604      	mov	r4, r0
     9b0:	4608      	mov	r0, r1
     9b2:	460d      	mov	r5, r1
     9b4:	f00d fa84 	bl	dec0 <strlen>
     9b8:	6823      	ldr	r3, [r4, #0]
     9ba:	4602      	mov	r2, r0
     9bc:	4629      	mov	r1, r5
     9be:	4620      	mov	r0, r4
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     9c6:	4718      	bx	r3

000009c8 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9c8:	b538      	push	{r3, r4, r5, lr}
     9ca:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9cc:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9ce:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     9d0:	f00d fa76 	bl	dec0 <strlen>
     9d4:	6823      	ldr	r3, [r4, #0]
     9d6:	4602      	mov	r2, r0
     9d8:	4629      	mov	r1, r5
     9da:	685b      	ldr	r3, [r3, #4]
     9dc:	4620      	mov	r0, r4
     9de:	4798      	blx	r3
     9e0:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9e2:	4620      	mov	r0, r4
     9e4:	f00b ff12 	bl	c80c <Print::println()>
     9e8:	4428      	add	r0, r5
     9ea:	bd38      	pop	{r3, r4, r5, pc}

000009ec <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9f0:	780d      	ldrb	r5, [r1, #0]
     9f2:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     9f4:	784d      	ldrb	r5, [r1, #1]
     9f6:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     9f8:	7889      	ldrb	r1, [r1, #2]
     9fa:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9fc:	7811      	ldrb	r1, [r2, #0]
     9fe:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     a00:	7851      	ldrb	r1, [r2, #1]
     a02:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     a04:	7892      	ldrb	r2, [r2, #2]
     a06:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a08:	781a      	ldrb	r2, [r3, #0]
     a0a:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     a0c:	785a      	ldrb	r2, [r3, #1]
     a0e:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     a10:	789b      	ldrb	r3, [r3, #2]
     a12:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     a16:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a18:	f89a b000 	ldrb.w	fp, [sl]
     a1c:	f880 b009 	strb.w	fp, [r0, #9]
     a20:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     a24:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     a28:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     a2c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     a2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a30:	9d10      	ldr	r5, [sp, #64]	; 0x40
     a32:	9911      	ldr	r1, [sp, #68]	; 0x44
     a34:	9a12      	ldr	r2, [sp, #72]	; 0x48
     a36:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     a38:	f89a b001 	ldrb.w	fp, [sl, #1]
     a3c:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     a40:	f89a a002 	ldrb.w	sl, [sl, #2]
     a44:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a48:	f899 a000 	ldrb.w	sl, [r9]
     a4c:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     a50:	f899 a001 	ldrb.w	sl, [r9, #1]
     a54:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     a58:	f899 9002 	ldrb.w	r9, [r9, #2]
     a5c:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a60:	f898 9000 	ldrb.w	r9, [r8]
     a64:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     a68:	f898 9001 	ldrb.w	r9, [r8, #1]
     a6c:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     a70:	f898 8002 	ldrb.w	r8, [r8, #2]
     a74:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a78:	f89c 8000 	ldrb.w	r8, [ip]
     a7c:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     a80:	f89c 8001 	ldrb.w	r8, [ip, #1]
     a84:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     a88:	f89c c002 	ldrb.w	ip, [ip, #2]
     a8c:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a90:	f89e c000 	ldrb.w	ip, [lr]
     a94:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     a98:	f89e c001 	ldrb.w	ip, [lr, #1]
     a9c:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     aa0:	f89e e002 	ldrb.w	lr, [lr, #2]
     aa4:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aa8:	f897 e000 	ldrb.w	lr, [r7]
     aac:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     ab0:	f897 e001 	ldrb.w	lr, [r7, #1]
     ab4:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     ab8:	78bf      	ldrb	r7, [r7, #2]
     aba:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     abc:	7837      	ldrb	r7, [r6, #0]
     abe:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     ac0:	7877      	ldrb	r7, [r6, #1]
     ac2:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     ac4:	78b6      	ldrb	r6, [r6, #2]
     ac6:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac8:	782e      	ldrb	r6, [r5, #0]
     aca:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     acc:	786e      	ldrb	r6, [r5, #1]
     ace:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     ad0:	78ad      	ldrb	r5, [r5, #2]
     ad2:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ad6:	780d      	ldrb	r5, [r1, #0]
     ad8:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     adc:	784d      	ldrb	r5, [r1, #1]
     ade:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     ae2:	7889      	ldrb	r1, [r1, #2]
     ae4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ae8:	7811      	ldrb	r1, [r2, #0]
     aea:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     aee:	7851      	ldrb	r1, [r2, #1]
     af0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     af4:	7892      	ldrb	r2, [r2, #2]
     af6:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     afc:	7812      	ldrb	r2, [r2, #0]
     afe:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     b02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     b04:	7852      	ldrb	r2, [r2, #1]
     b06:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     b0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     b0c:	7892      	ldrb	r2, [r2, #2]
     b0e:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b12:	9a14      	ldr	r2, [sp, #80]	; 0x50
     b14:	7812      	ldrb	r2, [r2, #0]
     b16:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
     b1c:	7852      	ldrb	r2, [r2, #1]
     b1e:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     b22:	9a14      	ldr	r2, [sp, #80]	; 0x50
     b24:	7892      	ldrb	r2, [r2, #2]
     b26:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b2a:	781a      	ldrb	r2, [r3, #0]
     b2c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     b30:	785a      	ldrb	r2, [r3, #1]
     b32:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     b36:	789b      	ldrb	r3, [r3, #2]
     b38:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b40 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b44:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b46:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     b48:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b4a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b4e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b50:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b52:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b54:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b56:	d1f8      	bne.n	b4a <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b58:	680b      	ldr	r3, [r1, #0]
     b5a:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     b5c:	ea4f 6813 	mov.w	r8, r3, lsr #24
     b60:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b64:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b68:	f04f 33ff 	mov.w	r3, #4294967295
     b6c:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b6e:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b70:	9305      	str	r3, [sp, #20]
     b72:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b74:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b78:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b7a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     b7e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b82:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b86:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b88:	b2f9      	uxtb	r1, r7
     b8a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b8e:	9103      	str	r1, [sp, #12]
     b90:	b2e9      	uxtb	r1, r5
     b92:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b94:	fa5f f18c 	uxtb.w	r1, ip
     b98:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b9a:	9907      	ldr	r1, [sp, #28]
     b9c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b9e:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ba0:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ba4:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ba8:	d80c      	bhi.n	bc4 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     baa:	9905      	ldr	r1, [sp, #20]
     bac:	458c      	cmp	ip, r1
     bae:	dc07      	bgt.n	bc0 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     bb0:	290f      	cmp	r1, #15
     bb2:	d005      	beq.n	bc0 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     bb4:	3101      	adds	r1, #1
     bb6:	b2c9      	uxtb	r1, r1
     bb8:	428b      	cmp	r3, r1
     bba:	9102      	str	r1, [sp, #8]
     bbc:	bf38      	it	cc
     bbe:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     bc0:	b259      	sxtb	r1, r3
     bc2:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bc4:	a909      	add	r1, sp, #36	; 0x24
     bc6:	9100      	str	r1, [sp, #0]
     bc8:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bca:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     bce:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     bd2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bd6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     bda:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     bde:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     be2:	f009 fb6b 	bl	a2bc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     be6:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     be8:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bec:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     bf0:	46d1      	mov	r9, sl
     bf2:	d1bf      	bne.n	b74 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     bf4:	9806      	ldr	r0, [sp, #24]
     bf6:	b00b      	add	sp, #44	; 0x2c
     bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bfc <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     bfc:	4b48      	ldr	r3, [pc, #288]	; (d20 <updatePaletteIndex(LEDStruct&)+0x124>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	2b00      	cmp	r3, #0
     c02:	f000 808b 	beq.w	d1c <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c0a:	b09b      	sub	sp, #108	; 0x6c
     c0c:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     c10:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     c12:	2300      	movs	r3, #0
     c14:	4a43      	ldr	r2, [pc, #268]	; (d24 <updatePaletteIndex(LEDStruct&)+0x128>)
     c16:	9307      	str	r3, [sp, #28]
     c18:	f8df 910c 	ldr.w	r9, [pc, #268]	; d28 <updatePaletteIndex(LEDStruct&)+0x12c>
     c1c:	9009      	str	r0, [sp, #36]	; 0x24
     c1e:	f200 2327 	addw	r3, r0, #551	; 0x227
     c22:	9208      	str	r2, [sp, #32]
     c24:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     c26:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     c28:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     c2c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c2e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     c30:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c32:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     c34:	d1f8      	bne.n	c28 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c36:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     c3a:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c3c:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c40:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c44:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c46:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     c4a:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     c4e:	2400      	movs	r4, #0
     c50:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c52:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c56:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     c5a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c5e:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     c62:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     c64:	b2f1      	uxtb	r1, r6
     c66:	f3c5 6507 	ubfx	r5, r5, #24, #8
     c6a:	9103      	str	r1, [sp, #12]
     c6c:	b2e9      	uxtb	r1, r5
     c6e:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     c70:	fa5f f18c 	uxtb.w	r1, ip
     c74:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     c76:	9906      	ldr	r1, [sp, #24]
     c78:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c7a:	aa0c      	add	r2, sp, #48	; 0x30
     c7c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     c7e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c82:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c86:	d80c      	bhi.n	ca2 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c88:	9905      	ldr	r1, [sp, #20]
     c8a:	458c      	cmp	ip, r1
     c8c:	dc07      	bgt.n	c9e <updatePaletteIndex(LEDStruct&)+0xa2>
     c8e:	290f      	cmp	r1, #15
     c90:	d005      	beq.n	c9e <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     c92:	3101      	adds	r1, #1
     c94:	b2c9      	uxtb	r1, r1
     c96:	428b      	cmp	r3, r1
     c98:	9102      	str	r1, [sp, #8]
     c9a:	bf38      	it	cc
     c9c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c9e:	b259      	sxtb	r1, r3
     ca0:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ca2:	a90d      	add	r1, sp, #52	; 0x34
     ca4:	9100      	str	r1, [sp, #0]
     ca6:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ca8:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     cac:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     cb0:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cb4:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     cb8:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     cbc:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     cc0:	f009 fafc 	bl	a2bc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     cc4:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cc6:	46d3      	mov	fp, sl
        g = rhs.g;
     cc8:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ccc:	f8dd 8010 	ldr.w	r8, [sp, #16]
     cd0:	d1bf      	bne.n	c52 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     cd4:	aa0e      	add	r2, sp, #56	; 0x38
     cd6:	4293      	cmp	r3, r2
     cd8:	d018      	beq.n	d0c <updatePaletteIndex(LEDStruct&)+0x110>
     cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
     cdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     cde:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     ce2:	e001      	b.n	ce8 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     ce4:	42a3      	cmp	r3, r4
     ce6:	d011      	beq.n	d0c <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     ce8:	f812 1b01 	ldrb.w	r1, [r2], #1
     cec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     cf0:	4288      	cmp	r0, r1
     cf2:	d0f7      	beq.n	ce4 <updatePaletteIndex(LEDStruct&)+0xe8>
     cf4:	4b0a      	ldr	r3, [pc, #40]	; (d20 <updatePaletteIndex(LEDStruct&)+0x124>)
     cf6:	9a07      	ldr	r2, [sp, #28]
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	3201      	adds	r2, #1
     cfc:	4293      	cmp	r3, r2
     cfe:	9207      	str	r2, [sp, #28]
     d00:	dd09      	ble.n	d16 <updatePaletteIndex(LEDStruct&)+0x11a>
     d02:	9b08      	ldr	r3, [sp, #32]
     d04:	f853 9f04 	ldr.w	r9, [r3, #4]!
     d08:	9308      	str	r3, [sp, #32]
     d0a:	e78c      	b.n	c26 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d0e:	f89d 201c 	ldrb.w	r2, [sp, #28]
     d12:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     d16:	b01b      	add	sp, #108	; 0x6c
     d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d1c:	4770      	bx	lr
     d1e:	bf00      	nop
     d20:	1fff8750 	.word	0x1fff8750
     d24:	0000eb18 	.word	0x0000eb18
     d28:	000108c8 	.word	0x000108c8

00000d2c <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d30:	4d42      	ldr	r5, [pc, #264]	; (e3c <initialize()+0x110>)
		}
	}
}

// Initialization function
void initialize() {
     d32:	b082      	sub	sp, #8
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d34:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     d36:	2400      	movs	r4, #0
     d38:	4628      	mov	r0, r5
     d3a:	2196      	movs	r1, #150	; 0x96
     d3c:	f88d 4004 	strb.w	r4, [sp, #4]
     d40:	f88d 4005 	strb.w	r4, [sp, #5]
     d44:	f88d 4006 	strb.w	r4, [sp, #6]
     d48:	f009 fa88 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     d4c:	493c      	ldr	r1, [pc, #240]	; (e40 <initialize()+0x114>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     d4e:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     d52:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     d56:	f7ff fef3 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     d5a:	493a      	ldr	r1, [pc, #232]	; (e44 <initialize()+0x118>)
     d5c:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     d60:	f7ff feee 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     d64:	4628      	mov	r0, r5
     d66:	f7ff ff49 	bl	bfc <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     d6a:	4b37      	ldr	r3, [pc, #220]	; (e48 <initialize()+0x11c>)
     d6c:	4a37      	ldr	r2, [pc, #220]	; (e4c <initialize()+0x120>)
     d6e:	7818      	ldrb	r0, [r3, #0]
     d70:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     d74:	4623      	mov	r3, r4
     d76:	e001      	b.n	d7c <initialize()+0x50>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     d78:	2b1d      	cmp	r3, #29
     d7a:	d008      	beq.n	d8e <initialize()+0x62>
		if (leds.mode_name == ModeList[i]) {
     d7c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     d80:	4281      	cmp	r1, r0
     d82:	b2dc      	uxtb	r4, r3
     d84:	f103 0301 	add.w	r3, r3, #1
     d88:	d1f6      	bne.n	d78 <initialize()+0x4c>
			leds.mode_number = i;
     d8a:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d8e:	4e30      	ldr	r6, [pc, #192]	; (e50 <initialize()+0x124>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; e64 <initialize()+0x138>
	curr_over_leds.array_type		= CURR_OVERLAY;
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d94:	4f2f      	ldr	r7, [pc, #188]	; (e54 <initialize()+0x128>)
     d96:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d98:	aa01      	add	r2, sp, #4
     d9a:	4630      	mov	r0, r6
     d9c:	2196      	movs	r1, #150	; 0x96
     d9e:	f88d 4004 	strb.w	r4, [sp, #4]
     da2:	f88d 4005 	strb.w	r4, [sp, #5]
     da6:	f88d 4006 	strb.w	r4, [sp, #6]
     daa:	f009 fa57 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     dae:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     db0:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     db4:	4928      	ldr	r1, [pc, #160]	; (e58 <initialize()+0x12c>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     db6:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     dba:	f7ff fec1 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     dbe:	4927      	ldr	r1, [pc, #156]	; (e5c <initialize()+0x130>)
     dc0:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     dc4:	f7ff febc 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     dc8:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     dcc:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     dd0:	4630      	mov	r0, r6
     dd2:	f7ff ff13 	bl	bfc <updatePaletteIndex(LEDStruct&)>

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     dd6:	aa01      	add	r2, sp, #4
     dd8:	4640      	mov	r0, r8
     dda:	2196      	movs	r1, #150	; 0x96
     ddc:	f88d 4004 	strb.w	r4, [sp, #4]
     de0:	f88d 4005 	strb.w	r4, [sp, #5]
     de4:	f88d 4006 	strb.w	r4, [sp, #6]
     de8:	f009 fa38 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
     dec:	2302      	movs	r3, #2
	curr_over_leds.current_palette	= cequal_gp;
     dee:	f508 70e4 	add.w	r0, r8, #456	; 0x1c8
     df2:	491b      	ldr	r1, [pc, #108]	; (e60 <initialize()+0x134>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_over_leds.array_type		= CURR_OVERLAY;
     df4:	f888 31c6 	strb.w	r3, [r8, #454]	; 0x1c6
	curr_over_leds.current_palette	= cequal_gp;
     df8:	f7ff fea2 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	curr_over_leds.target_palette	= cequal_gp;
     dfc:	f508 70fc 	add.w	r0, r8, #504	; 0x1f8
     e00:	4917      	ldr	r1, [pc, #92]	; (e60 <initialize()+0x134>)
     e02:	f7ff fe9d 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     e06:	aa01      	add	r2, sp, #4
     e08:	4638      	mov	r0, r7
     e0a:	2196      	movs	r1, #150	; 0x96
     e0c:	f88d 4004 	strb.w	r4, [sp, #4]
     e10:	f88d 4005 	strb.w	r4, [sp, #5]
     e14:	f88d 4006 	strb.w	r4, [sp, #6]
     e18:	f009 fa20 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
     e1c:	2303      	movs	r3, #3
	next_over_leds.current_palette = cequal_gp;
     e1e:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     e22:	490f      	ldr	r1, [pc, #60]	; (e60 <initialize()+0x134>)
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	next_over_leds.array_type = NEXT_OVERLAY;
     e24:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	next_over_leds.current_palette = cequal_gp;
     e28:	f7ff fe8a 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
	next_over_leds.target_palette = cequal_gp;
     e2c:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     e30:	490b      	ldr	r1, [pc, #44]	; (e60 <initialize()+0x134>)
     e32:	f7ff fe85 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
}
     e36:	b002      	add	sp, #8
     e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e3c:	1fffa26c 	.word	0x1fffa26c
     e40:	00010ca4 	.word	0x00010ca4
     e44:	0000ec8c 	.word	0x0000ec8c
     e48:	1fff8749 	.word	0x1fff8749
     e4c:	1fff8723 	.word	0x1fff8723
     e50:	1fff8884 	.word	0x1fff8884
     e54:	1fff9a2c 	.word	0x1fff9a2c
     e58:	00010aa8 	.word	0x00010aa8
     e5c:	00010a68 	.word	0x00010a68
     e60:	00010b1c 	.word	0x00010b1c
     e64:	1fff91d8 	.word	0x1fff91d8

00000e68 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e68:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e6a:	2112      	movs	r1, #18
     e6c:	b082      	sub	sp, #8
     e6e:	4834      	ldr	r0, [pc, #208]	; (f40 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e70:	4c34      	ldr	r4, [pc, #208]	; (f44 <global_debug()+0xdc>)
     e72:	f00b fac7 	bl	c404 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e76:	4b34      	ldr	r3, [pc, #208]	; (f48 <global_debug()+0xe0>)
     e78:	4620      	mov	r0, r4
     e7a:	7819      	ldrb	r1, [r3, #0]
     e7c:	f00b fd16 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e80:	4620      	mov	r0, r4
     e82:	f00b fcc3 	bl	c80c <Print::println()>
     e86:	2111      	movs	r1, #17
     e88:	4830      	ldr	r0, [pc, #192]	; (f4c <global_debug()+0xe4>)
     e8a:	f00b fabb 	bl	c404 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e8e:	4b30      	ldr	r3, [pc, #192]	; (f50 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e90:	4620      	mov	r0, r4
     e92:	7819      	ldrb	r1, [r3, #0]
     e94:	f00b fd0a 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e98:	4620      	mov	r0, r4
     e9a:	f00b fcb7 	bl	c80c <Print::println()>
     e9e:	2115      	movs	r1, #21
     ea0:	482c      	ldr	r0, [pc, #176]	; (f54 <global_debug()+0xec>)
     ea2:	f00b faaf 	bl	c404 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     ea6:	4b2c      	ldr	r3, [pc, #176]	; (f58 <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea8:	4620      	mov	r0, r4
     eaa:	7819      	ldrb	r1, [r3, #0]
     eac:	f00b fcfe 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     eb0:	4620      	mov	r0, r4
     eb2:	f00b fcab 	bl	c80c <Print::println()>
     eb6:	2111      	movs	r1, #17
     eb8:	4828      	ldr	r0, [pc, #160]	; (f5c <global_debug()+0xf4>)
     eba:	f00b faa3 	bl	c404 <usb_serial_write>
	Serial.print("(T) Mode Timer:\t\t");
	Serial.println(mode_change_time);
     ebe:	4b28      	ldr	r3, [pc, #160]	; (f60 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ec0:	4620      	mov	r0, r4
     ec2:	8819      	ldrh	r1, [r3, #0]
     ec4:	f00b fcf2 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ec8:	4620      	mov	r0, r4
     eca:	f00b fc9f 	bl	c80c <Print::println()>
     ece:	2114      	movs	r1, #20
     ed0:	4824      	ldr	r0, [pc, #144]	; (f64 <global_debug()+0xfc>)
     ed2:	f00b fa97 	bl	c404 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     ed6:	4b24      	ldr	r3, [pc, #144]	; (f68 <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ed8:	4620      	mov	r0, r4
     eda:	8819      	ldrh	r1, [r3, #0]
     edc:	f00b fce6 	bl	c8ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ee0:	4620      	mov	r0, r4
     ee2:	f00b fc93 	bl	c80c <Print::println()>
     ee6:	210f      	movs	r1, #15
     ee8:	4820      	ldr	r0, [pc, #128]	; (f6c <global_debug()+0x104>)
     eea:	f00b fa8b 	bl	c404 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     eee:	4b20      	ldr	r3, [pc, #128]	; (f70 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ef0:	4620      	mov	r0, r4
     ef2:	8819      	ldrh	r1, [r3, #0]
     ef4:	f00b fcda 	bl	c8ac <Print::print(long)>
     ef8:	2102      	movs	r1, #2
     efa:	481e      	ldr	r0, [pc, #120]	; (f74 <global_debug()+0x10c>)
     efc:	f00b fa82 	bl	c404 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     f00:	4b1d      	ldr	r3, [pc, #116]	; (f78 <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     f02:	220a      	movs	r2, #10
     f04:	7819      	ldrb	r1, [r3, #0]
     f06:	4620      	mov	r0, r4
     f08:	2300      	movs	r3, #0
     f0a:	f00b fc8f 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f0e:	2101      	movs	r1, #1
     f10:	481a      	ldr	r0, [pc, #104]	; (f7c <global_debug()+0x114>)
     f12:	f00b fa77 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     f16:	4620      	mov	r0, r4
     f18:	f00b fc78 	bl	c80c <Print::println()>
     f1c:	210e      	movs	r1, #14
     f1e:	4818      	ldr	r0, [pc, #96]	; (f80 <global_debug()+0x118>)
     f20:	f00b fa70 	bl	c404 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f24:	4b17      	ldr	r3, [pc, #92]	; (f84 <global_debug()+0x11c>)
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	9301      	str	r3, [sp, #4]
	return ret;
     f2a:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f2c:	2300      	movs	r3, #0
     f2e:	220a      	movs	r2, #10
     f30:	4620      	mov	r0, r4
     f32:	f00b fc7b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     f36:	4620      	mov	r0, r4
     f38:	f00b fc68 	bl	c80c <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f3c:	b002      	add	sp, #8
     f3e:	bd10      	pop	{r4, pc}
     f40:	0000f1fc 	.word	0x0000f1fc
     f44:	1fff878c 	.word	0x1fff878c
     f48:	1fff8783 	.word	0x1fff8783
     f4c:	0000f210 	.word	0x0000f210
     f50:	1fff874a 	.word	0x1fff874a
     f54:	0000f224 	.word	0x0000f224
     f58:	1fff8758 	.word	0x1fff8758
     f5c:	0000f23c 	.word	0x0000f23c
     f60:	1fff871c 	.word	0x1fff871c
     f64:	0000f250 	.word	0x0000f250
     f68:	1fff8880 	.word	0x1fff8880
     f6c:	0000f268 	.word	0x0000f268
     f70:	1fff91d2 	.word	0x1fff91d2
     f74:	0000f278 	.word	0x0000f278
     f78:	1fff9131 	.word	0x1fff9131
     f7c:	0000f27c 	.word	0x0000f27c
     f80:	0000f280 	.word	0x0000f280
     f84:	1ffface8 	.word	0x1ffface8

00000f88 <begin_transition()>:
     f88:	491e      	ldr	r1, [pc, #120]	; (1004 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f8a:	481f      	ldr	r0, [pc, #124]	; (1008 <begin_transition()+0x80>)
     f8c:	880b      	ldrh	r3, [r1, #0]
     f8e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f96:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f9a:	3319      	adds	r3, #25
     f9c:	b29b      	uxth	r3, r3
     f9e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     fa2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     fa6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     faa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fae:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fb0:	b2db      	uxtb	r3, r3
     fb2:	b292      	uxth	r2, r2
     fb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     fb8:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fba:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     fbc:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     fc0:	4e12      	ldr	r6, [pc, #72]	; (100c <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     fc2:	4d13      	ldr	r5, [pc, #76]	; (1010 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fc4:	5cf3      	ldrb	r3, [r6, r3]
     fc6:	4c13      	ldr	r4, [pc, #76]	; (1014 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fc8:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     fca:	b2ff      	uxtb	r7, r7
     fcc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fd0:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fd2:	123f      	asrs	r7, r7, #8
     fd4:	3703      	adds	r7, #3
	switch (transition_type) {
     fd6:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fd8:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fda:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fdc:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fde:	d00c      	beq.n	ffa <begin_transition()+0x72>
     fe0:	d306      	bcc.n	ff0 <begin_transition()+0x68>
     fe2:	2b02      	cmp	r3, #2
     fe4:	d102      	bne.n	fec <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <begin_transition()+0x90>)
     fe8:	2200      	movs	r2, #0
     fea:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fec:	bcf0      	pop	{r4, r5, r6, r7}
     fee:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     ff0:	4b0a      	ldr	r3, [pc, #40]	; (101c <begin_transition()+0x94>)
     ff2:	2200      	movs	r2, #0
     ff4:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     ff6:	bcf0      	pop	{r4, r5, r6, r7}
     ff8:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     ffa:	4b07      	ldr	r3, [pc, #28]	; (1018 <begin_transition()+0x90>)
     ffc:	224a      	movs	r2, #74	; 0x4a
     ffe:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
    1000:	bcf0      	pop	{r4, r5, r6, r7}
    1002:	4770      	bx	lr
    1004:	1fff8784 	.word	0x1fff8784
    1008:	1fff90d0 	.word	0x1fff90d0
    100c:	1fff8720 	.word	0x1fff8720
    1010:	1fff9a19 	.word	0x1fff9a19
    1014:	1fff90dc 	.word	0x1fff90dc
    1018:	1fff910c 	.word	0x1fff910c
    101c:	1fff8882 	.word	0x1fff8882

00001020 <LEDStruct::operator=(LEDStruct const&)>:
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    1020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1022:	1cca      	adds	r2, r1, #3
    1024:	4604      	mov	r4, r0
    1026:	1cc3      	adds	r3, r0, #3
    1028:	460d      	mov	r5, r1
    102a:	f200 10c5 	addw	r0, r0, #453	; 0x1c5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    102e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    1032:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    1036:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    103a:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    103e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    1042:	f803 1c01 	strb.w	r1, [r3, #-1]
    1046:	3303      	adds	r3, #3
    1048:	4298      	cmp	r0, r3
    104a:	f102 0203 	add.w	r2, r2, #3
    104e:	d1ee      	bne.n	102e <LEDStruct::operator=(LEDStruct const&)+0xe>
    1050:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    1054:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
    1058:	f895 31c3 	ldrb.w	r3, [r5, #451]	; 0x1c3
    105c:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
    1060:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    1064:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
    1068:	f895 11c5 	ldrb.w	r1, [r5, #453]	; 0x1c5
    106c:	f895 21c6 	ldrb.w	r2, [r5, #454]	; 0x1c6
    1070:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
    1074:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
    1078:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
    107c:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1080:	2230      	movs	r2, #48	; 0x30
    1082:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
    1086:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    108a:	f00c fe55 	bl	dd38 <memmove>
    108e:	2230      	movs	r2, #48	; 0x30
    1090:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    1094:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    1098:	f00c fe4e 	bl	dd38 <memmove>
    109c:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
    10a0:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    10a4:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
    10a8:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    10ac:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
    10b0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    10b4:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
    10b8:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
    10bc:	f895 122c 	ldrb.w	r1, [r5, #556]	; 0x22c
    10c0:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    10c4:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    10c8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    10cc:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    10d0:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
    10d4:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    10d8:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    10dc:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    10e0:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    10e4:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    10e8:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
    10ec:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
    10f0:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    10f4:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    10f8:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    10fc:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
    1100:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
    1104:	f895 1234 	ldrb.w	r1, [r5, #564]	; 0x234
    1108:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    110c:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    1110:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    1114:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    1118:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    111c:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
    1120:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    1124:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
    1128:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    112c:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
    1130:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    1134:	f205 223e 	addw	r2, r5, #574	; 0x23e
    1138:	f204 233e 	addw	r3, r4, #574	; 0x23e
    113c:	f204 207a 	addw	r0, r4, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1140:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    1144:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    1148:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    114c:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    1150:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    1154:	f803 1c01 	strb.w	r1, [r3, #-1]
    1158:	3303      	adds	r3, #3
    115a:	4298      	cmp	r0, r3
    115c:	f102 0203 	add.w	r2, r2, #3
    1160:	d1ee      	bne.n	1140 <LEDStruct::operator=(LEDStruct const&)+0x120>
    1162:	f895 3277 	ldrb.w	r3, [r5, #631]	; 0x277
    1166:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
    116a:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
    116e:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    1172:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
    1176:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    117a:	f895 327a 	ldrb.w	r3, [r5, #634]	; 0x27a
    117e:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    1182:	f895 327b 	ldrb.w	r3, [r5, #635]	; 0x27b
    1186:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    118a:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    118e:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    1192:	f895 327d 	ldrb.w	r3, [r5, #637]	; 0x27d
    1196:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    119a:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
    119e:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    11a2:	f895 327f 	ldrb.w	r3, [r5, #639]	; 0x27f
    11a6:	f884 327f 	strb.w	r3, [r4, #639]	; 0x27f
    11aa:	f205 227f 	addw	r2, r5, #639	; 0x27f
    11ae:	f504 7320 	add.w	r3, r4, #640	; 0x280
    11b2:	f204 20cb 	addw	r0, r4, #715	; 0x2cb
    11b6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11ba:	f803 1b01 	strb.w	r1, [r3], #1
    11be:	4283      	cmp	r3, r0
    11c0:	d1f9      	bne.n	11b6 <LEDStruct::operator=(LEDStruct const&)+0x196>
    11c2:	f205 22ca 	addw	r2, r5, #714	; 0x2ca
    11c6:	f204 3016 	addw	r0, r4, #790	; 0x316
    11ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11ce:	f803 1b01 	strb.w	r1, [r3], #1
    11d2:	4283      	cmp	r3, r0
    11d4:	d1f9      	bne.n	11ca <LEDStruct::operator=(LEDStruct const&)+0x1aa>
    11d6:	f895 0316 	ldrb.w	r0, [r5, #790]	; 0x316
    11da:	f8b5 1318 	ldrh.w	r1, [r5, #792]	; 0x318
    11de:	f8b5 231a 	ldrh.w	r2, [r5, #794]	; 0x31a
    11e2:	f8b5 331c 	ldrh.w	r3, [r5, #796]	; 0x31c
    11e6:	f8a4 331c 	strh.w	r3, [r4, #796]	; 0x31c
    11ea:	f884 0316 	strb.w	r0, [r4, #790]	; 0x316
    11ee:	f8a4 1318 	strh.w	r1, [r4, #792]	; 0x318
    11f2:	f8a4 231a 	strh.w	r2, [r4, #794]	; 0x31a
    11f6:	f895 331e 	ldrb.w	r3, [r5, #798]	; 0x31e
    11fa:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
    11fe:	f895 331f 	ldrb.w	r3, [r5, #799]	; 0x31f
    1202:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
    1206:	f895 3320 	ldrb.w	r3, [r5, #800]	; 0x320
    120a:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
    120e:	f895 3321 	ldrb.w	r3, [r5, #801]	; 0x321
    1212:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
    1216:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    121a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
    121e:	f895 3323 	ldrb.w	r3, [r5, #803]	; 0x323
    1222:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
    1226:	f8b5 0328 	ldrh.w	r0, [r5, #808]	; 0x328
    122a:	f8b5 132a 	ldrh.w	r1, [r5, #810]	; 0x32a
    122e:	f8b5 232c 	ldrh.w	r2, [r5, #812]	; 0x32c
    1232:	f8b5 332e 	ldrh.w	r3, [r5, #814]	; 0x32e
    1236:	f8b5 7324 	ldrh.w	r7, [r5, #804]	; 0x324
    123a:	f8b5 6326 	ldrh.w	r6, [r5, #806]	; 0x326
    123e:	f8a4 6326 	strh.w	r6, [r4, #806]	; 0x326
    1242:	f8a4 0328 	strh.w	r0, [r4, #808]	; 0x328
    1246:	f8a4 132a 	strh.w	r1, [r4, #810]	; 0x32a
    124a:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c
    124e:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    1252:	f8a4 7324 	strh.w	r7, [r4, #804]	; 0x324
    1256:	f8b5 6330 	ldrh.w	r6, [r5, #816]	; 0x330
    125a:	f8b5 1334 	ldrh.w	r1, [r5, #820]	; 0x334
    125e:	f8b5 2336 	ldrh.w	r2, [r5, #822]	; 0x336
    1262:	f8b5 3338 	ldrh.w	r3, [r5, #824]	; 0x338
    1266:	f8b5 0332 	ldrh.w	r0, [r5, #818]	; 0x332
    126a:	f8a4 0332 	strh.w	r0, [r4, #818]	; 0x332
    126e:	f8a4 1334 	strh.w	r1, [r4, #820]	; 0x334
    1272:	f8a4 2336 	strh.w	r2, [r4, #822]	; 0x336
    1276:	f8a4 6330 	strh.w	r6, [r4, #816]	; 0x330
    127a:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
    127e:	f895 333a 	ldrb.w	r3, [r5, #826]	; 0x33a
    1282:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
    1286:	f895 333b 	ldrb.w	r3, [r5, #827]	; 0x33b
    128a:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
    128e:	f895 333c 	ldrb.w	r3, [r5, #828]	; 0x33c
    1292:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
    1296:	f895 333d 	ldrb.w	r3, [r5, #829]	; 0x33d
    129a:	f884 333d 	strb.w	r3, [r4, #829]	; 0x33d
    129e:	f895 333e 	ldrb.w	r3, [r5, #830]	; 0x33e
    12a2:	f884 333e 	strb.w	r3, [r4, #830]	; 0x33e
    12a6:	f895 333f 	ldrb.w	r3, [r5, #831]	; 0x33f
    12aa:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
    12ae:	f895 3340 	ldrb.w	r3, [r5, #832]	; 0x340
    12b2:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
    12b6:	f895 3341 	ldrb.w	r3, [r5, #833]	; 0x341
    12ba:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
    12be:	f895 3342 	ldrb.w	r3, [r5, #834]	; 0x342
    12c2:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    12c6:	f895 3343 	ldrb.w	r3, [r5, #835]	; 0x343
    12ca:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
    12ce:	f895 3344 	ldrb.w	r3, [r5, #836]	; 0x344
    12d2:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
    12d6:	f895 3345 	ldrb.w	r3, [r5, #837]	; 0x345
    12da:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    12de:	f895 3346 	ldrb.w	r3, [r5, #838]	; 0x346
    12e2:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    12e6:	f895 3347 	ldrb.w	r3, [r5, #839]	; 0x347
    12ea:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
    12ee:	f895 3348 	ldrb.w	r3, [r5, #840]	; 0x348
    12f2:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    12f6:	f895 3349 	ldrb.w	r3, [r5, #841]	; 0x349
    12fa:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
    12fe:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    1302:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    1306:	f895 334b 	ldrb.w	r3, [r5, #843]	; 0x34b
    130a:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    130e:	f895 334c 	ldrb.w	r3, [r5, #844]	; 0x34c
    1312:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    1316:	f895 334d 	ldrb.w	r3, [r5, #845]	; 0x34d
    131a:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    131e:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    1322:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    1326:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    132a:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    132e:	f895 1350 	ldrb.w	r1, [r5, #848]	; 0x350
    1332:	f8d5 2354 	ldr.w	r2, [r5, #852]	; 0x354
    1336:	f895 3358 	ldrb.w	r3, [r5, #856]	; 0x358
    133a:	f884 3358 	strb.w	r3, [r4, #856]	; 0x358
    133e:	f884 1350 	strb.w	r1, [r4, #848]	; 0x350
    1342:	f8c4 2354 	str.w	r2, [r4, #852]	; 0x354
    1346:	f895 3359 	ldrb.w	r3, [r5, #857]	; 0x359
    134a:	f884 3359 	strb.w	r3, [r4, #857]	; 0x359
    134e:	f504 7257 	add.w	r2, r4, #860	; 0x35c
    1352:	f505 7156 	add.w	r1, r5, #856	; 0x358
    1356:	f204 434c 	addw	r3, r4, #1100	; 0x44c
    135a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    135e:	f842 0b04 	str.w	r0, [r2], #4
    1362:	4293      	cmp	r3, r2
    1364:	d1f9      	bne.n	135a <LEDStruct::operator=(LEDStruct const&)+0x33a>
    1366:	f505 6289 	add.w	r2, r5, #1096	; 0x448
    136a:	f204 503c 	addw	r0, r4, #1340	; 0x53c
    136e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1372:	f843 1b04 	str.w	r1, [r3], #4
    1376:	4283      	cmp	r3, r0
    1378:	d1f9      	bne.n	136e <LEDStruct::operator=(LEDStruct const&)+0x34e>
    137a:	f205 523b 	addw	r2, r5, #1339	; 0x53b
    137e:	f504 60af 	add.w	r0, r4, #1400	; 0x578
    1382:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1386:	f803 1b01 	strb.w	r1, [r3], #1
    138a:	4283      	cmp	r3, r0
    138c:	d1f9      	bne.n	1382 <LEDStruct::operator=(LEDStruct const&)+0x362>
    138e:	f205 5174 	addw	r1, r5, #1396	; 0x574
    1392:	f504 62cd 	add.w	r2, r4, #1640	; 0x668
    1396:	f851 0f04 	ldr.w	r0, [r1, #4]!
    139a:	f843 0b04 	str.w	r0, [r3], #4
    139e:	429a      	cmp	r2, r3
    13a0:	d1f9      	bne.n	1396 <LEDStruct::operator=(LEDStruct const&)+0x376>
    13a2:	4613      	mov	r3, r2
    13a4:	f504 60eb 	add.w	r0, r4, #1880	; 0x758
    13a8:	f205 6264 	addw	r2, r5, #1636	; 0x664
    13ac:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13b0:	f843 1b04 	str.w	r1, [r3], #4
    13b4:	4298      	cmp	r0, r3
    13b6:	d1f9      	bne.n	13ac <LEDStruct::operator=(LEDStruct const&)+0x38c>
    13b8:	f895 3758 	ldrb.w	r3, [r5, #1880]	; 0x758
    13bc:	f884 3758 	strb.w	r3, [r4, #1880]	; 0x758
    13c0:	f8b5 175a 	ldrh.w	r1, [r5, #1882]	; 0x75a
    13c4:	f8b5 275c 	ldrh.w	r2, [r5, #1884]	; 0x75c
    13c8:	f8b5 375e 	ldrh.w	r3, [r5, #1886]	; 0x75e
    13cc:	f8a4 375e 	strh.w	r3, [r4, #1886]	; 0x75e
    13d0:	f8a4 175a 	strh.w	r1, [r4, #1882]	; 0x75a
    13d4:	f8a4 275c 	strh.w	r2, [r4, #1884]	; 0x75c
    13d8:	f895 3760 	ldrb.w	r3, [r5, #1888]	; 0x760
    13dc:	f884 3760 	strb.w	r3, [r4, #1888]	; 0x760
    13e0:	f895 3761 	ldrb.w	r3, [r5, #1889]	; 0x761
    13e4:	f884 3761 	strb.w	r3, [r4, #1889]	; 0x761
    13e8:	f895 3762 	ldrb.w	r3, [r5, #1890]	; 0x762
    13ec:	f884 3762 	strb.w	r3, [r4, #1890]	; 0x762
    13f0:	f895 3763 	ldrb.w	r3, [r5, #1891]	; 0x763
    13f4:	f884 3763 	strb.w	r3, [r4, #1891]	; 0x763
    13f8:	f895 3764 	ldrb.w	r3, [r5, #1892]	; 0x764
    13fc:	f884 3764 	strb.w	r3, [r4, #1892]	; 0x764
    1400:	f205 7164 	addw	r1, r5, #1892	; 0x764
    1404:	f504 63ed 	add.w	r3, r4, #1896	; 0x768
    1408:	f504 62f1 	add.w	r2, r4, #1928	; 0x788
    140c:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1410:	f843 0b04 	str.w	r0, [r3], #4
    1414:	429a      	cmp	r2, r3
    1416:	d1f9      	bne.n	140c <LEDStruct::operator=(LEDStruct const&)+0x3ec>
    1418:	f205 7184 	addw	r1, r5, #1924	; 0x784
    141c:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
    1420:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1424:	f842 0b04 	str.w	r0, [r2], #4
    1428:	4293      	cmp	r3, r2
    142a:	d1f9      	bne.n	1420 <LEDStruct::operator=(LEDStruct const&)+0x400>
    142c:	f205 72a4 	addw	r2, r5, #1956	; 0x7a4
    1430:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
    1434:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1438:	f843 1b04 	str.w	r1, [r3], #4
    143c:	4283      	cmp	r3, r0
    143e:	d1f9      	bne.n	1434 <LEDStruct::operator=(LEDStruct const&)+0x414>
    1440:	f205 72c4 	addw	r2, r5, #1988	; 0x7c4
    1444:	f504 60fd 	add.w	r0, r4, #2024	; 0x7e8
    1448:	f852 1f04 	ldr.w	r1, [r2, #4]!
    144c:	f843 1b04 	str.w	r1, [r3], #4
    1450:	4283      	cmp	r3, r0
    1452:	d1f9      	bne.n	1448 <LEDStruct::operator=(LEDStruct const&)+0x428>
    1454:	f205 72e4 	addw	r2, r5, #2020	; 0x7e4
    1458:	f604 0008 	addw	r0, r4, #2056	; 0x808
    145c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1460:	f843 1b04 	str.w	r1, [r3], #4
    1464:	4283      	cmp	r3, r0
    1466:	d1f9      	bne.n	145c <LEDStruct::operator=(LEDStruct const&)+0x43c>
    1468:	f605 0204 	addw	r2, r5, #2052	; 0x804
    146c:	f604 0028 	addw	r0, r4, #2088	; 0x828
    1470:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1474:	f843 1b04 	str.w	r1, [r3], #4
    1478:	4283      	cmp	r3, r0
    147a:	d1f9      	bne.n	1470 <LEDStruct::operator=(LEDStruct const&)+0x450>
    147c:	f895 3828 	ldrb.w	r3, [r5, #2088]	; 0x828
    1480:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
    1484:	f895 3829 	ldrb.w	r3, [r5, #2089]	; 0x829
    1488:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
    148c:	f895 082a 	ldrb.w	r0, [r5, #2090]	; 0x82a
    1490:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
    1494:	f895 182b 	ldrb.w	r1, [r5, #2091]	; 0x82b
    1498:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
    149c:	f8c4 282c 	str.w	r2, [r4, #2092]	; 0x82c
    14a0:	f884 082a 	strb.w	r0, [r4, #2090]	; 0x82a
    14a4:	f884 182b 	strb.w	r1, [r4, #2091]	; 0x82b
    14a8:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    14ac:	f895 3834 	ldrb.w	r3, [r5, #2100]	; 0x834
    14b0:	f884 3834 	strb.w	r3, [r4, #2100]	; 0x834
    14b4:	f895 3835 	ldrb.w	r3, [r5, #2101]	; 0x835
    14b8:	f884 3835 	strb.w	r3, [r4, #2101]	; 0x835
    14bc:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
    14c0:	f884 3836 	strb.w	r3, [r4, #2102]	; 0x836
    14c4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
    14c8:	f884 3837 	strb.w	r3, [r4, #2103]	; 0x837
    14cc:	f895 3838 	ldrb.w	r3, [r5, #2104]	; 0x838
    14d0:	f884 3838 	strb.w	r3, [r4, #2104]	; 0x838
    14d4:	f895 3839 	ldrb.w	r3, [r5, #2105]	; 0x839
    14d8:	f884 3839 	strb.w	r3, [r4, #2105]	; 0x839
    14dc:	f895 383a 	ldrb.w	r3, [r5, #2106]	; 0x83a
    14e0:	f884 383a 	strb.w	r3, [r4, #2106]	; 0x83a
    14e4:	4620      	mov	r0, r4
    14e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000014e8 <finish_transition()>:

void finish_transition() {
    14e8:	b530      	push	{r4, r5, lr}
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14ea:	4d1d      	ldr	r5, [pc, #116]	; (1560 <finish_transition()+0x78>)
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    14ec:	4c1d      	ldr	r4, [pc, #116]	; (1564 <finish_transition()+0x7c>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    14ee:	b083      	sub	sp, #12
	in_transition = 0;
    14f0:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    14f2:	4628      	mov	r0, r5
    14f4:	aa01      	add	r2, sp, #4
    14f6:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    14f8:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14fa:	f88d 3004 	strb.w	r3, [sp, #4]
    14fe:	f88d 3005 	strb.w	r3, [sp, #5]
    1502:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1506:	f008 fea9 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds = next_leds;
    150a:	4628      	mov	r0, r5
    150c:	4916      	ldr	r1, [pc, #88]	; (1568 <finish_transition()+0x80>)
    150e:	f7ff fd87 	bl	1020 <LEDStruct::operator=(LEDStruct const&)>
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    1512:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    1516:	b13b      	cbz	r3, 1528 <finish_transition()+0x40>
    1518:	4c14      	ldr	r4, [pc, #80]	; (156c <finish_transition()+0x84>)
    151a:	4915      	ldr	r1, [pc, #84]	; (1570 <finish_transition()+0x88>)
    151c:	4620      	mov	r0, r4
    151e:	f7ff fd7f 	bl	1020 <LEDStruct::operator=(LEDStruct const&)>
    1522:	2302      	movs	r3, #2
    1524:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    1528:	2400      	movs	r4, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    152a:	aa01      	add	r2, sp, #4
    152c:	2196      	movs	r1, #150	; 0x96
    152e:	480e      	ldr	r0, [pc, #56]	; (1568 <finish_transition()+0x80>)
    1530:	f88d 4004 	strb.w	r4, [sp, #4]
    1534:	f88d 4005 	strb.w	r4, [sp, #5]
    1538:	f88d 4006 	strb.w	r4, [sp, #6]
    153c:	f008 fe8e 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1540:	aa01      	add	r2, sp, #4
    1542:	2196      	movs	r1, #150	; 0x96
    1544:	480a      	ldr	r0, [pc, #40]	; (1570 <finish_transition()+0x88>)
    1546:	f88d 4004 	strb.w	r4, [sp, #4]
    154a:	f88d 4005 	strb.w	r4, [sp, #5]
    154e:	f88d 4006 	strb.w	r4, [sp, #6]
    1552:	f008 fe83 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    1556:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
}
    155a:	b003      	add	sp, #12
    155c:	bd30      	pop	{r4, r5, pc}
    155e:	bf00      	nop
    1560:	1fffa26c 	.word	0x1fffa26c
    1564:	1fff90d0 	.word	0x1fff90d0
    1568:	1fff8884 	.word	0x1fff8884
    156c:	1fff91d8 	.word	0x1fff91d8
    1570:	1fff9a2c 	.word	0x1fff9a2c

00001574 <blending()>:

void blending() {
    1574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1578:	4d2f      	ldr	r5, [pc, #188]	; (1638 <blending()+0xc4>)
    157a:	4e30      	ldr	r6, [pc, #192]	; (163c <blending()+0xc8>)
    157c:	4c30      	ldr	r4, [pc, #192]	; (1640 <blending()+0xcc>)
    157e:	4f31      	ldr	r7, [pc, #196]	; (1644 <blending()+0xd0>)
    1580:	b085      	sub	sp, #20
    1582:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    1586:	4632      	mov	r2, r6
    1588:	4629      	mov	r1, r5
    158a:	783b      	ldrb	r3, [r7, #0]
    158c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1644 <blending()+0xd0>
    1590:	a803      	add	r0, sp, #12
    1592:	3503      	adds	r5, #3
    1594:	f008 ff54 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1598:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    159c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15a4:	7021      	strb	r1, [r4, #0]
    15a6:	4545      	cmp	r5, r8
        g = rhs.g;
    15a8:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    15aa:	70a3      	strb	r3, [r4, #2]
    15ac:	f106 0603 	add.w	r6, r6, #3
    15b0:	f104 0403 	add.w	r4, r4, #3
    15b4:	d1e7      	bne.n	1586 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15b6:	4e24      	ldr	r6, [pc, #144]	; (1648 <blending()+0xd4>)
    15b8:	6833      	ldr	r3, [r6, #0]
    15ba:	07db      	lsls	r3, r3, #31
    15bc:	d51f      	bpl.n	15fe <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15be:	4d23      	ldr	r5, [pc, #140]	; (164c <blending()+0xd8>)
    15c0:	4c23      	ldr	r4, [pc, #140]	; (1650 <blending()+0xdc>)
    15c2:	682b      	ldr	r3, [r5, #0]
    15c4:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15c6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15ca:	9b03      	ldr	r3, [sp, #12]
    15cc:	1a5b      	subs	r3, r3, r1
    15ce:	4293      	cmp	r3, r2
    15d0:	d30c      	bcc.n	15ec <blending()+0x78>
    15d2:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15d4:	682a      	ldr	r2, [r5, #0]
    15d6:	9202      	str	r2, [sp, #8]
    15d8:	3301      	adds	r3, #1
	return ret;
    15da:	9a02      	ldr	r2, [sp, #8]
    15dc:	6022      	str	r2, [r4, #0]
    15de:	b2db      	uxtb	r3, r3
    15e0:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    15e2:	2bff      	cmp	r3, #255	; 0xff
    15e4:	d006      	beq.n	15f4 <blending()+0x80>
		finish_transition();
	}
}
    15e6:	b005      	add	sp, #20
    15e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    15ec:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    15f0:	2bff      	cmp	r3, #255	; 0xff
    15f2:	d1f8      	bne.n	15e6 <blending()+0x72>
		finish_transition();
    15f4:	f7ff ff78 	bl	14e8 <finish_transition()>
	}
}
    15f8:	b005      	add	sp, #20
    15fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15fe:	4630      	mov	r0, r6
    1600:	f009 fe68 	bl	b2d4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1604:	4d11      	ldr	r5, [pc, #68]	; (164c <blending()+0xd8>)
    1606:	b950      	cbnz	r0, 161e <blending()+0xaa>
    1608:	4c11      	ldr	r4, [pc, #68]	; (1650 <blending()+0xdc>)
    160a:	682b      	ldr	r3, [r5, #0]
    160c:	9303      	str	r3, [sp, #12]
    160e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1612:	9b03      	ldr	r3, [sp, #12]
    1614:	1a5b      	subs	r3, r3, r1
    1616:	4293      	cmp	r3, r2
    1618:	d2db      	bcs.n	15d2 <blending()+0x5e>
    161a:	783b      	ldrb	r3, [r7, #0]
    161c:	e7e1      	b.n	15e2 <blending()+0x6e>
    161e:	4b0d      	ldr	r3, [pc, #52]	; (1654 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1620:	682a      	ldr	r2, [r5, #0]
    1622:	781b      	ldrb	r3, [r3, #0]
    1624:	4c0a      	ldr	r4, [pc, #40]	; (1650 <blending()+0xdc>)
    1626:	9201      	str	r2, [sp, #4]
	return ret;
    1628:	9a01      	ldr	r2, [sp, #4]
    162a:	6022      	str	r2, [r4, #0]
    162c:	009b      	lsls	r3, r3, #2
    162e:	4630      	mov	r0, r6
    1630:	6063      	str	r3, [r4, #4]
    1632:	f009 fe55 	bl	b2e0 <__cxa_guard_release>
    1636:	e7e8      	b.n	160a <blending()+0x96>
    1638:	1fffa26c 	.word	0x1fffa26c
    163c:	1fff8884 	.word	0x1fff8884
    1640:	1fffaaa8 	.word	0x1fffaaa8
    1644:	1fff8882 	.word	0x1fff8882
    1648:	1fff91c4 	.word	0x1fff91c4
    164c:	1ffface8 	.word	0x1ffface8
    1650:	1fff90d4 	.word	0x1fff90d4
    1654:	1fff9a19 	.word	0x1fff9a19

00001658 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    165c:	4e94      	ldr	r6, [pc, #592]	; (18b0 <wipedown()+0x258>)
    165e:	f896 c000 	ldrb.w	ip, [r6]
    1662:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    1666:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1668:	2b00      	cmp	r3, #0
    166a:	f000 811e 	beq.w	18aa <wipedown()+0x252>
    166e:	f103 3bff 	add.w	fp, r3, #4294967295
    1672:	fa1f fb8b 	uxth.w	fp, fp
    1676:	488f      	ldr	r0, [pc, #572]	; (18b4 <wipedown()+0x25c>)
    1678:	498f      	ldr	r1, [pc, #572]	; (18b8 <wipedown()+0x260>)
    167a:	f10b 0b01 	add.w	fp, fp, #1
    167e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1682:	4483      	add	fp, r0
    1684:	4602      	mov	r2, r0
    1686:	460d      	mov	r5, r1
    1688:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    168a:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    168c:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1690:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1694:	7027      	strb	r7, [r4, #0]
    1696:	3203      	adds	r2, #3
    1698:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    169c:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16a0:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16a4:	f884 a001 	strb.w	sl, [r4, #1]
    16a8:	455a      	cmp	r2, fp
        b = rhs.b;
    16aa:	f884 9002 	strb.w	r9, [r4, #2]
    16ae:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16b2:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    16b6:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    16ba:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    16be:	f104 0403 	add.w	r4, r4, #3
    16c2:	f1a1 0103 	sub.w	r1, r1, #3
    16c6:	d1e0      	bne.n	168a <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16c8:	2b4a      	cmp	r3, #74	; 0x4a
    16ca:	d827      	bhi.n	171c <wipedown()+0xc4>
    16cc:	487b      	ldr	r0, [pc, #492]	; (18bc <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    16ce:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    16d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16da:	eb00 0801 	add.w	r8, r0, r1
    16de:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16e2:	3301      	adds	r3, #1
    16e4:	186f      	adds	r7, r5, r1
    16e6:	f810 b001 	ldrb.w	fp, [r0, r1]
    16ea:	f805 b001 	strb.w	fp, [r5, r1]
    16ee:	18ac      	adds	r4, r5, r2
    16f0:	b29b      	uxth	r3, r3
        g = rhs.g;
    16f2:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    16f6:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16fa:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16fe:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1702:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1706:	f887 a001 	strb.w	sl, [r7, #1]
    170a:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    170c:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1710:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    1714:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1718:	70a1      	strb	r1, [r4, #2]
    171a:	d1d8      	bne.n	16ce <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    171c:	f10c 3aff 	add.w	sl, ip, #4294967295
    1720:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1724:	2480      	movs	r4, #128	; 0x80
    1726:	eb05 0b0a 	add.w	fp, r5, sl
    172a:	4659      	mov	r1, fp
    172c:	4623      	mov	r3, r4
    172e:	a803      	add	r0, sp, #12
    1730:	aa02      	add	r2, sp, #8
    1732:	2700      	movs	r7, #0
    1734:	f88d 4009 	strb.w	r4, [sp, #9]
    1738:	f88d 400a 	strb.w	r4, [sp, #10]
    173c:	f88d 7008 	strb.w	r7, [sp, #8]
    1740:	f008 fe7e 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1744:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1748:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    174c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1750:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1754:	f805 300a 	strb.w	r3, [r5, sl]
    1758:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    175c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1760:	eb05 0908 	add.w	r9, r5, r8
    1764:	4649      	mov	r1, r9
    1766:	4623      	mov	r3, r4
        g = rhs.g;
    1768:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    176c:	f88b 0002 	strb.w	r0, [fp, #2]
    1770:	aa02      	add	r2, sp, #8
    1772:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1774:	f88d 7008 	strb.w	r7, [sp, #8]
    1778:	f88d 4009 	strb.w	r4, [sp, #9]
    177c:	f88d 400a 	strb.w	r4, [sp, #10]
    1780:	f008 fe5e 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    1784:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1786:	f89d 100c 	ldrb.w	r1, [sp, #12]
    178a:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    178e:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    1792:	f89d 000d 	ldrb.w	r0, [sp, #13]
    1796:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    179a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    179e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17a6:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17aa:	eb05 0e0c 	add.w	lr, r5, ip
    17ae:	1868      	adds	r0, r5, r1
    17b0:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    17b2:	2a49      	cmp	r2, #73	; 0x49
    17b4:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    17b8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18b8 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    17bc:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    17c0:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17c4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18b0 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17c8:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    17ca:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    17cc:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    17ce:	d92e      	bls.n	182e <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    17d0:	4f3b      	ldr	r7, [pc, #236]	; (18c0 <wipedown()+0x268>)
    17d2:	683b      	ldr	r3, [r7, #0]
    17d4:	07db      	lsls	r3, r3, #31
    17d6:	d517      	bpl.n	1808 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17d8:	4d3a      	ldr	r5, [pc, #232]	; (18c4 <wipedown()+0x26c>)
    17da:	4c3b      	ldr	r4, [pc, #236]	; (18c8 <wipedown()+0x270>)
    17dc:	682b      	ldr	r3, [r5, #0]
    17de:	9303      	str	r3, [sp, #12]
    17e0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    17e4:	9b03      	ldr	r3, [sp, #12]
    17e6:	1a5b      	subs	r3, r3, r1
    17e8:	4293      	cmp	r3, r2
    17ea:	7833      	ldrb	r3, [r6, #0]
    17ec:	d306      	bcc.n	17fc <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17ee:	682a      	ldr	r2, [r5, #0]
    17f0:	9202      	str	r2, [sp, #8]
    17f2:	3b01      	subs	r3, #1
	return ret;
    17f4:	9a02      	ldr	r2, [sp, #8]
    17f6:	6022      	str	r2, [r4, #0]
    17f8:	b2db      	uxtb	r3, r3
    17fa:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    17fc:	b90b      	cbnz	r3, 1802 <wipedown()+0x1aa>
		finish_transition();
    17fe:	f7ff fe73 	bl	14e8 <finish_transition()>
	}
}
    1802:	b005      	add	sp, #20
    1804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1808:	4638      	mov	r0, r7
    180a:	f009 fd63 	bl	b2d4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    180e:	4d2d      	ldr	r5, [pc, #180]	; (18c4 <wipedown()+0x26c>)
    1810:	2800      	cmp	r0, #0
    1812:	d0e2      	beq.n	17da <wipedown()+0x182>
    1814:	4b2d      	ldr	r3, [pc, #180]	; (18cc <wipedown()+0x274>)
    1816:	682a      	ldr	r2, [r5, #0]
    1818:	781b      	ldrb	r3, [r3, #0]
    181a:	4c2b      	ldr	r4, [pc, #172]	; (18c8 <wipedown()+0x270>)
    181c:	9201      	str	r2, [sp, #4]
	return ret;
    181e:	9a01      	ldr	r2, [sp, #4]
    1820:	6022      	str	r2, [r4, #0]
    1822:	009b      	lsls	r3, r3, #2
    1824:	4638      	mov	r0, r7
    1826:	6063      	str	r3, [r4, #4]
    1828:	f009 fd5a 	bl	b2e0 <__cxa_guard_release>
    182c:	e7d6      	b.n	17dc <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    182e:	1c55      	adds	r5, r2, #1
    1830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1834:	eb08 0a05 	add.w	sl, r8, r5
    1838:	4651      	mov	r1, sl
    183a:	4623      	mov	r3, r4
    183c:	aa02      	add	r2, sp, #8
    183e:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1840:	f88d 7008 	strb.w	r7, [sp, #8]
    1844:	f88d 4009 	strb.w	r4, [sp, #9]
    1848:	f88d 400a 	strb.w	r4, [sp, #10]
    184c:	f008 fdf8 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1850:	f899 3000 	ldrb.w	r3, [r9]
    1854:	f88d 7008 	strb.w	r7, [sp, #8]
    1858:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    185c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1860:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1864:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1868:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    186c:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1870:	f808 c005 	strb.w	ip, [r8, r5]
    1874:	aa02      	add	r2, sp, #8
    1876:	4623      	mov	r3, r4
    1878:	4649      	mov	r1, r9
    187a:	a803      	add	r0, sp, #12
        g = rhs.g;
    187c:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    1880:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1884:	f88d 4009 	strb.w	r4, [sp, #9]
    1888:	f88d 400a 	strb.w	r4, [sp, #10]
    188c:	f008 fdd8 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1890:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1894:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1898:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    189c:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18a0:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18a4:	f889 3002 	strb.w	r3, [r9, #2]
    18a8:	e792      	b.n	17d0 <wipedown()+0x178>
    18aa:	4d03      	ldr	r5, [pc, #12]	; (18b8 <wipedown()+0x260>)
    18ac:	e70e      	b.n	16cc <wipedown()+0x74>
    18ae:	bf00      	nop
    18b0:	1fff910c 	.word	0x1fff910c
    18b4:	1fffa26c 	.word	0x1fffa26c
    18b8:	1fffaaa8 	.word	0x1fffaaa8
    18bc:	1fff8884 	.word	0x1fff8884
    18c0:	1fff91c8 	.word	0x1fff91c8
    18c4:	1ffface8 	.word	0x1ffface8
    18c8:	1fff90e0 	.word	0x1fff90e0
    18cc:	1fff9a19 	.word	0x1fff9a19

000018d0 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18d4:	4ba2      	ldr	r3, [pc, #648]	; (1b60 <wipeup()+0x290>)
    18d6:	781d      	ldrb	r5, [r3, #0]
    18d8:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    18da:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    18dc:	2b00      	cmp	r3, #0
    18de:	f000 8130 	beq.w	1b42 <wipeup()+0x272>
    18e2:	f103 3bff 	add.w	fp, r3, #4294967295
    18e6:	fa1f fb8b 	uxth.w	fp, fp
    18ea:	489e      	ldr	r0, [pc, #632]	; (1b64 <wipeup()+0x294>)
    18ec:	499e      	ldr	r1, [pc, #632]	; (1b68 <wipeup()+0x298>)
    18ee:	f10b 0b01 	add.w	fp, fp, #1
    18f2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    18f6:	4483      	add	fp, r0
    18f8:	4602      	mov	r2, r0
    18fa:	460c      	mov	r4, r1
    18fc:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18fe:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1902:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1906:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    190a:	f886 e000 	strb.w	lr, [r6]
    190e:	3203      	adds	r2, #3
    1910:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1914:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1918:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    191c:	f886 a001 	strb.w	sl, [r6, #1]
    1920:	455a      	cmp	r2, fp
        b = rhs.b;
    1922:	f886 9002 	strb.w	r9, [r6, #2]
    1926:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    192a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    192e:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    1932:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    1936:	f106 0603 	add.w	r6, r6, #3
    193a:	f1a1 0103 	sub.w	r1, r1, #3
    193e:	d1de      	bne.n	18fe <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1940:	2b4a      	cmp	r3, #74	; 0x4a
    1942:	d828      	bhi.n	1996 <wipeup()+0xc6>
    1944:	4889      	ldr	r0, [pc, #548]	; (1b6c <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    1946:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    194a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    194e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1952:	eb00 0801 	add.w	r8, r0, r1
    1956:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    195a:	3301      	adds	r3, #1
    195c:	eb04 0e01 	add.w	lr, r4, r1
    1960:	f810 b001 	ldrb.w	fp, [r0, r1]
    1964:	f804 b001 	strb.w	fp, [r4, r1]
    1968:	18a6      	adds	r6, r4, r2
    196a:	b29b      	uxth	r3, r3
        g = rhs.g;
    196c:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1970:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1974:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1978:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    197c:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1980:	f88e a001 	strb.w	sl, [lr, #1]
    1984:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1986:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    198a:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    198e:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    1992:	70b1      	strb	r1, [r6, #2]
    1994:	d1d7      	bne.n	1946 <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    1996:	2d00      	cmp	r5, #0
    1998:	f040 808f 	bne.w	1aba <wipeup()+0x1ea>
    199c:	f10d 0a0c 	add.w	sl, sp, #12
    19a0:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19a4:	4b6e      	ldr	r3, [pc, #440]	; (1b60 <wipeup()+0x290>)
    19a6:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    19a8:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    19b0:	1c5a      	adds	r2, r3, #1
    19b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19b6:	eb04 0e03 	add.w	lr, r4, r3
    19ba:	1825      	adds	r5, r4, r0
    19bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19c0:	2680      	movs	r6, #128	; 0x80
    19c2:	eb04 0902 	add.w	r9, r4, r2
    19c6:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19c8:	22ff      	movs	r2, #255	; 0xff
    19ca:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19cc:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    19d0:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    19d4:	f88e 2002 	strb.w	r2, [lr, #2]
    19d8:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19da:	5422      	strb	r2, [r4, r0]
    19dc:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    19de:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    19e0:	70aa      	strb	r2, [r5, #2]
    19e2:	4650      	mov	r0, sl
    19e4:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19e6:	f88d 6009 	strb.w	r6, [sp, #9]
    19ea:	f88d 600a 	strb.w	r6, [sp, #10]
    19ee:	f88d 8008 	strb.w	r8, [sp, #8]
    19f2:	f008 fd25 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    19f6:	4b5a      	ldr	r3, [pc, #360]	; (1b60 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19f8:	f89d 100c 	ldrb.w	r1, [sp, #12]
    19fc:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    19fe:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a02:	f88d 8008 	strb.w	r8, [sp, #8]
    1a06:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a0e:	eb04 0805 	add.w	r8, r4, r5
    1a12:	4633      	mov	r3, r6
    1a14:	f88d 6009 	strb.w	r6, [sp, #9]
    1a18:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a1c:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a20:	55e1      	strb	r1, [r4, r7]
    1a22:	465a      	mov	r2, fp
    1a24:	4650      	mov	r0, sl
    1a26:	4641      	mov	r1, r8
        g = rhs.g;
    1a28:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a2c:	f889 6002 	strb.w	r6, [r9, #2]
    1a30:	f008 fd06 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a34:	4b4e      	ldr	r3, [pc, #312]	; (1b70 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a36:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a3a:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a3c:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a40:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a44:	5560      	strb	r0, [r4, r5]
    1a46:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a48:	4845      	ldr	r0, [pc, #276]	; (1b60 <wipeup()+0x290>)
        g = rhs.g;
    1a4a:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1a4e:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a52:	d520      	bpl.n	1a96 <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a54:	4d47      	ldr	r5, [pc, #284]	; (1b74 <wipeup()+0x2a4>)
    1a56:	4c48      	ldr	r4, [pc, #288]	; (1b78 <wipeup()+0x2a8>)
    1a58:	682b      	ldr	r3, [r5, #0]
    1a5a:	9303      	str	r3, [sp, #12]
    1a5c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a60:	9b03      	ldr	r3, [sp, #12]
    1a62:	1a5b      	subs	r3, r3, r1
    1a64:	4293      	cmp	r3, r2
    1a66:	d30e      	bcc.n	1a86 <wipeup()+0x1b6>
    1a68:	4b3d      	ldr	r3, [pc, #244]	; (1b60 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a6a:	682a      	ldr	r2, [r5, #0]
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	9202      	str	r2, [sp, #8]
	return ret;
    1a70:	9a02      	ldr	r2, [sp, #8]
    1a72:	6022      	str	r2, [r4, #0]
    1a74:	3301      	adds	r3, #1
    1a76:	4a3a      	ldr	r2, [pc, #232]	; (1b60 <wipeup()+0x290>)
    1a78:	b2db      	uxtb	r3, r3
    1a7a:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1a7c:	2b4a      	cmp	r3, #74	; 0x4a
    1a7e:	d005      	beq.n	1a8c <wipeup()+0x1bc>
		finish_transition();
	}
}
    1a80:	b005      	add	sp, #20
    1a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a86:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1a88:	2b4a      	cmp	r3, #74	; 0x4a
    1a8a:	d1f9      	bne.n	1a80 <wipeup()+0x1b0>
		finish_transition();
    1a8c:	f7ff fd2c 	bl	14e8 <finish_transition()>
	}
}
    1a90:	b005      	add	sp, #20
    1a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a96:	4836      	ldr	r0, [pc, #216]	; (1b70 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a98:	4d36      	ldr	r5, [pc, #216]	; (1b74 <wipeup()+0x2a4>)
    1a9a:	f009 fc1b 	bl	b2d4 <__cxa_guard_acquire>
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d151      	bne.n	1b46 <wipeup()+0x276>
    1aa2:	4c35      	ldr	r4, [pc, #212]	; (1b78 <wipeup()+0x2a8>)
    1aa4:	682b      	ldr	r3, [r5, #0]
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1aac:	9b03      	ldr	r3, [sp, #12]
    1aae:	1a5b      	subs	r3, r3, r1
    1ab0:	4293      	cmp	r3, r2
    1ab2:	d2d9      	bcs.n	1a68 <wipeup()+0x198>
    1ab4:	4b2a      	ldr	r3, [pc, #168]	; (1b60 <wipeup()+0x290>)
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	e7e0      	b.n	1a7c <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1aba:	3d01      	subs	r5, #1
    1abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ac0:	2680      	movs	r6, #128	; 0x80
    1ac2:	eb04 0905 	add.w	r9, r4, r5
    1ac6:	f10d 0a0c 	add.w	sl, sp, #12
    1aca:	f10d 0b08 	add.w	fp, sp, #8
    1ace:	f04f 0800 	mov.w	r8, #0
    1ad2:	4649      	mov	r1, r9
    1ad4:	4633      	mov	r3, r6
    1ad6:	4650      	mov	r0, sl
    1ad8:	465a      	mov	r2, fp
    1ada:	f88d 8008 	strb.w	r8, [sp, #8]
    1ade:	f88d 6009 	strb.w	r6, [sp, #9]
    1ae2:	f88d 600a 	strb.w	r6, [sp, #10]
    1ae6:	f008 fcab 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1aea:	4b1d      	ldr	r3, [pc, #116]	; (1b60 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1aec:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1af0:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1af2:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1af6:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1afa:	f88d 8008 	strb.w	r8, [sp, #8]
    1afe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b06:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b0a:	5562      	strb	r2, [r4, r5]
    1b0c:	461f      	mov	r7, r3
    1b0e:	4641      	mov	r1, r8
    1b10:	4633      	mov	r3, r6
    1b12:	465a      	mov	r2, fp
    1b14:	4650      	mov	r0, sl
        g = rhs.g;
    1b16:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b1a:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b1e:	f88d 6009 	strb.w	r6, [sp, #9]
    1b22:	f88d 600a 	strb.w	r6, [sp, #10]
    1b26:	f008 fc8b 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b2a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b2e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b32:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b36:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b38:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b3c:	f888 3002 	strb.w	r3, [r8, #2]
    1b40:	e730      	b.n	19a4 <wipeup()+0xd4>
    1b42:	4c09      	ldr	r4, [pc, #36]	; (1b68 <wipeup()+0x298>)
    1b44:	e6fe      	b.n	1944 <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b46:	4b0d      	ldr	r3, [pc, #52]	; (1b7c <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b48:	682a      	ldr	r2, [r5, #0]
    1b4a:	781b      	ldrb	r3, [r3, #0]
    1b4c:	4c0a      	ldr	r4, [pc, #40]	; (1b78 <wipeup()+0x2a8>)
    1b4e:	9201      	str	r2, [sp, #4]
	return ret;
    1b50:	9a01      	ldr	r2, [sp, #4]
    1b52:	6022      	str	r2, [r4, #0]
    1b54:	009b      	lsls	r3, r3, #2
    1b56:	4806      	ldr	r0, [pc, #24]	; (1b70 <wipeup()+0x2a0>)
    1b58:	6063      	str	r3, [r4, #4]
    1b5a:	f009 fbc1 	bl	b2e0 <__cxa_guard_release>
    1b5e:	e7a1      	b.n	1aa4 <wipeup()+0x1d4>
    1b60:	1fff910c 	.word	0x1fff910c
    1b64:	1fff8884 	.word	0x1fff8884
    1b68:	1fffaaa8 	.word	0x1fffaaa8
    1b6c:	1fffa26c 	.word	0x1fffa26c
    1b70:	1fff91cc 	.word	0x1fff91cc
    1b74:	1ffface8 	.word	0x1ffface8
    1b78:	1fff9a1c 	.word	0x1fff9a1c
    1b7c:	1fff9a19 	.word	0x1fff9a19

00001b80 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1b80:	2801      	cmp	r0, #1
    1b82:	d006      	beq.n	1b92 <switch_transition(TransitionType)+0x12>
    1b84:	d303      	bcc.n	1b8e <switch_transition(TransitionType)+0xe>
    1b86:	2802      	cmp	r0, #2
    1b88:	d101      	bne.n	1b8e <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1b8a:	f7ff bea1 	b.w	18d0 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1b8e:	f7ff bcf1 	b.w	1574 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1b92:	f7ff bd61 	b.w	1658 <wipedown()>
    1b96:	bf00      	nop

00001b98 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1b98:	b510      	push	{r4, lr}
    1b9a:	2110      	movs	r1, #16
    1b9c:	4604      	mov	r4, r0
    1b9e:	4894      	ldr	r0, [pc, #592]	; (1df0 <print_palette(unsigned char)+0x258>)
    1ba0:	f00a fc30 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ba4:	4621      	mov	r1, r4
    1ba6:	2300      	movs	r3, #0
    1ba8:	220a      	movs	r2, #10
    1baa:	4892      	ldr	r0, [pc, #584]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1bac:	f00a fe3e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bb0:	2102      	movs	r1, #2
    1bb2:	4891      	ldr	r0, [pc, #580]	; (1df8 <print_palette(unsigned char)+0x260>)
    1bb4:	f00a fc26 	bl	c404 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1bb8:	2c5c      	cmp	r4, #92	; 0x5c
    1bba:	f200 8281 	bhi.w	20c0 <print_palette(unsigned char)+0x528>
    1bbe:	e8df f014 	tbh	[pc, r4, lsl #1]
    1bc2:	027a      	.short	0x027a
    1bc4:	02700275 	.word	0x02700275
    1bc8:	0266026b 	.word	0x0266026b
    1bcc:	025c0261 	.word	0x025c0261
    1bd0:	02520257 	.word	0x02520257
    1bd4:	0248024d 	.word	0x0248024d
    1bd8:	023e0243 	.word	0x023e0243
    1bdc:	02340239 	.word	0x02340239
    1be0:	022a022f 	.word	0x022a022f
    1be4:	02200225 	.word	0x02200225
    1be8:	0216021b 	.word	0x0216021b
    1bec:	020c0211 	.word	0x020c0211
    1bf0:	02020207 	.word	0x02020207
    1bf4:	01f801fd 	.word	0x01f801fd
    1bf8:	01ee01f3 	.word	0x01ee01f3
    1bfc:	01e401e9 	.word	0x01e401e9
    1c00:	01da01df 	.word	0x01da01df
    1c04:	01d001d5 	.word	0x01d001d5
    1c08:	01c601cb 	.word	0x01c601cb
    1c0c:	01bc01c1 	.word	0x01bc01c1
    1c10:	01b201b7 	.word	0x01b201b7
    1c14:	01a801ad 	.word	0x01a801ad
    1c18:	019e01a3 	.word	0x019e01a3
    1c1c:	01940199 	.word	0x01940199
    1c20:	018a018f 	.word	0x018a018f
    1c24:	01800185 	.word	0x01800185
    1c28:	0176017b 	.word	0x0176017b
    1c2c:	016c0171 	.word	0x016c0171
    1c30:	01110167 	.word	0x01110167
    1c34:	0107010c 	.word	0x0107010c
    1c38:	00fd0102 	.word	0x00fd0102
    1c3c:	00f300f8 	.word	0x00f300f8
    1c40:	00e900ee 	.word	0x00e900ee
    1c44:	00df00e4 	.word	0x00df00e4
    1c48:	00d500da 	.word	0x00d500da
    1c4c:	00cb00d0 	.word	0x00cb00d0
    1c50:	00c100c6 	.word	0x00c100c6
    1c54:	00b700bc 	.word	0x00b700bc
    1c58:	00ad00b2 	.word	0x00ad00b2
    1c5c:	00a300a8 	.word	0x00a300a8
    1c60:	0099009e 	.word	0x0099009e
    1c64:	008f0094 	.word	0x008f0094
    1c68:	0085008a 	.word	0x0085008a
    1c6c:	007b0080 	.word	0x007b0080
    1c70:	00710076 	.word	0x00710076
    1c74:	0067006c 	.word	0x0067006c
    1c78:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1c7c:	495f      	ldr	r1, [pc, #380]	; (1dfc <print_palette(unsigned char)+0x264>)
    1c7e:	485d      	ldr	r0, [pc, #372]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c80:	f7fe fea2 	bl	9c8 <Print::println(char const*)>
    1c84:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1c86:	495e      	ldr	r1, [pc, #376]	; (1e00 <print_palette(unsigned char)+0x268>)
    1c88:	485a      	ldr	r0, [pc, #360]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c8a:	f7fe fe9d 	bl	9c8 <Print::println(char const*)>
    1c8e:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1c90:	495c      	ldr	r1, [pc, #368]	; (1e04 <print_palette(unsigned char)+0x26c>)
    1c92:	4858      	ldr	r0, [pc, #352]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c94:	f7fe fe98 	bl	9c8 <Print::println(char const*)>
    1c98:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1c9a:	495b      	ldr	r1, [pc, #364]	; (1e08 <print_palette(unsigned char)+0x270>)
    1c9c:	4855      	ldr	r0, [pc, #340]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1c9e:	f7fe fe93 	bl	9c8 <Print::println(char const*)>
    1ca2:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1ca4:	4959      	ldr	r1, [pc, #356]	; (1e0c <print_palette(unsigned char)+0x274>)
    1ca6:	4853      	ldr	r0, [pc, #332]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1ca8:	f7fe fe8e 	bl	9c8 <Print::println(char const*)>
    1cac:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1cae:	4958      	ldr	r1, [pc, #352]	; (1e10 <print_palette(unsigned char)+0x278>)
    1cb0:	4850      	ldr	r0, [pc, #320]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cb2:	f7fe fe89 	bl	9c8 <Print::println(char const*)>
    1cb6:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1cb8:	4956      	ldr	r1, [pc, #344]	; (1e14 <print_palette(unsigned char)+0x27c>)
    1cba:	484e      	ldr	r0, [pc, #312]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cbc:	f7fe fe84 	bl	9c8 <Print::println(char const*)>
    1cc0:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1cc2:	4955      	ldr	r1, [pc, #340]	; (1e18 <print_palette(unsigned char)+0x280>)
    1cc4:	484b      	ldr	r0, [pc, #300]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cc6:	f7fe fe7f 	bl	9c8 <Print::println(char const*)>
    1cca:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1ccc:	4953      	ldr	r1, [pc, #332]	; (1e1c <print_palette(unsigned char)+0x284>)
    1cce:	4849      	ldr	r0, [pc, #292]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cd0:	f7fe fe7a 	bl	9c8 <Print::println(char const*)>
    1cd4:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1cd6:	4952      	ldr	r1, [pc, #328]	; (1e20 <print_palette(unsigned char)+0x288>)
    1cd8:	4846      	ldr	r0, [pc, #280]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cda:	f7fe fe75 	bl	9c8 <Print::println(char const*)>
    1cde:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1ce0:	4950      	ldr	r1, [pc, #320]	; (1e24 <print_palette(unsigned char)+0x28c>)
    1ce2:	4844      	ldr	r0, [pc, #272]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1ce4:	f7fe fe70 	bl	9c8 <Print::println(char const*)>
    1ce8:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1cea:	494f      	ldr	r1, [pc, #316]	; (1e28 <print_palette(unsigned char)+0x290>)
    1cec:	4841      	ldr	r0, [pc, #260]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cee:	f7fe fe6b 	bl	9c8 <Print::println(char const*)>
    1cf2:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1cf4:	494d      	ldr	r1, [pc, #308]	; (1e2c <print_palette(unsigned char)+0x294>)
    1cf6:	483f      	ldr	r0, [pc, #252]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1cf8:	f7fe fe66 	bl	9c8 <Print::println(char const*)>
    1cfc:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1cfe:	494c      	ldr	r1, [pc, #304]	; (1e30 <print_palette(unsigned char)+0x298>)
    1d00:	483c      	ldr	r0, [pc, #240]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d02:	f7fe fe61 	bl	9c8 <Print::println(char const*)>
    1d06:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d08:	494a      	ldr	r1, [pc, #296]	; (1e34 <print_palette(unsigned char)+0x29c>)
    1d0a:	483a      	ldr	r0, [pc, #232]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d0c:	f7fe fe5c 	bl	9c8 <Print::println(char const*)>
    1d10:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d12:	4949      	ldr	r1, [pc, #292]	; (1e38 <print_palette(unsigned char)+0x2a0>)
    1d14:	4837      	ldr	r0, [pc, #220]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d16:	f7fe fe57 	bl	9c8 <Print::println(char const*)>
    1d1a:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d1c:	4947      	ldr	r1, [pc, #284]	; (1e3c <print_palette(unsigned char)+0x2a4>)
    1d1e:	4835      	ldr	r0, [pc, #212]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d20:	f7fe fe52 	bl	9c8 <Print::println(char const*)>
    1d24:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d26:	4946      	ldr	r1, [pc, #280]	; (1e40 <print_palette(unsigned char)+0x2a8>)
    1d28:	4832      	ldr	r0, [pc, #200]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d2a:	f7fe fe4d 	bl	9c8 <Print::println(char const*)>
    1d2e:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d30:	4944      	ldr	r1, [pc, #272]	; (1e44 <print_palette(unsigned char)+0x2ac>)
    1d32:	4830      	ldr	r0, [pc, #192]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d34:	f7fe fe48 	bl	9c8 <Print::println(char const*)>
    1d38:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d3a:	4943      	ldr	r1, [pc, #268]	; (1e48 <print_palette(unsigned char)+0x2b0>)
    1d3c:	482d      	ldr	r0, [pc, #180]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d3e:	f7fe fe43 	bl	9c8 <Print::println(char const*)>
    1d42:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d44:	4941      	ldr	r1, [pc, #260]	; (1e4c <print_palette(unsigned char)+0x2b4>)
    1d46:	482b      	ldr	r0, [pc, #172]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d48:	f7fe fe3e 	bl	9c8 <Print::println(char const*)>
    1d4c:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1d4e:	4940      	ldr	r1, [pc, #256]	; (1e50 <print_palette(unsigned char)+0x2b8>)
    1d50:	4828      	ldr	r0, [pc, #160]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d52:	f7fe fe39 	bl	9c8 <Print::println(char const*)>
    1d56:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1d58:	493e      	ldr	r1, [pc, #248]	; (1e54 <print_palette(unsigned char)+0x2bc>)
    1d5a:	4826      	ldr	r0, [pc, #152]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d5c:	f7fe fe34 	bl	9c8 <Print::println(char const*)>
    1d60:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1d62:	493d      	ldr	r1, [pc, #244]	; (1e58 <print_palette(unsigned char)+0x2c0>)
    1d64:	4823      	ldr	r0, [pc, #140]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d66:	f7fe fe2f 	bl	9c8 <Print::println(char const*)>
    1d6a:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1d6c:	493b      	ldr	r1, [pc, #236]	; (1e5c <print_palette(unsigned char)+0x2c4>)
    1d6e:	4821      	ldr	r0, [pc, #132]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d70:	f7fe fe2a 	bl	9c8 <Print::println(char const*)>
    1d74:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1d76:	493a      	ldr	r1, [pc, #232]	; (1e60 <print_palette(unsigned char)+0x2c8>)
    1d78:	481e      	ldr	r0, [pc, #120]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d7a:	f7fe fe25 	bl	9c8 <Print::println(char const*)>
    1d7e:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1d80:	4938      	ldr	r1, [pc, #224]	; (1e64 <print_palette(unsigned char)+0x2cc>)
    1d82:	481c      	ldr	r0, [pc, #112]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d84:	f7fe fe20 	bl	9c8 <Print::println(char const*)>
    1d88:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1d8a:	4937      	ldr	r1, [pc, #220]	; (1e68 <print_palette(unsigned char)+0x2d0>)
    1d8c:	4819      	ldr	r0, [pc, #100]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d8e:	f7fe fe1b 	bl	9c8 <Print::println(char const*)>
    1d92:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1d94:	4935      	ldr	r1, [pc, #212]	; (1e6c <print_palette(unsigned char)+0x2d4>)
    1d96:	4817      	ldr	r0, [pc, #92]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1d98:	f7fe fe16 	bl	9c8 <Print::println(char const*)>
    1d9c:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1d9e:	4934      	ldr	r1, [pc, #208]	; (1e70 <print_palette(unsigned char)+0x2d8>)
    1da0:	4814      	ldr	r0, [pc, #80]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1da2:	f7fe fe11 	bl	9c8 <Print::println(char const*)>
    1da6:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1da8:	4932      	ldr	r1, [pc, #200]	; (1e74 <print_palette(unsigned char)+0x2dc>)
    1daa:	4812      	ldr	r0, [pc, #72]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dac:	f7fe fe0c 	bl	9c8 <Print::println(char const*)>
    1db0:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1db2:	4931      	ldr	r1, [pc, #196]	; (1e78 <print_palette(unsigned char)+0x2e0>)
    1db4:	480f      	ldr	r0, [pc, #60]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1db6:	f7fe fe07 	bl	9c8 <Print::println(char const*)>
    1dba:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1dbc:	492f      	ldr	r1, [pc, #188]	; (1e7c <print_palette(unsigned char)+0x2e4>)
    1dbe:	480d      	ldr	r0, [pc, #52]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dc0:	f7fe fe02 	bl	9c8 <Print::println(char const*)>
    1dc4:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1dc6:	492e      	ldr	r1, [pc, #184]	; (1e80 <print_palette(unsigned char)+0x2e8>)
    1dc8:	480a      	ldr	r0, [pc, #40]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dca:	f7fe fdfd 	bl	9c8 <Print::println(char const*)>
    1dce:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1dd0:	492c      	ldr	r1, [pc, #176]	; (1e84 <print_palette(unsigned char)+0x2ec>)
    1dd2:	4808      	ldr	r0, [pc, #32]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dd4:	f7fe fdf8 	bl	9c8 <Print::println(char const*)>
    1dd8:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1dda:	492b      	ldr	r1, [pc, #172]	; (1e88 <print_palette(unsigned char)+0x2f0>)
    1ddc:	4805      	ldr	r0, [pc, #20]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1dde:	f7fe fdf3 	bl	9c8 <Print::println(char const*)>
    1de2:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1de4:	4929      	ldr	r1, [pc, #164]	; (1e8c <print_palette(unsigned char)+0x2f4>)
    1de6:	4803      	ldr	r0, [pc, #12]	; (1df4 <print_palette(unsigned char)+0x25c>)
    1de8:	f7fe fdee 	bl	9c8 <Print::println(char const*)>
    1dec:	bd10      	pop	{r4, pc}
    1dee:	bf00      	nop
    1df0:	0000f290 	.word	0x0000f290
    1df4:	1fff878c 	.word	0x1fff878c
    1df8:	0000f2a4 	.word	0x0000f2a4
    1dfc:	0000f838 	.word	0x0000f838
    1e00:	0000f82c 	.word	0x0000f82c
    1e04:	0000f81c 	.word	0x0000f81c
    1e08:	0000f80c 	.word	0x0000f80c
    1e0c:	0000f7f8 	.word	0x0000f7f8
    1e10:	0000f7e0 	.word	0x0000f7e0
    1e14:	0000f7c8 	.word	0x0000f7c8
    1e18:	0000f7b8 	.word	0x0000f7b8
    1e1c:	0000f7a0 	.word	0x0000f7a0
    1e20:	0000f794 	.word	0x0000f794
    1e24:	0000f788 	.word	0x0000f788
    1e28:	0000f770 	.word	0x0000f770
    1e2c:	0000f764 	.word	0x0000f764
    1e30:	0000f758 	.word	0x0000f758
    1e34:	0000f74c 	.word	0x0000f74c
    1e38:	0000f740 	.word	0x0000f740
    1e3c:	0000f730 	.word	0x0000f730
    1e40:	0000f724 	.word	0x0000f724
    1e44:	0000f710 	.word	0x0000f710
    1e48:	0000f704 	.word	0x0000f704
    1e4c:	0000f6f4 	.word	0x0000f6f4
    1e50:	0000f6e8 	.word	0x0000f6e8
    1e54:	0000f6dc 	.word	0x0000f6dc
    1e58:	0000f6d4 	.word	0x0000f6d4
    1e5c:	0000f6c0 	.word	0x0000f6c0
    1e60:	0000f6b0 	.word	0x0000f6b0
    1e64:	0000f69c 	.word	0x0000f69c
    1e68:	0000f690 	.word	0x0000f690
    1e6c:	0000f684 	.word	0x0000f684
    1e70:	0000f678 	.word	0x0000f678
    1e74:	0000f668 	.word	0x0000f668
    1e78:	0000f654 	.word	0x0000f654
    1e7c:	0000f648 	.word	0x0000f648
    1e80:	0000f638 	.word	0x0000f638
    1e84:	0000f62c 	.word	0x0000f62c
    1e88:	0000f61c 	.word	0x0000f61c
    1e8c:	0000f610 	.word	0x0000f610
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1e90:	498e      	ldr	r1, [pc, #568]	; (20cc <print_palette(unsigned char)+0x534>)
    1e92:	488f      	ldr	r0, [pc, #572]	; (20d0 <print_palette(unsigned char)+0x538>)
    1e94:	f7fe fd98 	bl	9c8 <Print::println(char const*)>
    1e98:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1e9a:	498e      	ldr	r1, [pc, #568]	; (20d4 <print_palette(unsigned char)+0x53c>)
    1e9c:	488c      	ldr	r0, [pc, #560]	; (20d0 <print_palette(unsigned char)+0x538>)
    1e9e:	f7fe fd93 	bl	9c8 <Print::println(char const*)>
    1ea2:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1ea4:	498c      	ldr	r1, [pc, #560]	; (20d8 <print_palette(unsigned char)+0x540>)
    1ea6:	488a      	ldr	r0, [pc, #552]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ea8:	f7fe fd8e 	bl	9c8 <Print::println(char const*)>
    1eac:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1eae:	498b      	ldr	r1, [pc, #556]	; (20dc <print_palette(unsigned char)+0x544>)
    1eb0:	4887      	ldr	r0, [pc, #540]	; (20d0 <print_palette(unsigned char)+0x538>)
    1eb2:	f7fe fd89 	bl	9c8 <Print::println(char const*)>
    1eb6:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1eb8:	4989      	ldr	r1, [pc, #548]	; (20e0 <print_palette(unsigned char)+0x548>)
    1eba:	4885      	ldr	r0, [pc, #532]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ebc:	f7fe fd84 	bl	9c8 <Print::println(char const*)>
    1ec0:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1ec2:	4988      	ldr	r1, [pc, #544]	; (20e4 <print_palette(unsigned char)+0x54c>)
    1ec4:	4882      	ldr	r0, [pc, #520]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ec6:	f7fe fd7f 	bl	9c8 <Print::println(char const*)>
    1eca:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1ecc:	4986      	ldr	r1, [pc, #536]	; (20e8 <print_palette(unsigned char)+0x550>)
    1ece:	4880      	ldr	r0, [pc, #512]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ed0:	f7fe fd7a 	bl	9c8 <Print::println(char const*)>
    1ed4:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1ed6:	4985      	ldr	r1, [pc, #532]	; (20ec <print_palette(unsigned char)+0x554>)
    1ed8:	487d      	ldr	r0, [pc, #500]	; (20d0 <print_palette(unsigned char)+0x538>)
    1eda:	f7fe fd75 	bl	9c8 <Print::println(char const*)>
    1ede:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1ee0:	4983      	ldr	r1, [pc, #524]	; (20f0 <print_palette(unsigned char)+0x558>)
    1ee2:	487b      	ldr	r0, [pc, #492]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ee4:	f7fe fd70 	bl	9c8 <Print::println(char const*)>
    1ee8:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1eea:	4982      	ldr	r1, [pc, #520]	; (20f4 <print_palette(unsigned char)+0x55c>)
    1eec:	4878      	ldr	r0, [pc, #480]	; (20d0 <print_palette(unsigned char)+0x538>)
    1eee:	f7fe fd6b 	bl	9c8 <Print::println(char const*)>
    1ef2:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1ef4:	4980      	ldr	r1, [pc, #512]	; (20f8 <print_palette(unsigned char)+0x560>)
    1ef6:	4876      	ldr	r0, [pc, #472]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ef8:	f7fe fd66 	bl	9c8 <Print::println(char const*)>
    1efc:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1efe:	497f      	ldr	r1, [pc, #508]	; (20fc <print_palette(unsigned char)+0x564>)
    1f00:	4873      	ldr	r0, [pc, #460]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f02:	f7fe fd61 	bl	9c8 <Print::println(char const*)>
    1f06:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f08:	497d      	ldr	r1, [pc, #500]	; (2100 <print_palette(unsigned char)+0x568>)
    1f0a:	4871      	ldr	r0, [pc, #452]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f0c:	f7fe fd5c 	bl	9c8 <Print::println(char const*)>
    1f10:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f12:	497c      	ldr	r1, [pc, #496]	; (2104 <print_palette(unsigned char)+0x56c>)
    1f14:	486e      	ldr	r0, [pc, #440]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f16:	f7fe fd57 	bl	9c8 <Print::println(char const*)>
    1f1a:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f1c:	497a      	ldr	r1, [pc, #488]	; (2108 <print_palette(unsigned char)+0x570>)
    1f1e:	486c      	ldr	r0, [pc, #432]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f20:	f7fe fd52 	bl	9c8 <Print::println(char const*)>
    1f24:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f26:	4979      	ldr	r1, [pc, #484]	; (210c <print_palette(unsigned char)+0x574>)
    1f28:	4869      	ldr	r0, [pc, #420]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f2a:	f7fe fd4d 	bl	9c8 <Print::println(char const*)>
    1f2e:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f30:	4977      	ldr	r1, [pc, #476]	; (2110 <print_palette(unsigned char)+0x578>)
    1f32:	4867      	ldr	r0, [pc, #412]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f34:	f7fe fd48 	bl	9c8 <Print::println(char const*)>
    1f38:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f3a:	4976      	ldr	r1, [pc, #472]	; (2114 <print_palette(unsigned char)+0x57c>)
    1f3c:	4864      	ldr	r0, [pc, #400]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f3e:	f7fe fd43 	bl	9c8 <Print::println(char const*)>
    1f42:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f44:	4974      	ldr	r1, [pc, #464]	; (2118 <print_palette(unsigned char)+0x580>)
    1f46:	4862      	ldr	r0, [pc, #392]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f48:	f7fe fd3e 	bl	9c8 <Print::println(char const*)>
    1f4c:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1f4e:	4973      	ldr	r1, [pc, #460]	; (211c <print_palette(unsigned char)+0x584>)
    1f50:	485f      	ldr	r0, [pc, #380]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f52:	f7fe fd39 	bl	9c8 <Print::println(char const*)>
    1f56:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1f58:	4971      	ldr	r1, [pc, #452]	; (2120 <print_palette(unsigned char)+0x588>)
    1f5a:	485d      	ldr	r0, [pc, #372]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f5c:	f7fe fd34 	bl	9c8 <Print::println(char const*)>
    1f60:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1f62:	4970      	ldr	r1, [pc, #448]	; (2124 <print_palette(unsigned char)+0x58c>)
    1f64:	485a      	ldr	r0, [pc, #360]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f66:	f7fe fd2f 	bl	9c8 <Print::println(char const*)>
    1f6a:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1f6c:	496e      	ldr	r1, [pc, #440]	; (2128 <print_palette(unsigned char)+0x590>)
    1f6e:	4858      	ldr	r0, [pc, #352]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f70:	f7fe fd2a 	bl	9c8 <Print::println(char const*)>
    1f74:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1f76:	496d      	ldr	r1, [pc, #436]	; (212c <print_palette(unsigned char)+0x594>)
    1f78:	4855      	ldr	r0, [pc, #340]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f7a:	f7fe fd25 	bl	9c8 <Print::println(char const*)>
    1f7e:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1f80:	496b      	ldr	r1, [pc, #428]	; (2130 <print_palette(unsigned char)+0x598>)
    1f82:	4853      	ldr	r0, [pc, #332]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f84:	f7fe fd20 	bl	9c8 <Print::println(char const*)>
    1f88:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1f8a:	496a      	ldr	r1, [pc, #424]	; (2134 <print_palette(unsigned char)+0x59c>)
    1f8c:	4850      	ldr	r0, [pc, #320]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f8e:	f7fe fd1b 	bl	9c8 <Print::println(char const*)>
    1f92:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1f94:	4968      	ldr	r1, [pc, #416]	; (2138 <print_palette(unsigned char)+0x5a0>)
    1f96:	484e      	ldr	r0, [pc, #312]	; (20d0 <print_palette(unsigned char)+0x538>)
    1f98:	f7fe fd16 	bl	9c8 <Print::println(char const*)>
    1f9c:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1f9e:	4967      	ldr	r1, [pc, #412]	; (213c <print_palette(unsigned char)+0x5a4>)
    1fa0:	484b      	ldr	r0, [pc, #300]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fa2:	f7fe fd11 	bl	9c8 <Print::println(char const*)>
    1fa6:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1fa8:	4965      	ldr	r1, [pc, #404]	; (2140 <print_palette(unsigned char)+0x5a8>)
    1faa:	4849      	ldr	r0, [pc, #292]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fac:	f7fe fd0c 	bl	9c8 <Print::println(char const*)>
    1fb0:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1fb2:	4964      	ldr	r1, [pc, #400]	; (2144 <print_palette(unsigned char)+0x5ac>)
    1fb4:	4846      	ldr	r0, [pc, #280]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fb6:	f7fe fd07 	bl	9c8 <Print::println(char const*)>
    1fba:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1fbc:	4962      	ldr	r1, [pc, #392]	; (2148 <print_palette(unsigned char)+0x5b0>)
    1fbe:	4844      	ldr	r0, [pc, #272]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fc0:	f7fe fd02 	bl	9c8 <Print::println(char const*)>
    1fc4:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1fc6:	4961      	ldr	r1, [pc, #388]	; (214c <print_palette(unsigned char)+0x5b4>)
    1fc8:	4841      	ldr	r0, [pc, #260]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fca:	f7fe fcfd 	bl	9c8 <Print::println(char const*)>
    1fce:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1fd0:	495f      	ldr	r1, [pc, #380]	; (2150 <print_palette(unsigned char)+0x5b8>)
    1fd2:	483f      	ldr	r0, [pc, #252]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fd4:	f7fe fcf8 	bl	9c8 <Print::println(char const*)>
    1fd8:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1fda:	495e      	ldr	r1, [pc, #376]	; (2154 <print_palette(unsigned char)+0x5bc>)
    1fdc:	483c      	ldr	r0, [pc, #240]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fde:	f7fe fcf3 	bl	9c8 <Print::println(char const*)>
    1fe2:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1fe4:	495c      	ldr	r1, [pc, #368]	; (2158 <print_palette(unsigned char)+0x5c0>)
    1fe6:	483a      	ldr	r0, [pc, #232]	; (20d0 <print_palette(unsigned char)+0x538>)
    1fe8:	f7fe fcee 	bl	9c8 <Print::println(char const*)>
    1fec:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1fee:	495b      	ldr	r1, [pc, #364]	; (215c <print_palette(unsigned char)+0x5c4>)
    1ff0:	4837      	ldr	r0, [pc, #220]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ff2:	f7fe fce9 	bl	9c8 <Print::println(char const*)>
    1ff6:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1ff8:	4959      	ldr	r1, [pc, #356]	; (2160 <print_palette(unsigned char)+0x5c8>)
    1ffa:	4835      	ldr	r0, [pc, #212]	; (20d0 <print_palette(unsigned char)+0x538>)
    1ffc:	f7fe fce4 	bl	9c8 <Print::println(char const*)>
    2000:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    2002:	4958      	ldr	r1, [pc, #352]	; (2164 <print_palette(unsigned char)+0x5cc>)
    2004:	4832      	ldr	r0, [pc, #200]	; (20d0 <print_palette(unsigned char)+0x538>)
    2006:	f7fe fcdf 	bl	9c8 <Print::println(char const*)>
    200a:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    200c:	4956      	ldr	r1, [pc, #344]	; (2168 <print_palette(unsigned char)+0x5d0>)
    200e:	4830      	ldr	r0, [pc, #192]	; (20d0 <print_palette(unsigned char)+0x538>)
    2010:	f7fe fcda 	bl	9c8 <Print::println(char const*)>
    2014:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    2016:	4955      	ldr	r1, [pc, #340]	; (216c <print_palette(unsigned char)+0x5d4>)
    2018:	482d      	ldr	r0, [pc, #180]	; (20d0 <print_palette(unsigned char)+0x538>)
    201a:	f7fe fcd5 	bl	9c8 <Print::println(char const*)>
    201e:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2020:	4953      	ldr	r1, [pc, #332]	; (2170 <print_palette(unsigned char)+0x5d8>)
    2022:	482b      	ldr	r0, [pc, #172]	; (20d0 <print_palette(unsigned char)+0x538>)
    2024:	f7fe fcd0 	bl	9c8 <Print::println(char const*)>
    2028:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    202a:	4952      	ldr	r1, [pc, #328]	; (2174 <print_palette(unsigned char)+0x5dc>)
    202c:	4828      	ldr	r0, [pc, #160]	; (20d0 <print_palette(unsigned char)+0x538>)
    202e:	f7fe fccb 	bl	9c8 <Print::println(char const*)>
    2032:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    2034:	4950      	ldr	r1, [pc, #320]	; (2178 <print_palette(unsigned char)+0x5e0>)
    2036:	4826      	ldr	r0, [pc, #152]	; (20d0 <print_palette(unsigned char)+0x538>)
    2038:	f7fe fcc6 	bl	9c8 <Print::println(char const*)>
    203c:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    203e:	494f      	ldr	r1, [pc, #316]	; (217c <print_palette(unsigned char)+0x5e4>)
    2040:	4823      	ldr	r0, [pc, #140]	; (20d0 <print_palette(unsigned char)+0x538>)
    2042:	f7fe fcc1 	bl	9c8 <Print::println(char const*)>
    2046:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    2048:	494d      	ldr	r1, [pc, #308]	; (2180 <print_palette(unsigned char)+0x5e8>)
    204a:	4821      	ldr	r0, [pc, #132]	; (20d0 <print_palette(unsigned char)+0x538>)
    204c:	f7fe fcbc 	bl	9c8 <Print::println(char const*)>
    2050:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    2052:	494c      	ldr	r1, [pc, #304]	; (2184 <print_palette(unsigned char)+0x5ec>)
    2054:	481e      	ldr	r0, [pc, #120]	; (20d0 <print_palette(unsigned char)+0x538>)
    2056:	f7fe fcb7 	bl	9c8 <Print::println(char const*)>
    205a:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    205c:	494a      	ldr	r1, [pc, #296]	; (2188 <print_palette(unsigned char)+0x5f0>)
    205e:	481c      	ldr	r0, [pc, #112]	; (20d0 <print_palette(unsigned char)+0x538>)
    2060:	f7fe fcb2 	bl	9c8 <Print::println(char const*)>
    2064:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    2066:	4949      	ldr	r1, [pc, #292]	; (218c <print_palette(unsigned char)+0x5f4>)
    2068:	4819      	ldr	r0, [pc, #100]	; (20d0 <print_palette(unsigned char)+0x538>)
    206a:	f7fe fcad 	bl	9c8 <Print::println(char const*)>
    206e:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    2070:	4947      	ldr	r1, [pc, #284]	; (2190 <print_palette(unsigned char)+0x5f8>)
    2072:	4817      	ldr	r0, [pc, #92]	; (20d0 <print_palette(unsigned char)+0x538>)
    2074:	f7fe fca8 	bl	9c8 <Print::println(char const*)>
    2078:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    207a:	4946      	ldr	r1, [pc, #280]	; (2194 <print_palette(unsigned char)+0x5fc>)
    207c:	4814      	ldr	r0, [pc, #80]	; (20d0 <print_palette(unsigned char)+0x538>)
    207e:	f7fe fca3 	bl	9c8 <Print::println(char const*)>
    2082:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    2084:	4944      	ldr	r1, [pc, #272]	; (2198 <print_palette(unsigned char)+0x600>)
    2086:	4812      	ldr	r0, [pc, #72]	; (20d0 <print_palette(unsigned char)+0x538>)
    2088:	f7fe fc9e 	bl	9c8 <Print::println(char const*)>
    208c:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    208e:	4943      	ldr	r1, [pc, #268]	; (219c <print_palette(unsigned char)+0x604>)
    2090:	480f      	ldr	r0, [pc, #60]	; (20d0 <print_palette(unsigned char)+0x538>)
    2092:	f7fe fc99 	bl	9c8 <Print::println(char const*)>
    2096:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    2098:	4941      	ldr	r1, [pc, #260]	; (21a0 <print_palette(unsigned char)+0x608>)
    209a:	480d      	ldr	r0, [pc, #52]	; (20d0 <print_palette(unsigned char)+0x538>)
    209c:	f7fe fc94 	bl	9c8 <Print::println(char const*)>
    20a0:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20a2:	4940      	ldr	r1, [pc, #256]	; (21a4 <print_palette(unsigned char)+0x60c>)
    20a4:	480a      	ldr	r0, [pc, #40]	; (20d0 <print_palette(unsigned char)+0x538>)
    20a6:	f7fe fc8f 	bl	9c8 <Print::println(char const*)>
    20aa:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    20ac:	493e      	ldr	r1, [pc, #248]	; (21a8 <print_palette(unsigned char)+0x610>)
    20ae:	4808      	ldr	r0, [pc, #32]	; (20d0 <print_palette(unsigned char)+0x538>)
    20b0:	f7fe fc8a 	bl	9c8 <Print::println(char const*)>
    20b4:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    20b6:	493d      	ldr	r1, [pc, #244]	; (21ac <print_palette(unsigned char)+0x614>)
    20b8:	4805      	ldr	r0, [pc, #20]	; (20d0 <print_palette(unsigned char)+0x538>)
    20ba:	f7fe fc85 	bl	9c8 <Print::println(char const*)>
    20be:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    20c0:	493b      	ldr	r1, [pc, #236]	; (21b0 <print_palette(unsigned char)+0x618>)
    20c2:	4803      	ldr	r0, [pc, #12]	; (20d0 <print_palette(unsigned char)+0x538>)
    20c4:	f7fe fc80 	bl	9c8 <Print::println(char const*)>
    20c8:	bd10      	pop	{r4, pc}
    20ca:	bf00      	nop
    20cc:	0000f5fc 	.word	0x0000f5fc
    20d0:	1fff878c 	.word	0x1fff878c
    20d4:	0000f5ec 	.word	0x0000f5ec
    20d8:	0000f5e0 	.word	0x0000f5e0
    20dc:	0000f5d4 	.word	0x0000f5d4
    20e0:	0000f5c8 	.word	0x0000f5c8
    20e4:	0000f5b4 	.word	0x0000f5b4
    20e8:	0000f5a8 	.word	0x0000f5a8
    20ec:	0000f59c 	.word	0x0000f59c
    20f0:	0000f590 	.word	0x0000f590
    20f4:	0000f578 	.word	0x0000f578
    20f8:	0000f570 	.word	0x0000f570
    20fc:	0000f608 	.word	0x0000f608
    2100:	0000f564 	.word	0x0000f564
    2104:	0000f558 	.word	0x0000f558
    2108:	0000f544 	.word	0x0000f544
    210c:	0000f530 	.word	0x0000f530
    2110:	0000f520 	.word	0x0000f520
    2114:	0000f514 	.word	0x0000f514
    2118:	0000f508 	.word	0x0000f508
    211c:	0000f4fc 	.word	0x0000f4fc
    2120:	0000f4f0 	.word	0x0000f4f0
    2124:	0000f4e4 	.word	0x0000f4e4
    2128:	0000f4d8 	.word	0x0000f4d8
    212c:	0000f4cc 	.word	0x0000f4cc
    2130:	0000f4c0 	.word	0x0000f4c0
    2134:	0000f4b4 	.word	0x0000f4b4
    2138:	0000f4a8 	.word	0x0000f4a8
    213c:	0000f49c 	.word	0x0000f49c
    2140:	0000f48c 	.word	0x0000f48c
    2144:	0000f478 	.word	0x0000f478
    2148:	0000f45c 	.word	0x0000f45c
    214c:	0000f444 	.word	0x0000f444
    2150:	0000f428 	.word	0x0000f428
    2154:	0000f418 	.word	0x0000f418
    2158:	0000f408 	.word	0x0000f408
    215c:	0000f3f4 	.word	0x0000f3f4
    2160:	0000f3e4 	.word	0x0000f3e4
    2164:	0000f3dc 	.word	0x0000f3dc
    2168:	0000f3d4 	.word	0x0000f3d4
    216c:	0000f3bc 	.word	0x0000f3bc
    2170:	0000f3ac 	.word	0x0000f3ac
    2174:	0000f3a4 	.word	0x0000f3a4
    2178:	0000f394 	.word	0x0000f394
    217c:	0000f384 	.word	0x0000f384
    2180:	0000f374 	.word	0x0000f374
    2184:	0000f360 	.word	0x0000f360
    2188:	0000f34c 	.word	0x0000f34c
    218c:	0000f338 	.word	0x0000f338
    2190:	0000f320 	.word	0x0000f320
    2194:	0000f308 	.word	0x0000f308
    2198:	0000f2f8 	.word	0x0000f2f8
    219c:	0000f2e4 	.word	0x0000f2e4
    21a0:	0000f2d0 	.word	0x0000f2d0
    21a4:	0000f2c0 	.word	0x0000f2c0
    21a8:	0000f2b4 	.word	0x0000f2b4
    21ac:	0000f2a8 	.word	0x0000f2a8
    21b0:	0000f850 	.word	0x0000f850

000021b4 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    21b4:	b538      	push	{r3, r4, r5, lr}
    21b6:	2100      	movs	r1, #0
    21b8:	4604      	mov	r4, r0
    21ba:	4898      	ldr	r0, [pc, #608]	; (241c <LEDDebug(LEDStruct&)+0x268>)
    21bc:	f00a f922 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21c0:	4897      	ldr	r0, [pc, #604]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    21c2:	f00a fb23 	bl	c80c <Print::println()>
    21c6:	2122      	movs	r1, #34	; 0x22
    21c8:	4896      	ldr	r0, [pc, #600]	; (2424 <LEDDebug(LEDStruct&)+0x270>)
    21ca:	f00a f91b 	bl	c404 <usb_serial_write>
    21ce:	4894      	ldr	r0, [pc, #592]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    21d0:	f00a fb1c 	bl	c80c <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    21d4:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    21d8:	2b00      	cmp	r3, #0
    21da:	f000 80af 	beq.w	233c <LEDDebug(LEDStruct&)+0x188>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    21de:	2b01      	cmp	r3, #1
    21e0:	f000 854d 	beq.w	2c7e <LEDDebug(LEDStruct&)+0xaca>
    21e4:	2113      	movs	r1, #19
    21e6:	4890      	ldr	r0, [pc, #576]	; (2428 <LEDDebug(LEDStruct&)+0x274>)
    21e8:	f00a f90c 	bl	c404 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    21ec:	4b8f      	ldr	r3, [pc, #572]	; (242c <LEDDebug(LEDStruct&)+0x278>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21ee:	488c      	ldr	r0, [pc, #560]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    21f0:	7819      	ldrb	r1, [r3, #0]
    21f2:	220a      	movs	r2, #10
    21f4:	2300      	movs	r3, #0
    21f6:	f00a fb19 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    21fa:	2103      	movs	r1, #3
    21fc:	488c      	ldr	r0, [pc, #560]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    21fe:	f00a f901 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2202:	4887      	ldr	r0, [pc, #540]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2204:	f00a fb02 	bl	c80c <Print::println()>
    2208:	2113      	movs	r1, #19
    220a:	488a      	ldr	r0, [pc, #552]	; (2434 <LEDDebug(LEDStruct&)+0x280>)
    220c:	f00a f8fa 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2210:	2300      	movs	r3, #0
    2212:	220a      	movs	r2, #10
    2214:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2218:	4881      	ldr	r0, [pc, #516]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    221a:	f00a fb07 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    221e:	2103      	movs	r1, #3
    2220:	4883      	ldr	r0, [pc, #524]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2222:	f00a f8ef 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2226:	487e      	ldr	r0, [pc, #504]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2228:	f00a faf0 	bl	c80c <Print::println()>
    222c:	2111      	movs	r1, #17
    222e:	4882      	ldr	r0, [pc, #520]	; (2438 <LEDDebug(LEDStruct&)+0x284>)
    2230:	f00a f8e8 	bl	c404 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2234:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2238:	4879      	ldr	r0, [pc, #484]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    223a:	f00a fb37 	bl	c8ac <Print::print(long)>
    223e:	2103      	movs	r1, #3
    2240:	487b      	ldr	r0, [pc, #492]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2242:	f00a f8df 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2246:	4876      	ldr	r0, [pc, #472]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2248:	f00a fae0 	bl	c80c <Print::println()>
    224c:	2111      	movs	r1, #17
    224e:	487b      	ldr	r0, [pc, #492]	; (243c <LEDDebug(LEDStruct&)+0x288>)
    2250:	f00a f8d8 	bl	c404 <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEAR"); }
    2254:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    2258:	2b01      	cmp	r3, #1
    225a:	d074      	beq.n	2346 <LEDDebug(LEDStruct&)+0x192>
    225c:	2107      	movs	r1, #7
    225e:	4878      	ldr	r0, [pc, #480]	; (2440 <LEDDebug(LEDStruct&)+0x28c>)
    2260:	f00a f8d0 	bl	c404 <usb_serial_write>
    2264:	2103      	movs	r1, #3
    2266:	4872      	ldr	r0, [pc, #456]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2268:	f00a f8cc 	bl	c404 <usb_serial_write>
    226c:	486c      	ldr	r0, [pc, #432]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    226e:	f00a facd 	bl	c80c <Print::println()>
    2272:	2114      	movs	r1, #20
    2274:	4873      	ldr	r0, [pc, #460]	; (2444 <LEDDebug(LEDStruct&)+0x290>)
    2276:	f00a f8c5 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    227a:	2300      	movs	r3, #0
    227c:	220a      	movs	r2, #10
    227e:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    2282:	4867      	ldr	r0, [pc, #412]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2284:	f00a fad2 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2288:	2103      	movs	r1, #3
    228a:	4869      	ldr	r0, [pc, #420]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    228c:	f00a f8ba 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2290:	4863      	ldr	r0, [pc, #396]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2292:	f00a fabb 	bl	c80c <Print::println()>
    2296:	2115      	movs	r1, #21
    2298:	486b      	ldr	r0, [pc, #428]	; (2448 <LEDDebug(LEDStruct&)+0x294>)
    229a:	f00a f8b3 	bl	c404 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    229e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22a2:	485f      	ldr	r0, [pc, #380]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22a4:	f00a fb02 	bl	c8ac <Print::print(long)>
    22a8:	2103      	movs	r1, #3
    22aa:	4861      	ldr	r0, [pc, #388]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    22ac:	f00a f8aa 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22b0:	485b      	ldr	r0, [pc, #364]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22b2:	f00a faab 	bl	c80c <Print::println()>
    22b6:	2111      	movs	r1, #17
    22b8:	4864      	ldr	r0, [pc, #400]	; (244c <LEDDebug(LEDStruct&)+0x298>)
    22ba:	f00a f8a3 	bl	c404 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22be:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    22c2:	4857      	ldr	r0, [pc, #348]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22c4:	f00a faf2 	bl	c8ac <Print::print(long)>
    22c8:	2103      	movs	r1, #3
    22ca:	4859      	ldr	r0, [pc, #356]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    22cc:	f00a f89a 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22d0:	4853      	ldr	r0, [pc, #332]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22d2:	f00a fa9b 	bl	c80c <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    22d6:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    22da:	bb53      	cbnz	r3, 2332 <LEDDebug(LEDStruct&)+0x17e>
    22dc:	2122      	movs	r1, #34	; 0x22
    22de:	4851      	ldr	r0, [pc, #324]	; (2424 <LEDDebug(LEDStruct&)+0x270>)
    22e0:	f00a f890 	bl	c404 <usb_serial_write>
    22e4:	484e      	ldr	r0, [pc, #312]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    22e6:	f00a fa91 	bl	c80c <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    22ea:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    22ee:	2b1c      	cmp	r3, #28
    22f0:	f200 84b7 	bhi.w	2c62 <LEDDebug(LEDStruct&)+0xaae>
    22f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    22f8:	04b500c0 	.word	0x04b500c0
    22fc:	04b504b5 	.word	0x04b504b5
    2300:	04b504b5 	.word	0x04b504b5
    2304:	013d04b5 	.word	0x013d04b5
    2308:	04b504b5 	.word	0x04b504b5
    230c:	04b504b5 	.word	0x04b504b5
    2310:	04b50198 	.word	0x04b50198
    2314:	04b504b5 	.word	0x04b504b5
    2318:	01af01a4 	.word	0x01af01a4
    231c:	01b301b1 	.word	0x01b301b1
    2320:	027901f8 	.word	0x027901f8
    2324:	03b40358 	.word	0x03b40358
    2328:	03f304b5 	.word	0x03f304b5
    232c:	04720449 	.word	0x04720449
    2330:	002c      	.short	0x002c
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2332:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    2336:	f7ff fc2f 	bl	1b98 <print_palette(unsigned char)>
    233a:	e7cf      	b.n	22dc <LEDDebug(LEDStruct&)+0x128>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    233c:	4944      	ldr	r1, [pc, #272]	; (2450 <LEDDebug(LEDStruct&)+0x29c>)
    233e:	4838      	ldr	r0, [pc, #224]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2340:	f7fe fb42 	bl	9c8 <Print::println(char const*)>
    2344:	e74e      	b.n	21e4 <LEDDebug(LEDStruct&)+0x30>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2346:	4943      	ldr	r1, [pc, #268]	; (2454 <LEDDebug(LEDStruct&)+0x2a0>)
    2348:	4835      	ldr	r0, [pc, #212]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    234a:	f7fe fb2f 	bl	9ac <Print::write(char const*)>
    234e:	e789      	b.n	2264 <LEDDebug(LEDStruct&)+0xb0>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2350:	4941      	ldr	r1, [pc, #260]	; (2458 <LEDDebug(LEDStruct&)+0x2a4>)
    2352:	4833      	ldr	r0, [pc, #204]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2354:	f7fe fb38 	bl	9c8 <Print::println(char const*)>
    2358:	4940      	ldr	r1, [pc, #256]	; (245c <LEDDebug(LEDStruct&)+0x2a8>)
    235a:	4831      	ldr	r0, [pc, #196]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    235c:	f7fe fb26 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2360:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2364:	482e      	ldr	r0, [pc, #184]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2366:	f00a faa1 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    236a:	4931      	ldr	r1, [pc, #196]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    236c:	482c      	ldr	r0, [pc, #176]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    236e:	f7fe fb2b 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2372:	493b      	ldr	r1, [pc, #236]	; (2460 <LEDDebug(LEDStruct&)+0x2ac>)
    2374:	482a      	ldr	r0, [pc, #168]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2376:	f7fe fb19 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    237a:	2300      	movs	r3, #0
    237c:	220a      	movs	r2, #10
    237e:	f894 1834 	ldrb.w	r1, [r4, #2100]	; 0x834
    2382:	4827      	ldr	r0, [pc, #156]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2384:	f00a fa52 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2388:	4929      	ldr	r1, [pc, #164]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    238a:	4825      	ldr	r0, [pc, #148]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    238c:	f7fe fb1c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2390:	4934      	ldr	r1, [pc, #208]	; (2464 <LEDDebug(LEDStruct&)+0x2b0>)
    2392:	4823      	ldr	r0, [pc, #140]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2394:	f7fe fb0a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2398:	2300      	movs	r3, #0
    239a:	220a      	movs	r2, #10
    239c:	f894 1835 	ldrb.w	r1, [r4, #2101]	; 0x835
    23a0:	481f      	ldr	r0, [pc, #124]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23a2:	f00a fa43 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    23a6:	4922      	ldr	r1, [pc, #136]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    23a8:	481d      	ldr	r0, [pc, #116]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23aa:	f7fe fb0d 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ae:	492e      	ldr	r1, [pc, #184]	; (2468 <LEDDebug(LEDStruct&)+0x2b4>)
    23b0:	481b      	ldr	r0, [pc, #108]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23b2:	f7fe fafb 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23b6:	2300      	movs	r3, #0
    23b8:	220a      	movs	r2, #10
    23ba:	f894 1836 	ldrb.w	r1, [r4, #2102]	; 0x836
    23be:	4818      	ldr	r0, [pc, #96]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23c0:	f00a fa34 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) plasma_beat3:\t");
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
    23c4:	491a      	ldr	r1, [pc, #104]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    23c6:	4816      	ldr	r0, [pc, #88]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23c8:	f7fe fafe 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23cc:	4927      	ldr	r1, [pc, #156]	; (246c <LEDDebug(LEDStruct&)+0x2b8>)
    23ce:	4814      	ldr	r0, [pc, #80]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23d0:	f7fe faec 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23d4:	2300      	movs	r3, #0
    23d6:	220a      	movs	r2, #10
    23d8:	f894 1839 	ldrb.w	r1, [r4, #2105]	; 0x839
    23dc:	4810      	ldr	r0, [pc, #64]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23de:	f00a fa25 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) plasma_range1:\t");
			Serial.print(leds.plasma_range1);
			Serial.println("\t||");
    23e2:	4913      	ldr	r1, [pc, #76]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    23e4:	480e      	ldr	r0, [pc, #56]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23e6:	f7fe faef 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ea:	4921      	ldr	r1, [pc, #132]	; (2470 <LEDDebug(LEDStruct&)+0x2bc>)
    23ec:	480c      	ldr	r0, [pc, #48]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23ee:	f7fe fadd 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23f2:	f894 183a 	ldrb.w	r1, [r4, #2106]	; 0x83a
    23f6:	480a      	ldr	r0, [pc, #40]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    23f8:	2300      	movs	r3, #0
    23fa:	220a      	movs	r2, #10
    23fc:	f00a fa16 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) plasma_range2:\t");
			Serial.print(leds.plasma_range2);
			Serial.println("\t||");
    2400:	490b      	ldr	r1, [pc, #44]	; (2430 <LEDDebug(LEDStruct&)+0x27c>)
    2402:	4807      	ldr	r0, [pc, #28]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
    2404:	f7fe fae0 	bl	9c8 <Print::println(char const*)>
    2408:	2123      	movs	r1, #35	; 0x23
    240a:	481a      	ldr	r0, [pc, #104]	; (2474 <LEDDebug(LEDStruct&)+0x2c0>)
    240c:	f009 fffa 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2410:	4803      	ldr	r0, [pc, #12]	; (2420 <LEDDebug(LEDStruct&)+0x26c>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    2412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2416:	f00a b9f9 	b.w	c80c <Print::println()>
    241a:	bf00      	nop
    241c:	0000fa24 	.word	0x0000fa24
    2420:	1fff878c 	.word	0x1fff878c
    2424:	0000f868 	.word	0x0000f868
    2428:	0000f8d4 	.word	0x0000f8d4
    242c:	1fff871e 	.word	0x1fff871e
    2430:	0000f8e8 	.word	0x0000f8e8
    2434:	0000f8ec 	.word	0x0000f8ec
    2438:	0000f900 	.word	0x0000f900
    243c:	0000f914 	.word	0x0000f914
    2440:	0000f930 	.word	0x0000f930
    2444:	0000f938 	.word	0x0000f938
    2448:	0000f950 	.word	0x0000f950
    244c:	0000f968 	.word	0x0000f968
    2450:	0000f88c 	.word	0x0000f88c
    2454:	0000f928 	.word	0x0000f928
    2458:	00010184 	.word	0x00010184
    245c:	0000f9e8 	.word	0x0000f9e8
    2460:	000101a8 	.word	0x000101a8
    2464:	000101c0 	.word	0x000101c0
    2468:	000101d8 	.word	0x000101d8
    246c:	000101f0 	.word	0x000101f0
    2470:	00010208 	.word	0x00010208
    2474:	00010244 	.word	0x00010244
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    2478:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    247c:	2b04      	cmp	r3, #4
    247e:	f000 84b9 	beq.w	2df4 <LEDDebug(LEDStruct&)+0xc40>
			else if(leds.mode_name == MULTI_JUGGLE)	{ Serial.println("===========MULTI JUGGLE==========="); }
    2482:	2b06      	cmp	r3, #6
    2484:	bf0c      	ite	eq
    2486:	4982      	ldreq	r1, [pc, #520]	; (2690 <LEDDebug(LEDStruct&)+0x4dc>)
			else									{ Serial.println("==============JUGGLE=============="); } // 34 characters
    2488:	4982      	ldrne	r1, [pc, #520]	; (2694 <LEDDebug(LEDStruct&)+0x4e0>)
    248a:	4883      	ldr	r0, [pc, #524]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    248c:	f7fe fa9c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2490:	4982      	ldr	r1, [pc, #520]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    2492:	4881      	ldr	r0, [pc, #516]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2494:	f7fe fa8a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2498:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    249c:	487e      	ldr	r0, [pc, #504]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    249e:	f00a fa05 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24a2:	497f      	ldr	r1, [pc, #508]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24a4:	487c      	ldr	r0, [pc, #496]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24a6:	f7fe fa8f 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24aa:	497e      	ldr	r1, [pc, #504]	; (26a4 <LEDDebug(LEDStruct&)+0x4f0>)
    24ac:	487a      	ldr	r0, [pc, #488]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24ae:	f7fe fa7d 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24b2:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    24b6:	4878      	ldr	r0, [pc, #480]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24b8:	f00a f9f8 	bl	c8ac <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    24bc:	4978      	ldr	r1, [pc, #480]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24be:	4876      	ldr	r0, [pc, #472]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24c0:	f7fe fa82 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24c4:	4978      	ldr	r1, [pc, #480]	; (26a8 <LEDDebug(LEDStruct&)+0x4f4>)
    24c6:	4874      	ldr	r0, [pc, #464]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24c8:	f7fe fa70 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24cc:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    24d0:	4871      	ldr	r0, [pc, #452]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24d2:	f00a f9eb 	bl	c8ac <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    24d6:	4972      	ldr	r1, [pc, #456]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24d8:	486f      	ldr	r0, [pc, #444]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24da:	f7fe fa75 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24de:	4973      	ldr	r1, [pc, #460]	; (26ac <LEDDebug(LEDStruct&)+0x4f8>)
    24e0:	486d      	ldr	r0, [pc, #436]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24e2:	f7fe fa63 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24e6:	2300      	movs	r3, #0
    24e8:	220a      	movs	r2, #10
    24ea:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    24ee:	486a      	ldr	r0, [pc, #424]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24f0:	f00a f99c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    24f4:	496a      	ldr	r1, [pc, #424]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    24f6:	4868      	ldr	r0, [pc, #416]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    24f8:	f7fe fa66 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24fc:	496c      	ldr	r1, [pc, #432]	; (26b0 <LEDDebug(LEDStruct&)+0x4fc>)
    24fe:	4866      	ldr	r0, [pc, #408]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2500:	f7fe fa54 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2504:	2300      	movs	r3, #0
    2506:	220a      	movs	r2, #10
    2508:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    250c:	4862      	ldr	r0, [pc, #392]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    250e:	f00a f98d 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2512:	4963      	ldr	r1, [pc, #396]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2514:	4860      	ldr	r0, [pc, #384]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2516:	f7fe fa57 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    251a:	4966      	ldr	r1, [pc, #408]	; (26b4 <LEDDebug(LEDStruct&)+0x500>)
    251c:	485e      	ldr	r0, [pc, #376]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    251e:	f7fe fa45 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2522:	2300      	movs	r3, #0
    2524:	220a      	movs	r2, #10
    2526:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    252a:	485b      	ldr	r0, [pc, #364]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    252c:	f00a f97e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2530:	495b      	ldr	r1, [pc, #364]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2532:	4859      	ldr	r0, [pc, #356]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2534:	f7fe fa48 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2538:	495f      	ldr	r1, [pc, #380]	; (26b8 <LEDDebug(LEDStruct&)+0x504>)
    253a:	4857      	ldr	r0, [pc, #348]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    253c:	f7fe fa36 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2540:	2300      	movs	r3, #0
    2542:	220a      	movs	r2, #10
    2544:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2548:	4853      	ldr	r0, [pc, #332]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    254a:	f00a f96f 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    254e:	4954      	ldr	r1, [pc, #336]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2550:	4851      	ldr	r0, [pc, #324]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2552:	f7fe fa39 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2556:	4959      	ldr	r1, [pc, #356]	; (26bc <LEDDebug(LEDStruct&)+0x508>)
    2558:	484f      	ldr	r0, [pc, #316]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    255a:	f7fe fa27 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    255e:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2562:	484d      	ldr	r0, [pc, #308]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2564:	f00a f9a2 	bl	c8ac <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2568:	494d      	ldr	r1, [pc, #308]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    256a:	484b      	ldr	r0, [pc, #300]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    256c:	f7fe fa2c 	bl	9c8 <Print::println(char const*)>
			break;
    2570:	e74a      	b.n	2408 <LEDDebug(LEDStruct&)+0x254>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    2572:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2576:	2b08      	cmp	r3, #8
    2578:	f000 841a 	beq.w	2db0 <LEDDebug(LEDStruct&)+0xbfc>
    257c:	2b0a      	cmp	r3, #10
    257e:	f000 8433 	beq.w	2de8 <LEDDebug(LEDStruct&)+0xc34>
    2582:	2b07      	cmp	r3, #7
    2584:	d103      	bne.n	258e <LEDDebug(LEDStruct&)+0x3da>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    2586:	494e      	ldr	r1, [pc, #312]	; (26c0 <LEDDebug(LEDStruct&)+0x50c>)
    2588:	4843      	ldr	r0, [pc, #268]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    258a:	f7fe fa1d 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    258e:	4943      	ldr	r1, [pc, #268]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    2590:	4841      	ldr	r0, [pc, #260]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2592:	f7fe fa0b 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2596:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    259a:	483f      	ldr	r0, [pc, #252]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    259c:	f00a f986 	bl	c8ac <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    25a0:	493f      	ldr	r1, [pc, #252]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25a2:	483d      	ldr	r0, [pc, #244]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25a4:	f7fe fa10 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25a8:	4946      	ldr	r1, [pc, #280]	; (26c4 <LEDDebug(LEDStruct&)+0x510>)
    25aa:	483b      	ldr	r0, [pc, #236]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25ac:	f7fe f9fe 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25b0:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    25b4:	4838      	ldr	r0, [pc, #224]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25b6:	f00a f979 	bl	c8ac <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    25ba:	4939      	ldr	r1, [pc, #228]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25bc:	4836      	ldr	r0, [pc, #216]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25be:	f7fe fa03 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25c2:	4941      	ldr	r1, [pc, #260]	; (26c8 <LEDDebug(LEDStruct&)+0x514>)
    25c4:	4834      	ldr	r0, [pc, #208]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25c6:	f7fe f9f1 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25ca:	2300      	movs	r3, #0
    25cc:	220a      	movs	r2, #10
    25ce:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    25d2:	4831      	ldr	r0, [pc, #196]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25d4:	f00a f92a 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    25d8:	4931      	ldr	r1, [pc, #196]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25da:	482f      	ldr	r0, [pc, #188]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25dc:	f7fe f9f4 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25e0:	493a      	ldr	r1, [pc, #232]	; (26cc <LEDDebug(LEDStruct&)+0x518>)
    25e2:	482d      	ldr	r0, [pc, #180]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25e4:	f7fe f9e2 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25e8:	2300      	movs	r3, #0
    25ea:	220a      	movs	r2, #10
    25ec:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    25f0:	4829      	ldr	r0, [pc, #164]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25f2:	f00a f91b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    25f6:	492a      	ldr	r1, [pc, #168]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    25f8:	4827      	ldr	r0, [pc, #156]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    25fa:	f7fe f9e5 	bl	9c8 <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    25fe:	f894 522c 	ldrb.w	r5, [r4, #556]	; 0x22c
    2602:	2d0a      	cmp	r5, #10
    2604:	f47f af00 	bne.w	2408 <LEDDebug(LEDStruct&)+0x254>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2608:	4931      	ldr	r1, [pc, #196]	; (26d0 <LEDDebug(LEDStruct&)+0x51c>)
    260a:	4823      	ldr	r0, [pc, #140]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    260c:	f7fe f9ce 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2610:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2614:	4820      	ldr	r0, [pc, #128]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2616:	462a      	mov	r2, r5
    2618:	2300      	movs	r3, #0
    261a:	f00a f907 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (e) juggle_beat:\t");
				Serial.print(leds.juggle_beat);
				Serial.println("\t||");
    261e:	4920      	ldr	r1, [pc, #128]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    2620:	481d      	ldr	r0, [pc, #116]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2622:	f7fe f9d1 	bl	9c8 <Print::println(char const*)>
    2626:	e6ef      	b.n	2408 <LEDDebug(LEDStruct&)+0x254>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    2628:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    262c:	3b0c      	subs	r3, #12
    262e:	2b03      	cmp	r3, #3
    2630:	f200 8376 	bhi.w	2d20 <LEDDebug(LEDStruct&)+0xb6c>
    2634:	e8df f013 	tbh	[pc, r3, lsl #1]
    2638:	037003d1 	.word	0x037003d1
    263c:	03c703cc 	.word	0x03c703cc
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    2640:	4924      	ldr	r1, [pc, #144]	; (26d4 <LEDDebug(LEDStruct&)+0x520>)
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2642:	4815      	ldr	r0, [pc, #84]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2644:	f7fe f9c0 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2648:	4914      	ldr	r1, [pc, #80]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    264a:	4813      	ldr	r0, [pc, #76]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    264c:	f7fe f9ae 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2650:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2654:	e785      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
    2656:	4920      	ldr	r1, [pc, #128]	; (26d8 <LEDDebug(LEDStruct&)+0x524>)
    2658:	e7f3      	b.n	2642 <LEDDebug(LEDStruct&)+0x48e>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    265a:	4920      	ldr	r1, [pc, #128]	; (26dc <LEDDebug(LEDStruct&)+0x528>)
    265c:	e7f1      	b.n	2642 <LEDDebug(LEDStruct&)+0x48e>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    265e:	4920      	ldr	r1, [pc, #128]	; (26e0 <LEDDebug(LEDStruct&)+0x52c>)
    2660:	480d      	ldr	r0, [pc, #52]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2662:	f7fe f9b1 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2666:	490d      	ldr	r1, [pc, #52]	; (269c <LEDDebug(LEDStruct&)+0x4e8>)
    2668:	480b      	ldr	r0, [pc, #44]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    266a:	f7fe f99f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    266e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2672:	4809      	ldr	r0, [pc, #36]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2674:	f00a f91a 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2678:	4909      	ldr	r1, [pc, #36]	; (26a0 <LEDDebug(LEDStruct&)+0x4ec>)
    267a:	4807      	ldr	r0, [pc, #28]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    267c:	f7fe f9a4 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2680:	4918      	ldr	r1, [pc, #96]	; (26e4 <LEDDebug(LEDStruct&)+0x530>)
    2682:	4805      	ldr	r0, [pc, #20]	; (2698 <LEDDebug(LEDStruct&)+0x4e4>)
    2684:	f7fe f992 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2688:	f894 133a 	ldrb.w	r1, [r4, #826]	; 0x33a
    268c:	e6b3      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
    268e:	bf00      	nop
    2690:	0000f9a0 	.word	0x0000f9a0
    2694:	0000f9c4 	.word	0x0000f9c4
    2698:	1fff878c 	.word	0x1fff878c
    269c:	0000f9e8 	.word	0x0000f9e8
    26a0:	0000f8e8 	.word	0x0000f8e8
    26a4:	0000fa00 	.word	0x0000fa00
    26a8:	0000fa14 	.word	0x0000fa14
    26ac:	0000fa28 	.word	0x0000fa28
    26b0:	0000fa3c 	.word	0x0000fa3c
    26b4:	0000fa4c 	.word	0x0000fa4c
    26b8:	0000fa5c 	.word	0x0000fa5c
    26bc:	0000fa6c 	.word	0x0000fa6c
    26c0:	0000fa84 	.word	0x0000fa84
    26c4:	0000faf0 	.word	0x0000faf0
    26c8:	0000fb00 	.word	0x0000fb00
    26cc:	0000fb10 	.word	0x0000fb10
    26d0:	0000fb20 	.word	0x0000fb20
    26d4:	0000fc28 	.word	0x0000fc28
    26d8:	0000fc4c 	.word	0x0000fc4c
    26dc:	0000fc70 	.word	0x0000fc70
    26e0:	0000fc94 	.word	0x0000fc94
    26e4:	0000fcb8 	.word	0x0000fcb8
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    26e8:	4997      	ldr	r1, [pc, #604]	; (2948 <LEDDebug(LEDStruct&)+0x794>)
    26ea:	4898      	ldr	r0, [pc, #608]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    26ec:	f7fe f96c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26f0:	4997      	ldr	r1, [pc, #604]	; (2950 <LEDDebug(LEDStruct&)+0x79c>)
    26f2:	4896      	ldr	r0, [pc, #600]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    26f4:	f7fe f95a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26f8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26fc:	4893      	ldr	r0, [pc, #588]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    26fe:	f00a f8d5 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2702:	4994      	ldr	r1, [pc, #592]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2704:	4891      	ldr	r0, [pc, #580]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2706:	f7fe f95f 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    270a:	4993      	ldr	r1, [pc, #588]	; (2958 <LEDDebug(LEDStruct&)+0x7a4>)
    270c:	488f      	ldr	r0, [pc, #572]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    270e:	f7fe f94d 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2712:	2300      	movs	r3, #0
    2714:	220a      	movs	r2, #10
    2716:	f894 133b 	ldrb.w	r1, [r4, #827]	; 0x33b
    271a:	488c      	ldr	r0, [pc, #560]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    271c:	f00a f886 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2720:	498c      	ldr	r1, [pc, #560]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2722:	488a      	ldr	r0, [pc, #552]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2724:	f7fe f950 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2728:	498c      	ldr	r1, [pc, #560]	; (295c <LEDDebug(LEDStruct&)+0x7a8>)
    272a:	4888      	ldr	r0, [pc, #544]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    272c:	f7fe f93e 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2730:	2300      	movs	r3, #0
    2732:	220a      	movs	r2, #10
    2734:	f894 133c 	ldrb.w	r1, [r4, #828]	; 0x33c
    2738:	4884      	ldr	r0, [pc, #528]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    273a:	f00a f877 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    273e:	4985      	ldr	r1, [pc, #532]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2740:	4882      	ldr	r0, [pc, #520]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2742:	f7fe f941 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2746:	4986      	ldr	r1, [pc, #536]	; (2960 <LEDDebug(LEDStruct&)+0x7ac>)
    2748:	4880      	ldr	r0, [pc, #512]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    274a:	f7fe f92f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    274e:	2300      	movs	r3, #0
    2750:	220a      	movs	r2, #10
    2752:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
    2756:	487d      	ldr	r0, [pc, #500]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2758:	f00a f868 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    275c:	497d      	ldr	r1, [pc, #500]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    275e:	487b      	ldr	r0, [pc, #492]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2760:	f7fe f932 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2764:	497f      	ldr	r1, [pc, #508]	; (2964 <LEDDebug(LEDStruct&)+0x7b0>)
    2766:	4879      	ldr	r0, [pc, #484]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2768:	f7fe f920 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    276c:	2300      	movs	r3, #0
    276e:	220a      	movs	r2, #10
    2770:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2774:	4875      	ldr	r0, [pc, #468]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2776:	f00a f859 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    277a:	4976      	ldr	r1, [pc, #472]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    277c:	4873      	ldr	r0, [pc, #460]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    277e:	f7fe f923 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2782:	4979      	ldr	r1, [pc, #484]	; (2968 <LEDDebug(LEDStruct&)+0x7b4>)
    2784:	4871      	ldr	r0, [pc, #452]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2786:	f7fe f911 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    278a:	2300      	movs	r3, #0
    278c:	220a      	movs	r2, #10
    278e:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2792:	486e      	ldr	r0, [pc, #440]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2794:	f00a f84a 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2798:	496e      	ldr	r1, [pc, #440]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    279a:	486c      	ldr	r0, [pc, #432]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    279c:	f7fe f914 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27a0:	4972      	ldr	r1, [pc, #456]	; (296c <LEDDebug(LEDStruct&)+0x7b8>)
    27a2:	486a      	ldr	r0, [pc, #424]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27a4:	f7fe f902 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27a8:	2300      	movs	r3, #0
    27aa:	220a      	movs	r2, #10
    27ac:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    27b0:	4866      	ldr	r0, [pc, #408]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27b2:	f00a f83b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    27b6:	4967      	ldr	r1, [pc, #412]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    27b8:	4864      	ldr	r0, [pc, #400]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27ba:	f7fe f905 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27be:	496c      	ldr	r1, [pc, #432]	; (2970 <LEDDebug(LEDStruct&)+0x7bc>)
    27c0:	4862      	ldr	r0, [pc, #392]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27c2:	f7fe f8f3 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27c6:	2300      	movs	r3, #0
    27c8:	220a      	movs	r2, #10
    27ca:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    27ce:	485f      	ldr	r0, [pc, #380]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27d0:	f00a f82c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    27d4:	495f      	ldr	r1, [pc, #380]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    27d6:	485d      	ldr	r0, [pc, #372]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27d8:	f7fe f8f6 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27dc:	4965      	ldr	r1, [pc, #404]	; (2974 <LEDDebug(LEDStruct&)+0x7c0>)
    27de:	485b      	ldr	r0, [pc, #364]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27e0:	f7fe f8e4 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27e4:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    27e8:	e605      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    27ea:	4963      	ldr	r1, [pc, #396]	; (2978 <LEDDebug(LEDStruct&)+0x7c4>)
    27ec:	4857      	ldr	r0, [pc, #348]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27ee:	f7fe f8eb 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27f2:	4957      	ldr	r1, [pc, #348]	; (2950 <LEDDebug(LEDStruct&)+0x79c>)
    27f4:	4855      	ldr	r0, [pc, #340]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    27f6:	f7fe f8d9 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27fa:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27fe:	4853      	ldr	r0, [pc, #332]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2800:	f00a f854 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2804:	4953      	ldr	r1, [pc, #332]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2806:	4851      	ldr	r0, [pc, #324]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2808:	f7fe f8de 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    280c:	495b      	ldr	r1, [pc, #364]	; (297c <LEDDebug(LEDStruct&)+0x7c8>)
    280e:	484f      	ldr	r0, [pc, #316]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2810:	f7fe f8cc 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2814:	2300      	movs	r3, #0
    2816:	220a      	movs	r2, #10
    2818:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    281c:	484b      	ldr	r0, [pc, #300]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    281e:	f00a f805 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    2822:	494c      	ldr	r1, [pc, #304]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2824:	4849      	ldr	r0, [pc, #292]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2826:	f7fe f8cf 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    282a:	4955      	ldr	r1, [pc, #340]	; (2980 <LEDDebug(LEDStruct&)+0x7cc>)
    282c:	4847      	ldr	r0, [pc, #284]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    282e:	f7fe f8bd 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2832:	2300      	movs	r3, #0
    2834:	220a      	movs	r2, #10
    2836:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    283a:	4844      	ldr	r0, [pc, #272]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    283c:	f009 fff6 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    2840:	4944      	ldr	r1, [pc, #272]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2842:	4842      	ldr	r0, [pc, #264]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2844:	f7fe f8c0 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2848:	494e      	ldr	r1, [pc, #312]	; (2984 <LEDDebug(LEDStruct&)+0x7d0>)
    284a:	4840      	ldr	r0, [pc, #256]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    284c:	f7fe f8ae 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2850:	2300      	movs	r3, #0
    2852:	220a      	movs	r2, #10
    2854:	f894 133c 	ldrb.w	r1, [r4, #828]	; 0x33c
    2858:	483c      	ldr	r0, [pc, #240]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    285a:	f009 ffe7 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    285e:	493d      	ldr	r1, [pc, #244]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2860:	483a      	ldr	r0, [pc, #232]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2862:	f7fe f8b1 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2866:	4948      	ldr	r1, [pc, #288]	; (2988 <LEDDebug(LEDStruct&)+0x7d4>)
    2868:	4838      	ldr	r0, [pc, #224]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    286a:	f7fe f89f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    286e:	2300      	movs	r3, #0
    2870:	220a      	movs	r2, #10
    2872:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    2876:	4835      	ldr	r0, [pc, #212]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2878:	f009 ffd8 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    287c:	4935      	ldr	r1, [pc, #212]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    287e:	4833      	ldr	r0, [pc, #204]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2880:	f7fe f8a2 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2884:	4941      	ldr	r1, [pc, #260]	; (298c <LEDDebug(LEDStruct&)+0x7d8>)
    2886:	4831      	ldr	r0, [pc, #196]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2888:	f7fe f890 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    288c:	2300      	movs	r3, #0
    288e:	220a      	movs	r2, #10
    2890:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2894:	482d      	ldr	r0, [pc, #180]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2896:	f009 ffc9 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    289a:	492e      	ldr	r1, [pc, #184]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    289c:	482b      	ldr	r0, [pc, #172]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    289e:	f7fe f893 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28a2:	493b      	ldr	r1, [pc, #236]	; (2990 <LEDDebug(LEDStruct&)+0x7dc>)
    28a4:	4829      	ldr	r0, [pc, #164]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28a6:	f7fe f881 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28aa:	2300      	movs	r3, #0
    28ac:	220a      	movs	r2, #10
    28ae:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    28b2:	4826      	ldr	r0, [pc, #152]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28b4:	f009 ffba 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    28b8:	4926      	ldr	r1, [pc, #152]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    28ba:	4824      	ldr	r0, [pc, #144]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28bc:	f7fe f884 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28c0:	4934      	ldr	r1, [pc, #208]	; (2994 <LEDDebug(LEDStruct&)+0x7e0>)
    28c2:	4822      	ldr	r0, [pc, #136]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28c4:	f7fe f872 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c8:	2300      	movs	r3, #0
    28ca:	220a      	movs	r2, #10
    28cc:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
    28d0:	481e      	ldr	r0, [pc, #120]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28d2:	f009 ffab 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    28d6:	491f      	ldr	r1, [pc, #124]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    28d8:	481c      	ldr	r0, [pc, #112]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28da:	f7fe f875 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28de:	492e      	ldr	r1, [pc, #184]	; (2998 <LEDDebug(LEDStruct&)+0x7e4>)
    28e0:	481a      	ldr	r0, [pc, #104]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28e2:	f7fe f863 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28e6:	2300      	movs	r3, #0
    28e8:	220a      	movs	r2, #10
    28ea:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    28ee:	4817      	ldr	r0, [pc, #92]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28f0:	f009 ff9c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    28f4:	4917      	ldr	r1, [pc, #92]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    28f6:	4815      	ldr	r0, [pc, #84]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    28f8:	f7fe f866 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28fc:	4927      	ldr	r1, [pc, #156]	; (299c <LEDDebug(LEDStruct&)+0x7e8>)
    28fe:	4813      	ldr	r0, [pc, #76]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2900:	f7fe f854 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2904:	2300      	movs	r3, #0
    2906:	220a      	movs	r2, #10
    2908:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    290c:	480f      	ldr	r0, [pc, #60]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    290e:	f009 ff8d 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2912:	4910      	ldr	r1, [pc, #64]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2914:	480d      	ldr	r0, [pc, #52]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2916:	f7fe f857 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    291a:	4921      	ldr	r1, [pc, #132]	; (29a0 <LEDDebug(LEDStruct&)+0x7ec>)
    291c:	480b      	ldr	r0, [pc, #44]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    291e:	f7fe f845 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2922:	2300      	movs	r3, #0
    2924:	220a      	movs	r2, #10
    2926:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    292a:	4808      	ldr	r0, [pc, #32]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    292c:	f009 ff7e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    2930:	4908      	ldr	r1, [pc, #32]	; (2954 <LEDDebug(LEDStruct&)+0x7a0>)
    2932:	4806      	ldr	r0, [pc, #24]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    2934:	f7fe f848 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2938:	491a      	ldr	r1, [pc, #104]	; (29a4 <LEDDebug(LEDStruct&)+0x7f0>)
    293a:	4804      	ldr	r0, [pc, #16]	; (294c <LEDDebug(LEDStruct&)+0x798>)
    293c:	f7fe f836 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2940:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2944:	e557      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
    2946:	bf00      	nop
    2948:	0000fda0 	.word	0x0000fda0
    294c:	1fff878c 	.word	0x1fff878c
    2950:	0000f9e8 	.word	0x0000f9e8
    2954:	0000f8e8 	.word	0x0000f8e8
    2958:	0000fdc4 	.word	0x0000fdc4
    295c:	0000fdd8 	.word	0x0000fdd8
    2960:	0000fdec 	.word	0x0000fdec
    2964:	0000fe00 	.word	0x0000fe00
    2968:	0000fe14 	.word	0x0000fe14
    296c:	0000fe28 	.word	0x0000fe28
    2970:	0000fe3c 	.word	0x0000fe3c
    2974:	0000fe50 	.word	0x0000fe50
    2978:	0000fe64 	.word	0x0000fe64
    297c:	0000fe88 	.word	0x0000fe88
    2980:	0000fe9c 	.word	0x0000fe9c
    2984:	0000feb0 	.word	0x0000feb0
    2988:	0000fec4 	.word	0x0000fec4
    298c:	0000fed8 	.word	0x0000fed8
    2990:	0000feec 	.word	0x0000feec
    2994:	0000ff00 	.word	0x0000ff00
    2998:	0000ff14 	.word	0x0000ff14
    299c:	0000ff28 	.word	0x0000ff28
    29a0:	0000ff3c 	.word	0x0000ff3c
    29a4:	0000ff50 	.word	0x0000ff50
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    29a8:	49b8      	ldr	r1, [pc, #736]	; (2c8c <LEDDebug(LEDStruct&)+0xad8>)
    29aa:	48b9      	ldr	r0, [pc, #740]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29ac:	f7fe f80c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b0:	49b8      	ldr	r1, [pc, #736]	; (2c94 <LEDDebug(LEDStruct&)+0xae0>)
    29b2:	48b7      	ldr	r0, [pc, #732]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29b4:	f7fd fffa 	bl	9ac <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    29b8:	f894 3350 	ldrb.w	r3, [r4, #848]	; 0x350
    29bc:	2b01      	cmp	r3, #1
    29be:	f000 81fd 	beq.w	2dbc <LEDDebug(LEDStruct&)+0xc08>
    29c2:	f0c0 820f 	bcc.w	2de4 <LEDDebug(LEDStruct&)+0xc30>
    29c6:	2b02      	cmp	r3, #2
    29c8:	d107      	bne.n	29da <LEDDebug(LEDStruct&)+0x826>
    29ca:	49b3      	ldr	r1, [pc, #716]	; (2c98 <LEDDebug(LEDStruct&)+0xae4>)
    29cc:	48b0      	ldr	r0, [pc, #704]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29ce:	f7fd ffed 	bl	9ac <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    29d2:	49b2      	ldr	r1, [pc, #712]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    29d4:	48ae      	ldr	r0, [pc, #696]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29d6:	f7fd fff7 	bl	9c8 <Print::println(char const*)>
    29da:	49b1      	ldr	r1, [pc, #708]	; (2ca0 <LEDDebug(LEDStruct&)+0xaec>)
    29dc:	48ac      	ldr	r0, [pc, #688]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29de:	f7fd ffe5 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29e2:	2300      	movs	r3, #0
    29e4:	220a      	movs	r2, #10
    29e6:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    29ea:	48a9      	ldr	r0, [pc, #676]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29ec:	f009 ff1e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    29f0:	49aa      	ldr	r1, [pc, #680]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    29f2:	48a7      	ldr	r0, [pc, #668]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29f4:	f7fd ffe8 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29f8:	49aa      	ldr	r1, [pc, #680]	; (2ca4 <LEDDebug(LEDStruct&)+0xaf0>)
    29fa:	48a5      	ldr	r0, [pc, #660]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    29fc:	f7fd ffd6 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a00:	2300      	movs	r3, #0
    2a02:	220a      	movs	r2, #10
    2a04:	f894 1359 	ldrb.w	r1, [r4, #857]	; 0x359
    2a08:	48a1      	ldr	r0, [pc, #644]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a0a:	f009 ff0f 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    2a0e:	49a3      	ldr	r1, [pc, #652]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a10:	489f      	ldr	r0, [pc, #636]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a12:	f7fd ffd9 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a16:	49a4      	ldr	r1, [pc, #656]	; (2ca8 <LEDDebug(LEDStruct&)+0xaf4>)
    2a18:	489d      	ldr	r0, [pc, #628]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a1a:	f7fd ffc7 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a1e:	2300      	movs	r3, #0
    2a20:	220a      	movs	r2, #10
    2a22:	f894 1758 	ldrb.w	r1, [r4, #1880]	; 0x758
    2a26:	489a      	ldr	r0, [pc, #616]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a28:	f009 ff00 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2a2c:	499b      	ldr	r1, [pc, #620]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a2e:	4898      	ldr	r0, [pc, #608]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a30:	f7fd ffca 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a34:	499d      	ldr	r1, [pc, #628]	; (2cac <LEDDebug(LEDStruct&)+0xaf8>)
    2a36:	4896      	ldr	r0, [pc, #600]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a38:	f7fd ffb8 	bl	9ac <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2a3c:	2300      	movs	r3, #0
    2a3e:	220a      	movs	r2, #10
    2a40:	f8d4 1354 	ldr.w	r1, [r4, #852]	; 0x354
    2a44:	4892      	ldr	r0, [pc, #584]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a46:	f009 fef1 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2a4a:	4994      	ldr	r1, [pc, #592]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a4c:	4890      	ldr	r0, [pc, #576]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a4e:	f7fd ffbb 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a52:	4997      	ldr	r1, [pc, #604]	; (2cb0 <LEDDebug(LEDStruct&)+0xafc>)
    2a54:	488e      	ldr	r0, [pc, #568]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a56:	f7fd ffa9 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a5a:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    2a5e:	e580      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2a60:	4994      	ldr	r1, [pc, #592]	; (2cb4 <LEDDebug(LEDStruct&)+0xb00>)
    2a62:	488b      	ldr	r0, [pc, #556]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a64:	f7fd ffb0 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a68:	4993      	ldr	r1, [pc, #588]	; (2cb8 <LEDDebug(LEDStruct&)+0xb04>)
    2a6a:	4889      	ldr	r0, [pc, #548]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a6c:	f7fd ff9e 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a70:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2a74:	4886      	ldr	r0, [pc, #536]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a76:	f009 ff19 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2a7a:	4988      	ldr	r1, [pc, #544]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a7c:	4884      	ldr	r0, [pc, #528]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a7e:	f7fd ffa3 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a82:	498e      	ldr	r1, [pc, #568]	; (2cbc <LEDDebug(LEDStruct&)+0xb08>)
    2a84:	4882      	ldr	r0, [pc, #520]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a86:	f7fd ff91 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a8a:	f8b4 175a 	ldrh.w	r1, [r4, #1882]	; 0x75a
    2a8e:	4880      	ldr	r0, [pc, #512]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a90:	f009 ff0c 	bl	c8ac <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2a94:	4981      	ldr	r1, [pc, #516]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2a96:	487e      	ldr	r0, [pc, #504]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2a98:	f7fd ff96 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a9c:	4988      	ldr	r1, [pc, #544]	; (2cc0 <LEDDebug(LEDStruct&)+0xb0c>)
    2a9e:	487c      	ldr	r0, [pc, #496]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aa0:	f7fd ff84 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2aa4:	f8b4 175c 	ldrh.w	r1, [r4, #1884]	; 0x75c
    2aa8:	4879      	ldr	r0, [pc, #484]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aaa:	f009 feff 	bl	c8ac <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2aae:	497b      	ldr	r1, [pc, #492]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2ab0:	4877      	ldr	r0, [pc, #476]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ab2:	f7fd ff89 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ab6:	4983      	ldr	r1, [pc, #524]	; (2cc4 <LEDDebug(LEDStruct&)+0xb10>)
    2ab8:	4875      	ldr	r0, [pc, #468]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aba:	f7fd ff77 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2abe:	f8b4 175e 	ldrh.w	r1, [r4, #1886]	; 0x75e
    2ac2:	4873      	ldr	r0, [pc, #460]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ac4:	f009 fef2 	bl	c8ac <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2ac8:	4974      	ldr	r1, [pc, #464]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2aca:	4871      	ldr	r0, [pc, #452]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2acc:	f7fd ff7c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ad0:	497d      	ldr	r1, [pc, #500]	; (2cc8 <LEDDebug(LEDStruct&)+0xb14>)
    2ad2:	486f      	ldr	r0, [pc, #444]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ad4:	f7fd ff6a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ad8:	f894 1761 	ldrb.w	r1, [r4, #1889]	; 0x761
    2adc:	e48b      	b.n	23f6 <LEDDebug(LEDStruct&)+0x242>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2ade:	497b      	ldr	r1, [pc, #492]	; (2ccc <LEDDebug(LEDStruct&)+0xb18>)
    2ae0:	486b      	ldr	r0, [pc, #428]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ae2:	f7fd ff71 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae6:	497a      	ldr	r1, [pc, #488]	; (2cd0 <LEDDebug(LEDStruct&)+0xb1c>)
    2ae8:	4869      	ldr	r0, [pc, #420]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2aea:	f7fd ff5f 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2aee:	2300      	movs	r3, #0
    2af0:	220a      	movs	r2, #10
    2af2:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2af6:	4866      	ldr	r0, [pc, #408]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2af8:	f009 fe98 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2afc:	4967      	ldr	r1, [pc, #412]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2afe:	4864      	ldr	r0, [pc, #400]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b00:	f7fd ff62 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b04:	4973      	ldr	r1, [pc, #460]	; (2cd4 <LEDDebug(LEDStruct&)+0xb20>)
    2b06:	4862      	ldr	r0, [pc, #392]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b08:	f7fd ff50 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b0c:	2300      	movs	r3, #0
    2b0e:	220a      	movs	r2, #10
    2b10:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2b14:	485e      	ldr	r0, [pc, #376]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b16:	f009 fe89 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2b1a:	4960      	ldr	r1, [pc, #384]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b1c:	485c      	ldr	r0, [pc, #368]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b1e:	f7fd ff53 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b22:	496d      	ldr	r1, [pc, #436]	; (2cd8 <LEDDebug(LEDStruct&)+0xb24>)
    2b24:	485a      	ldr	r0, [pc, #360]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b26:	f7fd ff41 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b2a:	2300      	movs	r3, #0
    2b2c:	220a      	movs	r2, #10
    2b2e:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b32:	4857      	ldr	r0, [pc, #348]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b34:	f009 fe7a 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b38:	4958      	ldr	r1, [pc, #352]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b3a:	4855      	ldr	r0, [pc, #340]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b3c:	f7fd ff44 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b40:	4966      	ldr	r1, [pc, #408]	; (2cdc <LEDDebug(LEDStruct&)+0xb28>)
    2b42:	4853      	ldr	r0, [pc, #332]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b44:	f7fd ff32 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b48:	2300      	movs	r3, #0
    2b4a:	220a      	movs	r2, #10
    2b4c:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2b50:	484f      	ldr	r0, [pc, #316]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b52:	f009 fe6b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2b56:	4951      	ldr	r1, [pc, #324]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b58:	484d      	ldr	r0, [pc, #308]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b5a:	f7fd ff35 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b5e:	4960      	ldr	r1, [pc, #384]	; (2ce0 <LEDDebug(LEDStruct&)+0xb2c>)
    2b60:	484b      	ldr	r0, [pc, #300]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b62:	f7fd ff23 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b66:	2300      	movs	r3, #0
    2b68:	220a      	movs	r2, #10
    2b6a:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2b6e:	4848      	ldr	r0, [pc, #288]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b70:	f009 fe5c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2b74:	4949      	ldr	r1, [pc, #292]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2b76:	4846      	ldr	r0, [pc, #280]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b78:	f7fd ff26 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b7c:	4959      	ldr	r1, [pc, #356]	; (2ce4 <LEDDebug(LEDStruct&)+0xb30>)
    2b7e:	4844      	ldr	r0, [pc, #272]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b80:	f7fd ff14 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b84:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2b88:	e4eb      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2b8a:	4957      	ldr	r1, [pc, #348]	; (2ce8 <LEDDebug(LEDStruct&)+0xb34>)
    2b8c:	4840      	ldr	r0, [pc, #256]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b8e:	f7fd ff1b 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b92:	4956      	ldr	r1, [pc, #344]	; (2cec <LEDDebug(LEDStruct&)+0xb38>)
    2b94:	483e      	ldr	r0, [pc, #248]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2b96:	f7fd ff09 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b9a:	2300      	movs	r3, #0
    2b9c:	220a      	movs	r2, #10
    2b9e:	f894 1763 	ldrb.w	r1, [r4, #1891]	; 0x763
    2ba2:	483b      	ldr	r0, [pc, #236]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2ba4:	f009 fe42 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2ba8:	493c      	ldr	r1, [pc, #240]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2baa:	4839      	ldr	r0, [pc, #228]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bac:	f7fd ff0c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb0:	494f      	ldr	r1, [pc, #316]	; (2cf0 <LEDDebug(LEDStruct&)+0xb3c>)
    2bb2:	4837      	ldr	r0, [pc, #220]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bb4:	f7fd fefa 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bb8:	2300      	movs	r3, #0
    2bba:	220a      	movs	r2, #10
    2bbc:	f894 1764 	ldrb.w	r1, [r4, #1892]	; 0x764
    2bc0:	4833      	ldr	r0, [pc, #204]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bc2:	f009 fe33 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2bc6:	4935      	ldr	r1, [pc, #212]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2bc8:	4831      	ldr	r0, [pc, #196]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bca:	f7fd fefd 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bce:	4949      	ldr	r1, [pc, #292]	; (2cf4 <LEDDebug(LEDStruct&)+0xb40>)
    2bd0:	482f      	ldr	r0, [pc, #188]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bd2:	f7fd feeb 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bd6:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2bda:	e4c2      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2bdc:	4946      	ldr	r1, [pc, #280]	; (2cf8 <LEDDebug(LEDStruct&)+0xb44>)
    2bde:	482c      	ldr	r0, [pc, #176]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2be0:	f7fd fef2 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2be4:	4934      	ldr	r1, [pc, #208]	; (2cb8 <LEDDebug(LEDStruct&)+0xb04>)
    2be6:	482a      	ldr	r0, [pc, #168]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2be8:	f7fd fee0 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bec:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2bf0:	4827      	ldr	r0, [pc, #156]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bf2:	f009 fe5b 	bl	c8ac <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2bf6:	4929      	ldr	r1, [pc, #164]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2bf8:	4825      	ldr	r0, [pc, #148]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2bfa:	f7fd fee5 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bfe:	493f      	ldr	r1, [pc, #252]	; (2cfc <LEDDebug(LEDStruct&)+0xb48>)
    2c00:	4823      	ldr	r0, [pc, #140]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c02:	f7fd fed3 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c06:	2300      	movs	r3, #0
    2c08:	220a      	movs	r2, #10
    2c0a:	f894 1828 	ldrb.w	r1, [r4, #2088]	; 0x828
    2c0e:	4820      	ldr	r0, [pc, #128]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c10:	f009 fe0c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2c14:	4921      	ldr	r1, [pc, #132]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2c16:	481e      	ldr	r0, [pc, #120]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c18:	f7fd fed6 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c1c:	4938      	ldr	r1, [pc, #224]	; (2d00 <LEDDebug(LEDStruct&)+0xb4c>)
    2c1e:	481c      	ldr	r0, [pc, #112]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c20:	f7fd fec4 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c24:	2300      	movs	r3, #0
    2c26:	220a      	movs	r2, #10
    2c28:	f894 1829 	ldrb.w	r1, [r4, #2089]	; 0x829
    2c2c:	4818      	ldr	r0, [pc, #96]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c2e:	f009 fdfd 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    2c32:	491a      	ldr	r1, [pc, #104]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2c34:	4816      	ldr	r0, [pc, #88]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c36:	f7fd fec7 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c3a:	4932      	ldr	r1, [pc, #200]	; (2d04 <LEDDebug(LEDStruct&)+0xb50>)
    2c3c:	4814      	ldr	r0, [pc, #80]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c3e:	f7fd feb5 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c42:	f894 182a 	ldrb.w	r1, [r4, #2090]	; 0x82a
    2c46:	4812      	ldr	r0, [pc, #72]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c48:	f009 fe30 	bl	c8ac <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    2c4c:	4913      	ldr	r1, [pc, #76]	; (2c9c <LEDDebug(LEDStruct&)+0xae8>)
    2c4e:	4810      	ldr	r0, [pc, #64]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c50:	f7fd feba 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c54:	492c      	ldr	r1, [pc, #176]	; (2d08 <LEDDebug(LEDStruct&)+0xb54>)
    2c56:	480e      	ldr	r0, [pc, #56]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c58:	f7fd fea8 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c5c:	f894 182b 	ldrb.w	r1, [r4, #2091]	; 0x82b
    2c60:	e47f      	b.n	2562 <LEDDebug(LEDStruct&)+0x3ae>
			Serial.println("\t||");
			break;


		default:
			Serial.println("");
    2c62:	492a      	ldr	r1, [pc, #168]	; (2d0c <LEDDebug(LEDStruct&)+0xb58>)
    2c64:	480a      	ldr	r0, [pc, #40]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c66:	f7fd feaf 	bl	9c8 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2c6a:	4929      	ldr	r1, [pc, #164]	; (2d10 <LEDDebug(LEDStruct&)+0xb5c>)
    2c6c:	4808      	ldr	r0, [pc, #32]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c6e:	f7fd feab 	bl	9c8 <Print::println(char const*)>
			Serial.println("");
    2c72:	4926      	ldr	r1, [pc, #152]	; (2d0c <LEDDebug(LEDStruct&)+0xb58>)
    2c74:	4806      	ldr	r0, [pc, #24]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c76:	f7fd fea7 	bl	9c8 <Print::println(char const*)>
			break;
    2c7a:	f7ff bbc5 	b.w	2408 <LEDDebug(LEDStruct&)+0x254>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2c7e:	4925      	ldr	r1, [pc, #148]	; (2d14 <LEDDebug(LEDStruct&)+0xb60>)
    2c80:	4803      	ldr	r0, [pc, #12]	; (2c90 <LEDDebug(LEDStruct&)+0xadc>)
    2c82:	f7fd fea1 	bl	9c8 <Print::println(char const*)>
    2c86:	f7ff baad 	b.w	21e4 <LEDDebug(LEDStruct&)+0x30>
    2c8a:	bf00      	nop
    2c8c:	0000fcd0 	.word	0x0000fcd0
    2c90:	1fff878c 	.word	0x1fff878c
    2c94:	0000fcf4 	.word	0x0000fcf4
    2c98:	0000fd08 	.word	0x0000fd08
    2c9c:	0000f8e8 	.word	0x0000f8e8
    2ca0:	0000fd24 	.word	0x0000fd24
    2ca4:	0000fd3c 	.word	0x0000fd3c
    2ca8:	0000fd54 	.word	0x0000fd54
    2cac:	0000fd6c 	.word	0x0000fd6c
    2cb0:	0000fd88 	.word	0x0000fd88
    2cb4:	0000ff64 	.word	0x0000ff64
    2cb8:	0000f9e8 	.word	0x0000f9e8
    2cbc:	0000ff88 	.word	0x0000ff88
    2cc0:	0000ffa0 	.word	0x0000ffa0
    2cc4:	0000ffb8 	.word	0x0000ffb8
    2cc8:	0000ffcc 	.word	0x0000ffcc
    2ccc:	0000ffe0 	.word	0x0000ffe0
    2cd0:	00010004 	.word	0x00010004
    2cd4:	0001001c 	.word	0x0001001c
    2cd8:	00010034 	.word	0x00010034
    2cdc:	0001004c 	.word	0x0001004c
    2ce0:	00010064 	.word	0x00010064
    2ce4:	00010078 	.word	0x00010078
    2ce8:	00010090 	.word	0x00010090
    2cec:	000100b4 	.word	0x000100b4
    2cf0:	000100c4 	.word	0x000100c4
    2cf4:	000100e0 	.word	0x000100e0
    2cf8:	000100f8 	.word	0x000100f8
    2cfc:	0001011c 	.word	0x0001011c
    2d00:	00010134 	.word	0x00010134
    2d04:	00010150 	.word	0x00010150
    2d08:	0001016c 	.word	0x0001016c
    2d0c:	0000fa24 	.word	0x0000fa24
    2d10:	00010220 	.word	0x00010220
    2d14:	0000f8b0 	.word	0x0000f8b0
			break;

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2d18:	4939      	ldr	r1, [pc, #228]	; (2e00 <LEDDebug(LEDStruct&)+0xc4c>)
    2d1a:	483a      	ldr	r0, [pc, #232]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d1c:	f7fd fe54 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d20:	4939      	ldr	r1, [pc, #228]	; (2e08 <LEDDebug(LEDStruct&)+0xc54>)
    2d22:	4838      	ldr	r0, [pc, #224]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d24:	f7fd fe42 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d28:	2300      	movs	r3, #0
    2d2a:	220a      	movs	r2, #10
    2d2c:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2d30:	4834      	ldr	r0, [pc, #208]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d32:	f009 fd7b 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2d36:	4935      	ldr	r1, [pc, #212]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2d38:	4832      	ldr	r0, [pc, #200]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d3a:	f7fd fe45 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d3e:	4934      	ldr	r1, [pc, #208]	; (2e10 <LEDDebug(LEDStruct&)+0xc5c>)
    2d40:	4830      	ldr	r0, [pc, #192]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d42:	f7fd fe33 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d46:	2300      	movs	r3, #0
    2d48:	220a      	movs	r2, #10
    2d4a:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2d4e:	482d      	ldr	r0, [pc, #180]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d50:	f009 fd6c 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2d54:	492d      	ldr	r1, [pc, #180]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2d56:	482b      	ldr	r0, [pc, #172]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d58:	f7fd fe36 	bl	9c8 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2d5c:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    2d60:	b13d      	cbz	r5, 2d72 <LEDDebug(LEDStruct&)+0xbbe>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d62:	492c      	ldr	r1, [pc, #176]	; (2e14 <LEDDebug(LEDStruct&)+0xc60>)
    2d64:	4827      	ldr	r0, [pc, #156]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d66:	f7fd fe21 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d6a:	f894 1316 	ldrb.w	r1, [r4, #790]	; 0x316
    2d6e:	f7ff bbf8 	b.w	2562 <LEDDebug(LEDStruct&)+0x3ae>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d72:	4929      	ldr	r1, [pc, #164]	; (2e18 <LEDDebug(LEDStruct&)+0xc64>)
    2d74:	4823      	ldr	r0, [pc, #140]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d76:	f7fd fe19 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d7a:	462b      	mov	r3, r5
    2d7c:	220a      	movs	r2, #10
    2d7e:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2d82:	4820      	ldr	r0, [pc, #128]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d84:	f009 fd52 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2d88:	4920      	ldr	r1, [pc, #128]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2d8a:	481e      	ldr	r0, [pc, #120]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d8c:	f7fd fe1c 	bl	9c8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d90:	4922      	ldr	r1, [pc, #136]	; (2e1c <LEDDebug(LEDStruct&)+0xc68>)
    2d92:	481c      	ldr	r0, [pc, #112]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d94:	f7fd fe0a 	bl	9ac <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d98:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2d9c:	4819      	ldr	r0, [pc, #100]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2d9e:	462b      	mov	r3, r5
    2da0:	220a      	movs	r2, #10
    2da2:	f009 fd43 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2da6:	4919      	ldr	r1, [pc, #100]	; (2e0c <LEDDebug(LEDStruct&)+0xc58>)
    2da8:	4816      	ldr	r0, [pc, #88]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2daa:	f7fd fe0d 	bl	9c8 <Print::println(char const*)>
    2dae:	e7d8      	b.n	2d62 <LEDDebug(LEDStruct&)+0xbae>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    2db0:	491b      	ldr	r1, [pc, #108]	; (2e20 <LEDDebug(LEDStruct&)+0xc6c>)
    2db2:	4814      	ldr	r0, [pc, #80]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2db4:	f7fd fe08 	bl	9c8 <Print::println(char const*)>
    2db8:	f7ff bbe9 	b.w	258e <LEDDebug(LEDStruct&)+0x3da>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2dbc:	4919      	ldr	r1, [pc, #100]	; (2e24 <LEDDebug(LEDStruct&)+0xc70>)
    2dbe:	4811      	ldr	r0, [pc, #68]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dc0:	f7fd fe02 	bl	9c8 <Print::println(char const*)>
    2dc4:	e609      	b.n	29da <LEDDebug(LEDStruct&)+0x826>
		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2dc6:	4918      	ldr	r1, [pc, #96]	; (2e28 <LEDDebug(LEDStruct&)+0xc74>)
    2dc8:	480e      	ldr	r0, [pc, #56]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dca:	f7fd fdfd 	bl	9c8 <Print::println(char const*)>
    2dce:	e7a7      	b.n	2d20 <LEDDebug(LEDStruct&)+0xb6c>

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2dd0:	4916      	ldr	r1, [pc, #88]	; (2e2c <LEDDebug(LEDStruct&)+0xc78>)
    2dd2:	480c      	ldr	r0, [pc, #48]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dd4:	f7fd fdf8 	bl	9c8 <Print::println(char const*)>
    2dd8:	e7a2      	b.n	2d20 <LEDDebug(LEDStruct&)+0xb6c>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
    2dda:	4915      	ldr	r1, [pc, #84]	; (2e30 <LEDDebug(LEDStruct&)+0xc7c>)
    2ddc:	4809      	ldr	r0, [pc, #36]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dde:	f7fd fdf3 	bl	9c8 <Print::println(char const*)>
    2de2:	e79d      	b.n	2d20 <LEDDebug(LEDStruct&)+0xb6c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2de4:	4913      	ldr	r1, [pc, #76]	; (2e34 <LEDDebug(LEDStruct&)+0xc80>)
    2de6:	e5f1      	b.n	29cc <LEDDebug(LEDStruct&)+0x818>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    2de8:	4913      	ldr	r1, [pc, #76]	; (2e38 <LEDDebug(LEDStruct&)+0xc84>)
    2dea:	4806      	ldr	r0, [pc, #24]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2dec:	f7fd fdec 	bl	9c8 <Print::println(char const*)>
    2df0:	f7ff bbcd 	b.w	258e <LEDDebug(LEDStruct&)+0x3da>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    2df4:	4911      	ldr	r1, [pc, #68]	; (2e3c <LEDDebug(LEDStruct&)+0xc88>)
    2df6:	4803      	ldr	r0, [pc, #12]	; (2e04 <LEDDebug(LEDStruct&)+0xc50>)
    2df8:	f7fd fde6 	bl	9c8 <Print::println(char const*)>
    2dfc:	f7ff bb48 	b.w	2490 <LEDDebug(LEDStruct&)+0x2dc>
    2e00:	0000fb5c 	.word	0x0000fb5c
    2e04:	1fff878c 	.word	0x1fff878c
    2e08:	0000fbc8 	.word	0x0000fbc8
    2e0c:	0000f8e8 	.word	0x0000f8e8
    2e10:	0000fbdc 	.word	0x0000fbdc
    2e14:	0000fc18 	.word	0x0000fc18
    2e18:	0000fbf0 	.word	0x0000fbf0
    2e1c:	0000fc04 	.word	0x0000fc04
    2e20:	0000faa8 	.word	0x0000faa8
    2e24:	0000fd18 	.word	0x0000fd18
    2e28:	0000fba4 	.word	0x0000fba4
    2e2c:	0000fb80 	.word	0x0000fb80
    2e30:	0000fb38 	.word	0x0000fb38
    2e34:	0000fd10 	.word	0x0000fd10
    2e38:	0000facc 	.word	0x0000facc
    2e3c:	0000f97c 	.word	0x0000f97c

00002e40 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2e40:	b538      	push	{r3, r4, r5, lr}
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2e42:	4d1c      	ldr	r5, [pc, #112]	; (2eb4 <change_palette(LEDStruct&) [clone .part.11]+0x74>)
    2e44:	4604      	mov	r4, r0
    2e46:	2134      	movs	r1, #52	; 0x34
    2e48:	481b      	ldr	r0, [pc, #108]	; (2eb8 <change_palette(LEDStruct&) [clone .part.11]+0x78>)
    2e4a:	f009 fadb 	bl	c404 <usb_serial_write>
    2e4e:	4628      	mov	r0, r5
    2e50:	f009 fcdc 	bl	c80c <Print::println()>
    2e54:	2133      	movs	r1, #51	; 0x33
    2e56:	4819      	ldr	r0, [pc, #100]	; (2ebc <change_palette(LEDStruct&) [clone .part.11]+0x7c>)
    2e58:	f009 fad4 	bl	c404 <usb_serial_write>
    2e5c:	4628      	mov	r0, r5
    2e5e:	f009 fcd5 	bl	c80c <Print::println()>
    2e62:	2133      	movs	r1, #51	; 0x33
    2e64:	4816      	ldr	r0, [pc, #88]	; (2ec0 <change_palette(LEDStruct&) [clone .part.11]+0x80>)
    2e66:	f009 facd 	bl	c404 <usb_serial_write>
    2e6a:	4628      	mov	r0, r5
    2e6c:	f009 fcce 	bl	c80c <Print::println()>
    2e70:	4814      	ldr	r0, [pc, #80]	; (2ec4 <change_palette(LEDStruct&) [clone .part.11]+0x84>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2e72:	4a15      	ldr	r2, [pc, #84]	; (2ec8 <change_palette(LEDStruct&) [clone .part.11]+0x88>)
    2e74:	8803      	ldrh	r3, [r0, #0]
    2e76:	7811      	ldrb	r1, [r2, #0]
		leds.target_palette = palettes[leds.palette_index];
    2e78:	4d14      	ldr	r5, [pc, #80]	; (2ecc <change_palette(LEDStruct&) [clone .part.11]+0x8c>)
    2e7a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2e7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2e82:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2e86:	3319      	adds	r3, #25
    2e88:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2e8a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2e8e:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2e90:	fb12 f201 	smulbb	r2, r2, r1
    2e94:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2e96:	8003      	strh	r3, [r0, #0]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2e98:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
		leds.target_palette = palettes[leds.palette_index];
    2e9c:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    2ea0:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    2ea4:	f7fd fe4c 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
		if (DEBUG) { print_palette(leds.palette_index); }
    2ea8:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
	}
}
    2eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2eb0:	f7fe be72 	b.w	1b98 <print_palette(unsigned char)>
    2eb4:	1fff878c 	.word	0x1fff878c
    2eb8:	00010268 	.word	0x00010268
    2ebc:	000102a0 	.word	0x000102a0
    2ec0:	000102d4 	.word	0x000102d4
    2ec4:	1fff8784 	.word	0x1fff8784
    2ec8:	1fff8750 	.word	0x1fff8750
    2ecc:	0000eb18 	.word	0x0000eb18

00002ed0 <juggle_update(LEDStruct&)>:

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    2ed0:	4b24      	ldr	r3, [pc, #144]	; (2f64 <juggle_update(LEDStruct&)+0x94>)
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2ed2:	4a25      	ldr	r2, [pc, #148]	; (2f68 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    2ed4:	781b      	ldrb	r3, [r3, #0]
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2ed6:	2100      	movs	r1, #0
    2ed8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    2eda:	2b07      	cmp	r3, #7
    2edc:	d809      	bhi.n	2ef2 <juggle_update(LEDStruct&)+0x22>
    2ede:	e8df f003 	tbb	[pc, r3]
    2ee2:	1c13      	.short	0x1c13
    2ee4:	04342e25 	.word	0x04342e25
    2ee8:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    2eea:	4b20      	ldr	r3, [pc, #128]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2eec:	881b      	ldrh	r3, [r3, #0]
    2eee:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2ef2:	f7ff b95f 	b.w	21b4 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    2ef6:	4b1d      	ldr	r3, [pc, #116]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2ef8:	881b      	ldrh	r3, [r3, #0]
    2efa:	3300      	adds	r3, #0
    2efc:	bf18      	it	ne
    2efe:	2301      	movne	r3, #1
    2f00:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    2f04:	f7ff b956 	b.w	21b4 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    2f08:	4b18      	ldr	r3, [pc, #96]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f0a:	881b      	ldrh	r3, [r3, #0]
    2f0c:	3300      	adds	r3, #0
    2f0e:	bf18      	it	ne
    2f10:	2301      	movne	r3, #1
    2f12:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f16:	f7ff b94d 	b.w	21b4 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    2f1a:	4b14      	ldr	r3, [pc, #80]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f1c:	881b      	ldrh	r3, [r3, #0]
    2f1e:	3300      	adds	r3, #0
    2f20:	bf18      	it	ne
    2f22:	2301      	movne	r3, #1
    2f24:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f28:	f7ff b944 	b.w	21b4 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    2f2c:	4b0f      	ldr	r3, [pc, #60]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f2e:	881b      	ldrh	r3, [r3, #0]
    2f30:	3300      	adds	r3, #0
    2f32:	bf18      	it	ne
    2f34:	2301      	movne	r3, #1
    2f36:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f3a:	f7ff b93b 	b.w	21b4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    2f3e:	4b0b      	ldr	r3, [pc, #44]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f40:	881b      	ldrh	r3, [r3, #0]
    2f42:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f46:	f7ff b935 	b.w	21b4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    2f4a:	4b08      	ldr	r3, [pc, #32]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f52:	f7ff b92f 	b.w	21b4 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    2f56:	4b05      	ldr	r3, [pc, #20]	; (2f6c <juggle_update(LEDStruct&)+0x9c>)
    2f58:	881b      	ldrh	r3, [r3, #0]
    2f5a:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2f5e:	f7ff b929 	b.w	21b4 <LEDDebug(LEDStruct&)>
    2f62:	bf00      	nop
    2f64:	1fff9a18 	.word	0x1fff9a18
    2f68:	1fff91d1 	.word	0x1fff91d1
    2f6c:	1fff90d2 	.word	0x1fff90d2

00002f70 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2f74:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2f78:	b084      	sub	sp, #16
    2f7a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	f040 80a9 	bne.w	30d4 <juggle(LEDStruct&)+0x164>
    2f82:	4ecc      	ldr	r6, [pc, #816]	; (32b4 <juggle(LEDStruct&)+0x344>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2f84:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    2f88:	8833      	ldrh	r3, [r6, #0]
    2f8a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2f92:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2f96:	3019      	adds	r0, #25
    2f98:	b280      	uxth	r0, r0
    2f9a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2f9e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    2fa2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2fa6:	3519      	adds	r5, #25
    2fa8:	b2ad      	uxth	r5, r5
    2faa:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    2fae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2fb2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2fb6:	3319      	adds	r3, #25
    2fb8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2fbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2fc0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2fc4:	3319      	adds	r3, #25
    2fc6:	b29b      	uxth	r3, r3
    2fc8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2fcc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2fd0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2fd4:	3119      	adds	r1, #25
    2fd6:	b289      	uxth	r1, r1
    2fd8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2fdc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2fe0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2fe4:	3219      	adds	r2, #25
    2fe6:	b292      	uxth	r2, r2
    2fe8:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2fec:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2ff0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2ff4:	f10e 0e19 	add.w	lr, lr, #25
    2ff8:	fa1f fe8e 	uxth.w	lr, lr
    2ffc:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3000:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3004:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3008:	f10c 0c19 	add.w	ip, ip, #25
    300c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3010:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3014:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3018:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    301c:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3020:	b2df      	uxtb	r7, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3022:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3026:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3028:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    302c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3030:	b2c9      	uxtb	r1, r1
    3032:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    303a:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    303c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3040:	f108 0819 	add.w	r8, r8, #25
    3044:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3048:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    304c:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    304e:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3050:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3054:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3058:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    305c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    3060:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3064:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3066:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    306a:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    306e:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    3072:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3076:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3078:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    307c:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    3080:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3084:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3088:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    308c:	f107 050a 	add.w	r5, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3090:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3092:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3094:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3098:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    309c:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    30a0:	f884 c234 	strb.w	ip, [r4, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    30a4:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    30a8:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    30ac:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    30b0:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    30b4:	f1bc 0f00 	cmp.w	ip, #0
    30b8:	d004      	beq.n	30c4 <juggle(LEDStruct&)+0x154>
    30ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30be:	408b      	lsls	r3, r1
    30c0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    30c4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    30c8:	2b06      	cmp	r3, #6
    30ca:	f000 830e 	beq.w	36ea <juggle(LEDStruct&)+0x77a>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    30ce:	2b04      	cmp	r3, #4
    30d0:	f000 8312 	beq.w	36f8 <juggle(LEDStruct&)+0x788>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    30d4:	4b78      	ldr	r3, [pc, #480]	; (32b8 <juggle(LEDStruct&)+0x348>)
    30d6:	781b      	ldrb	r3, [r3, #0]
    30d8:	2b00      	cmp	r3, #0
    30da:	f040 8302 	bne.w	36e2 <juggle(LEDStruct&)+0x772>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    30de:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    30e2:	b1d3      	cbz	r3, 311a <juggle(LEDStruct&)+0x1aa>
    30e4:	4b75      	ldr	r3, [pc, #468]	; (32bc <juggle(LEDStruct&)+0x34c>)
    30e6:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    30ea:	2200      	movs	r2, #0
    30ec:	f103 0027 	add.w	r0, r3, #39	; 0x27
    30f0:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    30f4:	e001      	b.n	30fa <juggle(LEDStruct&)+0x18a>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    30f6:	4298      	cmp	r0, r3
    30f8:	d00f      	beq.n	311a <juggle(LEDStruct&)+0x1aa>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    30fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    30fe:	428a      	cmp	r2, r1
    3100:	d1f9      	bne.n	30f6 <juggle(LEDStruct&)+0x186>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3102:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    3106:	4a6e      	ldr	r2, [pc, #440]	; (32c0 <juggle(LEDStruct&)+0x350>)
    3108:	fba2 2303 	umull	r2, r3, r2, r3
    310c:	08db      	lsrs	r3, r3, #3
    310e:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3110:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3112:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3116:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    311a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    311e:	2196      	movs	r1, #150	; 0x96
    3120:	4620      	mov	r0, r4
    3122:	f007 f95d 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3126:	f894 6235 	ldrb.w	r6, [r4, #565]	; 0x235
		if (leds.juggle_phased) {
    312a:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    312e:	2e00      	cmp	r6, #0
    3130:	f040 80b0 	bne.w	3294 <juggle(LEDStruct&)+0x324>
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3134:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    3138:	2b00      	cmp	r3, #0
    313a:	f000 8115 	beq.w	3368 <juggle(LEDStruct&)+0x3f8>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    313e:	2a00      	cmp	r2, #0
    3140:	f000 81eb 	beq.w	351a <juggle(LEDStruct&)+0x5aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3144:	f8df 9180 	ldr.w	r9, [pc, #384]	; 32c8 <juggle(LEDStruct&)+0x358>
    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    uint8_t  m   = slope[section];
    3148:	f8df 8180 	ldr.w	r8, [pc, #384]	; 32cc <juggle(LEDStruct&)+0x35c>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    314c:	4f5d      	ldr	r7, [pc, #372]	; (32c4 <juggle(LEDStruct&)+0x354>)
    314e:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    3152:	e05f      	b.n	3214 <juggle(LEDStruct&)+0x2a4>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3154:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3158:	4432      	add	r2, r6
    315a:	4413      	add	r3, r2
    315c:	f8d9 2000 	ldr.w	r2, [r9]
    3160:	9203      	str	r2, [sp, #12]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3162:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3164:	9903      	ldr	r1, [sp, #12]
    3166:	bf98      	it	ls
    3168:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    316a:	f44f 728c 	mov.w	r2, #280	; 0x118
    316e:	fb02 f201 	mul.w	r2, r2, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3172:	bf98      	it	ls
    3174:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3176:	fb03 f302 	mul.w	r3, r3, r2
    317a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    317c:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    317e:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3182:	d503      	bpl.n	318c <juggle(LEDStruct&)+0x21c>
    3184:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3188:	3207      	adds	r2, #7
    318a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    318c:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    318e:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3192:	f818 0001 	ldrb.w	r0, [r8, r1]
    3196:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    319a:	fb00 1202 	mla	r2, r0, r2, r1

    if( theta & 0x8000 ) y = -y;
    319e:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    31a0:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    31a2:	bf48      	it	mi
    31a4:	4252      	negmi	r2, r2
    31a6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    31aa:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    31ae:	fa0f fa82 	sxth.w	sl, r2
    31b2:	a802      	add	r0, sp, #8
    31b4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    31b8:	9100      	str	r1, [sp, #0]
    31ba:	4629      	mov	r1, r5
    31bc:	f007 f970 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    31c0:	f5aa 4300 	sub.w	r3, sl, #32768	; 0x8000
    31c4:	b29a      	uxth	r2, r3
    31c6:	2396      	movs	r3, #150	; 0x96
    31c8:	fb03 f302 	mul.w	r3, r3, r2
    31cc:	0c1b      	lsrs	r3, r3, #16
    31ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31d2:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    31d4:	5ce2      	ldrb	r2, [r4, r3]
    31d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    31da:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    31de:	54e2      	strb	r2, [r4, r3]
    31e0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    31e4:	784a      	ldrb	r2, [r1, #1]
    31e6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    31ea:	704a      	strb	r2, [r1, #1]
    31ec:	788b      	ldrb	r3, [r1, #2]
    31ee:	f89d 200a 	ldrb.w	r2, [sp, #10]
    31f2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    31f6:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    31f8:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    31fc:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3200:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3204:	3601      	adds	r6, #1
    3206:	b2f6      	uxtb	r6, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3208:	440b      	add	r3, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    320a:	42b2      	cmp	r2, r6
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    320c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3210:	f240 8183 	bls.w	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3214:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3218:	2b00      	cmp	r3, #0
    321a:	d19b      	bne.n	3154 <juggle(LEDStruct&)+0x1e4>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    321c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3220:	4432      	add	r2, r6
    3222:	4619      	mov	r1, r3
    3224:	4410      	add	r0, r2
    3226:	224a      	movs	r2, #74	; 0x4a
    3228:	f7fd f9ea 	bl	600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    322c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3230:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3234:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3238:	9100      	str	r1, [sp, #0]
    323a:	4682      	mov	sl, r0
    323c:	4629      	mov	r1, r5
    323e:	a802      	add	r0, sp, #8
    3240:	f007 f92e 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3244:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    3248:	18e1      	adds	r1, r4, r3
    324a:	5ce2      	ldrb	r2, [r4, r3]
    324c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3250:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3254:	54e2      	strb	r2, [r4, r3]
    3256:	f89d 3009 	ldrb.w	r3, [sp, #9]
    325a:	784a      	ldrb	r2, [r1, #1]
    325c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3260:	704a      	strb	r2, [r1, #1]
    3262:	788b      	ldrb	r3, [r1, #2]
    3264:	f89d 200a 	ldrb.w	r2, [sp, #10]
    3268:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    326c:	708b      	strb	r3, [r1, #2]
    326e:	4622      	mov	r2, r4
    3270:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3274:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3276:	7819      	ldrb	r1, [r3, #0]
    3278:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    327c:	7859      	ldrb	r1, [r3, #1]
    327e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3282:	7899      	ldrb	r1, [r3, #2]
    3284:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3288:	3303      	adds	r3, #3
LEDStruct curr_over_leds;
LEDStruct next_over_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    328a:	4298      	cmp	r0, r3
    328c:	f1a2 0203 	sub.w	r2, r2, #3
    3290:	d1f1      	bne.n	3276 <juggle(LEDStruct&)+0x306>
    3292:	e7b1      	b.n	31f8 <juggle(LEDStruct&)+0x288>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    3294:	2b00      	cmp	r3, #0
    3296:	f000 80e7 	beq.w	3468 <juggle(LEDStruct&)+0x4f8>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    329a:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    329e:	2b00      	cmp	r3, #0
    32a0:	f000 813b 	beq.w	351a <juggle(LEDStruct&)+0x5aa>
    32a4:	2700      	movs	r7, #0
    32a6:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    32aa:	ae03      	add	r6, sp, #12
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    32ac:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
    32b0:	e048      	b.n	3344 <juggle(LEDStruct&)+0x3d4>
    32b2:	bf00      	nop
    32b4:	1fff8784 	.word	0x1fff8784
    32b8:	1fff91d1 	.word	0x1fff91d1
    32bc:	1fff875b 	.word	0x1fff875b
    32c0:	cccccccd 	.word	0xcccccccd
    32c4:	0000e56c 	.word	0x0000e56c
    32c8:	1ffface8 	.word	0x1ffface8
    32cc:	0000ed30 	.word	0x0000ed30
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32d0:	fb08 f307 	mul.w	r3, r8, r7
    32d4:	2900      	cmp	r1, #0
    32d6:	f000 815a 	beq.w	358e <juggle(LEDStruct&)+0x61e>
    32da:	2295      	movs	r2, #149	; 0x95
    32dc:	2100      	movs	r1, #0
    32de:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    32e2:	f7fd f907 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32e6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    32ea:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    32ee:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    32f2:	9100      	str	r1, [sp, #0]
    32f4:	4681      	mov	r9, r0
    32f6:	4629      	mov	r1, r5
    32f8:	4630      	mov	r0, r6
    32fa:	f007 f8d1 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    32fe:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3302:	18e1      	adds	r1, r4, r3
    3304:	5ce2      	ldrb	r2, [r4, r3]
    3306:	f89d 000c 	ldrb.w	r0, [sp, #12]
    330a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    330e:	54e2      	strb	r2, [r4, r3]
    3310:	784a      	ldrb	r2, [r1, #1]
    3312:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3316:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    331a:	704a      	strb	r2, [r1, #1]
    331c:	788b      	ldrb	r3, [r1, #2]
    331e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3322:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3326:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3328:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    332c:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3330:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3334:	3701      	adds	r7, #1
    3336:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3338:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    333a:	42ba      	cmp	r2, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    333c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3340:	f240 80eb 	bls.w	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.this_dir) {
    3344:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3348:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    334c:	2b00      	cmp	r3, #0
    334e:	d1bf      	bne.n	32d0 <juggle(LEDStruct&)+0x360>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3350:	2900      	cmp	r1, #0
    3352:	f000 818b 	beq.w	366c <juggle(LEDStruct&)+0x6fc>
    3356:	4619      	mov	r1, r3
    3358:	2295      	movs	r2, #149	; 0x95
    335a:	fb08 f307 	mul.w	r3, r8, r7
    335e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3362:	f7fd f909 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3366:	e7be      	b.n	32e6 <juggle(LEDStruct&)+0x376>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3368:	2a00      	cmp	r2, #0
    336a:	f000 80d6 	beq.w	351a <juggle(LEDStruct&)+0x5aa>
    336e:	4698      	mov	r8, r3
    3370:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    3374:	ae03      	add	r6, sp, #12
    3376:	f104 07e1 	add.w	r7, r4, #225	; 0xe1
    337a:	e036      	b.n	33ea <juggle(LEDStruct&)+0x47a>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    337c:	2295      	movs	r2, #149	; 0x95
    337e:	2100      	movs	r1, #0
    3380:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3384:	f7fd f93c 	bl	600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    3388:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    338c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3390:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3394:	9100      	str	r1, [sp, #0]
    3396:	4681      	mov	r9, r0
    3398:	4629      	mov	r1, r5
    339a:	4630      	mov	r0, r6
    339c:	f007 f880 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33a0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    33a4:	18e1      	adds	r1, r4, r3
    33a6:	5ce2      	ldrb	r2, [r4, r3]
    33a8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    33ac:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    33b0:	54e2      	strb	r2, [r4, r3]
    33b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    33b6:	784a      	ldrb	r2, [r1, #1]
    33b8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    33bc:	704a      	strb	r2, [r1, #1]
    33be:	788b      	ldrb	r3, [r1, #2]
    33c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    33c4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    33c8:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33ca:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    33ce:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    33d2:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    33d6:	f108 0801 	add.w	r8, r8, #1
    33da:	fa5f f888 	uxtb.w	r8, r8
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33de:	440b      	add	r3, r1
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    33e0:	4542      	cmp	r2, r8
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    33e2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    33e6:	f240 8098 	bls.w	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    33ea:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    33ee:	ea4f 3348 	mov.w	r3, r8, lsl #13
    33f2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
    33f6:	2900      	cmp	r1, #0
    33f8:	d1c0      	bne.n	337c <juggle(LEDStruct&)+0x40c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    33fa:	224a      	movs	r2, #74	; 0x4a
    33fc:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3400:	f7fd f8fe 	bl	600 <beatsin16(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.38]>
    3404:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3408:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    340c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3410:	9100      	str	r1, [sp, #0]
    3412:	4681      	mov	r9, r0
    3414:	4629      	mov	r1, r5
    3416:	4630      	mov	r0, r6
    3418:	f007 f842 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    341c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3420:	18e1      	adds	r1, r4, r3
    3422:	5ce2      	ldrb	r2, [r4, r3]
    3424:	f89d 000c 	ldrb.w	r0, [sp, #12]
    3428:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    342c:	54e2      	strb	r2, [r4, r3]
    342e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3432:	784a      	ldrb	r2, [r1, #1]
    3434:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3438:	704a      	strb	r2, [r1, #1]
    343a:	788b      	ldrb	r3, [r1, #2]
    343c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3440:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3444:	708b      	strb	r3, [r1, #2]
    3446:	4622      	mov	r2, r4
    3448:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    344a:	7819      	ldrb	r1, [r3, #0]
    344c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3450:	7859      	ldrb	r1, [r3, #1]
    3452:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3456:	7899      	ldrb	r1, [r3, #2]
    3458:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    345c:	3303      	adds	r3, #3
    345e:	42bb      	cmp	r3, r7
    3460:	f1a2 0203 	sub.w	r2, r2, #3
    3464:	d1f1      	bne.n	344a <juggle(LEDStruct&)+0x4da>
    3466:	e7b0      	b.n	33ca <juggle(LEDStruct&)+0x45a>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3468:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    346c:	2a00      	cmp	r2, #0
    346e:	d054      	beq.n	351a <juggle(LEDStruct&)+0x5aa>
    3470:	4698      	mov	r8, r3
    3472:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    3476:	ae03      	add	r6, sp, #12
    3478:	f104 07e1 	add.w	r7, r4, #225	; 0xe1
    347c:	e03c      	b.n	34f8 <juggle(LEDStruct&)+0x588>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    347e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3482:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3486:	4442      	add	r2, r8
    3488:	2b00      	cmp	r3, #0
    348a:	d049      	beq.n	3520 <juggle(LEDStruct&)+0x5b0>
    348c:	2300      	movs	r3, #0
    348e:	4410      	add	r0, r2
    3490:	4619      	mov	r1, r3
    3492:	2295      	movs	r2, #149	; 0x95
    3494:	f7fd f82e 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3498:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    349c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34a0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    34a4:	9100      	str	r1, [sp, #0]
    34a6:	4681      	mov	r9, r0
    34a8:	4629      	mov	r1, r5
    34aa:	4630      	mov	r0, r6
    34ac:	f006 fff8 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34b0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    34b4:	18e1      	adds	r1, r4, r3
    34b6:	5ce2      	ldrb	r2, [r4, r3]
    34b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    34bc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34c0:	54e2      	strb	r2, [r4, r3]
    34c2:	784a      	ldrb	r2, [r1, #1]
    34c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    34c8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34cc:	704a      	strb	r2, [r1, #1]
    34ce:	788b      	ldrb	r3, [r1, #2]
    34d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    34d4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    34d8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34da:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    34de:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34e2:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    34e6:	f108 0801 	add.w	r8, r8, #1
    34ea:	fa5f f888 	uxtb.w	r8, r8
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34ee:	440b      	add	r3, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34f0:	4542      	cmp	r2, r8
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34f2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34f6:	d910      	bls.n	351a <juggle(LEDStruct&)+0x5aa>
				if (leds.this_dir) {
    34f8:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    34fc:	2b00      	cmp	r3, #0
    34fe:	d1be      	bne.n	347e <juggle(LEDStruct&)+0x50e>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3500:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3504:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3508:	4442      	add	r2, r8
    350a:	4410      	add	r0, r2
    350c:	2900      	cmp	r1, #0
    350e:	d077      	beq.n	3600 <juggle(LEDStruct&)+0x690>
    3510:	4619      	mov	r1, r3
    3512:	2295      	movs	r2, #149	; 0x95
    3514:	f7fd f830 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3518:	e7be      	b.n	3498 <juggle(LEDStruct&)+0x528>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    351a:	b004      	add	sp, #16
    351c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3520:	4619      	mov	r1, r3
    3522:	4410      	add	r0, r2
    3524:	224a      	movs	r2, #74	; 0x4a
    3526:	f7fc ffe5 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    352a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    352e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3532:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3536:	9100      	str	r1, [sp, #0]
    3538:	4681      	mov	r9, r0
    353a:	4629      	mov	r1, r5
    353c:	4630      	mov	r0, r6
    353e:	f006 ffaf 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3542:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3546:	18e1      	adds	r1, r4, r3
    3548:	5ce2      	ldrb	r2, [r4, r3]
    354a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    354e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3552:	54e2      	strb	r2, [r4, r3]
    3554:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3558:	784a      	ldrb	r2, [r1, #1]
    355a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    355e:	704a      	strb	r2, [r1, #1]
    3560:	788b      	ldrb	r3, [r1, #2]
    3562:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3566:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    356a:	708b      	strb	r3, [r1, #2]
    356c:	4622      	mov	r2, r4
    356e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3570:	7819      	ldrb	r1, [r3, #0]
    3572:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3576:	7859      	ldrb	r1, [r3, #1]
    3578:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    357c:	7899      	ldrb	r1, [r3, #2]
    357e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3582:	3303      	adds	r3, #3
    3584:	429f      	cmp	r7, r3
    3586:	f1a2 0203 	sub.w	r2, r2, #3
    358a:	d1f1      	bne.n	3570 <juggle(LEDStruct&)+0x600>
    358c:	e7a5      	b.n	34da <juggle(LEDStruct&)+0x56a>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    358e:	224a      	movs	r2, #74	; 0x4a
    3590:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3594:	f7fc ffae 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3598:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    359c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35a0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35a4:	9100      	str	r1, [sp, #0]
    35a6:	4681      	mov	r9, r0
    35a8:	4629      	mov	r1, r5
    35aa:	4630      	mov	r0, r6
    35ac:	f006 ff78 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35b0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    35b4:	18e1      	adds	r1, r4, r3
    35b6:	5ce2      	ldrb	r2, [r4, r3]
    35b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    35bc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35c0:	54e2      	strb	r2, [r4, r3]
    35c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    35c6:	784a      	ldrb	r2, [r1, #1]
    35c8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35cc:	704a      	strb	r2, [r1, #1]
    35ce:	788b      	ldrb	r3, [r1, #2]
    35d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    35d4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35d8:	708b      	strb	r3, [r1, #2]
    35da:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    35de:	4623      	mov	r3, r4
    35e0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35e2:	7819      	ldrb	r1, [r3, #0]
    35e4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35e8:	7859      	ldrb	r1, [r3, #1]
    35ea:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35ee:	7899      	ldrb	r1, [r3, #2]
    35f0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35f4:	3303      	adds	r3, #3
    35f6:	4298      	cmp	r0, r3
    35f8:	f1a2 0203 	sub.w	r2, r2, #3
    35fc:	d1f1      	bne.n	35e2 <juggle(LEDStruct&)+0x672>
    35fe:	e693      	b.n	3328 <juggle(LEDStruct&)+0x3b8>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3600:	460b      	mov	r3, r1
    3602:	224a      	movs	r2, #74	; 0x4a
    3604:	f7fc ffb8 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3608:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    360c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3610:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3614:	9100      	str	r1, [sp, #0]
    3616:	4681      	mov	r9, r0
    3618:	4629      	mov	r1, r5
    361a:	4630      	mov	r0, r6
    361c:	f006 ff40 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3620:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3624:	18e1      	adds	r1, r4, r3
    3626:	5ce2      	ldrb	r2, [r4, r3]
    3628:	f89d 000c 	ldrb.w	r0, [sp, #12]
    362c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3630:	54e2      	strb	r2, [r4, r3]
    3632:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3636:	784a      	ldrb	r2, [r1, #1]
    3638:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    363c:	704a      	strb	r2, [r1, #1]
    363e:	788b      	ldrb	r3, [r1, #2]
    3640:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3644:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3648:	708b      	strb	r3, [r1, #2]
    364a:	4622      	mov	r2, r4
    364c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    364e:	7819      	ldrb	r1, [r3, #0]
    3650:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3654:	7859      	ldrb	r1, [r3, #1]
    3656:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    365a:	7899      	ldrb	r1, [r3, #2]
    365c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3660:	3303      	adds	r3, #3
    3662:	429f      	cmp	r7, r3
    3664:	f1a2 0203 	sub.w	r2, r2, #3
    3668:	d1f1      	bne.n	364e <juggle(LEDStruct&)+0x6de>
    366a:	e736      	b.n	34da <juggle(LEDStruct&)+0x56a>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    366c:	fb08 f307 	mul.w	r3, r8, r7
    3670:	224a      	movs	r2, #74	; 0x4a
    3672:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3676:	f7fc ff7f 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    367a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    367e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3682:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3686:	9100      	str	r1, [sp, #0]
    3688:	4681      	mov	r9, r0
    368a:	4629      	mov	r1, r5
    368c:	4630      	mov	r0, r6
    368e:	f006 ff07 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3692:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3696:	18e1      	adds	r1, r4, r3
    3698:	5ce2      	ldrb	r2, [r4, r3]
    369a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    369e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36a2:	54e2      	strb	r2, [r4, r3]
    36a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    36a8:	784a      	ldrb	r2, [r1, #1]
    36aa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36ae:	704a      	strb	r2, [r1, #1]
    36b0:	788b      	ldrb	r3, [r1, #2]
    36b2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    36b6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36ba:	708b      	strb	r3, [r1, #2]
    36bc:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    36c0:	4623      	mov	r3, r4
    36c2:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36c4:	7819      	ldrb	r1, [r3, #0]
    36c6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    36ca:	7859      	ldrb	r1, [r3, #1]
    36cc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    36d0:	7899      	ldrb	r1, [r3, #2]
    36d2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36d6:	3303      	adds	r3, #3
    36d8:	4283      	cmp	r3, r0
    36da:	f1a2 0203 	sub.w	r2, r2, #3
    36de:	d1f1      	bne.n	36c4 <juggle(LEDStruct&)+0x754>
    36e0:	e622      	b.n	3328 <juggle(LEDStruct&)+0x3b8>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    36e2:	4620      	mov	r0, r4
    36e4:	f7ff fbf4 	bl	2ed0 <juggle_update(LEDStruct&)>
    36e8:	e4f9      	b.n	30de <juggle(LEDStruct&)+0x16e>
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    36ea:	3741      	adds	r7, #65	; 0x41
    36ec:	230f      	movs	r3, #15
    36ee:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
    36f2:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    36f6:	e4ed      	b.n	30d4 <juggle(LEDStruct&)+0x164>
    36f8:	4620      	mov	r0, r4
    36fa:	f7fc fec9 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    36fe:	e4e9      	b.n	30d4 <juggle(LEDStruct&)+0x164>

00003700 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3704:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3708:	b08d      	sub	sp, #52	; 0x34
    370a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    370c:	2b00      	cmp	r3, #0
    370e:	f040 80a9 	bne.w	3864 <juggle_half(LEDStruct&)+0x164>
    3712:	4ecc      	ldr	r6, [pc, #816]	; (3a44 <juggle_half(LEDStruct&)+0x344>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3714:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3718:	8833      	ldrh	r3, [r6, #0]
    371a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    371e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3722:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3726:	3019      	adds	r0, #25
    3728:	b280      	uxth	r0, r0
    372a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    372e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3732:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3736:	3519      	adds	r5, #25
    3738:	b2ad      	uxth	r5, r5
    373a:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    373e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3742:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3746:	3319      	adds	r3, #25
    3748:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    374c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3750:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3754:	3319      	adds	r3, #25
    3756:	b29b      	uxth	r3, r3
    3758:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    375c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3760:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3764:	3119      	adds	r1, #25
    3766:	b289      	uxth	r1, r1
    3768:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    376c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3770:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3774:	3219      	adds	r2, #25
    3776:	b292      	uxth	r2, r2
    3778:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    377c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3780:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3784:	f10e 0e19 	add.w	lr, lr, #25
    3788:	fa1f fe8e 	uxth.w	lr, lr
    378c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3790:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3794:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3798:	f10c 0c19 	add.w	ip, ip, #25
    379c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37a0:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37a4:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37a8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37ac:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37b0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37b4:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37b6:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37b8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37bc:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    37c0:	b2c9      	uxtb	r1, r1
    37c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37ca:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37cc:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37d0:	f108 0819 	add.w	r8, r8, #25
    37d4:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    37d8:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    37dc:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37de:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    37e0:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37e4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    37e8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    37ec:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    37f0:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37f4:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    37f6:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37fa:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37fe:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    3802:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3806:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3808:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    380c:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    3810:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3814:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3818:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    381c:	f107 050a 	add.w	r5, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3820:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3822:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3824:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3828:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    382c:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3830:	f884 c234 	strb.w	ip, [r4, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3834:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3838:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    383c:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3840:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3844:	f1bc 0f00 	cmp.w	ip, #0
    3848:	d004      	beq.n	3854 <juggle_half(LEDStruct&)+0x154>
    384a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    384e:	408b      	lsls	r3, r1
    3850:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3854:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    3858:	2b06      	cmp	r3, #6
    385a:	f000 838a 	beq.w	3f72 <juggle_half(LEDStruct&)+0x872>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    385e:	2b04      	cmp	r3, #4
    3860:	f000 838e 	beq.w	3f80 <juggle_half(LEDStruct&)+0x880>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3864:	4b78      	ldr	r3, [pc, #480]	; (3a48 <juggle_half(LEDStruct&)+0x348>)
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	2b00      	cmp	r3, #0
    386a:	f040 82ae 	bne.w	3dca <juggle_half(LEDStruct&)+0x6ca>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    386e:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3872:	b113      	cbz	r3, 387a <juggle_half(LEDStruct&)+0x17a>
    3874:	2300      	movs	r3, #0
    3876:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    387a:	2196      	movs	r1, #150	; 0x96
    387c:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3880:	4620      	mov	r0, r4
    3882:	f006 fdad 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3886:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    388a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    388e:	2f00      	cmp	r7, #0
    3890:	f040 81af 	bne.w	3bf2 <juggle_half(LEDStruct&)+0x4f2>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3894:	2900      	cmp	r1, #0
    3896:	f000 8377 	beq.w	3f88 <juggle_half(LEDStruct&)+0x888>
    389a:	4b6c      	ldr	r3, [pc, #432]	; (3a4c <juggle_half(LEDStruct&)+0x34c>)
    389c:	9302      	str	r3, [sp, #8]
    389e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    38a2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 3a50 <juggle_half(LEDStruct&)+0x350>
    38a6:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3a54 <juggle_half(LEDStruct&)+0x354>
    38aa:	ab0b      	add	r3, sp, #44	; 0x2c
    38ac:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    38b0:	9303      	str	r3, [sp, #12]
    38b2:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    38b6:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    38ba:	b2be      	uxth	r6, r7
    38bc:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    38be:	f8d9 1000 	ldr.w	r1, [r9]
    38c2:	9107      	str	r1, [sp, #28]
    38c4:	4403      	add	r3, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    38c6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    38c8:	9907      	ldr	r1, [sp, #28]
    38ca:	bf98      	it	ls
    38cc:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    38ce:	f44f 708c 	mov.w	r0, #280	; 0x118
    38d2:	bf98      	it	ls
    38d4:	b29b      	uxthls	r3, r3
    38d6:	fb00 f101 	mul.w	r1, r0, r1
    38da:	fb03 f301 	mul.w	r3, r3, r1
    38de:	f3c3 430e 	ubfx	r3, r3, #16, #15
    38e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    38e6:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    38e8:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    38ea:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    38ee:	d503      	bpl.n	38f8 <juggle_half(LEDStruct&)+0x1f8>
    38f0:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    38f4:	3107      	adds	r1, #7
    38f6:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    38f8:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38fc:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3900:	9902      	ldr	r1, [sp, #8]
    3902:	f81b 500e 	ldrb.w	r5, [fp, lr]
    3906:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    390a:	fb05 1100 	mla	r1, r5, r0, r1
    390e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3910:	0418      	lsls	r0, r3, #16
    3912:	bf4c      	ite	mi
    3914:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3916:	b20d      	sxthpl	r5, r1
    3918:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    391c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3920:	9803      	ldr	r0, [sp, #12]
    3922:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3924:	bf48      	it	mi
    3926:	b22d      	sxthmi	r5, r5
    3928:	4641      	mov	r1, r8
    392a:	f006 fdb9 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    392e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3932:	b29b      	uxth	r3, r3
    3934:	fb0a f303 	mul.w	r3, sl, r3
    3938:	0c1b      	lsrs	r3, r3, #16
    393a:	3325      	adds	r3, #37	; 0x25
    393c:	b29b      	uxth	r3, r3
    393e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3942:	18e1      	adds	r1, r4, r3
    3944:	5ce2      	ldrb	r2, [r4, r3]
    3946:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    394a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    394e:	54e2      	strb	r2, [r4, r3]
    3950:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3954:	784a      	ldrb	r2, [r1, #1]
    3956:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    395a:	704a      	strb	r2, [r1, #1]
    395c:	788b      	ldrb	r3, [r1, #2]
    395e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3962:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3966:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3968:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    396c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3970:	4416      	add	r6, r2
    3972:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3974:	f8d9 3000 	ldr.w	r3, [r9]
    3978:	9306      	str	r3, [sp, #24]
    397a:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    397c:	9b06      	ldr	r3, [sp, #24]
    397e:	bf98      	it	ls
    3980:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3982:	f44f 728c 	mov.w	r2, #280	; 0x118
    3986:	bf98      	it	ls
    3988:	b2b6      	uxthls	r6, r6
    398a:	fb02 f303 	mul.w	r3, r2, r3
    398e:	fb06 f303 	mul.w	r3, r6, r3
    3992:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    399a:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    399c:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    39a0:	d503      	bpl.n	39aa <juggle_half(LEDStruct&)+0x2aa>
    39a2:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    39a6:	3207      	adds	r2, #7
    39a8:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    39aa:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39ac:	f3c2 0146 	ubfx	r1, r2, #1, #7
    39b0:	9a02      	ldr	r2, [sp, #8]
    39b2:	f81b 5000 	ldrb.w	r5, [fp, r0]
    39b6:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    39ba:	9803      	ldr	r0, [sp, #12]
    39bc:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    39c0:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39c2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    39c4:	bf48      	it	mi
    39c6:	4255      	negmi	r5, r2
    39c8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39cc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39d0:	bf54      	ite	pl
    39d2:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    39d4:	b22d      	sxthmi	r5, r5
    39d6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    39da:	9100      	str	r1, [sp, #0]
    39dc:	4641      	mov	r1, r8
    39de:	f006 fd5f 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39e2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    39e6:	b29b      	uxth	r3, r3
    39e8:	fb0a f303 	mul.w	r3, sl, r3
    39ec:	0c1b      	lsrs	r3, r3, #16
    39ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39f2:	18e1      	adds	r1, r4, r3
    39f4:	5ce2      	ldrb	r2, [r4, r3]
    39f6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    39fa:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    39fe:	54e2      	strb	r2, [r4, r3]
    3a00:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3a04:	784a      	ldrb	r2, [r1, #1]
    3a06:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a0a:	704a      	strb	r2, [r1, #1]
    3a0c:	788b      	ldrb	r3, [r1, #2]
    3a0e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3a12:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a16:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3a18:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3a1c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a20:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3a24:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3a26:	440a      	add	r2, r1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a28:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3a2a:	b2d2      	uxtb	r2, r2
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a2c:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3a2e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a32:	4619      	mov	r1, r3
    3a34:	f63f af3f 	bhi.w	38b6 <juggle_half(LEDStruct&)+0x1b6>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3a38:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3a3c:	2a00      	cmp	r2, #0
    3a3e:	f000 81b0 	beq.w	3da2 <juggle_half(LEDStruct&)+0x6a2>
    3a42:	e009      	b.n	3a58 <juggle_half(LEDStruct&)+0x358>
    3a44:	1fff8784 	.word	0x1fff8784
    3a48:	1fff91d1 	.word	0x1fff91d1
    3a4c:	0000e56c 	.word	0x0000e56c
    3a50:	1ffface8 	.word	0x1ffface8
    3a54:	0000ed30 	.word	0x0000ed30
		if (leds.this_dir) {
    3a58:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3a5c:	2f00      	cmp	r7, #0
    3a5e:	f040 81bf 	bne.w	3de0 <juggle_half(LEDStruct&)+0x6e0>
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a62:	2b00      	cmp	r3, #0
    3a64:	f000 80c2 	beq.w	3bec <juggle_half(LEDStruct&)+0x4ec>
    3a68:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3a6c:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3a70:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3a74:	3301      	adds	r3, #1
    3a76:	440b      	add	r3, r1
    3a78:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a7a:	f8d9 1000 	ldr.w	r1, [r9]
    3a7e:	910b      	str	r1, [sp, #44]	; 0x2c
    3a80:	4433      	add	r3, r6
    3a82:	b29b      	uxth	r3, r3
    3a84:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3a86:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3a88:	bf9c      	itt	ls
    3a8a:	021b      	lslls	r3, r3, #8
    3a8c:	b29b      	uxthls	r3, r3
    3a8e:	fb0a f101 	mul.w	r1, sl, r1
    3a92:	fb03 f301 	mul.w	r3, r3, r1
    3a96:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3a9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3a9e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3aa0:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3aa2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3aa6:	d503      	bpl.n	3ab0 <juggle_half(LEDStruct&)+0x3b0>
    3aa8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3aac:	3107      	adds	r1, #7
    3aae:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ab0:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ab4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ab6:	9902      	ldr	r1, [sp, #8]
    3ab8:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3abc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3ac0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3ac4:	fb05 050e 	mla	r5, r5, lr, r0
    3ac8:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3aca:	0418      	lsls	r0, r3, #16
    3acc:	bf48      	it	mi
    3ace:	426d      	negmi	r5, r5
    3ad0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3ad4:	9100      	str	r1, [sp, #0]
    3ad6:	a809      	add	r0, sp, #36	; 0x24
    3ad8:	4641      	mov	r1, r8
    3ada:	b22d      	sxth	r5, r5
    3adc:	f006 fce0 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3ae0:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3ae4:	2226      	movs	r2, #38	; 0x26
    3ae6:	b29b      	uxth	r3, r3
    3ae8:	fb02 f303 	mul.w	r3, r2, r3
    3aec:	0c1b      	lsrs	r3, r3, #16
    3aee:	3370      	adds	r3, #112	; 0x70
    3af0:	b29b      	uxth	r3, r3
    3af2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3af6:	18e1      	adds	r1, r4, r3
    3af8:	5ce2      	ldrb	r2, [r4, r3]
    3afa:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3afe:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b02:	54e2      	strb	r2, [r4, r3]
    3b04:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3b08:	784a      	ldrb	r2, [r1, #1]
    3b0a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b0e:	704a      	strb	r2, [r1, #1]
    3b10:	788b      	ldrb	r3, [r1, #2]
    3b12:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3b16:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b1a:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3b1c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3b20:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3b24:	4413      	add	r3, r2
    3b26:	3301      	adds	r3, #1
    3b28:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b2a:	f8d9 3000 	ldr.w	r3, [r9]
    3b2e:	930a      	str	r3, [sp, #40]	; 0x28
    3b30:	b2b6      	uxth	r6, r6
    3b32:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b36:	bf9c      	itt	ls
    3b38:	0236      	lslls	r6, r6, #8
    3b3a:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3b3c:	fb0a f202 	mul.w	r2, sl, r2
    3b40:	fb06 f202 	mul.w	r2, r6, r2
    3b44:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3b48:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b4c:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b4e:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b52:	d503      	bpl.n	3b5c <juggle_half(LEDStruct&)+0x45c>
    3b54:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3b58:	3307      	adds	r3, #7
    3b5a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b5c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b5e:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3b62:	9b02      	ldr	r3, [sp, #8]
    3b64:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3b68:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3b6c:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3b70:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b72:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3b74:	bf48      	it	mi
    3b76:	425b      	negmi	r3, r3
    3b78:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b7c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b80:	b21d      	sxth	r5, r3
    3b82:	a809      	add	r0, sp, #36	; 0x24
    3b84:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b88:	9100      	str	r1, [sp, #0]
    3b8a:	4641      	mov	r1, r8
    3b8c:	f006 fc88 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b90:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b94:	b29b      	uxth	r3, r3
    3b96:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3b9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b9e:	0c1b      	lsrs	r3, r3, #16
    3ba0:	334b      	adds	r3, #75	; 0x4b
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ba8:	18e1      	adds	r1, r4, r3
    3baa:	5ce2      	ldrb	r2, [r4, r3]
    3bac:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3bb0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3bb4:	54e2      	strb	r2, [r4, r3]
    3bb6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3bba:	784a      	ldrb	r2, [r1, #1]
    3bbc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3bc0:	704a      	strb	r2, [r1, #1]
    3bc2:	788b      	ldrb	r3, [r1, #2]
    3bc4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3bc8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3bcc:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    3bce:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3bd2:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3bd6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3bda:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3bdc:	440a      	add	r2, r1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3bde:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3be0:	b2d2      	uxtb	r2, r2
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3be2:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3be4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3be8:	f63f af42 	bhi.w	3a70 <juggle_half(LEDStruct&)+0x370>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3bec:	b00d      	add	sp, #52	; 0x34
    3bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3bf2:	2900      	cmp	r1, #0
    3bf4:	f000 81c8 	beq.w	3f88 <juggle_half(LEDStruct&)+0x888>
    3bf8:	4b76      	ldr	r3, [pc, #472]	; (3dd4 <juggle_half(LEDStruct&)+0x6d4>)
    3bfa:	9302      	str	r3, [sp, #8]
    3bfc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3c00:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 3dd8 <juggle_half(LEDStruct&)+0x6d8>
    3c04:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 3ddc <juggle_half(LEDStruct&)+0x6dc>
    3c08:	ab0b      	add	r3, sp, #44	; 0x2c
    3c0a:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3c0e:	2700      	movs	r7, #0
    3c10:	9303      	str	r3, [sp, #12]
    3c12:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c16:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3c1a:	b2be      	uxth	r6, r7
    3c1c:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c1e:	f8d9 1000 	ldr.w	r1, [r9]
    3c22:	9105      	str	r1, [sp, #20]
    3c24:	4403      	add	r3, r0
    3c26:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3c28:	9905      	ldr	r1, [sp, #20]
    3c2a:	bf98      	it	ls
    3c2c:	021b      	lslls	r3, r3, #8
    3c2e:	f44f 708c 	mov.w	r0, #280	; 0x118
    3c32:	bf98      	it	ls
    3c34:	b29b      	uxthls	r3, r3
    3c36:	fb00 f101 	mul.w	r1, r0, r1
    3c3a:	fb03 f301 	mul.w	r3, r3, r1
    3c3e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3c42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c46:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3c48:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c4c:	d503      	bpl.n	3c56 <juggle_half(LEDStruct&)+0x556>
    3c4e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3c52:	3107      	adds	r1, #7
    3c54:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c56:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c5a:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3c5e:	9902      	ldr	r1, [sp, #8]
    3c60:	f81b 500e 	ldrb.w	r5, [fp, lr]
    3c64:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    3c68:	fb05 1100 	mla	r1, r5, r0, r1
    3c6c:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3c6e:	0418      	lsls	r0, r3, #16
    3c70:	bf4c      	ite	mi
    3c72:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c74:	b20d      	sxthpl	r5, r1
    3c76:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c7a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c7e:	9803      	ldr	r0, [sp, #12]
    3c80:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3c82:	bf48      	it	mi
    3c84:	b22d      	sxthmi	r5, r5
    3c86:	4641      	mov	r1, r8
    3c88:	f006 fc0a 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c8c:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c90:	b29b      	uxth	r3, r3
    3c92:	fb0a f303 	mul.w	r3, sl, r3
    3c96:	0c1b      	lsrs	r3, r3, #16
    3c98:	3325      	adds	r3, #37	; 0x25
    3c9a:	b29b      	uxth	r3, r3
    3c9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ca0:	18e1      	adds	r1, r4, r3
    3ca2:	5ce2      	ldrb	r2, [r4, r3]
    3ca4:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3ca8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3cac:	54e2      	strb	r2, [r4, r3]
    3cae:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3cb2:	784a      	ldrb	r2, [r1, #1]
    3cb4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3cb8:	704a      	strb	r2, [r1, #1]
    3cba:	788b      	ldrb	r3, [r1, #2]
    3cbc:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3cc0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3cc4:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3cc6:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3cca:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3cce:	4416      	add	r6, r2
    3cd0:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cd2:	f8d9 3000 	ldr.w	r3, [r9]
    3cd6:	9304      	str	r3, [sp, #16]
    3cd8:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3cda:	9b04      	ldr	r3, [sp, #16]
    3cdc:	bf98      	it	ls
    3cde:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3ce0:	f44f 728c 	mov.w	r2, #280	; 0x118
    3ce4:	bf98      	it	ls
    3ce6:	b2b6      	uxthls	r6, r6
    3ce8:	fb02 f303 	mul.w	r3, r2, r3
    3cec:	fb06 f303 	mul.w	r3, r6, r3
    3cf0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cf4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3cf8:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cfa:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cfc:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d00:	d503      	bpl.n	3d0a <juggle_half(LEDStruct&)+0x60a>
    3d02:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3d06:	3207      	adds	r2, #7
    3d08:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d0a:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d0c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3d10:	9a02      	ldr	r2, [sp, #8]
    3d12:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d16:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    3d1a:	9803      	ldr	r0, [sp, #12]
    3d1c:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3d20:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d22:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3d24:	bf48      	it	mi
    3d26:	4255      	negmi	r5, r2
    3d28:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3d2c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d30:	bf54      	ite	pl
    3d32:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3d34:	b22d      	sxthmi	r5, r5
    3d36:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d3a:	9100      	str	r1, [sp, #0]
    3d3c:	4641      	mov	r1, r8
    3d3e:	f006 fbaf 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d42:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d46:	b29b      	uxth	r3, r3
    3d48:	fb0a f303 	mul.w	r3, sl, r3
    3d4c:	0c1b      	lsrs	r3, r3, #16
    3d4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d52:	18e1      	adds	r1, r4, r3
    3d54:	5ce2      	ldrb	r2, [r4, r3]
    3d56:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3d5a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d5e:	54e2      	strb	r2, [r4, r3]
    3d60:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3d64:	784a      	ldrb	r2, [r1, #1]
    3d66:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d6a:	704a      	strb	r2, [r1, #1]
    3d6c:	788b      	ldrb	r3, [r1, #2]
    3d6e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3d72:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d76:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3d78:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3d7c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d80:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d84:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3d86:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d88:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3d8a:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d8c:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3d8e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d92:	4619      	mov	r1, r3
    3d94:	f63f af3f 	bhi.w	3c16 <juggle_half(LEDStruct&)+0x516>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3d98:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3d9c:	2a00      	cmp	r2, #0
    3d9e:	f47f ae5b 	bne.w	3a58 <juggle_half(LEDStruct&)+0x358>
    3da2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3da6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3da8:	7822      	ldrb	r2, [r4, #0]
    3daa:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3dae:	7862      	ldrb	r2, [r4, #1]
    3db0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3db4:	78a2      	ldrb	r2, [r4, #2]
    3db6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3dba:	3403      	adds	r4, #3
    3dbc:	42a1      	cmp	r1, r4
    3dbe:	f1a3 0303 	sub.w	r3, r3, #3
    3dc2:	d1f1      	bne.n	3da8 <juggle_half(LEDStruct&)+0x6a8>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3dc4:	b00d      	add	sp, #52	; 0x34
    3dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3dca:	4620      	mov	r0, r4
    3dcc:	f7ff f880 	bl	2ed0 <juggle_update(LEDStruct&)>
    3dd0:	e54d      	b.n	386e <juggle_half(LEDStruct&)+0x16e>
    3dd2:	bf00      	nop
    3dd4:	0000e56c 	.word	0x0000e56c
    3dd8:	1ffface8 	.word	0x1ffface8
    3ddc:	0000ed30 	.word	0x0000ed30
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3de0:	2b00      	cmp	r3, #0
    3de2:	f43f af03 	beq.w	3bec <juggle_half(LEDStruct&)+0x4ec>
    3de6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3dea:	2700      	movs	r7, #0
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3dec:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3df0:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3df4:	3301      	adds	r3, #1
    3df6:	440b      	add	r3, r1
    3df8:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dfa:	f8d9 1000 	ldr.w	r1, [r9]
    3dfe:	9109      	str	r1, [sp, #36]	; 0x24
    3e00:	4433      	add	r3, r6
    3e02:	b29b      	uxth	r3, r3
    3e04:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e06:	9909      	ldr	r1, [sp, #36]	; 0x24
    3e08:	bf9c      	itt	ls
    3e0a:	021b      	lslls	r3, r3, #8
    3e0c:	b29b      	uxthls	r3, r3
    3e0e:	fb0a f101 	mul.w	r1, sl, r1
    3e12:	fb03 f301 	mul.w	r3, r3, r1
    3e16:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e1e:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e20:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e24:	d503      	bpl.n	3e2e <juggle_half(LEDStruct&)+0x72e>
    3e26:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3e2a:	3107      	adds	r1, #7
    3e2c:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e2e:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e32:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e34:	9902      	ldr	r1, [sp, #8]
    3e36:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3e3a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3e3e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e42:	fb05 050e 	mla	r5, r5, lr, r0
    3e46:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3e48:	0418      	lsls	r0, r3, #16
    3e4a:	bf48      	it	mi
    3e4c:	426d      	negmi	r5, r5
    3e4e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3e52:	9803      	ldr	r0, [sp, #12]
    3e54:	9100      	str	r1, [sp, #0]
    3e56:	b22d      	sxth	r5, r5
    3e58:	4641      	mov	r1, r8
    3e5a:	f006 fb21 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e5e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e62:	2226      	movs	r2, #38	; 0x26
    3e64:	b29b      	uxth	r3, r3
    3e66:	fb02 f303 	mul.w	r3, r2, r3
    3e6a:	0c1b      	lsrs	r3, r3, #16
    3e6c:	3370      	adds	r3, #112	; 0x70
    3e6e:	b29b      	uxth	r3, r3
    3e70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e74:	18e1      	adds	r1, r4, r3
    3e76:	5ce2      	ldrb	r2, [r4, r3]
    3e78:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3e7c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e80:	54e2      	strb	r2, [r4, r3]
    3e82:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3e86:	784a      	ldrb	r2, [r1, #1]
    3e88:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3e8c:	704a      	strb	r2, [r1, #1]
    3e8e:	788b      	ldrb	r3, [r1, #2]
    3e90:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3e94:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e98:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e9a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e9e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3ea2:	4413      	add	r3, r2
    3ea4:	3301      	adds	r3, #1
    3ea6:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ea8:	f8d9 3000 	ldr.w	r3, [r9]
    3eac:	9308      	str	r3, [sp, #32]
    3eae:	b2b6      	uxth	r6, r6
    3eb0:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3eb2:	9b08      	ldr	r3, [sp, #32]
    3eb4:	bf9c      	itt	ls
    3eb6:	0236      	lslls	r6, r6, #8
    3eb8:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3eba:	fb0a f303 	mul.w	r3, sl, r3
    3ebe:	fb06 f303 	mul.w	r3, r6, r3
    3ec2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3ec6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3eca:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ecc:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ece:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ed2:	d503      	bpl.n	3edc <juggle_half(LEDStruct&)+0x7dc>
    3ed4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3ed8:	3207      	adds	r2, #7
    3eda:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3edc:	9802      	ldr	r0, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ede:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ee0:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3ee4:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3ee8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    3eec:	9803      	ldr	r0, [sp, #12]
    3eee:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3ef2:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ef4:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3ef6:	bf48      	it	mi
    3ef8:	426d      	negmi	r5, r5
    3efa:	b22d      	sxth	r5, r5
    3efc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3f00:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3f04:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3f08:	9100      	str	r1, [sp, #0]
    3f0a:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    3f0e:	4641      	mov	r1, r8
    3f10:	b2ad      	uxth	r5, r5
    3f12:	f006 fac5 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f16:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3f1a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3f1e:	0c1b      	lsrs	r3, r3, #16
    3f20:	334b      	adds	r3, #75	; 0x4b
    3f22:	b29b      	uxth	r3, r3
    3f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f28:	18e1      	adds	r1, r4, r3
    3f2a:	5ce2      	ldrb	r2, [r4, r3]
    3f2c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3f30:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f34:	54e2      	strb	r2, [r4, r3]
    3f36:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3f3a:	784a      	ldrb	r2, [r1, #1]
    3f3c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f40:	704a      	strb	r2, [r1, #1]
    3f42:	788b      	ldrb	r3, [r1, #2]
    3f44:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3f48:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f4c:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    3f4e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3f52:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f56:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f5a:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3f5c:	440a      	add	r2, r1
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f5e:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3f60:	b2d2      	uxtb	r2, r2
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f62:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    3f64:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f68:	f63f af42 	bhi.w	3df0 <juggle_half(LEDStruct&)+0x6f0>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3f6c:	b00d      	add	sp, #52	; 0x34
    3f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3f72:	3741      	adds	r7, #65	; 0x41
    3f74:	230f      	movs	r3, #15
    3f76:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
    3f7a:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    3f7e:	e471      	b.n	3864 <juggle_half(LEDStruct&)+0x164>
    3f80:	4620      	mov	r0, r4
    3f82:	f7fc fa85 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    3f86:	e46d      	b.n	3864 <juggle_half(LEDStruct&)+0x164>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3f88:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	f43f af08 	beq.w	3da2 <juggle_half(LEDStruct&)+0x6a2>
    3f92:	e62b      	b.n	3bec <juggle_half(LEDStruct&)+0x4ec>

00003f94 <multi_juggle(LEDStruct&)>:
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    3f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3f98:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    3f9c:	b089      	sub	sp, #36	; 0x24
    3f9e:	4605      	mov	r5, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	f040 80a9 	bne.w	40f8 <multi_juggle(LEDStruct&)+0x164>
    3fa6:	4ebd      	ldr	r6, [pc, #756]	; (429c <multi_juggle(LEDStruct&)+0x308>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3fa8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3fac:	8833      	ldrh	r3, [r6, #0]
    3fae:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3fb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3fb6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3fba:	3019      	adds	r0, #25
    3fbc:	b280      	uxth	r0, r0
    3fbe:	eb00 2440 	add.w	r4, r0, r0, lsl #9
    3fc2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    3fc6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    3fca:	3419      	adds	r4, #25
    3fcc:	b2a4      	uxth	r4, r4
    3fce:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    3fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    3fd6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fda:	3319      	adds	r3, #25
    3fdc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3fe0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3fe4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fe8:	3319      	adds	r3, #25
    3fea:	b29b      	uxth	r3, r3
    3fec:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3ff0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3ff4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3ff8:	3119      	adds	r1, #25
    3ffa:	b289      	uxth	r1, r1
    3ffc:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4000:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4004:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4008:	3219      	adds	r2, #25
    400a:	b292      	uxth	r2, r2
    400c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4010:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4014:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4018:	f10e 0e19 	add.w	lr, lr, #25
    401c:	fa1f fe8e 	uxth.w	lr, lr
    4020:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    4024:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    4028:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    402c:	f10c 0c19 	add.w	ip, ip, #25
    4030:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4034:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4038:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    403c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4040:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4044:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4048:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    404a:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    404c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4050:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4054:	b2c9      	uxtb	r1, r1
    4056:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    405a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    405e:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4060:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4064:	f108 0819 	add.w	r8, r8, #25
    4068:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    406c:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    4070:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4072:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4074:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4078:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    407c:	eb04 2414 	add.w	r4, r4, r4, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    4080:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    4084:	f3c4 14c0 	ubfx	r4, r4, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4088:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    408a:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    408e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4092:	f885 2230 	strb.w	r2, [r5, #560]	; 0x230
    4096:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    409a:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    409c:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    40a0:	f885 0235 	strb.w	r0, [r5, #565]	; 0x235
	leds.juggle_phased		 = jp;
    40a4:	f885 4236 	strb.w	r4, [r5, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    40a8:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    40ac:	f885 1232 	strb.w	r1, [r5, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    40b0:	f107 040a 	add.w	r4, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    40b4:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    40b6:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    40b8:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40bc:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    40c0:	f885 21c4 	strb.w	r2, [r5, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    40c4:	f885 c234 	strb.w	ip, [r5, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    40c8:	f885 4231 	strb.w	r4, [r5, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    40cc:	f885 122e 	strb.w	r1, [r5, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    40d0:	f885 122a 	strb.w	r1, [r5, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    40d4:	f885 01c3 	strb.w	r0, [r5, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    40d8:	f1bc 0f00 	cmp.w	ip, #0
    40dc:	d004      	beq.n	40e8 <multi_juggle(LEDStruct&)+0x154>
    40de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    40e2:	408b      	lsls	r3, r1
    40e4:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    40e8:	f895 322c 	ldrb.w	r3, [r5, #556]	; 0x22c
    40ec:	2b06      	cmp	r3, #6
    40ee:	f000 80be 	beq.w	426e <multi_juggle(LEDStruct&)+0x2da>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    40f2:	2b04      	cmp	r3, #4
    40f4:	f000 80c2 	beq.w	427c <multi_juggle(LEDStruct&)+0x2e8>
// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    40f8:	4b69      	ldr	r3, [pc, #420]	; (42a0 <multi_juggle(LEDStruct&)+0x30c>)
    40fa:	781b      	ldrb	r3, [r3, #0]
    40fc:	2b00      	cmp	r3, #0
    40fe:	f040 80b2 	bne.w	4266 <multi_juggle(LEDStruct&)+0x2d2>

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    4102:	f895 2232 	ldrb.w	r2, [r5, #562]	; 0x232
    4106:	4f67      	ldr	r7, [pc, #412]	; (42a4 <multi_juggle(LEDStruct&)+0x310>)
    4108:	2196      	movs	r1, #150	; 0x96
    410a:	4628      	mov	r0, r5
    410c:	f006 f968 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4110:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    4114:	2b00      	cmp	r3, #0
    4116:	d074      	beq.n	4202 <multi_juggle(LEDStruct&)+0x26e>
    4118:	f8df b198 	ldr.w	fp, [pc, #408]	; 42b4 <multi_juggle(LEDStruct&)+0x320>
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    411c:	9703      	str	r7, [sp, #12]
    411e:	f505 79e4 	add.w	r9, r5, #456	; 0x1c8
    4122:	2200      	movs	r2, #0
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
    4124:	f04f 084b 	mov.w	r8, #75	; 0x4b
    4128:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    412c:	f895 1231 	ldrb.w	r1, [r5, #561]	; 0x231
    4130:	fb98 f3f3 	sdiv	r3, r8, r3
    4134:	b290      	uxth	r0, r2
    4136:	fb10 f603 	smulbb	r6, r0, r3
    413a:	1c54      	adds	r4, r2, #1
    413c:	4408      	add	r0, r1
    413e:	fb14 f303 	smulbb	r3, r4, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    4142:	28ff      	cmp	r0, #255	; 0xff
    4144:	b299      	uxth	r1, r3
    4146:	bf9c      	itt	ls
    4148:	0203      	lslls	r3, r0, #8
    414a:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    414c:	9b03      	ldr	r3, [sp, #12]
    414e:	681b      	ldr	r3, [r3, #0]
    4150:	9307      	str	r3, [sp, #28]
	return ret;
    4152:	9b07      	ldr	r3, [sp, #28]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4154:	fb0a f303 	mul.w	r3, sl, r3
    4158:	fb00 f303 	mul.w	r3, r0, r3
    415c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4160:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    4164:	b2b6      	uxth	r6, r6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4166:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    416a:	d003      	beq.n	4174 <multi_juggle(LEDStruct&)+0x1e0>
    416c:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    4170:	3007      	adds	r0, #7
    4172:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4174:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4178:	4f4b      	ldr	r7, [pc, #300]	; (42a8 <multi_juggle(LEDStruct&)+0x314>)
    417a:	f81b 300c 	ldrb.w	r3, [fp, ip]
    417e:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
    4182:	f3c0 0046 	ubfx	r0, r0, #1, #7
    4186:	fb03 c000 	mla	r0, r3, r0, ip

    if( theta & 0x8000 ) y = -y;
    418a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    418e:	b283      	uxth	r3, r0

    if( theta & 0x8000 ) y = -y;
    4190:	bf18      	it	ne
    4192:	425b      	negne	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4194:	43f0      	mvns	r0, r6
    4196:	b21b      	sxth	r3, r3
    4198:	4401      	add	r1, r0
    419a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    419e:	f895 0233 	ldrb.w	r0, [r5, #563]	; 0x233
    41a2:	f895 e22f 	ldrb.w	lr, [r5, #559]	; 0x22f
    41a6:	b29b      	uxth	r3, r3
    41a8:	b289      	uxth	r1, r1
    41aa:	fb01 3103 	mla	r1, r1, r3, r3
    41ae:	fb00 e202 	mla	r2, r0, r2, lr
    41b2:	eb06 4611 	add.w	r6, r6, r1, lsr #16
    41b6:	f895 1228 	ldrb.w	r1, [r5, #552]	; 0x228
    41ba:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    41be:	9100      	str	r1, [sp, #0]
    41c0:	a806      	add	r0, sp, #24
    41c2:	4649      	mov	r1, r9
    41c4:	b2b6      	uxth	r6, r6
    41c6:	b2d2      	uxtb	r2, r2
    41c8:	f006 f96a 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    41cc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    41d0:	18e9      	adds	r1, r5, r3
    41d2:	5cea      	ldrb	r2, [r5, r3]
    41d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    41d8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    41dc:	54ea      	strb	r2, [r5, r3]
    41de:	f89d 3019 	ldrb.w	r3, [sp, #25]
    41e2:	784a      	ldrb	r2, [r1, #1]
    41e4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    41e8:	704a      	strb	r2, [r1, #1]
    41ea:	788b      	ldrb	r3, [r1, #2]
    41ec:	f89d 201a 	ldrb.w	r2, [sp, #26]
    41f0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41f4:	708b      	strb	r3, [r1, #2]

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    41f6:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    41fa:	b2e2      	uxtb	r2, r4
    41fc:	4293      	cmp	r3, r2
    41fe:	d895      	bhi.n	412c <multi_juggle(LEDStruct&)+0x198>
    4200:	9f03      	ldr	r7, [sp, #12]
    4202:	462a      	mov	r2, r5
    4204:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4208:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    420a:	7819      	ldrb	r1, [r3, #0]
    420c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4210:	7859      	ldrb	r1, [r3, #1]
    4212:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    4216:	7899      	ldrb	r1, [r3, #2]
    4218:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    421c:	3303      	adds	r3, #3
    421e:	4298      	cmp	r0, r3
    4220:	f1a2 0203 	sub.w	r2, r2, #3
    4224:	d1f1      	bne.n	420a <multi_juggle(LEDStruct&)+0x276>
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4226:	4e21      	ldr	r6, [pc, #132]	; (42ac <multi_juggle(LEDStruct&)+0x318>)
    4228:	6833      	ldr	r3, [r6, #0]
    422a:	07db      	lsls	r3, r3, #31
    422c:	d514      	bpl.n	4258 <multi_juggle(LEDStruct&)+0x2c4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    422e:	683b      	ldr	r3, [r7, #0]
    4230:	4c1f      	ldr	r4, [pc, #124]	; (42b0 <multi_juggle(LEDStruct&)+0x31c>)
    4232:	9306      	str	r3, [sp, #24]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4234:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4238:	9b06      	ldr	r3, [sp, #24]
    423a:	1a5b      	subs	r3, r3, r1
    423c:	4293      	cmp	r3, r2
    423e:	d308      	bcc.n	4252 <multi_juggle(LEDStruct&)+0x2be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4240:	683a      	ldr	r2, [r7, #0]
    4242:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    4246:	9205      	str	r2, [sp, #20]
	return ret;
    4248:	9a05      	ldr	r2, [sp, #20]
    424a:	6022      	str	r2, [r4, #0]
    424c:	3301      	adds	r3, #1
    424e:	f885 322f 	strb.w	r3, [r5, #559]	; 0x22f
}
    4252:	b009      	add	sp, #36	; 0x24
    4254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4258:	4630      	mov	r0, r6
    425a:	f007 f83b 	bl	b2d4 <__cxa_guard_acquire>
    425e:	b988      	cbnz	r0, 4284 <multi_juggle(LEDStruct&)+0x2f0>
    4260:	4c13      	ldr	r4, [pc, #76]	; (42b0 <multi_juggle(LEDStruct&)+0x31c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4262:	683b      	ldr	r3, [r7, #0]
    4264:	e7e5      	b.n	4232 <multi_juggle(LEDStruct&)+0x29e>
// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4266:	4628      	mov	r0, r5
    4268:	f7fe fe32 	bl	2ed0 <juggle_update(LEDStruct&)>
    426c:	e749      	b.n	4102 <multi_juggle(LEDStruct&)+0x16e>
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    426e:	3741      	adds	r7, #65	; 0x41
    4270:	230f      	movs	r3, #15
    4272:	f885 7231 	strb.w	r7, [r5, #561]	; 0x231
    4276:	f885 3230 	strb.w	r3, [r5, #560]	; 0x230
    427a:	e73d      	b.n	40f8 <multi_juggle(LEDStruct&)+0x164>
    427c:	4628      	mov	r0, r5
    427e:	f7fc f907 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    4282:	e739      	b.n	40f8 <multi_juggle(LEDStruct&)+0x164>
    4284:	683b      	ldr	r3, [r7, #0]
    4286:	4c0a      	ldr	r4, [pc, #40]	; (42b0 <multi_juggle(LEDStruct&)+0x31c>)
    4288:	9304      	str	r3, [sp, #16]
	return ret;
    428a:	9b04      	ldr	r3, [sp, #16]
    428c:	6023      	str	r3, [r4, #0]
    428e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4292:	4630      	mov	r0, r6
    4294:	6063      	str	r3, [r4, #4]
    4296:	f007 f823 	bl	b2e0 <__cxa_guard_release>
    429a:	e7e2      	b.n	4262 <multi_juggle(LEDStruct&)+0x2ce>
    429c:	1fff8784 	.word	0x1fff8784
    42a0:	1fff91d1 	.word	0x1fff91d1
    42a4:	1ffface8 	.word	0x1ffface8
    42a8:	0000e56c 	.word	0x0000e56c
    42ac:	1fff9a14 	.word	0x1fff9a14
    42b0:	1fff90fc 	.word	0x1fff90fc
    42b4:	0000ed30 	.word	0x0000ed30

000042b8 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    42b8:	4b1a      	ldr	r3, [pc, #104]	; (4324 <rainbow_update(LEDStruct&)+0x6c>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    42ba:	4a1b      	ldr	r2, [pc, #108]	; (4328 <rainbow_update(LEDStruct&)+0x70>)
	switch (update_var) {
    42bc:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    42be:	2100      	movs	r1, #0
    42c0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    42c2:	2b04      	cmp	r3, #4
    42c4:	d808      	bhi.n	42d8 <rainbow_update(LEDStruct&)+0x20>
    42c6:	e8df f003 	tbb	[pc, r3]
    42ca:	1e0f      	.short	0x1e0f
    42cc:	2703      	.short	0x2703
    42ce:	09          	.byte	0x09
    42cf:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    42d0:	4b16      	ldr	r3, [pc, #88]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    42d2:	881b      	ldrh	r3, [r3, #0]
    42d4:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    42d8:	f7fd bf6c 	b.w	21b4 <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    42dc:	4b13      	ldr	r3, [pc, #76]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    42de:	881b      	ldrh	r3, [r3, #0]
    42e0:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		default:	break;
	}
	LEDDebug(leds);
    42e4:	f7fd bf66 	b.w	21b4 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    42e8:	4b10      	ldr	r3, [pc, #64]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    42ea:	881b      	ldrh	r3, [r3, #0]
    42ec:	2b00      	cmp	r3, #0
    42ee:	bf14      	ite	ne
    42f0:	2301      	movne	r3, #1
    42f2:	2300      	moveq	r3, #0
    42f4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    42f8:	bf14      	ite	ne
    42fa:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    42fc:	234b      	moveq	r3, #75	; 0x4b
    42fe:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4302:	f7fd bf57 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    4306:	4b09      	ldr	r3, [pc, #36]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    4308:	881b      	ldrh	r3, [r3, #0]
    430a:	3300      	adds	r3, #0
    430c:	bf18      	it	ne
    430e:	2301      	movne	r3, #1
    4310:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4314:	f7fd bf4e 	b.w	21b4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    4318:	4b04      	ldr	r3, [pc, #16]	; (432c <rainbow_update(LEDStruct&)+0x74>)
    431a:	881b      	ldrh	r3, [r3, #0]
    431c:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4320:	f7fd bf48 	b.w	21b4 <LEDDebug(LEDStruct&)>
    4324:	1fff9a18 	.word	0x1fff9a18
    4328:	1fff91d1 	.word	0x1fff91d1
    432c:	1fff90d2 	.word	0x1fff90d2

00004330 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4330:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4338:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    433a:	2b00      	cmp	r3, #0
    433c:	d15c      	bne.n	43f8 <rainbow_march(LEDStruct&)+0xc8>
    433e:	4869      	ldr	r0, [pc, #420]	; (44e4 <rainbow_march(LEDStruct&)+0x1b4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4340:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4344:	8803      	ldrh	r3, [r0, #0]
    4346:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    434a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    434e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4352:	3319      	adds	r3, #25
    4354:	b29b      	uxth	r3, r3
    4356:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    435a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    435e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4362:	3219      	adds	r2, #25
    4364:	b292      	uxth	r2, r2
    4366:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    436a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    436e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4372:	3119      	adds	r1, #25
    4374:	b289      	uxth	r1, r1
    4376:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    437a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    437e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4382:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4386:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4388:	3619      	adds	r6, #25
    438a:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    438c:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4390:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4394:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4398:	b2ed      	uxtb	r5, r5
    439a:	121b      	asrs	r3, r3, #8
    439c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    43a0:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    43a2:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43a6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43aa:	11ed      	asrs	r5, r5, #7
    43ac:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    43ae:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43b2:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43b4:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    43b6:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    43b8:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43ba:	4573      	cmp	r3, lr
    43bc:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    43be:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    43c2:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    43c6:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    43ca:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    43ce:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    43d2:	f000 8085 	beq.w	44e0 <rainbow_march(LEDStruct&)+0x1b0>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43d6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43da:	b2d2      	uxtb	r2, r2
    43dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    43e0:	1212      	asrs	r2, r2, #8
    43e2:	4472      	add	r2, lr
    43e4:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    43e6:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    43ea:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    43ee:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    43f2:	4620      	mov	r0, r4
    43f4:	f7fd fede 	bl	21b4 <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    43f8:	4b3b      	ldr	r3, [pc, #236]	; (44e8 <rainbow_march(LEDStruct&)+0x1b8>)
    43fa:	781b      	ldrb	r3, [r3, #0]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d16b      	bne.n	44d8 <rainbow_march(LEDStruct&)+0x1a8>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4400:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4404:	bb43      	cbnz	r3, 4458 <rainbow_march(LEDStruct&)+0x128>
    4406:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    440a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    440e:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    4410:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4414:	b2d2      	uxtb	r2, r2
    4416:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    441a:	bb4b      	cbnz	r3, 4470 <rainbow_march(LEDStruct&)+0x140>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    441c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4420:	2b00      	cmp	r3, #0
    4422:	d151      	bne.n	44c8 <rainbow_march(LEDStruct&)+0x198>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4424:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4428:	214b      	movs	r1, #75	; 0x4b
    442a:	4620      	mov	r0, r4
    442c:	f005 ff26 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4430:	4620      	mov	r0, r4
    4432:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4436:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4438:	7802      	ldrb	r2, [r0, #0]
    443a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    443e:	7842      	ldrb	r2, [r0, #1]
    4440:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4444:	7882      	ldrb	r2, [r0, #2]
    4446:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    444a:	3003      	adds	r0, #3
    444c:	4288      	cmp	r0, r1
    444e:	f1a3 0303 	sub.w	r3, r3, #3
    4452:	d1f1      	bne.n	4438 <rainbow_march(LEDStruct&)+0x108>
    4454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4458:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    445c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4460:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    4462:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4466:	b2d2      	uxtb	r2, r2
    4468:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    446c:	2b00      	cmp	r3, #0
    446e:	d0d5      	beq.n	441c <rainbow_march(LEDStruct&)+0xec>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4470:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4474:	2125      	movs	r1, #37	; 0x25
    4476:	4620      	mov	r0, r4
    4478:	f005 ff00 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    447c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4480:	4623      	mov	r3, r4
    4482:	4621      	mov	r1, r4
    4484:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4486:	7810      	ldrb	r0, [r2, #0]
    4488:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    448c:	7850      	ldrb	r0, [r2, #1]
    448e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4492:	7890      	ldrb	r0, [r2, #2]
    4494:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4498:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    449a:	42aa      	cmp	r2, r5
    449c:	f1a1 0103 	sub.w	r1, r1, #3
    44a0:	d1f1      	bne.n	4486 <rainbow_march(LEDStruct&)+0x156>
    44a2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    44a6:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    44a8:	7802      	ldrb	r2, [r0, #0]
    44aa:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    44ae:	7842      	ldrb	r2, [r0, #1]
    44b0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    44b4:	7882      	ldrb	r2, [r0, #2]
    44b6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    44ba:	3003      	adds	r0, #3
    44bc:	4288      	cmp	r0, r1
    44be:	f1a3 0303 	sub.w	r3, r3, #3
    44c2:	d1f1      	bne.n	44a8 <rainbow_march(LEDStruct&)+0x178>
    44c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    44c8:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    44cc:	4620      	mov	r0, r4
    44ce:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    44d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    44d4:	f005 bed2 	b.w	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    44d8:	4620      	mov	r0, r4
    44da:	f7ff feed 	bl	42b8 <rainbow_update(LEDStruct&)>
    44de:	e78f      	b.n	4400 <rainbow_march(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    44e0:	461a      	mov	r2, r3
    44e2:	e780      	b.n	43e6 <rainbow_march(LEDStruct&)+0xb6>
    44e4:	1fff8784 	.word	0x1fff8784
    44e8:	1fff91d1 	.word	0x1fff91d1

000044ec <rainbow_march_beat(LEDStruct&)>:
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    44ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    44ee:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    44f2:	b083      	sub	sp, #12
    44f4:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    44f6:	2b00      	cmp	r3, #0
    44f8:	d15c      	bne.n	45b4 <rainbow_march_beat(LEDStruct&)+0xc8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44fa:	489c      	ldr	r0, [pc, #624]	; (476c <rainbow_march_beat(LEDStruct&)+0x280>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    44fc:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4500:	8803      	ldrh	r3, [r0, #0]
    4502:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4506:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    450a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    450e:	3319      	adds	r3, #25
    4510:	b29b      	uxth	r3, r3
    4512:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4516:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    451a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    451e:	3219      	adds	r2, #25
    4520:	b292      	uxth	r2, r2
    4522:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4526:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    452a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    452e:	3119      	adds	r1, #25
    4530:	b289      	uxth	r1, r1
    4532:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4536:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    453a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    453e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4542:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4544:	3619      	adds	r6, #25
    4546:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4548:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    454c:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4550:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4554:	b2ed      	uxtb	r5, r5
    4556:	121b      	asrs	r3, r3, #8
    4558:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    455c:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    455e:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4562:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4566:	11ed      	asrs	r5, r5, #7
    4568:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    456a:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    456e:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4570:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4572:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4574:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4576:	4573      	cmp	r3, lr
    4578:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    457a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    457e:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    4582:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4586:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    458a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    458e:	f000 80eb 	beq.w	4768 <rainbow_march_beat(LEDStruct&)+0x27c>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4592:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4596:	b2d2      	uxtb	r2, r2
    4598:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    459c:	1212      	asrs	r2, r2, #8
    459e:	4472      	add	r2, lr
    45a0:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    45a2:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    45a6:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    45aa:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    45ae:	4620      	mov	r0, r4
    45b0:	f7fd fe00 	bl	21b4 <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    45b4:	4b6e      	ldr	r3, [pc, #440]	; (4770 <rainbow_march_beat(LEDStruct&)+0x284>)
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	2b00      	cmp	r3, #0
    45ba:	f040 80c9 	bne.w	4750 <rainbow_march_beat(LEDStruct&)+0x264>

	if (leds.this_dir == 0) {
    45be:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45c2:	4a6c      	ldr	r2, [pc, #432]	; (4774 <rainbow_march_beat(LEDStruct&)+0x288>)
    45c4:	2b00      	cmp	r3, #0
    45c6:	d161      	bne.n	468c <rainbow_march_beat(LEDStruct&)+0x1a0>
    45c8:	6812      	ldr	r2, [r2, #0]
    45ca:	9200      	str	r2, [sp, #0]
	return ret;
    45cc:	9900      	ldr	r1, [sp, #0]
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    45ce:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    45d2:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    45d6:	f44f 728c 	mov.w	r2, #280	; 0x118
    45da:	fb02 f201 	mul.w	r2, r2, r1
    45de:	021b      	lsls	r3, r3, #8
    45e0:	fb03 f302 	mul.w	r3, r3, r2
    45e4:	0e1b      	lsrs	r3, r3, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    45e6:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    45e8:	0648      	lsls	r0, r1, #25
    45ea:	f100 80a9 	bmi.w	4740 <rainbow_march_beat(LEDStruct&)+0x254>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    45ee:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    45f2:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    45f6:	4960      	ldr	r1, [pc, #384]	; (4778 <rainbow_march_beat(LEDStruct&)+0x28c>)
    45f8:	1112      	asrs	r2, r2, #4
    45fa:	0052      	lsls	r2, r2, #1
    45fc:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    45fe:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4600:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4602:	fb12 f000 	smulbb	r0, r2, r0
    4606:	eb01 1120 	add.w	r1, r1, r0, asr #4
    460a:	b2ca      	uxtb	r2, r1
    if( theta & 0x80 ) y = -y;
    460c:	0619      	lsls	r1, r3, #24
    460e:	bf48      	it	mi
    4610:	4252      	negmi	r2, r2
    4612:	b252      	sxtb	r2, r2
    4614:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

    y += 128;
    4618:	3a80      	subs	r2, #128	; 0x80
    461a:	b2d2      	uxtb	r2, r2
    461c:	442b      	add	r3, r5
    461e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4622:	eb03 12e2 	add.w	r2, r3, r2, asr #7
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4626:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    462a:	b2d2      	uxtb	r2, r2
    462c:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4630:	2b00      	cmp	r3, #0
    4632:	d060      	beq.n	46f6 <rainbow_march_beat(LEDStruct&)+0x20a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4634:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4638:	2125      	movs	r1, #37	; 0x25
    463a:	4620      	mov	r0, r4
    463c:	f005 fe1e 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4640:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4644:	4623      	mov	r3, r4
    4646:	4621      	mov	r1, r4
    4648:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    464a:	7810      	ldrb	r0, [r2, #0]
    464c:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    4650:	7850      	ldrb	r0, [r2, #1]
    4652:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4656:	7890      	ldrb	r0, [r2, #2]
    4658:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    465c:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    465e:	42aa      	cmp	r2, r5
    4660:	f1a1 0103 	sub.w	r1, r1, #3
    4664:	d1f1      	bne.n	464a <rainbow_march_beat(LEDStruct&)+0x15e>
    4666:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    466a:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    466c:	781a      	ldrb	r2, [r3, #0]
    466e:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4672:	785a      	ldrb	r2, [r3, #1]
    4674:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4678:	789a      	ldrb	r2, [r3, #2]
    467a:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    467e:	3303      	adds	r3, #3
    4680:	428b      	cmp	r3, r1
    4682:	f1a0 0003 	sub.w	r0, r0, #3
    4686:	d1f1      	bne.n	466c <rainbow_march_beat(LEDStruct&)+0x180>
		strip_sync(leds);
	}
}
    4688:	b003      	add	sp, #12
    468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    468c:	6812      	ldr	r2, [r2, #0]
    468e:	9201      	str	r2, [sp, #4]
	return ret;
    4690:	9901      	ldr	r1, [sp, #4]

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4692:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    4696:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    469a:	f44f 728c 	mov.w	r2, #280	; 0x118
    469e:	fb02 f201 	mul.w	r2, r2, r1
    46a2:	021b      	lsls	r3, r3, #8
    46a4:	fb03 f302 	mul.w	r3, r3, r2
    46a8:	0e1b      	lsrs	r3, r3, #24
    46aa:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    46ac:	064a      	lsls	r2, r1, #25
    46ae:	d43f      	bmi.n	4730 <rainbow_march_beat(LEDStruct&)+0x244>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    46b0:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    46b4:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    46b8:	492f      	ldr	r1, [pc, #188]	; (4778 <rainbow_march_beat(LEDStruct&)+0x28c>)
    46ba:	1112      	asrs	r2, r2, #4
    46bc:	0052      	lsls	r2, r2, #1
    46be:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    46c0:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    46c2:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    46c4:	fb12 f000 	smulbb	r0, r2, r0
    46c8:	eb01 1120 	add.w	r1, r1, r0, asr #4
    46cc:	b2ca      	uxtb	r2, r1
    if( theta & 0x80 ) y = -y;
    46ce:	061b      	lsls	r3, r3, #24
    46d0:	bf48      	it	mi
    46d2:	4252      	negmi	r2, r2
    46d4:	b252      	sxtb	r2, r2
    46d6:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

    y += 128;
    46da:	3a80      	subs	r2, #128	; 0x80
    46dc:	b2d2      	uxtb	r2, r2
    46de:	1b5b      	subs	r3, r3, r5
    46e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    46e4:	eba3 12e2 	sub.w	r2, r3, r2, asr #7
	}

	if (!leds.rainbow_split) {
    46e8:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    46ec:	b2d2      	uxtb	r2, r2
    46ee:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}

	if (!leds.rainbow_split) {
    46f2:	2b00      	cmp	r3, #0
    46f4:	d19e      	bne.n	4634 <rainbow_march_beat(LEDStruct&)+0x148>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    46f6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    46fa:	bb6b      	cbnz	r3, 4758 <rainbow_march_beat(LEDStruct&)+0x26c>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    46fc:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4700:	214b      	movs	r1, #75	; 0x4b
    4702:	4620      	mov	r0, r4
    4704:	f005 fdba 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4708:	4620      	mov	r0, r4
    470a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    470e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4710:	781a      	ldrb	r2, [r3, #0]
    4712:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4716:	785a      	ldrb	r2, [r3, #1]
    4718:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    471c:	789a      	ldrb	r2, [r3, #2]
    471e:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4722:	3303      	adds	r3, #3
    4724:	4299      	cmp	r1, r3
    4726:	f1a0 0003 	sub.w	r0, r0, #3
    472a:	d1f1      	bne.n	4710 <rainbow_march_beat(LEDStruct&)+0x224>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    472c:	b003      	add	sp, #12
    472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4730:	43c9      	mvns	r1, r1
    4732:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4734:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4738:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    473a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    473e:	e7bb      	b.n	46b8 <rainbow_march_beat(LEDStruct&)+0x1cc>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    4740:	43c9      	mvns	r1, r1
    4742:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4744:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    4748:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    474a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    474e:	e752      	b.n	45f6 <rainbow_march_beat(LEDStruct&)+0x10a>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4750:	4620      	mov	r0, r4
    4752:	f7ff fdb1 	bl	42b8 <rainbow_update(LEDStruct&)>
    4756:	e732      	b.n	45be <rainbow_march_beat(LEDStruct&)+0xd2>
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4758:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    475c:	4620      	mov	r0, r4
    475e:	2196      	movs	r1, #150	; 0x96
    4760:	f005 fd8c 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4764:	b003      	add	sp, #12
    4766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4768:	461a      	mov	r2, r3
    476a:	e71a      	b.n	45a2 <rainbow_march_beat(LEDStruct&)+0xb6>
    476c:	1fff8784 	.word	0x1fff8784
    4770:	1fff91d1 	.word	0x1fff91d1
    4774:	1ffface8 	.word	0x1ffface8
    4778:	0000e70c 	.word	0x0000e70c

0000477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
    477c:	b5f0      	push	{r4, r5, r6, r7, lr}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    477e:	4d20      	ldr	r5, [pc, #128]	; (4800 <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)+0x84>)
    4780:	f89d 4014 	ldrb.w	r4, [sp, #20]
    4784:	882a      	ldrh	r2, [r5, #0]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4786:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
    478a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    478e:	f243 6719 	movw	r7, #13849	; 0x3619
    4792:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    4796:	443a      	add	r2, r7
    4798:	b292      	uxth	r2, r2
    479a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    479e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    47a2:	443e      	add	r6, r7
    47a4:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47a6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    47aa:	eb06 2716 	add.w	r7, r6, r6, lsr #8
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
    47ae:	b2d2      	uxtb	r2, r2
	leds.fire_cooling2	= fc - 10 + random8(21);
    47b0:	b2ff      	uxtb	r7, r7

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
    47b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    47b6:	3b0a      	subs	r3, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    47b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
    47bc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    47c0:	eb03 2222 	add.w	r2, r3, r2, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    47c4:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    47c8:	f1a4 030a 	sub.w	r3, r4, #10
    47cc:	eb03 2727 	add.w	r7, r3, r7, asr #8
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    47d0:	f04f 0e01 	mov.w	lr, #1
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    47d4:	f880 1316 	strb.w	r1, [r0, #790]	; 0x316

	leds.fire_sparking2 = fs - 10 + random8(21);
    47d8:	f880 227d 	strb.w	r2, [r0, #637]	; 0x27d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    47dc:	210c      	movs	r1, #12
	leds.delay_time			= 15;
    47de:	220f      	movs	r2, #15
	leds.use_palette		= 0; 
    47e0:	2300      	movs	r3, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47e2:	802e      	strh	r6, [r5, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    47e4:	f880 427e 	strb.w	r4, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;

	leds.fire_sparking2 = fs - 10 + random8(21);
	leds.fire_cooling2	= fc - 10 + random8(21);
    47e8:	f880 727f 	strb.w	r7, [r0, #639]	; 0x27f
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    47ec:	f880 e22e 	strb.w	lr, [r0, #558]	; 0x22e
	leds.mode_type			= FIRE;
    47f0:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
	leds.delay_time			= 15;
    47f4:	f880 21c3 	strb.w	r2, [r0, #451]	; 0x1c3
	leds.use_palette		= 0; 
    47f8:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    47fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47fe:	bf00      	nop
    4800:	1fff8784 	.word	0x1fff8784

00004804 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4804:	4b16      	ldr	r3, [pc, #88]	; (4860 <fire_update(LEDStruct&)+0x5c>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4806:	4a17      	ldr	r2, [pc, #92]	; (4864 <fire_update(LEDStruct&)+0x60>)
	switch (update_var) {
    4808:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    480a:	2100      	movs	r1, #0
    480c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    480e:	2b04      	cmp	r3, #4
    4810:	d808      	bhi.n	4824 <fire_update(LEDStruct&)+0x20>
    4812:	e8df f003 	tbb	[pc, r3]
    4816:	1812      	.short	0x1812
    4818:	1e03      	.short	0x1e03
    481a:	09          	.byte	0x09
    481b:	00          	.byte	0x00
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    481c:	4b12      	ldr	r3, [pc, #72]	; (4868 <fire_update(LEDStruct&)+0x64>)
    481e:	881b      	ldrh	r3, [r3, #0]
    4820:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4824:	f7fd bcc6 	b.w	21b4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    4828:	4b0f      	ldr	r3, [pc, #60]	; (4868 <fire_update(LEDStruct&)+0x64>)
    482a:	881b      	ldrh	r3, [r3, #0]
    482c:	3300      	adds	r3, #0
    482e:	bf18      	it	ne
    4830:	2301      	movne	r3, #1
    4832:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
		default:	break;
	}
	LEDDebug(leds);
    4836:	f7fd bcbd 	b.w	21b4 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    483a:	4b0b      	ldr	r3, [pc, #44]	; (4868 <fire_update(LEDStruct&)+0x64>)
    483c:	881b      	ldrh	r3, [r3, #0]
    483e:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4842:	f7fd bcb7 	b.w	21b4 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    4846:	4b08      	ldr	r3, [pc, #32]	; (4868 <fire_update(LEDStruct&)+0x64>)
    4848:	881b      	ldrh	r3, [r3, #0]
    484a:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    484e:	f7fd bcb1 	b.w	21b4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4852:	4b05      	ldr	r3, [pc, #20]	; (4868 <fire_update(LEDStruct&)+0x64>)
    4854:	881b      	ldrh	r3, [r3, #0]
    4856:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		default:	break;
	}
	LEDDebug(leds);
    485a:	f7fd bcab 	b.w	21b4 <LEDDebug(LEDStruct&)>
    485e:	bf00      	nop
    4860:	1fff9a18 	.word	0x1fff9a18
    4864:	1fff91d1 	.word	0x1fff91d1
    4868:	1fff90d2 	.word	0x1fff90d2

0000486c <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    486c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4870:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4874:	4ec1      	ldr	r6, [pc, #772]	; (4b7c <fire(LEDStruct&)+0x310>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    4876:	b085      	sub	sp, #20
    4878:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    487a:	2b00      	cmp	r3, #0
    487c:	f000 8186 	beq.w	4b8c <fire(LEDStruct&)+0x320>
	if (keyboard_update) { fire_update(leds); }
    4880:	4bbf      	ldr	r3, [pc, #764]	; (4b80 <fire(LEDStruct&)+0x314>)
    4882:	781b      	ldrb	r3, [r3, #0]
    4884:	2b00      	cmp	r3, #0
    4886:	f040 8175 	bne.w	4b74 <fire(LEDStruct&)+0x308>
    488a:	f894 227e 	ldrb.w	r2, [r4, #638]	; 0x27e
    488e:	49bd      	ldr	r1, [pc, #756]	; (4b84 <fire(LEDStruct&)+0x318>)
    4890:	8833      	ldrh	r3, [r6, #0]
    4892:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4896:	0052      	lsls	r2, r2, #1
    4898:	fb81 1e02 	smull	r1, lr, r1, r2
    489c:	17d2      	asrs	r2, r2, #31
    489e:	ebc2 0eee 	rsb	lr, r2, lr, asr #3
    48a2:	f10e 0e02 	add.w	lr, lr, #2
    48a6:	f204 277f 	addw	r7, r4, #639	; 0x27f
    48aa:	fa5f fe8e 	uxtb.w	lr, lr
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    48ae:	4638      	mov	r0, r7
    48b0:	f204 25ca 	addw	r5, r4, #714	; 0x2ca
    48b4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    48b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    48bc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    48c0:	3319      	adds	r3, #25
    48c2:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    48c4:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    48c8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    48cc:	b2d2      	uxtb	r2, r2
    48ce:	fb12 f20e 	smulbb	r2, r2, lr
    48d2:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < ONE_SIDE; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
    48d6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < ONE_SIDE; i++) {
    48da:	4285      	cmp	r5, r0
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
    48dc:	7002      	strb	r2, [r0, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < ONE_SIDE; i++) {
    48de:	d1e9      	bne.n	48b4 <fire(LEDStruct&)+0x48>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = ONE_SIDE - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    48e0:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 4b88 <fire(LEDStruct&)+0x31c>
    48e4:	8033      	strh	r3, [r6, #0]
    48e6:	f204 21c7 	addw	r1, r4, #711	; 0x2c7
    48ea:	f204 2ec9 	addw	lr, r4, #713	; 0x2c9
    48ee:	f504 7c20 	add.w	ip, r4, #640	; 0x280
    48f2:	780a      	ldrb	r2, [r1, #0]
    48f4:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    48f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    48fc:	fb88 9002 	smull	r9, r0, r8, r2
    4900:	eba0 72e2 	sub.w	r2, r0, r2, asr #31
	for (int i = 0; i < ONE_SIDE; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = ONE_SIDE - 3; k >= 2; k--) {
    4904:	458c      	cmp	ip, r1
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4906:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	for (int i = 0; i < ONE_SIDE; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = ONE_SIDE - 3; k >= 2; k--) {
    490a:	d1f2      	bne.n	48f2 <fire(LEDStruct&)+0x86>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    490c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4910:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4914:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4918:	3319      	adds	r3, #25
    491a:	b29b      	uxth	r3, r3
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    491c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4920:	f894 027c 	ldrb.w	r0, [r4, #636]	; 0x27c
    4924:	8033      	strh	r3, [r6, #0]
    4926:	b2d2      	uxtb	r2, r2
    4928:	4290      	cmp	r0, r2
    492a:	4994      	ldr	r1, [pc, #592]	; (4b7c <fire(LEDStruct&)+0x310>)
    492c:	d926      	bls.n	497c <fire(LEDStruct&)+0x110>
    492e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4932:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4936:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    493a:	3319      	adds	r3, #25
    493c:	b29b      	uxth	r3, r3
    493e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4942:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4946:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    494a:	3219      	adds	r2, #25
    494c:	b290      	uxth	r0, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    494e:	eb00 2210 	add.w	r2, r0, r0, lsr #8
    4952:	eb03 2313 	add.w	r3, r3, r3, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4956:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4958:	b2db      	uxtb	r3, r3
    495a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    495e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4962:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4966:	ebc2 124e 	rsb	r2, r2, lr, lsl #5
    496a:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    496c:	8008      	strh	r0, [r1, #0]
    496e:	3a60      	subs	r2, #96	; 0x60
    4970:	f893 1280 	ldrb.w	r1, [r3, #640]	; 0x280
    4974:	fa81 f152 	uqadd8	r1, r1, r2
    4978:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
	}

	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
    497c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4980:	2b00      	cmp	r3, #0
    4982:	d14f      	bne.n	4a24 <fire(LEDStruct&)+0x1b8>
    4984:	f894 227f 	ldrb.w	r2, [r4, #639]	; 0x27f
    4988:	497e      	ldr	r1, [pc, #504]	; (4b84 <fire(LEDStruct&)+0x318>)
    498a:	8833      	ldrh	r3, [r6, #0]
    498c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4990:	0052      	lsls	r2, r2, #1
    4992:	fb81 1e02 	smull	r1, lr, r1, r2
    4996:	17d2      	asrs	r2, r2, #31
    4998:	ebc2 0eee 	rsb	lr, r2, lr, asr #3
    499c:	f10e 0e02 	add.w	lr, lr, #2
    49a0:	fa5f fe8e 	uxtb.w	lr, lr
    49a4:	f204 3c15 	addw	ip, r4, #789	; 0x315
    49a8:	4628      	mov	r0, r5
    49aa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    49ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    49b2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    49b6:	3319      	adds	r3, #25
    49b8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49ba:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    49be:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    49c2:	b2d2      	uxtb	r2, r2
    49c4:	fb12 f20e 	smulbb	r2, r2, lr
    49c8:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		for (int i = 0; i < ONE_SIDE; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
    49cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
    49d0:	4584      	cmp	ip, r0
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
    49d2:	7002      	strb	r2, [r0, #0]
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
    49d4:	d1e9      	bne.n	49aa <fire(LEDStruct&)+0x13e>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
		}
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    49d6:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 4b88 <fire(LEDStruct&)+0x31c>
    49da:	8033      	strh	r3, [r6, #0]
    49dc:	f204 3112 	addw	r1, r4, #786	; 0x312
    49e0:	f504 7e45 	add.w	lr, r4, #788	; 0x314
    49e4:	f204 2ccb 	addw	ip, r4, #715	; 0x2cb
    49e8:	780a      	ldrb	r2, [r1, #0]
    49ea:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    49ee:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    49f2:	fb88 9002 	smull	r9, r0, r8, r2
    49f6:	eba0 72e2 	sub.w	r2, r0, r2, asr #31
	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
		}
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
    49fa:	458c      	cmp	ip, r1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    49fc:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	// If we're not synced, repeat all of those for the other side
	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / ONE_SIDE) + 2));
		}
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
    4a00:	d1f2      	bne.n	49e8 <fire(LEDStruct&)+0x17c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a02:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a0a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a0e:	3319      	adds	r3, #25
    4a10:	b29b      	uxth	r3, r3
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4a12:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4a16:	f894 027d 	ldrb.w	r0, [r4, #637]	; 0x27d
    4a1a:	8033      	strh	r3, [r6, #0]
    4a1c:	b2d2      	uxtb	r2, r2
    4a1e:	4290      	cmp	r0, r2
    4a20:	4956      	ldr	r1, [pc, #344]	; (4b7c <fire(LEDStruct&)+0x310>)
    4a22:	d87e      	bhi.n	4b22 <fire(LEDStruct&)+0x2b6>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4a24:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a28:	4626      	mov	r6, r4
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d047      	beq.n	4abe <fire(LEDStruct&)+0x252>
    4a2e:	f104 09e1 	add.w	r9, r4, #225	; 0xe1
    4a32:	f10d 080c 	add.w	r8, sp, #12
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4a36:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4a3a:	4640      	mov	r0, r8
    4a3c:	f005 fd0e 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a40:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4a44:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4a48:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a4c:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4a4e:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4a50:	70b3      	strb	r3, [r6, #2]
    4a52:	3603      	adds	r6, #3
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < ONE_SIDE; j++) {
    4a54:	45b1      	cmp	r9, r6
    4a56:	d1ee      	bne.n	4a36 <fire(LEDStruct&)+0x1ca>
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4a58:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a5c:	b19b      	cbz	r3, 4a86 <fire(LEDStruct&)+0x21a>
    4a5e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4a62:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a64:	7822      	ldrb	r2, [r4, #0]
    4a66:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4a6a:	7862      	ldrb	r2, [r4, #1]
    4a6c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4a70:	78a2      	ldrb	r2, [r4, #2]
    4a72:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4a76:	3403      	adds	r4, #3
    4a78:	42a1      	cmp	r1, r4
    4a7a:	f1a3 0303 	sub.w	r3, r3, #3
    4a7e:	d1f1      	bne.n	4a64 <fire(LEDStruct&)+0x1f8>
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4a80:	b005      	add	sp, #20
    4a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4a86:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a8a:	b38b      	cbz	r3, 4af0 <fire(LEDStruct&)+0x284>
    4a8c:	f1a4 06e1 	sub.w	r6, r4, #225	; 0xe1
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4a90:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4a94:	4640      	mov	r0, r8
    4a96:	f005 fce1 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a9a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4a9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4aa2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4aa6:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
        g = rhs.g;
    4aaa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4aae:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
    4ab2:	3c03      	subs	r4, #3
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < ONE_SIDE; j++) {
    4ab4:	42b4      	cmp	r4, r6
    4ab6:	d1eb      	bne.n	4a90 <fire(LEDStruct&)+0x224>
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4ab8:	b005      	add	sp, #20
    4aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4abe:	f1a4 09e1 	sub.w	r9, r4, #225	; 0xe1
    4ac2:	f10d 080c 	add.w	r8, sp, #12
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4ac6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4aca:	4640      	mov	r0, r8
    4acc:	f005 fcc6 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ad0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4ad4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4ad8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4adc:	f886 10de 	strb.w	r1, [r6, #222]	; 0xde
        g = rhs.g;
    4ae0:	f886 20df 	strb.w	r2, [r6, #223]	; 0xdf
        b = rhs.b;
    4ae4:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
    4ae8:	3e03      	subs	r6, #3
		for (int j = 0; j < ONE_SIDE; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE; j++) {
    4aea:	45b1      	cmp	r9, r6
    4aec:	d1eb      	bne.n	4ac6 <fire(LEDStruct&)+0x25a>
    4aee:	e7b3      	b.n	4a58 <fire(LEDStruct&)+0x1ec>
    4af0:	f104 06e1 	add.w	r6, r4, #225	; 0xe1
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4af4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4af8:	4640      	mov	r0, r8
    4afa:	f005 fcaf 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4afe:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4b02:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4b06:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b0a:	f884 10e1 	strb.w	r1, [r4, #225]	; 0xe1
        g = rhs.g;
    4b0e:	f884 20e2 	strb.w	r2, [r4, #226]	; 0xe2
        b = rhs.b;
    4b12:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3
    4b16:	3403      	adds	r4, #3
			for (int j = 0; j < ONE_SIDE; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE; j++) {
    4b18:	42a6      	cmp	r6, r4
    4b1a:	d1eb      	bne.n	4af4 <fire(LEDStruct&)+0x288>
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4b1c:	b005      	add	sp, #20
    4b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b22:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b2a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b2e:	3319      	adds	r3, #25
    4b30:	b29b      	uxth	r3, r3
    4b32:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4b36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b3a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4b3e:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b40:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b44:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4b46:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b48:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4b4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4b50:	b2d2      	uxtb	r2, r2
		for (int k = ONE_SIDE - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4b52:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4b56:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4b5a:	ebc2 1246 	rsb	r2, r2, r6, lsl #5
    4b5e:	f893 62cb 	ldrb.w	r6, [r3, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b62:	8008      	strh	r0, [r1, #0]
    4b64:	1212      	asrs	r2, r2, #8
    4b66:	3a60      	subs	r2, #96	; 0x60
    4b68:	4631      	mov	r1, r6
    4b6a:	fa81 f152 	uqadd8	r1, r1, r2
    4b6e:	f883 12cb 	strb.w	r1, [r3, #715]	; 0x2cb
    4b72:	e757      	b.n	4a24 <fire(LEDStruct&)+0x1b8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4b74:	4620      	mov	r0, r4
    4b76:	f7ff fe45 	bl	4804 <fire_update(LEDStruct&)>
    4b7a:	e686      	b.n	488a <fire(LEDStruct&)+0x1e>
    4b7c:	1fff8784 	.word	0x1fff8784
    4b80:	1fff91d1 	.word	0x1fff91d1
    4b84:	1b4e81b5 	.word	0x1b4e81b5
    4b88:	55555556 	.word	0x55555556
    4b8c:	8833      	ldrh	r3, [r6, #0]
    4b8e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4b92:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4b96:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4b9a:	3119      	adds	r1, #25
    4b9c:	b289      	uxth	r1, r1
    4b9e:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4ba2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4ba6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4baa:	3219      	adds	r2, #25
    4bac:	b292      	uxth	r2, r2
    4bae:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    4bb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4bb6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4bba:	3319      	adds	r3, #25
    4bbc:	b29b      	uxth	r3, r3
    4bbe:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4bc2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4bc6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4bca:	3519      	adds	r5, #25
    4bcc:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bce:	eb05 2715 	add.w	r7, r5, r5, lsr #8
    4bd2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4bd6:	b2d2      	uxtb	r2, r2
    4bd8:	b2ff      	uxtb	r7, r7
    4bda:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4bde:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
    4be2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    4be6:	b2db      	uxtb	r3, r3
    4be8:	eb02 024e 	add.w	r2, r2, lr, lsl #1
    4bec:	11bf      	asrs	r7, r7, #6
    4bee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4bf2:	373c      	adds	r7, #60	; 0x3c
    4bf4:	119b      	asrs	r3, r3, #6
    4bf6:	1212      	asrs	r2, r2, #8
    4bf8:	b2ff      	uxtb	r7, r7
    4bfa:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4bfe:	3332      	adds	r3, #50	; 0x32
    4c00:	3214      	adds	r2, #20
    4c02:	9700      	str	r7, [sp, #0]
    4c04:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c0c:	8035      	strh	r5, [r6, #0]
    4c0e:	f7ff fdb5 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
    4c12:	e635      	b.n	4880 <fire(LEDStruct&)+0x14>

00004c14 <fire_mirror(LEDStruct&)>:
}




void fire_mirror(LEDStruct& leds) {
    4c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4c18:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4c1c:	4ed6      	ldr	r6, [pc, #856]	; (4f78 <fire_mirror(LEDStruct&)+0x364>)
}




void fire_mirror(LEDStruct& leds) {
    4c1e:	b084      	sub	sp, #16
    4c20:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4c22:	2b00      	cmp	r3, #0
    4c24:	f000 81df 	beq.w	4fe6 <fire_mirror(LEDStruct&)+0x3d2>
	if (keyboard_update) { fire_update(leds); }
    4c28:	4bd4      	ldr	r3, [pc, #848]	; (4f7c <fire_mirror(LEDStruct&)+0x368>)
    4c2a:	781b      	ldrb	r3, [r3, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	f040 81d6 	bne.w	4fde <fire_mirror(LEDStruct&)+0x3ca>
    4c32:	f894 227e 	ldrb.w	r2, [r4, #638]	; 0x27e
    4c36:	4fd2      	ldr	r7, [pc, #840]	; (4f80 <fire_mirror(LEDStruct&)+0x36c>)
    4c38:	8833      	ldrh	r3, [r6, #0]
    4c3a:	fb87 1702 	smull	r1, r7, r7, r2
    4c3e:	4417      	add	r7, r2
    4c40:	10ff      	asrs	r7, r7, #3
    4c42:	3702      	adds	r7, #2
    4c44:	f204 257f 	addw	r5, r4, #639	; 0x27f
    4c48:	b2ff      	uxtb	r7, r7
}




void fire_mirror(LEDStruct& leds) {
    4c4a:	4628      	mov	r0, r5
    4c4c:	f504 7e29 	add.w	lr, r4, #676	; 0x2a4
    4c50:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c58:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c5c:	3319      	adds	r3, #25
    4c5e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c60:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4c64:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    4c68:	b2d2      	uxtb	r2, r2
    4c6a:	fb12 f207 	smulbb	r2, r2, r7
    4c6e:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < ONE_SIDE / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
    4c72:	ea22 72e2 	bic.w	r2, r2, r2, asr #31

void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < ONE_SIDE / 2; i++) {
    4c76:	4586      	cmp	lr, r0
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
    4c78:	7002      	strb	r2, [r0, #0]

void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < ONE_SIDE / 2; i++) {
    4c7a:	d1e9      	bne.n	4c50 <fire_mirror(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
	}

	for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4c7c:	f8df c308 	ldr.w	ip, [pc, #776]	; 4f88 <fire_mirror(LEDStruct&)+0x374>
    4c80:	8033      	strh	r3, [r6, #0]
    4c82:	f204 21a1 	addw	r1, r4, #673	; 0x2a1
    4c86:	f204 27a3 	addw	r7, r4, #675	; 0x2a3
    4c8a:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    4c8e:	780a      	ldrb	r2, [r1, #0]
    4c90:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    4c94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    4c98:	fb8c 8002 	smull	r8, r0, ip, r2
    4c9c:	eba0 72e2 	sub.w	r2, r0, r2, asr #31

	for (int i = 0; i < ONE_SIDE / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
	}

	for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4ca0:	458e      	cmp	lr, r1
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4ca2:	f807 2d01 	strb.w	r2, [r7, #-1]!

	for (int i = 0; i < ONE_SIDE / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / ONE_SIDE / 2) + 2));
	}

	for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4ca6:	d1f2      	bne.n	4c8e <fire_mirror(LEDStruct&)+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ca8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4cac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4cb0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4cb4:	3319      	adds	r3, #25
    4cb6:	b29b      	uxth	r3, r3
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (random8() < leds.fire_sparking) {
    4cb8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4cbc:	f894 027c 	ldrb.w	r0, [r4, #636]	; 0x27c
    4cc0:	8033      	strh	r3, [r6, #0]
    4cc2:	b2d2      	uxtb	r2, r2
    4cc4:	4290      	cmp	r0, r2
    4cc6:	49ac      	ldr	r1, [pc, #688]	; (4f78 <fire_mirror(LEDStruct&)+0x364>)
    4cc8:	d927      	bls.n	4d1a <fire_mirror(LEDStruct&)+0x106>
    4cca:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4cce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4cd2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4cd6:	3319      	adds	r3, #25
    4cd8:	b29b      	uxth	r3, r3
    4cda:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4cde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4ce2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4ce6:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ce8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cec:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4cee:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4cf0:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4cf4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4cf8:	b2d2      	uxtb	r2, r2
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4cfa:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4cfe:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    4d02:	ebc2 1247 	rsb	r2, r2, r7, lsl #5
    4d06:	f893 7280 	ldrb.w	r7, [r3, #640]	; 0x280
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d0a:	8008      	strh	r0, [r1, #0]
    4d0c:	1212      	asrs	r2, r2, #8
    4d0e:	3a60      	subs	r2, #96	; 0x60
    4d10:	4639      	mov	r1, r7
    4d12:	fa81 f152 	uqadd8	r1, r1, r2
    4d16:	f883 1280 	strb.w	r1, [r3, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4d1a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d150      	bne.n	4dc4 <fire_mirror(LEDStruct&)+0x1b0>
    4d22:	f894 227f 	ldrb.w	r2, [r4, #639]	; 0x27f
    4d26:	4f97      	ldr	r7, [pc, #604]	; (4f84 <fire_mirror(LEDStruct&)+0x370>)
    4d28:	8833      	ldrh	r3, [r6, #0]
    4d2a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4d2e:	0052      	lsls	r2, r2, #1
    4d30:	fb87 1702 	smull	r1, r7, r7, r2
    4d34:	4417      	add	r7, r2
    4d36:	17d2      	asrs	r2, r2, #31
    4d38:	ebc2 1767 	rsb	r7, r2, r7, asr #5
    4d3c:	3702      	adds	r7, #2
    4d3e:	b2ff      	uxtb	r7, r7
    4d40:	f204 20ca 	addw	r0, r4, #714	; 0x2ca
    4d44:	f204 2eef 	addw	lr, r4, #751	; 0x2ef
    4d48:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4d50:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d54:	3319      	adds	r3, #25
    4d56:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d58:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4d5c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    4d60:	b2d2      	uxtb	r2, r2
    4d62:	fb12 f207 	smulbb	r2, r2, r7
    4d66:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		for (int i = 0; i < ONE_SIDE / 2; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
    4d6a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
    4d6e:	4586      	cmp	lr, r0
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
    4d70:	7002      	strb	r2, [r0, #0]
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
    4d72:	d1e9      	bne.n	4d48 <fire_mirror(LEDStruct&)+0x134>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
		}
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4d74:	f8df c210 	ldr.w	ip, [pc, #528]	; 4f88 <fire_mirror(LEDStruct&)+0x374>
    4d78:	8033      	strh	r3, [r6, #0]
    4d7a:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
    4d7e:	f204 27ee 	addw	r7, r4, #750	; 0x2ee
    4d82:	f204 2ecb 	addw	lr, r4, #715	; 0x2cb
    4d86:	780a      	ldrb	r2, [r1, #0]
    4d88:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    4d8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    4d90:	fb8c 8002 	smull	r8, r0, ip, r2
    4d94:	eba0 72e2 	sub.w	r2, r0, r2, asr #31

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
		}
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4d98:	458e      	cmp	lr, r1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4d9a:	f807 2d01 	strb.w	r2, [r7, #-1]!

	if (!leds.fire_sync) {
		for (int i = 0; i < ONE_SIDE / 2; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / (ONE_SIDE / 2)) + 2));
		}
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
    4d9e:	d1f2      	bne.n	4d86 <fire_mirror(LEDStruct&)+0x172>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4da0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4da4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4da8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4dac:	3319      	adds	r3, #25
    4dae:	b29b      	uxth	r3, r3
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4db0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4db4:	f894 027d 	ldrb.w	r0, [r4, #637]	; 0x27d
    4db8:	8033      	strh	r3, [r6, #0]
    4dba:	b2d2      	uxtb	r2, r2
    4dbc:	4290      	cmp	r0, r2
    4dbe:	496e      	ldr	r1, [pc, #440]	; (4f78 <fire_mirror(LEDStruct&)+0x364>)
    4dc0:	f200 80e4 	bhi.w	4f8c <fire_mirror(LEDStruct&)+0x378>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	if (leds.this_dir) {
    4dc4:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d03f      	beq.n	4e4c <fire_mirror(LEDStruct&)+0x238>
    4dcc:	46a0      	mov	r8, r4
    4dce:	f104 096f 	add.w	r9, r4, #111	; 0x6f
    4dd2:	4627      	mov	r7, r4
    4dd4:	ae03      	add	r6, sp, #12
		for (int j = 0; j < ONE_SIDE / 2; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4dd6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4dda:	4630      	mov	r0, r6
    4ddc:	f005 fb3e 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4de0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4de4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4de8:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4dec:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    4dee:	70bb      	strb	r3, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4df0:	7039      	strb	r1, [r7, #0]
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4df2:	7829      	ldrb	r1, [r5, #0]
    4df4:	4630      	mov	r0, r6
    4df6:	3703      	adds	r7, #3
    4df8:	f005 fb30 	bl	a45c <HeatColor(unsigned char)>
    4dfc:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4e00:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4e04:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e08:	f888 10de 	strb.w	r1, [r8, #222]	; 0xde
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	if (leds.this_dir) {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
    4e0c:	45b9      	cmp	r9, r7
        g = rhs.g;
    4e0e:	f888 20df 	strb.w	r2, [r8, #223]	; 0xdf
        b = rhs.b;
    4e12:	f888 30e0 	strb.w	r3, [r8, #224]	; 0xe0
    4e16:	f1a8 0803 	sub.w	r8, r8, #3
    4e1a:	d1dc      	bne.n	4dd6 <fire_mirror(LEDStruct&)+0x1c2>
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
		}
	}


	if (leds.fire_sync) { strip_sync(leds); }
    4e1c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4e20:	2b00      	cmp	r3, #0
    4e22:	d047      	beq.n	4eb4 <fire_mirror(LEDStruct&)+0x2a0>
    4e24:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4e28:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e2a:	7822      	ldrb	r2, [r4, #0]
    4e2c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4e30:	7862      	ldrb	r2, [r4, #1]
    4e32:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4e36:	78a2      	ldrb	r2, [r4, #2]
    4e38:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4e3c:	3403      	adds	r4, #3
    4e3e:	42a1      	cmp	r1, r4
    4e40:	f1a3 0303 	sub.w	r3, r3, #3
    4e44:	d1f1      	bne.n	4e2a <fire_mirror(LEDStruct&)+0x216>
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4e46:	b004      	add	sp, #16
    4e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	if (leds.this_dir) {
    4e4c:	4699      	mov	r9, r3
    4e4e:	46a0      	mov	r8, r4
    4e50:	4627      	mov	r7, r4
    4e52:	46aa      	mov	sl, r5
    4e54:	ae03      	add	r6, sp, #12
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
			leds.led_data[ONE_SIDE / 2 - 1 - j] = HeatColor(leds.heat[j]);
    4e56:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    4e5a:	4630      	mov	r0, r6
    4e5c:	f005 fafe 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e60:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4e64:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4e68:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4e6c:	f888 206d 	strb.w	r2, [r8, #109]	; 0x6d
        b = rhs.b;
    4e70:	f888 306e 	strb.w	r3, [r8, #110]	; 0x6e
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e74:	f888 106c 	strb.w	r1, [r8, #108]	; 0x6c
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
    4e78:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    4e7c:	4630      	mov	r0, r6
			leds.led_data[j] = HeatColor(leds.heat[j]);
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
    4e7e:	f109 0901 	add.w	r9, r9, #1
			leds.led_data[ONE_SIDE / 2 - 1 - j] = HeatColor(leds.heat[j]);
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
    4e82:	f005 faeb 	bl	a45c <HeatColor(unsigned char)>
    4e86:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4e8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4e8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e92:	f887 106f 	strb.w	r1, [r7, #111]	; 0x6f
			leds.led_data[j] = HeatColor(leds.heat[j]);
			leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < ONE_SIDE / 2; j++) {
    4e96:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
        g = rhs.g;
    4e9a:	f887 2070 	strb.w	r2, [r7, #112]	; 0x70
        b = rhs.b;
    4e9e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    4ea2:	f1a8 0803 	sub.w	r8, r8, #3
    4ea6:	f107 0703 	add.w	r7, r7, #3
    4eaa:	d1d4      	bne.n	4e56 <fire_mirror(LEDStruct&)+0x242>
			leds.led_data[ONE_SIDE / 2 + j] = HeatColor(leds.heat[j]);
		}
	}


	if (leds.fire_sync) { strip_sync(leds); }
    4eac:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d1b7      	bne.n	4e24 <fire_mirror(LEDStruct&)+0x210>
	else {
		if (leds.this_dir) {
    4eb4:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    4eb8:	f204 28ca 	addw	r8, r4, #714	; 0x2ca
    4ebc:	b36f      	cbz	r7, 4f1a <fire_mirror(LEDStruct&)+0x306>
    4ebe:	4625      	mov	r5, r4
    4ec0:	46c1      	mov	r9, r8
    4ec2:	2725      	movs	r7, #37	; 0x25
			for (int j = 0; j < ONE_SIDE / 2; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    4ec4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    4ec8:	4630      	mov	r0, r6
    4eca:	f005 fac7 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ece:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4ed2:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4ed6:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4eda:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4ede:	f884 31c1 	strb.w	r3, [r4, #449]	; 0x1c1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ee2:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4ee6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4eea:	4630      	mov	r0, r6
    4eec:	f005 fab6 	bl	a45c <HeatColor(unsigned char)>
    4ef0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4ef4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4ef8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4efc:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1


	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
    4f00:	3f01      	subs	r7, #1
        g = rhs.g;
    4f02:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    4f06:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
    4f0a:	f1a4 0403 	sub.w	r4, r4, #3
    4f0e:	f105 0503 	add.w	r5, r5, #3
    4f12:	d1d7      	bne.n	4ec4 <fire_mirror(LEDStruct&)+0x2b0>
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4f14:	b004      	add	sp, #16
    4f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}


	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    4f1a:	46c1      	mov	r9, r8
    4f1c:	4625      	mov	r5, r4
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
    4f1e:	f818 1f01 	ldrb.w	r1, [r8, #1]!
    4f22:	4630      	mov	r0, r6
    4f24:	f005 fa9a 	bl	a45c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f28:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4f2c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4f30:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f34:	f885 2151 	strb.w	r2, [r5, #337]	; 0x151
        b = rhs.b;
    4f38:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f3c:	f885 1150 	strb.w	r1, [r5, #336]	; 0x150
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
    4f40:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4f44:	4630      	mov	r0, r6
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
    4f46:	3701      	adds	r7, #1
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
    4f48:	f005 fa88 	bl	a45c <HeatColor(unsigned char)>
    4f4c:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    4f50:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4f54:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f58:	f884 1150 	strb.w	r1, [r4, #336]	; 0x150
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < ONE_SIDE / 2; j++) {
    4f5c:	2f25      	cmp	r7, #37	; 0x25
        g = rhs.g;
    4f5e:	f884 2151 	strb.w	r2, [r4, #337]	; 0x151
        b = rhs.b;
    4f62:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    4f66:	f105 0503 	add.w	r5, r5, #3
    4f6a:	f1a4 0403 	sub.w	r4, r4, #3
    4f6e:	d1d6      	bne.n	4f1e <fire_mirror(LEDStruct&)+0x30a>
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 + j] = HeatColor(leds.heat2[j]);
				leds.led_data[ONE_SIDE + ONE_SIDE / 2 - j] = HeatColor(leds.heat2[j]);
			}
		}
	}
}
    4f70:	b004      	add	sp, #16
    4f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f76:	bf00      	nop
    4f78:	1fff8784 	.word	0x1fff8784
    4f7c:	1fff91d1 	.word	0x1fff91d1
    4f80:	88888889 	.word	0x88888889
    4f84:	dd67c8a7 	.word	0xdd67c8a7
    4f88:	55555556 	.word	0x55555556
    4f8c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4f90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4f94:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4f98:	3319      	adds	r3, #25
    4f9a:	b29b      	uxth	r3, r3
    4f9c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4fa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4fa4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4fa8:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4faa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fae:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fb0:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fb2:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4fba:	b2d2      	uxtb	r2, r2
		for (int k = ONE_SIDE / 2 - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4fbc:	eb04 2323 	add.w	r3, r4, r3, asr #8
    4fc0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4fc4:	ebc2 1246 	rsb	r2, r2, r6, lsl #5
    4fc8:	f893 62cb 	ldrb.w	r6, [r3, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fcc:	8008      	strh	r0, [r1, #0]
    4fce:	1212      	asrs	r2, r2, #8
    4fd0:	3a60      	subs	r2, #96	; 0x60
    4fd2:	4631      	mov	r1, r6
    4fd4:	fa81 f152 	uqadd8	r1, r1, r2
    4fd8:	f883 12cb 	strb.w	r1, [r3, #715]	; 0x2cb
    4fdc:	e6f2      	b.n	4dc4 <fire_mirror(LEDStruct&)+0x1b0>



void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4fde:	4620      	mov	r0, r4
    4fe0:	f7ff fc10 	bl	4804 <fire_update(LEDStruct&)>
    4fe4:	e625      	b.n	4c32 <fire_mirror(LEDStruct&)+0x1e>
    4fe6:	8833      	ldrh	r3, [r6, #0]
    4fe8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4fec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4ff0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4ff4:	3119      	adds	r1, #25
    4ff6:	b289      	uxth	r1, r1
    4ff8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4ffc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5000:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5004:	3219      	adds	r2, #25
    5006:	b292      	uxth	r2, r2
    5008:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    500c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5010:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5014:	3319      	adds	r3, #25
    5016:	b29b      	uxth	r3, r3
    5018:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    501c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5020:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5024:	3519      	adds	r5, #25
    5026:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5028:	eb05 2715 	add.w	r7, r5, r5, lsr #8
    502c:	eb02 2212 	add.w	r2, r2, r2, lsr #8




void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    5030:	b2d2      	uxtb	r2, r2
    5032:	b2ff      	uxtb	r7, r7
    5034:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5038:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
    503c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    5040:	b2db      	uxtb	r3, r3
    5042:	eb02 024e 	add.w	r2, r2, lr, lsl #1
    5046:	11bf      	asrs	r7, r7, #6
    5048:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    504c:	373c      	adds	r7, #60	; 0x3c
    504e:	119b      	asrs	r3, r3, #6
    5050:	1212      	asrs	r2, r2, #8
    5052:	b2ff      	uxtb	r7, r7
    5054:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5058:	3332      	adds	r3, #50	; 0x32
    505a:	3214      	adds	r2, #20
    505c:	9700      	str	r7, [sp, #0]
    505e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    5062:	b2db      	uxtb	r3, r3
    5064:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5066:	8035      	strh	r5, [r6, #0]
    5068:	f7ff fb88 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
    506c:	e5dc      	b.n	4c28 <fire_mirror(LEDStruct&)+0x14>
    506e:	bf00      	nop

00005070 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5070:	4b0e      	ldr	r3, [pc, #56]	; (50ac <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5072:	4a0f      	ldr	r2, [pc, #60]	; (50b0 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    5074:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5076:	2100      	movs	r1, #0
    5078:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    507a:	b13b      	cbz	r3, 508c <confetti_update(LEDStruct&)+0x1c>
    507c:	2b01      	cmp	r3, #1
    507e:	d103      	bne.n	5088 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    5080:	4b0c      	ldr	r3, [pc, #48]	; (50b4 <confetti_update(LEDStruct&)+0x44>)
    5082:	881b      	ldrh	r3, [r3, #0]
    5084:	f880 333a 	strb.w	r3, [r0, #826]	; 0x33a
		default: break;
	}
	LEDDebug(leds);
    5088:	f7fd b894 	b.w	21b4 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    508c:	4b09      	ldr	r3, [pc, #36]	; (50b4 <confetti_update(LEDStruct&)+0x44>)
    508e:	881b      	ldrh	r3, [r3, #0]
    5090:	2b00      	cmp	r3, #0
    5092:	bf14      	ite	ne
    5094:	2301      	movne	r3, #1
    5096:	2300      	moveq	r3, #0
    5098:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    509c:	bf14      	ite	ne
    509e:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    50a0:	234b      	moveq	r3, #75	; 0x4b
    50a2:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    50a6:	f7fd b885 	b.w	21b4 <LEDDebug(LEDStruct&)>
    50aa:	bf00      	nop
    50ac:	1fff9a18 	.word	0x1fff9a18
    50b0:	1fff91d1 	.word	0x1fff91d1
    50b4:	1fff90d2 	.word	0x1fff90d2

000050b8 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    50b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    50ba:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    50be:	4e4b      	ldr	r6, [pc, #300]	; (51ec <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    50c0:	b085      	sub	sp, #20
    50c2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    50c4:	bb8b      	cbnz	r3, 512a <confetti(LEDStruct&)+0x72>
    50c6:	8833      	ldrh	r3, [r6, #0]
    50c8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    50cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    50d0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    50d4:	3319      	adds	r3, #25
    50d6:	b29b      	uxth	r3, r3
    50d8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    50dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    50e0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    50e4:	3119      	adds	r1, #25
    50e6:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50e8:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    50ec:	b2d2      	uxtb	r2, r2
    50ee:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    50f2:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50f4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    50f8:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    50fa:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    50fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    5100:	2713      	movs	r7, #19
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5102:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5104:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5106:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    5108:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    510c:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    5110:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    5114:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5118:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    511c:	2b00      	cmp	r3, #0
    511e:	d15c      	bne.n	51da <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    5120:	234b      	movs	r3, #75	; 0x4b
    5122:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
	leds.confetti_fade		= cf;
    5126:	f884 233a 	strb.w	r2, [r4, #826]	; 0x33a
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    512a:	4b31      	ldr	r3, [pc, #196]	; (51f0 <confetti(LEDStruct&)+0x138>)
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2b00      	cmp	r3, #0
    5130:	d157      	bne.n	51e2 <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    5132:	f894 233a 	ldrb.w	r2, [r4, #826]	; 0x33a
    5136:	4620      	mov	r0, r4
    5138:	2196      	movs	r1, #150	; 0x96
    513a:	f005 f951 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    513e:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5140:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5144:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    514c:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    5150:	3319      	adds	r3, #25
    5152:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5154:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5158:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    515c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5160:	3719      	adds	r7, #25
    5162:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5164:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5168:	fb03 f305 	mul.w	r3, r3, r5
    516c:	2101      	movs	r1, #1
    516e:	0c1d      	lsrs	r5, r3, #16
    5170:	9100      	str	r1, [sp, #0]
    5172:	a803      	add	r0, sp, #12
    5174:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    5178:	b2d2      	uxtb	r2, r2
    517a:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    517c:	8037      	strh	r7, [r6, #0]
    517e:	f005 f98f 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5182:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5186:	18e1      	adds	r1, r4, r3
    5188:	5ce2      	ldrb	r2, [r4, r3]
    518a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    518e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5192:	54e2      	strb	r2, [r4, r3]
    5194:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5198:	784a      	ldrb	r2, [r1, #1]
    519a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    519e:	704a      	strb	r2, [r1, #1]
    51a0:	788b      	ldrb	r3, [r1, #2]
    51a2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    51a6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    51aa:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    51ac:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    51b0:	b98b      	cbnz	r3, 51d6 <confetti(LEDStruct&)+0x11e>
    51b2:	4620      	mov	r0, r4
    51b4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    51b8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    51ba:	781a      	ldrb	r2, [r3, #0]
    51bc:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    51c0:	785a      	ldrb	r2, [r3, #1]
    51c2:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    51c6:	789a      	ldrb	r2, [r3, #2]
    51c8:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    51cc:	3303      	adds	r3, #3
    51ce:	428b      	cmp	r3, r1
    51d0:	f1a0 0003 	sub.w	r0, r0, #3
    51d4:	d1f1      	bne.n	51ba <confetti(LEDStruct&)+0x102>
}
    51d6:	b005      	add	sp, #20
    51d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    51da:	2396      	movs	r3, #150	; 0x96
    51dc:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
    51e0:	e7a1      	b.n	5126 <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    51e2:	4620      	mov	r0, r4
    51e4:	f7ff ff44 	bl	5070 <confetti_update(LEDStruct&)>
    51e8:	e7a3      	b.n	5132 <confetti(LEDStruct&)+0x7a>
    51ea:	bf00      	nop
    51ec:	1fff8784 	.word	0x1fff8784
    51f0:	1fff91d1 	.word	0x1fff91d1

000051f4 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    51f4:	4b24      	ldr	r3, [pc, #144]	; (5288 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    51f6:	4a25      	ldr	r2, [pc, #148]	; (528c <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    51f8:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    51fa:	2100      	movs	r1, #0
    51fc:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    51fe:	2b09      	cmp	r3, #9
    5200:	d80a      	bhi.n	5218 <one_sin_update(LEDStruct&)+0x24>
    5202:	e8df f003 	tbb	[pc, r3]
    5206:	1e10      	.short	0x1e10
    5208:	322d2823 	.word	0x322d2823
    520c:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    5210:	4b1f      	ldr	r3, [pc, #124]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5212:	881b      	ldrh	r3, [r3, #0]
    5214:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5218:	f7fc bfcc 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    521c:	4b1c      	ldr	r3, [pc, #112]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    521e:	881b      	ldrh	r3, [r3, #0]
    5220:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5224:	e7f8      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5226:	4b1a      	ldr	r3, [pc, #104]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5228:	881b      	ldrh	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5236:	bf14      	ite	ne
    5238:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    523a:	234b      	moveq	r3, #75	; 0x4b
    523c:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
    5240:	e7ea      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    5242:	4b13      	ldr	r3, [pc, #76]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5244:	881b      	ldrh	r3, [r3, #0]
    5246:	f880 333b 	strb.w	r3, [r0, #827]	; 0x33b
    524a:	e7e5      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    524c:	4b10      	ldr	r3, [pc, #64]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    524e:	881b      	ldrh	r3, [r3, #0]
    5250:	f880 333c 	strb.w	r3, [r0, #828]	; 0x33c
    5254:	e7e0      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    5256:	4b0e      	ldr	r3, [pc, #56]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5258:	881b      	ldrh	r3, [r3, #0]
    525a:	f880 333d 	strb.w	r3, [r0, #829]	; 0x33d
    525e:	e7db      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    5260:	4b0b      	ldr	r3, [pc, #44]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5262:	881b      	ldrh	r3, [r3, #0]
    5264:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
    5268:	e7d6      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    526a:	4b09      	ldr	r3, [pc, #36]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    526c:	881b      	ldrh	r3, [r3, #0]
    526e:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5272:	e7d1      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    5274:	4b06      	ldr	r3, [pc, #24]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5276:	881b      	ldrh	r3, [r3, #0]
    5278:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    527c:	e7cc      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    527e:	4b04      	ldr	r3, [pc, #16]	; (5290 <one_sin_update(LEDStruct&)+0x9c>)
    5280:	881b      	ldrh	r3, [r3, #0]
    5282:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    5286:	e7c7      	b.n	5218 <one_sin_update(LEDStruct&)+0x24>
    5288:	1fff9a18 	.word	0x1fff9a18
    528c:	1fff91d1 	.word	0x1fff91d1
    5290:	1fff90d2 	.word	0x1fff90d2

00005294 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    5294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    5298:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    529c:	b085      	sub	sp, #20
    529e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    52a0:	2b00      	cmp	r3, #0
    52a2:	f040 80be 	bne.w	5422 <one_sin(LEDStruct&)+0x18e>
    52a6:	f8df c32c 	ldr.w	ip, [pc, #812]	; 55d4 <one_sin(LEDStruct&)+0x340>
    52aa:	f8bc 3000 	ldrh.w	r3, [ip]
    52ae:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    52b2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    52b6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    52ba:	3619      	adds	r6, #25
    52bc:	b2b6      	uxth	r6, r6
    52be:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    52c2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    52c6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    52ca:	3119      	adds	r1, #25
    52cc:	b289      	uxth	r1, r1
    52ce:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    52d2:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    52d6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    52da:	3519      	adds	r5, #25
    52dc:	b2ad      	uxth	r5, r5
    52de:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    52e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    52e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52ea:	3319      	adds	r3, #25
    52ec:	b29b      	uxth	r3, r3
    52ee:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    52f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    52f6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    52fa:	3719      	adds	r7, #25
    52fc:	b2bf      	uxth	r7, r7
    52fe:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    5302:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5306:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    530a:	3019      	adds	r0, #25
    530c:	b280      	uxth	r0, r0
    530e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5312:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5316:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    531a:	3219      	adds	r2, #25
    531c:	b292      	uxth	r2, r2
    531e:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    5322:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5326:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    532a:	f10e 0e19 	add.w	lr, lr, #25
    532e:	fa1f fe8e 	uxth.w	lr, lr
    5332:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    5336:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    533a:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    533e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5342:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5346:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    534a:	f108 0819 	add.w	r8, r8, #25
    534e:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5352:	b2db      	uxtb	r3, r3
    5354:	b2c9      	uxtb	r1, r1
    5356:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5358:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    535c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5360:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5364:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5368:	ea4f 1aa2 	mov.w	sl, r2, asr #6
    536c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5370:	fa5f f289 	uxtb.w	r2, r9
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5374:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5378:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    537a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    537e:	119b      	asrs	r3, r3, #6
    5380:	3101      	adds	r1, #1
    5382:	f3c5 1542 	ubfx	r5, r5, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5386:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    538a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    538e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5392:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5394:	f103 0964 	add.w	r9, r3, #100	; 0x64
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5398:	f8ac 8000 	strh.w	r8, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    539c:	f10a 0314 	add.w	r3, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53a0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53a4:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53ac:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53b0:	fa5f fa81 	uxtb.w	sl, r1
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    53b4:	f04f 0814 	mov.w	r8, #20
    53b8:	1d69      	adds	r1, r5, #5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53ba:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    53be:	2501      	movs	r5, #1
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    53c0:	220f      	movs	r2, #15

	leds.use_full_range = ufr;
    53c2:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53c6:	fa5f f989 	uxtb.w	r9, r9
    53ca:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    53d0:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53d2:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    53d6:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    53da:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    53de:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    53e2:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    53e6:	2e00      	cmp	r6, #0
    53e8:	f040 80e8 	bne.w	55bc <one_sin(LEDStruct&)+0x328>
	else { leds.strip_range = ONE_SIDE; }
    53ec:	224b      	movs	r2, #75	; 0x4b
    53ee:	f8a4 2338 	strh.w	r2, [r4, #824]	; 0x338

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    53f2:	4d76      	ldr	r5, [pc, #472]	; (55cc <one_sin(LEDStruct&)+0x338>)

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    53f4:	f884 a33b 	strb.w	sl, [r4, #827]	; 0x33b
	leds.sin_speed		= ss + (saf/5);
    53f8:	fba5 2503 	umull	r2, r5, r5, r3
    53fc:	eb01 0295 	add.w	r2, r1, r5, lsr #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5400:	2100      	movs	r1, #0
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5402:	f884 933d 	strb.w	r9, [r4, #829]	; 0x33d
	leds.sin_rot		= sr;
    5406:	f884 733e 	strb.w	r7, [r4, #830]	; 0x33e
	leds.sin_phase		= sp;
    540a:	f884 0342 	strb.w	r0, [r4, #834]	; 0x342
	leds.sin_all_freq	= saf;
    540e:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
	leds.bg_clr			= bc;
    5412:	f884 e34b 	strb.w	lr, [r4, #843]	; 0x34b
	leds.bg_bri			= bb;
    5416:	f884 c34c 	strb.w	ip, [r4, #844]	; 0x34c
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    541a:	f884 233c 	strb.w	r2, [r4, #828]	; 0x33c
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    541e:	f884 1341 	strb.w	r1, [r4, #833]	; 0x341
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    5422:	4b6b      	ldr	r3, [pc, #428]	; (55d0 <one_sin(LEDStruct&)+0x33c>)
    5424:	781b      	ldrb	r3, [r3, #0]
    5426:	2b00      	cmp	r3, #0
    5428:	f040 80cc 	bne.w	55c4 <one_sin(LEDStruct&)+0x330>

	leds.sin_start += leds.sin_inc;
    542c:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    5430:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    5434:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    5438:	440b      	add	r3, r1
    543a:	b2db      	uxtb	r3, r3
    543c:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
	leds.sin_index = leds.sin_start;
    5440:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
	if (leds.this_dir) {
    5444:	2a00      	cmp	r2, #0
    5446:	f000 80b1 	beq.w	55ac <one_sin(LEDStruct&)+0x318>
		leds.sin_phase += leds.sin_speed;
    544a:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
    544e:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    5452:	4413      	add	r3, r2
    5454:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5458:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    545c:	2b00      	cmp	r3, #0
    545e:	f000 808e 	beq.w	557e <one_sin(LEDStruct&)+0x2ea>
    5462:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    5466:	4625      	mov	r5, r4
    5468:	1c67      	adds	r7, r4, #1
    546a:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    546c:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5470:	e05c      	b.n	552c <one_sin(LEDStruct&)+0x298>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5472:	2900      	cmp	r1, #0
        in = 255 - in;
    5474:	bfbc      	itt	lt
    5476:	43d2      	mvnlt	r2, r2
    5478:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    547a:	0052      	lsls	r2, r2, #1
    547c:	b2d2      	uxtb	r2, r2
    547e:	1c53      	adds	r3, r2, #1
    5480:	fb03 f202 	mul.w	r2, r3, r2
    5484:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5486:	fb02 f303 	mul.w	r3, r2, r3
    548a:	121b      	asrs	r3, r3, #8
    548c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5490:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5494:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5496:	05d3      	lsls	r3, r2, #23
    5498:	bf54      	ite	pl
    549a:	fa5f fb82 	uxtbpl.w	fp, r2
    549e:	f04f 0bff 	movmi.w	fp, #255	; 0xff
    54a2:	ebc0 0b0b 	rsb	fp, r0, fp
    54a6:	fa5f fb8b 	uxtb.w	fp, fp
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    54aa:	f894 234c 	ldrb.w	r2, [r4, #844]	; 0x34c
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    54ae:	f894 334b 	ldrb.w	r3, [r4, #843]	; 0x34b
    54b2:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    54b6:	4629      	mov	r1, r5
    54b8:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    54ba:	f88d 300c 	strb.w	r3, [sp, #12]
    54be:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    54c2:	f005 f9eb 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    54c6:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    54ca:	f894 233b 	ldrb.w	r2, [r4, #827]	; 0x33b
    54ce:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    54d2:	9100      	str	r1, [sp, #0]
    54d4:	fb02 320a 	mla	r2, r2, sl, r3
    54d8:	b2d2      	uxtb	r2, r2
    54da:	465b      	mov	r3, fp
    54dc:	4649      	mov	r1, r9
    54de:	a803      	add	r0, sp, #12
    54e0:	f004 ffde 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    54e4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    54e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
    54ec:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    54f0:	f807 3c01 	strb.w	r3, [r7, #-1]
    54f4:	786a      	ldrb	r2, [r5, #1]
    54f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    54fa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    54fe:	706a      	strb	r2, [r5, #1]
    5500:	78ab      	ldrb	r3, [r5, #2]
    5502:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5506:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    550a:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    550c:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    5510:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5514:	f8b4 2338 	ldrh.w	r2, [r4, #824]	; 0x338
    5518:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    551a:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    551c:	42b2      	cmp	r2, r6
    551e:	f105 0503 	add.w	r5, r5, #3
    5522:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5526:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    552a:	dd28      	ble.n	557e <one_sin(LEDStruct&)+0x2ea>
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    552c:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
    5530:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
    5534:	fa5f fa86 	uxtb.w	sl, r6
    5538:	fb03 220a 	mla	r2, r3, sl, r2
    553c:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    553e:	b251      	sxtb	r1, r2
    5540:	2900      	cmp	r1, #0
        in = 255 - in;
    5542:	bfba      	itte	lt
    5544:	43d3      	mvnlt	r3, r2
    5546:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5548:	4613      	movge	r3, r2
    554a:	005b      	lsls	r3, r3, #1
    554c:	b2db      	uxtb	r3, r3
    554e:	1c58      	adds	r0, r3, #1
    5550:	fb00 f303 	mul.w	r3, r0, r3
    5554:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5556:	fb03 f000 	mul.w	r0, r3, r0
    555a:	1200      	asrs	r0, r0, #8
    555c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5560:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    5564:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5566:	05d8      	lsls	r0, r3, #23
    5568:	f894 033d 	ldrb.w	r0, [r4, #829]	; 0x33d

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    556c:	bf54      	ite	pl
    556e:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5570:	23ff      	movmi	r3, #255	; 0xff
    5572:	4298      	cmp	r0, r3
    5574:	f4ff af7d 	bcc.w	5472 <one_sin(LEDStruct&)+0x1de>
    5578:	f04f 0b00 	mov.w	fp, #0
    557c:	e795      	b.n	54aa <one_sin(LEDStruct&)+0x216>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    557e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5582:	b983      	cbnz	r3, 55a6 <one_sin(LEDStruct&)+0x312>
    5584:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5588:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    558a:	7822      	ldrb	r2, [r4, #0]
    558c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    5590:	7862      	ldrb	r2, [r4, #1]
    5592:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    5596:	78a2      	ldrb	r2, [r4, #2]
    5598:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    559c:	3403      	adds	r4, #3
    559e:	42a1      	cmp	r1, r4
    55a0:	f1a3 0303 	sub.w	r3, r3, #3
    55a4:	d1f1      	bne.n	558a <one_sin(LEDStruct&)+0x2f6>
}
    55a6:	b005      	add	sp, #20
    55a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    55ac:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
    55b0:	f894 233c 	ldrb.w	r2, [r4, #828]	; 0x33c
    55b4:	1a9b      	subs	r3, r3, r2
    55b6:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    55ba:	e74d      	b.n	5458 <one_sin(LEDStruct&)+0x1c4>
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    55bc:	2296      	movs	r2, #150	; 0x96
    55be:	f8a4 2338 	strh.w	r2, [r4, #824]	; 0x338
    55c2:	e716      	b.n	53f2 <one_sin(LEDStruct&)+0x15e>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    55c4:	4620      	mov	r0, r4
    55c6:	f7ff fe15 	bl	51f4 <one_sin_update(LEDStruct&)>
    55ca:	e72f      	b.n	542c <one_sin(LEDStruct&)+0x198>
    55cc:	cccccccd 	.word	0xcccccccd
    55d0:	1fff91d1 	.word	0x1fff91d1
    55d4:	1fff8784 	.word	0x1fff8784

000055d8 <fireworks_update(LEDStruct&)>:

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    55d8:	b510      	push	{r4, lr}
	keyboard_update = 0;
	switch (update_var) {
    55da:	4b0f      	ldr	r3, [pc, #60]	; (5618 <fireworks_update(LEDStruct&)+0x40>)
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    55dc:	4a0f      	ldr	r2, [pc, #60]	; (561c <fireworks_update(LEDStruct&)+0x44>)
	switch (update_var) {
    55de:	781b      	ldrb	r3, [r3, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    55e0:	2100      	movs	r1, #0

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    55e2:	b082      	sub	sp, #8
    55e4:	4604      	mov	r4, r0
	keyboard_update = 0;
    55e6:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    55e8:	b98b      	cbnz	r3, 560e <fireworks_update(LEDStruct&)+0x36>
		case 0:	leds.use_overlay = (bool)update_arg;	
    55ea:	4a0d      	ldr	r2, [pc, #52]	; (5620 <fireworks_update(LEDStruct&)+0x48>)
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    55ec:	480d      	ldr	r0, [pc, #52]	; (5624 <fireworks_update(LEDStruct&)+0x4c>)
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:	leds.use_overlay = (bool)update_arg;	
    55ee:	8812      	ldrh	r2, [r2, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    55f0:	f88d 3004 	strb.w	r3, [sp, #4]
    55f4:	1a52      	subs	r2, r2, r1
    55f6:	bf18      	it	ne
    55f8:	2201      	movne	r2, #1
    55fa:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    55fe:	2196      	movs	r1, #150	; 0x96
    5600:	aa01      	add	r2, sp, #4
    5602:	f88d 3005 	strb.w	r3, [sp, #5]
    5606:	f88d 3006 	strb.w	r3, [sp, #6]
    560a:	f004 fe27 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
			break; //a
		default:	break;
	}
	LEDDebug(leds);
    560e:	4620      	mov	r0, r4
    5610:	f7fc fdd0 	bl	21b4 <LEDDebug(LEDStruct&)>
}
    5614:	b002      	add	sp, #8
    5616:	bd10      	pop	{r4, pc}
    5618:	1fff9a18 	.word	0x1fff9a18
    561c:	1fff91d1 	.word	0x1fff91d1
    5620:	1fff90d2 	.word	0x1fff90d2
    5624:	1fff91d8 	.word	0x1fff91d8

00005628 <prepare_for_explosion(LEDStruct&)>:

void prepare_for_explosion(LEDStruct& leds) {
    5628:	b570      	push	{r4, r5, r6, lr}
    562a:	4604      	mov	r4, r0
    562c:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    562e:	4d1b      	ldr	r5, [pc, #108]	; (569c <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    5630:	2002      	movs	r0, #2
    5632:	f005 fda1 	bl	b178 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5636:	882b      	ldrh	r3, [r5, #0]
    5638:	4418      	add	r0, r3
    563a:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    563e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5642:	f243 6319 	movw	r3, #13849	; 0x3619
    5646:	4418      	add	r0, r3
    5648:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    564a:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    564e:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    5652:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5656:	b2d2      	uxtb	r2, r2
    5658:	4403      	add	r3, r0
    565a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    565e:	b29b      	uxth	r3, r3
    5660:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    5662:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    5664:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	LEDDebug(leds);
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5668:	321b      	adds	r2, #27
    566a:	f884 234d 	strb.w	r2, [r4, #845]	; 0x34d
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    566e:	f884 134e 	strb.w	r1, [r4, #846]	; 0x34e
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    5672:	f884 6350 	strb.w	r6, [r4, #848]	; 0x350
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    5676:	f884 634f 	strb.w	r6, [r4, #847]	; 0x34f
	leds.exploded = false;
    567a:	f884 6358 	strb.w	r6, [r4, #856]	; 0x358
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    567e:	4620      	mov	r0, r4
    5680:	aa01      	add	r2, sp, #4
    5682:	2196      	movs	r1, #150	; 0x96
    5684:	802b      	strh	r3, [r5, #0]
    5686:	f88d 6004 	strb.w	r6, [sp, #4]
    568a:	f88d 6005 	strb.w	r6, [sp, #5]
    568e:	f88d 6006 	strb.w	r6, [sp, #6]
    5692:	f004 fde3 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
}
    5696:	b002      	add	sp, #8
    5698:	bd70      	pop	{r4, r5, r6, pc}
    569a:	bf00      	nop
    569c:	1fff8784 	.word	0x1fff8784

000056a0 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    56a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    56a4:	f890 3358 	ldrb.w	r3, [r0, #856]	; 0x358
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    56a8:	b087      	sub	sp, #28
    56aa:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    56ac:	2b00      	cmp	r3, #0
    56ae:	f000 8089 	beq.w	57c4 <fadeup(LEDStruct&)+0x124>
    56b2:	f890 334d 	ldrb.w	r3, [r0, #845]	; 0x34d
    56b6:	9303      	str	r3, [sp, #12]
    56b8:	4606      	mov	r6, r0
    56ba:	4618      	mov	r0, r3
    56bc:	4b5d      	ldr	r3, [pc, #372]	; (5834 <fadeup(LEDStruct&)+0x194>)
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    56c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    56c8:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    56cc:	3419      	adds	r4, #25
    56ce:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56d0:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    56d4:	b2db      	uxtb	r3, r3
    56d6:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    56da:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    56de:	ea4f 2929 	mov.w	r9, r9, asr #8
    56e2:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    56e6:	2301      	movs	r3, #1
    56e8:	fa5f f989 	uxtb.w	r9, r9
    56ec:	f886 3350 	strb.w	r3, [r6, #848]	; 0x350
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    56f0:	f886 9359 	strb.w	r9, [r6, #857]	; 0x359
    56f4:	f008 f894 	bl	d820 <__aeabi_ui2f>
    56f8:	f506 7b56 	add.w	fp, r6, #856	; 0x358
    56fc:	f206 5a74 	addw	sl, r6, #1396	; 0x574
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5700:	465b      	mov	r3, fp
    5702:	f506 6889 	add.w	r8, r6, #1096	; 0x448
    5706:	f206 573b 	addw	r7, r6, #1339	; 0x53b
    570a:	46d3      	mov	fp, sl
    570c:	9001      	str	r0, [sp, #4]
    570e:	f206 6664 	addw	r6, r6, #1636	; 0x664
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5712:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5714:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5716:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    571a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    571e:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5722:	3419      	adds	r4, #25
    5724:	b2a4      	uxth	r4, r4
    5726:	2373      	movs	r3, #115	; 0x73
    5728:	fb03 f004 	mul.w	r0, r3, r4
    572c:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5734:	300a      	adds	r0, #10
    5736:	b280      	uxth	r0, r0
    5738:	f008 f872 	bl	d820 <__aeabi_ui2f>
    573c:	493e      	ldr	r1, [pc, #248]	; (5838 <fadeup(LEDStruct&)+0x198>)
    573e:	f008 f97b 	bl	da38 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5742:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5746:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    574a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    574e:	3319      	adds	r3, #25
    5750:	b29b      	uxth	r3, r3
    5752:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    575a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    575e:	3419      	adds	r4, #25
    5760:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5762:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5766:	b2c9      	uxtb	r1, r1
    5768:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    576c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5770:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    5772:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    5776:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5778:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    577c:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5780:	b2c8      	uxtb	r0, r1
    5782:	f008 f84d 	bl	d820 <__aeabi_ui2f>
    5786:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5788:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    578a:	4a2c      	ldr	r2, [pc, #176]	; (583c <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    578c:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5790:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5792:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5796:	d8be      	bhi.n	5716 <fadeup(LEDStruct&)+0x76>
    5798:	9a03      	ldr	r2, [sp, #12]
    579a:	9e02      	ldr	r6, [sp, #8]
    579c:	4f25      	ldr	r7, [pc, #148]	; (5834 <fadeup(LEDStruct&)+0x194>)
    579e:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    57a2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    57a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    57aa:	18f5      	adds	r5, r6, r3
    57ac:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    57ae:	22ff      	movs	r2, #255	; 0xff
    57b0:	803c      	strh	r4, [r7, #0]
    57b2:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    57b4:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    57b6:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    57b8:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    57ba:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    57bc:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    57be:	b007      	add	sp, #28
    57c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    57c4:	9d02      	ldr	r5, [sp, #8]
    57c6:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    57ca:	f895 134d 	ldrb.w	r1, [r5, #845]	; 0x34d
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57ce:	f895 234e 	ldrb.w	r2, [r5, #846]	; 0x34e
    57d2:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    57d6:	3305      	adds	r3, #5
    57d8:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    57da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    57de:	f885 334f 	strb.w	r3, [r5, #847]	; 0x34f
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    57e2:	4429      	add	r1, r5
    57e4:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57e6:	24ff      	movs	r4, #255	; 0xff
    57e8:	f88d 3016 	strb.w	r3, [sp, #22]
    57ec:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    57f0:	f005 f854 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    57f4:	f895 134d 	ldrb.w	r1, [r5, #845]	; 0x34d
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57f8:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    57fc:	f895 234f 	ldrb.w	r2, [r5, #847]	; 0x34f
    5800:	f88d 3014 	strb.w	r3, [sp, #20]
    5804:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    5808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    580c:	a805      	add	r0, sp, #20
    580e:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5810:	f88d 4015 	strb.w	r4, [sp, #21]
    5814:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5818:	f005 f840 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    581c:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    5820:	2bff      	cmp	r3, #255	; 0xff
    5822:	d1cc      	bne.n	57be <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    5824:	9a02      	ldr	r2, [sp, #8]
    5826:	2301      	movs	r3, #1
    5828:	f882 3358 	strb.w	r3, [r2, #856]	; 0x358
		}
	}
}
    582c:	b007      	add	sp, #28
    582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5832:	bf00      	nop
    5834:	1fff8784 	.word	0x1fff8784
    5838:	42c80000 	.word	0x42c80000
    583c:	437f0000 	.word	0x437f0000

00005840 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5844:	4b65      	ldr	r3, [pc, #404]	; (59dc <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    5846:	4605      	mov	r5, r0
    5848:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    584a:	781a      	ldrb	r2, [r3, #0]
    584c:	2196      	movs	r1, #150	; 0x96
    584e:	f004 fdc7 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5852:	f895 4359 	ldrb.w	r4, [r5, #857]	; 0x359
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    5856:	2600      	movs	r6, #0
    5858:	f885 6758 	strb.w	r6, [r5, #1880]	; 0x758
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    585c:	2c00      	cmp	r4, #0
    585e:	d07e      	beq.n	595e <explosion(LEDStruct&)+0x11e>
    5860:	f8df 9190 	ldr.w	r9, [pc, #400]	; 59f4 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5864:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5868:	e03b      	b.n	58e2 <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    586a:	f8d4 135c 	ldr.w	r1, [r4, #860]	; 0x35c
    586e:	4650      	mov	r0, sl
    5870:	f007 ff26 	bl	d6c0 <__addsf3>
    5874:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5876:	2100      	movs	r1, #0
    5878:	4638      	mov	r0, r7
    587a:	f008 f9c7 	bl	dc0c <__aeabi_fcmplt>
    587e:	4958      	ldr	r1, [pc, #352]	; (59e0 <explosion(LEDStruct&)+0x1a0>)
    5880:	2800      	cmp	r0, #0
    5882:	d168      	bne.n	5956 <explosion(LEDStruct&)+0x116>
    5884:	4638      	mov	r0, r7
    5886:	f008 f9df 	bl	dc48 <__aeabi_fcmpgt>
    588a:	b100      	cbz	r0, 588e <explosion(LEDStruct&)+0x4e>
    588c:	4f54      	ldr	r7, [pc, #336]	; (59e0 <explosion(LEDStruct&)+0x1a0>)
    588e:	f8c4 735c 	str.w	r7, [r4, #860]	; 0x35c
		leds.spark_vel[x] *= gravity;
    5892:	4651      	mov	r1, sl
    5894:	f8d9 0000 	ldr.w	r0, [r9]
    5898:	f008 f81a 	bl	d8d0 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    589c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    58a0:	f8c4 044c 	str.w	r0, [r4, #1100]	; 0x44c
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    58a4:	f8d4 0578 	ldr.w	r0, [r4, #1400]	; 0x578
    58a8:	f008 f812 	bl	d8d0 <__aeabi_fmul>
    58ac:	4601      	mov	r1, r0
    58ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    58b2:	f007 ff03 	bl	d6bc <__aeabi_fsub>
    58b6:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
    58ba:	f008 f809 	bl	d8d0 <__aeabi_fmul>
    58be:	f8c4 0668 	str.w	r0, [r4, #1640]	; 0x668
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    58c2:	f008 f9f1 	bl	dca8 <__aeabi_f2uiz>
    58c6:	f895 3758 	ldrb.w	r3, [r5, #1880]	; 0x758
    58ca:	b2c0      	uxtb	r0, r0
    58cc:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    58ce:	f106 0601 	add.w	r6, r6, #1
    58d2:	f895 3359 	ldrb.w	r3, [r5, #857]	; 0x359
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    58d6:	bf38      	it	cc
    58d8:	f885 0758 	strbcc.w	r0, [r5, #1880]	; 0x758
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    58dc:	b2f6      	uxtb	r6, r6
    58de:	42b3      	cmp	r3, r6
    58e0:	d93b      	bls.n	595a <explosion(LEDStruct&)+0x11a>
    58e2:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    58e6:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
    58ea:	f008 f9b7 	bl	dc5c <__aeabi_f2iz>
    58ee:	4607      	mov	r7, r0
    58f0:	f8d4 0668 	ldr.w	r0, [r4, #1640]	; 0x668
    58f4:	f008 f9d8 	bl	dca8 <__aeabi_f2uiz>
    58f8:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    58fc:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5900:	a901      	add	r1, sp, #4
    5902:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5904:	f88d 3000 	strb.w	r3, [sp]
    5908:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    590c:	f004 ffc6 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5910:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    5914:	1829      	adds	r1, r5, r0
    5916:	5c2b      	ldrb	r3, [r5, r0]
    5918:	f89d 2004 	ldrb.w	r2, [sp, #4]
    591c:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5920:	542b      	strb	r3, [r5, r0]
    5922:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5926:	784a      	ldrb	r2, [r1, #1]
    5928:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    592c:	704a      	strb	r2, [r1, #1]
    592e:	788b      	ldrb	r3, [r1, #2]
    5930:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5934:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5938:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    593a:	708b      	strb	r3, [r1, #2]
    593c:	f892 353c 	ldrb.w	r3, [r2, #1340]	; 0x53c
    5940:	f8d4 a44c 	ldr.w	sl, [r4, #1100]	; 0x44c
    5944:	2b00      	cmp	r3, #0
    5946:	d190      	bne.n	586a <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    5948:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
    594c:	4651      	mov	r1, sl
    594e:	f007 feb5 	bl	d6bc <__aeabi_fsub>
    5952:	4607      	mov	r7, r0
    5954:	e78f      	b.n	5876 <explosion(LEDStruct&)+0x36>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5956:	2700      	movs	r7, #0
    5958:	e799      	b.n	588e <explosion(LEDStruct&)+0x4e>
    595a:	f895 4758 	ldrb.w	r4, [r5, #1880]	; 0x758
    595e:	462a      	mov	r2, r5
    5960:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    5964:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5966:	7819      	ldrb	r1, [r3, #0]
    5968:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    596c:	7859      	ldrb	r1, [r3, #1]
    596e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    5972:	7899      	ldrb	r1, [r3, #2]
    5974:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    5978:	3303      	adds	r3, #3
    597a:	4283      	cmp	r3, r0
    597c:	f1a2 0203 	sub.w	r2, r2, #3
    5980:	d1f1      	bne.n	5966 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    5982:	bb44      	cbnz	r4, 59d6 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5984:	aa01      	add	r2, sp, #4
    5986:	2196      	movs	r1, #150	; 0x96
    5988:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    598a:	f88d 4004 	strb.w	r4, [sp, #4]
    598e:	f88d 4005 	strb.w	r4, [sp, #5]
    5992:	f88d 4006 	strb.w	r4, [sp, #6]
    5996:	f004 fc61 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    599a:	4812      	ldr	r0, [pc, #72]	; (59e4 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    599c:	4c12      	ldr	r4, [pc, #72]	; (59e8 <explosion(LEDStruct&)+0x1a8>)
    599e:	8803      	ldrh	r3, [r0, #0]
    59a0:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    59a2:	4912      	ldr	r1, [pc, #72]	; (59ec <explosion(LEDStruct&)+0x1ac>)
    59a4:	4a12      	ldr	r2, [pc, #72]	; (59f0 <explosion(LEDStruct&)+0x1b0>)
    59a6:	9401      	str	r4, [sp, #4]
    59a8:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    59ac:	8809      	ldrh	r1, [r1, #0]
    59ae:	8812      	ldrh	r2, [r2, #0]
    59b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59b4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59b8:	440a      	add	r2, r1
    59ba:	3319      	adds	r3, #25
    59bc:	b29b      	uxth	r3, r3
    59be:	b292      	uxth	r2, r2
	return ret;
    59c0:	9901      	ldr	r1, [sp, #4]
    59c2:	8003      	strh	r3, [r0, #0]
    59c4:	fb03 f302 	mul.w	r3, r3, r2
    59c8:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    59cc:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    59ce:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    59d2:	f885 2350 	strb.w	r2, [r5, #848]	; 0x350
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    59d6:	b002      	add	sp, #8
    59d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59dc:	1fff8748 	.word	0x1fff8748
    59e0:	42940000 	.word	0x42940000
    59e4:	1fff8784 	.word	0x1fff8784
    59e8:	1ffface8 	.word	0x1ffface8
    59ec:	1fff874e 	.word	0x1fff874e
    59f0:	1fff874c 	.word	0x1fff874c
    59f4:	1fff8754 	.word	0x1fff8754

000059f8 <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    59f8:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    59fa:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
    59fe:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    5a00:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    5a02:	d01c      	beq.n	5a3e <fireworks_render(LEDStruct&)+0x46>
    5a04:	d317      	bcc.n	5a36 <fireworks_render(LEDStruct&)+0x3e>
    5a06:	2b02      	cmp	r3, #2
    5a08:	d113      	bne.n	5a32 <fireworks_render(LEDStruct&)+0x3a>
    5a0a:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5a0c:	aa01      	add	r2, sp, #4
    5a0e:	2196      	movs	r1, #150	; 0x96
    5a10:	4604      	mov	r4, r0
    5a12:	f88d 3004 	strb.w	r3, [sp, #4]
    5a16:	f88d 3005 	strb.w	r3, [sp, #5]
    5a1a:	f88d 3006 	strb.w	r3, [sp, #6]
    5a1e:	f004 fc1d 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5a22:	4a0b      	ldr	r2, [pc, #44]	; (5a50 <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    5a24:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
    5a28:	6812      	ldr	r2, [r2, #0]
    5a2a:	9201      	str	r2, [sp, #4]
	return ret;
    5a2c:	9a01      	ldr	r2, [sp, #4]
    5a2e:	429a      	cmp	r2, r3
    5a30:	d209      	bcs.n	5a46 <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5a32:	b002      	add	sp, #8
    5a34:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    5a36:	f7ff fe33 	bl	56a0 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5a3a:	b002      	add	sp, #8
    5a3c:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    5a3e:	f7ff feff 	bl	5840 <explosion(LEDStruct&)>
			break;
	}
}
    5a42:	b002      	add	sp, #8
    5a44:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    5a46:	4620      	mov	r0, r4
    5a48:	f7ff fdee 	bl	5628 <prepare_for_explosion(LEDStruct&)>
    5a4c:	e7f1      	b.n	5a32 <fireworks_render(LEDStruct&)+0x3a>
    5a4e:	bf00      	nop
    5a50:	1ffface8 	.word	0x1ffface8

00005a54 <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5a56:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5a5a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5a5c:	b9fb      	cbnz	r3, 5a9e <fireworks(LEDStruct&)+0x4a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a5e:	493e      	ldr	r1, [pc, #248]	; (5b58 <fireworks(LEDStruct&)+0x104>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    5a60:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5a64:	880b      	ldrh	r3, [r1, #0]
    5a66:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5a6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5a6e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5a72:	3319      	adds	r3, #25
    5a74:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a76:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a7a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    5a7e:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    5a80:	2616      	movs	r6, #22
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    5a82:	250f      	movs	r5, #15

	leds.current_stage		= WAITING;
    5a84:	2002      	movs	r0, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a86:	800b      	strh	r3, [r1, #0]

	leds.use_overlay		= uo;
    5a88:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    5a8c:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= FIREWORKS;
    5a90:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    5a94:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.current_stage		= WAITING;
    5a98:	f884 0350 	strb.w	r0, [r4, #848]	; 0x350

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    5a9c:	b972      	cbnz	r2, 5abc <fireworks(LEDStruct&)+0x68>
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5a9e:	4b2f      	ldr	r3, [pc, #188]	; (5b5c <fireworks(LEDStruct&)+0x108>)
    5aa0:	781b      	ldrb	r3, [r3, #0]
    5aa2:	b993      	cbnz	r3, 5aca <fireworks(LEDStruct&)+0x76>

	fireworks_render(leds);
    5aa4:	4620      	mov	r0, r4
    5aa6:	f7ff ffa7 	bl	59f8 <fireworks_render(LEDStruct&)>

	if (leds.use_overlay) {
    5aaa:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
    5aae:	b123      	cbz	r3, 5aba <fireworks(LEDStruct&)+0x66>
		if (leds.array_type == CURRENT) { 
    5ab0:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    5ab4:	b16b      	cbz	r3, 5ad2 <fireworks(LEDStruct&)+0x7e>
			fireworks_render(curr_over_leds); 
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
    5ab6:	2b01      	cmp	r3, #1
    5ab8:	d02c      	beq.n	5b14 <fireworks(LEDStruct&)+0xc0>
    5aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    5abc:	4b28      	ldr	r3, [pc, #160]	; (5b60 <fireworks(LEDStruct&)+0x10c>)
    5abe:	f883 0350 	strb.w	r0, [r3, #848]	; 0x350
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5ac2:	4b26      	ldr	r3, [pc, #152]	; (5b5c <fireworks(LEDStruct&)+0x108>)
    5ac4:	781b      	ldrb	r3, [r3, #0]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d0ec      	beq.n	5aa4 <fireworks(LEDStruct&)+0x50>
    5aca:	4620      	mov	r0, r4
    5acc:	f7ff fd84 	bl	55d8 <fireworks_update(LEDStruct&)>
    5ad0:	e7e8      	b.n	5aa4 <fireworks(LEDStruct&)+0x50>

	fireworks_render(leds);

	if (leds.use_overlay) {
		if (leds.array_type == CURRENT) { 
			fireworks_render(curr_over_leds); 
    5ad2:	4824      	ldr	r0, [pc, #144]	; (5b64 <fireworks(LEDStruct&)+0x110>)
    5ad4:	f7ff ff90 	bl	59f8 <fireworks_render(LEDStruct&)>
    5ad8:	4b22      	ldr	r3, [pc, #136]	; (5b64 <fireworks(LEDStruct&)+0x110>)
    5ada:	4620      	mov	r0, r4
    5adc:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5ae0:	3401      	adds	r4, #1
    5ae2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5ae6:	7819      	ldrb	r1, [r3, #0]
    5ae8:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5aec:	f804 2c01 	strb.w	r2, [r4, #-1]
    5af0:	7841      	ldrb	r1, [r0, #1]
    5af2:	785a      	ldrb	r2, [r3, #1]
    5af4:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    5af8:	7041      	strb	r1, [r0, #1]
    5afa:	7882      	ldrb	r2, [r0, #2]
    5afc:	7899      	ldrb	r1, [r3, #2]
    5afe:	fa82 f251 	uqadd8	r2, r2, r1
    5b02:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5b04:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5b06:	7082      	strb	r2, [r0, #2]
    5b08:	f104 0403 	add.w	r4, r4, #3
    5b0c:	f100 0003 	add.w	r0, r0, #3
    5b10:	d1e7      	bne.n	5ae2 <fireworks(LEDStruct&)+0x8e>
    5b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
			fireworks_render(next_over_leds); 
    5b14:	4812      	ldr	r0, [pc, #72]	; (5b60 <fireworks(LEDStruct&)+0x10c>)
    5b16:	f7ff ff6f 	bl	59f8 <fireworks_render(LEDStruct&)>
    5b1a:	4b11      	ldr	r3, [pc, #68]	; (5b60 <fireworks(LEDStruct&)+0x10c>)
    5b1c:	4620      	mov	r0, r4
    5b1e:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5b22:	3401      	adds	r4, #1
    5b24:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5b28:	7819      	ldrb	r1, [r3, #0]
    5b2a:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5b2e:	f804 2c01 	strb.w	r2, [r4, #-1]
    5b32:	7841      	ldrb	r1, [r0, #1]
    5b34:	785a      	ldrb	r2, [r3, #1]
    5b36:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    5b3a:	7041      	strb	r1, [r0, #1]
    5b3c:	7882      	ldrb	r2, [r0, #2]
    5b3e:	7899      	ldrb	r1, [r3, #2]
    5b40:	fa82 f251 	uqadd8	r2, r2, r1
    5b44:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5b46:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5b48:	7082      	strb	r2, [r0, #2]
    5b4a:	f104 0403 	add.w	r4, r4, #3
    5b4e:	f100 0003 	add.w	r0, r0, #3
    5b52:	d1e7      	bne.n	5b24 <fireworks(LEDStruct&)+0xd0>
    5b54:	e7b1      	b.n	5aba <fireworks(LEDStruct&)+0x66>
    5b56:	bf00      	nop
    5b58:	1fff8784 	.word	0x1fff8784
    5b5c:	1fff91d1 	.word	0x1fff91d1
    5b60:	1fff9a2c 	.word	0x1fff9a2c
    5b64:	1fff91d8 	.word	0x1fff91d8

00005b68 <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5b68:	4b2a      	ldr	r3, [pc, #168]	; (5c14 <two_sin_update(LEDStruct&)+0xac>)
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5b6a:	4a2b      	ldr	r2, [pc, #172]	; (5c18 <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    5b6c:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5b6e:	2100      	movs	r1, #0
    5b70:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5b72:	2b0b      	cmp	r3, #11
    5b74:	d80b      	bhi.n	5b8e <two_sin_update(LEDStruct&)+0x26>
    5b76:	e8df f003 	tbb	[pc, r3]
    5b7a:	1f11      	.short	0x1f11
    5b7c:	332e2924 	.word	0x332e2924
    5b80:	06423d38 	.word	0x06423d38
    5b84:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    5b86:	4b25      	ldr	r3, [pc, #148]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5b88:	881b      	ldrh	r3, [r3, #0]
    5b8a:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    5b8e:	f7fc bb11 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    5b92:	4b22      	ldr	r3, [pc, #136]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5b94:	881b      	ldrh	r3, [r3, #0]
    5b96:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    5b9a:	e7f8      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5b9c:	4b1f      	ldr	r3, [pc, #124]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5b9e:	881b      	ldrh	r3, [r3, #0]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	bf14      	ite	ne
    5ba4:	2301      	movne	r3, #1
    5ba6:	2300      	moveq	r3, #0
    5ba8:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5bac:	bf14      	ite	ne
    5bae:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5bb0:	234b      	moveq	r3, #75	; 0x4b
    5bb2:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
    5bb6:	e7ea      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    5bb8:	4b18      	ldr	r3, [pc, #96]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bba:	881b      	ldrh	r3, [r3, #0]
    5bbc:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5bc0:	e7e5      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    5bc2:	4b16      	ldr	r3, [pc, #88]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bc4:	881b      	ldrh	r3, [r3, #0]
    5bc6:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    5bca:	e7e0      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5bcc:	4b13      	ldr	r3, [pc, #76]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bce:	881b      	ldrh	r3, [r3, #0]
    5bd0:	f880 333c 	strb.w	r3, [r0, #828]	; 0x33c
    5bd4:	e7db      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    5bd6:	4b11      	ldr	r3, [pc, #68]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bd8:	881b      	ldrh	r3, [r3, #0]
    5bda:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    5bde:	e7d6      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5be0:	4b0e      	ldr	r3, [pc, #56]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5be2:	881b      	ldrh	r3, [r3, #0]
    5be4:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
    5be8:	e7d1      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    5bea:	4b0c      	ldr	r3, [pc, #48]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bec:	881b      	ldrh	r3, [r3, #0]
    5bee:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    5bf2:	e7cc      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    5bf4:	4b09      	ldr	r3, [pc, #36]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5bf6:	881b      	ldrh	r3, [r3, #0]
    5bf8:	f880 333d 	strb.w	r3, [r0, #829]	; 0x33d
    5bfc:	e7c7      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    5bfe:	4b07      	ldr	r3, [pc, #28]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5c00:	881b      	ldrh	r3, [r3, #0]
    5c02:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    5c06:	e7c2      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    5c08:	4b04      	ldr	r3, [pc, #16]	; (5c1c <two_sin_update(LEDStruct&)+0xb4>)
    5c0a:	881b      	ldrh	r3, [r3, #0]
    5c0c:	f880 3348 	strb.w	r3, [r0, #840]	; 0x348
    5c10:	e7bd      	b.n	5b8e <two_sin_update(LEDStruct&)+0x26>
    5c12:	bf00      	nop
    5c14:	1fff9a18 	.word	0x1fff9a18
    5c18:	1fff91d1 	.word	0x1fff91d1
    5c1c:	1fff90d2 	.word	0x1fff90d2

00005c20 <two_sin(LEDStruct&)>:
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5c24:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5c28:	b083      	sub	sp, #12
    5c2a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	f040 80cb 	bne.w	5dc8 <two_sin(LEDStruct&)+0x1a8>
    5c32:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 6000 <two_sin(LEDStruct&)+0x3e0>
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
    5c36:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5c3a:	f8ba 3000 	ldrh.w	r3, [sl]
    5c3e:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    5c42:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    5c46:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5c4a:	3619      	adds	r6, #25
    5c4c:	b2b6      	uxth	r6, r6
    5c4e:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    5c52:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    5c56:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    5c5a:	f10c 0c19 	add.w	ip, ip, #25
    5c5e:	fa1f fc8c 	uxth.w	ip, ip
    5c62:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    5c66:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    5c6a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5c6e:	f10e 0e19 	add.w	lr, lr, #25
    5c72:	fa1f fe8e 	uxth.w	lr, lr
    5c76:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    5c7a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    5c7e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5c82:	3119      	adds	r1, #25
    5c84:	b289      	uxth	r1, r1
    5c86:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    5c8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    5c8e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5c92:	3719      	adds	r7, #25
    5c94:	b2bf      	uxth	r7, r7
    5c96:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    5c9a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5c9e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5ca2:	3519      	adds	r5, #25
    5ca4:	b2ad      	uxth	r5, r5
    5ca6:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    5caa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    5cae:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5cb2:	3019      	adds	r0, #25
    5cb4:	b280      	uxth	r0, r0
    5cb6:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5cba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5cbe:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5cc2:	3219      	adds	r2, #25
    5cc4:	b292      	uxth	r2, r2
    5cc6:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5cca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5cce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5cd2:	3319      	adds	r3, #25
    5cd4:	b29b      	uxth	r3, r3
    5cd6:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    5cda:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5cde:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    5ce2:	f109 0919 	add.w	r9, r9, #25
    5ce6:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cea:	eb09 2819 	add.w	r8, r9, r9, lsr #8
    5cee:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5cf2:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cf6:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cfa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cfe:	b2c9      	uxtb	r1, r1
    5d00:	b2d2      	uxtb	r2, r2
    5d02:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5d06:	b2db      	uxtb	r3, r3
    5d08:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d0c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5d10:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5d18:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    5d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5d20:	1112      	asrs	r2, r2, #4
    5d22:	ea4f 2828 	mov.w	r8, r8, asr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d26:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d2a:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d2c:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d30:	b2ed      	uxtb	r5, r5
    5d32:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d34:	111b      	asrs	r3, r3, #4
    5d36:	f102 0b20 	add.w	fp, r2, #32
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d3a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d3e:	f108 020c 	add.w	r2, r8, #12
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d42:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    5d46:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d4a:	3903      	subs	r1, #3
    5d4c:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5d54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d58:	3320      	adds	r3, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d5a:	f8aa 9000 	strh.w	r9, [sl]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
    5d5e:	f04f 0815 	mov.w	r8, #21

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5d62:	f04f 0901 	mov.w	r9, #1
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
    5d66:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d6a:	fa5f fc8c 	uxtb.w	ip, ip
    5d6e:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d72:	b2c9      	uxtb	r1, r1
    5d74:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d76:	f3c5 2507 	ubfx	r5, r5, #8, #8
    5d7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d7e:	fa5f fb8b 	uxtb.w	fp, fp
    5d82:	b2d2      	uxtb	r2, r2
    5d84:	b2db      	uxtb	r3, r3

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5d86:	f884 922e 	strb.w	r9, [r4, #558]	; 0x22e
	leds.mode_type			= TWO_SIN;
    5d8a:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5d8e:	2e00      	cmp	r6, #0
    5d90:	f040 812b 	bne.w	5fea <two_sin(LEDStruct&)+0x3ca>
	else					 { leds.strip_range = ONE_SIDE; }
    5d94:	264b      	movs	r6, #75	; 0x4b
    5d96:	f8a4 6338 	strh.w	r6, [r4, #824]	; 0x338
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5d9a:	2600      	movs	r6, #0
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue		= sh;		// changes by rot
    5d9c:	f884 c343 	strb.w	ip, [r4, #835]	; 0x343
	leds.two_hue		= th;
    5da0:	f884 e349 	strb.w	lr, [r4, #841]	; 0x349
	leds.sin_speed		= ss;		// changes the phase
    5da4:	f884 133c 	strb.w	r1, [r4, #828]	; 0x33c
	leds.two_speed		= ts;
    5da8:	f884 7345 	strb.w	r7, [r4, #837]	; 0x345
	leds.sin_rot		= sr;		// changes the hue
    5dac:	f884 533e 	strb.w	r5, [r4, #830]	; 0x33e
	leds.two_rot		= tr;
    5db0:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_cutoff		= sc;		// limits the brightness
    5db4:	f884 b33d 	strb.w	fp, [r4, #829]	; 0x33d
	leds.two_cutoff		= tc;
    5db8:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5dbc:	f884 233f 	strb.w	r2, [r4, #831]	; 0x33f
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5dc0:	f884 6342 	strb.w	r6, [r4, #834]	; 0x342
	leds.two_phase		= 0;
    5dc4:	f884 6348 	strb.w	r6, [r4, #840]	; 0x348
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5dc8:	4b8c      	ldr	r3, [pc, #560]	; (5ffc <two_sin(LEDStruct&)+0x3dc>)
    5dca:	781b      	ldrb	r3, [r3, #0]
    5dcc:	2b00      	cmp	r3, #0
    5dce:	f040 8110 	bne.w	5ff2 <two_sin(LEDStruct&)+0x3d2>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    5dd2:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	f040 80f8 	bne.w	5fcc <two_sin(LEDStruct&)+0x3ac>
    5ddc:	f894 0342 	ldrb.w	r0, [r4, #834]	; 0x342
    5de0:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    5de4:	f894 233c 	ldrb.w	r2, [r4, #828]	; 0x33c
    5de8:	f894 3345 	ldrb.w	r3, [r4, #837]	; 0x345
    5dec:	4402      	add	r2, r0
    5dee:	440b      	add	r3, r1
    5df0:	f884 2342 	strb.w	r2, [r4, #834]	; 0x342
    5df4:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5df8:	f894 c343 	ldrb.w	ip, [r4, #835]	; 0x343
    5dfc:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5e00:	f894 0349 	ldrb.w	r0, [r4, #841]	; 0x349
    5e04:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346

	for (int k = 0; k < leds.strip_range; k++) {
    5e08:	f8b4 1338 	ldrh.w	r1, [r4, #824]	; 0x338
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5e0c:	4494      	add	ip, r2
    5e0e:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5e12:	4403      	add	r3, r0
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5e14:	f884 c343 	strb.w	ip, [r4, #835]	; 0x343
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5e18:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349

	for (int k = 0; k < leds.strip_range; k++) {
    5e1c:	2900      	cmp	r1, #0
    5e1e:	f000 80be 	beq.w	5f9e <two_sin(LEDStruct&)+0x37e>
    5e22:	4626      	mov	r6, r4
    5e24:	2700      	movs	r7, #0
    5e26:	25ff      	movs	r5, #255	; 0xff
    5e28:	e08b      	b.n	5f42 <two_sin(LEDStruct&)+0x322>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5e2a:	2b00      	cmp	r3, #0
        in = 255 - in;
    5e2c:	bfbc      	itt	lt
    5e2e:	43c9      	mvnlt	r1, r1
    5e30:	b2c9      	uxtblt	r1, r1
    5e32:	0049      	lsls	r1, r1, #1
    5e34:	b2c9      	uxtb	r1, r1
    5e36:	1c4b      	adds	r3, r1, #1
    5e38:	fb03 f101 	mul.w	r1, r3, r1
    5e3c:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5e3e:	fb01 f303 	mul.w	r3, r1, r3
    5e42:	121b      	asrs	r3, r3, #8
    5e44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5e48:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    5e4c:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5e4e:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5e50:	bf54      	ite	pl
    5e52:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5e56:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    5e5a:	ebc8 0e0e 	rsb	lr, r8, lr
    5e5e:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5e62:	f894 3348 	ldrb.w	r3, [r4, #840]	; 0x348

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    5e66:	f884 e344 	strb.w	lr, [r4, #836]	; 0x344
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5e6a:	3b80      	subs	r3, #128	; 0x80
    5e6c:	4403      	add	r3, r0
    5e6e:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5e70:	b259      	sxtb	r1, r3
    5e72:	2900      	cmp	r1, #0
        in = 255 - in;
    5e74:	bfba      	itte	lt
    5e76:	43da      	mvnlt	r2, r3
    5e78:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5e7a:	461a      	movge	r2, r3
    5e7c:	0052      	lsls	r2, r2, #1
    5e7e:	b2d2      	uxtb	r2, r2
    5e80:	1c50      	adds	r0, r2, #1
    5e82:	fb00 f202 	mul.w	r2, r0, r2
    5e86:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5e88:	fb02 f000 	mul.w	r0, r2, r0
    5e8c:	1200      	asrs	r0, r0, #8
    5e8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5e92:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    5e96:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5e98:	05d0      	lsls	r0, r2, #23
    5e9a:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5e9e:	bf54      	ite	pl
    5ea0:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5ea2:	22ff      	movmi	r2, #255	; 0xff
    5ea4:	4290      	cmp	r0, r2
    5ea6:	d278      	bcs.n	5f9a <two_sin(LEDStruct&)+0x37a>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5ea8:	2900      	cmp	r1, #0
        in = 255 - in;
    5eaa:	bfbc      	itt	lt
    5eac:	43db      	mvnlt	r3, r3
    5eae:	b2db      	uxtblt	r3, r3
    5eb0:	005a      	lsls	r2, r3, #1
    5eb2:	b2d2      	uxtb	r2, r2
    5eb4:	1c53      	adds	r3, r2, #1
    5eb6:	fb03 f202 	mul.w	r2, r3, r2
    5eba:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5ebc:	fb02 f303 	mul.w	r3, r2, r3
    5ec0:	121b      	asrs	r3, r3, #8
    5ec2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5ec6:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5eca:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5ecc:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5ece:	bf54      	ite	pl
    5ed0:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5ed2:	23ff      	movmi	r3, #255	; 0xff
    5ed4:	1a1b      	subs	r3, r3, r0
    5ed6:	b2db      	uxtb	r3, r3
    5ed8:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5edc:	4631      	mov	r1, r6
    5ede:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5ee0:	f88d c004 	strb.w	ip, [sp, #4]
    5ee4:	f88d e006 	strb.w	lr, [sp, #6]
    5ee8:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5eec:	f004 fcd6 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    5ef0:	f894 234a 	ldrb.w	r2, [r4, #842]	; 0x34a
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5ef4:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    5ef8:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5efc:	a901      	add	r1, sp, #4
    5efe:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5f00:	f88d 3000 	strb.w	r3, [sp]
    5f04:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5f08:	f004 fcc8 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5f0c:	7833      	ldrb	r3, [r6, #0]
    5f0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5f12:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5f16:	7033      	strb	r3, [r6, #0]
    5f18:	7872      	ldrb	r2, [r6, #1]
    5f1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5f1e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5f22:	7072      	strb	r2, [r6, #1]
    5f24:	78b3      	ldrb	r3, [r6, #2]
    5f26:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5f2a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5f2e:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
    5f30:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    5f34:	3701      	adds	r7, #1
    5f36:	42bb      	cmp	r3, r7
    5f38:	f106 0603 	add.w	r6, r6, #3
    5f3c:	dd2f      	ble.n	5f9e <two_sin(LEDStruct&)+0x37e>
    5f3e:	f894 c343 	ldrb.w	ip, [r4, #835]	; 0x343
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    5f42:	f894 033f 	ldrb.w	r0, [r4, #831]	; 0x33f
    5f46:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    5f4a:	f894 833d 	ldrb.w	r8, [r4, #829]	; 0x33d
    5f4e:	fb10 f007 	smulbb	r0, r0, r7
    5f52:	b2c0      	uxtb	r0, r0
    5f54:	4401      	add	r1, r0
    5f56:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5f58:	b24b      	sxtb	r3, r1
    5f5a:	2b00      	cmp	r3, #0
        in = 255 - in;
    5f5c:	bfba      	itte	lt
    5f5e:	43ca      	mvnlt	r2, r1
    5f60:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5f62:	460a      	movge	r2, r1
    5f64:	0052      	lsls	r2, r2, #1
    5f66:	b2d2      	uxtb	r2, r2
    5f68:	f102 0e01 	add.w	lr, r2, #1
    5f6c:	fb0e f202 	mul.w	r2, lr, r2
    5f70:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5f72:	fb02 fe0e 	mul.w	lr, r2, lr
    5f76:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    5f7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5f7e:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    5f82:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5f84:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5f88:	bf0c      	ite	eq
    5f8a:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5f8c:	22ff      	movne	r2, #255	; 0xff
    5f8e:	4590      	cmp	r8, r2
    5f90:	f4ff af4b 	bcc.w	5e2a <two_sin(LEDStruct&)+0x20a>
    5f94:	f04f 0e00 	mov.w	lr, #0
    5f98:	e763      	b.n	5e62 <two_sin(LEDStruct&)+0x242>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5f9a:	2300      	movs	r3, #0
    5f9c:	e79c      	b.n	5ed8 <two_sin(LEDStruct&)+0x2b8>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
	if (!leds.use_full_range) { strip_sync(leds); }
    5f9e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5fa2:	b983      	cbnz	r3, 5fc6 <two_sin(LEDStruct&)+0x3a6>
    5fa4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5fa8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5faa:	781a      	ldrb	r2, [r3, #0]
    5fac:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5fb0:	785a      	ldrb	r2, [r3, #1]
    5fb2:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    5fb6:	789a      	ldrb	r2, [r3, #2]
    5fb8:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5fbc:	3303      	adds	r3, #3
    5fbe:	428b      	cmp	r3, r1
    5fc0:	f1a4 0403 	sub.w	r4, r4, #3
    5fc4:	d1f1      	bne.n	5faa <two_sin(LEDStruct&)+0x38a>
}
    5fc6:	b003      	add	sp, #12
    5fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    5fcc:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
    5fd0:	f894 3348 	ldrb.w	r3, [r4, #840]	; 0x348
    5fd4:	f894 033c 	ldrb.w	r0, [r4, #828]	; 0x33c
    5fd8:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    5fdc:	1a12      	subs	r2, r2, r0
    5fde:	1a5b      	subs	r3, r3, r1
    5fe0:	f884 2342 	strb.w	r2, [r4, #834]	; 0x342
    5fe4:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    5fe8:	e706      	b.n	5df8 <two_sin(LEDStruct&)+0x1d8>

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5fea:	2696      	movs	r6, #150	; 0x96
    5fec:	f8a4 6338 	strh.w	r6, [r4, #824]	; 0x338
    5ff0:	e6d3      	b.n	5d9a <two_sin(LEDStruct&)+0x17a>
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5ff2:	4620      	mov	r0, r4
    5ff4:	f7ff fdb8 	bl	5b68 <two_sin_update(LEDStruct&)>
    5ff8:	e6eb      	b.n	5dd2 <two_sin(LEDStruct&)+0x1b2>
    5ffa:	bf00      	nop
    5ffc:	1fff91d1 	.word	0x1fff91d1
    6000:	1fff8784 	.word	0x1fff8784

00006004 <noise_update(LEDStruct&)>:
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    6004:	4b19      	ldr	r3, [pc, #100]	; (606c <noise_update(LEDStruct&)+0x68>)
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    6006:	4a1a      	ldr	r2, [pc, #104]	; (6070 <noise_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    6008:	781b      	ldrb	r3, [r3, #0]
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    600a:	2100      	movs	r1, #0
    600c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    600e:	2b04      	cmp	r3, #4
    6010:	d808      	bhi.n	6024 <noise_update(LEDStruct&)+0x20>
    6012:	e8df f003 	tbb	[pc, r3]
    6016:	1e0f      	.short	0x1e0f
    6018:	2403      	.short	0x2403
    601a:	09          	.byte	0x09
    601b:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
    601c:	4b15      	ldr	r3, [pc, #84]	; (6074 <noise_update(LEDStruct&)+0x70>)
    601e:	881b      	ldrh	r3, [r3, #0]
    6020:	f8a0 375c 	strh.w	r3, [r0, #1884]	; 0x75c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6024:	f7fc b8c6 	b.w	21b4 <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
    6028:	4b12      	ldr	r3, [pc, #72]	; (6074 <noise_update(LEDStruct&)+0x70>)
    602a:	881b      	ldrh	r3, [r3, #0]
    602c:	f880 3761 	strb.w	r3, [r0, #1889]	; 0x761
		default:	break;
	}
	LEDDebug(leds);
    6030:	f7fc b8c0 	b.w	21b4 <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    6034:	4b0f      	ldr	r3, [pc, #60]	; (6074 <noise_update(LEDStruct&)+0x70>)
    6036:	881b      	ldrh	r3, [r3, #0]
    6038:	2b00      	cmp	r3, #0
    603a:	bf14      	ite	ne
    603c:	2301      	movne	r3, #1
    603e:	2300      	moveq	r3, #0
    6040:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    6044:	bf14      	ite	ne
    6046:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    6048:	234b      	moveq	r3, #75	; 0x4b
    604a:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    604e:	f7fc b8b1 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    6052:	4b08      	ldr	r3, [pc, #32]	; (6074 <noise_update(LEDStruct&)+0x70>)
    6054:	881b      	ldrh	r3, [r3, #0]
    6056:	f8a0 375a 	strh.w	r3, [r0, #1882]	; 0x75a
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    605a:	f7fc b8ab 	b.w	21b4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
    605e:	4b05      	ldr	r3, [pc, #20]	; (6074 <noise_update(LEDStruct&)+0x70>)
    6060:	881b      	ldrh	r3, [r3, #0]
    6062:	f8a0 375e 	strh.w	r3, [r0, #1886]	; 0x75e
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    6066:	f7fc b8a5 	b.w	21b4 <LEDDebug(LEDStruct&)>
    606a:	bf00      	nop
    606c:	1fff9a18 	.word	0x1fff9a18
    6070:	1fff91d1 	.word	0x1fff91d1
    6074:	1fff90d2 	.word	0x1fff90d2

00006078 <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    6078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    607c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    6080:	b085      	sub	sp, #20
    6082:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    6084:	2b00      	cmp	r3, #0
    6086:	d16a      	bne.n	615e <noise(LEDStruct&)+0xe6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6088:	4d78      	ldr	r5, [pc, #480]	; (626c <noise(LEDStruct&)+0x1f4>)
    608a:	882b      	ldrh	r3, [r5, #0]
    608c:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6090:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    6094:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6098:	3619      	adds	r6, #25
    609a:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    609c:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    60a0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    60a4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    60a8:	3219      	adds	r2, #25
    60aa:	b292      	uxth	r2, r2
    60ac:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    60b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    60b4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    60b8:	3319      	adds	r3, #25
    60ba:	b29b      	uxth	r3, r3
    60bc:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    60c0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    60c4:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    60c8:	f10e 0e19 	add.w	lr, lr, #25
    60cc:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    60d0:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    60d4:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    60d8:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    60dc:	3019      	adds	r0, #25
    60de:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    60e0:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60e4:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    60e8:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60ea:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    60ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60f2:	fb07 fe0e 	mul.w	lr, r7, lr
    60f6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    60fa:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60fe:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6102:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6106:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6108:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    610a:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    610c:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    6110:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6114:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6118:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    611c:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    611e:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    6120:	f04f 0e17 	mov.w	lr, #23
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6124:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    6128:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    612c:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    612e:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6132:	b289      	uxth	r1, r1
    6134:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6136:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6138:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    613a:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    613e:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6142:	2f00      	cmp	r7, #0
    6144:	f040 8089 	bne.w	625a <noise(LEDStruct&)+0x1e2>
	else				  	 { leds.strip_range = ONE_SIDE; }
    6148:	254b      	movs	r5, #75	; 0x4b
    614a:	f8a4 5338 	strh.w	r5, [r4, #824]	; 0x338

	leds.noise_scale	= s;
    614e:	f8a4 175a 	strh.w	r1, [r4, #1882]	; 0x75a
	leds.noise_yscale	= y;
    6152:	f8a4 375c 	strh.w	r3, [r4, #1884]	; 0x75c
	leds.noise_dist		= d;
    6156:	f8a4 075e 	strh.w	r0, [r4, #1886]	; 0x75e
	leds.noise_fade		= nf;
    615a:	f884 2761 	strb.w	r2, [r4, #1889]	; 0x761
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    615e:	4b44      	ldr	r3, [pc, #272]	; (6270 <noise(LEDStruct&)+0x1f8>)
    6160:	781b      	ldrb	r3, [r3, #0]
    6162:	2b00      	cmp	r3, #0
    6164:	d17d      	bne.n	6262 <noise(LEDStruct&)+0x1ea>

	for (int i = 0; i < leds.strip_range; i++) {
    6166:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    616a:	b37b      	cbz	r3, 61cc <noise(LEDStruct&)+0x154>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    616c:	f8df 910c 	ldr.w	r9, [pc, #268]	; 627c <noise(LEDStruct&)+0x204>
    6170:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    6174:	4625      	mov	r5, r4

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    6176:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    6178:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    617a:	f8b4 075a 	ldrh.w	r0, [r4, #1882]	; 0x75a
    617e:	f8b4 175e 	ldrh.w	r1, [r4, #1886]	; 0x75e
    6182:	fb10 f006 	smulbb	r0, r0, r6
    6186:	b280      	uxth	r0, r0
    6188:	4401      	add	r1, r0
    618a:	b289      	uxth	r1, r1
    618c:	f004 fd2e 	bl	abec <inoise8(unsigned short, unsigned short)>
    6190:	fba9 3200 	umull	r3, r2, r9, r0
    6194:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    6198:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    619c:	9700      	str	r7, [sp, #0]
    619e:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    61a0:	f884 2760 	strb.w	r2, [r4, #1888]	; 0x760
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    61a4:	4641      	mov	r1, r8
    61a6:	a803      	add	r0, sp, #12
    61a8:	f004 f97a 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    61ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    61b0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    61b4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    61b8:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    61ba:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    61bc:	70ab      	strb	r3, [r5, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    61be:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    61c2:	3601      	adds	r6, #1
    61c4:	42b3      	cmp	r3, r6
    61c6:	f105 0503 	add.w	r5, r5, #3
    61ca:	dcd6      	bgt.n	617a <noise(LEDStruct&)+0x102>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61cc:	4b29      	ldr	r3, [pc, #164]	; (6274 <noise(LEDStruct&)+0x1fc>)
    61ce:	681b      	ldr	r3, [r3, #0]
    61d0:	9303      	str	r3, [sp, #12]
	return ret;
    61d2:	9803      	ldr	r0, [sp, #12]
    61d4:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    61d8:	fb03 f000 	mul.w	r0, r3, r0
    61dc:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    61de:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    61e0:	0659      	lsls	r1, r3, #25
    61e2:	d535      	bpl.n	6250 <noise(LEDStruct&)+0x1d8>
        offset = (uint8_t)255 - offset;
    61e4:	43db      	mvns	r3, r3
    61e6:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    61e8:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    61ec:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    61ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    61f2:	110b      	asrs	r3, r1, #4
    61f4:	4920      	ldr	r1, [pc, #128]	; (6278 <noise(LEDStruct&)+0x200>)
    61f6:	005b      	lsls	r3, r3, #1
    61f8:	18cd      	adds	r5, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    61fa:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    61fc:	7869      	ldrb	r1, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    61fe:	fb11 f202 	smulbb	r2, r1, r2
    6202:	eb03 1322 	add.w	r3, r3, r2, asr #4
    6206:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6208:	0602      	lsls	r2, r0, #24
    620a:	bf48      	it	mi
    620c:	425b      	negmi	r3, r3
    620e:	b25b      	sxtb	r3, r3

    y += 128;
    6210:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    6212:	f8b4 275e 	ldrh.w	r2, [r4, #1886]	; 0x75e

	if (!leds.use_full_range) { strip_sync(leds); }
    6216:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    621a:	f3c3 1381 	ubfx	r3, r3, #6, #2
    621e:	3301      	adds	r3, #1
    6220:	4413      	add	r3, r2
    6222:	f8a4 375e 	strh.w	r3, [r4, #1886]	; 0x75e

	if (!leds.use_full_range) { strip_sync(leds); }
    6226:	b981      	cbnz	r1, 624a <noise(LEDStruct&)+0x1d2>
    6228:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    622c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    622e:	781a      	ldrb	r2, [r3, #0]
    6230:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    6234:	785a      	ldrb	r2, [r3, #1]
    6236:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    623a:	789a      	ldrb	r2, [r3, #2]
    623c:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6240:	3303      	adds	r3, #3
    6242:	4299      	cmp	r1, r3
    6244:	f1a4 0403 	sub.w	r4, r4, #3
    6248:	d1f1      	bne.n	622e <noise(LEDStruct&)+0x1b6>
}
    624a:	b005      	add	sp, #20
    624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6250:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6254:	f003 020f 	and.w	r2, r3, #15
    6258:	e7cb      	b.n	61f2 <noise(LEDStruct&)+0x17a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    625a:	2596      	movs	r5, #150	; 0x96
    625c:	f8a4 5338 	strh.w	r5, [r4, #824]	; 0x338
    6260:	e775      	b.n	614e <noise(LEDStruct&)+0xd6>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6262:	4620      	mov	r0, r4
    6264:	f7ff fece 	bl	6004 <noise_update(LEDStruct&)>
    6268:	e77d      	b.n	6166 <noise(LEDStruct&)+0xee>
    626a:	bf00      	nop
    626c:	1fff8784 	.word	0x1fff8784
    6270:	1fff91d1 	.word	0x1fff91d1
    6274:	1ffface8 	.word	0x1ffface8
    6278:	0000e70c 	.word	0x0000e70c
    627c:	80808081 	.word	0x80808081

00006280 <noise_mover(LEDStruct&)>:

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    6280:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    6282:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    6286:	b085      	sub	sp, #20
    6288:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    628a:	2b00      	cmp	r3, #0
    628c:	d16a      	bne.n	6364 <noise_mover(LEDStruct&)+0xe4>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    628e:	4d7e      	ldr	r5, [pc, #504]	; (6488 <noise_mover(LEDStruct&)+0x208>)
    6290:	882b      	ldrh	r3, [r5, #0]
    6292:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6296:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    629a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    629e:	3619      	adds	r6, #25
    62a0:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    62a2:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    62a6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    62aa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    62ae:	3219      	adds	r2, #25
    62b0:	b292      	uxth	r2, r2
    62b2:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    62b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    62ba:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    62be:	3319      	adds	r3, #25
    62c0:	b29b      	uxth	r3, r3
    62c2:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    62c6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    62ca:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    62ce:	f10e 0e19 	add.w	lr, lr, #25
    62d2:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    62d6:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    62da:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    62de:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    62e2:	3019      	adds	r0, #25
    62e4:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    62e6:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    62ea:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    62ee:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    62f0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    62f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    62f8:	fb07 fe0e 	mul.w	lr, r7, lr
    62fc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6300:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6304:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6308:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    630c:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    630e:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6310:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6312:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    6316:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    631a:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    631e:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    6322:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6324:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    6326:	f04f 0e17 	mov.w	lr, #23
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    632a:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    632e:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    6332:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    6334:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6338:	b289      	uxth	r1, r1
    633a:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    633c:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    633e:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6340:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6344:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6348:	2f00      	cmp	r7, #0
    634a:	f040 8094 	bne.w	6476 <noise_mover(LEDStruct&)+0x1f6>
	else				  	 { leds.strip_range = ONE_SIDE; }
    634e:	254b      	movs	r5, #75	; 0x4b
    6350:	f8a4 5338 	strh.w	r5, [r4, #824]	; 0x338

	leds.noise_scale	= s;
    6354:	f8a4 175a 	strh.w	r1, [r4, #1882]	; 0x75a
	leds.noise_yscale	= y;
    6358:	f8a4 375c 	strh.w	r3, [r4, #1884]	; 0x75c
	leds.noise_dist		= d;
    635c:	f8a4 075e 	strh.w	r0, [r4, #1886]	; 0x75e
	leds.noise_fade		= nf;
    6360:	f884 2761 	strb.w	r2, [r4, #1889]	; 0x761
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6364:	4b49      	ldr	r3, [pc, #292]	; (648c <noise_mover(LEDStruct&)+0x20c>)
    6366:	781b      	ldrb	r3, [r3, #0]
    6368:	2b00      	cmp	r3, #0
    636a:	f040 8088 	bne.w	647e <noise_mover(LEDStruct&)+0x1fe>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
    636e:	f894 2761 	ldrb.w	r2, [r4, #1889]	; 0x761
    6372:	2196      	movs	r1, #150	; 0x96
    6374:	4620      	mov	r0, r4
    6376:	f004 f833 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
    637a:	f8b4 375c 	ldrh.w	r3, [r4, #1884]	; 0x75c
    637e:	f8b4 175e 	ldrh.w	r1, [r4, #1886]	; 0x75e
    6382:	f8b4 075a 	ldrh.w	r0, [r4, #1882]	; 0x75a
    6386:	4419      	add	r1, r3
    6388:	b289      	uxth	r1, r1
    638a:	f004 fc2f 	bl	abec <inoise8(unsigned short, unsigned short)>
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    638e:	4a40      	ldr	r2, [pc, #256]	; (6490 <noise_mover(LEDStruct&)+0x210>)
    6390:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    6394:	fba2 1500 	umull	r1, r5, r2, r0
    6398:	eb00 10d5 	add.w	r0, r0, r5, lsr #7
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    639c:	2bfe      	cmp	r3, #254	; 0xfe
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    639e:	f000 05ff 	and.w	r5, r0, #255	; 0xff
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    63a2:	dc5f      	bgt.n	6464 <noise_mover(LEDStruct&)+0x1e4>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    63a4:	fb03 5305 	mla	r3, r3, r5, r5
    63a8:	121d      	asrs	r5, r3, #8
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   
    63aa:	b2ed      	uxtb	r5, r5
    63ac:	2301      	movs	r3, #1
    63ae:	462a      	mov	r2, r5
    63b0:	9300      	str	r3, [sp, #0]
    63b2:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    63b6:	23ff      	movs	r3, #255	; 0xff
    63b8:	a803      	add	r0, sp, #12
    63ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    63be:	f004 f86f 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    63c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    63c6:	5563      	strb	r3, [r4, r5]
    63c8:	4425      	add	r5, r4
        g = rhs.g;
    63ca:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    63ce:	f89d 200e 	ldrb.w	r2, [sp, #14]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    63d2:	4b30      	ldr	r3, [pc, #192]	; (6494 <noise_mover(LEDStruct&)+0x214>)

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    63d4:	7069      	strb	r1, [r5, #1]
        b = rhs.b;
    63d6:	70aa      	strb	r2, [r5, #2]
    63d8:	681b      	ldr	r3, [r3, #0]
    63da:	9303      	str	r3, [sp, #12]
	return ret;
    63dc:	9903      	ldr	r1, [sp, #12]
    63de:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    63e2:	fb03 f101 	mul.w	r1, r3, r1
    63e6:	0e09      	lsrs	r1, r1, #24
    63e8:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    63ea:	0658      	lsls	r0, r3, #25
    63ec:	d535      	bpl.n	645a <noise_mover(LEDStruct&)+0x1da>
        offset = (uint8_t)255 - offset;
    63ee:	43db      	mvns	r3, r3
    63f0:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    63f2:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    63f6:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    63f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    63fc:	4826      	ldr	r0, [pc, #152]	; (6498 <noise_mover(LEDStruct&)+0x218>)
    63fe:	1112      	asrs	r2, r2, #4
    6400:	0052      	lsls	r2, r2, #1
    6402:	1885      	adds	r5, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6404:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6406:	7868      	ldrb	r0, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6408:	fb10 f303 	smulbb	r3, r0, r3
    640c:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6410:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6412:	060a      	lsls	r2, r1, #24
    6414:	bf48      	it	mi
    6416:	425b      	negmi	r3, r3
    6418:	b25b      	sxtb	r3, r3

    y += 128;
    641a:	3b80      	subs	r3, #128	; 0x80

	leds.noise_dist += beatsin8(10, 1, 4);
    641c:	f8b4 275e 	ldrh.w	r2, [r4, #1886]	; 0x75e

	if (!leds.use_full_range) { strip_sync(leds); }
    6420:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   

	leds.noise_dist += beatsin8(10, 1, 4);
    6424:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6428:	3301      	adds	r3, #1
    642a:	4413      	add	r3, r2
    642c:	f8a4 375e 	strh.w	r3, [r4, #1886]	; 0x75e

	if (!leds.use_full_range) { strip_sync(leds); }
    6430:	b989      	cbnz	r1, 6456 <noise_mover(LEDStruct&)+0x1d6>
    6432:	4620      	mov	r0, r4
    6434:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6438:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    643a:	781a      	ldrb	r2, [r3, #0]
    643c:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    6440:	785a      	ldrb	r2, [r3, #1]
    6442:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    6446:	789a      	ldrb	r2, [r3, #2]
    6448:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    644c:	3303      	adds	r3, #3
    644e:	4299      	cmp	r1, r3
    6450:	f1a0 0003 	sub.w	r0, r0, #3
    6454:	d1f1      	bne.n	643a <noise_mover(LEDStruct&)+0x1ba>
}
    6456:	b005      	add	sp, #20
    6458:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    645a:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    645e:	f003 030f 	and.w	r3, r3, #15
    6462:	e7cb      	b.n	63fc <noise_mover(LEDStruct&)+0x17c>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6464:	fb03 f305 	mul.w	r3, r3, r5
    6468:	fb82 2503 	smull	r2, r5, r2, r3
    646c:	441d      	add	r5, r3
    646e:	17db      	asrs	r3, r3, #31
    6470:	ebc3 15e5 	rsb	r5, r3, r5, asr #7
    6474:	e799      	b.n	63aa <noise_mover(LEDStruct&)+0x12a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6476:	2596      	movs	r5, #150	; 0x96
    6478:	f8a4 5338 	strh.w	r5, [r4, #824]	; 0x338
    647c:	e76a      	b.n	6354 <noise_mover(LEDStruct&)+0xd4>
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    647e:	4620      	mov	r0, r4
    6480:	f7ff fdc0 	bl	6004 <noise_update(LEDStruct&)>
    6484:	e773      	b.n	636e <noise_mover(LEDStruct&)+0xee>
    6486:	bf00      	nop
    6488:	1fff8784 	.word	0x1fff8784
    648c:	1fff91d1 	.word	0x1fff91d1
    6490:	80808081 	.word	0x80808081
    6494:	1ffface8 	.word	0x1ffface8
    6498:	0000e70c 	.word	0x0000e70c

0000649c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64a0:	4607      	mov	r7, r0
    64a2:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    64a4:	f8b0 0338 	ldrh.w	r0, [r0, #824]	; 0x338
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    64a8:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    64ac:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    64b0:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    64b2:	2800      	cmp	r0, #0
    64b4:	d06e      	beq.n	6594 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    64b6:	085b      	lsrs	r3, r3, #1
    64b8:	f103 0a14 	add.w	sl, r3, #20
    64bc:	f10a 0301 	add.w	r3, sl, #1
    64c0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 659c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    64c4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 65a0 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    64c8:	9303      	str	r3, [sp, #12]
    64ca:	4614      	mov	r4, r2
    64cc:	2600      	movs	r6, #0
        waveangle += 250;
    64ce:	35fa      	adds	r5, #250	; 0xfa
    64d0:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    64d2:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    64d4:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    64d8:	d503      	bpl.n	64e2 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    64da:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    64de:	3307      	adds	r3, #7
    64e0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    64e2:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    64e4:	f3c3 0246 	ubfx	r2, r3, #1, #7
    64e8:	f819 0001 	ldrb.w	r0, [r9, r1]
    64ec:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    64f0:	fb00 3302 	mla	r3, r0, r2, r3
    64f4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    64f6:	0428      	lsls	r0, r5, #16
    64f8:	bf48      	it	mi
    64fa:	425b      	negmi	r3, r3
    64fc:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    64fe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6502:	9a03      	ldr	r2, [sp, #12]
    6504:	b29b      	uxth	r3, r3
    6506:	fb02 f303 	mul.w	r3, r2, r3
    650a:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    650e:	441c      	add	r4, r3
    6510:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6512:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6514:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6518:	d503      	bpl.n	6522 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    651a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    651e:	3307      	adds	r3, #7
    6520:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6522:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6524:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6528:	f819 0001 	ldrb.w	r0, [r9, r1]
    652c:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    6530:	9902      	ldr	r1, [sp, #8]
    6532:	fb00 3302 	mla	r3, r0, r2, r3
    6536:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6538:	0422      	lsls	r2, r4, #16
    653a:	bf48      	it	mi
    653c:	425b      	negmi	r3, r3
    653e:	b21b      	sxth	r3, r3
    6540:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6544:	b29b      	uxth	r3, r3
    6546:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    654a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    654e:	2301      	movs	r3, #1
    6550:	9300      	str	r3, [sp, #0]
    6552:	a805      	add	r0, sp, #20
    6554:	465b      	mov	r3, fp
    6556:	f3c2 4207 	ubfx	r2, r2, #16, #8
    655a:	f003 ffa1 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    655e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6562:	18b9      	adds	r1, r7, r2
    6564:	5cbb      	ldrb	r3, [r7, r2]
    6566:	f89d 0014 	ldrb.w	r0, [sp, #20]
    656a:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    656e:	54bb      	strb	r3, [r7, r2]
    6570:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6574:	784a      	ldrb	r2, [r1, #1]
    6576:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    657a:	704a      	strb	r2, [r1, #1]
    657c:	788b      	ldrb	r3, [r1, #2]
    657e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    6582:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    6586:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6588:	3601      	adds	r6, #1
    658a:	f8b7 3338 	ldrh.w	r3, [r7, #824]	; 0x338
    658e:	b2b6      	uxth	r6, r6
    6590:	42b3      	cmp	r3, r6
    6592:	d89c      	bhi.n	64ce <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    6594:	b007      	add	sp, #28
    6596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    659a:	bf00      	nop
    659c:	0000ed30 	.word	0x0000ed30
    65a0:	0000e56c 	.word	0x0000e56c

000065a4 <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    65a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65a8:	4c58      	ldr	r4, [pc, #352]	; (670c <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    65aa:	b083      	sub	sp, #12
    65ac:	6823      	ldr	r3, [r4, #0]
    65ae:	9301      	str	r3, [sp, #4]
	return ret;
    65b0:	9901      	ldr	r1, [sp, #4]
    65b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    65b6:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    65ba:	f3c1 3147 	ubfx	r1, r1, #13, #8
    65be:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    65c0:	065e      	lsls	r6, r3, #25
    65c2:	f140 809e 	bpl.w	6702 <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    65c6:	43db      	mvns	r3, r3
    65c8:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    65ca:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    65ce:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    65d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    65d4:	f8df a138 	ldr.w	sl, [pc, #312]	; 6710 <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    65d8:	1112      	asrs	r2, r2, #4
    65da:	0052      	lsls	r2, r2, #1
    65dc:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    65e0:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    65e4:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    65e6:	fb15 f303 	smulbb	r3, r5, r3
    65ea:	eb02 1323 	add.w	r3, r2, r3, asr #4
    65ee:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    65f0:	060d      	lsls	r5, r1, #24
    65f2:	bf48      	it	mi
    65f4:	425b      	negmi	r3, r3
    65f6:	b25b      	sxtb	r3, r3

    y += 128;
    65f8:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    65fa:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65fc:	6822      	ldr	r2, [r4, #0]
    65fe:	9200      	str	r2, [sp, #0]
    6600:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    6604:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    6608:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    660a:	f8b0 3338 	ldrh.w	r3, [r0, #824]	; 0x338
    660e:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6612:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    6616:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    661a:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    661e:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6622:	0e24      	lsrs	r4, r4, #24
    6624:	2b00      	cmp	r3, #0
    6626:	d069      	beq.n	66fc <pacifica_add_whitecaps(LEDStruct&)+0x158>
    6628:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    662c:	44a3      	add	fp, r4
    662e:	43e7      	mvns	r7, r4
    6630:	fa5f fb8b 	uxtb.w	fp, fp
    6634:	f100 0801 	add.w	r8, r0, #1
    6638:	b2ff      	uxtb	r7, r7
    663a:	e058      	b.n	66ee <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    663c:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    6640:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6642:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6646:	1112      	asrs	r2, r2, #4
    6648:	0052      	lsls	r2, r2, #1
    664a:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    664e:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6652:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    6654:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    6658:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    665a:	fb11 f303 	smulbb	r3, r1, r3
    665e:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6662:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6664:	0622      	lsls	r2, r4, #24
    6666:	7842      	ldrb	r2, [r0, #1]
    6668:	bf48      	it	mi
    666a:	425b      	negmi	r3, r3
    666c:	fa0f fc8e 	sxth.w	ip, lr
    6670:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    6674:	b25b      	sxtb	r3, r3
    6676:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    667a:	3b80      	subs	r3, #128	; 0x80
    667c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    6680:	440a      	add	r2, r1
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    6682:	b2db      	uxtb	r3, r3
    6684:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    6688:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    668c:	1212      	asrs	r2, r2, #8
    668e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6692:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6696:	4465      	add	r5, ip
    6698:	eb02 2525 	add.w	r5, r2, r5, asr #8
    669c:	440e      	add	r6, r1
    669e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    66a2:	eb09 2323 	add.w	r3, r9, r3, asr #8
    66a6:	eb05 2626 	add.w	r6, r5, r6, asr #8
    66aa:	b2db      	uxtb	r3, r3
    66ac:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    66ae:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    66b0:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    66b2:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    66b4:	42b3      	cmp	r3, r6
    66b6:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    66b8:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    66ba:	d210      	bcs.n	66de <pacifica_add_whitecaps(LEDStruct&)+0x13a>
    66bc:	fa81 f152 	uqadd8	r1, r1, r2
    66c0:	460d      	mov	r5, r1
    66c2:	fa85 f551 	uqadd8	r5, r5, r1
    66c6:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    66ca:	f808 ec01 	strb.w	lr, [r8, #-1]
    66ce:	7842      	ldrb	r2, [r0, #1]
    66d0:	fa82 f251 	uqadd8	r2, r2, r1
    66d4:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    66d6:	7042      	strb	r2, [r0, #1]
    66d8:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    66dc:	7083      	strb	r3, [r0, #2]
    66de:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    66e0:	455c      	cmp	r4, fp
    66e2:	b2ff      	uxtb	r7, r7
    66e4:	f100 0003 	add.w	r0, r0, #3
    66e8:	f108 0803 	add.w	r8, r8, #3
    66ec:	d006      	beq.n	66fc <pacifica_add_whitecaps(LEDStruct&)+0x158>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    66ee:	0661      	lsls	r1, r4, #25
    66f0:	d4a4      	bmi.n	663c <pacifica_add_whitecaps(LEDStruct&)+0x98>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    66f2:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    66f6:	f004 030f 	and.w	r3, r4, #15
    66fa:	e7a4      	b.n	6646 <pacifica_add_whitecaps(LEDStruct&)+0xa2>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    66fc:	b003      	add	sp, #12
    66fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6702:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6706:	f003 030f 	and.w	r3, r3, #15
    670a:	e763      	b.n	65d4 <pacifica_add_whitecaps(LEDStruct&)+0x30>
    670c:	1ffface8 	.word	0x1ffface8
    6710:	0000e70c 	.word	0x0000e70c

00006714 <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6714:	f8b0 3338 	ldrh.w	r3, [r0, #824]	; 0x338
    6718:	b383      	cbz	r3, 677c <pacifica_deepen_colors(LEDStruct&)+0x68>
    }
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    671a:	b5f0      	push	{r4, r5, r6, r7, lr}
    671c:	1e5c      	subs	r4, r3, #1
    671e:	b2a4      	uxth	r4, r4
    6720:	3401      	adds	r4, #1
    6722:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6726:	4602      	mov	r2, r0
    6728:	4404      	add	r4, r0
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    672a:	2702      	movs	r7, #2
    672c:	3002      	adds	r0, #2
        if( rhs.g > g) g = rhs.g;
    672e:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    6730:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    6732:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    6734:	7891      	ldrb	r1, [r2, #2]
    6736:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    673a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    673e:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    6742:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    6746:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    674a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    674e:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    6750:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    6752:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    6754:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    6758:	2901      	cmp	r1, #1
    675a:	bf9c      	itt	ls
    675c:	f800 7c02 	strbls.w	r7, [r0, #-2]
    6760:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    6762:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    6764:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    6766:	bf98      	it	ls
    6768:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    676a:	2b06      	cmp	r3, #6
    676c:	bf98      	it	ls
    676e:	7095      	strbls	r5, [r2, #2]
    6770:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6772:	42a2      	cmp	r2, r4
    6774:	f100 0003 	add.w	r0, r0, #3
    6778:	d1db      	bne.n	6732 <pacifica_deepen_colors(LEDStruct&)+0x1e>
    677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    677c:	4770      	bx	lr
    677e:	bf00      	nop

00006780 <pacifica_update(LEDStruct&)>:
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    switch (update_var) {
    6780:	4b0a      	ldr	r3, [pc, #40]	; (67ac <pacifica_update(LEDStruct&)+0x2c>)
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    6782:	4a0b      	ldr	r2, [pc, #44]	; (67b0 <pacifica_update(LEDStruct&)+0x30>)
    switch (update_var) {
    6784:	781b      	ldrb	r3, [r3, #0]
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    6786:	2100      	movs	r1, #0
    6788:	7011      	strb	r1, [r2, #0]
    switch (update_var) {
    678a:	b963      	cbnz	r3, 67a6 <pacifica_update(LEDStruct&)+0x26>
    case 0:															//a
        leds.use_full_range = (bool)update_arg;
    678c:	4b09      	ldr	r3, [pc, #36]	; (67b4 <pacifica_update(LEDStruct&)+0x34>)
    678e:	881b      	ldrh	r3, [r3, #0]
    6790:	428b      	cmp	r3, r1
    6792:	bf14      	ite	ne
    6794:	2301      	movne	r3, #1
    6796:	460b      	moveq	r3, r1
    6798:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
        if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    679c:	bf14      	ite	ne
    679e:	2396      	movne	r3, #150	; 0x96
        else                     { leds.strip_range = ONE_SIDE; }
    67a0:	234b      	moveq	r3, #75	; 0x4b
    67a2:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
        break;
    default:	break;
    }
    LEDDebug(leds);
    67a6:	f7fb bd05 	b.w	21b4 <LEDDebug(LEDStruct&)>
    67aa:	bf00      	nop
    67ac:	1fff9a18 	.word	0x1fff9a18
    67b0:	1fff91d1 	.word	0x1fff91d1
    67b4:	1fff90d2 	.word	0x1fff90d2

000067b8 <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    67b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    67bc:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    67c0:	b08b      	sub	sp, #44	; 0x2c
    67c2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    67c4:	bb0b      	cbnz	r3, 680a <pride(LEDStruct&)+0x52>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    67c6:	49b4      	ldr	r1, [pc, #720]	; (6a98 <pride(LEDStruct&)+0x2e0>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PRIDE;
	leds.use_palette		= 0;
    67c8:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    67cc:	880b      	ldrh	r3, [r1, #0]
    67ce:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    67d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    67d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    67da:	3319      	adds	r3, #25
    67dc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    67de:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    67e2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    67e6:	2601      	movs	r6, #1
	leds.mode_type			= PRIDE;
    67e8:	2511      	movs	r5, #17
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    67ea:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    67ec:	800b      	strh	r3, [r1, #0]

	leds.use_full_range		= ufr;
    67ee:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    67f2:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
	leds.mode_type			= PRIDE;
    67f6:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    67fa:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    67fe:	2a00      	cmp	r2, #0
    6800:	f000 81d3 	beq.w	6baa <pride(LEDStruct&)+0x3f2>
    6804:	2396      	movs	r3, #150	; 0x96
    6806:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    680a:	4ba4      	ldr	r3, [pc, #656]	; (6a9c <pride(LEDStruct&)+0x2e4>)
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	2b00      	cmp	r3, #0
    6810:	f040 81d3 	bne.w	6bba <pride(LEDStruct&)+0x402>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6814:	49a2      	ldr	r1, [pc, #648]	; (6aa0 <pride(LEDStruct&)+0x2e8>)
    6816:	680b      	ldr	r3, [r1, #0]
    6818:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    681a:	9809      	ldr	r0, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    681c:	f645 7328 	movw	r3, #24360	; 0x5f28
    6820:	fb03 f000 	mul.w	r0, r3, r0
    6824:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6826:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6828:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    682c:	d503      	bpl.n	6836 <pride(LEDStruct&)+0x7e>
    682e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6832:	3307      	adds	r3, #7
    6834:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6836:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    6838:	4d9a      	ldr	r5, [pc, #616]	; (6aa4 <pride(LEDStruct&)+0x2ec>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    683a:	4e9b      	ldr	r6, [pc, #620]	; (6aa8 <pride(LEDStruct&)+0x2f0>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    683c:	f815 e002 	ldrb.w	lr, [r5, r2]
    6840:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
    6844:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6848:	fb0e 7302 	mla	r3, lr, r2, r7
    684c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    684e:	0407      	lsls	r7, r0, #16
    6850:	bf48      	it	mi
    6852:	425b      	negmi	r3, r3
    6854:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6856:	680a      	ldr	r2, [r1, #0]
    6858:	9208      	str	r2, [sp, #32]

	leds.sat8 = beatsin88(87, 220, 250);
    685a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    685e:	b29b      	uxth	r3, r3
    6860:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
	return ret;
    6864:	9f08      	ldr	r7, [sp, #32]
    6866:	4b91      	ldr	r3, [pc, #580]	; (6aac <pride(LEDStruct&)+0x2f4>)
    6868:	0c12      	lsrs	r2, r2, #16
    686a:	fb03 f707 	mul.w	r7, r3, r7
    686e:	0c3f      	lsrs	r7, r7, #16
    6870:	32dc      	adds	r2, #220	; 0xdc
    6872:	b2d2      	uxtb	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6874:	0478      	lsls	r0, r7, #17
    6876:	f884 2321 	strb.w	r2, [r4, #801]	; 0x321
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    687a:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    687e:	d503      	bpl.n	6888 <pride(LEDStruct&)+0xd0>
    6880:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6884:	3307      	adds	r3, #7
    6886:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6888:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    688c:	f3c3 0046 	ubfx	r0, r3, #1, #7
    6890:	f815 c00e 	ldrb.w	ip, [r5, lr]
    6894:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    6898:	fb0c 3300 	mla	r3, ip, r0, r3
    689c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    689e:	0438      	lsls	r0, r7, #16
    68a0:	bf48      	it	mi
    68a2:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68a4:	6808      	ldr	r0, [r1, #0]
    68a6:	9007      	str	r0, [sp, #28]
    68a8:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    68aa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    68ae:	b29b      	uxth	r3, r3
	return ret;
    68b0:	9f07      	ldr	r7, [sp, #28]
    68b2:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    68b6:	f64d 6308 	movw	r3, #56840	; 0xde08
    68ba:	fb03 fe07 	mul.w	lr, r3, r7
    68be:	0c00      	lsrs	r0, r0, #16
    68c0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    68c4:	3060      	adds	r0, #96	; 0x60
    68c6:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    68c8:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    68cc:	f884 031e 	strb.w	r0, [r4, #798]	; 0x31e
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    68d0:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    68d4:	d003      	beq.n	68de <pride(LEDStruct&)+0x126>
    68d6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    68da:	3307      	adds	r3, #7
    68dc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    68de:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    68e2:	f3c3 0746 	ubfx	r7, r3, #1, #7
    68e6:	f815 800c 	ldrb.w	r8, [r5, ip]
    68ea:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    68ee:	fb08 3307 	mla	r3, r8, r7, r3

    if( theta & 0x8000 ) y = -y;
    68f2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    68f6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    68f8:	bf18      	it	ne
    68fa:	425b      	negne	r3, r3
    68fc:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68fe:	680f      	ldr	r7, [r1, #0]
    6900:	9706      	str	r7, [sp, #24]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6902:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6906:	b29b      	uxth	r3, r3
    6908:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
	return ret;
    690c:	9f06      	ldr	r7, [sp, #24]
    690e:	eb03 2e0e 	add.w	lr, r3, lr, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6912:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    6916:	fb03 fc07 	mul.w	ip, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    691a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    691e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6922:	f50e 5ec8 	add.w	lr, lr, #6400	; 0x1900
    6926:	fa1f f78e 	uxth.w	r7, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    692a:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    692e:	f8a4 7324 	strh.w	r7, [r4, #804]	; 0x324
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6932:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6936:	d003      	beq.n	6940 <pride(LEDStruct&)+0x188>
    6938:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    693c:	3307      	adds	r3, #7
    693e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6940:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6944:	f3c3 0e46 	ubfx	lr, r3, #1, #7
    6948:	f815 9008 	ldrb.w	r9, [r5, r8]
    694c:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    6950:	fb09 330e 	mla	r3, r9, lr, r3
    6954:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6956:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    695a:	bf18      	it	ne
    695c:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    695e:	f8d1 e000 	ldr.w	lr, [r1]
    6962:	f8cd e014 	str.w	lr, [sp, #20]
    6966:	b21b      	sxth	r3, r3
    6968:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    696c:	b29b      	uxth	r3, r3
    696e:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    6972:	f8dd 8014 	ldr.w	r8, [sp, #20]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    6976:	f8b4 931c 	ldrh.w	r9, [r4, #796]	; 0x31c
    697a:	f8a4 9326 	strh.w	r9, [r4, #806]	; 0x326
    697e:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6982:	f647 3398 	movw	r3, #31640	; 0x7b98
    6986:	fb03 f808 	mul.w	r8, r3, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    698a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    698e:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6992:	f10e 0e17 	add.w	lr, lr, #23
    6996:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    699a:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    699e:	f884 e31f 	strb.w	lr, [r4, #799]	; 0x31f
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    69a2:	f3c8 03ca 	ubfx	r3, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    69a6:	d003      	beq.n	69b0 <pride(LEDStruct&)+0x1f8>
    69a8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    69ac:	3307      	adds	r3, #7
    69ae:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    69b0:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    69b4:	f3c3 0c46 	ubfx	ip, r3, #1, #7
    69b8:	f815 b00a 	ldrb.w	fp, [r5, sl]
    69bc:	f836 301a 	ldrh.w	r3, [r6, sl, lsl #1]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    69c0:	f8b4 a31a 	ldrh.w	sl, [r4, #794]	; 0x31a
    69c4:	fb0b 330c 	mla	r3, fp, ip, r3
    69c8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    69ca:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    69ce:	bf18      	it	ne
    69d0:	425b      	negne	r3, r3
    69d2:	fa0f fc83 	sxth.w	ip, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    69d6:	680b      	ldr	r3, [r1, #0]
    69d8:	9303      	str	r3, [sp, #12]
	return ret;
    69da:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    69dc:	6809      	ldr	r1, [r1, #0]
    69de:	9104      	str	r1, [sp, #16]
    69e0:	f5ac 4100 	sub.w	r1, ip, #32768	; 0x8000
    69e4:	b289      	uxth	r1, r1
    69e6:	f640 3cb8 	movw	ip, #3000	; 0xbb8
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    69ea:	fa1f f883 	uxth.w	r8, r3
	return ret;
    69ee:	f8dd b010 	ldr.w	fp, [sp, #16]
    69f2:	f8a4 832a 	strh.w	r8, [r4, #810]	; 0x32a
    69f6:	fb0c f301 	mul.w	r3, ip, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    69fa:	492d      	ldr	r1, [pc, #180]	; (6ab0 <pride(LEDStruct&)+0x2f8>)
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    69fc:	f8b4 c318 	ldrh.w	ip, [r4, #792]	; 0x318
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    6a00:	f8a4 831a 	strh.w	r8, [r4, #794]	; 0x31a

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6a04:	ebca 0a08 	rsb	sl, sl, r8
    6a08:	fa1f fa8a 	uxth.w	sl, sl
    6a0c:	fb01 fb0b 	mul.w	fp, r1, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6a10:	0c1b      	lsrs	r3, r3, #16
    6a12:	3301      	adds	r3, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6a14:	fb1a cc0e 	smlabb	ip, sl, lr, ip
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6a18:	ea4f 4e1b 	mov.w	lr, fp, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6a1c:	b299      	uxth	r1, r3
    6a1e:	fa1f fc8c 	uxth.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6a22:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    6a26:	f8a4 1328 	strh.w	r1, [r4, #808]	; 0x328

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6a2a:	f8a4 a32c 	strh.w	sl, [r4, #812]	; 0x32c
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6a2e:	f8a4 c318 	strh.w	ip, [r4, #792]	; 0x318
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6a32:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6a36:	d003      	beq.n	6a40 <pride(LEDStruct&)+0x288>
    6a38:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6a3c:	3307      	adds	r3, #7
    6a3e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6a40:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6a44:	f3c3 0346 	ubfx	r3, r3, #1, #7
    6a48:	f815 b008 	ldrb.w	fp, [r5, r8]
    6a4c:	f836 8018 	ldrh.w	r8, [r6, r8, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    6a50:	f8a4 c32e 	strh.w	ip, [r4, #814]	; 0x32e
    6a54:	fb0b 8303 	mla	r3, fp, r3, r8

    if( theta & 0x8000 ) y = -y;
    6a58:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6a5c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6a5e:	bf16      	itet	ne
    6a60:	f1c3 0800 	rsbne	r8, r3, #0
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6a64:	fa0f f883 	sxtheq.w	r8, r3

    if( theta & 0x8000 ) y = -y;
    6a68:	fa0f f888 	sxthne.w	r8, r8

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6a6c:	f5a8 4800 	sub.w	r8, r8, #32768	; 0x8000
    6a70:	fa1f f888 	uxth.w	r8, r8
    6a74:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    6a78:	0c1b      	lsrs	r3, r3, #16
    6a7a:	3305      	adds	r3, #5
    6a7c:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6a7e:	f8b4 e338 	ldrh.w	lr, [r4, #824]	; 0x338

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6a82:	fb0a 9303 	mla	r3, sl, r3, r9
    6a86:	f8a4 331c 	strh.w	r3, [r4, #796]	; 0x31c
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6a8a:	f1be 0f00 	cmp.w	lr, #0
    6a8e:	d074      	beq.n	6b7a <pride(LEDStruct&)+0x3c2>
    6a90:	46be      	mov	lr, r7
    6a92:	460b      	mov	r3, r1
    6a94:	2700      	movs	r7, #0
    6a96:	e019      	b.n	6acc <pride(LEDStruct&)+0x314>
    6a98:	1fff8784 	.word	0x1fff8784
    6a9c:	1fff91d1 	.word	0x1fff91d1
    6aa0:	1ffface8 	.word	0x1ffface8
    6aa4:	0000ed30 	.word	0x0000ed30
    6aa8:	0000e56c 	.word	0x0000e56c
    6aac:	000174f8 	.word	0x000174f8
    6ab0:	0001b580 	.word	0x0001b580
    6ab4:	f8b4 9326 	ldrh.w	r9, [r4, #806]	; 0x326
    6ab8:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    6abc:	f8b4 c32e 	ldrh.w	ip, [r4, #814]	; 0x32e
    6ac0:	f8b4 e324 	ldrh.w	lr, [r4, #804]	; 0x324
    6ac4:	f894 031e 	ldrb.w	r0, [r4, #798]	; 0x31e
    6ac8:	f894 2321 	ldrb.w	r2, [r4, #801]	; 0x321
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6acc:	44f4      	add	ip, lr
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    6ace:	444b      	add	r3, r9
    6ad0:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6ad2:	fa1f fc8c 	uxth.w	ip, ip
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    6ad6:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6ada:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    6ade:	f8a4 3326 	strh.w	r3, [r4, #806]	; 0x326
		leds.hue8 = leds.hue16 / 256;
    6ae2:	f884 e320 	strb.w	lr, [r4, #800]	; 0x320

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6ae6:	f8a4 c32e 	strh.w	ip, [r4, #814]	; 0x32e
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6aea:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6aee:	d003      	beq.n	6af8 <pride(LEDStruct&)+0x340>
    6af0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6af4:	3307      	adds	r3, #7
    6af6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6af8:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6afc:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6b00:	f815 9008 	ldrb.w	r9, [r5, r8]
    6b04:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6b08:	f88d e008 	strb.w	lr, [sp, #8]
    6b0c:	fb09 3301 	mla	r3, r9, r1, r3

    if( theta & 0x8000 ) y = -y;
    6b10:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6b14:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6b16:	bf18      	it	ne
    6b18:	425b      	negne	r3, r3
    6b1a:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6b1c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6b20:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6b22:	fb03 f103 	mul.w	r1, r3, r3
    6b26:	0c09      	lsrs	r1, r1, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    6b28:	fb01 fc00 	mul.w	ip, r1, r0
    6b2c:	43c0      	mvns	r0, r0
    6b2e:	eb00 4c1c 	add.w	ip, r0, ip, lsr #16
    6b32:	fa5f fc8c 	uxtb.w	ip, ip
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6b36:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6b3a:	f8a4 1334 	strh.w	r1, [r4, #820]	; 0x334
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    6b3e:	f884 c322 	strb.w	ip, [r4, #802]	; 0x322
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6b42:	a901      	add	r1, sp, #4
    6b44:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6b46:	f88d c00a 	strb.w	ip, [sp, #10]
    6b4a:	f88d 2009 	strb.w	r2, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6b4e:	f003 fea5 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6b52:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    6b56:	3b01      	subs	r3, #1
    6b58:	1bdb      	subs	r3, r3, r7
    6b5a:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    6b5c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6b60:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    6b64:	4420      	add	r0, r4
    6b66:	2240      	movs	r2, #64	; 0x40
    6b68:	a901      	add	r1, sp, #4
    6b6a:	f003 fc3b 	bl	a3e4 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6b6e:	3701      	adds	r7, #1
    6b70:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    6b74:	b2bf      	uxth	r7, r7
    6b76:	42bb      	cmp	r3, r7
    6b78:	d89c      	bhi.n	6ab4 <pride(LEDStruct&)+0x2fc>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    6b7a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    6b7e:	b98b      	cbnz	r3, 6ba4 <pride(LEDStruct&)+0x3ec>
    6b80:	4623      	mov	r3, r4
    6b82:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    6b86:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6b88:	7811      	ldrb	r1, [r2, #0]
    6b8a:	f883 11bf 	strb.w	r1, [r3, #447]	; 0x1bf
        g = rhs.g;
    6b8e:	7851      	ldrb	r1, [r2, #1]
    6b90:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
        b = rhs.b;
    6b94:	7891      	ldrb	r1, [r2, #2]
    6b96:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
    6b9a:	3203      	adds	r2, #3
    6b9c:	4290      	cmp	r0, r2
    6b9e:	f1a3 0303 	sub.w	r3, r3, #3
    6ba2:	d1f1      	bne.n	6b88 <pride(LEDStruct&)+0x3d0>
}
    6ba4:	b00b      	add	sp, #44	; 0x2c
    6ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    6baa:	234b      	movs	r3, #75	; 0x4b
    6bac:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    6bb0:	4b04      	ldr	r3, [pc, #16]	; (6bc4 <pride(LEDStruct&)+0x40c>)
    6bb2:	781b      	ldrb	r3, [r3, #0]
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	f43f ae2d 	beq.w	6814 <pride(LEDStruct&)+0x5c>
    6bba:	4620      	mov	r0, r4
    6bbc:	f7ff fde0 	bl	6780 <pacifica_update(LEDStruct&)>
    6bc0:	e628      	b.n	6814 <pride(LEDStruct&)+0x5c>
    6bc2:	bf00      	nop
    6bc4:	1fff91d1 	.word	0x1fff91d1

00006bc8 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    6bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    6bcc:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    6bd0:	b08b      	sub	sp, #44	; 0x2c
    6bd2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    6bd4:	bb0b      	cbnz	r3, 6c1a <colorwave(LEDStruct&)+0x52>
    6bd6:	48d0      	ldr	r0, [pc, #832]	; (6f18 <colorwave(LEDStruct&)+0x350>)
    6bd8:	8803      	ldrh	r3, [r0, #0]
    6bda:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6bde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6be2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6be6:	3319      	adds	r3, #25
    6be8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6bea:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6bee:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6bf0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette		= 1;
	leds.mode_type			= COLORWAVE;
    6bf4:	2610      	movs	r6, #16
	leds.delay_time			= 15;
    6bf6:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6bf8:	8003      	strh	r3, [r0, #0]
	
	leds.use_full_range		= ufr;
    6bfa:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6bfe:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    6c02:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.mode_type			= COLORWAVE;
    6c06:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.delay_time			= 15;
    6c0a:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6c0e:	2a00      	cmp	r2, #0
    6c10:	f000 81b8 	beq.w	6f84 <colorwave(LEDStruct&)+0x3bc>
    6c14:	2396      	movs	r3, #150	; 0x96
    6c16:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    6c1a:	4bc0      	ldr	r3, [pc, #768]	; (6f1c <colorwave(LEDStruct&)+0x354>)
    6c1c:	781b      	ldrb	r3, [r3, #0]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	f040 81b8 	bne.w	6f94 <colorwave(LEDStruct&)+0x3cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c24:	4abe      	ldr	r2, [pc, #760]	; (6f20 <colorwave(LEDStruct&)+0x358>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6c26:	4bbf      	ldr	r3, [pc, #764]	; (6f24 <colorwave(LEDStruct&)+0x35c>)
    6c28:	6811      	ldr	r1, [r2, #0]
    6c2a:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    6c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
    6c2e:	fb03 f000 	mul.w	r0, r3, r0
    6c32:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c34:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6c36:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c3a:	d503      	bpl.n	6c44 <colorwave(LEDStruct&)+0x7c>
    6c3c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6c40:	3307      	adds	r3, #7
    6c42:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c44:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    6c46:	4fb8      	ldr	r7, [pc, #736]	; (6f28 <colorwave(LEDStruct&)+0x360>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c48:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 6f2c <colorwave(LEDStruct&)+0x364>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c4c:	5c7e      	ldrb	r6, [r7, r1]
    6c4e:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    6c52:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6c56:	fb06 5301 	mla	r3, r6, r1, r5

    if( theta & 0x8000 ) y = -y;
    6c5a:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c5c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6c5e:	bf48      	it	mi
    6c60:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c62:	6811      	ldr	r1, [r2, #0]
    6c64:	9108      	str	r1, [sp, #32]
    6c66:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    6c68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6c6c:	b29b      	uxth	r3, r3
	return ret;
    6c6e:	9d08      	ldr	r5, [sp, #32]
    6c70:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    6c74:	f64d 6308 	movw	r3, #56840	; 0xde08
    6c78:	fb03 f505 	mul.w	r5, r3, r5
    6c7c:	0c00      	lsrs	r0, r0, #16
    6c7e:	0c2d      	lsrs	r5, r5, #16
    6c80:	3060      	adds	r0, #96	; 0x60
    6c82:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c84:	0469      	lsls	r1, r5, #17
    6c86:	f884 031e 	strb.w	r0, [r4, #798]	; 0x31e
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6c8a:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c8e:	d503      	bpl.n	6c98 <colorwave(LEDStruct&)+0xd0>
    6c90:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6c94:	3307      	adds	r3, #7
    6c96:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c98:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c9a:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6c9e:	f817 e006 	ldrb.w	lr, [r7, r6]
    6ca2:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    6ca6:	fb0e 3301 	mla	r3, lr, r1, r3

    if( theta & 0x8000 ) y = -y;
    6caa:	042e      	lsls	r6, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6cac:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6cae:	bf48      	it	mi
    6cb0:	425b      	negmi	r3, r3
    6cb2:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cb4:	6811      	ldr	r1, [r2, #0]
    6cb6:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6cb8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6cbc:	b29b      	uxth	r3, r3
    6cbe:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    6cc2:	9e07      	ldr	r6, [sp, #28]
    6cc4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6cc8:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    6ccc:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6cd0:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6cd2:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6cd4:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    6cd8:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6cda:	0475      	lsls	r5, r6, #17
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    6cdc:	f8a4 1324 	strh.w	r1, [r4, #804]	; 0x324
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6ce0:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6ce4:	d503      	bpl.n	6cee <colorwave(LEDStruct&)+0x126>
    6ce6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6cea:	3307      	adds	r3, #7
    6cec:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6cee:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6cf2:	f3c3 0546 	ubfx	r5, r3, #1, #7
    6cf6:	f817 c00e 	ldrb.w	ip, [r7, lr]
    6cfa:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    6cfe:	fb0c 3305 	mla	r3, ip, r5, r3
    6d02:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6d04:	0435      	lsls	r5, r6, #16
    6d06:	bf48      	it	mi
    6d08:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d0a:	6815      	ldr	r5, [r2, #0]
    6d0c:	9506      	str	r5, [sp, #24]
    6d0e:	b21b      	sxth	r3, r3
    6d10:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6d14:	b29b      	uxth	r3, r3
    6d16:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    6d1a:	9d06      	ldr	r5, [sp, #24]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    6d1c:	f8b4 c31c 	ldrh.w	ip, [r4, #796]	; 0x31c
    6d20:	f8a4 c326 	strh.w	ip, [r4, #806]	; 0x326
    6d24:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6d28:	f647 3398 	movw	r3, #31640	; 0x7b98
    6d2c:	fb03 f505 	mul.w	r5, r3, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6d30:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6d34:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6d36:	f10e 0e17 	add.w	lr, lr, #23
    6d3a:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6d3e:	046e      	lsls	r6, r5, #17
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    6d40:	f884 e31f 	strb.w	lr, [r4, #799]	; 0x31f
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6d44:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6d48:	d503      	bpl.n	6d52 <colorwave(LEDStruct&)+0x18a>
    6d4a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6d4e:	3307      	adds	r3, #7
    6d50:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6d52:	ea4f 2913 	mov.w	r9, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6d56:	f3c3 0346 	ubfx	r3, r3, #1, #7
    6d5a:	f817 a009 	ldrb.w	sl, [r7, r9]
    6d5e:	f838 6019 	ldrh.w	r6, [r8, r9, lsl #1]
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6d62:	f8b4 b318 	ldrh.w	fp, [r4, #792]	; 0x318
    6d66:	fb0a 6603 	mla	r6, sl, r3, r6
    6d6a:	b2b6      	uxth	r6, r6

    if( theta & 0x8000 ) y = -y;
    6d6c:	042b      	lsls	r3, r5, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d6e:	6813      	ldr	r3, [r2, #0]
    6d70:	9304      	str	r3, [sp, #16]
    6d72:	bf48      	it	mi
    6d74:	4276      	negmi	r6, r6
	return ret;
    6d76:	f8dd 9010 	ldr.w	r9, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d7a:	6813      	ldr	r3, [r2, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6d7c:	f8b4 531a 	ldrh.w	r5, [r4, #794]	; 0x31a
    6d80:	9305      	str	r3, [sp, #20]
    6d82:	b236      	sxth	r6, r6
    6d84:	f5a6 4200 	sub.w	r2, r6, #32768	; 0x8000
    6d88:	f240 43b1 	movw	r3, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    6d8c:	fa1f f689 	uxth.w	r6, r9
    6d90:	b292      	uxth	r2, r2
	return ret;
    6d92:	f8dd a014 	ldr.w	sl, [sp, #20]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6d96:	f8df 9198 	ldr.w	r9, [pc, #408]	; 6f30 <colorwave(LEDStruct&)+0x368>
    6d9a:	f8a4 632a 	strh.w	r6, [r4, #810]	; 0x32a
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6d9e:	fb03 f202 	mul.w	r2, r3, r2
	leds.deltams = leds.ms - leds.sLastMillis;
    6da2:	1b73      	subs	r3, r6, r5
    6da4:	b29d      	uxth	r5, r3
    6da6:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6da8:	fb09 f90a 	mul.w	r9, r9, sl
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6dac:	f502 7396 	add.w	r3, r2, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6db0:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6db4:	fb15 be0e 	smlabb	lr, r5, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6db8:	b29a      	uxth	r2, r3
    6dba:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6dbe:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    6dc2:	f8a4 2328 	strh.w	r2, [r4, #808]	; 0x328

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6dc6:	f8a4 532c 	strh.w	r5, [r4, #812]	; 0x32c
	leds.sLastMillis = leds.ms;
    6dca:	f8a4 631a 	strh.w	r6, [r4, #794]	; 0x31a
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6dce:	f8a4 e318 	strh.w	lr, [r4, #792]	; 0x318
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6dd2:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6dd6:	d003      	beq.n	6de0 <colorwave(LEDStruct&)+0x218>
    6dd8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6ddc:	3307      	adds	r3, #7
    6dde:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6de0:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6de4:	f3c3 0646 	ubfx	r6, r3, #1, #7
    6de8:	f817 b00a 	ldrb.w	fp, [r7, sl]
    6dec:	f838 301a 	ldrh.w	r3, [r8, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    6df0:	f8a4 e32e 	strh.w	lr, [r4, #814]	; 0x32e
    6df4:	fb0b 3306 	mla	r3, fp, r6, r3
    6df8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6dfa:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    6dfe:	bf18      	it	ne
    6e00:	425b      	negne	r3, r3
    6e02:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6e04:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6e08:	b29b      	uxth	r3, r3
    6e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6e0e:	0c1b      	lsrs	r3, r3, #16
    6e10:	3305      	adds	r3, #5
    6e12:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6e14:	f8b4 6338 	ldrh.w	r6, [r4, #824]	; 0x338

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6e18:	fb05 c303 	mla	r3, r5, r3, ip
    6e1c:	f8a4 331c 	strh.w	r3, [r4, #796]	; 0x31c
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6e20:	2e00      	cmp	r6, #0
    6e22:	f000 8098 	beq.w	6f56 <colorwave(LEDStruct&)+0x38e>
    6e26:	4613      	mov	r3, r2
    6e28:	f504 7ae4 	add.w	sl, r4, #456	; 0x1c8
    6e2c:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    6e2e:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6e32:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    6e34:	4463      	add	r3, ip
    6e36:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    6e38:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    6e3c:	448e      	add	lr, r1
    6e3e:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    6e42:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    6e46:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    6e4a:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    6e4c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    6e50:	bf08      	it	eq
    6e52:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6e54:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    6e58:	f884 b320 	strb.w	fp, [r4, #800]	; 0x320
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    6e5c:	f8a4 3326 	strh.w	r3, [r4, #806]	; 0x326
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    6e60:	f8a4 c330 	strh.w	ip, [r4, #816]	; 0x330
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    6e64:	f884 2320 	strb.w	r2, [r4, #800]	; 0x320
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    6e68:	f8a4 e32e 	strh.w	lr, [r4, #814]	; 0x32e
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6e6c:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6e70:	d003      	beq.n	6e7a <colorwave(LEDStruct&)+0x2b2>
    6e72:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    6e76:	3107      	adds	r1, #7
    6e78:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6e7a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6e7e:	f3c1 0346 	ubfx	r3, r1, #1, #7
    6e82:	f817 b00c 	ldrb.w	fp, [r7, ip]
    6e86:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    6e8a:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    6e8e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6e92:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    6e94:	bf18      	it	ne
    6e96:	4249      	negne	r1, r1
    6e98:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6e9a:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    6e9e:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6ea0:	fb01 fe01 	mul.w	lr, r1, r1
    6ea4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    6ea8:	fb0e f300 	mul.w	r3, lr, r0
    6eac:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    6eb0:	43c0      	mvns	r0, r0
    6eb2:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    6eb6:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    6eba:	b2db      	uxtb	r3, r3
    6ebc:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6ec0:	f8a4 1332 	strh.w	r1, [r4, #818]	; 0x332

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6ec4:	f8a4 e334 	strh.w	lr, [r4, #820]	; 0x334
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    6ec8:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    6ecc:	4651      	mov	r1, sl
    6ece:	f8cd 9000 	str.w	r9, [sp]
    6ed2:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    6ed4:	f884 2323 	strb.w	r2, [r4, #803]	; 0x323

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    6ed8:	f003 fae2 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6edc:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    6ee0:	3b01      	subs	r3, #1
    6ee2:	1b9b      	subs	r3, r3, r6
    6ee4:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    6ee6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6eea:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    6eee:	4420      	add	r0, r4
    6ef0:	2280      	movs	r2, #128	; 0x80
    6ef2:	a903      	add	r1, sp, #12
    6ef4:	3d01      	subs	r5, #1
    6ef6:	f003 fa75 	bl	a3e4 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    6efa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    6efe:	d019      	beq.n	6f34 <colorwave(LEDStruct&)+0x36c>
    6f00:	f8b4 c326 	ldrh.w	ip, [r4, #806]	; 0x326
    6f04:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    6f08:	f8b4 e32e 	ldrh.w	lr, [r4, #814]	; 0x32e
    6f0c:	f8b4 1324 	ldrh.w	r1, [r4, #804]	; 0x324
    6f10:	f894 031e 	ldrb.w	r0, [r4, #798]	; 0x31e
    6f14:	e78e      	b.n	6e34 <colorwave(LEDStruct&)+0x26c>
    6f16:	bf00      	nop
    6f18:	1fff8784 	.word	0x1fff8784
    6f1c:	1fff91d1 	.word	0x1fff91d1
    6f20:	1ffface8 	.word	0x1ffface8
    6f24:	000174f8 	.word	0x000174f8
    6f28:	0000ed30 	.word	0x0000ed30
    6f2c:	0000e56c 	.word	0x0000e56c
    6f30:	0001b580 	.word	0x0001b580
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6f34:	3601      	adds	r6, #1
    6f36:	f8b4 3338 	ldrh.w	r3, [r4, #824]	; 0x338
    6f3a:	b2b6      	uxth	r6, r6
    6f3c:	42b3      	cmp	r3, r6
    6f3e:	d90a      	bls.n	6f56 <colorwave(LEDStruct&)+0x38e>
    6f40:	f8b4 c326 	ldrh.w	ip, [r4, #806]	; 0x326
    6f44:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    6f48:	f8b4 e32e 	ldrh.w	lr, [r4, #814]	; 0x32e
    6f4c:	f8b4 1324 	ldrh.w	r1, [r4, #804]	; 0x324
    6f50:	f894 031e 	ldrb.w	r0, [r4, #798]	; 0x31e
    6f54:	e76d      	b.n	6e32 <colorwave(LEDStruct&)+0x26a>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    6f56:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    6f5a:	b983      	cbnz	r3, 6f7e <colorwave(LEDStruct&)+0x3b6>
    6f5c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6f60:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6f62:	781a      	ldrb	r2, [r3, #0]
    6f64:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    6f68:	785a      	ldrb	r2, [r3, #1]
    6f6a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    6f6e:	789a      	ldrb	r2, [r3, #2]
    6f70:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6f74:	3303      	adds	r3, #3
    6f76:	4299      	cmp	r1, r3
    6f78:	f1a4 0403 	sub.w	r4, r4, #3
    6f7c:	d1f1      	bne.n	6f62 <colorwave(LEDStruct&)+0x39a>
}
    6f7e:	b00b      	add	sp, #44	; 0x2c
    6f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_type			= COLORWAVE;
	leds.delay_time			= 15;
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    6f84:	234b      	movs	r3, #75	; 0x4b
    6f86:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    6f8a:	4b04      	ldr	r3, [pc, #16]	; (6f9c <colorwave(LEDStruct&)+0x3d4>)
    6f8c:	781b      	ldrb	r3, [r3, #0]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	f43f ae48 	beq.w	6c24 <colorwave(LEDStruct&)+0x5c>
    6f94:	4620      	mov	r0, r4
    6f96:	f7ff fbf3 	bl	6780 <pacifica_update(LEDStruct&)>
    6f9a:	e643      	b.n	6c24 <colorwave(LEDStruct&)+0x5c>
    6f9c:	1fff91d1 	.word	0x1fff91d1

00006fa0 <pacifica(LEDStruct&)>:
}


void pacifica(LEDStruct& leds)
{
    6fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    6fa4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    6fa8:	b093      	sub	sp, #76	; 0x4c
    6faa:	4604      	mov	r4, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    6fac:	bb0b      	cbnz	r3, 6ff2 <pacifica(LEDStruct&)+0x52>
    6fae:	49be      	ldr	r1, [pc, #760]	; (72a8 <pacifica(LEDStruct&)+0x308>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    leds.use_palette        = 0;
    6fb0:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6fb4:	880b      	ldrh	r3, [r1, #0]
    6fb6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6fba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6fbe:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6fc2:	3319      	adds	r3, #25
    6fc4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6fc6:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6fca:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    6fce:	2601      	movs	r6, #1
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    6fd0:	2512      	movs	r5, #18
    leds.delay_time         = 15;
    6fd2:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6fd4:	800b      	strh	r3, [r1, #0]

    leds.use_full_range     = ufr;
    6fd6:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    6fda:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    6fde:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.delay_time         = 15;
    6fe2:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6fe6:	2a00      	cmp	r2, #0
    6fe8:	f000 8249 	beq.w	747e <pacifica(LEDStruct&)+0x4de>
    6fec:	2396      	movs	r3, #150	; 0x96
    6fee:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    6ff2:	4bae      	ldr	r3, [pc, #696]	; (72ac <pacifica(LEDStruct&)+0x30c>)
    6ff4:	781b      	ldrb	r3, [r3, #0]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	f040 8249 	bne.w	748e <pacifica(LEDStruct&)+0x4ee>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ffc:	4eac      	ldr	r6, [pc, #688]	; (72b0 <pacifica(LEDStruct&)+0x310>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    6ffe:	4bad      	ldr	r3, [pc, #692]	; (72b4 <pacifica(LEDStruct&)+0x314>)
    7000:	6832      	ldr	r2, [r6, #0]
    7002:	9205      	str	r2, [sp, #20]
	return ret;
    7004:	9a05      	ldr	r2, [sp, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7006:	6831      	ldr	r1, [r6, #0]
    7008:	9111      	str	r1, [sp, #68]	; 0x44
	return ret;
    700a:	9811      	ldr	r0, [sp, #68]	; 0x44
    700c:	6819      	ldr	r1, [r3, #0]
    sLastms = ms;
    700e:	601a      	str	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7010:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    7014:	fb03 f000 	mul.w	r0, r3, r0
    7018:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    701a:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    701c:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    7020:	eba2 0101 	sub.w	r1, r2, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    7024:	d503      	bpl.n	702e <pacifica(LEDStruct&)+0x8e>
    7026:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    702a:	3307      	adds	r3, #7
    702c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    702e:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    7030:	4fa1      	ldr	r7, [pc, #644]	; (72b8 <pacifica(LEDStruct&)+0x318>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7032:	f8df 829c 	ldr.w	r8, [pc, #668]	; 72d0 <pacifica(LEDStruct&)+0x330>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7036:	f817 e002 	ldrb.w	lr, [r7, r2]
    703a:	f838 5012 	ldrh.w	r5, [r8, r2, lsl #1]
    703e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7042:	fb0e 5302 	mla	r3, lr, r2, r5

    if( theta & 0x8000 ) y = -y;
    7046:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7048:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    704a:	bf48      	it	mi
    704c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    704e:	6832      	ldr	r2, [r6, #0]
    7050:	9210      	str	r2, [sp, #64]	; 0x40
    7052:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7054:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7058:	b29b      	uxth	r3, r3
    705a:	255b      	movs	r5, #91	; 0x5b
	return ret;
    705c:	9810      	ldr	r0, [sp, #64]	; 0x40
    705e:	fb05 f503 	mul.w	r5, r5, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7062:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    7066:	fb03 f000 	mul.w	r0, r3, r0
    706a:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    706c:	0c2d      	lsrs	r5, r5, #16
    706e:	35b3      	adds	r5, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7070:	0442      	lsls	r2, r0, #17
    7072:	b2ad      	uxth	r5, r5
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7074:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7078:	d503      	bpl.n	7082 <pacifica(LEDStruct&)+0xe2>
    707a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    707e:	3307      	adds	r3, #7
    7080:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7082:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7086:	f3c3 0246 	ubfx	r2, r3, #1, #7
    708a:	f817 c00e 	ldrb.w	ip, [r7, lr]
    708e:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    7092:	f8df b240 	ldr.w	fp, [pc, #576]	; 72d4 <pacifica(LEDStruct&)+0x334>
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7096:	f8df a240 	ldr.w	sl, [pc, #576]	; 72d8 <pacifica(LEDStruct&)+0x338>
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    709a:	f8df 9240 	ldr.w	r9, [pc, #576]	; 72dc <pacifica(LEDStruct&)+0x33c>
    709e:	fb0c 3302 	mla	r3, ip, r2, r3
    70a2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    70a4:	0402      	lsls	r2, r0, #16
    70a6:	bf48      	it	mi
    70a8:	425b      	negmi	r3, r3
    70aa:	b21b      	sxth	r3, r3
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    70ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    70b0:	225b      	movs	r2, #91	; 0x5b
    70b2:	b29b      	uxth	r3, r3
    70b4:	fb02 f303 	mul.w	r3, r2, r3
    70b8:	0c1b      	lsrs	r3, r3, #16
    70ba:	33b3      	adds	r3, #179	; 0xb3
    70bc:	b29b      	uxth	r3, r3
    70be:	fb01 f303 	mul.w	r3, r1, r3
    70c2:	0a1b      	lsrs	r3, r3, #8
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    70c4:	fb01 f505 	mul.w	r5, r1, r5
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    70c8:	220d      	movs	r2, #13
    70ca:	210a      	movs	r1, #10
    70cc:	f240 30f3 	movw	r0, #1011	; 0x3f3
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    70d0:	9303      	str	r3, [sp, #12]
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    70d2:	f7f9 fad3 	bl	67c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>
    70d6:	4979      	ldr	r1, [pc, #484]	; (72bc <pacifica(LEDStruct&)+0x31c>)
    70d8:	880b      	ldrh	r3, [r1, #0]
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    70da:	0a2d      	lsrs	r5, r5, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    70dc:	fb05 3000 	mla	r0, r5, r0, r3
    70e0:	4b76      	ldr	r3, [pc, #472]	; (72bc <pacifica(LEDStruct&)+0x31c>)
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    70e2:	220b      	movs	r2, #11
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    70e4:	8018      	strh	r0, [r3, #0]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    70e6:	2108      	movs	r1, #8
    70e8:	f240 3009 	movw	r0, #777	; 0x309
    70ec:	f7f9 fac6 	bl	67c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>
    70f0:	9b03      	ldr	r3, [sp, #12]
    70f2:	f8bb 2000 	ldrh.w	r2, [fp]
    70f6:	18eb      	adds	r3, r5, r3
    70f8:	085b      	lsrs	r3, r3, #1
    70fa:	fb00 2013 	mls	r0, r0, r3, r2
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    70fe:	2105      	movs	r1, #5
    7100:	2207      	movs	r2, #7
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    7102:	f8ab 0000 	strh.w	r0, [fp]
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7106:	f240 10f5 	movw	r0, #501	; 0x1f5
    710a:	f7f9 fab7 	bl	67c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>
    710e:	f8ba 3000 	ldrh.w	r3, [sl]
    7112:	fb05 3010 	mls	r0, r5, r0, r3
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7116:	2206      	movs	r2, #6
    7118:	2104      	movs	r1, #4
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    711a:	f8aa 0000 	strh.w	r0, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    711e:	f240 1001 	movw	r0, #257	; 0x101
    7122:	f7f9 faab 	bl	67c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.39]>
    7126:	f8b9 3000 	ldrh.w	r3, [r9]
    712a:	9a03      	ldr	r2, [sp, #12]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    712c:	f8b4 1338 	ldrh.w	r1, [r4, #824]	; 0x338
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7130:	fb02 3010 	mls	r0, r2, r0, r3
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    7134:	2202      	movs	r2, #2
    7136:	230a      	movs	r3, #10
    7138:	2506      	movs	r5, #6
    713a:	f8a9 0000 	strh.w	r0, [r9]
    713e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    7142:	4620      	mov	r0, r4
    7144:	aa0f      	add	r2, sp, #60	; 0x3c
    7146:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
    714a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    714e:	f003 f885 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7152:	6833      	ldr	r3, [r6, #0]
    7154:	930f      	str	r3, [sp, #60]	; 0x3c

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(leds, pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    7156:	4b59      	ldr	r3, [pc, #356]	; (72bc <pacifica(LEDStruct&)+0x31c>)
	return ret;
    7158:	980f      	ldr	r0, [sp, #60]	; 0x3c
    715a:	881a      	ldrh	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    715c:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    7160:	fb03 f000 	mul.w	r0, r3, r0
    7164:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7166:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7168:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    716c:	d503      	bpl.n	7176 <pacifica(LEDStruct&)+0x1d6>
    716e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7172:	3307      	adds	r3, #7
    7174:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7176:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7178:	f3c3 0146 	ubfx	r1, r3, #1, #7
    717c:	f817 e005 	ldrb.w	lr, [r7, r5]
    7180:	f838 3015 	ldrh.w	r3, [r8, r5, lsl #1]
    7184:	fb0e 3301 	mla	r3, lr, r1, r3
    7188:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    718a:	0401      	lsls	r1, r0, #16
    718c:	bf48      	it	mi
    718e:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7190:	6831      	ldr	r1, [r6, #0]
    7192:	910e      	str	r1, [sp, #56]	; 0x38
    7194:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7196:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    719a:	980e      	ldr	r0, [sp, #56]	; 0x38
    719c:	b29b      	uxth	r3, r3
    719e:	f44f 212f 	mov.w	r1, #716800	; 0xaf000
    71a2:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    71a6:	fb01 f000 	mul.w	r0, r1, r0
    71aa:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    71ae:	0e00      	lsrs	r0, r0, #24
    71b0:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    71b2:	b2c1      	uxtb	r1, r0
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    71b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    71b8:	064d      	lsls	r5, r1, #25
    71ba:	b29b      	uxth	r3, r3
    71bc:	f140 815a 	bpl.w	7474 <pacifica(LEDStruct&)+0x4d4>
        offset = (uint8_t)255 - offset;
    71c0:	43c9      	mvns	r1, r1
    71c2:	fa5f fe81 	uxtb.w	lr, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    71c6:	f00e 010f 	and.w	r1, lr, #15
    if( theta & 0x40) secoffset++;
    71ca:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    71cc:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    71d0:	4d3b      	ldr	r5, [pc, #236]	; (72c0 <pacifica(LEDStruct&)+0x320>)
    71d2:	ea4f 1e2e 	mov.w	lr, lr, asr #4
    71d6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    71da:	eb05 0c0e 	add.w	ip, r5, lr
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    71de:	f815 e00e 	ldrb.w	lr, [r5, lr]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    71e2:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    71e6:	fb1c f101 	smulbb	r1, ip, r1
    71ea:	eb0e 1121 	add.w	r1, lr, r1, asr #4
    if( theta & 0x80 ) y = -y;
    71ee:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    71f0:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    71f2:	bf48      	it	mi
    71f4:	4249      	negmi	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71f6:	6830      	ldr	r0, [r6, #0]
    71f8:	9009      	str	r0, [sp, #36]	; 0x24
    71fa:	b249      	sxtb	r1, r1

    y += 128;
    71fc:	3980      	subs	r1, #128	; 0x80
    71fe:	b2c9      	uxtb	r1, r1
	return ret;
    7200:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    7204:	482f      	ldr	r0, [pc, #188]	; (72c4 <pacifica(LEDStruct&)+0x324>)
    7206:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
    720a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    720e:	fb00 f00e 	mul.w	r0, r0, lr
    7212:	1209      	asrs	r1, r1, #8
    7214:	0c00      	lsrs	r0, r0, #16
    7216:	3146      	adds	r1, #70	; 0x46
    7218:	4240      	negs	r0, r0
    721a:	b2c9      	uxtb	r1, r1
    721c:	b280      	uxth	r0, r0
    721e:	9100      	str	r1, [sp, #0]
    7220:	9001      	str	r0, [sp, #4]
    7222:	4929      	ldr	r1, [pc, #164]	; (72c8 <pacifica(LEDStruct&)+0x328>)
    7224:	4620      	mov	r0, r4
    7226:	f7ff f939 	bl	649c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    722a:	6833      	ldr	r3, [r6, #0]
    722c:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    722e:	980d      	ldr	r0, [sp, #52]	; 0x34
    pacifica_one_layer(leds, pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    7230:	f8bb 2000 	ldrh.w	r2, [fp]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7234:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    7238:	fb03 f000 	mul.w	r0, r3, r0
    723c:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    723e:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7240:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7244:	d503      	bpl.n	724e <pacifica(LEDStruct&)+0x2ae>
    7246:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    724a:	3307      	adds	r3, #7
    724c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    724e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7252:	f3c3 0146 	ubfx	r1, r3, #1, #7
    7256:	f817 700e 	ldrb.w	r7, [r7, lr]
    725a:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    725e:	fb07 3301 	mla	r3, r7, r1, r3
    7262:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7264:	0407      	lsls	r7, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7266:	6831      	ldr	r1, [r6, #0]
    7268:	910c      	str	r1, [sp, #48]	; 0x30
    726a:	bf48      	it	mi
    726c:	425b      	negmi	r3, r3
    726e:	b21b      	sxth	r3, r3
    7270:	4916      	ldr	r1, [pc, #88]	; (72cc <pacifica(LEDStruct&)+0x32c>)
	return ret;
    7272:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7274:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7278:	b29b      	uxth	r3, r3
    727a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    727e:	fb01 f707 	mul.w	r7, r1, r7
    7282:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    7286:	0e3f      	lsrs	r7, r7, #24
    7288:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    728a:	b2f9      	uxtb	r1, r7
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    728c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7290:	0648      	lsls	r0, r1, #25
    7292:	b29b      	uxth	r3, r3
    7294:	f140 80e9 	bpl.w	746a <pacifica(LEDStruct&)+0x4ca>
        offset = (uint8_t)255 - offset;
    7298:	43c8      	mvns	r0, r1
    729a:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    729c:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    72a0:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    72a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    72a6:	e01b      	b.n	72e0 <pacifica(LEDStruct&)+0x340>
    72a8:	1fff8784 	.word	0x1fff8784
    72ac:	1fff91d1 	.word	0x1fff91d1
    72b0:	1ffface8 	.word	0x1ffface8
    72b4:	1fff9114 	.word	0x1fff9114
    72b8:	0000ed30 	.word	0x0000ed30
    72bc:	1fff9118 	.word	0x1fff9118
    72c0:	0000e70c 	.word	0x0000e70c
    72c4:	00014938 	.word	0x00014938
    72c8:	1fff9134 	.word	0x1fff9134
    72cc:	00129800 	.word	0x00129800
    72d0:	0000e56c 	.word	0x0000e56c
    72d4:	1fff911a 	.word	0x1fff911a
    72d8:	1fff90f4 	.word	0x1fff90f4
    72dc:	1fff911e 	.word	0x1fff911e
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    72e0:	1100      	asrs	r0, r0, #4
    72e2:	0040      	lsls	r0, r0, #1
    72e4:	eb05 0e00 	add.w	lr, r5, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    72e8:	5c28      	ldrb	r0, [r5, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    72ea:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    72ee:	fb1e f101 	smulbb	r1, lr, r1
    72f2:	eb00 1121 	add.w	r1, r0, r1, asr #4
    72f6:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    72f8:	0638      	lsls	r0, r7, #24
    72fa:	bf48      	it	mi
    72fc:	4249      	negmi	r1, r1
    72fe:	b249      	sxtb	r1, r1

    y += 128;
    7300:	3980      	subs	r1, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7302:	6830      	ldr	r0, [r6, #0]
    7304:	9008      	str	r0, [sp, #32]
    7306:	b2c9      	uxtb	r1, r1
    7308:	eb01 0081 	add.w	r0, r1, r1, lsl #2
	return ret;
    730c:	9f08      	ldr	r7, [sp, #32]
    730e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7312:	4861      	ldr	r0, [pc, #388]	; (7498 <pacifica(LEDStruct&)+0x4f8>)
    7314:	1209      	asrs	r1, r1, #8
    7316:	fb00 f007 	mul.w	r0, r0, r7
    731a:	3128      	adds	r1, #40	; 0x28
    731c:	b2c9      	uxtb	r1, r1
    731e:	0c00      	lsrs	r0, r0, #16
    7320:	9100      	str	r1, [sp, #0]
    7322:	9001      	str	r0, [sp, #4]
    7324:	495d      	ldr	r1, [pc, #372]	; (749c <pacifica(LEDStruct&)+0x4fc>)
    7326:	4620      	mov	r0, r4
    7328:	f7ff f8b8 	bl	649c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    732c:	6833      	ldr	r3, [r6, #0]
    732e:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    7330:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    7332:	f8ba 2000 	ldrh.w	r2, [sl]
    7336:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    733a:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    733e:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7342:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7344:	065f      	lsls	r7, r3, #25
    7346:	f140 808b 	bpl.w	7460 <pacifica(LEDStruct&)+0x4c0>
        offset = (uint8_t)255 - offset;
    734a:	43db      	mvns	r3, r3
    734c:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    734e:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    7352:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7354:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7358:	1109      	asrs	r1, r1, #4
    735a:	0049      	lsls	r1, r1, #1
    735c:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    735e:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7360:	787f      	ldrb	r7, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7362:	fb17 f303 	smulbb	r3, r7, r3
    7366:	eb01 1323 	add.w	r3, r1, r3, asr #4
    736a:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    736c:	0601      	lsls	r1, r0, #24
    736e:	bf48      	it	mi
    7370:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7372:	6831      	ldr	r1, [r6, #0]
    7374:	9107      	str	r1, [sp, #28]
    7376:	b25b      	sxtb	r3, r3

    y += 128;
    7378:	3b80      	subs	r3, #128	; 0x80
	return ret;
    737a:	9807      	ldr	r0, [sp, #28]
    737c:	4948      	ldr	r1, [pc, #288]	; (74a0 <pacifica(LEDStruct&)+0x500>)
    737e:	b2db      	uxtb	r3, r3
    7380:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
    7384:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7388:	fb01 f100 	mul.w	r1, r1, r0
    738c:	121b      	asrs	r3, r3, #8
    738e:	0c09      	lsrs	r1, r1, #16
    7390:	330a      	adds	r3, #10
    7392:	4249      	negs	r1, r1
    7394:	b2db      	uxtb	r3, r3
    7396:	b289      	uxth	r1, r1
    7398:	9300      	str	r3, [sp, #0]
    739a:	9101      	str	r1, [sp, #4]
    739c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    73a0:	4620      	mov	r0, r4
    73a2:	4940      	ldr	r1, [pc, #256]	; (74a4 <pacifica(LEDStruct&)+0x504>)
    73a4:	f7ff f87a 	bl	649c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73a8:	6833      	ldr	r3, [r6, #0]
    73aa:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    73ac:	980a      	ldr	r0, [sp, #40]	; 0x28
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    73ae:	f8b9 2000 	ldrh.w	r2, [r9]
    73b2:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    73b6:	fb03 f000 	mul.w	r0, r3, r0
    73ba:	0e00      	lsrs	r0, r0, #24
    73bc:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    73be:	065f      	lsls	r7, r3, #25
    73c0:	d549      	bpl.n	7456 <pacifica(LEDStruct&)+0x4b6>
        offset = (uint8_t)255 - offset;
    73c2:	43db      	mvns	r3, r3
    73c4:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    73c6:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    73ca:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    73cc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    73d0:	1109      	asrs	r1, r1, #4
    73d2:	0049      	lsls	r1, r1, #1
    73d4:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    73d6:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    73d8:	787d      	ldrb	r5, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    73da:	fb15 f303 	smulbb	r3, r5, r3
    73de:	eb01 1323 	add.w	r3, r1, r3, asr #4
    73e2:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    73e4:	0601      	lsls	r1, r0, #24
    73e6:	bf48      	it	mi
    73e8:	425b      	negmi	r3, r3
    73ea:	b25b      	sxtb	r3, r3

    y += 128;
    73ec:	3b80      	subs	r3, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73ee:	6831      	ldr	r1, [r6, #0]
    73f0:	9106      	str	r1, [sp, #24]
    73f2:	b2db      	uxtb	r3, r3
    73f4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    73f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	return ret;
    73fc:	9d06      	ldr	r5, [sp, #24]
    73fe:	482a      	ldr	r0, [pc, #168]	; (74a8 <pacifica(LEDStruct&)+0x508>)
    7400:	4928      	ldr	r1, [pc, #160]	; (74a4 <pacifica(LEDStruct&)+0x504>)
    7402:	121b      	asrs	r3, r3, #8
    7404:	330a      	adds	r3, #10
    7406:	fb00 f005 	mul.w	r0, r0, r5
    740a:	b2db      	uxtb	r3, r3
    740c:	0c00      	lsrs	r0, r0, #16
    740e:	9300      	str	r3, [sp, #0]
    7410:	9001      	str	r0, [sp, #4]
    7412:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    7416:	4620      	mov	r0, r4
    7418:	f7ff f840 	bl	649c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps(leds);
    741c:	4620      	mov	r0, r4
    741e:	f7ff f8c1 	bl	65a4 <pacifica_add_whitecaps(LEDStruct&)>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors(leds);
    7422:	4620      	mov	r0, r4
    7424:	f7ff f976 	bl	6714 <pacifica_deepen_colors(LEDStruct&)>

    if (!leds.use_full_range) { strip_sync(leds); }
    7428:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    742c:	b983      	cbnz	r3, 7450 <pacifica(LEDStruct&)+0x4b0>
    742e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    7432:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7434:	781a      	ldrb	r2, [r3, #0]
    7436:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    743a:	785a      	ldrb	r2, [r3, #1]
    743c:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    7440:	789a      	ldrb	r2, [r3, #2]
    7442:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    7446:	3303      	adds	r3, #3
    7448:	4299      	cmp	r1, r3
    744a:	f1a4 0403 	sub.w	r4, r4, #3
    744e:	d1f1      	bne.n	7434 <pacifica(LEDStruct&)+0x494>
}
    7450:	b013      	add	sp, #76	; 0x4c
    7452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7456:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    745a:	f003 030f 	and.w	r3, r3, #15
    745e:	e7b7      	b.n	73d0 <pacifica(LEDStruct&)+0x430>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7460:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7464:	f003 030f 	and.w	r3, r3, #15
    7468:	e776      	b.n	7358 <pacifica(LEDStruct&)+0x3b8>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    746a:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    746e:	f001 010f 	and.w	r1, r1, #15
    7472:	e735      	b.n	72e0 <pacifica(LEDStruct&)+0x340>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7474:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7478:	f001 010f 	and.w	r1, r1, #15
    747c:	e6a8      	b.n	71d0 <pacifica(LEDStruct&)+0x230>
    leds.mode_type          = PACIFICA;
    leds.delay_time         = 15;

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
    747e:	234b      	movs	r3, #75	; 0x4b
    7480:	f8a4 3338 	strh.w	r3, [r4, #824]	; 0x338


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    7484:	4b09      	ldr	r3, [pc, #36]	; (74ac <pacifica(LEDStruct&)+0x50c>)
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	2b00      	cmp	r3, #0
    748a:	f43f adb7 	beq.w	6ffc <pacifica(LEDStruct&)+0x5c>
    748e:	4620      	mov	r0, r4
    7490:	f7ff f976 	bl	6780 <pacifica_update(LEDStruct&)>
    7494:	e5b2      	b.n	6ffc <pacifica(LEDStruct&)+0x5c>
    7496:	bf00      	nop
    7498:	0001b698 	.word	0x0001b698
    749c:	1fff9164 	.word	0x1fff9164
    74a0:	00022628 	.word	0x00022628
    74a4:	1fff9194 	.word	0x1fff9194
    74a8:	00029158 	.word	0x00029158
    74ac:	1fff91d1 	.word	0x1fff91d1

000074b0 <bounce_update(LEDStruct&)>:
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    74b0:	4b1c      	ldr	r3, [pc, #112]	; (7524 <bounce_update(LEDStruct&)+0x74>)
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    74b2:	4a1d      	ldr	r2, [pc, #116]	; (7528 <bounce_update(LEDStruct&)+0x78>)
	switch (update_var) {
    74b4:	781b      	ldrb	r3, [r3, #0]
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    74b6:	2100      	movs	r1, #0
    74b8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    74ba:	2b05      	cmp	r3, #5
    74bc:	d80d      	bhi.n	74da <bounce_update(LEDStruct&)+0x2a>
    74be:	e8df f003 	tbb	[pc, r3]
    74c2:	0317      	.short	0x0317
    74c4:	0e29231d 	.word	0x0e29231d
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
    74c8:	4b18      	ldr	r3, [pc, #96]	; (752c <bounce_update(LEDStruct&)+0x7c>)
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	2b09      	cmp	r3, #9
    74ce:	d927      	bls.n	7520 <bounce_update(LEDStruct&)+0x70>
    74d0:	2b14      	cmp	r3, #20
    74d2:	bfa8      	it	ge
    74d4:	2314      	movge	r3, #20
    74d6:	f880 323a 	strb.w	r3, [r0, #570]	; 0x23a
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    74da:	f7fa be6b 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
    74de:	4b13      	ldr	r3, [pc, #76]	; (752c <bounce_update(LEDStruct&)+0x7c>)
    74e0:	881b      	ldrh	r3, [r3, #0]
    74e2:	3300      	adds	r3, #0
    74e4:	bf18      	it	ne
    74e6:	2301      	movne	r3, #1
    74e8:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    74ec:	f7fa be62 	b.w	21b4 <LEDDebug(LEDStruct&)>


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
    74f0:	4b0e      	ldr	r3, [pc, #56]	; (752c <bounce_update(LEDStruct&)+0x7c>)
    74f2:	881b      	ldrh	r3, [r3, #0]
    74f4:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    74f8:	f7fa be5c 	b.w	21b4 <LEDDebug(LEDStruct&)>
void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
    74fc:	4b0b      	ldr	r3, [pc, #44]	; (752c <bounce_update(LEDStruct&)+0x7c>)
    74fe:	881b      	ldrh	r3, [r3, #0]
    7500:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7504:	f7fa be56 	b.w	21b4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
    7508:	4b08      	ldr	r3, [pc, #32]	; (752c <bounce_update(LEDStruct&)+0x7c>)
    750a:	881b      	ldrh	r3, [r3, #0]
    750c:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7510:	f7fa be50 	b.w	21b4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
    7514:	4b05      	ldr	r3, [pc, #20]	; (752c <bounce_update(LEDStruct&)+0x7c>)
    7516:	881b      	ldrh	r3, [r3, #0]
    7518:	f880 3238 	strb.w	r3, [r0, #568]	; 0x238
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    751c:	f7fa be4a 	b.w	21b4 <LEDDebug(LEDStruct&)>
    7520:	230a      	movs	r3, #10
    7522:	e7d8      	b.n	74d6 <bounce_update(LEDStruct&)+0x26>
    7524:	1fff9a18 	.word	0x1fff9a18
    7528:	1fff91d1 	.word	0x1fff91d1
    752c:	1fff90d2 	.word	0x1fff90d2

00007530 <bounce(LEDStruct&)>:
}


void bounce(LEDStruct& leds) {
    7530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bounce_init(leds); }
    7534:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void bounce(LEDStruct& leds) {
    7538:	b08b      	sub	sp, #44	; 0x2c
    753a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bounce_init(leds); }
    753c:	2a00      	cmp	r2, #0
    753e:	f000 813f 	beq.w	77c0 <bounce(LEDStruct&)+0x290>
    7542:	f200 233b 	addw	r3, r0, #571	; 0x23b
    7546:	9303      	str	r3, [sp, #12]
    7548:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (keyboard_update) { bounce_update(leds); }
    754c:	4b97      	ldr	r3, [pc, #604]	; (77ac <bounce(LEDStruct&)+0x27c>)
    754e:	781b      	ldrb	r3, [r3, #0]
    7550:	2b00      	cmp	r3, #0
    7552:	f040 8126 	bne.w	77a2 <bounce(LEDStruct&)+0x272>

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
    7556:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    755a:	2b00      	cmp	r3, #0
    755c:	f000 80fc 	beq.w	7758 <bounce(LEDStruct&)+0x228>
    7560:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    7564:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    7568:	1c51      	adds	r1, r2, #1
    756a:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
    756e:	4620      	mov	r0, r4
    7570:	214b      	movs	r1, #75	; 0x4b
    7572:	f002 fe83 	bl	a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    7576:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    757a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    757e:	4f8c      	ldr	r7, [pc, #560]	; (77b0 <bounce(LEDStruct&)+0x280>)
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);
    7580:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    7584:	9803      	ldr	r0, [sp, #12]
    7586:	2114      	movs	r1, #20
    7588:	f002 ff2a 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    758c:	683b      	ldr	r3, [r7, #0]
    758e:	9308      	str	r3, [sp, #32]
	return ret;
    7590:	9808      	ldr	r0, [sp, #32]

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    7592:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    7596:	f894 223a 	ldrb.w	r2, [r4, #570]	; 0x23a
    759a:	f44f 738c 	mov.w	r3, #280	; 0x118
    759e:	fb03 f300 	mul.w	r3, r3, r0
    75a2:	0209      	lsls	r1, r1, #8
    75a4:	fb03 f101 	mul.w	r1, r3, r1
    75a8:	0e09      	lsrs	r1, r1, #24
    75aa:	b2c8      	uxtb	r0, r1
    75ac:	3a01      	subs	r2, #1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    75ae:	0646      	lsls	r6, r0, #25
    75b0:	b2d2      	uxtb	r2, r2
    75b2:	f140 80cc 	bpl.w	774e <bounce(LEDStruct&)+0x21e>
        offset = (uint8_t)255 - offset;
    75b6:	43c3      	mvns	r3, r0
    75b8:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    75ba:	f003 000f 	and.w	r0, r3, #15
    if( theta & 0x40) secoffset++;
    75be:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    75c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    75c4:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 77b8 <bounce(LEDStruct&)+0x288>
    75c8:	111b      	asrs	r3, r3, #4
    75ca:	005b      	lsls	r3, r3, #1
    75cc:	eb0a 0603 	add.w	r6, sl, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    75d0:	f81a 3003 	ldrb.w	r3, [sl, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    75d4:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    75d6:	fb16 f000 	smulbb	r0, r6, r0
    75da:	eb03 1320 	add.w	r3, r3, r0, asr #4
    if( theta & 0x80 ) y = -y;
    75de:	0609      	lsls	r1, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    75e0:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    75e2:	bf48      	it	mi
    75e4:	425b      	negmi	r3, r3
    75e6:	b25b      	sxtb	r3, r3
    75e8:	3b80      	subs	r3, #128	; 0x80
    75ea:	b2de      	uxtb	r6, r3
    75ec:	fb02 6606 	mla	r6, r2, r6, r6
    75f0:	1236      	asrs	r6, r6, #8
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    75f2:	2301      	movs	r3, #1
    75f4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    75f8:	f884 6239 	strb.w	r6, [r4, #569]	; 0x239
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    75fc:	4649      	mov	r1, r9
    75fe:	9300      	str	r3, [sp, #0]
    7600:	4640      	mov	r0, r8
    7602:	23ff      	movs	r3, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    7604:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    7608:	f002 ff4a 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    760c:	19a3      	adds	r3, r4, r6
    760e:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    7612:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
    7616:	fa82 f251 	uqadd8	r2, r2, r1
    761a:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
    761e:	f893 123c 	ldrb.w	r1, [r3, #572]	; 0x23c
    7622:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    7626:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    762a:	f883 123c 	strb.w	r1, [r3, #572]	; 0x23c
    762e:	f893 223d 	ldrb.w	r2, [r3, #573]	; 0x23d
    7632:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    7636:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    763a:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    763e:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    7642:	b1f3      	cbz	r3, 7682 <bounce(LEDStruct&)+0x152>
    7644:	2600      	movs	r6, #0
    7646:	9903      	ldr	r1, [sp, #12]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    7648:	46b0      	mov	r8, r6
    764a:	e001      	b.n	7650 <bounce(LEDStruct&)+0x120>
    764c:	f201 213b 	addw	r1, r1, #571	; 0x23b
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
    7650:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    7654:	4433      	add	r3, r6
    7656:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    765a:	18e2      	adds	r2, r4, r3
    765c:	f804 8003 	strb.w	r8, [r4, r3]
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
    7660:	4610      	mov	r0, r2
        g = (colorcode >>  8) & 0xFF;
    7662:	f882 8001 	strb.w	r8, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    7666:	f882 8002 	strb.w	r8, [r2, #2]
    766a:	22ff      	movs	r2, #255	; 0xff
    766c:	f002 feba 	bl	a3e4 <nblend(CRGB&, CRGB const&, unsigned char)>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    7670:	3601      	adds	r6, #1
    7672:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    7676:	b2f6      	uxtb	r6, r6
    7678:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    767c:	42b3      	cmp	r3, r6
    767e:	4421      	add	r1, r4
    7680:	d8e4      	bhi.n	764c <bounce(LEDStruct&)+0x11c>
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length); }
    7682:	f8df 8138 	ldr.w	r8, [pc, #312]	; 77bc <bounce(LEDStruct&)+0x28c>
    7686:	f8d8 2000 	ldr.w	r2, [r8]
    768a:	07d6      	lsls	r6, r2, #31
    768c:	d51a      	bpl.n	76c4 <bounce(LEDStruct&)+0x194>
    768e:	4e49      	ldr	r6, [pc, #292]	; (77b4 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7690:	683a      	ldr	r2, [r7, #0]
    7692:	9207      	str	r2, [sp, #28]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7694:	e896 0003 	ldmia.w	r6, {r0, r1}
	return ret;
    7698:	9a07      	ldr	r2, [sp, #28]
    769a:	1a12      	subs	r2, r2, r0
    769c:	428a      	cmp	r2, r1
    769e:	d222      	bcs.n	76e6 <bounce(LEDStruct&)+0x1b6>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    76a0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    76a2:	781a      	ldrb	r2, [r3, #0]
    76a4:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    76a8:	785a      	ldrb	r2, [r3, #1]
    76aa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    76ae:	789a      	ldrb	r2, [r3, #2]
    76b0:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    76b4:	3303      	adds	r3, #3
    76b6:	429d      	cmp	r5, r3
    76b8:	f1a4 0403 	sub.w	r4, r4, #3
    76bc:	d1f1      	bne.n	76a2 <bounce(LEDStruct&)+0x172>
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length); }

	strip_sync(leds);
}
    76be:	b00b      	add	sp, #44	; 0x2c
    76c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length); }
    76c4:	4640      	mov	r0, r8
    76c6:	f003 fe05 	bl	b2d4 <__cxa_guard_acquire>
    76ca:	2800      	cmp	r0, #0
    76cc:	f040 8111 	bne.w	78f2 <bounce(LEDStruct&)+0x3c2>
    76d0:	4e38      	ldr	r6, [pc, #224]	; (77b4 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76d2:	683b      	ldr	r3, [r7, #0]
    76d4:	9307      	str	r3, [sp, #28]
    76d6:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    76da:	9b07      	ldr	r3, [sp, #28]
    76dc:	1a5b      	subs	r3, r3, r1
    76de:	4293      	cmp	r3, r2
    76e0:	d3de      	bcc.n	76a0 <bounce(LEDStruct&)+0x170>
    76e2:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76e6:	683a      	ldr	r2, [r7, #0]
    76e8:	9206      	str	r2, [sp, #24]
	return ret;
    76ea:	9906      	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76ec:	683a      	ldr	r2, [r7, #0]
    76ee:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    76f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    76f2:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    76f6:	6031      	str	r1, [r6, #0]
    76f8:	f44f 718c 	mov.w	r1, #280	; 0x118
    76fc:	fb01 f100 	mul.w	r1, r1, r0
    7700:	0212      	lsls	r2, r2, #8
    7702:	fb02 f101 	mul.w	r1, r2, r1
    7706:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7708:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    770a:	0650      	lsls	r0, r2, #25
    770c:	f100 80e9 	bmi.w	78e2 <bounce(LEDStruct&)+0x3b2>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7710:	f002 063f 	and.w	r6, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7714:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7718:	1132      	asrs	r2, r6, #4
    771a:	0052      	lsls	r2, r2, #1
    771c:	eb0a 0602 	add.w	r6, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7720:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7724:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7726:	fb16 f000 	smulbb	r0, r6, r0
    772a:	eb02 1220 	add.w	r2, r2, r0, asr #4
    772e:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    7730:	0609      	lsls	r1, r1, #24
    7732:	bf48      	it	mi
    7734:	4252      	negmi	r2, r2
    7736:	b252      	sxtb	r2, r2
    7738:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    773c:	3a80      	subs	r2, #128	; 0x80
    773e:	b2d9      	uxtb	r1, r3
    7740:	b2d3      	uxtb	r3, r2
    7742:	fb01 3303 	mla	r3, r1, r3, r3
    7746:	121b      	asrs	r3, r3, #8
    7748:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    774c:	e7a8      	b.n	76a0 <bounce(LEDStruct&)+0x170>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    774e:	f000 033f 	and.w	r3, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7752:	f000 000f 	and.w	r0, r0, #15
    7756:	e735      	b.n	75c4 <bounce(LEDStruct&)+0x94>
void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }
    7758:	f894 727a 	ldrb.w	r7, [r4, #634]	; 0x27a
    775c:	f894 b279 	ldrb.w	fp, [r4, #633]	; 0x279
    7760:	1c7b      	adds	r3, r7, #1
    7762:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    7766:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    776a:	4626      	mov	r6, r4
    776c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
    7770:	f04f 0a01 	mov.w	sl, #1
    7774:	463a      	mov	r2, r7
    7776:	23ff      	movs	r3, #255	; 0xff
    7778:	4649      	mov	r1, r9
    777a:	f8cd a000 	str.w	sl, [sp]
    777e:	4640      	mov	r0, r8
    7780:	f002 fe8e 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7784:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
        g = rhs.g;
    7788:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
        b = rhs.b;
    778c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7790:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    7792:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    7794:	70b3      	strb	r3, [r6, #2]
    7796:	3603      	adds	r6, #3
        colorIndex += incIndex;
    7798:	445f      	add	r7, fp
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    779a:	42ae      	cmp	r6, r5
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
        colorIndex += incIndex;
    779c:	b2ff      	uxtb	r7, r7
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    779e:	d1e9      	bne.n	7774 <bounce(LEDStruct&)+0x244>
    77a0:	e6ed      	b.n	757e <bounce(LEDStruct&)+0x4e>
}


void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }
    77a2:	4620      	mov	r0, r4
    77a4:	f7ff fe84 	bl	74b0 <bounce_update(LEDStruct&)>
    77a8:	e6d5      	b.n	7556 <bounce(LEDStruct&)+0x26>
    77aa:	bf00      	nop
    77ac:	1fff91d1 	.word	0x1fff91d1
    77b0:	1ffface8 	.word	0x1ffface8
    77b4:	1fff9104 	.word	0x1fff9104
    77b8:	0000e70c 	.word	0x0000e70c
    77bc:	1fff91d4 	.word	0x1fff91d4
    77c0:	4951      	ldr	r1, [pc, #324]	; (7908 <bounce(LEDStruct&)+0x3d8>)
void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
    77c2:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    77c6:	880b      	ldrh	r3, [r1, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    77c8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    77cc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    77d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    77d4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    77d8:	3319      	adds	r3, #25
    77da:	b29b      	uxth	r3, r3
    77dc:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    77e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    77e4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    77e8:	3519      	adds	r5, #25
    77ea:	b2ad      	uxth	r5, r5
    77ec:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    77f0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    77f4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    77f8:	3719      	adds	r7, #25
    77fa:	b2bf      	uxth	r7, r7
    77fc:	eb07 2947 	add.w	r9, r7, r7, lsl #9
    7800:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    7804:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    7808:	f109 0919 	add.w	r9, r9, #25
    780c:	fa1f f989 	uxth.w	r9, r9
    7810:	eb09 2a49 	add.w	sl, r9, r9, lsl #9
    7814:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
    7818:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    781c:	f10a 0a19 	add.w	sl, sl, #25
    7820:	fa1f fa8a 	uxth.w	sl, sl
    7824:	eb0a 2e4a 	add.w	lr, sl, sl, lsl #9
    7828:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
    782c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    7830:	f10e 0e19 	add.w	lr, lr, #25
    7834:	fa1f fe8e 	uxth.w	lr, lr
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
    7838:	f04f 0801 	mov.w	r8, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    783c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    7840:	b2de      	uxtb	r6, r3
    7842:	eb0e 2b1e 	add.w	fp, lr, lr, lsr #8
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7846:	f204 233b 	addw	r3, r4, #571	; 0x23b
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
    784a:	f04f 0c19 	mov.w	ip, #25
	leds.delay_time			= 15;
    784e:	200f      	movs	r0, #15
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
    7850:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    7854:	f884 822a 	strb.w	r8, [r4, #554]	; 0x22a
    7858:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    785c:	eb09 2919 	add.w	r9, r9, r9, lsr #8
    7860:	eb0a 2a1a 	add.w	sl, sl, sl, lsr #8
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7864:	f10d 0824 	add.w	r8, sp, #36	; 0x24

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
    7868:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
    786c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7870:	4618      	mov	r0, r3
    7872:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7876:	f8a1 e000 	strh.w	lr, [r1]
    787a:	4642      	mov	r2, r8
    787c:	2114      	movs	r1, #20
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    787e:	b2ff      	uxtb	r7, r7
    7880:	fa5f f989 	uxtb.w	r9, r9
    7884:	fa5f fb8b 	uxtb.w	fp, fp
    7888:	fa5f fa8a 	uxtb.w	sl, sl
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
    788c:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7890:	9303      	str	r3, [sp, #12]
    7892:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    7896:	f002 fce1 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    789a:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    789e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    78a2:	eb0a 008a 	add.w	r0, sl, sl, lsl #2
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    78a6:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    78aa:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
    78ae:	b2ed      	uxtb	r5, r5
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    78b0:	ea4f 262b 	mov.w	r6, fp, asr #8
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    78b4:	1140      	asrs	r0, r0, #5
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    78b6:	1149      	asrs	r1, r1, #5
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    78b8:	1212      	asrs	r2, r2, #8
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    78ba:	111b      	asrs	r3, r3, #4
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    78bc:	3601      	adds	r6, #1
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    78be:	3050      	adds	r0, #80	; 0x50
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    78c0:	3110      	adds	r1, #16
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    78c2:	320c      	adds	r2, #12
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
	leds.bounce_rainbow		= br;
    78c4:	09ed      	lsrs	r5, r5, #7
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    78c6:	3320      	adds	r3, #32
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    78c8:	f884 6279 	strb.w	r6, [r4, #633]	; 0x279
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    78cc:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    78d0:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    78d4:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
	leds.bounce_rainbow		= br;
    78d8:	f884 5277 	strb.w	r5, [r4, #631]	; 0x277
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    78dc:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    78e0:	e634      	b.n	754c <bounce(LEDStruct&)+0x1c>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    78e2:	43d2      	mvns	r2, r2
    78e4:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    78e6:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    78ea:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    78ec:	f002 063f 	and.w	r6, r2, #63	; 0x3f
    78f0:	e712      	b.n	7718 <bounce(LEDStruct&)+0x1e8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78f2:	683b      	ldr	r3, [r7, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    78f4:	4e05      	ldr	r6, [pc, #20]	; (790c <bounce(LEDStruct&)+0x3dc>)
    78f6:	9305      	str	r3, [sp, #20]
	return ret;
    78f8:	9b05      	ldr	r3, [sp, #20]
    78fa:	6033      	str	r3, [r6, #0]
    78fc:	2319      	movs	r3, #25
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length); }
    78fe:	4640      	mov	r0, r8
    7900:	6073      	str	r3, [r6, #4]
    7902:	f003 fced 	bl	b2e0 <__cxa_guard_release>
    7906:	e6e4      	b.n	76d2 <bounce(LEDStruct&)+0x1a2>
    7908:	1fff8784 	.word	0x1fff8784
    790c:	1fff9104 	.word	0x1fff9104

00007910 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>:
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
    7910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leds.mode_initialized	= 1;
    7914:	2701      	movs	r7, #1
	leds.use_palette		= up;
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
    7916:	261a      	movs	r6, #26
	leds.delay_time			= 15;
    7918:	250f      	movs	r5, #15


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.use_full_range		= 0;
    791a:	2400      	movs	r4, #0
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
    791c:	b087      	sub	sp, #28
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
    791e:	f880 122a 	strb.w	r1, [r0, #554]	; 0x22a
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
    7922:	f880 2763 	strb.w	r2, [r0, #1891]	; 0x763
	leds.number_of_balls	= nob;
    7926:	f880 3764 	strb.w	r3, [r0, #1892]	; 0x764
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
    792a:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
	leds.use_palette		= up;
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
    792e:	f880 622d 	strb.w	r6, [r0, #557]	; 0x22d
	leds.delay_time			= 15;
    7932:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.use_full_range		= 0;
    7936:	f880 41c4 	strb.w	r4, [r0, #452]	; 0x1c4
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    793a:	2b00      	cmp	r3, #0
    793c:	d043      	beq.n	79c6 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xb6>
    793e:	469b      	mov	fp, r3
    7940:	4b25      	ldr	r3, [pc, #148]	; (79d8 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc8>)
    7942:	4605      	mov	r5, r0
    7944:	681b      	ldr	r3, [r3, #0]
    7946:	9301      	str	r3, [sp, #4]
    7948:	4658      	mov	r0, fp
    794a:	f005 fbdb 	bl	d104 <__aeabi_ui2d>
    794e:	4602      	mov	r2, r0
    7950:	460b      	mov	r3, r1
    7952:	f005 fc4d 	bl	d1f0 <__aeabi_dmul>
    7956:	e9cd 0102 	strd	r0, r1, [sp, #8]
    795a:	f205 7ae4 	addw	sl, r5, #2020	; 0x7e4
    795e:	f205 7964 	addw	r9, r5, #1892	; 0x764
    7962:	f205 78c4 	addw	r8, r5, #1988	; 0x7c4
    7966:	f205 7784 	addw	r7, r5, #1924	; 0x784
    796a:	f205 76a4 	addw	r6, r5, #1956	; 0x7a4
    796e:	f605 0504 	addw	r5, r5, #2052	; 0x804
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7972:	4b1a      	ldr	r3, [pc, #104]	; (79dc <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xcc>)
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	9305      	str	r3, [sp, #20]
	return ret;
    7978:	9b05      	ldr	r3, [sp, #20]
		leds.bouncing_tLast[i]		= millis();
    797a:	f84a 3f04 	str.w	r3, [sl, #4]!
		leds.bouncing_heights[i]	= h0;
    797e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    7982:	f849 3f04 	str.w	r3, [r9, #4]!
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
    7986:	2300      	movs	r3, #0
    7988:	f848 3f04 	str.w	r3, [r8, #4]!
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
    798c:	9b01      	ldr	r3, [sp, #4]
    798e:	f847 3f04 	str.w	r3, [r7, #4]!
		leds.bouncing_tCycle[i]		= 0;
    7992:	2300      	movs	r3, #0
    7994:	f846 3f04 	str.w	r3, [r6, #4]!
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
    7998:	4620      	mov	r0, r4
    799a:	f005 ff45 	bl	d828 <__aeabi_i2f>
    799e:	f005 fbd3 	bl	d148 <__aeabi_f2d>
    79a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    79a6:	f005 fd4d 	bl	d444 <__aeabi_ddiv>
    79aa:	4602      	mov	r2, r0
    79ac:	460b      	mov	r3, r1
    79ae:	a108      	add	r1, pc, #32	; (adr r1, 79d0 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc0>)
    79b0:	e9d1 0100 	ldrd	r0, r1, [r1]
    79b4:	f005 fa68 	bl	ce88 <__aeabi_dsub>
    79b8:	f005 fe2c 	bl	d614 <__aeabi_d2f>
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    79bc:	3401      	adds	r4, #1
    79be:	455c      	cmp	r4, fp
		leds.bouncing_tLast[i]		= millis();
		leds.bouncing_heights[i]	= h0;
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i]		= 0;
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
    79c0:	f845 0f04 	str.w	r0, [r5, #4]!
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    79c4:	d1d5      	bne.n	7972 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0x62>
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i]		= 0;
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}
    79c6:	b007      	add	sp, #28
    79c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79cc:	f3af 8000 	nop.w
    79d0:	c0000000 	.word	0xc0000000
    79d4:	3feccccc 	.word	0x3feccccc
    79d8:	1fff8744 	.word	0x1fff8744
    79dc:	1ffface8 	.word	0x1ffface8

000079e0 <bouncing_balls_update(LEDStruct&)>:

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    79e0:	4b12      	ldr	r3, [pc, #72]	; (7a2c <bouncing_balls_update(LEDStruct&)+0x4c>)
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    79e2:	4a13      	ldr	r2, [pc, #76]	; (7a30 <bouncing_balls_update(LEDStruct&)+0x50>)
	switch (update_var) {
    79e4:	781b      	ldrb	r3, [r3, #0]
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    79e6:	2100      	movs	r1, #0
	switch (update_var) {
    79e8:	2b01      	cmp	r3, #1
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    79ea:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    79ec:	d011      	beq.n	7a12 <bouncing_balls_update(LEDStruct&)+0x32>
    79ee:	d30a      	bcc.n	7a06 <bouncing_balls_update(LEDStruct&)+0x26>
    79f0:	2b02      	cmp	r3, #2
    79f2:	d106      	bne.n	7a02 <bouncing_balls_update(LEDStruct&)+0x22>
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
    79f4:	4b0f      	ldr	r3, [pc, #60]	; (7a34 <bouncing_balls_update(LEDStruct&)+0x54>)
    79f6:	881b      	ldrh	r3, [r3, #0]
    79f8:	3300      	adds	r3, #0
    79fa:	bf18      	it	ne
    79fc:	2301      	movne	r3, #1
    79fe:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	default:	break;
	}
	LEDDebug(leds);
    7a02:	f7fa bbd7 	b.w	21b4 <LEDDebug(LEDStruct&)>
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
    7a06:	4b0b      	ldr	r3, [pc, #44]	; (7a34 <bouncing_balls_update(LEDStruct&)+0x54>)
    7a08:	881b      	ldrh	r3, [r3, #0]
    7a0a:	f880 3763 	strb.w	r3, [r0, #1891]	; 0x763
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
	default:	break;
	}
	LEDDebug(leds);
    7a0e:	f7fa bbd1 	b.w	21b4 <LEDDebug(LEDStruct&)>

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
    7a12:	4a08      	ldr	r2, [pc, #32]	; (7a34 <bouncing_balls_update(LEDStruct&)+0x54>)
    7a14:	8813      	ldrh	r3, [r2, #0]
    7a16:	2b08      	cmp	r3, #8
    7a18:	bf8c      	ite	hi
    7a1a:	2308      	movhi	r3, #8
    7a1c:	b2db      	uxtbls	r3, r3
    7a1e:	f880 3764 	strb.w	r3, [r0, #1892]	; 0x764
    7a22:	bf88      	it	hi
    7a24:	8013      	strhhi	r3, [r2, #0]
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
	default:	break;
	}
	LEDDebug(leds);
    7a26:	f7fa bbc5 	b.w	21b4 <LEDDebug(LEDStruct&)>
    7a2a:	bf00      	nop
    7a2c:	1fff9a18 	.word	0x1fff9a18
    7a30:	1fff91d1 	.word	0x1fff91d1
    7a34:	1fff90d2 	.word	0x1fff90d2

00007a38 <bouncing_balls(LEDStruct&)>:
}

void bouncing_balls(LEDStruct& leds) {
    7a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    7a3c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	default:	break;
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
    7a40:	b089      	sub	sp, #36	; 0x24
    7a42:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    7a44:	2b00      	cmp	r3, #0
    7a46:	f000 80df 	beq.w	7c08 <bouncing_balls(LEDStruct&)+0x1d0>
	if (keyboard_update) { bouncing_balls_update(leds); }
    7a4a:	4b8d      	ldr	r3, [pc, #564]	; (7c80 <bouncing_balls(LEDStruct&)+0x248>)
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	f040 8112 	bne.w	7c78 <bouncing_balls(LEDStruct&)+0x240>

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    7a54:	f894 3764 	ldrb.w	r3, [r4, #1892]	; 0x764
    7a58:	2b00      	cmp	r3, #0
    7a5a:	f000 80c1 	beq.w	7be0 <bouncing_balls(LEDStruct&)+0x1a8>
    7a5e:	f04f 0800 	mov.w	r8, #0
    7a62:	f8df 922c 	ldr.w	r9, [pc, #556]	; 7c90 <bouncing_balls(LEDStruct&)+0x258>
    7a66:	46c3      	mov	fp, r8
    7a68:	e032      	b.n	7ad0 <bouncing_balls(LEDStruct&)+0x98>
			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       

		if (leds.use_palette) {
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
    7a6a:	f894 3762 	ldrb.w	r3, [r4, #1890]	; 0x762
    7a6e:	f894 2764 	ldrb.w	r2, [r4, #1892]	; 0x764
    7a72:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    7a76:	9100      	str	r1, [sp, #0]
    7a78:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7a7c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    7a80:	fb96 f6f2 	sdiv	r6, r6, r2
    7a84:	18f2      	adds	r2, r6, r3
    7a86:	b2d2      	uxtb	r2, r2
    7a88:	23ff      	movs	r3, #255	; 0xff
    7a8a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    7a8e:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    7a92:	a805      	add	r0, sp, #20
    7a94:	f002 fd04 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7a98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7a9c:	55e3      	strb	r3, [r4, r7]
    7a9e:	4427      	add	r7, r4
        g = rhs.g;
        b = rhs.b;
    7aa0:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    7aa4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    7aa8:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    7aaa:	70bb      	strb	r3, [r7, #2]
			leds.bouncing_index++;
    7aac:	f894 3762 	ldrb.w	r3, [r4, #1890]	; 0x762
    7ab0:	3301      	adds	r3, #1
    7ab2:	f884 3762 	strb.w	r3, [r4, #1890]	; 0x762

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    7ab6:	f10b 0b01 	add.w	fp, fp, #1
    7aba:	f894 3764 	ldrb.w	r3, [r4, #1892]	; 0x764
    7abe:	fa5f fb8b 	uxtb.w	fp, fp
    7ac2:	f108 0828 	add.w	r8, r8, #40	; 0x28
    7ac6:	455b      	cmp	r3, fp
    7ac8:	fa5f f888 	uxtb.w	r8, r8
    7acc:	f240 8088 	bls.w	7be0 <bouncing_balls(LEDStruct&)+0x1a8>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
    7ad0:	f894 2763 	ldrb.w	r2, [r4, #1891]	; 0x763
    7ad4:	214b      	movs	r1, #75	; 0x4b
    7ad6:	4620      	mov	r0, r4
    7ad8:	fa0f f68b 	sxth.w	r6, fp
    7adc:	f002 fc80 	bl	a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    7ae0:	eb04 0586 	add.w	r5, r4, r6, lsl #2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ae4:	f8d9 3000 	ldr.w	r3, [r9]
    7ae8:	9306      	str	r3, [sp, #24]
	return ret;
    7aea:	9806      	ldr	r0, [sp, #24]
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    7aec:	f8d5 37e8 	ldr.w	r3, [r5, #2024]	; 0x7e8
    7af0:	1ac0      	subs	r0, r0, r3
    7af2:	f005 fe95 	bl	d820 <__aeabi_ui2f>
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    7af6:	4963      	ldr	r1, [pc, #396]	; (7c84 <bouncing_balls(LEDStruct&)+0x24c>)
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    7af8:	f8c5 07a8 	str.w	r0, [r5, #1960]	; 0x7a8
    7afc:	4607      	mov	r7, r0
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    7afe:	f005 ff9b 	bl	da38 <__aeabi_fdiv>
    7b02:	f005 fb21 	bl	d148 <__aeabi_f2d>
    7b06:	4602      	mov	r2, r0
    7b08:	460b      	mov	r3, r1
    7b0a:	f005 fb71 	bl	d1f0 <__aeabi_dmul>
    7b0e:	2200      	movs	r2, #0
    7b10:	4b5d      	ldr	r3, [pc, #372]	; (7c88 <bouncing_balls(LEDStruct&)+0x250>)
    7b12:	f8d5 a788 	ldr.w	sl, [r5, #1928]	; 0x788
    7b16:	f005 fb6b 	bl	d1f0 <__aeabi_dmul>
    7b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7b1e:	4651      	mov	r1, sl
    7b20:	4638      	mov	r0, r7
    7b22:	f005 fed5 	bl	d8d0 <__aeabi_fmul>
    7b26:	4957      	ldr	r1, [pc, #348]	; (7c84 <bouncing_balls(LEDStruct&)+0x24c>)
    7b28:	f005 ff86 	bl	da38 <__aeabi_fdiv>
    7b2c:	f005 fb0c 	bl	d148 <__aeabi_f2d>
    7b30:	4602      	mov	r2, r0
    7b32:	460b      	mov	r3, r1
    7b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7b38:	f005 f9a8 	bl	ce8c <__adddf3>
    7b3c:	f005 fd6a 	bl	d614 <__aeabi_d2f>

		if (leds.bouncing_heights[i] < 0) {
    7b40:	2100      	movs	r1, #0
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    7b42:	f8c5 0768 	str.w	r0, [r5, #1896]	; 0x768
    7b46:	4607      	mov	r7, r0

		if (leds.bouncing_heights[i] < 0) {
    7b48:	f006 f860 	bl	dc0c <__aeabi_fcmplt>
    7b4c:	bb70      	cbnz	r0, 7bac <bouncing_balls(LEDStruct&)+0x174>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    7b4e:	4638      	mov	r0, r7
    7b50:	494e      	ldr	r1, [pc, #312]	; (7c8c <bouncing_balls(LEDStruct&)+0x254>)
    7b52:	f005 febd 	bl	d8d0 <__aeabi_fmul>
    7b56:	2100      	movs	r1, #0
    7b58:	4607      	mov	r7, r0
    7b5a:	f006 f86b 	bl	dc34 <__aeabi_fcmpge>
    7b5e:	b1e0      	cbz	r0, 7b9a <bouncing_balls(LEDStruct&)+0x162>
    7b60:	4638      	mov	r0, r7
    7b62:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    7b66:	f005 fdab 	bl	d6c0 <__addsf3>
    7b6a:	f006 f877 	bl	dc5c <__aeabi_f2iz>
    7b6e:	4607      	mov	r7, r0
    7b70:	f8c5 77c8 	str.w	r7, [r5, #1992]	; 0x7c8

		if (leds.use_palette) {
    7b74:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    7b78:	2b00      	cmp	r3, #0
    7b7a:	f47f af76 	bne.w	7a6a <bouncing_balls(LEDStruct&)+0x32>
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
			leds.bouncing_index++;
		}
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
    7b7e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    7b82:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    7b84:	4421      	add	r1, r4
    7b86:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    7b88:	f88d 8014 	strb.w	r8, [sp, #20]
    7b8c:	f88d 3015 	strb.w	r3, [sp, #21]
    7b90:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    7b94:	f002 fe82 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    7b98:	e78d      	b.n	7ab6 <bouncing_balls(LEDStruct&)+0x7e>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    7b9a:	4638      	mov	r0, r7
    7b9c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    7ba0:	f005 fd8c 	bl	d6bc <__aeabi_fsub>
    7ba4:	f006 f85a 	bl	dc5c <__aeabi_f2iz>
    7ba8:	4607      	mov	r7, r0
    7baa:	e7e1      	b.n	7b70 <bouncing_balls(LEDStruct&)+0x138>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;

		if (leds.bouncing_heights[i] < 0) {
			leds.bouncing_heights[i] = 0;                            
    7bac:	2300      	movs	r3, #0
    7bae:	f8c5 3768 	str.w	r3, [r5, #1896]	; 0x768
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
    7bb2:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
    7bb6:	4650      	mov	r0, sl
    7bb8:	f005 fe8a 	bl	d8d0 <__aeabi_fmul>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bbc:	4b34      	ldr	r3, [pc, #208]	; (7c90 <bouncing_balls(LEDStruct&)+0x258>)
    7bbe:	f8c5 0788 	str.w	r0, [r5, #1928]	; 0x788
    7bc2:	681b      	ldr	r3, [r3, #0]
    7bc4:	9307      	str	r3, [sp, #28]
	return ret;
    7bc6:	9b07      	ldr	r3, [sp, #28]
			leds.bouncing_tLast[i] = millis();
    7bc8:	f8c5 37e8 	str.w	r3, [r5, #2024]	; 0x7e8

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
    7bcc:	4931      	ldr	r1, [pc, #196]	; (7c94 <bouncing_balls(LEDStruct&)+0x25c>)
    7bce:	f006 f81d 	bl	dc0c <__aeabi_fcmplt>
    7bd2:	b118      	cbz	r0, 7bdc <bouncing_balls(LEDStruct&)+0x1a4>
    7bd4:	4b30      	ldr	r3, [pc, #192]	; (7c98 <bouncing_balls(LEDStruct&)+0x260>)
    7bd6:	681b      	ldr	r3, [r3, #0]
    7bd8:	f8c5 3788 	str.w	r3, [r5, #1928]	; 0x788

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    7bdc:	2700      	movs	r7, #0
    7bde:	e7c7      	b.n	7b70 <bouncing_balls(LEDStruct&)+0x138>
    7be0:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    7be4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7be6:	7822      	ldrb	r2, [r4, #0]
    7be8:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    7bec:	7862      	ldrb	r2, [r4, #1]
    7bee:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    7bf2:	78a2      	ldrb	r2, [r4, #2]
    7bf4:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    7bf8:	3403      	adds	r4, #3
    7bfa:	42a1      	cmp	r1, r4
    7bfc:	f1a3 0303 	sub.w	r3, r3, #3
    7c00:	d1f1      	bne.n	7be6 <bouncing_balls(LEDStruct&)+0x1ae>
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
		}
	}
	strip_sync(leds);
}
    7c02:	b009      	add	sp, #36	; 0x24
    7c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7c08:	4d24      	ldr	r5, [pc, #144]	; (7c9c <bouncing_balls(LEDStruct&)+0x264>)
    7c0a:	882b      	ldrh	r3, [r5, #0]
    7c0c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    7c10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7c14:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    7c18:	3119      	adds	r1, #25
    7c1a:	b289      	uxth	r1, r1
    7c1c:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    7c20:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7c24:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7c28:	3319      	adds	r3, #25
    7c2a:	b29b      	uxth	r3, r3
    7c2c:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    7c30:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    7c34:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    7c38:	3619      	adds	r6, #25
    7c3a:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7c3c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    7c40:	b2db      	uxtb	r3, r3
    7c42:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    7c46:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    7c4a:	b2ff      	uxtb	r7, r7
    7c4c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7c50:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    7c54:	123b      	asrs	r3, r7, #8
    7c56:	1212      	asrs	r2, r2, #8
    7c58:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    7c5c:	3302      	adds	r3, #2
    7c5e:	3201      	adds	r2, #1
    7c60:	b2db      	uxtb	r3, r3
    7c62:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    7c66:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7c68:	802e      	strh	r6, [r5, #0]
    7c6a:	f7ff fe51 	bl	7910 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>
	if (keyboard_update) { bouncing_balls_update(leds); }
    7c6e:	4b04      	ldr	r3, [pc, #16]	; (7c80 <bouncing_balls(LEDStruct&)+0x248>)
    7c70:	781b      	ldrb	r3, [r3, #0]
    7c72:	2b00      	cmp	r3, #0
    7c74:	f43f aeee 	beq.w	7a54 <bouncing_balls(LEDStruct&)+0x1c>
    7c78:	4620      	mov	r0, r4
    7c7a:	f7ff feb1 	bl	79e0 <bouncing_balls_update(LEDStruct&)>
    7c7e:	e6e9      	b.n	7a54 <bouncing_balls(LEDStruct&)+0x1c>
    7c80:	1fff91d1 	.word	0x1fff91d1
    7c84:	447a0000 	.word	0x447a0000
    7c88:	bfe00000 	.word	0xbfe00000
    7c8c:	42940000 	.word	0x42940000
    7c90:	1ffface8 	.word	0x1ffface8
    7c94:	3c23d70a 	.word	0x3c23d70a
    7c98:	1fff8744 	.word	0x1fff8744
    7c9c:	1fff8784 	.word	0x1fff8784

00007ca0 <twinkle_update(LEDStruct&)>:
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    7ca0:	4b1c      	ldr	r3, [pc, #112]	; (7d14 <twinkle_update(LEDStruct&)+0x74>)
	
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
    7ca2:	4a1d      	ldr	r2, [pc, #116]	; (7d18 <twinkle_update(LEDStruct&)+0x78>)
	switch (update_var) {
    7ca4:	781b      	ldrb	r3, [r3, #0]
	
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
    7ca6:	2100      	movs	r1, #0
    7ca8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    7caa:	2b04      	cmp	r3, #4
    7cac:	d808      	bhi.n	7cc0 <twinkle_update(LEDStruct&)+0x20>
    7cae:	e8df f003 	tbb	[pc, r3]
    7cb2:	2112      	.short	0x2112
    7cb4:	2703      	.short	0x2703
    7cb6:	09          	.byte	0x09
    7cb7:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg; //a
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
    7cb8:	4b18      	ldr	r3, [pc, #96]	; (7d1c <twinkle_update(LEDStruct&)+0x7c>)
    7cba:	881b      	ldrh	r3, [r3, #0]
    7cbc:	f880 3829 	strb.w	r3, [r0, #2089]	; 0x829
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    7cc0:	f7fa ba78 	b.w	21b4 <LEDDebug(LEDStruct&)>
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e
    7cc4:	4b15      	ldr	r3, [pc, #84]	; (7d1c <twinkle_update(LEDStruct&)+0x7c>)
    7cc6:	881b      	ldrh	r3, [r3, #0]
    7cc8:	3300      	adds	r3, #0
    7cca:	bf18      	it	ne
    7ccc:	2301      	movne	r3, #1
    7cce:	f880 382b 	strb.w	r3, [r0, #2091]	; 0x82b

	}
	LEDDebug(leds);
    7cd2:	f7fa ba6f 	b.w	21b4 <LEDDebug(LEDStruct&)>

void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:
			leds.use_full_range = (bool)update_arg; //a
    7cd6:	4b11      	ldr	r3, [pc, #68]	; (7d1c <twinkle_update(LEDStruct&)+0x7c>)
    7cd8:	881b      	ldrh	r3, [r3, #0]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	bf14      	ite	ne
    7cde:	2301      	movne	r3, #1
    7ce0:	2300      	moveq	r3, #0
    7ce2:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    7ce6:	bf14      	ite	ne
    7ce8:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    7cea:	234b      	moveq	r3, #75	; 0x4b
    7cec:	f8a0 3338 	strh.w	r3, [r0, #824]	; 0x338
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    7cf0:	f7fa ba60 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 0:
			leds.use_full_range = (bool)update_arg; //a
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
    7cf4:	4b09      	ldr	r3, [pc, #36]	; (7d1c <twinkle_update(LEDStruct&)+0x7c>)
    7cf6:	881b      	ldrh	r3, [r3, #0]
    7cf8:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    7cfc:	f7fa ba5a 	b.w	21b4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
    7d00:	4b06      	ldr	r3, [pc, #24]	; (7d1c <twinkle_update(LEDStruct&)+0x7c>)
    7d02:	881b      	ldrh	r3, [r3, #0]
    7d04:	3300      	adds	r3, #0
    7d06:	bf18      	it	ne
    7d08:	2301      	movne	r3, #1
    7d0a:	f880 382a 	strb.w	r3, [r0, #2090]	; 0x82a
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    7d0e:	f7fa ba51 	b.w	21b4 <LEDDebug(LEDStruct&)>
    7d12:	bf00      	nop
    7d14:	1fff9a18 	.word	0x1fff9a18
    7d18:	1fff91d1 	.word	0x1fff91d1
    7d1c:	1fff90d2 	.word	0x1fff90d2

00007d20 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)>:
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    7d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
    7d22:	f891 4828 	ldrb.w	r4, [r1, #2088]	; 0x828
    7d26:	f1c4 0408 	rsb	r4, r4, #8
    7d2a:	fa22 f404 	lsr.w	r4, r2, r4
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
    7d2e:	f3c4 2207 	ubfx	r2, r4, #8, #8
    7d32:	441a      	add	r2, r3
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    7d34:	460e      	mov	r6, r1
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
	slowcycle16 += sin8(slowcycle16);
    7d36:	b2d1      	uxtb	r1, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7d38:	064f      	lsls	r7, r1, #25
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    7d3a:	b085      	sub	sp, #20
    7d3c:	4605      	mov	r5, r0
    7d3e:	d55d      	bpl.n	7dfc <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xdc>
        offset = (uint8_t)255 - offset;
    7d40:	43c9      	mvns	r1, r1
    7d42:	b2c8      	uxtb	r0, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7d44:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    7d48:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7d4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7d4e:	4f2f      	ldr	r7, [pc, #188]	; (7e0c <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xec>)
    7d50:	1100      	asrs	r0, r0, #4
    7d52:	0040      	lsls	r0, r0, #1
    7d54:	eb07 0e00 	add.w	lr, r7, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7d58:	5c38      	ldrb	r0, [r7, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7d5a:	f89e 7001 	ldrb.w	r7, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7d5e:	fb17 f101 	smulbb	r1, r7, r1
    7d62:	eb00 1121 	add.w	r1, r0, r1, asr #4
    7d66:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    7d68:	0610      	lsls	r0, r2, #24
    7d6a:	bf48      	it	mi
    7d6c:	4249      	negmi	r1, r1
    7d6e:	b249      	sxtb	r1, r1
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
	slowcycle16 += sin8(slowcycle16);
	slowcycle16 = (slowcycle16 * 2053) + 1384;
    7d70:	3980      	subs	r1, #128	; 0x80
    7d72:	fa52 f281 	uxtab	r2, r2, r1
    7d76:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    7d7a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7d7e:	f502 62ad 	add.w	r2, r2, #1384	; 0x568
	uint8_t slowcycle8 = (slowcycle16 & 0xFF) + (slowcycle16 >> 8);
    7d82:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    7d86:	f002 02ff 	and.w	r2, r2, #255	; 0xff

	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
    7d8a:	f896 1829 	ldrb.w	r1, [r6, #2089]	; 0x829
    7d8e:	f3c2 0042 	ubfx	r0, r2, #1, #3
    7d92:	4288      	cmp	r0, r1
    7d94:	da2b      	bge.n	7dee <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xce>
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
    7d96:	b2e7      	uxtb	r7, r4
}


uint8_t attackDecayWave8(uint8_t i)
{
	if (i < 86) {
    7d98:	2f55      	cmp	r7, #85	; 0x55
    7d9a:	d923      	bls.n	7de4 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xc4>
		return i * 3;
	}
	else {
		i -= 86;
    7d9c:	f1a7 0156 	sub.w	r1, r7, #86	; 0x56
    7da0:	b2c9      	uxtb	r1, r1
		return 255 - (i + (i / 2));
    7da2:	eb01 0151 	add.w	r1, r1, r1, lsr #1
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    7da6:	1ad2      	subs	r2, r2, r3
	if (i < 86) {
		return i * 3;
	}
	else {
		i -= 86;
		return 255 - (i + (i / 2));
    7da8:	43c9      	mvns	r1, r1
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    7daa:	b2d2      	uxtb	r2, r2
	if (i < 86) {
		return i * 3;
	}
	else {
		i -= 86;
		return 255 - (i + (i / 2));
    7dac:	b2c9      	uxtb	r1, r1
	}

	uint8_t hue = slowcycle8 - salt;
	CRGB c;
	if (bright > 0) {
		c = ColorFromPalette(leds.current_palette, hue, bright, NOBLEND);
    7dae:	2000      	movs	r0, #0
    7db0:	460b      	mov	r3, r1
    7db2:	9000      	str	r0, [sp, #0]
    7db4:	f506 71e4 	add.w	r1, r6, #456	; 0x1c8
    7db8:	a803      	add	r0, sp, #12
    7dba:	f002 fb71 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    7dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7dc2:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    7dc6:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7dca:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    7dcc:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    7dce:	70ab      	strb	r3, [r5, #2]
		if (leds.cool_like_incandescent == 1) {
    7dd0:	f896 382a 	ldrb.w	r3, [r6, #2090]	; 0x82a
    7dd4:	b17b      	cbz	r3, 7df6 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;
    7dd6:	0623      	lsls	r3, r4, #24
    7dd8:	d50d      	bpl.n	7df6 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>
    7dda:	4639      	mov	r1, r7
    7ddc:	4628      	mov	r0, r5
    7dde:	f7f8 fb77 	bl	4d0 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.17]>
    7de2:	e008      	b.n	7df6 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>


uint8_t attackDecayWave8(uint8_t i)
{
	if (i < 86) {
		return i * 3;
    7de4:	eb07 0147 	add.w	r1, r7, r7, lsl #1
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
	CRGB c;
	if (bright > 0) {
    7de8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7dec:	d10b      	bne.n	7e06 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xe6>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    7dee:	2300      	movs	r3, #0
    7df0:	702b      	strb	r3, [r5, #0]
        g = (colorcode >>  8) & 0xFF;
    7df2:	706b      	strb	r3, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    7df4:	70ab      	strb	r3, [r5, #2]
	}
	else {
		c = CRGB::Black;
	}
	return c;
}
    7df6:	4628      	mov	r0, r5
    7df8:	b005      	add	sp, #20
    7dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7dfc:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7e00:	f001 010f 	and.w	r1, r1, #15
    7e04:	e7a3      	b.n	7d4e <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0x2e>
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    7e06:	1ad2      	subs	r2, r2, r3
    7e08:	b2d2      	uxtb	r2, r2
    7e0a:	e7d0      	b.n	7dae <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0x8e>
    7e0c:	0000e70c 	.word	0x0000e70c

00007e10 <twinkle(LEDStruct&)>:
	return c;
}



void twinkle(LEDStruct& leds) {
    7e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { twinkle_init(leds); }
    7e14:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	return c;
}



void twinkle(LEDStruct& leds) {
    7e18:	b08b      	sub	sp, #44	; 0x2c
    7e1a:	4683      	mov	fp, r0
	if (!leds.mode_initialized) { twinkle_init(leds); }
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d15e      	bne.n	7ede <twinkle(LEDStruct&)+0xce>
    7e20:	48d1      	ldr	r0, [pc, #836]	; (8168 <twinkle(LEDStruct&)+0x358>)
    7e22:	8803      	ldrh	r3, [r0, #0]
    7e24:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    7e28:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7e2c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    7e30:	3219      	adds	r2, #25
    7e32:	b292      	uxth	r2, r2
    7e34:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    7e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7e3c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7e40:	3319      	adds	r3, #25
    7e42:	b29b      	uxth	r3, r3
    7e44:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    7e48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7e4c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    7e50:	3119      	adds	r1, #25
    7e52:	b289      	uxth	r1, r1
    7e54:	eb01 2441 	add.w	r4, r1, r1, lsl #9
    7e58:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    7e5c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    7e60:	3419      	adds	r4, #25
    7e62:	b2a4      	uxth	r4, r4
    7e64:	eb04 2544 	add.w	r5, r4, r4, lsl #9
    7e68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7e6c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7e70:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    7e74:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7e76:	3519      	adds	r5, #25
    7e78:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7e7a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    7e7e:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    7e82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    7e86:	f3c2 16c0 	ubfx	r6, r2, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7e8a:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    7e8e:	f3c1 1281 	ubfx	r2, r1, #6, #2
    7e92:	121b      	asrs	r3, r3, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7e94:	eb05 2115 	add.w	r1, r5, r5, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7e98:	8005      	strh	r5, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    7e9a:	3303      	adds	r3, #3
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
    7e9c:	2501      	movs	r5, #1
	leds.mode_type			= TWINKLE;
    7e9e:	271b      	movs	r7, #27
}



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
    7ea0:	f3c1 10c0 	ubfx	r0, r1, #7, #1
    7ea4:	f3c4 11c0 	ubfx	r1, r4, #7, #1

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    7ea8:	240f      	movs	r4, #15

	leds.use_full_range		= ufr;
    7eaa:	f88b 61c4 	strb.w	r6, [fp, #452]	; 0x1c4
    7eae:	b2db      	uxtb	r3, r3
    7eb0:	3203      	adds	r2, #3
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
    7eb2:	f88b 522e 	strb.w	r5, [fp, #558]	; 0x22e
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
    7eb6:	f88b 522a 	strb.w	r5, [fp, #554]	; 0x22a
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= TWINKLE;
    7eba:	f88b 722d 	strb.w	r7, [fp, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    7ebe:	f88b 41c3 	strb.w	r4, [fp, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    7ec2:	2e00      	cmp	r6, #0
    7ec4:	f040 80e3 	bne.w	808e <twinkle(LEDStruct&)+0x27e>
	else					 { leds.strip_range = ONE_SIDE; }
    7ec8:	244b      	movs	r4, #75	; 0x4b
    7eca:	f8ab 4338 	strh.w	r4, [fp, #824]	; 0x338

	leds.twinkle_speed			= ts;
    7ece:	f88b 3828 	strb.w	r3, [fp, #2088]	; 0x828
	leds.twinkle_density		= td;
    7ed2:	f88b 2829 	strb.w	r2, [fp, #2089]	; 0x829
	leds.cool_like_incandescent = cli;
    7ed6:	f88b 182a 	strb.w	r1, [fp, #2090]	; 0x82a
	leds.auto_select_bg_color	= asbg;
    7eda:	f88b 082b 	strb.w	r0, [fp, #2091]	; 0x82b



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
	if (keyboard_update) { twinkle_update(leds); }
    7ede:	4ba3      	ldr	r3, [pc, #652]	; (816c <twinkle(LEDStruct&)+0x35c>)
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	f040 80d7 	bne.w	8096 <twinkle(LEDStruct&)+0x286>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ee8:	4aa1      	ldr	r2, [pc, #644]	; (8170 <twinkle(LEDStruct&)+0x360>)

	uint32_t clock32 = millis();

	CRGB bg;

	if ((leds.auto_select_bg_color == 1) && (leds.current_palette[0] == leds.current_palette[1])) {
    7eea:	f89b 382b 	ldrb.w	r3, [fp, #2091]	; 0x82b
    7eee:	6812      	ldr	r2, [r2, #0]
    7ef0:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    7ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7ef4:	9202      	str	r2, [sp, #8]
    7ef6:	b133      	cbz	r3, 7f06 <twinkle(LEDStruct&)+0xf6>
};


inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)
{
    return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
    7ef8:	f89b 11c8 	ldrb.w	r1, [fp, #456]	; 0x1c8
    7efc:	f89b 31cb 	ldrb.w	r3, [fp, #459]	; 0x1cb
    7f00:	428b      	cmp	r3, r1
    7f02:	f000 80cc 	beq.w	809e <twinkle(LEDStruct&)+0x28e>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    7f06:	2300      	movs	r3, #0
    7f08:	f88d 3018 	strb.w	r3, [sp, #24]
        g = (colorcode >>  8) & 0xFF;
    7f0c:	f88d 3019 	strb.w	r3, [sp, #25]
        b = (colorcode >>  0) & 0xFF;
    7f10:	f88d 301a 	strb.w	r3, [sp, #26]
    7f14:	9305      	str	r3, [sp, #20]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    7f16:	f8bb 3338 	ldrh.w	r3, [fp, #824]	; 0x338
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	f000 8091 	beq.w	8042 <twinkle(LEDStruct&)+0x232>
    7f20:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7f24:	9303      	str	r3, [sp, #12]
    7f26:	f04f 0a00 	mov.w	sl, #0
    7f2a:	f642 444a 	movw	r4, #11338	; 0x2c4a
    7f2e:	e030      	b.n	7f92 <twinkle(LEDStruct&)+0x182>
		int16_t deltabright = cbright - bg_bri;
		if (deltabright >= 32 || (!bg)) {
			leds.led_data[i] = c;
		}
		else if (deltabright > 0) {
			leds.led_data[i] = blend(bg, c, deltabright * 8);
    7f30:	9a05      	ldr	r2, [sp, #20]
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    7f32:	f89d 8018 	ldrb.w	r8, [sp, #24]
    7f36:	9704      	str	r7, [sp, #16]
    7f38:	1a9b      	subs	r3, r3, r2
    7f3a:	00db      	lsls	r3, r3, #3
    7f3c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    7f40:	aa07      	add	r2, sp, #28
    7f42:	a906      	add	r1, sp, #24
    7f44:	a808      	add	r0, sp, #32
    7f46:	f1b8 0f00 	cmp.w	r8, #0
    7f4a:	d106      	bne.n	7f5a <twinkle(LEDStruct&)+0x14a>
    7f4c:	f89d 5019 	ldrb.w	r5, [sp, #25]
    7f50:	b91d      	cbnz	r5, 7f5a <twinkle(LEDStruct&)+0x14a>

		CRGB c = computeOneTwinkle(leds, myclock30, myunique8);

		uint8_t cbright = c.getAverageLight();
		int16_t deltabright = cbright - bg_bri;
		if (deltabright >= 32 || (!bg)) {
    7f52:	f89d 501a 	ldrb.w	r5, [sp, #26]
    7f56:	2d00      	cmp	r5, #0
    7f58:	d063      	beq.n	8022 <twinkle(LEDStruct&)+0x212>
			leds.led_data[i] = c;
		}
		else if (deltabright > 0) {
    7f5a:	f1b9 0f00 	cmp.w	r9, #0
    7f5e:	f340 8088 	ble.w	8072 <twinkle(LEDStruct&)+0x262>
			leds.led_data[i] = blend(bg, c, deltabright * 8);
    7f62:	f002 fa6d 	bl	a440 <blend(CRGB const&, CRGB const&, unsigned char)>
    7f66:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    7f6a:	eb0b 0302 	add.w	r3, fp, r2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7f6e:	f89d 5020 	ldrb.w	r5, [sp, #32]
        g = rhs.g;
    7f72:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
        b = rhs.b;
    7f76:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7f7a:	f80b 5002 	strb.w	r5, [fp, r2]
        g = rhs.g;
    7f7e:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    7f80:	7099      	strb	r1, [r3, #2]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    7f82:	f10a 0a01 	add.w	sl, sl, #1
    7f86:	f8bb 3338 	ldrh.w	r3, [fp, #824]	; 0x338
    7f8a:	fa1f fa8a 	uxth.w	sl, sl
    7f8e:	4553      	cmp	r3, sl
    7f90:	d957      	bls.n	8042 <twinkle(LEDStruct&)+0x232>
		PRNG16 = (uint16_t)(PRNG16 * 2053) + 1384;
    7f92:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    7f96:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    7f9a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
    7f9e:	b29b      	uxth	r3, r3
		uint16_t myclockoffset16 = PRNG16;
		PRNG16 = (uint16_t)(PRNG16 * 2053) + 1384;
    7fa0:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    7fa4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    7fa8:	f504 64ad 	add.w	r4, r4, #1384	; 0x568
    7fac:	b2a4      	uxth	r4, r4
		uint8_t myspeedmultiplierQ5_3 = ((((PRNG16 & 0xFF) >> 4) + (PRNG16 & 0x0F)) & 0x0F) + 0x08;
		uint32_t myclock30 = (uint32_t)((clock32 * myspeedmultiplierQ5_3) >> 3) + myclockoffset16;
		uint8_t myunique8 = PRNG16 >> 8;

		CRGB c = computeOneTwinkle(leds, myclock30, myunique8);
    7fae:	eb04 1214 	add.w	r2, r4, r4, lsr #4
    7fb2:	9902      	ldr	r1, [sp, #8]
    7fb4:	f002 020f 	and.w	r2, r2, #15
    7fb8:	3208      	adds	r2, #8
    7fba:	fb01 f202 	mul.w	r2, r1, r2
    7fbe:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    7fc2:	4659      	mov	r1, fp
    7fc4:	0a23      	lsrs	r3, r4, #8
    7fc6:	a807      	add	r0, sp, #28
    7fc8:	f7ff feaa 	bl	7d20 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)>
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
    7fcc:	f89d 601d 	ldrb.w	r6, [sp, #29]
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    7fd0:	f89d 301e 	ldrb.w	r3, [sp, #30]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    7fd4:	f89d e01c 	ldrb.w	lr, [sp, #28]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    7fd8:	9301      	str	r3, [sp, #4]
    7fda:	b230      	sxth	r0, r6
    7fdc:	461d      	mov	r5, r3
    7fde:	fa0f f18e 	sxth.w	r1, lr
    7fe2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    7fe6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    7fea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7fee:	b22f      	sxth	r7, r5
    7ff0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    7ff4:	4410      	add	r0, r2
    7ff6:	4419      	add	r1, r3
    7ff8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    7ffc:	1200      	asrs	r0, r0, #8
    7ffe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8002:	eb00 2221 	add.w	r2, r0, r1, asr #8
    8006:	443b      	add	r3, r7
    8008:	eb02 2323 	add.w	r3, r2, r3, asr #8

		uint8_t cbright = c.getAverageLight();
		int16_t deltabright = cbright - bg_bri;
    800c:	9a03      	ldr	r2, [sp, #12]
    800e:	b2db      	uxtb	r3, r3
    8010:	ebc2 0903 	rsb	r9, r2, r3
    8014:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
		if (deltabright >= 32 || (!bg)) {
    8018:	f1b9 0f1f 	cmp.w	r9, #31
    801c:	eb0b 0c07 	add.w	ip, fp, r7
    8020:	dd86      	ble.n	7f30 <twinkle(LEDStruct&)+0x120>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8022:	f80b e007 	strb.w	lr, [fp, r7]
        g = rhs.g;
        b = rhs.b;
    8026:	f89d 3004 	ldrb.w	r3, [sp, #4]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    802a:	f88c 6001 	strb.w	r6, [ip, #1]
        b = rhs.b;
    802e:	f88c 3002 	strb.w	r3, [ip, #2]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    8032:	f10a 0a01 	add.w	sl, sl, #1
    8036:	f8bb 3338 	ldrh.w	r3, [fp, #824]	; 0x338
    803a:	fa1f fa8a 	uxth.w	sl, sl
    803e:	4553      	cmp	r3, sl
    8040:	d8a7      	bhi.n	7f92 <twinkle(LEDStruct&)+0x182>
		else {
			leds.led_data[i] = bg;
		}
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    8042:	f89b 31c4 	ldrb.w	r3, [fp, #452]	; 0x1c4
    8046:	b98b      	cbnz	r3, 806c <twinkle(LEDStruct&)+0x25c>
    8048:	465a      	mov	r2, fp
    804a:	f10b 00e1 	add.w	r0, fp, #225	; 0xe1
    804e:	465b      	mov	r3, fp
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8050:	7819      	ldrb	r1, [r3, #0]
    8052:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    8056:	7859      	ldrb	r1, [r3, #1]
    8058:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    805c:	7899      	ldrb	r1, [r3, #2]
    805e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    8062:	3303      	adds	r3, #3
    8064:	4283      	cmp	r3, r0
    8066:	f1a2 0203 	sub.w	r2, r2, #3
    806a:	d1f1      	bne.n	8050 <twinkle(LEDStruct&)+0x240>
}
    806c:	b00b      	add	sp, #44	; 0x2c
    806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8072:	9904      	ldr	r1, [sp, #16]
        g = rhs.g;
    8074:	f89d 2019 	ldrb.w	r2, [sp, #25]
        b = rhs.b;
    8078:	f89d 301a 	ldrb.w	r3, [sp, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    807c:	f80b 8001 	strb.w	r8, [fp, r1]
    8080:	eb0b 0c01 	add.w	ip, fp, r1
        g = rhs.g;
    8084:	f88c 2001 	strb.w	r2, [ip, #1]
        b = rhs.b;
    8088:	f88c 3002 	strb.w	r3, [ip, #2]
    808c:	e779      	b.n	7f82 <twinkle(LEDStruct&)+0x172>
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    808e:	2496      	movs	r4, #150	; 0x96
    8090:	f8ab 4338 	strh.w	r4, [fp, #824]	; 0x338
    8094:	e71b      	b.n	7ece <twinkle(LEDStruct&)+0xbe>



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
	if (keyboard_update) { twinkle_update(leds); }
    8096:	4658      	mov	r0, fp
    8098:	f7ff fe02 	bl	7ca0 <twinkle_update(LEDStruct&)>
    809c:	e724      	b.n	7ee8 <twinkle(LEDStruct&)+0xd8>
};


inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)
{
    return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
    809e:	f89b 41cc 	ldrb.w	r4, [fp, #460]	; 0x1cc
    80a2:	f89b 31c9 	ldrb.w	r3, [fp, #457]	; 0x1c9
    80a6:	42a3      	cmp	r3, r4
    80a8:	f47f af2d 	bne.w	7f06 <twinkle(LEDStruct&)+0xf6>
    80ac:	f89b 51cd 	ldrb.w	r5, [fp, #461]	; 0x1cd
    80b0:	f89b 31ca 	ldrb.w	r3, [fp, #458]	; 0x1ca
    80b4:	42ab      	cmp	r3, r5
    80b6:	f47f af26 	bne.w	7f06 <twinkle(LEDStruct&)+0xf6>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    80ba:	b20e      	sxth	r6, r1
    80bc:	b227      	sxth	r7, r4
    80be:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    80c2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    80c6:	b228      	sxth	r0, r5
    80c8:	eb02 1e02 	add.w	lr, r2, r2, lsl #4
    80cc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    80d0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    80d4:	44b6      	add	lr, r6
    80d6:	443a      	add	r2, r7
    80d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    80dc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    80e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
    80e4:	4403      	add	r3, r0
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    80e6:	eb0e 0c02 	add.w	ip, lr, r2
    80ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
    80ee:	449c      	add	ip, r3
    80f0:	fa5f fc8c 	uxtb.w	ip, ip
	CRGB bg;

	if ((leds.auto_select_bg_color == 1) && (leds.current_palette[0] == leds.current_palette[1])) {
		bg = leds.current_palette[0];
		uint8_t bglight = bg.getAverageLight();
		if (bglight > 64) {
    80f4:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    80f8:	d86c      	bhi.n	81d4 <twinkle(LEDStruct&)+0x3c4>
			bg.nscale8_video(16);
		}
		else if (bglight > 16) {
    80fa:	f1bc 0f10 	cmp.w	ip, #16
    80fe:	d939      	bls.n	8174 <twinkle(LEDStruct&)+0x364>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8100:	2900      	cmp	r1, #0
    8102:	f000 808a 	beq.w	821a <twinkle(LEDStruct&)+0x40a>
    8106:	10b1      	asrs	r1, r6, #2
    8108:	3101      	adds	r1, #1
    810a:	b2c9      	uxtb	r1, r1
    810c:	b20b      	sxth	r3, r1
    810e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8112:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    8116:	4413      	add	r3, r2
    8118:	f3c3 2307 	ubfx	r3, r3, #8, #8
    811c:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8120:	2c00      	cmp	r4, #0
    8122:	d078      	beq.n	8216 <twinkle(LEDStruct&)+0x406>
    8124:	10bc      	asrs	r4, r7, #2
    8126:	3401      	adds	r4, #1
    8128:	b2e4      	uxtb	r4, r4
    812a:	b222      	sxth	r2, r4
    812c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8130:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8134:	440a      	add	r2, r1
    8136:	f3c2 2207 	ubfx	r2, r2, #8, #8
    813a:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    813e:	2d00      	cmp	r5, #0
    8140:	d067      	beq.n	8212 <twinkle(LEDStruct&)+0x402>
    8142:	1085      	asrs	r5, r0, #2
    8144:	3501      	adds	r5, #1
    8146:	b2ed      	uxtb	r5, r5
    8148:	b229      	sxth	r1, r5
    814a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    814e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    8152:	4401      	add	r1, r0
    8154:	f3c1 2107 	ubfx	r1, r1, #8, #8
    8158:	4413      	add	r3, r2
    815a:	440b      	add	r3, r1
    815c:	b2db      	uxtb	r3, r3
    815e:	9305      	str	r3, [sp, #20]
    8160:	f88d 501a 	strb.w	r5, [sp, #26]
    8164:	e6d7      	b.n	7f16 <twinkle(LEDStruct&)+0x106>
    8166:	bf00      	nop
    8168:	1fff8784 	.word	0x1fff8784
    816c:	1fff91d1 	.word	0x1fff91d1
    8170:	1ffface8 	.word	0x1ffface8
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8174:	2900      	cmp	r1, #0
    8176:	d054      	beq.n	8222 <twinkle(LEDStruct&)+0x412>
    8178:	f10e 0101 	add.w	r1, lr, #1
    817c:	b2c9      	uxtb	r1, r1
    817e:	b208      	sxth	r0, r1
    8180:	eb00 0680 	add.w	r6, r0, r0, lsl #2
    8184:	eb06 1606 	add.w	r6, r6, r6, lsl #4
    8188:	4430      	add	r0, r6
    818a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    818e:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8192:	2c00      	cmp	r4, #0
    8194:	d043      	beq.n	821e <twinkle(LEDStruct&)+0x40e>
    8196:	3201      	adds	r2, #1
    8198:	b2d4      	uxtb	r4, r2
    819a:	b222      	sxth	r2, r4
    819c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    81a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    81a4:	440a      	add	r2, r1
    81a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    81aa:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    81ae:	2d00      	cmp	r5, #0
    81b0:	d03d      	beq.n	822e <twinkle(LEDStruct&)+0x41e>
    81b2:	3301      	adds	r3, #1
    81b4:	b2dd      	uxtb	r5, r3
    81b6:	b229      	sxth	r1, r5
    81b8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    81bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    81c0:	4419      	add	r1, r3
    81c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    81c6:	1883      	adds	r3, r0, r2
    81c8:	440b      	add	r3, r1
    81ca:	b2db      	uxtb	r3, r3
    81cc:	9305      	str	r3, [sp, #20]
    81ce:	f88d 501a 	strb.w	r5, [sp, #26]
    81d2:	e6a0      	b.n	7f16 <twinkle(LEDStruct&)+0x106>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    81d4:	b349      	cbz	r1, 822a <twinkle(LEDStruct&)+0x41a>
    81d6:	1131      	asrs	r1, r6, #4
    81d8:	3101      	adds	r1, #1
    81da:	b2c9      	uxtb	r1, r1
    81dc:	b20b      	sxth	r3, r1
    81de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    81e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    81e6:	4413      	add	r3, r2
    81e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    81ec:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    81f0:	b1cc      	cbz	r4, 8226 <twinkle(LEDStruct&)+0x416>
    81f2:	113c      	asrs	r4, r7, #4
    81f4:	3401      	adds	r4, #1
    81f6:	b2e4      	uxtb	r4, r4
    81f8:	b222      	sxth	r2, r4
    81fa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    81fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8202:	440a      	add	r2, r1
    8204:	f3c2 2207 	ubfx	r2, r2, #8, #8
    8208:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    820c:	b10d      	cbz	r5, 8212 <twinkle(LEDStruct&)+0x402>
    820e:	1105      	asrs	r5, r0, #4
    8210:	e798      	b.n	8144 <twinkle(LEDStruct&)+0x334>
    8212:	4629      	mov	r1, r5
    8214:	e7a0      	b.n	8158 <twinkle(LEDStruct&)+0x348>
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8216:	4622      	mov	r2, r4
    8218:	e78f      	b.n	813a <twinkle(LEDStruct&)+0x32a>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    821a:	460b      	mov	r3, r1
    821c:	e77e      	b.n	811c <twinkle(LEDStruct&)+0x30c>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    821e:	4622      	mov	r2, r4
    8220:	e7c3      	b.n	81aa <twinkle(LEDStruct&)+0x39a>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8222:	4608      	mov	r0, r1
    8224:	e7b3      	b.n	818e <twinkle(LEDStruct&)+0x37e>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8226:	4622      	mov	r2, r4
    8228:	e7ee      	b.n	8208 <twinkle(LEDStruct&)+0x3f8>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    822a:	460b      	mov	r3, r1
    822c:	e7de      	b.n	81ec <twinkle(LEDStruct&)+0x3dc>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    822e:	4629      	mov	r1, r5
    8230:	e7c9      	b.n	81c6 <twinkle(LEDStruct&)+0x3b6>
    8232:	bf00      	nop

00008234 <plasma_update(LEDStruct&)>:


void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;

	switch (update_var) {
    8234:	4b19      	ldr	r3, [pc, #100]	; (829c <plasma_update(LEDStruct&)+0x68>)
	leds.plasma_range2  = r2;
}


void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;
    8236:	4a1a      	ldr	r2, [pc, #104]	; (82a0 <plasma_update(LEDStruct&)+0x6c>)

	switch (update_var) {
    8238:	781b      	ldrb	r3, [r3, #0]
	leds.plasma_range2  = r2;
}


void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;
    823a:	2100      	movs	r1, #0
    823c:	7011      	strb	r1, [r2, #0]

	switch (update_var) {
    823e:	2b05      	cmp	r3, #5
    8240:	d808      	bhi.n	8254 <plasma_update(LEDStruct&)+0x20>
    8242:	e8df f003 	tbb	[pc, r3]
    8246:	180f      	.short	0x180f
    8248:	0924031e 	.word	0x0924031e
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
    824c:	4b15      	ldr	r3, [pc, #84]	; (82a4 <plasma_update(LEDStruct&)+0x70>)
    824e:	881b      	ldrh	r3, [r3, #0]
    8250:	f880 3836 	strb.w	r3, [r0, #2102]	; 0x836
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    8254:	f7f9 bfae 	b.w	21b4 <LEDDebug(LEDStruct&)>
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
    8258:	4b12      	ldr	r3, [pc, #72]	; (82a4 <plasma_update(LEDStruct&)+0x70>)
    825a:	881b      	ldrh	r3, [r3, #0]
    825c:	f880 383a 	strb.w	r3, [r0, #2106]	; 0x83a
		default: break;
	}
	LEDDebug(leds);
    8260:	f7f9 bfa8 	b.w	21b4 <LEDDebug(LEDStruct&)>

void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;

	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
    8264:	4b0f      	ldr	r3, [pc, #60]	; (82a4 <plasma_update(LEDStruct&)+0x70>)
    8266:	881b      	ldrh	r3, [r3, #0]
    8268:	3300      	adds	r3, #0
    826a:	bf18      	it	ne
    826c:	2301      	movne	r3, #1
    826e:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    8272:	f7f9 bf9f 	b.w	21b4 <LEDDebug(LEDStruct&)>
void plasma_update(LEDStruct& leds) {
	keyboard_update = 0;

	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
    8276:	4b0b      	ldr	r3, [pc, #44]	; (82a4 <plasma_update(LEDStruct&)+0x70>)
    8278:	881b      	ldrh	r3, [r3, #0]
    827a:	f880 3834 	strb.w	r3, [r0, #2100]	; 0x834
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    827e:	f7f9 bf99 	b.w	21b4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;

	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
    8282:	4b08      	ldr	r3, [pc, #32]	; (82a4 <plasma_update(LEDStruct&)+0x70>)
    8284:	881b      	ldrh	r3, [r3, #0]
    8286:	f880 3835 	strb.w	r3, [r0, #2101]	; 0x835
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    828a:	f7f9 bf93 	b.w	21b4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:	leds.use_full_range = (bool)update_arg; break; //a
		case 1: leds.plasma_beat1 = (uint8_t)update_arg; break; //b
		case 2: leds.plasma_beat2 = (uint8_t)update_arg; break; //c
		case 3: leds.plasma_beat3 = (uint8_t)update_arg; break; //d
		case 4: leds.plasma_range1 = (uint8_t)update_arg; break; //e
    828e:	4b05      	ldr	r3, [pc, #20]	; (82a4 <plasma_update(LEDStruct&)+0x70>)
    8290:	881b      	ldrh	r3, [r3, #0]
    8292:	f880 3839 	strb.w	r3, [r0, #2105]	; 0x839
		case 5: leds.plasma_range2 = (uint8_t)update_arg; break; //f
		default: break;
	}
	LEDDebug(leds);
    8296:	f7f9 bf8d 	b.w	21b4 <LEDDebug(LEDStruct&)>
    829a:	bf00      	nop
    829c:	1fff9a18 	.word	0x1fff9a18
    82a0:	1fff91d1 	.word	0x1fff91d1
    82a4:	1fff90d2 	.word	0x1fff90d2

000082a8 <plasma(LEDStruct&)>:
}



void plasma(LEDStruct& leds) {
    82a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { plasma_init(leds); }
    82ac:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void plasma(LEDStruct& leds) {
    82b0:	b08b      	sub	sp, #44	; 0x2c
    82b2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { plasma_init(leds); }
    82b4:	2b00      	cmp	r3, #0
    82b6:	d175      	bne.n	83a4 <plasma(LEDStruct&)+0xfc>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    82b8:	4dc6      	ldr	r5, [pc, #792]	; (85d4 <plasma(LEDStruct&)+0x32c>)
    82ba:	882b      	ldrh	r3, [r5, #0]
    82bc:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    82c0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    82c4:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    82c8:	3619      	adds	r6, #25
    82ca:	b2b6      	uxth	r6, r6
    82cc:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    82d0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    82d4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    82d8:	3119      	adds	r1, #25
    82da:	b289      	uxth	r1, r1
    82dc:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    82e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    82e4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    82e8:	3219      	adds	r2, #25
    82ea:	b292      	uxth	r2, r2
    82ec:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    82f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    82f4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    82f8:	3319      	adds	r3, #25
    82fa:	b29b      	uxth	r3, r3
    82fc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8304:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8308:	3019      	adds	r0, #25
    830a:	b280      	uxth	r0, r0
    830c:	eb00 2740 	add.w	r7, r0, r0, lsl #9
    8310:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    8314:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    8318:	3719      	adds	r7, #25
    831a:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    831c:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
    8320:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    8324:	fa5f fe8e 	uxtb.w	lr, lr
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8328:	f3c6 16c0 	ubfx	r6, r6, #7, #1
    832c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8330:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    8334:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8338:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    833c:	b2c0      	uxtb	r0, r0
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    833e:	b2c9      	uxtb	r1, r1
	leds.plasma_beat2	= b2;
    8340:	b2d2      	uxtb	r2, r2
	leds.plasma_beat3	= b3;
    8342:	b2db      	uxtb	r3, r3
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8344:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    8348:	eb0e 06ce 	add.w	r6, lr, lr, lsl #3
    834c:	ebce 06c6 	rsb	r6, lr, r6, lsl #3
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    8350:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	leds.plasma_beat2	= b2;
    8354:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
	leds.plasma_beat3	= b3;
    8358:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.plasma_range1	= r1;
    835c:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    8360:	1189      	asrs	r1, r1, #6
	leds.plasma_beat2	= b2;
    8362:	1192      	asrs	r2, r2, #6
	leds.plasma_beat3	= b3;
    8364:	119b      	asrs	r3, r3, #6
	leds.plasma_range1	= r1;
    8366:	ebc0 00ce 	rsb	r0, r0, lr, lsl #3
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    836a:	310d      	adds	r1, #13
	leds.plasma_beat2	= b2;
    836c:	320d      	adds	r2, #13
	leds.plasma_beat3	= b3;
    836e:	3303      	adds	r3, #3
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    8370:	1236      	asrs	r6, r6, #8

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    8372:	1200      	asrs	r0, r0, #8
	leds.plasma_range2  = r2;
    8374:	361e      	adds	r6, #30

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    8376:	301e      	adds	r0, #30
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
    8378:	f884 1834 	strb.w	r1, [r4, #2100]	; 0x834
	leds.plasma_beat2	= b2;
    837c:	f884 2835 	strb.w	r2, [r4, #2101]	; 0x835
#ifndef PLASMA_H
#define PLASMA_H


void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
    8380:	2101      	movs	r1, #1
	leds.mode_type			= PLASMA;
    8382:	221c      	movs	r2, #28
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
    8384:	f884 3836 	strb.w	r3, [r4, #2102]	; 0x836

void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    8388:	230f      	movs	r3, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    838a:	802f      	strh	r7, [r5, #0]
	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
	leds.plasma_range2  = r2;
    838c:	f884 683a 	strb.w	r6, [r4, #2106]	; 0x83a

	leds.use_full_range = ufr;
	leds.plasma_beat1	= b1;
	leds.plasma_beat2	= b2;
	leds.plasma_beat3	= b3;
	leds.plasma_range1	= r1;
    8390:	f884 0839 	strb.w	r0, [r4, #2105]	; 0x839
#ifndef PLASMA_H
#define PLASMA_H


void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
    8394:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= PLASMA;
	leds.use_palette		= 1;
    8398:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
#define PLASMA_H


void plasma_init(LEDStruct& leds, bool ufr = random8(2), uint8_t b1 = random8(13,41),  uint8_t b2 = random8(13,41), uint8_t b3 = random8(3,31), int r1 = random8(30,101), int r2 = random8(30,101)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PLASMA;
    839c:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    83a0:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3



void plasma(LEDStruct& leds) {
	if (!leds.mode_initialized) { plasma_init(leds); }
	if (keyboard_update) { plasma_update(leds); }
    83a4:	4b8c      	ldr	r3, [pc, #560]	; (85d8 <plasma(LEDStruct&)+0x330>)
    83a6:	781b      	ldrb	r3, [r3, #0]
    83a8:	2b00      	cmp	r3, #0
    83aa:	f040 816f 	bne.w	868c <plasma(LEDStruct&)+0x3e4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    83ae:	f8df 9230 	ldr.w	r9, [pc, #560]	; 85e0 <plasma(LEDStruct&)+0x338>

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
    83b2:	f894 3834 	ldrb.w	r3, [r4, #2100]	; 0x834
    83b6:	f8d9 2000 	ldr.w	r2, [r9]
    83ba:	9207      	str	r2, [sp, #28]
	return ret;
    83bc:	9807      	ldr	r0, [sp, #28]
    83be:	f894 2839 	ldrb.w	r2, [r4, #2105]	; 0x839
    83c2:	f44f 718c 	mov.w	r1, #280	; 0x118
    83c6:	021b      	lsls	r3, r3, #8
    83c8:	fb01 f000 	mul.w	r0, r1, r0
    83cc:	fb03 f000 	mul.w	r0, r3, r0
    83d0:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    83d2:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    83d4:	065d      	lsls	r5, r3, #25
    83d6:	f140 8154 	bpl.w	8682 <plasma(LEDStruct&)+0x3da>
        offset = (uint8_t)255 - offset;
    83da:	43db      	mvns	r3, r3
    83dc:	b2dd      	uxtb	r5, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    83de:	f005 030f 	and.w	r3, r5, #15
    if( theta & 0x40) secoffset++;
    83e2:	1c59      	adds	r1, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    83e4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    83e8:	112b      	asrs	r3, r5, #4
    83ea:	4e7c      	ldr	r6, [pc, #496]	; (85dc <plasma(LEDStruct&)+0x334>)
    83ec:	005b      	lsls	r3, r3, #1
    83ee:	18f5      	adds	r5, r6, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    83f0:	5cf3      	ldrb	r3, [r6, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    83f2:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    83f4:	fb15 f101 	smulbb	r1, r5, r1
    83f8:	eb03 1321 	add.w	r3, r3, r1, asr #4
    83fc:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    83fe:	0601      	lsls	r1, r0, #24
    8400:	bf48      	it	mi
    8402:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8404:	f8d9 1000 	ldr.w	r1, [r9]
    8408:	9106      	str	r1, [sp, #24]
    840a:	b25b      	sxtb	r3, r3
    840c:	0050      	lsls	r0, r2, #1
    840e:	3b80      	subs	r3, #128	; 0x80
    8410:	b2c0      	uxtb	r0, r0
	return ret;
    8412:	9d06      	ldr	r5, [sp, #24]
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);
    8414:	f894 1835 	ldrb.w	r1, [r4, #2101]	; 0x835

void plasma(LEDStruct& leds) {
	if (!leds.mode_initialized) { plasma_init(leds); }
	if (keyboard_update) { plasma_update(leds); }

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
    8418:	b2db      	uxtb	r3, r3
    841a:	fb00 3303 	mla	r3, r0, r3, r3
    841e:	f44f 708c 	mov.w	r0, #280	; 0x118
    8422:	fb00 f505 	mul.w	r5, r0, r5
    8426:	0209      	lsls	r1, r1, #8
    8428:	fb01 f505 	mul.w	r5, r1, r5
    842c:	0e2d      	lsrs	r5, r5, #24
    842e:	ebc2 2223 	rsb	r2, r2, r3, asr #8
    8432:	b2eb      	uxtb	r3, r5
    8434:	b2d2      	uxtb	r2, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    8436:	065f      	lsls	r7, r3, #25
    8438:	f8c4 282c 	str.w	r2, [r4, #2092]	; 0x82c
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);
    843c:	f894 083a 	ldrb.w	r0, [r4, #2106]	; 0x83a
    8440:	f140 811a 	bpl.w	8678 <plasma(LEDStruct&)+0x3d0>
        offset = (uint8_t)255 - offset;
    8444:	43db      	mvns	r3, r3
    8446:	b2df      	uxtb	r7, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8448:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    844c:	1c59      	adds	r1, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    844e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    8452:	113b      	asrs	r3, r7, #4
    8454:	005b      	lsls	r3, r3, #1
    8456:	18f7      	adds	r7, r6, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8458:	5cf3      	ldrb	r3, [r6, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    845a:	787f      	ldrb	r7, [r7, #1]
    845c:	9403      	str	r4, [sp, #12]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    845e:	fb17 f101 	smulbb	r1, r7, r1
    8462:	eb03 1321 	add.w	r3, r3, r1, asr #4
    8466:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    8468:	0629      	lsls	r1, r5, #24
    846a:	bf48      	it	mi
    846c:	425b      	negmi	r3, r3
    846e:	b25b      	sxtb	r3, r3
    8470:	0041      	lsls	r1, r0, #1
    8472:	3b80      	subs	r3, #128	; 0x80
    8474:	b2db      	uxtb	r3, r3
    8476:	b2c9      	uxtb	r1, r1
    8478:	fb01 3303 	mla	r3, r1, r3, r3
    847c:	ebc0 2023 	rsb	r0, r0, r3, asr #8
    8480:	b2c0      	uxtb	r0, r0
    8482:	f504 73e1 	add.w	r3, r4, #450	; 0x1c2
    8486:	f8c4 0830 	str.w	r0, [r4, #2096]	; 0x830
    848a:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    848e:	4625      	mov	r5, r4
    8490:	2700      	movs	r7, #0
    8492:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    8496:	4698      	mov	r8, r3
    8498:	e06b      	b.n	8572 <plasma(LEDStruct&)+0x2ca>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    849a:	43ca      	mvns	r2, r1
    849c:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    849e:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    84a2:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    84a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    84a8:	1112      	asrs	r2, r2, #4
    84aa:	0052      	lsls	r2, r2, #1
    84ac:	eb06 0e02 	add.w	lr, r6, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    84b0:	5cb2      	ldrb	r2, [r6, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    84b2:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    84b6:	fb1e f000 	smulbb	r0, lr, r0
    84ba:	eb02 1020 	add.w	r0, r2, r0, asr #4
    84be:	b2c0      	uxtb	r0, r0
    if( theta & 0x80 ) y = -y;
    84c0:	060a      	lsls	r2, r1, #24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    84c2:	f8d9 1000 	ldr.w	r1, [r9]
    84c6:	9108      	str	r1, [sp, #32]
    84c8:	bf48      	it	mi
    84ca:	4240      	negmi	r0, r0
    84cc:	b242      	sxtb	r2, r0
	return ret;
    84ce:	9908      	ldr	r1, [sp, #32]

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    84d0:	f894 0836 	ldrb.w	r0, [r4, #2102]	; 0x836
    84d4:	fb0a fe01 	mul.w	lr, sl, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    84d8:	0200      	lsls	r0, r0, #8
    84da:	fb00 fe0e 	mul.w	lr, r0, lr

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
    84de:	3a80      	subs	r2, #128	; 0x80
    84e0:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    84e4:	f3c2 0246 	ubfx	r2, r2, #1, #7
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    84e8:	fa5f f18e 	uxtb.w	r1, lr
    84ec:	441a      	add	r2, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    84ee:	064b      	lsls	r3, r1, #25
    84f0:	f884 2837 	strb.w	r2, [r4, #2103]	; 0x837
    84f4:	d568      	bpl.n	85c8 <plasma(LEDStruct&)+0x320>
        offset = (uint8_t)255 - offset;
    84f6:	43c9      	mvns	r1, r1
    84f8:	b2cb      	uxtb	r3, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    84fa:	f003 010f 	and.w	r1, r3, #15
    if( theta & 0x40) secoffset++;
    84fe:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    8504:	111b      	asrs	r3, r3, #4
    8506:	005b      	lsls	r3, r3, #1
    8508:	eb06 0c03 	add.w	ip, r6, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    850c:	5cf3      	ldrb	r3, [r6, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    850e:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8512:	fb1c f101 	smulbb	r1, ip, r1
    8516:	eb03 1121 	add.w	r1, r3, r1, asr #4
    851a:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    851c:	f01e 0f80 	tst.w	lr, #128	; 0x80
    8520:	bf18      	it	ne
    8522:	4249      	negne	r1, r1
    8524:	b249      	sxtb	r1, r1

    y += 128;
    8526:	3980      	subs	r1, #128	; 0x80
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    8528:	b2c9      	uxtb	r1, r1
    852a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    852e:	eb01 1143 	add.w	r1, r1, r3, lsl #5
    8532:	f3c1 2107 	ubfx	r1, r1, #8, #8
    8536:	428a      	cmp	r2, r1
    8538:	d854      	bhi.n	85e4 <plasma(LEDStruct&)+0x33c>
    853a:	2300      	movs	r3, #0

		leds.led_data[k] = ColorFromPalette(leds.current_palette, leds.plasma_index, leds.plasma_bright, leds.current_blending);
    853c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    8540:	f884 3838 	strb.w	r3, [r4, #2104]	; 0x838

		leds.led_data[k] = ColorFromPalette(leds.current_palette, leds.plasma_index, leds.plasma_bright, leds.current_blending);
    8544:	a805      	add	r0, sp, #20
    8546:	9100      	str	r1, [sp, #0]
    8548:	4659      	mov	r1, fp
    854a:	f001 ffa9 	bl	a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    854e:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    8552:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    8556:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    855a:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    855c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    855e:	70ab      	strb	r3, [r5, #2]
    8560:	3503      	adds	r5, #3
	if (keyboard_update) { plasma_update(leds); }

	leds.plasma_phase1 = beatsin8(leds.plasma_beat1, (0 - leds.plasma_range1), leds.plasma_range1);
	leds.plasma_phase2 = beatsin8(leds.plasma_beat2, (0 - leds.plasma_range2), leds.plasma_range2);

	for (uint16_t k = 0; k < NUM_LEDS; k++) {
    8562:	45a8      	cmp	r8, r5
    8564:	f107 0701 	add.w	r7, r7, #1
    8568:	d06e      	beq.n	8648 <plasma(LEDStruct&)+0x3a0>
    856a:	f8d4 282c 	ldr.w	r2, [r4, #2092]	; 0x82c
    856e:	f8d4 0830 	ldr.w	r0, [r4, #2096]	; 0x830
    8572:	b2f9      	uxtb	r1, r7
		leds.plasma_index = cubicwave8((k * 23) + leds.plasma_phase1) / 2 + cos8((k * 15) + leds.plasma_phase2) / 2;
    8574:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    8578:	ebc1 03c3 	rsb	r3, r1, r3, lsl #3
    857c:	4413      	add	r3, r2
    857e:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    8580:	061a      	lsls	r2, r3, #24
        in = 255 - in;
    8582:	bf44      	itt	mi
    8584:	43db      	mvnmi	r3, r3
    8586:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    8588:	005b      	lsls	r3, r3, #1
    858a:	b2db      	uxtb	r3, r3
    858c:	1c5a      	adds	r2, r3, #1
    858e:	fb02 f303 	mul.w	r3, r2, r3
    8592:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    8594:	fb03 f202 	mul.w	r2, r3, r2
    8598:	1212      	asrs	r2, r2, #8
    859a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    859e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
///
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t cos8( uint8_t theta)
{
    return sin8( theta + 64);
    85a2:	3040      	adds	r0, #64	; 0x40
    85a4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    85a8:	b29b      	uxth	r3, r3
    85aa:	4401      	add	r1, r0
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    85ac:	05da      	lsls	r2, r3, #23
    85ae:	b2c9      	uxtb	r1, r1
    85b0:	bf54      	ite	pl
    85b2:	f3c3 0346 	ubfxpl	r3, r3, #1, #7
    85b6:	237f      	movmi	r3, #127	; 0x7f
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    85b8:	0648      	lsls	r0, r1, #25
    85ba:	f53f af6e 	bmi.w	849a <plasma(LEDStruct&)+0x1f2>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    85be:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    85c2:	f001 000f 	and.w	r0, r1, #15
    85c6:	e76f      	b.n	84a8 <plasma(LEDStruct&)+0x200>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    85c8:	f001 033f 	and.w	r3, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    85cc:	f001 010f 	and.w	r1, r1, #15
    85d0:	e798      	b.n	8504 <plasma(LEDStruct&)+0x25c>
    85d2:	bf00      	nop
    85d4:	1fff8784 	.word	0x1fff8784
    85d8:	1fff91d1 	.word	0x1fff91d1
    85dc:	0000e70c 	.word	0x0000e70c
    85e0:	1ffface8 	.word	0x1ffface8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    85e4:	f8d9 3000 	ldr.w	r3, [r9]
    85e8:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    85ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    85ec:	fb0a f303 	mul.w	r3, sl, r3
    85f0:	fb00 f003 	mul.w	r0, r0, r3
    85f4:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    85f6:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    85f8:	0659      	lsls	r1, r3, #25
    85fa:	d520      	bpl.n	863e <plasma(LEDStruct&)+0x396>
        offset = (uint8_t)255 - offset;
    85fc:	43d9      	mvns	r1, r3
    85fe:	b2c9      	uxtb	r1, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8600:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    8604:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8606:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    860a:	1109      	asrs	r1, r1, #4
    860c:	0049      	lsls	r1, r1, #1
    860e:	eb06 0e01 	add.w	lr, r6, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8612:	5c71      	ldrb	r1, [r6, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    8614:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    8618:	fb1e f303 	smulbb	r3, lr, r3
    861c:	eb01 1323 	add.w	r3, r1, r3, asr #4
    8620:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    8622:	0601      	lsls	r1, r0, #24
    8624:	bf48      	it	mi
    8626:	425b      	negmi	r3, r3
    8628:	b25b      	sxtb	r3, r3

    y += 128;
    862a:	3b80      	subs	r3, #128	; 0x80
		leds.plasma_bright = qsuba(leds.plasma_index, beatsin8(leds.plasma_beat3, 0, 96));
    862c:	b2db      	uxtb	r3, r3
    862e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    8632:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    8636:	eba2 2323 	sub.w	r3, r2, r3, asr #8
    863a:	b2db      	uxtb	r3, r3
    863c:	e77e      	b.n	853c <plasma(LEDStruct&)+0x294>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    863e:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8642:	f003 030f 	and.w	r3, r3, #15
    8646:	e7e0      	b.n	860a <plasma(LEDStruct&)+0x362>

		leds.led_data[k] = ColorFromPalette(leds.current_palette, leds.plasma_index, leds.plasma_bright, leds.current_blending);
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    8648:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    864c:	f8dd 800c 	ldr.w	r8, [sp, #12]
    8650:	b97b      	cbnz	r3, 8672 <plasma(LEDStruct&)+0x3ca>
    8652:	f104 02e1 	add.w	r2, r4, #225	; 0xe1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8656:	7823      	ldrb	r3, [r4, #0]
    8658:	f888 31bf 	strb.w	r3, [r8, #447]	; 0x1bf
        g = rhs.g;
    865c:	7863      	ldrb	r3, [r4, #1]
    865e:	f888 31c0 	strb.w	r3, [r8, #448]	; 0x1c0
        b = rhs.b;
    8662:	78a3      	ldrb	r3, [r4, #2]
    8664:	f888 31c1 	strb.w	r3, [r8, #449]	; 0x1c1
    8668:	3403      	adds	r4, #3
    866a:	42a2      	cmp	r2, r4
    866c:	f1a8 0803 	sub.w	r8, r8, #3
    8670:	d1f1      	bne.n	8656 <plasma(LEDStruct&)+0x3ae>
}
    8672:	b00b      	add	sp, #44	; 0x2c
    8674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8678:	f003 073f 	and.w	r7, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    867c:	f003 010f 	and.w	r1, r3, #15
    8680:	e6e7      	b.n	8452 <plasma(LEDStruct&)+0x1aa>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8682:	f003 053f 	and.w	r5, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8686:	f003 010f 	and.w	r1, r3, #15
    868a:	e6ad      	b.n	83e8 <plasma(LEDStruct&)+0x140>



void plasma(LEDStruct& leds) {
	if (!leds.mode_initialized) { plasma_init(leds); }
	if (keyboard_update) { plasma_update(leds); }
    868c:	4620      	mov	r0, r4
    868e:	f7ff fdd1 	bl	8234 <plasma_update(LEDStruct&)>
    8692:	e68c      	b.n	83ae <plasma(LEDStruct&)+0x106>

00008694 <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    8694:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    8696:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    869a:	b083      	sub	sp, #12
    869c:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    869e:	2b1c      	cmp	r3, #28
    86a0:	f200 8485 	bhi.w	8fae <switch_mode(LEDStruct&)+0x91a>
    86a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    86a8:	0264001d 	.word	0x0264001d
    86ac:	02e601dd 	.word	0x02e601dd
    86b0:	00a40168 	.word	0x00a40168
    86b4:	016d01cb 	.word	0x016d01cb
    86b8:	010b00aa 	.word	0x010b00aa
    86bc:	03ec0420 	.word	0x03ec0420
    86c0:	036a03ae 	.word	0x036a03ae
    86c4:	04430111 	.word	0x04430111
    86c8:	0439043e 	.word	0x0439043e
    86cc:	042f0434 	.word	0x042f0434
    86d0:	0425042a 	.word	0x0425042a
    86d4:	015e0163 	.word	0x015e0163
    86d8:	01540159 	.word	0x01540159
    86dc:	01d001d8 	.word	0x01d001d8
    86e0:	01c6      	.short	0x01c6

		// Juggle Functions -----------------------------------------------------------------------
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    86e2:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    86e6:	2900      	cmp	r1, #0
    86e8:	f040 8082 	bne.w	87f0 <switch_mode(LEDStruct&)+0x15c>
    86ec:	48d9      	ldr	r0, [pc, #868]	; (8a54 <switch_mode(LEDStruct&)+0x3c0>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    86ee:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
    86f2:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    86f4:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    86f8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    86fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8700:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8704:	3319      	adds	r3, #25
    8706:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    870a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    870e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8712:	3319      	adds	r3, #25
    8714:	b29b      	uxth	r3, r3
    8716:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    871a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    871e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8722:	3519      	adds	r5, #25
    8724:	b2ad      	uxth	r5, r5
    8726:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    872a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    872e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8732:	3219      	adds	r2, #25
    8734:	b292      	uxth	r2, r2
    8736:	eb02 2c42 	add.w	ip, r2, r2, lsl #9
    873a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    873e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    8742:	f10c 0c19 	add.w	ip, ip, #25
    8746:	fa1f fc8c 	uxth.w	ip, ip
    874a:	eb0c 264c 	add.w	r6, ip, ip, lsl #9
    874e:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    8752:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8756:	3619      	adds	r6, #25
    8758:	b2b6      	uxth	r6, r6
    875a:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    875e:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8762:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    8766:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    876a:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    876e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8772:	b2ed      	uxtb	r5, r5
	leds.juggle_fade		 = jf;
    8774:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8776:	b2ff      	uxtb	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8778:	eb0c 231c 	add.w	r3, ip, ip, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    877c:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
    8780:	eb05 0585 	add.w	r5, r5, r5, lsl #2
	leds.juggle_fade		 = jf;
    8784:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8788:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    878c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8790:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8794:	11ed      	asrs	r5, r5, #7
	leds.juggle_fade		 = jf;
    8796:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8798:	350a      	adds	r5, #10
	leds.juggle_fade		 = jf;
    879a:	3220      	adds	r2, #32
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    879c:	123f      	asrs	r7, r7, #8
    879e:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    87a0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    87a4:	f884 1236 	strb.w	r1, [r4, #566]	; 0x236
    87a8:	eb0e 211e 	add.w	r1, lr, lr, lsr #8
	leds.juggle_numdots 	 = jn;
    87ac:	3701      	adds	r7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    87ae:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    87b0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    87b4:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    87b8:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    87bc:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    87c0:	2501      	movs	r5, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    87c2:	220f      	movs	r2, #15

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    87c4:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    87c8:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    87cc:	f8a0 e000 	strh.w	lr, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    87d0:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    87d4:	f884 6234 	strb.w	r6, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    87d8:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    87dc:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    87e0:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    87e4:	b126      	cbz	r6, 87f0 <switch_mode(LEDStruct&)+0x15c>
    87e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    87ea:	40ab      	lsls	r3, r5
    87ec:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
		case JUGGLE_HALF:
			juggle_half(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    87f0:	4620      	mov	r0, r4
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    87f2:	b003      	add	sp, #12
    87f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case JUGGLE_HALF:
			juggle_half(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    87f8:	f7fa bbba 	b.w	2f70 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    87fc:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    8800:	2b00      	cmp	r3, #0
    8802:	d15c      	bne.n	88be <switch_mode(LEDStruct&)+0x22a>
    8804:	4893      	ldr	r0, [pc, #588]	; (8a54 <switch_mode(LEDStruct&)+0x3c0>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    8806:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    880a:	8803      	ldrh	r3, [r0, #0]
    880c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8810:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8814:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8818:	3319      	adds	r3, #25
    881a:	b29b      	uxth	r3, r3
    881c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8820:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8824:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8828:	3219      	adds	r2, #25
    882a:	b292      	uxth	r2, r2
    882c:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    8830:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8834:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    8838:	3119      	adds	r1, #25
    883a:	b289      	uxth	r1, r1
    883c:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    8840:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    8844:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8848:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    884c:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    884e:	3619      	adds	r6, #25
    8850:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8852:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8856:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    885a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    885e:	b2ed      	uxtb	r5, r5
    8860:	121b      	asrs	r3, r3, #8
    8862:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    8866:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    8868:	2701      	movs	r7, #1
    886a:	11ed      	asrs	r5, r5, #7
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    886c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8870:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8872:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8874:	3503      	adds	r5, #3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8876:	f3c1 11c0 	ubfx	r1, r1, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    887a:	f04f 0e07 	mov.w	lr, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    887e:	260f      	movs	r6, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8880:	42bb      	cmp	r3, r7
    8882:	b2e8      	uxtb	r0, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8884:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    8888:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    888c:	f884 727b 	strb.w	r7, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    8890:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8894:	f884 61c3 	strb.w	r6, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8898:	f000 838b 	beq.w	8fb2 <switch_mode(LEDStruct&)+0x91e>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    889c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    88a0:	b2d2      	uxtb	r2, r2
    88a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    88a6:	1212      	asrs	r2, r2, #8
    88a8:	443a      	add	r2, r7
    88aa:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
	
	leds.juggle_beat	= jb;
    88ac:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    88b0:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    88b4:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
    88b8:	4620      	mov	r0, r4
    88ba:	f7f9 fc7b 	bl	21b4 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    88be:	4620      	mov	r0, r4
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    88c0:	b003      	add	sp, #12
    88c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    88c6:	f7fb bd33 	b.w	4330 <rainbow_march(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 1); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror on
    88ca:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    88ce:	2900      	cmp	r1, #0
    88d0:	d138      	bne.n	8944 <switch_mode(LEDStruct&)+0x2b0>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    88d2:	4d60      	ldr	r5, [pc, #384]	; (8a54 <switch_mode(LEDStruct&)+0x3c0>)
    88d4:	882b      	ldrh	r3, [r5, #0]
    88d6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    88da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    88de:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    88e2:	3319      	adds	r3, #25
    88e4:	b29b      	uxth	r3, r3
    88e6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    88ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    88ee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    88f2:	3219      	adds	r2, #25
    88f4:	b292      	uxth	r2, r2
    88f6:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    88fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    88fe:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8902:	3619      	adds	r6, #25
    8904:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8906:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    890a:	eb06 2016 	add.w	r0, r6, r6, lsr #8
    890e:	b2db      	uxtb	r3, r3
    8910:	b2c0      	uxtb	r0, r0
    8912:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8916:	ebc0 1700 	rsb	r7, r0, r0, lsl #4
    891a:	b2d0      	uxtb	r0, r2
    891c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8920:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    8924:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8928:	11bf      	asrs	r7, r7, #6
    892a:	1183      	asrs	r3, r0, #6
    892c:	373c      	adds	r7, #60	; 0x3c
    892e:	1212      	asrs	r2, r2, #8
    8930:	b2f8      	uxtb	r0, r7
    8932:	3332      	adds	r3, #50	; 0x32
    8934:	3214      	adds	r2, #20
    8936:	9000      	str	r0, [sp, #0]
    8938:	b2db      	uxtb	r3, r3
    893a:	b2d2      	uxtb	r2, r2
    893c:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    893e:	802e      	strh	r6, [r5, #0]
    8940:	f7fb ff1c 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
			fire_mirror(leds);
    8944:	4620      	mov	r0, r4
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8946:	b003      	add	sp, #12
    8948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror on
			fire_mirror(leds);
    894c:	f7fc b962 	b.w	4c14 <fire_mirror(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8950:	b003      	add	sp, #12
    8952:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case BOUNCING_BALLS:
			bouncing_balls(leds);
			break;

		case BOUNCE:
			bounce(leds);
    8956:	f7fe bdeb 	b.w	7530 <bounce(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    895a:	b003      	add	sp, #12
    895c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case NOISE:
			noise(leds);
			break;

		case NOISE_MOVER:
			noise_mover(leds);
    8960:	f7fd bc8e 	b.w	6280 <noise_mover(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8964:	b003      	add	sp, #12
    8966:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Noise Functions -----------------------------------------------------------------------
		case NOISE:
			noise(leds);
    896a:	f7fd bb85 	b.w	6078 <noise(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    896e:	b003      	add	sp, #12
    8970:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Fireworks Functions -----------------------------------------------------------------------
		case FIREWORKS:
			fireworks(leds);
    8974:	f7fd b86e 	b.w	5a54 <fireworks(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8978:	b003      	add	sp, #12
    897a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_HALF:
			juggle_half(leds);
    897e:	f7fa bebf 	b.w	3700 <juggle_half(LEDStruct&)>
			multi_juggle(leds);
			break;

		// Rainbow March Functions -----------------------------------------------------------------------
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    8982:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8986:	2a00      	cmp	r2, #0
    8988:	d199      	bne.n	88be <switch_mode(LEDStruct&)+0x22a>
    898a:	4832      	ldr	r0, [pc, #200]	; (8a54 <switch_mode(LEDStruct&)+0x3c0>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    898c:	f884 222a 	strb.w	r2, [r4, #554]	; 0x22a
    8990:	8803      	ldrh	r3, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    8992:	f884 227b 	strb.w	r2, [r4, #635]	; 0x27b
    8996:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    899a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    899e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    89a2:	3319      	adds	r3, #25
    89a4:	b29b      	uxth	r3, r3
    89a6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    89aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    89ae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    89b2:	3219      	adds	r2, #25
    89b4:	b292      	uxth	r2, r2
    89b6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    89ba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    89be:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    89c2:	3119      	adds	r1, #25
    89c4:	b289      	uxth	r1, r1
    89c6:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    89ca:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    89ce:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    89d2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    89d6:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    89d8:	3619      	adds	r6, #25
    89da:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    89dc:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    89e0:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    89e4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    89e8:	b2ed      	uxtb	r5, r5
    89ea:	121b      	asrs	r3, r3, #8
    89ec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    89f0:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    89f2:	f04f 0e01 	mov.w	lr, #1
    89f6:	11ed      	asrs	r5, r5, #7
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    89f8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    89fc:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    89fe:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8a00:	3503      	adds	r5, #3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8a02:	f3c1 11c0 	ubfx	r1, r1, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    8a06:	2707      	movs	r7, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8a08:	260f      	movs	r6, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8a0a:	4573      	cmp	r3, lr
    8a0c:	b2e8      	uxtb	r0, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8a0e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    8a12:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
	leds.mode_type			= RAINBOW_MARCH;
    8a16:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8a1a:	f884 61c3 	strb.w	r6, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8a1e:	f000 82c8 	beq.w	8fb2 <switch_mode(LEDStruct&)+0x91e>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8a22:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8a26:	b2d2      	uxtb	r2, r2
    8a28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8a2c:	1212      	asrs	r2, r2, #8
    8a2e:	4472      	add	r2, lr
    8a30:	b2d2      	uxtb	r2, r2
    8a32:	e73b      	b.n	88ac <switch_mode(LEDStruct&)+0x218>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8a34:	b003      	add	sp, #12
    8a36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
    8a3a:	f7ff bc35 	b.w	82a8 <plasma(LEDStruct&)>
			break;
	}
}
    8a3e:	b003      	add	sp, #12
    8a40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case JUGGLE_RANDOM:
			juggle(leds);
			break;

		case MULTI_JUGGLE:
			multi_juggle(leds);
    8a44:	f7fb baa6 	b.w	3f94 <multi_juggle(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8a48:	b003      	add	sp, #12
    8a4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
    8a4e:	f7ff b9df 	b.w	7e10 <twinkle(LEDStruct&)>
    8a52:	bf00      	nop
    8a54:	1fff8784 	.word	0x1fff8784
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8a58:	b003      	add	sp, #12
    8a5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Bouncing Functions -----------------------------------------------------------------------
		case BOUNCING_BALLS:
			bouncing_balls(leds);
    8a5e:	f7fe bfeb 	b.w	7a38 <bouncing_balls(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    8a62:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8a66:	2a00      	cmp	r2, #0
    8a68:	f47f aec2 	bne.w	87f0 <switch_mode(LEDStruct&)+0x15c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8a6c:	49c2      	ldr	r1, [pc, #776]	; (8d78 <switch_mode(LEDStruct&)+0x6e4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8a6e:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    8a72:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8a74:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    8a78:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8a7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8a80:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8a84:	3319      	adds	r3, #25
    8a86:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8a8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8a8e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8a92:	3319      	adds	r3, #25
    8a94:	b29b      	uxth	r3, r3
    8a96:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8a9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a9e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8aa2:	3019      	adds	r0, #25
    8aa4:	b280      	uxth	r0, r0
    8aa6:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    8aaa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8aae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8ab2:	3219      	adds	r2, #25
    8ab4:	b292      	uxth	r2, r2
    8ab6:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    8aba:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    8abe:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    8ac2:	f10e 0e19 	add.w	lr, lr, #25
    8ac6:	fa1f fe8e 	uxth.w	lr, lr
    8aca:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    8ace:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    8ad2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8ad6:	3519      	adds	r5, #25
    8ad8:	b2ad      	uxth	r5, r5
    8ada:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8ade:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8ae2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8ae6:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8aea:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8aee:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8af0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    8af4:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    8af6:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8af8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8afc:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8b00:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    8b02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	leds.juggle_fade		 = jf;
    8b06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8b0a:	1236      	asrs	r6, r6, #8
    8b0c:	b2bf      	uxth	r7, r7
    8b0e:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8b10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8b14:	11c0      	asrs	r0, r0, #7
	leds.juggle_fade		 = jf;
    8b16:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8b18:	300a      	adds	r0, #10
	leds.juggle_fade		 = jf;
    8b1a:	3220      	adds	r2, #32
    8b1c:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8b1e:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8b22:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    8b26:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8b2a:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8b2c:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8b30:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8b34:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8b38:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8b3c:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8b3e:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    8b40:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8b44:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8b46:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8b4a:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8b4e:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8b52:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    8b56:	f884 0236 	strb.w	r0, [r4, #566]	; 0x236
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8b5a:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8b5e:	2d00      	cmp	r5, #0
    8b60:	f43f ae46 	beq.w	87f0 <switch_mode(LEDStruct&)+0x15c>
    8b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8b68:	4083      	lsls	r3, r0
    8b6a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    8b6e:	e63f      	b.n	87f0 <switch_mode(LEDStruct&)+0x15c>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    8b70:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8b74:	2a00      	cmp	r2, #0
    8b76:	f47f ae3b 	bne.w	87f0 <switch_mode(LEDStruct&)+0x15c>
    8b7a:	497f      	ldr	r1, [pc, #508]	; (8d78 <switch_mode(LEDStruct&)+0x6e4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8b7c:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    8b80:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    8b82:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    8b86:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8b8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8b8e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8b92:	3319      	adds	r3, #25
    8b94:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8b98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8b9c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8ba0:	3319      	adds	r3, #25
    8ba2:	b29b      	uxth	r3, r3
    8ba4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8ba8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8bac:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8bb0:	3019      	adds	r0, #25
    8bb2:	b280      	uxth	r0, r0
    8bb4:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    8bb8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8bbc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8bc0:	3219      	adds	r2, #25
    8bc2:	b292      	uxth	r2, r2
    8bc4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    8bc8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    8bcc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    8bd0:	f10e 0e19 	add.w	lr, lr, #25
    8bd4:	fa1f fe8e 	uxth.w	lr, lr
    8bd8:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    8bdc:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    8be0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8be4:	3519      	adds	r5, #25
    8be6:	b2ad      	uxth	r5, r5
    8be8:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8bec:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8bf0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8bf4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8bf8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.juggle_numdots 	 = jn;
    8bfc:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8bfe:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    8c02:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    8c04:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8c06:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c0a:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c0e:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    8c10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	leds.juggle_fade		 = jf;
    8c14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8c18:	1236      	asrs	r6, r6, #8
    8c1a:	b2bf      	uxth	r7, r7
    8c1c:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8c22:	11c0      	asrs	r0, r0, #7
	leds.juggle_fade		 = jf;
    8c24:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8c26:	300a      	adds	r0, #10
	leds.juggle_fade		 = jf;
    8c28:	3220      	adds	r2, #32
    8c2a:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c2c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8c30:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    8c34:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c38:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8c3a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8c3e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8c42:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8c46:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8c4a:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8c4c:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    8c4e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c52:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8c54:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8c58:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8c5c:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8c60:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8c64:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8c68:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8c6c:	2d00      	cmp	r5, #0
    8c6e:	f43f adbf 	beq.w	87f0 <switch_mode(LEDStruct&)+0x15c>
    8c72:	e777      	b.n	8b64 <switch_mode(LEDStruct&)+0x4d0>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    8c74:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    8c78:	2b00      	cmp	r3, #0
    8c7a:	f47f adb9 	bne.w	87f0 <switch_mode(LEDStruct&)+0x15c>
    8c7e:	493e      	ldr	r1, [pc, #248]	; (8d78 <switch_mode(LEDStruct&)+0x6e4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8c80:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    8c84:	880b      	ldrh	r3, [r1, #0]
    8c86:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8c8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8c8e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8c92:	3319      	adds	r3, #25
    8c94:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8c98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8c9c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8ca0:	3319      	adds	r3, #25
    8ca2:	b29b      	uxth	r3, r3
    8ca4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8ca8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8cac:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8cb0:	3019      	adds	r0, #25
    8cb2:	b280      	uxth	r0, r0
    8cb4:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    8cb8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8cbc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8cc0:	3219      	adds	r2, #25
    8cc2:	b292      	uxth	r2, r2
    8cc4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    8cc8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    8ccc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    8cd0:	f10e 0e19 	add.w	lr, lr, #25
    8cd4:	fa1f fe8e 	uxth.w	lr, lr
    8cd8:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    8cdc:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    8ce0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8ce4:	3519      	adds	r5, #25
    8ce6:	b2ad      	uxth	r5, r5
    8ce8:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8cec:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8cf0:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8cf4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8cf8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8cfc:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8cfe:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    8d02:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    8d04:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d06:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8d0a:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8d0e:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    8d10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	leds.juggle_fade		 = jf;
    8d14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d18:	1236      	asrs	r6, r6, #8
    8d1a:	b2bf      	uxth	r7, r7
    8d1c:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8d1e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8d22:	11c0      	asrs	r0, r0, #7
	leds.juggle_fade		 = jf;
    8d24:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8d26:	300a      	adds	r0, #10
	leds.juggle_fade		 = jf;
    8d28:	3220      	adds	r2, #32
    8d2a:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8d2c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d30:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    8d34:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8d38:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8d3a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8d3e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8d42:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8d46:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8d4a:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8d4c:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    8d4e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8d52:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8d54:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8d58:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8d5c:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8d60:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8d64:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    8d68:	f884 0236 	strb.w	r0, [r4, #566]	; 0x236
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8d6c:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8d70:	2d00      	cmp	r5, #0
    8d72:	f43f ad3d 	beq.w	87f0 <switch_mode(LEDStruct&)+0x15c>
    8d76:	e6f5      	b.n	8b64 <switch_mode(LEDStruct&)+0x4d0>
    8d78:	1fff8784 	.word	0x1fff8784
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1); }		// sync on  | mirror off
    8d7c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    8d80:	2b00      	cmp	r3, #0
    8d82:	d139      	bne.n	8df8 <switch_mode(LEDStruct&)+0x764>
    8d84:	4d8c      	ldr	r5, [pc, #560]	; (8fb8 <switch_mode(LEDStruct&)+0x924>)
    8d86:	882b      	ldrh	r3, [r5, #0]
    8d88:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8d8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8d90:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8d94:	3319      	adds	r3, #25
    8d96:	b29b      	uxth	r3, r3
    8d98:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8d9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8da0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8da4:	3219      	adds	r2, #25
    8da6:	b292      	uxth	r2, r2
    8da8:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    8dac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    8db0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8db4:	3619      	adds	r6, #25
    8db6:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8db8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    8dbc:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    8dc0:	b2db      	uxtb	r3, r3
    8dc2:	b2c9      	uxtb	r1, r1
    8dc4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8dc8:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
    8dcc:	b2d1      	uxtb	r1, r2
    8dce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8dd2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    8dd6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8dda:	1180      	asrs	r0, r0, #6
    8ddc:	303c      	adds	r0, #60	; 0x3c
    8dde:	118b      	asrs	r3, r1, #6
    8de0:	1212      	asrs	r2, r2, #8
    8de2:	b2c1      	uxtb	r1, r0
    8de4:	3332      	adds	r3, #50	; 0x32
    8de6:	3214      	adds	r2, #20
    8de8:	9100      	str	r1, [sp, #0]
    8dea:	b2db      	uxtb	r3, r3
    8dec:	b2d2      	uxtb	r2, r2
    8dee:	2101      	movs	r1, #1
    8df0:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8df2:	802e      	strh	r6, [r5, #0]
    8df4:	f7fb fcc2 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror off
			fire(leds);
    8df8:	4620      	mov	r0, r4
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8dfa:	b003      	add	sp, #12
    8dfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror off
			fire(leds);
    8e00:	f7fb bd34 	b.w	486c <fire(LEDStruct&)>
			break;

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror off
    8e04:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    8e08:	2900      	cmp	r1, #0
    8e0a:	d1f5      	bne.n	8df8 <switch_mode(LEDStruct&)+0x764>
    8e0c:	4d6a      	ldr	r5, [pc, #424]	; (8fb8 <switch_mode(LEDStruct&)+0x924>)
    8e0e:	882b      	ldrh	r3, [r5, #0]
    8e10:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8e14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8e18:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8e1c:	3319      	adds	r3, #25
    8e1e:	b29b      	uxth	r3, r3
    8e20:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8e24:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8e28:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8e2c:	3219      	adds	r2, #25
    8e2e:	b292      	uxth	r2, r2
    8e30:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    8e34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    8e38:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8e3c:	3619      	adds	r6, #25
    8e3e:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8e40:	eb06 2016 	add.w	r0, r6, r6, lsr #8
    8e44:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    8e48:	b2db      	uxtb	r3, r3
    8e4a:	b2c0      	uxtb	r0, r0
    8e4c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8e50:	ebc0 1700 	rsb	r7, r0, r0, lsl #4
    8e54:	b2d0      	uxtb	r0, r2
    8e56:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8e5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    8e5e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8e62:	11bf      	asrs	r7, r7, #6
    8e64:	373c      	adds	r7, #60	; 0x3c
    8e66:	1183      	asrs	r3, r0, #6
    8e68:	1212      	asrs	r2, r2, #8
    8e6a:	b2f8      	uxtb	r0, r7
    8e6c:	3332      	adds	r3, #50	; 0x32
    8e6e:	3214      	adds	r2, #20
    8e70:	9000      	str	r0, [sp, #0]
    8e72:	b2db      	uxtb	r3, r3
    8e74:	b2d2      	uxtb	r2, r2
    8e76:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8e78:	802e      	strh	r6, [r5, #0]
    8e7a:	f7fb fc7f 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
    8e7e:	e7bb      	b.n	8df8 <switch_mode(LEDStruct&)+0x764>
		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
			break;

		case RAINBOW_1:		// custom 1, rainbows slowly emanating from center
			if (!leds.mode_initialized) { leds.this_dir = 0; rainbow_init(leds, 1, 4, 2, 0); }
    8e80:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    8e84:	2900      	cmp	r1, #0
    8e86:	f47f ad1a 	bne.w	88be <switch_mode(LEDStruct&)+0x22a>
    8e8a:	4d4b      	ldr	r5, [pc, #300]	; (8fb8 <switch_mode(LEDStruct&)+0x924>)
    8e8c:	f880 11c5 	strb.w	r1, [r0, #453]	; 0x1c5
    8e90:	882b      	ldrh	r3, [r5, #0]
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    8e92:	f880 122a 	strb.w	r1, [r0, #554]	; 0x22a
    8e96:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8e9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8e9e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8ea2:	3319      	adds	r3, #25
    8ea4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8ea6:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
	
	leds.juggle_beat	= jb;
    8eaa:	b2d2      	uxtb	r2, r2
    8eac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8eb0:	11d2      	asrs	r2, r2, #7
    8eb2:	3203      	adds	r2, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    8eb4:	2001      	movs	r0, #1
	leds.mode_type			= RAINBOW_MARCH;
    8eb6:	2707      	movs	r7, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8eb8:	260f      	movs	r6, #15

	leds.use_full_range = ufr;
    8eba:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
	
	leds.juggle_beat	= jb;
    8ebe:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    8ec2:	2104      	movs	r1, #4
    leds.rainbow_rot    = rr;
    8ec4:	2202      	movs	r2, #2
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    8ec6:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    8eca:	f884 027b 	strb.w	r0, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    8ece:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8ed2:	f884 61c3 	strb.w	r6, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    8ed6:	f884 1279 	strb.w	r1, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    8eda:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
    8ede:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8ee0:	802b      	strh	r3, [r5, #0]
    8ee2:	f7f9 f967 	bl	21b4 <LEDDebug(LEDStruct&)>
    8ee6:	e4ea      	b.n	88be <switch_mode(LEDStruct&)+0x22a>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8ee8:	b003      	add	sp, #12
    8eea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { leds.this_dir = 0; rainbow_init(leds, 1, 4, 2, 0); }
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_BEAT:
			rainbow_march_beat(leds);
    8eee:	f7fb bafd 	b.w	44ec <rainbow_march_beat(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8ef2:	b003      	add	sp, #12
    8ef4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case ONE_SIN:
			one_sin(leds);
			break;

		case TWO_SIN:
			two_sin(leds);
    8ef8:	f7fc be92 	b.w	5c20 <two_sin(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8efc:	b003      	add	sp, #12
    8efe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Sin Functions -----------------------------------------------------------------------
		case ONE_SIN:
			one_sin(leds);
    8f02:	f7fc b9c7 	b.w	5294 <one_sin(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8f06:	b003      	add	sp, #12
    8f08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Confetti Functions -----------------------------------------------------------------------
		case CONFETTI:
			confetti(leds);
    8f0c:	f7fc b8d4 	b.w	50b8 <confetti(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8f10:	b003      	add	sp, #12
    8f12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case PRIDE:
			pride(leds);
			break;

		case PACIFICA:
			pacifica(leds);
    8f16:	f7fe b843 	b.w	6fa0 <pacifica(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8f1a:	b003      	add	sp, #12
    8f1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    8f20:	f7fd bc4a 	b.w	67b8 <pride(LEDStruct&)>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8f24:	b003      	add	sp, #12
    8f26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Colorwave, Pride, Pacifica Functions -----------------------------------------------------------------------
		case COLORWAVE:
			colorwave(leds);
    8f2a:	f7fd be4d 	b.w	6bc8 <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0); }		// sync off | mirror on
			fire_mirror(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1); }		// sync on  | mirror on
    8f2e:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    8f32:	2b00      	cmp	r3, #0
    8f34:	f47f ad06 	bne.w	8944 <switch_mode(LEDStruct&)+0x2b0>
    8f38:	4d1f      	ldr	r5, [pc, #124]	; (8fb8 <switch_mode(LEDStruct&)+0x924>)
    8f3a:	882b      	ldrh	r3, [r5, #0]
    8f3c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8f40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8f44:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8f48:	3319      	adds	r3, #25
    8f4a:	b29b      	uxth	r3, r3
    8f4c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8f50:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8f54:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8f58:	3219      	adds	r2, #25
    8f5a:	b292      	uxth	r2, r2
    8f5c:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    8f60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    8f64:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8f68:	3619      	adds	r6, #25
    8f6a:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8f6c:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    8f70:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    8f74:	b2db      	uxtb	r3, r3
    8f76:	b2c9      	uxtb	r1, r1
    8f78:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8f7c:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
    8f80:	b2d1      	uxtb	r1, r2
    8f82:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8f86:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    8f8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8f8e:	1180      	asrs	r0, r0, #6
    8f90:	303c      	adds	r0, #60	; 0x3c
    8f92:	118b      	asrs	r3, r1, #6
    8f94:	1212      	asrs	r2, r2, #8
    8f96:	b2c1      	uxtb	r1, r0
    8f98:	3332      	adds	r3, #50	; 0x32
    8f9a:	3214      	adds	r2, #20
    8f9c:	9100      	str	r1, [sp, #0]
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	b2d2      	uxtb	r2, r2
    8fa2:	2101      	movs	r1, #1
    8fa4:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8fa6:	802e      	strh	r6, [r5, #0]
    8fa8:	f7fb fbe8 	bl	477c <fire_init(LEDStruct&, bool, unsigned char, unsigned char, unsigned char)>
    8fac:	e4ca      	b.n	8944 <switch_mode(LEDStruct&)+0x2b0>
		// Plasma Functions ---------------------------------------------------------------------
		case PLASMA:
			plasma(leds);
			break;
	}
}
    8fae:	b003      	add	sp, #12
    8fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8fb2:	461a      	mov	r2, r3
    8fb4:	e47a      	b.n	88ac <switch_mode(LEDStruct&)+0x218>
    8fb6:	bf00      	nop
    8fb8:	1fff8784 	.word	0x1fff8784

00008fbc <change_mode(unsigned char)>:
}

void begin_transition(); // Forward declaration

// Change mode - consider how to handle this.  Random, specific path, etc.
void change_mode(uint8_t mn = 255) {
    8fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fbe:	2134      	movs	r1, #52	; 0x34
    8fc0:	4604      	mov	r4, r0
    8fc2:	4832      	ldr	r0, [pc, #200]	; (908c <change_mode(unsigned char)+0xd0>)
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    8fc4:	4e32      	ldr	r6, [pc, #200]	; (9090 <change_mode(unsigned char)+0xd4>)
    8fc6:	f003 fa1d 	bl	c404 <usb_serial_write>
    8fca:	4832      	ldr	r0, [pc, #200]	; (9094 <change_mode(unsigned char)+0xd8>)
    8fcc:	f003 fc1e 	bl	c80c <Print::println()>
    8fd0:	2133      	movs	r1, #51	; 0x33
    8fd2:	4831      	ldr	r0, [pc, #196]	; (9098 <change_mode(unsigned char)+0xdc>)
    8fd4:	f003 fa16 	bl	c404 <usb_serial_write>
    8fd8:	482e      	ldr	r0, [pc, #184]	; (9094 <change_mode(unsigned char)+0xd8>)
    8fda:	f003 fc17 	bl	c80c <Print::println()>
    8fde:	2133      	movs	r1, #51	; 0x33
    8fe0:	482e      	ldr	r0, [pc, #184]	; (909c <change_mode(unsigned char)+0xe0>)
    8fe2:	f003 fa0f 	bl	c404 <usb_serial_write>
    8fe6:	482b      	ldr	r0, [pc, #172]	; (9094 <change_mode(unsigned char)+0xd8>)
    8fe8:	f003 fc10 	bl	c80c <Print::println()>
	if (DEBUG) {
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
    8fec:	f7f7 ffcc 	bl	f88 <begin_transition()>
    8ff0:	482b      	ldr	r0, [pc, #172]	; (90a0 <change_mode(unsigned char)+0xe4>)
	number_of_mode_changes++;
    8ff2:	8832      	ldrh	r2, [r6, #0]
    8ff4:	8803      	ldrh	r3, [r0, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    8ff6:	492b      	ldr	r1, [pc, #172]	; (90a4 <change_mode(unsigned char)+0xe8>)
    8ff8:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    8ffc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9000:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9004:	3319      	adds	r3, #25
    9006:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9008:	eb03 2513 	add.w	r5, r3, r3, lsr #8
	next_leds.this_dir = random8(2);
    900c:	f3c5 15c0 	ubfx	r5, r5, #7, #1
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    9010:	3201      	adds	r2, #1

	// Next LED Variables
	next_leds.mode_initialized = 0;
    9012:	2700      	movs	r7, #0
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    9014:	2cff      	cmp	r4, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9016:	8003      	strh	r3, [r0, #0]
	begin_transition();
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    9018:	f881 51c5 	strb.w	r5, [r1, #453]	; 0x1c5
	}
	begin_transition();
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    901c:	f881 722e 	strb.w	r7, [r1, #558]	; 0x22e
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    9020:	8032      	strh	r2, [r6, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    9022:	d00a      	beq.n	903a <change_mode(unsigned char)+0x7e>
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
    9024:	f881 422b 	strb.w	r4, [r1, #555]	; 0x22b
	next_leds.mode_name = ModeList[next_leds.mode_number];
    9028:	4b1f      	ldr	r3, [pc, #124]	; (90a8 <change_mode(unsigned char)+0xec>)
	switch_mode(next_leds);
    902a:	481e      	ldr	r0, [pc, #120]	; (90a4 <change_mode(unsigned char)+0xe8>)
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
    902c:	5d1b      	ldrb	r3, [r3, r4]
    902e:	f881 322c 	strb.w	r3, [r1, #556]	; 0x22c
	switch_mode(next_leds);
}
    9032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
    9036:	f7ff bb2d 	b.w	8694 <switch_mode(LEDStruct&)>

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    903a:	4a1c      	ldr	r2, [pc, #112]	; (90ac <change_mode(unsigned char)+0xf0>)
    903c:	7812      	ldrb	r2, [r2, #0]
    903e:	b1a2      	cbz	r2, 906a <change_mode(unsigned char)+0xae>
    9040:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9044:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9048:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    904c:	3319      	adds	r3, #25
    904e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9050:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    9054:	b2d2      	uxtb	r2, r2
    9056:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    905a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    905e:	f3c4 2407 	ubfx	r4, r4, #8, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9062:	8003      	strh	r3, [r0, #0]
    9064:	f881 422b 	strb.w	r4, [r1, #555]	; 0x22b
    9068:	e7de      	b.n	9028 <change_mode(unsigned char)+0x6c>
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
    906a:	f891 322b 	ldrb.w	r3, [r1, #555]	; 0x22b
    906e:	4a10      	ldr	r2, [pc, #64]	; (90b0 <change_mode(unsigned char)+0xf4>)
    9070:	3301      	adds	r3, #1
    9072:	fba2 0203 	umull	r0, r2, r2, r3
    9076:	0912      	lsrs	r2, r2, #4
    9078:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    907c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    9080:	1b1c      	subs	r4, r3, r4
    9082:	b2e4      	uxtb	r4, r4
    9084:	f881 422b 	strb.w	r4, [r1, #555]	; 0x22b
    9088:	e7ce      	b.n	9028 <change_mode(unsigned char)+0x6c>
    908a:	bf00      	nop
    908c:	00010308 	.word	0x00010308
    9090:	1fff8880 	.word	0x1fff8880
    9094:	1fff878c 	.word	0x1fff878c
    9098:	00010340 	.word	0x00010340
    909c:	00010374 	.word	0x00010374
    90a0:	1fff8784 	.word	0x1fff8784
    90a4:	1fff8884 	.word	0x1fff8884
    90a8:	1fff8724 	.word	0x1fff8724
    90ac:	1fff874a 	.word	0x1fff874a
    90b0:	8d3dcb09 	.word	0x8d3dcb09

000090b4 <read_keyboard()>:
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
    90b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    90b6:	4d8f      	ldr	r5, [pc, #572]	; (92f4 <read_keyboard()+0x240>)
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    90b8:	4f8f      	ldr	r7, [pc, #572]	; (92f8 <read_keyboard()+0x244>)
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    90ba:	462e      	mov	r6, r5
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    90bc:	f003 f978 	bl	c3b0 <usb_serial_available>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
    90c0:	2800      	cmp	r0, #0
    90c2:	f340 8085 	ble.w	91d0 <read_keyboard()+0x11c>
        virtual int read() { return usb_serial_getchar(); }
    90c6:	f003 f937 	bl	c338 <usb_serial_getchar>
		in_byte = Serial.read();
    90ca:	b2c0      	uxtb	r0, r0

		if (in_byte != 10) {
    90cc:	280a      	cmp	r0, #10
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    90ce:	7028      	strb	r0, [r5, #0]

		if (in_byte != 10) {
    90d0:	d00d      	beq.n	90ee <read_keyboard()+0x3a>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    90d2:	2102      	movs	r1, #2
    90d4:	4889      	ldr	r0, [pc, #548]	; (92fc <read_keyboard()+0x248>)
    90d6:	f003 f995 	bl	c404 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    90da:	7830      	ldrb	r0, [r6, #0]
    90dc:	f003 fa16 	bl	c50c <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    90e0:	2101      	movs	r1, #1
    90e2:	4887      	ldr	r0, [pc, #540]	; (9300 <read_keyboard()+0x24c>)
    90e4:	f003 f98e 	bl	c404 <usb_serial_write>
    90e8:	4886      	ldr	r0, [pc, #536]	; (9304 <read_keyboard()+0x250>)
    90ea:	f003 fb8f 	bl	c80c <Print::println()>
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    90ee:	4885      	ldr	r0, [pc, #532]	; (9304 <read_keyboard()+0x250>)
		keyboard_update = 1;
    90f0:	4c85      	ldr	r4, [pc, #532]	; (9308 <read_keyboard()+0x254>)
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    90f2:	f003 fc47 	bl	c984 <Stream::parseInt()>
		keyboard_update = 1;
		switch (in_byte) {
    90f6:	782b      	ldrb	r3, [r5, #0]
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    90f8:	4686      	mov	lr, r0
    90fa:	4884      	ldr	r0, [pc, #528]	; (930c <read_keyboard()+0x258>)
    90fc:	fa1f f28e 	uxth.w	r2, lr
		keyboard_update = 1;
    9100:	2101      	movs	r1, #1
		switch (in_byte) {
    9102:	3b42      	subs	r3, #66	; 0x42
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    9104:	8002      	strh	r2, [r0, #0]
		keyboard_update = 1;
    9106:	7021      	strb	r1, [r4, #0]
		switch (in_byte) {
    9108:	2b2a      	cmp	r3, #42	; 0x2a
    910a:	d8d7      	bhi.n	90bc <read_keyboard()+0x8>
    910c:	a101      	add	r1, pc, #4	; (adr r1, 9114 <read_keyboard()+0x60>)
    910e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    9112:	bf00      	nop
    9114:	000092bf 	.word	0x000092bf
    9118:	000090bd 	.word	0x000090bd
    911c:	000092dd 	.word	0x000092dd
    9120:	000092ad 	.word	0x000092ad
    9124:	000092a5 	.word	0x000092a5
    9128:	000090bd 	.word	0x000090bd
    912c:	000090bd 	.word	0x000090bd
    9130:	000090bd 	.word	0x000090bd
    9134:	000090bd 	.word	0x000090bd
    9138:	000090bd 	.word	0x000090bd
    913c:	000090bd 	.word	0x000090bd
    9140:	00009291 	.word	0x00009291
    9144:	0000927b 	.word	0x0000927b
    9148:	000090bd 	.word	0x000090bd
    914c:	00009261 	.word	0x00009261
    9150:	0000925b 	.word	0x0000925b
    9154:	00009255 	.word	0x00009255
    9158:	0000923b 	.word	0x0000923b
    915c:	0000922b 	.word	0x0000922b
    9160:	000090bd 	.word	0x000090bd
    9164:	000090bd 	.word	0x000090bd
    9168:	000090bd 	.word	0x000090bd
    916c:	000090bd 	.word	0x000090bd
    9170:	000090bd 	.word	0x000090bd
    9174:	000090bd 	.word	0x000090bd
    9178:	000090bd 	.word	0x000090bd
    917c:	000090bd 	.word	0x000090bd
    9180:	000090bd 	.word	0x000090bd
    9184:	000090bd 	.word	0x000090bd
    9188:	000090bd 	.word	0x000090bd
    918c:	000090bd 	.word	0x000090bd
    9190:	00009223 	.word	0x00009223
    9194:	0000921b 	.word	0x0000921b
    9198:	00009213 	.word	0x00009213
    919c:	0000920b 	.word	0x0000920b
    91a0:	00009203 	.word	0x00009203
    91a4:	000091fb 	.word	0x000091fb
    91a8:	000091f3 	.word	0x000091f3
    91ac:	000091eb 	.word	0x000091eb
    91b0:	000091e3 	.word	0x000091e3
    91b4:	000091db 	.word	0x000091db
    91b8:	000091d3 	.word	0x000091d3
    91bc:	000091c1 	.word	0x000091c1

			// k
			case 107: update_var = 10;	break;

			// l
			case 108: update_var = 11;	break;
    91c0:	4b53      	ldr	r3, [pc, #332]	; (9310 <read_keyboard()+0x25c>)
    91c2:	220b      	movs	r2, #11
    91c4:	701a      	strb	r2, [r3, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    91c6:	f003 f8f3 	bl	c3b0 <usb_serial_available>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
    91ca:	2800      	cmp	r0, #0
    91cc:	f73f af7b 	bgt.w	90c6 <read_keyboard()+0x12>
    91d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			// j
			case 106: update_var = 9;	break;

			// k
			case 107: update_var = 10;	break;
    91d2:	4b4f      	ldr	r3, [pc, #316]	; (9310 <read_keyboard()+0x25c>)
    91d4:	220a      	movs	r2, #10
    91d6:	701a      	strb	r2, [r3, #0]
    91d8:	e770      	b.n	90bc <read_keyboard()+0x8>

			// i
			case 105: update_var = 8;	break;

			// j
			case 106: update_var = 9;	break;
    91da:	4b4d      	ldr	r3, [pc, #308]	; (9310 <read_keyboard()+0x25c>)
    91dc:	2209      	movs	r2, #9
    91de:	701a      	strb	r2, [r3, #0]
    91e0:	e76c      	b.n	90bc <read_keyboard()+0x8>

			// h
			case 104: update_var = 7;	break;

			// i
			case 105: update_var = 8;	break;
    91e2:	4b4b      	ldr	r3, [pc, #300]	; (9310 <read_keyboard()+0x25c>)
    91e4:	2208      	movs	r2, #8
    91e6:	701a      	strb	r2, [r3, #0]
    91e8:	e768      	b.n	90bc <read_keyboard()+0x8>

			// g
			case 103: update_var = 6;	break;

			// h
			case 104: update_var = 7;	break;
    91ea:	4b49      	ldr	r3, [pc, #292]	; (9310 <read_keyboard()+0x25c>)
    91ec:	2207      	movs	r2, #7
    91ee:	701a      	strb	r2, [r3, #0]
    91f0:	e764      	b.n	90bc <read_keyboard()+0x8>

			// f 
			case 102: update_var = 5;	break;

			// g
			case 103: update_var = 6;	break;
    91f2:	4b47      	ldr	r3, [pc, #284]	; (9310 <read_keyboard()+0x25c>)
    91f4:	2206      	movs	r2, #6
    91f6:	701a      	strb	r2, [r3, #0]
    91f8:	e760      	b.n	90bc <read_keyboard()+0x8>

			// e
			case 101: update_var = 4;	break;

			// f 
			case 102: update_var = 5;	break;
    91fa:	4b45      	ldr	r3, [pc, #276]	; (9310 <read_keyboard()+0x25c>)
    91fc:	2205      	movs	r2, #5
    91fe:	701a      	strb	r2, [r3, #0]
    9200:	e75c      	b.n	90bc <read_keyboard()+0x8>

			// d 
			case 100: update_var = 3;	break;

			// e
			case 101: update_var = 4;	break;
    9202:	4b43      	ldr	r3, [pc, #268]	; (9310 <read_keyboard()+0x25c>)
    9204:	2204      	movs	r2, #4
    9206:	701a      	strb	r2, [r3, #0]
    9208:	e758      	b.n	90bc <read_keyboard()+0x8>

			// c
			case 99: update_var = 2;	break;

			// d 
			case 100: update_var = 3;	break;
    920a:	4b41      	ldr	r3, [pc, #260]	; (9310 <read_keyboard()+0x25c>)
    920c:	2203      	movs	r2, #3
    920e:	701a      	strb	r2, [r3, #0]
    9210:	e754      	b.n	90bc <read_keyboard()+0x8>

			// b
			case 98: update_var = 1;	break;

			// c
			case 99: update_var = 2;	break;
    9212:	4b3f      	ldr	r3, [pc, #252]	; (9310 <read_keyboard()+0x25c>)
    9214:	2202      	movs	r2, #2
    9216:	701a      	strb	r2, [r3, #0]
    9218:	e750      	b.n	90bc <read_keyboard()+0x8>

			// a
			case 97: update_var = 0;	break;

			// b
			case 98: update_var = 1;	break;
    921a:	4b3d      	ldr	r3, [pc, #244]	; (9310 <read_keyboard()+0x25c>)
    921c:	2201      	movs	r2, #1
    921e:	701a      	strb	r2, [r3, #0]
    9220:	e74c      	b.n	90bc <read_keyboard()+0x8>

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; update_var = 255; break;

			// a
			case 97: update_var = 0;	break;
    9222:	4b3b      	ldr	r3, [pc, #236]	; (9310 <read_keyboard()+0x25c>)
    9224:	2200      	movs	r2, #0
    9226:	701a      	strb	r2, [r3, #0]
    9228:	e748      	b.n	90bc <read_keyboard()+0x8>

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; update_var = 255; break;
    922a:	4b3a      	ldr	r3, [pc, #232]	; (9314 <read_keyboard()+0x260>)
    922c:	4938      	ldr	r1, [pc, #224]	; (9310 <read_keyboard()+0x25c>)
    922e:	801a      	strh	r2, [r3, #0]
    9230:	22ff      	movs	r2, #255	; 0xff
    9232:	2300      	movs	r3, #0
    9234:	700a      	strb	r2, [r1, #0]
    9236:	7023      	strb	r3, [r4, #0]
    9238:	e740      	b.n	90bc <read_keyboard()+0x8>

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    923a:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 9328 <read_keyboard()+0x274>

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    923e:	4934      	ldr	r1, [pc, #208]	; (9310 <read_keyboard()+0x25c>)
    9240:	3200      	adds	r2, #0
    9242:	bf18      	it	ne
    9244:	2201      	movne	r2, #1
    9246:	20ff      	movs	r0, #255	; 0xff
    9248:	2300      	movs	r3, #0
    924a:	f88e 2000 	strb.w	r2, [lr]
    924e:	7008      	strb	r0, [r1, #0]
    9250:	7023      	strb	r3, [r4, #0]
    9252:	e733      	b.n	90bc <read_keyboard()+0x8>
    9254:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 932c <read_keyboard()+0x278>
    9258:	e7f1      	b.n	923e <read_keyboard()+0x18a>
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
				keyboard_update = 0; 
				break;

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    925a:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 9330 <read_keyboard()+0x27c>
    925e:	e7ee      	b.n	923e <read_keyboard()+0x18a>
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    9260:	4b2d      	ldr	r3, [pc, #180]	; (9318 <read_keyboard()+0x264>)
    9262:	482e      	ldr	r0, [pc, #184]	; (931c <read_keyboard()+0x268>)
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    9264:	f887 e229 	strb.w	lr, [r7, #553]	; 0x229
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    9268:	fa5f f28e 	uxtb.w	r2, lr
    926c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9270:	f7f7 fc66 	bl	b40 <CRGBPalette16::operator=(unsigned char const*)>
				keyboard_update = 0; 
    9274:	2300      	movs	r3, #0
    9276:	7023      	strb	r3, [r4, #0]
				break;
    9278:	e720      	b.n	90bc <read_keyboard()+0x8>

			// M - mode
			case 77: change_mode((uint8_t)update_arg); keyboard_update = 0; update_var = 255; break;

			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    927a:	3200      	adds	r2, #0
    927c:	4924      	ldr	r1, [pc, #144]	; (9310 <read_keyboard()+0x25c>)
    927e:	bf18      	it	ne
    9280:	2201      	movne	r2, #1
    9282:	20ff      	movs	r0, #255	; 0xff
    9284:	2300      	movs	r3, #0
    9286:	f887 21c5 	strb.w	r2, [r7, #453]	; 0x1c5
    928a:	7008      	strb	r0, [r1, #0]
    928c:	7023      	strb	r3, [r4, #0]
    928e:	e715      	b.n	90bc <read_keyboard()+0x8>
				else { curr_leds.current_blending = LINEARBLEND; }
				keyboard_update = 0; 
				update_var = 255; break;

			// M - mode
			case 77: change_mode((uint8_t)update_arg); keyboard_update = 0; update_var = 255; break;
    9290:	fa5f f08e 	uxtb.w	r0, lr
    9294:	f7ff fe92 	bl	8fbc <change_mode(unsigned char)>
    9298:	4a1d      	ldr	r2, [pc, #116]	; (9310 <read_keyboard()+0x25c>)
    929a:	21ff      	movs	r1, #255	; 0xff
    929c:	2300      	movs	r3, #0
    929e:	7011      	strb	r1, [r2, #0]
    92a0:	7023      	strb	r3, [r4, #0]
    92a2:	e70b      	b.n	90bc <read_keyboard()+0x8>
			// E - next_leds delay, beta
			case 69: next_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;

			// F - current_leds blending
			case 70: 
				if ((bool)update_arg == 0) { curr_leds.current_blending = NOBLEND;	}
    92a4:	bb12      	cbnz	r2, 92ec <read_keyboard()+0x238>
    92a6:	f887 2228 	strb.w	r2, [r7, #552]	; 0x228
    92aa:	e7f5      	b.n	9298 <read_keyboard()+0x1e4>

			// D - delay
			case 68: curr_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;

			// E - next_leds delay, beta
			case 69: next_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;
    92ac:	4b1c      	ldr	r3, [pc, #112]	; (9320 <read_keyboard()+0x26c>)
    92ae:	4a18      	ldr	r2, [pc, #96]	; (9310 <read_keyboard()+0x25c>)
    92b0:	f883 e1c3 	strb.w	lr, [r3, #451]	; 0x1c3
    92b4:	21ff      	movs	r1, #255	; 0xff
    92b6:	2300      	movs	r3, #0
    92b8:	7011      	strb	r1, [r2, #0]
    92ba:	7023      	strb	r3, [r4, #0]
    92bc:	e6fe      	b.n	90bc <read_keyboard()+0x8>
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    92be:	f8df c074 	ldr.w	ip, [pc, #116]	; 9334 <read_keyboard()+0x280>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    92c2:	4818      	ldr	r0, [pc, #96]	; (9324 <read_keyboard()+0x270>)
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    92c4:	4a12      	ldr	r2, [pc, #72]	; (9310 <read_keyboard()+0x25c>)
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    92c6:	fa5f fe8e 	uxtb.w	lr, lr
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    92ca:	21ff      	movs	r1, #255	; 0xff

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    92cc:	2300      	movs	r3, #0
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    92ce:	f88c e000 	strb.w	lr, [ip]
    92d2:	f880 e000 	strb.w	lr, [r0]
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    92d6:	7011      	strb	r1, [r2, #0]

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    92d8:	7023      	strb	r3, [r4, #0]
				update_var = 255;
				break;
    92da:	e6ef      	b.n	90bc <read_keyboard()+0x8>

			// D - delay
			case 68: curr_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;
    92dc:	4a0c      	ldr	r2, [pc, #48]	; (9310 <read_keyboard()+0x25c>)
    92de:	f887 e1c3 	strb.w	lr, [r7, #451]	; 0x1c3
    92e2:	21ff      	movs	r1, #255	; 0xff
    92e4:	2300      	movs	r3, #0
    92e6:	7011      	strb	r1, [r2, #0]
    92e8:	7023      	strb	r3, [r4, #0]
    92ea:	e6e7      	b.n	90bc <read_keyboard()+0x8>
			case 69: next_leds.delay_time = (uint8_t)update_arg; keyboard_update = 0; update_var = 255; break;

			// F - current_leds blending
			case 70: 
				if ((bool)update_arg == 0) { curr_leds.current_blending = NOBLEND;	}
				else { curr_leds.current_blending = LINEARBLEND; }
    92ec:	2301      	movs	r3, #1
    92ee:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
    92f2:	e7d1      	b.n	9298 <read_keyboard()+0x1e4>
    92f4:	1fff911c 	.word	0x1fff911c
    92f8:	1fffa26c 	.word	0x1fffa26c
    92fc:	000103a8 	.word	0x000103a8
    9300:	000103ac 	.word	0x000103ac
    9304:	1fff878c 	.word	0x1fff878c
    9308:	1fff91d1 	.word	0x1fff91d1
    930c:	1fff90d2 	.word	0x1fff90d2
    9310:	1fff9a18 	.word	0x1fff9a18
    9314:	1fff871c 	.word	0x1fff871c
    9318:	0000eb18 	.word	0x0000eb18
    931c:	1fffa464 	.word	0x1fffa464
    9320:	1fff8884 	.word	0x1fff8884
    9324:	1fffac70 	.word	0x1fffac70
    9328:	1fff8783 	.word	0x1fff8783
    932c:	1fff874a 	.word	0x1fff874a
    9330:	1fff8758 	.word	0x1fff8758
    9334:	1fff871e 	.word	0x1fff871e

00009338 <setup>:

Mode start_mode = MULTI_JUGGLE;

// ================ SETUP ================

void setup() {
    9338:	b570      	push	{r4, r5, r6, lr}
    933a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    933e:	b082      	sub	sp, #8
    9340:	4864      	ldr	r0, [pc, #400]	; (94d4 <setup+0x19c>)
    9342:	f001 fd2d 	bl	ada0 <VisualMicroDebug::init(unsigned long)>
    9346:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    934a:	4862      	ldr	r0, [pc, #392]	; (94d4 <setup+0x19c>)
    934c:	f001 fd24 	bl	ad98 <VisualMicroDebug::begin(unsigned long)>
    9350:	2101      	movs	r1, #1
    9352:	4860      	ldr	r0, [pc, #384]	; (94d4 <setup+0x19c>)
    9354:	f001 fcfa 	bl	ad4c <VisualMicroDebug::outPacketStart(bool)>
    9358:	b150      	cbz	r0, 9370 <setup+0x38>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    935a:	2110      	movs	r1, #16
    935c:	485e      	ldr	r0, [pc, #376]	; (94d8 <setup+0x1a0>)
    935e:	f003 f851 	bl	c404 <usb_serial_write>
    9362:	485c      	ldr	r0, [pc, #368]	; (94d4 <setup+0x19c>)
    9364:	210a      	movs	r1, #10
    9366:	f001 fcdf 	bl	ad28 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    936a:	485a      	ldr	r0, [pc, #360]	; (94d4 <setup+0x19c>)
    936c:	f001 fd12 	bl	ad94 <VisualMicroDebug::outPacketEnd()>
    9370:	2201      	movs	r2, #1
    9372:	2100      	movs	r1, #0
    9374:	4857      	ldr	r0, [pc, #348]	; (94d4 <setup+0x19c>)
    9376:	f001 fdbf 	bl	aef8 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(500); Serial.println("DEBUG ON"); }
    937a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    937e:	4857      	ldr	r0, [pc, #348]	; (94dc <setup+0x1a4>)
    9380:	f003 fad0 	bl	c924 <Stream::setTimeout(unsigned long)>
    9384:	2108      	movs	r1, #8
    9386:	4856      	ldr	r0, [pc, #344]	; (94e0 <setup+0x1a8>)
    9388:	f003 f83c 	bl	c404 <usb_serial_write>
    938c:	4853      	ldr	r0, [pc, #332]	; (94dc <setup+0x1a4>)
    938e:	f003 fa3d 	bl	c80c <Print::println()>

	delay(1000);
    9392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9396:	f002 f81d 	bl	b3d4 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    939a:	4852      	ldr	r0, [pc, #328]	; (94e4 <setup+0x1ac>)
    939c:	6803      	ldr	r3, [r0, #0]
    939e:	f013 0401 	ands.w	r4, r3, #1
    93a2:	d073      	beq.n	948c <setup+0x154>
    93a4:	2300      	movs	r3, #0
    93a6:	2296      	movs	r2, #150	; 0x96
    93a8:	494f      	ldr	r1, [pc, #316]	; (94e8 <setup+0x1b0>)
    93aa:	4850      	ldr	r0, [pc, #320]	; (94ec <setup+0x1b4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    93ac:	4c50      	ldr	r4, [pc, #320]	; (94f0 <setup+0x1b8>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    93ae:	4d51      	ldr	r5, [pc, #324]	; (94f4 <setup+0x1bc>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    93b0:	f001 f8fe 	bl	a5b0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

	//FastLED.addLeds<LED_TYPE, 12, 13, COLOR_ORDER>(master_leds, NUM_LEDS);		// ESP32
	FastLED.addLeds<LED_TYPE, 14,  7, COLOR_ORDER>(master_leds, NUM_LEDS);	// Teensy
	//FastLED>addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);

	FastLED.setBrightness(max_bright);
    93b4:	4b50      	ldr	r3, [pc, #320]	; (94f8 <setup+0x1c0>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    93b6:	781b      	ldrb	r3, [r3, #0]
    93b8:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    93ba:	22b0      	movs	r2, #176	; 0xb0
    93bc:	26ff      	movs	r6, #255	; 0xff
    93be:	23f0      	movs	r3, #240	; 0xf0
	FastLED.setCorrection(TypicalLEDStrip);
    93c0:	4620      	mov	r0, r4
    93c2:	a901      	add	r1, sp, #4
    93c4:	f88d 2005 	strb.w	r2, [sp, #5]
    93c8:	f88d 3006 	strb.w	r3, [sp, #6]
    93cc:	f88d 6004 	strb.w	r6, [sp, #4]
    93d0:	f001 f92e 	bl	a630 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    93d4:	f640 31b8 	movw	r1, #3000	; 0xbb8
    93d8:	2005      	movs	r0, #5
    93da:	f001 fc99 	bl	ad10 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    93de:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    93e2:	2002      	movs	r0, #2
    93e4:	802b      	strh	r3, [r5, #0]
    93e6:	f001 fec7 	bl	b178 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    93ea:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    93ec:	2100      	movs	r1, #0
    93ee:	4403      	add	r3, r0
    93f0:	4620      	mov	r0, r4
    93f2:	802b      	strh	r3, [r5, #0]
    93f4:	f001 fa30 	bl	a858 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    93f8:	7821      	ldrb	r1, [r4, #0]
    93fa:	4620      	mov	r0, r4
    93fc:	f001 f952 	bl	a6a4 <CFastLED::show(unsigned char)>
    9400:	4620      	mov	r0, r4
    9402:	2132      	movs	r1, #50	; 0x32
    9404:	f001 f9b0 	bl	a768 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    9408:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    940a:	aa01      	add	r2, sp, #4
    940c:	2196      	movs	r1, #150	; 0x96
    940e:	4836      	ldr	r0, [pc, #216]	; (94e8 <setup+0x1b0>)
    9410:	f88d 6004 	strb.w	r6, [sp, #4]
    9414:	f88d 5005 	strb.w	r5, [sp, #5]
    9418:	f88d 5006 	strb.w	r5, [sp, #6]
    941c:	f000 ff1e 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
    9420:	4620      	mov	r0, r4
    9422:	21fa      	movs	r1, #250	; 0xfa
    9424:	f001 f9a0 	bl	a768 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    9428:	aa01      	add	r2, sp, #4
    942a:	2196      	movs	r1, #150	; 0x96
    942c:	482e      	ldr	r0, [pc, #184]	; (94e8 <setup+0x1b0>)
    942e:	f88d 6006 	strb.w	r6, [sp, #6]
    9432:	f88d 5004 	strb.w	r5, [sp, #4]
    9436:	f88d 5005 	strb.w	r5, [sp, #5]
    943a:	f000 ff0f 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
    943e:	4620      	mov	r0, r4
    9440:	21fa      	movs	r1, #250	; 0xfa
    9442:	f001 f991 	bl	a768 <CFastLED::delay(unsigned long)>
    9446:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    9448:	aa01      	add	r2, sp, #4
    944a:	2196      	movs	r1, #150	; 0x96
    944c:	4826      	ldr	r0, [pc, #152]	; (94e8 <setup+0x1b0>)
    944e:	f88d 3005 	strb.w	r3, [sp, #5]
    9452:	f88d 5004 	strb.w	r5, [sp, #4]
    9456:	f88d 5006 	strb.w	r5, [sp, #6]
    945a:	f000 feff 	bl	a25c <fill_solid(CRGB*, int, CRGB const&)>
    945e:	4620      	mov	r0, r4
    9460:	21fa      	movs	r1, #250	; 0xfa
    9462:	f001 f981 	bl	a768 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    9466:	4629      	mov	r1, r5
    9468:	4620      	mov	r0, r4
    946a:	f001 f9f5 	bl	a858 <CFastLED::clear(bool)>
    946e:	4620      	mov	r0, r4
    9470:	21fa      	movs	r1, #250	; 0xfa
    9472:	f001 f979 	bl	a768 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    9476:	f7f7 fc59 	bl	d2c <initialize()>
    947a:	210e      	movs	r1, #14
    947c:	481f      	ldr	r0, [pc, #124]	; (94fc <setup+0x1c4>)
    947e:	f002 ffc1 	bl	c404 <usb_serial_write>
    9482:	4816      	ldr	r0, [pc, #88]	; (94dc <setup+0x1a4>)
    9484:	f003 f9c2 	bl	c80c <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    9488:	b002      	add	sp, #8
    948a:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    948c:	f001 ff22 	bl	b2d4 <__cxa_guard_acquire>
    9490:	2800      	cmp	r0, #0
    9492:	d087      	beq.n	93a4 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    9494:	491a      	ldr	r1, [pc, #104]	; (9500 <setup+0x1c8>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    9496:	4b15      	ldr	r3, [pc, #84]	; (94ec <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    9498:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    949a:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    949c:	22ff      	movs	r2, #255	; 0xff
    949e:	2501      	movs	r5, #1
    94a0:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    94a2:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    94a4:	749d      	strb	r5, [r3, #18]
    94a6:	731a      	strb	r2, [r3, #12]
    94a8:	735a      	strb	r2, [r3, #13]
    94aa:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    94ac:	73da      	strb	r2, [r3, #15]
    94ae:	741a      	strb	r2, [r3, #16]
    94b0:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    94b2:	b160      	cbz	r0, 94ce <setup+0x196>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    94b4:	4a13      	ldr	r2, [pc, #76]	; (9504 <setup+0x1cc>)
    94b6:	6811      	ldr	r1, [r2, #0]
    94b8:	b101      	cbz	r1, 94bc <setup+0x184>
    94ba:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    94bc:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    94be:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    94c0:	4911      	ldr	r1, [pc, #68]	; (9508 <setup+0x1d0>)
    94c2:	4808      	ldr	r0, [pc, #32]	; (94e4 <setup+0x1ac>)
    94c4:	619a      	str	r2, [r3, #24]
    94c6:	6019      	str	r1, [r3, #0]
    94c8:	f001 ff0a 	bl	b2e0 <__cxa_guard_release>
    94cc:	e76a      	b.n	93a4 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    94ce:	600b      	str	r3, [r1, #0]
    94d0:	e7f0      	b.n	94b4 <setup+0x17c>
    94d2:	bf00      	nop
    94d4:	1fffac98 	.word	0x1fffac98
    94d8:	000103b0 	.word	0x000103b0
    94dc:	1fff878c 	.word	0x1fff878c
    94e0:	000103c4 	.word	0x000103c4
    94e4:	1fff8860 	.word	0x1fff8860
    94e8:	1fffaaa8 	.word	0x1fffaaa8
    94ec:	1fff8864 	.word	0x1fff8864
    94f0:	1fffac70 	.word	0x1fffac70
    94f4:	1fff8784 	.word	0x1fff8784
    94f8:	1fff871e 	.word	0x1fff871e
    94fc:	000103d0 	.word	0x000103d0
    9500:	1fffac80 	.word	0x1fffac80
    9504:	1fffac90 	.word	0x1fffac90
    9508:	0000dfe0 	.word	0x0000dfe0

0000950c <loop>:
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    950c:	4aae      	ldr	r2, [pc, #696]	; (97c8 <loop+0x2bc>)
    950e:	8813      	ldrh	r3, [r2, #0]



// ================ LOOP ================

void loop() {
    9510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9514:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    9518:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    951c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
	
	// Check for keyboard updates
	if (DEBUG) { read_keyboard(); }

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,45){
    9520:	4daa      	ldr	r5, [pc, #680]	; (97cc <loop+0x2c0>)
    9522:	3319      	adds	r3, #25
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    9524:	005b      	lsls	r3, r3, #1



// ================ LOOP ================

void loop() {
    9526:	b097      	sub	sp, #92	; 0x5c
    9528:	8013      	strh	r3, [r2, #0]
	// Add entropy to randomness
	random16_add_entropy(random16());
	
	// Check for keyboard updates
	if (DEBUG) { read_keyboard(); }
    952a:	f7ff fdc3 	bl	90b4 <read_keyboard()>

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,45){
    952e:	682b      	ldr	r3, [r5, #0]
    9530:	07db      	lsls	r3, r3, #31
    9532:	f140 81bf 	bpl.w	98b4 <loop+0x3a8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9536:	4ea6      	ldr	r6, [pc, #664]	; (97d0 <loop+0x2c4>)
    9538:	4ca6      	ldr	r4, [pc, #664]	; (97d4 <loop+0x2c8>)
    953a:	6833      	ldr	r3, [r6, #0]
    953c:	9303      	str	r3, [sp, #12]
	return ret;
    953e:	9a03      	ldr	r2, [sp, #12]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    9540:	48a5      	ldr	r0, [pc, #660]	; (97d8 <loop+0x2cc>)
    9542:	8823      	ldrh	r3, [r4, #0]
    9544:	8861      	ldrh	r1, [r4, #2]
    9546:	fba0 0202 	umull	r0, r2, r0, r2
    954a:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    954e:	b29b      	uxth	r3, r3
    9550:	4299      	cmp	r1, r3
    9552:	d80f      	bhi.n	9574 <loop+0x68>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9554:	6833      	ldr	r3, [r6, #0]
    9556:	9302      	str	r3, [sp, #8]
	return ret;
    9558:	9b02      	ldr	r3, [sp, #8]
    955a:	499f      	ldr	r1, [pc, #636]	; (97d8 <loop+0x2cc>)
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
    955c:	4a9f      	ldr	r2, [pc, #636]	; (97dc <loop+0x2d0>)
	// Check for keyboard updates
	if (DEBUG) { read_keyboard(); }

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,45){
		modeTimer.setPeriod(mode_change_time);
    955e:	48a0      	ldr	r0, [pc, #640]	; (97e0 <loop+0x2d4>)
		if (mode_change) { change_mode(); }
    9560:	7812      	ldrb	r2, [r2, #0]
    9562:	8800      	ldrh	r0, [r0, #0]
    9564:	8060      	strh	r0, [r4, #2]
    9566:	fba1 1303 	umull	r1, r3, r1, r3
    956a:	099b      	lsrs	r3, r3, #6
    956c:	8023      	strh	r3, [r4, #0]
    956e:	2a00      	cmp	r2, #0
    9570:	f040 81d5 	bne.w	991e <loop+0x412>
	}

	// Change palette
	EVERY_N_SECONDS(25) {
    9574:	4d9b      	ldr	r5, [pc, #620]	; (97e4 <loop+0x2d8>)
    9576:	682b      	ldr	r3, [r5, #0]
    9578:	07df      	lsls	r7, r3, #31
    957a:	f140 81b1 	bpl.w	98e0 <loop+0x3d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    957e:	6833      	ldr	r3, [r6, #0]
    9580:	4c99      	ldr	r4, [pc, #612]	; (97e8 <loop+0x2dc>)
    9582:	9306      	str	r3, [sp, #24]
	return ret;
    9584:	9a06      	ldr	r2, [sp, #24]
    9586:	4894      	ldr	r0, [pc, #592]	; (97d8 <loop+0x2cc>)
    9588:	8823      	ldrh	r3, [r4, #0]
    958a:	8861      	ldrh	r1, [r4, #2]
    958c:	fba0 0202 	umull	r0, r2, r0, r2
    9590:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    9594:	b29b      	uxth	r3, r3
    9596:	4299      	cmp	r1, r3
    9598:	f240 8158 	bls.w	984c <loop+0x340>
    959c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 97fc <loop+0x2f0>
    95a0:	f8df 9254 	ldr.w	r9, [pc, #596]	; 97f8 <loop+0x2ec>
			change_palette(curr_leds); 
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    95a4:	4d91      	ldr	r5, [pc, #580]	; (97ec <loop+0x2e0>)
    95a6:	682b      	ldr	r3, [r5, #0]
    95a8:	07dc      	lsls	r4, r3, #31
    95aa:	f140 80bd 	bpl.w	9728 <loop+0x21c>
    95ae:	4c90      	ldr	r4, [pc, #576]	; (97f0 <loop+0x2e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    95b0:	6833      	ldr	r3, [r6, #0]
    95b2:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    95b4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    95b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    95ba:	1a5b      	subs	r3, r3, r1
    95bc:	429a      	cmp	r2, r3
    95be:	f240 80c3 	bls.w	9748 <loop+0x23c>
    95c2:	4f8c      	ldr	r7, [pc, #560]	; (97f4 <loop+0x2e8>)
	next_over_leds.target_palette = cequal_gp;
}


void delay_check(LEDStruct& leds) {
	if (leds.delay_time < 5) { leds.delay_time = 5; }
    95c4:	f899 31c3 	ldrb.w	r3, [r9, #451]	; 0x1c3
    95c8:	4a8b      	ldr	r2, [pc, #556]	; (97f8 <loop+0x2ec>)
    95ca:	2b04      	cmp	r3, #4
    95cc:	f200 8162 	bhi.w	9894 <loop+0x388>
    95d0:	2305      	movs	r3, #5
    95d2:	f882 31c3 	strb.w	r3, [r2, #451]	; 0x1c3
    95d6:	f898 21c3 	ldrb.w	r2, [r8, #451]	; 0x1c3
    95da:	4988      	ldr	r1, [pc, #544]	; (97fc <loop+0x2f0>)
    95dc:	2a04      	cmp	r2, #4
    95de:	f200 8153 	bhi.w	9888 <loop+0x37c>
    95e2:	2205      	movs	r2, #5
    95e4:	f881 21c3 	strb.w	r2, [r1, #451]	; 0x1c3
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    95e8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 9840 <loop+0x334>
	}	

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
    95ec:	f8df 9254 	ldr.w	r9, [pc, #596]	; 9844 <loop+0x338>
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    95f0:	f8d8 1000 	ldr.w	r1, [r8]

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    95f4:	4d82      	ldr	r5, [pc, #520]	; (9800 <loop+0x2f4>)
	}	

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
    95f6:	f889 3000 	strb.w	r3, [r9]
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    95fa:	07c8      	lsls	r0, r1, #31

	// Update delay times
	delay_check(curr_leds);
	delay_check(next_leds);
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    95fc:	702a      	strb	r2, [r5, #0]


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    95fe:	f140 80b9 	bpl.w	9774 <loop+0x268>
    9602:	4c80      	ldr	r4, [pc, #512]	; (9804 <loop+0x2f8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9604:	6832      	ldr	r2, [r6, #0]
    9606:	920c      	str	r2, [sp, #48]	; 0x30
    9608:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    960c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    960e:	1a12      	subs	r2, r2, r0
    9610:	428a      	cmp	r2, r1
    9612:	f080 80c1 	bcs.w	9798 <loop+0x28c>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    9616:	f8df 8230 	ldr.w	r8, [pc, #560]	; 9848 <loop+0x33c>
    961a:	f8d8 3000 	ldr.w	r3, [r8]
    961e:	07d9      	lsls	r1, r3, #31
    9620:	f140 80c9 	bpl.w	97b6 <loop+0x2aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9624:	6833      	ldr	r3, [r6, #0]
    9626:	4c78      	ldr	r4, [pc, #480]	; (9808 <loop+0x2fc>)
    9628:	930f      	str	r3, [sp, #60]	; 0x3c
    962a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    962e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9630:	1a5b      	subs	r3, r3, r1
    9632:	4293      	cmp	r3, r2
    9634:	d309      	bcc.n	964a <loop+0x13e>
		if (!keyboard_update) {
    9636:	4b75      	ldr	r3, [pc, #468]	; (980c <loop+0x300>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9638:	6832      	ldr	r2, [r6, #0]
    963a:	920e      	str	r2, [sp, #56]	; 0x38
    963c:	781b      	ldrb	r3, [r3, #0]
	return ret;
    963e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9640:	6022      	str	r2, [r4, #0]
    9642:	4a71      	ldr	r2, [pc, #452]	; (9808 <loop+0x2fc>)
    9644:	2b00      	cmp	r3, #0
    9646:	f000 812b 	beq.w	98a0 <loop+0x394>
			}
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
    964a:	783b      	ldrb	r3, [r7, #0]
    964c:	b123      	cbz	r3, 9658 <loop+0x14c>
    964e:	4b6f      	ldr	r3, [pc, #444]	; (980c <loop+0x300>)
    9650:	781b      	ldrb	r3, [r3, #0]
    9652:	2b00      	cmp	r3, #0
    9654:	f000 815e 	beq.w	9914 <loop+0x408>
    9658:	4b67      	ldr	r3, [pc, #412]	; (97f8 <loop+0x2ec>)
    965a:	4a6d      	ldr	r2, [pc, #436]	; (9810 <loop+0x304>)
    965c:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9660:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    9662:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    9664:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9666:	7014      	strb	r4, [r2, #0]
    9668:	3303      	adds	r3, #3
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    966a:	429d      	cmp	r5, r3
        g = rhs.g;
    966c:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    966e:	7091      	strb	r1, [r2, #2]
    9670:	f102 0203 	add.w	r2, r2, #3
    9674:	d1f4      	bne.n	9660 <loop+0x154>
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    9676:	4d67      	ldr	r5, [pc, #412]	; (9814 <loop+0x308>)
    9678:	682b      	ldr	r3, [r5, #0]
    967a:	07da      	lsls	r2, r3, #31
    967c:	f140 8142 	bpl.w	9904 <loop+0x3f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9680:	6833      	ldr	r3, [r6, #0]
    9682:	4c65      	ldr	r4, [pc, #404]	; (9818 <loop+0x30c>)
    9684:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    9686:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    9688:	4864      	ldr	r0, [pc, #400]	; (981c <loop+0x310>)
    968a:	8823      	ldrh	r3, [r4, #0]
    968c:	8861      	ldrh	r1, [r4, #2]
    968e:	fba0 0202 	umull	r0, r2, r0, r2
    9692:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    9696:	b29b      	uxth	r3, r3
    9698:	4299      	cmp	r1, r3
    969a:	d80b      	bhi.n	96b4 <loop+0x1a8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    969c:	6833      	ldr	r3, [r6, #0]
    969e:	4960      	ldr	r1, [pc, #384]	; (9820 <loop+0x314>)
    96a0:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    96a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    96a4:	485d      	ldr	r0, [pc, #372]	; (981c <loop+0x310>)
    96a6:	880a      	ldrh	r2, [r1, #0]
    96a8:	fba0 0303 	umull	r0, r3, r0, r3
    96ac:	0b9b      	lsrs	r3, r3, #14
    96ae:	3201      	adds	r2, #1
    96b0:	8023      	strh	r3, [r4, #0]
    96b2:	800a      	strh	r2, [r1, #0]
		EVERY_N_SECONDS(5) {
    96b4:	4d5b      	ldr	r5, [pc, #364]	; (9824 <loop+0x318>)
    96b6:	682b      	ldr	r3, [r5, #0]
    96b8:	07db      	lsls	r3, r3, #31
    96ba:	f140 811a 	bpl.w	98f2 <loop+0x3e6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    96be:	6833      	ldr	r3, [r6, #0]
    96c0:	4c59      	ldr	r4, [pc, #356]	; (9828 <loop+0x31c>)
    96c2:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    96c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    96c6:	4844      	ldr	r0, [pc, #272]	; (97d8 <loop+0x2cc>)
    96c8:	8823      	ldrh	r3, [r4, #0]
    96ca:	8861      	ldrh	r1, [r4, #2]
    96cc:	fba0 0202 	umull	r0, r2, r0, r2
    96d0:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    96d4:	b29b      	uxth	r3, r3
    96d6:	4299      	cmp	r1, r3
    96d8:	d81f      	bhi.n	971a <loop+0x20e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    96da:	6833      	ldr	r3, [r6, #0]
    96dc:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    96de:	9b14      	ldr	r3, [sp, #80]	; 0x50
    96e0:	4a3d      	ldr	r2, [pc, #244]	; (97d8 <loop+0x2cc>)
			LEDDebug(curr_leds);
    96e2:	4845      	ldr	r0, [pc, #276]	; (97f8 <loop+0x2ec>)
    96e4:	fba2 2303 	umull	r2, r3, r2, r3
    96e8:	099b      	lsrs	r3, r3, #6
    96ea:	8023      	strh	r3, [r4, #0]
    96ec:	f7f8 fd62 	bl	21b4 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    96f0:	783b      	ldrb	r3, [r7, #0]
    96f2:	2b00      	cmp	r3, #0
    96f4:	f040 8117 	bne.w	9926 <loop+0x41a>
				LEDDebug(next_leds);
			}
			number_of_sec_on = (number_of_sec_on + 5) % 60;
    96f8:	4c4c      	ldr	r4, [pc, #304]	; (982c <loop+0x320>)
    96fa:	484d      	ldr	r0, [pc, #308]	; (9830 <loop+0x324>)
    96fc:	7823      	ldrb	r3, [r4, #0]
    96fe:	3305      	adds	r3, #5
    9700:	fb83 0100 	smull	r0, r1, r3, r0
    9704:	4419      	add	r1, r3
    9706:	17da      	asrs	r2, r3, #31
    9708:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    970c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    9710:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    9714:	7023      	strb	r3, [r4, #0]
			global_debug();
    9716:	f7f7 fba7 	bl	e68 <global_debug()>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    971a:	4846      	ldr	r0, [pc, #280]	; (9834 <loop+0x328>)
    971c:	7801      	ldrb	r1, [r0, #0]
    971e:	f000 ffc1 	bl	a6a4 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    9722:	b017      	add	sp, #92	; 0x5c
    9724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			change_palette(curr_leds); 
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    9728:	4628      	mov	r0, r5
    972a:	f001 fdd3 	bl	b2d4 <__cxa_guard_acquire>
    972e:	2800      	cmp	r0, #0
    9730:	f040 8101 	bne.w	9936 <loop+0x42a>
    9734:	4c2e      	ldr	r4, [pc, #184]	; (97f0 <loop+0x2e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9736:	6833      	ldr	r3, [r6, #0]
    9738:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    973a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9740:	1a5b      	subs	r3, r3, r1
    9742:	4293      	cmp	r3, r2
    9744:	f4ff af3d 	bcc.w	95c2 <loop+0xb6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9748:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    974a:	493b      	ldr	r1, [pc, #236]	; (9838 <loop+0x32c>)
    974c:	9308      	str	r3, [sp, #32]
	return ret;
    974e:	9b08      	ldr	r3, [sp, #32]
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    9750:	4f28      	ldr	r7, [pc, #160]	; (97f4 <loop+0x2e8>)
    9752:	6023      	str	r3, [r4, #0]
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    9754:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    9758:	2218      	movs	r2, #24
    975a:	f000 ff01 	bl	a560 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    975e:	783b      	ldrb	r3, [r7, #0]
    9760:	2b00      	cmp	r3, #0
    9762:	f43f af2f 	beq.w	95c4 <loop+0xb8>
    9766:	4935      	ldr	r1, [pc, #212]	; (983c <loop+0x330>)
    9768:	2218      	movs	r2, #24
    976a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    976e:	f000 fef7 	bl	a560 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    9772:	e727      	b.n	95c4 <loop+0xb8>
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9774:	4640      	mov	r0, r8
    9776:	f001 fdad 	bl	b2d4 <__cxa_guard_acquire>
    977a:	2800      	cmp	r0, #0
    977c:	f040 80f5 	bne.w	996a <loop+0x45e>
    9780:	4c20      	ldr	r4, [pc, #128]	; (9804 <loop+0x2f8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9782:	6833      	ldr	r3, [r6, #0]
    9784:	930c      	str	r3, [sp, #48]	; 0x30
    9786:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    978a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    978c:	1a5b      	subs	r3, r3, r1
    978e:	4293      	cmp	r3, r2
    9790:	f4ff af41 	bcc.w	9616 <loop+0x10a>
    9794:	f899 3000 	ldrb.w	r3, [r9]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9798:	6832      	ldr	r2, [r6, #0]
    979a:	920b      	str	r2, [sp, #44]	; 0x2c
	return ret;
    979c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    979e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9848 <loop+0x33c>


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    97a2:	4815      	ldr	r0, [pc, #84]	; (97f8 <loop+0x2ec>)
    97a4:	e884 000c 	stmia.w	r4, {r2, r3}
    97a8:	f7fe ff74 	bl	8694 <switch_mode(LEDStruct&)>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    97ac:	f8d8 3000 	ldr.w	r3, [r8]
    97b0:	07d9      	lsls	r1, r3, #31
    97b2:	f53f af37 	bmi.w	9624 <loop+0x118>
    97b6:	4640      	mov	r0, r8
    97b8:	f001 fd8c 	bl	b2d4 <__cxa_guard_acquire>
    97bc:	2800      	cmp	r0, #0
    97be:	f040 80e0 	bne.w	9982 <loop+0x476>
    97c2:	4c11      	ldr	r4, [pc, #68]	; (9808 <loop+0x2fc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    97c4:	6833      	ldr	r3, [r6, #0]
    97c6:	e72f      	b.n	9628 <loop+0x11c>
    97c8:	1fff8784 	.word	0x1fff8784
    97cc:	1fff9110 	.word	0x1fff9110
    97d0:	1ffface8 	.word	0x1ffface8
    97d4:	1fffac6c 	.word	0x1fffac6c
    97d8:	10624dd3 	.word	0x10624dd3
    97dc:	1fff8783 	.word	0x1fff8783
    97e0:	1fff871c 	.word	0x1fff871c
    97e4:	1fff9120 	.word	0x1fff9120
    97e8:	1fff90e8 	.word	0x1fff90e8
    97ec:	1fff9124 	.word	0x1fff9124
    97f0:	1fff90ec 	.word	0x1fff90ec
    97f4:	1fff90d0 	.word	0x1fff90d0
    97f8:	1fffa26c 	.word	0x1fffa26c
    97fc:	1fff8884 	.word	0x1fff8884
    9800:	1fff9130 	.word	0x1fff9130
    9804:	1fff90c8 	.word	0x1fff90c8
    9808:	1fff90c0 	.word	0x1fff90c0
    980c:	1fff91d1 	.word	0x1fff91d1
    9810:	1fffaaa8 	.word	0x1fffaaa8
    9814:	1fff9128 	.word	0x1fff9128
    9818:	1fffa268 	.word	0x1fffa268
    981c:	45e7b273 	.word	0x45e7b273
    9820:	1fff91d2 	.word	0x1fff91d2
    9824:	1fff912c 	.word	0x1fff912c
    9828:	1fff90f8 	.word	0x1fff90f8
    982c:	1fff9131 	.word	0x1fff9131
    9830:	88888889 	.word	0x88888889
    9834:	1fffac70 	.word	0x1fffac70
    9838:	1fffa464 	.word	0x1fffa464
    983c:	1fff8a7c 	.word	0x1fff8a7c
    9840:	1fff9a28 	.word	0x1fff9a28
    9844:	1fff91d0 	.word	0x1fff91d0
    9848:	1fff9a24 	.word	0x1fff9a24
    984c:	6833      	ldr	r3, [r6, #0]
    984e:	9305      	str	r3, [sp, #20]
	return ret;
    9850:	9b05      	ldr	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    9852:	4960      	ldr	r1, [pc, #384]	; (99d4 <loop+0x4c8>)
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(25) {
		if (random_palette) {
    9854:	4a60      	ldr	r2, [pc, #384]	; (99d8 <loop+0x4cc>)
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    9856:	f8df 8184 	ldr.w	r8, [pc, #388]	; 99dc <loop+0x4d0>
    985a:	7812      	ldrb	r2, [r2, #0]
    985c:	fba1 1303 	umull	r1, r3, r1, r3
    9860:	099b      	lsrs	r3, r3, #6
    9862:	8023      	strh	r3, [r4, #0]
    9864:	2a00      	cmp	r2, #0
    9866:	f43f ae9b 	beq.w	95a0 <loop+0x94>
    986a:	f898 322a 	ldrb.w	r3, [r8, #554]	; 0x22a
    986e:	2b00      	cmp	r3, #0
    9870:	d15d      	bne.n	992e <loop+0x422>
    9872:	f8df 9194 	ldr.w	r9, [pc, #404]	; 9a08 <loop+0x4fc>
    9876:	f899 322a 	ldrb.w	r3, [r9, #554]	; 0x22a
    987a:	2b00      	cmp	r3, #0
    987c:	f43f ae92 	beq.w	95a4 <loop+0x98>
    9880:	4648      	mov	r0, r9
    9882:	f7f9 fadd 	bl	2e40 <change_palette(LEDStruct&) [clone .part.11]>
    9886:	e68d      	b.n	95a4 <loop+0x98>
}


void delay_check(LEDStruct& leds) {
	if (leds.delay_time < 5) { leds.delay_time = 5; }
	if (leds.delay_time > 20) { leds.delay_time = 20; }
    9888:	2a14      	cmp	r2, #20
    988a:	bf84      	itt	hi
    988c:	2214      	movhi	r2, #20
    988e:	f881 21c3 	strbhi.w	r2, [r1, #451]	; 0x1c3
    9892:	e6a9      	b.n	95e8 <loop+0xdc>
    9894:	2b14      	cmp	r3, #20
    9896:	bf84      	itt	hi
    9898:	2314      	movhi	r3, #20
    989a:	f882 31c3 	strbhi.w	r3, [r2, #451]	; 0x1c3
    989e:	e69a      	b.n	95d6 <loop+0xca>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if (!keyboard_update) {
			if (in_transition) {
    98a0:	783b      	ldrb	r3, [r7, #0]
    98a2:	2b00      	cmp	r3, #0
    98a4:	f43f aed8 	beq.w	9658 <loop+0x14c>
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    98a8:	782b      	ldrb	r3, [r5, #0]
				next_timer.setPeriod(next_delay);
				switch_mode(next_leds);
    98aa:	484c      	ldr	r0, [pc, #304]	; (99dc <loop+0x4d0>)
    98ac:	6053      	str	r3, [r2, #4]
    98ae:	f7fe fef1 	bl	8694 <switch_mode(LEDStruct&)>
    98b2:	e6ca      	b.n	964a <loop+0x13e>
	
	// Check for keyboard updates
	if (DEBUG) { read_keyboard(); }

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,45){
    98b4:	4628      	mov	r0, r5
    98b6:	f001 fd0d 	bl	b2d4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    98ba:	4e49      	ldr	r6, [pc, #292]	; (99e0 <loop+0x4d4>)
    98bc:	2800      	cmp	r0, #0
    98be:	f43f ae3b 	beq.w	9538 <loop+0x2c>
    98c2:	6833      	ldr	r3, [r6, #0]
    98c4:	9301      	str	r3, [sp, #4]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    98c6:	4a43      	ldr	r2, [pc, #268]	; (99d4 <loop+0x4c8>)
	return ret;
    98c8:	9b01      	ldr	r3, [sp, #4]
    98ca:	4c46      	ldr	r4, [pc, #280]	; (99e4 <loop+0x4d8>)
    98cc:	fba2 2303 	umull	r2, r3, r2, r3
    98d0:	099b      	lsrs	r3, r3, #6
    98d2:	222d      	movs	r2, #45	; 0x2d
    98d4:	4628      	mov	r0, r5
    98d6:	8023      	strh	r3, [r4, #0]
    98d8:	8062      	strh	r2, [r4, #2]
    98da:	f001 fd01 	bl	b2e0 <__cxa_guard_release>
    98de:	e62c      	b.n	953a <loop+0x2e>
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(25) {
    98e0:	4628      	mov	r0, r5
    98e2:	f001 fcf7 	bl	b2d4 <__cxa_guard_acquire>
    98e6:	2800      	cmp	r0, #0
    98e8:	d165      	bne.n	99b6 <loop+0x4aa>
    98ea:	4c3f      	ldr	r4, [pc, #252]	; (99e8 <loop+0x4dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    98ec:	6833      	ldr	r3, [r6, #0]
    98ee:	9306      	str	r3, [sp, #24]
    98f0:	e648      	b.n	9584 <loop+0x78>
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
    98f2:	4628      	mov	r0, r5
    98f4:	f001 fcee 	bl	b2d4 <__cxa_guard_acquire>
    98f8:	2800      	cmp	r0, #0
    98fa:	d14d      	bne.n	9998 <loop+0x48c>
    98fc:	4c3b      	ldr	r4, [pc, #236]	; (99ec <loop+0x4e0>)
    98fe:	6833      	ldr	r3, [r6, #0]
    9900:	9315      	str	r3, [sp, #84]	; 0x54
    9902:	e6df      	b.n	96c4 <loop+0x1b8>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    9904:	4628      	mov	r0, r5
    9906:	f001 fce5 	bl	b2d4 <__cxa_guard_acquire>
    990a:	b9f8      	cbnz	r0, 994c <loop+0x440>
    990c:	4c38      	ldr	r4, [pc, #224]	; (99f0 <loop+0x4e4>)
    990e:	6833      	ldr	r3, [r6, #0]
    9910:	9312      	str	r3, [sp, #72]	; 0x48
    9912:	e6b8      	b.n	9686 <loop+0x17a>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
		switch_transition(transition_type);
    9914:	4b37      	ldr	r3, [pc, #220]	; (99f4 <loop+0x4e8>)
    9916:	7818      	ldrb	r0, [r3, #0]
    9918:	f7f8 f932 	bl	1b80 <switch_transition(TransitionType)>
    991c:	e6ab      	b.n	9676 <loop+0x16a>
	if (DEBUG) { read_keyboard(); }

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,45){
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
    991e:	20ff      	movs	r0, #255	; 0xff
    9920:	f7ff fb4c 	bl	8fbc <change_mode(unsigned char)>
    9924:	e626      	b.n	9574 <loop+0x68>
	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    9926:	482d      	ldr	r0, [pc, #180]	; (99dc <loop+0x4d0>)
    9928:	f7f8 fc44 	bl	21b4 <LEDDebug(LEDStruct&)>
    992c:	e6e4      	b.n	96f8 <loop+0x1ec>
    992e:	4640      	mov	r0, r8
    9930:	f7f9 fa86 	bl	2e40 <change_palette(LEDStruct&) [clone .part.11]>
    9934:	e79d      	b.n	9872 <loop+0x366>
    9936:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    9938:	4c2f      	ldr	r4, [pc, #188]	; (99f8 <loop+0x4ec>)
    993a:	9307      	str	r3, [sp, #28]
	return ret;
    993c:	9b07      	ldr	r3, [sp, #28]
    993e:	6023      	str	r3, [r4, #0]
    9940:	2332      	movs	r3, #50	; 0x32
			change_palette(curr_leds); 
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    9942:	4628      	mov	r0, r5
    9944:	6063      	str	r3, [r4, #4]
    9946:	f001 fccb 	bl	b2e0 <__cxa_guard_release>
    994a:	e6f4      	b.n	9736 <loop+0x22a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    994c:	6833      	ldr	r3, [r6, #0]
    994e:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    9950:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    9952:	4a2a      	ldr	r2, [pc, #168]	; (99fc <loop+0x4f0>)
    9954:	4c26      	ldr	r4, [pc, #152]	; (99f0 <loop+0x4e4>)
    9956:	fba2 2303 	umull	r2, r3, r2, r3
    995a:	0b9b      	lsrs	r3, r3, #14
    995c:	2201      	movs	r2, #1
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    995e:	4628      	mov	r0, r5
    9960:	8023      	strh	r3, [r4, #0]
    9962:	8062      	strh	r2, [r4, #2]
    9964:	f001 fcbc 	bl	b2e0 <__cxa_guard_release>
    9968:	e7d1      	b.n	990e <loop+0x402>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    996a:	6833      	ldr	r3, [r6, #0]
    996c:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    996e:	4c24      	ldr	r4, [pc, #144]	; (9a00 <loop+0x4f4>)
	return ret;
    9970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;


	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9972:	f899 3000 	ldrb.w	r3, [r9]
    9976:	6022      	str	r2, [r4, #0]
    9978:	4640      	mov	r0, r8
    997a:	6063      	str	r3, [r4, #4]
    997c:	f001 fcb0 	bl	b2e0 <__cxa_guard_release>
    9980:	e6ff      	b.n	9782 <loop+0x276>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9982:	6833      	ldr	r3, [r6, #0]
    9984:	930d      	str	r3, [sp, #52]	; 0x34
    9986:	4c1f      	ldr	r4, [pc, #124]	; (9a04 <loop+0x4f8>)
	return ret;
    9988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    998a:	782b      	ldrb	r3, [r5, #0]
    998c:	6022      	str	r2, [r4, #0]
    998e:	4640      	mov	r0, r8
    9990:	6063      	str	r3, [r4, #4]
    9992:	f001 fca5 	bl	b2e0 <__cxa_guard_release>
    9996:	e715      	b.n	97c4 <loop+0x2b8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9998:	6833      	ldr	r3, [r6, #0]
    999a:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    999c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    999e:	4a0d      	ldr	r2, [pc, #52]	; (99d4 <loop+0x4c8>)
    99a0:	4c12      	ldr	r4, [pc, #72]	; (99ec <loop+0x4e0>)
    99a2:	fba2 2303 	umull	r2, r3, r2, r3
    99a6:	099b      	lsrs	r3, r3, #6
    99a8:	2205      	movs	r2, #5
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
    99aa:	4628      	mov	r0, r5
    99ac:	8023      	strh	r3, [r4, #0]
    99ae:	8062      	strh	r2, [r4, #2]
    99b0:	f001 fc96 	bl	b2e0 <__cxa_guard_release>
    99b4:	e7a3      	b.n	98fe <loop+0x3f2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    99b6:	6833      	ldr	r3, [r6, #0]
    99b8:	9304      	str	r3, [sp, #16]
	return ret;
    99ba:	9b04      	ldr	r3, [sp, #16]
    99bc:	4a05      	ldr	r2, [pc, #20]	; (99d4 <loop+0x4c8>)
    99be:	4c0a      	ldr	r4, [pc, #40]	; (99e8 <loop+0x4dc>)
    99c0:	fba2 2303 	umull	r2, r3, r2, r3
    99c4:	099b      	lsrs	r3, r3, #6
    99c6:	2219      	movs	r2, #25
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(25) {
    99c8:	4628      	mov	r0, r5
    99ca:	8023      	strh	r3, [r4, #0]
    99cc:	8062      	strh	r2, [r4, #2]
    99ce:	f001 fc87 	bl	b2e0 <__cxa_guard_release>
    99d2:	e78b      	b.n	98ec <loop+0x3e0>
    99d4:	10624dd3 	.word	0x10624dd3
    99d8:	1fff8758 	.word	0x1fff8758
    99dc:	1fff8884 	.word	0x1fff8884
    99e0:	1ffface8 	.word	0x1ffface8
    99e4:	1fffac6c 	.word	0x1fffac6c
    99e8:	1fff90e8 	.word	0x1fff90e8
    99ec:	1fff90f8 	.word	0x1fff90f8
    99f0:	1fffa268 	.word	0x1fffa268
    99f4:	1fff90dc 	.word	0x1fff90dc
    99f8:	1fff90ec 	.word	0x1fff90ec
    99fc:	45e7b273 	.word	0x45e7b273
    9a00:	1fff90c8 	.word	0x1fff90c8
    9a04:	1fff90c0 	.word	0x1fff90c0
    9a08:	1fffa26c 	.word	0x1fffa26c

00009a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    9a0c:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    9a0e:	0604      	lsls	r4, r0, #24
    9a10:	f100 8119 	bmi.w	9c46 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a14:	4b48      	ldr	r3, [pc, #288]	; (9b38 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9a16:	4949      	ldr	r1, [pc, #292]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a18:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9a1a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a1c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9a1e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9a20:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9a22:	bf00      	nop
    9a24:	bf00      	nop
    9a26:	bf00      	nop
    9a28:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a2a:	601a      	str	r2, [r3, #0]
    9a2c:	bf00      	nop
    9a2e:	bf00      	nop
    9a30:	bf00      	nop
    9a32:	bf00      	nop
    9a34:	0641      	lsls	r1, r0, #25
    9a36:	f140 8083 	bpl.w	9b40 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9a3a:	4a40      	ldr	r2, [pc, #256]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    9a3c:	2102      	movs	r1, #2
    9a3e:	2304      	movs	r3, #4
    9a40:	6011      	str	r1, [r2, #0]
    9a42:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9a44:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9a46:	bf00      	nop
    9a48:	bf00      	nop
    9a4a:	bf00      	nop
    9a4c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a4e:	6053      	str	r3, [r2, #4]
    9a50:	bf00      	nop
    9a52:	bf00      	nop
    9a54:	bf00      	nop
    9a56:	bf00      	nop
    9a58:	0682      	lsls	r2, r0, #26
    9a5a:	f140 8084 	bpl.w	9b66 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9a5e:	4a37      	ldr	r2, [pc, #220]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    9a60:	2102      	movs	r1, #2
    9a62:	2304      	movs	r3, #4
    9a64:	6011      	str	r1, [r2, #0]
    9a66:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9a68:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9a6a:	bf00      	nop
    9a6c:	bf00      	nop
    9a6e:	bf00      	nop
    9a70:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a72:	6053      	str	r3, [r2, #4]
    9a74:	bf00      	nop
    9a76:	bf00      	nop
    9a78:	bf00      	nop
    9a7a:	bf00      	nop
    9a7c:	06c3      	lsls	r3, r0, #27
    9a7e:	f140 8085 	bpl.w	9b8c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9a82:	4a2e      	ldr	r2, [pc, #184]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    9a84:	2102      	movs	r1, #2
    9a86:	2304      	movs	r3, #4
    9a88:	6011      	str	r1, [r2, #0]
    9a8a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9a8c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9a8e:	bf00      	nop
    9a90:	bf00      	nop
    9a92:	bf00      	nop
    9a94:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9a96:	6053      	str	r3, [r2, #4]
    9a98:	bf00      	nop
    9a9a:	bf00      	nop
    9a9c:	bf00      	nop
    9a9e:	bf00      	nop
    9aa0:	0704      	lsls	r4, r0, #28
    9aa2:	f140 8086 	bpl.w	9bb2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9aa6:	4a25      	ldr	r2, [pc, #148]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    9aa8:	2102      	movs	r1, #2
    9aaa:	2304      	movs	r3, #4
    9aac:	6011      	str	r1, [r2, #0]
    9aae:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9ab0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9ab2:	bf00      	nop
    9ab4:	bf00      	nop
    9ab6:	bf00      	nop
    9ab8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9aba:	6053      	str	r3, [r2, #4]
    9abc:	bf00      	nop
    9abe:	bf00      	nop
    9ac0:	bf00      	nop
    9ac2:	bf00      	nop
    9ac4:	0741      	lsls	r1, r0, #29
    9ac6:	f140 8087 	bpl.w	9bd8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9aca:	4a1c      	ldr	r2, [pc, #112]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    9acc:	2102      	movs	r1, #2
    9ace:	2304      	movs	r3, #4
    9ad0:	6011      	str	r1, [r2, #0]
    9ad2:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9ad4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9ad6:	bf00      	nop
    9ad8:	bf00      	nop
    9ada:	bf00      	nop
    9adc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9ade:	6053      	str	r3, [r2, #4]
    9ae0:	bf00      	nop
    9ae2:	bf00      	nop
    9ae4:	bf00      	nop
    9ae6:	bf00      	nop
    9ae8:	0782      	lsls	r2, r0, #30
    9aea:	f140 8088 	bpl.w	9bfe <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9aee:	4a13      	ldr	r2, [pc, #76]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    9af0:	2102      	movs	r1, #2
    9af2:	2304      	movs	r3, #4
    9af4:	6011      	str	r1, [r2, #0]
    9af6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9af8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9afa:	bf00      	nop
    9afc:	bf00      	nop
    9afe:	bf00      	nop
    9b00:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b02:	6053      	str	r3, [r2, #4]
    9b04:	bf00      	nop
    9b06:	bf00      	nop
    9b08:	bf00      	nop
    9b0a:	bf00      	nop
    9b0c:	07c3      	lsls	r3, r0, #31
    9b0e:	f100 8089 	bmi.w	9c24 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    9b12:	4b09      	ldr	r3, [pc, #36]	; (9b38 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b14:	4909      	ldr	r1, [pc, #36]	; (9b3c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b16:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b18:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b1a:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b1c:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9b1e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9b20:	bf00      	nop
    9b22:	bf00      	nop
    9b24:	bf00      	nop
    9b26:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b28:	601a      	str	r2, [r3, #0]
    9b2a:	bf00      	nop
    9b2c:	bf00      	nop
    9b2e:	bf00      	nop
    9b30:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    9b32:	bc10      	pop	{r4}
    9b34:	4770      	bx	lr
    9b36:	bf00      	nop
    9b38:	400ff0c8 	.word	0x400ff0c8
    9b3c:	400ff0c4 	.word	0x400ff0c4
    9b40:	4b49      	ldr	r3, [pc, #292]	; (9c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b42:	494a      	ldr	r1, [pc, #296]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b44:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b46:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b48:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b4a:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9b4c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9b4e:	bf00      	nop
    9b50:	bf00      	nop
    9b52:	bf00      	nop
    9b54:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b56:	601a      	str	r2, [r3, #0]
    9b58:	bf00      	nop
    9b5a:	bf00      	nop
    9b5c:	bf00      	nop
    9b5e:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    9b60:	0682      	lsls	r2, r0, #26
    9b62:	f53f af7c 	bmi.w	9a5e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    9b66:	4b40      	ldr	r3, [pc, #256]	; (9c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b68:	4940      	ldr	r1, [pc, #256]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b6a:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b6c:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b6e:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b70:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9b72:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9b74:	bf00      	nop
    9b76:	bf00      	nop
    9b78:	bf00      	nop
    9b7a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b7c:	601a      	str	r2, [r3, #0]
    9b7e:	bf00      	nop
    9b80:	bf00      	nop
    9b82:	bf00      	nop
    9b84:	bf00      	nop
    9b86:	06c3      	lsls	r3, r0, #27
    9b88:	f53f af7b 	bmi.w	9a82 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    9b8c:	4b36      	ldr	r3, [pc, #216]	; (9c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b8e:	4937      	ldr	r1, [pc, #220]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b90:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b92:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9b94:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9b96:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9b98:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9b9a:	bf00      	nop
    9b9c:	bf00      	nop
    9b9e:	bf00      	nop
    9ba0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9ba2:	601a      	str	r2, [r3, #0]
    9ba4:	bf00      	nop
    9ba6:	bf00      	nop
    9ba8:	bf00      	nop
    9baa:	bf00      	nop
    9bac:	0704      	lsls	r4, r0, #28
    9bae:	f53f af7a 	bmi.w	9aa6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    9bb2:	4b2d      	ldr	r3, [pc, #180]	; (9c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9bb4:	492d      	ldr	r1, [pc, #180]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9bb6:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9bb8:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9bba:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9bbc:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9bbe:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9bc0:	bf00      	nop
    9bc2:	bf00      	nop
    9bc4:	bf00      	nop
    9bc6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9bc8:	601a      	str	r2, [r3, #0]
    9bca:	bf00      	nop
    9bcc:	bf00      	nop
    9bce:	bf00      	nop
    9bd0:	bf00      	nop
    9bd2:	0741      	lsls	r1, r0, #29
    9bd4:	f53f af79 	bmi.w	9aca <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    9bd8:	4b23      	ldr	r3, [pc, #140]	; (9c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9bda:	4924      	ldr	r1, [pc, #144]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9bdc:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9bde:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9be0:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9be2:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9be4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9be6:	bf00      	nop
    9be8:	bf00      	nop
    9bea:	bf00      	nop
    9bec:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9bee:	601a      	str	r2, [r3, #0]
    9bf0:	bf00      	nop
    9bf2:	bf00      	nop
    9bf4:	bf00      	nop
    9bf6:	bf00      	nop
    9bf8:	0782      	lsls	r2, r0, #30
    9bfa:	f53f af78 	bmi.w	9aee <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    9bfe:	4b1a      	ldr	r3, [pc, #104]	; (9c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9c00:	491a      	ldr	r1, [pc, #104]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9c02:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9c04:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9c06:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9c08:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9c0a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9c0c:	bf00      	nop
    9c0e:	bf00      	nop
    9c10:	bf00      	nop
    9c12:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9c14:	601a      	str	r2, [r3, #0]
    9c16:	bf00      	nop
    9c18:	bf00      	nop
    9c1a:	bf00      	nop
    9c1c:	bf00      	nop
    9c1e:	07c3      	lsls	r3, r0, #31
    9c20:	f57f af77 	bpl.w	9b12 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9c24:	4a11      	ldr	r2, [pc, #68]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    9c26:	2102      	movs	r1, #2
    9c28:	2304      	movs	r3, #4
    9c2a:	6011      	str	r1, [r2, #0]
    9c2c:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9c2e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9c30:	bf00      	nop
    9c32:	bf00      	nop
    9c34:	bf00      	nop
    9c36:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9c38:	6053      	str	r3, [r2, #4]
    9c3a:	bf00      	nop
    9c3c:	bf00      	nop
    9c3e:	bf00      	nop
    9c40:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    9c42:	bc10      	pop	{r4}
    9c44:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    9c46:	4a09      	ldr	r2, [pc, #36]	; (9c6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    9c48:	2102      	movs	r1, #2
    9c4a:	2304      	movs	r3, #4
    9c4c:	6011      	str	r1, [r2, #0]
    9c4e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    9c50:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    9c52:	bf00      	nop
    9c54:	bf00      	nop
    9c56:	bf00      	nop
    9c58:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    9c5a:	6053      	str	r3, [r2, #4]
    9c5c:	bf00      	nop
    9c5e:	bf00      	nop
    9c60:	bf00      	nop
    9c62:	bf00      	nop
    9c64:	e6e6      	b.n	9a34 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    9c66:	bf00      	nop
    9c68:	400ff0c8 	.word	0x400ff0c8
    9c6c:	400ff0c4 	.word	0x400ff0c4

00009c70 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    9c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c74:	4682      	mov	sl, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    9c76:	6980      	ldr	r0, [r0, #24]
    9c78:	b081      	sub	sp, #4
    9c7a:	460c      	mov	r4, r1
    9c7c:	b150      	cbz	r0, 9c94 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    9c7e:	6803      	ldr	r3, [r0, #0]
    9c80:	4a46      	ldr	r2, [pc, #280]	; (9d9c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>)
    9c82:	681b      	ldr	r3, [r3, #0]
    9c84:	4293      	cmp	r3, r2
    9c86:	f040 8087 	bne.w	9d98 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    9c8a:	6842      	ldr	r2, [r0, #4]
    9c8c:	7b01      	ldrb	r1, [r0, #12]
    9c8e:	7813      	ldrb	r3, [r2, #0]
    9c90:	430b      	orrs	r3, r1
    9c92:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    9c94:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    9c96:	7d27      	ldrb	r7, [r4, #20]
    9c98:	f894 8013 	ldrb.w	r8, [r4, #19]
    9c9c:	f894 9012 	ldrb.w	r9, [r4, #18]
    9ca0:	f7ff feb4 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9ca4:	2000      	movs	r0, #0
    9ca6:	f7ff feb1 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9caa:	2000      	movs	r0, #0
    9cac:	f7ff feae 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9cb0:	2000      	movs	r0, #0
    9cb2:	f7ff feab 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    9cb6:	68a3      	ldr	r3, [r4, #8]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	dd44      	ble.n	9d46 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    9cbc:	6822      	ldr	r2, [r4, #0]
    9cbe:	f109 0901 	add.w	r9, r9, #1
    9cc2:	f108 0801 	add.w	r8, r8, #1
    9cc6:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    9cc8:	69a1      	ldr	r1, [r4, #24]
    9cca:	1853      	adds	r3, r2, r1
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    9ccc:	5c56      	ldrb	r6, [r2, r1]
    9cce:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    9cd0:	f893 b002 	ldrb.w	fp, [r3, #2]
    9cd4:	fb08 f505 	mul.w	r5, r8, r5
    9cd8:	122d      	asrs	r5, r5, #8
    9cda:	fb07 fb0b 	mul.w	fp, r7, fp
    9cde:	fb09 f606 	mul.w	r6, r9, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    9ce2:	022d      	lsls	r5, r5, #8
    9ce4:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    9ce6:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    9cea:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    9cec:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    9cf0:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    9cf2:	4335      	orrs	r5, r6
    9cf4:	f7ff fe8a 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9cf8:	b2ad      	uxth	r5, r5
    9cfa:	fa5f f08b 	uxtb.w	r0, fp
    9cfe:	f7ff fe85 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9d02:	0a28      	lsrs	r0, r5, #8
    9d04:	f7ff fe82 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9d08:	b2e8      	uxtb	r0, r5
    9d0a:	f7ff fe7f 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    9d0e:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    9d10:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    9d12:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    9d14:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    9d18:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    9d1a:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    9d1e:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    9d22:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    9d24:	f994 2015 	ldrsb.w	r2, [r4, #21]
    9d28:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    9d2a:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    9d2e:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    9d32:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    9d36:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    9d38:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    9d3a:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    9d3c:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    9d3e:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    9d40:	6022      	str	r2, [r4, #0]
    9d42:	60a3      	str	r3, [r4, #8]
    9d44:	dcc0      	bgt.n	9cc8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    9d46:	6864      	ldr	r4, [r4, #4]
    9d48:	2c00      	cmp	r4, #0
    9d4a:	bfb8      	it	lt
    9d4c:	341f      	addlt	r4, #31
    9d4e:	1164      	asrs	r4, r4, #5
    9d50:	20ff      	movs	r0, #255	; 0xff
    9d52:	f7ff fe5b 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9d56:	2000      	movs	r0, #0
    9d58:	f7ff fe58 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9d5c:	2000      	movs	r0, #0
    9d5e:	f7ff fe55 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9d62:	3c01      	subs	r4, #1
    9d64:	2000      	movs	r0, #0
    9d66:	f7ff fe51 	bl	9a0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    9d6a:	1c63      	adds	r3, r4, #1
    9d6c:	d1f0      	bne.n	9d50 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe0>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    9d6e:	f8da 0018 	ldr.w	r0, [sl, #24]
    9d72:	b150      	cbz	r0, 9d8a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
    9d74:	6803      	ldr	r3, [r0, #0]
    9d76:	4a0a      	ldr	r2, [pc, #40]	; (9da0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130>)
    9d78:	685b      	ldr	r3, [r3, #4]
    9d7a:	4293      	cmp	r3, r2
    9d7c:	d108      	bne.n	9d90 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    9d7e:	6842      	ldr	r2, [r0, #4]
    9d80:	7b01      	ldrb	r1, [r0, #12]
    9d82:	7813      	ldrb	r3, [r2, #0]
    9d84:	ea23 0301 	bic.w	r3, r3, r1
    9d88:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    9d8a:	b001      	add	sp, #4
    9d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d90:	b001      	add	sp, #4
    9d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d96:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    9d98:	4798      	blx	r3
    9d9a:	e77b      	b.n	9c94 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    9d9c:	00000475 	.word	0x00000475
    9da0:	00000481 	.word	0x00000481

00009da4 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    9da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    9da8:	49dd      	ldr	r1, [pc, #884]	; (a120 <_GLOBAL__sub_I_ib_jul01_gp+0x37c>)
    9daa:	4ede      	ldr	r6, [pc, #888]	; (a124 <_GLOBAL__sub_I_ib_jul01_gp+0x380>)
    9dac:	4ade      	ldr	r2, [pc, #888]	; (a128 <_GLOBAL__sub_I_ib_jul01_gp+0x384>)
    9dae:	4bdf      	ldr	r3, [pc, #892]	; (a12c <_GLOBAL__sub_I_ib_jul01_gp+0x388>)
#ifndef PACIFIC_WAVES_H
#define PACIFIC_WAVES_H


CRGBPalette16 pacifica_palette_1 =
    9db0:	48df      	ldr	r0, [pc, #892]	; (a130 <_GLOBAL__sub_I_ib_jul01_gp+0x38c>)
    9db2:	b09f      	sub	sp, #124	; 0x7c
    9db4:	2400      	movs	r4, #0
    9db6:	2501      	movs	r5, #1
    9db8:	f04f 0bff 	mov.w	fp, #255	; 0xff
    9dbc:	270f      	movs	r7, #15
    9dbe:	f881 b1c2 	strb.w	fp, [r1, #450]	; 0x1c2
    9dc2:	f881 71c3 	strb.w	r7, [r1, #451]	; 0x1c3
    9dc6:	f881 51c4 	strb.w	r5, [r1, #452]	; 0x1c4
    9dca:	f881 51c5 	strb.w	r5, [r1, #453]	; 0x1c5
    9dce:	f881 41c7 	strb.w	r4, [r1, #455]	; 0x1c7
    9dd2:	f881 5228 	strb.w	r5, [r1, #552]	; 0x228
    9dd6:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    9dda:	f881 422e 	strb.w	r4, [r1, #558]	; 0x22e
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    9dde:	f04f 0105 	mov.w	r1, #5
    9de2:	f886 b1c2 	strb.w	fp, [r6, #450]	; 0x1c2
    9de6:	f886 71c3 	strb.w	r7, [r6, #451]	; 0x1c3
    9dea:	f886 51c4 	strb.w	r5, [r6, #452]	; 0x1c4
    9dee:	f886 51c5 	strb.w	r5, [r6, #453]	; 0x1c5
    9df2:	f886 5228 	strb.w	r5, [r6, #552]	; 0x228
    9df6:	f886 522a 	strb.w	r5, [r6, #554]	; 0x22a
    9dfa:	f886 41c7 	strb.w	r4, [r6, #455]	; 0x1c7
    9dfe:	f886 422e 	strb.w	r4, [r6, #558]	; 0x22e
    9e02:	f882 b1c2 	strb.w	fp, [r2, #450]	; 0x1c2
    9e06:	f882 71c3 	strb.w	r7, [r2, #451]	; 0x1c3
    9e0a:	f882 51c4 	strb.w	r5, [r2, #452]	; 0x1c4
    9e0e:	f882 51c5 	strb.w	r5, [r2, #453]	; 0x1c5
    9e12:	f882 41c7 	strb.w	r4, [r2, #455]	; 0x1c7
    9e16:	f882 5228 	strb.w	r5, [r2, #552]	; 0x228
    9e1a:	f882 522a 	strb.w	r5, [r2, #554]	; 0x22a
    9e1e:	f882 422e 	strb.w	r4, [r2, #558]	; 0x22e
    9e22:	f883 71c3 	strb.w	r7, [r3, #451]	; 0x1c3
    9e26:	f883 b1c2 	strb.w	fp, [r3, #450]	; 0x1c2
    9e2a:	f883 51c4 	strb.w	r5, [r3, #452]	; 0x1c4
    9e2e:	f883 51c5 	strb.w	r5, [r3, #453]	; 0x1c5
    9e32:	f883 41c7 	strb.w	r4, [r3, #455]	; 0x1c7
    9e36:	f883 5228 	strb.w	r5, [r3, #552]	; 0x228
    9e3a:	f883 522a 	strb.w	r5, [r3, #554]	; 0x22a
    9e3e:	f883 422e 	strb.w	r4, [r3, #558]	; 0x22e
    9e42:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    9e46:	f04f 0107 	mov.w	r1, #7
    9e4a:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
    9e4e:	f04f 0104 	mov.w	r1, #4
    9e52:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    9e56:	f04f 0109 	mov.w	r1, #9
    9e5a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    9e5e:	f04f 010b 	mov.w	r1, #11
    9e62:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    9e66:	f04f 010d 	mov.w	r1, #13
    9e6a:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
    9e6e:	f04f 0110 	mov.w	r1, #16
    9e72:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
    9e76:	f04f 0112 	mov.w	r1, #18
    9e7a:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
    9e7e:	f04f 0117 	mov.w	r1, #23
    9e82:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    9e86:	f04f 0119 	mov.w	r1, #25
    9e8a:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
    9e8e:	f04f 011c 	mov.w	r1, #28
    9e92:	f04f 0914 	mov.w	r9, #20
    9e96:	f04f 0803 	mov.w	r8, #3
    9e9a:	f04f 0a02 	mov.w	sl, #2
    9e9e:	f88d 105e 	strb.w	r1, [sp, #94]	; 0x5e
    9ea2:	ae15      	add	r6, sp, #84	; 0x54
    9ea4:	f04f 0126 	mov.w	r1, #38	; 0x26
    9ea8:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    9eac:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    9eb0:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    9eb4:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    9eb8:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    9ebc:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    9ec0:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    9ec4:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    9ec8:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    9ecc:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    9ed0:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    9ed4:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    9ed8:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    9edc:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    9ee0:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    9ee4:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    9ee8:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    9eec:	f88d 8041 	strb.w	r8, [sp, #65]	; 0x41
    9ef0:	f88d 8045 	strb.w	r8, [sp, #69]	; 0x45
    9ef4:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
    9ef8:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
    9efc:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    9f00:	9604      	str	r6, [sp, #16]
    9f02:	ae14      	add	r6, sp, #80	; 0x50
    9f04:	9603      	str	r6, [sp, #12]
    9f06:	ae13      	add	r6, sp, #76	; 0x4c
    9f08:	9602      	str	r6, [sp, #8]
    9f0a:	ae12      	add	r6, sp, #72	; 0x48
    9f0c:	9601      	str	r6, [sp, #4]
    9f0e:	ae11      	add	r6, sp, #68	; 0x44
    9f10:	9600      	str	r6, [sp, #0]
    9f12:	f04f 0631 	mov.w	r6, #49	; 0x31
    9f16:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    9f1a:	f04f 0646 	mov.w	r6, #70	; 0x46
    9f1e:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    9f22:	f04f 0655 	mov.w	r6, #85	; 0x55
    9f26:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    9f2a:	f04f 064b 	mov.w	r6, #75	; 0x4b
    9f2e:	f88d 6072 	strb.w	r6, [sp, #114]	; 0x72
    9f32:	f04f 0650 	mov.w	r6, #80	; 0x50
    9f36:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
    9f3a:	ae1d      	add	r6, sp, #116	; 0x74
    9f3c:	960c      	str	r6, [sp, #48]	; 0x30
    9f3e:	ae1c      	add	r6, sp, #112	; 0x70
    9f40:	960b      	str	r6, [sp, #44]	; 0x2c
    9f42:	ae1b      	add	r6, sp, #108	; 0x6c
    9f44:	960a      	str	r6, [sp, #40]	; 0x28
    9f46:	ae1a      	add	r6, sp, #104	; 0x68
    9f48:	9609      	str	r6, [sp, #36]	; 0x24
    9f4a:	ae19      	add	r6, sp, #100	; 0x64
    9f4c:	9608      	str	r6, [sp, #32]
    9f4e:	ae18      	add	r6, sp, #96	; 0x60
    9f50:	9607      	str	r6, [sp, #28]
    9f52:	ae17      	add	r6, sp, #92	; 0x5c
    9f54:	ab10      	add	r3, sp, #64	; 0x40
    9f56:	aa0f      	add	r2, sp, #60	; 0x3c
    9f58:	a90e      	add	r1, sp, #56	; 0x38
    9f5a:	273b      	movs	r7, #59	; 0x3b
    9f5c:	f04f 0c28 	mov.w	ip, #40	; 0x28
    9f60:	f04f 0eaa 	mov.w	lr, #170	; 0xaa
    9f64:	9606      	str	r6, [sp, #24]
    9f66:	ae16      	add	r6, sp, #88	; 0x58
    9f68:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    9f6c:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    9f70:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    9f74:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    9f78:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    9f7c:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    9f80:	f88d 9070 	strb.w	r9, [sp, #112]	; 0x70
    9f84:	f88d 706a 	strb.w	r7, [sp, #106]	; 0x6a
    9f88:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
    9f8c:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    9f90:	9605      	str	r6, [sp, #20]
    9f92:	f7f6 fd2b 	bl	9ec <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    9f96:	f04f 0307 	mov.w	r3, #7
    9f9a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    9f9e:	f04f 0305 	mov.w	r3, #5
    9fa2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    9fa6:	f04f 0304 	mov.w	r3, #4
    9faa:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    9fae:	f04f 0309 	mov.w	r3, #9
    9fb2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    9fb6:	f04f 030b 	mov.w	r3, #11
    9fba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    9fbe:	f04f 030d 	mov.w	r3, #13
    9fc2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    9fc6:	f04f 0310 	mov.w	r3, #16
    9fca:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    9fce:	f04f 0312 	mov.w	r3, #18
    9fd2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    9fd6:	f04f 0317 	mov.w	r3, #23
    9fda:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    9fde:	f04f 0319 	mov.w	r3, #25
    9fe2:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
    9fe6:	f04f 0226 	mov.w	r2, #38	; 0x26
    9fea:	f04f 031c 	mov.w	r3, #28
    9fee:	f04f 0631 	mov.w	r6, #49	; 0x31
    9ff2:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    9ff6:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    9ffa:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    9ffe:	f88d 8041 	strb.w	r8, [sp, #65]	; 0x41
    a002:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    a006:	f88d 8045 	strb.w	r8, [sp, #69]	; 0x45
    a00a:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    a00e:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
    a012:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    a016:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
    a01a:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    a01e:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    a022:	f88d 9052 	strb.w	r9, [sp, #82]	; 0x52
    a026:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    a02a:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    a02e:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    a032:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    a036:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    a03a:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    a03e:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    a042:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    a046:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    a04a:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
    a04e:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    a052:	f04f 0646 	mov.w	r6, #70	; 0x46
    a056:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    a05a:	f04f 0619 	mov.w	r6, #25
    a05e:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x14554B, 0x28AA50 };
CRGBPalette16 pacifica_palette_2 =
    a062:	ae1d      	add	r6, sp, #116	; 0x74
    a064:	960c      	str	r6, [sp, #48]	; 0x30
    a066:	ae1c      	add	r6, sp, #112	; 0x70
    a068:	960b      	str	r6, [sp, #44]	; 0x2c
    a06a:	ae1b      	add	r6, sp, #108	; 0x6c
    a06c:	960a      	str	r6, [sp, #40]	; 0x28
    a06e:	ae1a      	add	r6, sp, #104	; 0x68
    a070:	9609      	str	r6, [sp, #36]	; 0x24
    a072:	ae19      	add	r6, sp, #100	; 0x64
    a074:	a914      	add	r1, sp, #80	; 0x50
    a076:	9608      	str	r6, [sp, #32]
    a078:	ae18      	add	r6, sp, #96	; 0x60
    a07a:	9103      	str	r1, [sp, #12]
    a07c:	9607      	str	r6, [sp, #28]
    a07e:	a913      	add	r1, sp, #76	; 0x4c
    a080:	ae17      	add	r6, sp, #92	; 0x5c
    a082:	9102      	str	r1, [sp, #8]
    a084:	9606      	str	r6, [sp, #24]
    a086:	a912      	add	r1, sp, #72	; 0x48
    a088:	ae16      	add	r6, sp, #88	; 0x58
    a08a:	9101      	str	r1, [sp, #4]
    a08c:	9605      	str	r6, [sp, #20]
    a08e:	a911      	add	r1, sp, #68	; 0x44
    a090:	ae15      	add	r6, sp, #84	; 0x54
    a092:	ab10      	add	r3, sp, #64	; 0x40
    a094:	aa0f      	add	r2, sp, #60	; 0x3c
    a096:	9100      	str	r1, [sp, #0]
    a098:	255f      	movs	r5, #95	; 0x5f
    a09a:	a90e      	add	r1, sp, #56	; 0x38
    a09c:	f04f 0c52 	mov.w	ip, #82	; 0x52
    a0a0:	f04f 0ebe 	mov.w	lr, #190	; 0xbe
    a0a4:	9604      	str	r6, [sp, #16]
    a0a6:	4823      	ldr	r0, [pc, #140]	; (a134 <_GLOBAL__sub_I_ib_jul01_gp+0x390>)
    a0a8:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    a0ac:	f04f 060c 	mov.w	r6, #12
    a0b0:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    a0b4:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    a0b8:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    a0bc:	f88d 706a 	strb.w	r7, [sp, #106]	; 0x6a
    a0c0:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    a0c4:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    a0c8:	f88d 6070 	strb.w	r6, [sp, #112]	; 0x70
    a0cc:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    a0d0:	f88d 5076 	strb.w	r5, [sp, #118]	; 0x76
    a0d4:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    a0d8:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    a0dc:	f7f6 fc86 	bl	9ec <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    a0e0:	200e      	movs	r0, #14
    a0e2:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    a0e6:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    a0ea:	f04f 0305 	mov.w	r3, #5
    a0ee:	f04f 0006 	mov.w	r0, #6
    a0f2:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    a0f6:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    a0fa:	f04f 0309 	mov.w	r3, #9
    a0fe:	f04f 001a 	mov.w	r0, #26
    a102:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    a106:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    a10a:	f04f 030b 	mov.w	r3, #11
    a10e:	f04f 0027 	mov.w	r0, #39	; 0x27
    a112:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    a116:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    a11a:	f04f 030c 	mov.w	r3, #12
    a11e:	e00b      	b.n	a138 <_GLOBAL__sub_I_ib_jul01_gp+0x394>
    a120:	1fff8884 	.word	0x1fff8884
    a124:	1fffa26c 	.word	0x1fffa26c
    a128:	1fff91d8 	.word	0x1fff91d8
    a12c:	1fff9a2c 	.word	0x1fff9a2c
    a130:	1fff9134 	.word	0x1fff9134
    a134:	1fff9164 	.word	0x1fff9164
    a138:	f04f 002d 	mov.w	r0, #45	; 0x2d
    a13c:	2520      	movs	r5, #32
    a13e:	2640      	movs	r6, #64	; 0x40
    a140:	2708      	movs	r7, #8
    a142:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    a146:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    a14a:	f04f 0c33 	mov.w	ip, #51	; 0x33
    a14e:	f04f 0e39 	mov.w	lr, #57	; 0x39
    a152:	f04f 0310 	mov.w	r3, #16
    a156:	f04f 0050 	mov.w	r0, #80	; 0x50
    a15a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    a15e:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
    a162:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    a166:	f88d 803d 	strb.w	r8, [sp, #61]	; 0x3d
    a16a:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    a16e:	f88d 9042 	strb.w	r9, [sp, #66]	; 0x42
    a172:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    a176:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    a17a:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    a17e:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    a182:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    a186:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    a18a:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    a18e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    a192:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    a196:	f88d 9061 	strb.w	r9, [sp, #97]	; 0x61
    a19a:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    a19e:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
    a1a2:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
    a1a6:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    a1aa:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
    a1ae:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
    a1b2:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a1b6:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    a1ba:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    a1be:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    a1c2:	f04f 0410 	mov.w	r4, #16
    a1c6:	f04f 0870 	mov.w	r8, #112	; 0x70
    a1ca:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x0C5F52, 0x19BE5F };
CRGBPalette16 pacifica_palette_3 =
    a1ce:	ac1d      	add	r4, sp, #116	; 0x74
    a1d0:	940c      	str	r4, [sp, #48]	; 0x30
    a1d2:	eb0d 0408 	add.w	r4, sp, r8
    a1d6:	940b      	str	r4, [sp, #44]	; 0x2c
    a1d8:	ac1b      	add	r4, sp, #108	; 0x6c
    a1da:	940a      	str	r4, [sp, #40]	; 0x28
    a1dc:	ac1a      	add	r4, sp, #104	; 0x68
    a1de:	2760      	movs	r7, #96	; 0x60
    a1e0:	a814      	add	r0, sp, #80	; 0x50
    a1e2:	9409      	str	r4, [sp, #36]	; 0x24
    a1e4:	ac19      	add	r4, sp, #100	; 0x64
    a1e6:	9003      	str	r0, [sp, #12]
    a1e8:	9408      	str	r4, [sp, #32]
    a1ea:	a813      	add	r0, sp, #76	; 0x4c
    a1ec:	eb0d 0407 	add.w	r4, sp, r7
    a1f0:	9002      	str	r0, [sp, #8]
    a1f2:	9407      	str	r4, [sp, #28]
    a1f4:	a812      	add	r0, sp, #72	; 0x48
    a1f6:	ac16      	add	r4, sp, #88	; 0x58
    a1f8:	9001      	str	r0, [sp, #4]
    a1fa:	9405      	str	r4, [sp, #20]
    a1fc:	a811      	add	r0, sp, #68	; 0x44
    a1fe:	ac17      	add	r4, sp, #92	; 0x5c
    a200:	9000      	str	r0, [sp, #0]
    a202:	f04f 0c80 	mov.w	ip, #128	; 0x80
    a206:	f04f 0ebf 	mov.w	lr, #191	; 0xbf
    a20a:	9406      	str	r4, [sp, #24]
    a20c:	eb0d 0306 	add.w	r3, sp, r6
    a210:	aa0f      	add	r2, sp, #60	; 0x3c
    a212:	a90e      	add	r1, sp, #56	; 0x38
    a214:	f04f 0918 	mov.w	r9, #24
    a218:	f04f 0a1c 	mov.w	sl, #28
    a21c:	ac15      	add	r4, sp, #84	; 0x54
    a21e:	480e      	ldr	r0, [pc, #56]	; (a258 <_GLOBAL__sub_I_ib_jul01_gp+0x4b4>)
    a220:	f88d b076 	strb.w	fp, [sp, #118]	; 0x76
    a224:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
    a228:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    a22c:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    a230:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    a234:	9404      	str	r4, [sp, #16]
    a236:	f88d 9065 	strb.w	r9, [sp, #101]	; 0x65
    a23a:	f88d 7066 	strb.w	r7, [sp, #102]	; 0x66
    a23e:	f88d 7075 	strb.w	r7, [sp, #117]	; 0x75
    a242:	f88d 806a 	strb.w	r8, [sp, #106]	; 0x6a
    a246:	f88d c06e 	strb.w	ip, [sp, #110]	; 0x6e
    a24a:	f88d e072 	strb.w	lr, [sp, #114]	; 0x72
    a24e:	f7f6 fbcd 	bl	9ec <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    a252:	b01f      	add	sp, #124	; 0x7c
    a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a258:	1fff9194 	.word	0x1fff9194

0000a25c <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    a25c:	2900      	cmp	r1, #0
    a25e:	dd0b      	ble.n	a278 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    a260:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a264:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a266:	7813      	ldrb	r3, [r2, #0]
    a268:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    a26a:	7853      	ldrb	r3, [r2, #1]
    a26c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    a26e:	7893      	ldrb	r3, [r2, #2]
    a270:	7083      	strb	r3, [r0, #2]
    a272:	3003      	adds	r0, #3
    a274:	4288      	cmp	r0, r1
    a276:	d1f6      	bne.n	a266 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    a278:	4770      	bx	lr
    a27a:	bf00      	nop

0000a27c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    a27c:	b570      	push	{r4, r5, r6, lr}
    a27e:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    a280:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    a282:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    a284:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    a286:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    a28a:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    a28e:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    a292:	dd10      	ble.n	a2b6 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    a294:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a298:	461e      	mov	r6, r3
    a29a:	4604      	mov	r4, r0
    a29c:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    a29e:	4621      	mov	r1, r4
    a2a0:	a801      	add	r0, sp, #4
    a2a2:	f000 fafb 	bl	a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    a2a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    a2aa:	3403      	adds	r4, #3
    a2ac:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    a2ae:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    a2b0:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    a2b4:	d1f3      	bne.n	a29e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    a2b6:	b002      	add	sp, #8
    a2b8:	bd70      	pop	{r4, r5, r6, pc}
    a2ba:	bf00      	nop

0000a2bc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    a2c0:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    a2c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    a2c4:	d352      	bcc.n	a36c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    a2c6:	f896 e000 	ldrb.w	lr, [r6]
    a2ca:	7815      	ldrb	r5, [r2, #0]
    a2cc:	7877      	ldrb	r7, [r6, #1]
    a2ce:	f896 8002 	ldrb.w	r8, [r6, #2]
    a2d2:	7854      	ldrb	r4, [r2, #1]
    a2d4:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    a2d8:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    a2dc:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    a2e0:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    a2e4:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    a2e8:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    a2ec:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    a2f0:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    a2f4:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    a2f6:	b3b2      	cbz	r2, a366 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    a2f8:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    a2fc:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    a300:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    a304:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    a308:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    a30c:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a310:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    a312:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    a316:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    a31a:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    a31e:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    a322:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    a326:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    a32a:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    a32e:	d818      	bhi.n	a362 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    a330:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a334:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    a336:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a338:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a33a:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    a33e:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    a342:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    a346:	4475      	add	r5, lr
        g88 += gdelta87;
    a348:	4454      	add	r4, sl
        b88 += bdelta87;
    a34a:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a34c:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a34e:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    a352:	b2ad      	uxth	r5, r5
        g = rhs.g;
    a354:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    a358:	b2a4      	uxth	r4, r4
        b = rhs.b;
    a35a:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    a35e:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a360:	d2e6      	bcs.n	a330 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a366:	f04f 0b01 	mov.w	fp, #1
    a36a:	e7c7      	b.n	a2fc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    a36c:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a36e:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a370:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    a374:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    a376:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    a378:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    a37c:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a380:	7015      	strb	r5, [r2, #0]
    a382:	4619      	mov	r1, r3
    a384:	f886 e000 	strb.w	lr, [r6]
    a388:	464b      	mov	r3, r9
        g = rhs.g;
    a38a:	7054      	strb	r4, [r2, #1]
    a38c:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    a38e:	f882 c002 	strb.w	ip, [r2, #2]
    a392:	f886 8002 	strb.w	r8, [r6, #2]
    a396:	e79f      	b.n	a2d8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

0000a398 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    a398:	b309      	cbz	r1, a3de <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    a39a:	b430      	push	{r4, r5}
    a39c:	1e4d      	subs	r5, r1, #1
    a39e:	b2ad      	uxth	r5, r5
    a3a0:	43d2      	mvns	r2, r2
    a3a2:	3501      	adds	r5, #1
    a3a4:	b2d2      	uxtb	r2, r2
    a3a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a3aa:	4405      	add	r5, r0
    a3ac:	3201      	adds	r2, #1
    a3ae:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    a3b0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    a3b4:	fb02 f303 	mul.w	r3, r2, r3
    a3b8:	121b      	asrs	r3, r3, #8
    a3ba:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a3be:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a3c0:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a3c2:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a3c6:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a3ca:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a3cc:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a3ce:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a3d0:	7083      	strb	r3, [r0, #2]
    a3d2:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    a3d4:	4285      	cmp	r5, r0
    a3d6:	f104 0403 	add.w	r4, r4, #3
    a3da:	d1e9      	bne.n	a3b0 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    a3dc:	bc30      	pop	{r4, r5}
    a3de:	4770      	bx	lr

0000a3e0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    a3e0:	f7ff bfda 	b.w	a398 <fade_raw(CRGB*, unsigned short, unsigned char)>

0000a3e4 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    a3e4:	b322      	cbz	r2, a430 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    a3e6:	2aff      	cmp	r2, #255	; 0xff
    a3e8:	d023      	beq.n	a432 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    a3ea:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a3ec:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a3ee:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a3f0:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a3f2:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    a3f4:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a3f6:	43d2      	mvns	r2, r2
    a3f8:	fb06 7605 	mla	r6, r6, r5, r7
    a3fc:	b2d2      	uxtb	r2, r2
    a3fe:	fb04 6402 	mla	r4, r4, r2, r6
    a402:	f3c4 2407 	ubfx	r4, r4, #8, #8
    a406:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a408:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a40a:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    a40c:	191f      	adds	r7, r3, r4
    a40e:	fb04 7405 	mla	r4, r4, r5, r7
    a412:	fb03 4302 	mla	r3, r3, r2, r4
    a416:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a41a:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a41c:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    a41e:	18f1      	adds	r1, r6, r3
    a420:	fb03 1505 	mla	r5, r3, r5, r1
    a424:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    a428:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    a42a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    a42e:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    a430:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a432:	780b      	ldrb	r3, [r1, #0]
    a434:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    a436:	784b      	ldrb	r3, [r1, #1]
    a438:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    a43a:	788b      	ldrb	r3, [r1, #2]
    a43c:	7083      	strb	r3, [r0, #2]
    a43e:	4770      	bx	lr

0000a440 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    a440:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a442:	780d      	ldrb	r5, [r1, #0]
    a444:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    a446:	784d      	ldrb	r5, [r1, #1]
    a448:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    a44a:	7889      	ldrb	r1, [r1, #2]
    a44c:	7081      	strb	r1, [r0, #2]
    a44e:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    a450:	4611      	mov	r1, r2
    a452:	461a      	mov	r2, r3
    a454:	f7ff ffc6 	bl	a3e4 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    a458:	4620      	mov	r0, r4
    a45a:	bd38      	pop	{r3, r4, r5, pc}

0000a45c <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    a45c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    a460:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    a464:	3100      	adds	r1, #0
    a466:	bf18      	it	ne
    a468:	2101      	movne	r1, #1
    a46a:	eb01 2123 	add.w	r1, r1, r3, asr #8
    a46e:	b2c9      	uxtb	r1, r1
    a470:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    a472:	060a      	lsls	r2, r1, #24
    a474:	b2db      	uxtb	r3, r3
    a476:	d40e      	bmi.n	a496 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    a478:	f001 0140 	and.w	r1, r1, #64	; 0x40
    a47c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    a480:	b919      	cbnz	r1, a48a <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    a482:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    a484:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    a486:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    a488:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    a48a:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    a48c:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    a48e:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    a490:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    a492:	7082      	strb	r2, [r0, #2]
    a494:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    a496:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    a498:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    a49a:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    a49c:	7042      	strb	r2, [r0, #1]
    a49e:	4770      	bx	lr

0000a4a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    a4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    a4a4:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    a4a6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    a4aa:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    a4ae:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    a4b0:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    a4b4:	d000      	beq.n	a4b8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    a4b6:	b9e6      	cbnz	r6, a4f2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    a4b8:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    a4ba:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    a4bc:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    a4be:	2bff      	cmp	r3, #255	; 0xff
    a4c0:	d012      	beq.n	a4e8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d043      	beq.n	a54e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    a4c6:	3301      	adds	r3, #1
    a4c8:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    a4ca:	b11c      	cbz	r4, a4d4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    a4cc:	fb03 4404 	mla	r4, r3, r4, r4
    a4d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    a4d4:	b119      	cbz	r1, a4de <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    a4d6:	fb03 1101 	mla	r1, r3, r1, r1
    a4da:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    a4de:	b11a      	cbz	r2, a4e8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    a4e0:	fb03 2202 	mla	r2, r3, r2, r2
    a4e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    a4e8:	7004      	strb	r4, [r0, #0]
    a4ea:	7041      	strb	r1, [r0, #1]
    a4ec:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    a4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    a4f2:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    a4f4:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    a4f6:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    a4fa:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    a4fc:	d000      	beq.n	a500 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    a4fe:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    a500:	0112      	lsls	r2, r2, #4
    a502:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    a506:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    a508:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    a50c:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    a510:	f891 8002 	ldrb.w	r8, [r1, #2]
    a514:	fb04 f606 	mul.w	r6, r4, r6
    a518:	1c51      	adds	r1, r2, #1
    a51a:	fb04 f509 	mul.w	r5, r4, r9
    a51e:	fb04 f407 	mul.w	r4, r4, r7
    a522:	f3c4 2407 	ubfx	r4, r4, #8, #8
    a526:	f3c6 2707 	ubfx	r7, r6, #8, #8
    a52a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    a52e:	fb01 f60c 	mul.w	r6, r1, ip
    a532:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    a536:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    a53a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    a53e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    a542:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    a546:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    a548:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    a54a:	b2d2      	uxtb	r2, r2
    a54c:	e7b7      	b.n	a4be <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    a54e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    a550:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    a552:	461c      	mov	r4, r3
    a554:	7004      	strb	r4, [r0, #0]
    a556:	7041      	strb	r1, [r0, #1]
    a558:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a55e:	bf00      	nop

0000a560 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    a560:	b5f0      	push	{r4, r5, r6, r7, lr}
    a562:	3901      	subs	r1, #1
    a564:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    a566:	2500      	movs	r5, #0
    a568:	302f      	adds	r0, #47	; 0x2f
    a56a:	e001      	b.n	a570 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    a56c:	4284      	cmp	r4, r0
    a56e:	d01e      	beq.n	a5ae <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    a570:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    a574:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    a578:	42b3      	cmp	r3, r6
    a57a:	d0f7      	beq.n	a56c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    a57c:	f103 0701 	add.w	r7, r3, #1
    a580:	d204      	bcs.n	a58c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    a582:	b2fb      	uxtb	r3, r7
    a584:	7023      	strb	r3, [r4, #0]
    a586:	3501      	adds	r5, #1
    a588:	780e      	ldrb	r6, [r1, #0]
    a58a:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    a58c:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    a58e:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    a590:	b2ff      	uxtb	r7, r7
    a592:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    a596:	d208      	bcs.n	a5aa <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    a598:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    a59a:	780e      	ldrb	r6, [r1, #0]
    a59c:	42be      	cmp	r6, r7
    a59e:	bf38      	it	cc
    a5a0:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    a5a2:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    a5a6:	bf38      	it	cc
    a5a8:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    a5aa:	4295      	cmp	r5, r2
    a5ac:	d3de      	bcc.n	a56c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    a5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a5b0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    a5b2:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    a5b4:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    a5b6:	4604      	mov	r4, r0
    a5b8:	bfcc      	ite	gt
    a5ba:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    a5be:	2500      	movle	r5, #0
    a5c0:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    a5c2:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    a5c4:	bfd8      	it	le
    a5c6:	4616      	movle	r6, r2

	pLed->init();
    a5c8:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    a5ca:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    a5cc:	6823      	ldr	r3, [r4, #0]
    a5ce:	6062      	str	r2, [r4, #4]
    a5d0:	695b      	ldr	r3, [r3, #20]
    a5d2:	4a0a      	ldr	r2, [pc, #40]	; (a5fc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    a5d4:	6166      	str	r6, [r4, #20]
    a5d6:	4293      	cmp	r3, r2
    a5d8:	d101      	bne.n	a5de <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    a5da:	4620      	mov	r0, r4
    a5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    a5de:	4620      	mov	r0, r4
    a5e0:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    a5e2:	2800      	cmp	r0, #0
    a5e4:	d0f9      	beq.n	a5da <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    a5e6:	4a06      	ldr	r2, [pc, #24]	; (a600 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    a5e8:	4b06      	ldr	r3, [pc, #24]	; (a604 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    a5ea:	6851      	ldr	r1, [r2, #4]
    a5ec:	fb93 f0f0 	sdiv	r0, r3, r0
    a5f0:	4288      	cmp	r0, r1
    a5f2:	bf38      	it	cc
    a5f4:	4608      	movcc	r0, r1
    a5f6:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    a5f8:	4620      	mov	r0, r4
    a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5fc:	00000471 	.word	0x00000471
    a600:	1fffac70 	.word	0x1fffac70
    a604:	000f4240 	.word	0x000f4240

0000a608 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    a608:	4b08      	ldr	r3, [pc, #32]	; (a62c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    a60a:	b510      	push	{r4, lr}
    a60c:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a60e:	b15c      	cbz	r4, a628 <CFastLED::clearData()+0x20>
    a610:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    a612:	2100      	movs	r1, #0
    a614:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    a616:	b123      	cbz	r3, a622 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    a618:	6962      	ldr	r2, [r4, #20]
    a61a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a61e:	f003 fbef 	bl	de00 <memset>
    a622:	68a4      	ldr	r4, [r4, #8]
    a624:	2c00      	cmp	r4, #0
    a626:	d1f3      	bne.n	a610 <CFastLED::clearData()+0x8>
    a628:	bd10      	pop	{r4, pc}
    a62a:	bf00      	nop
    a62c:	1fffac80 	.word	0x1fffac80

0000a630 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    a630:	4b07      	ldr	r3, [pc, #28]	; (a650 <CFastLED::setCorrection(CRGB const&)+0x20>)
    a632:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a634:	b153      	cbz	r3, a64c <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    a636:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a638:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    a63a:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    a63c:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    a63e:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a640:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    a642:	735a      	strb	r2, [r3, #13]
    a644:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a646:	2b00      	cmp	r3, #0
    a648:	d1f6      	bne.n	a638 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    a64a:	bc10      	pop	{r4}
    a64c:	4770      	bx	lr
    a64e:	bf00      	nop
    a650:	1fffac80 	.word	0x1fffac80

0000a654 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    a654:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    a656:	4c10      	ldr	r4, [pc, #64]	; (a698 <CFastLED::countFPS(int)+0x44>)
    a658:	6825      	ldr	r5, [r4, #0]
    a65a:	1c6e      	adds	r6, r5, #1
    a65c:	428d      	cmp	r5, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    a65e:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    a660:	6026      	str	r6, [r4, #0]
    a662:	db16      	blt.n	a692 <CFastLED::countFPS(int)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a664:	4d0d      	ldr	r5, [pc, #52]	; (a69c <CFastLED::countFPS(int)+0x48>)
      uint32_t now = millis();
      now -= lastframe;
    a666:	490e      	ldr	r1, [pc, #56]	; (a6a0 <CFastLED::countFPS(int)+0x4c>)
    a668:	682b      	ldr	r3, [r5, #0]
    a66a:	9300      	str	r3, [sp, #0]
	return ret;
    a66c:	9a00      	ldr	r2, [sp, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a66e:	682d      	ldr	r5, [r5, #0]
    a670:	680b      	ldr	r3, [r1, #0]
    a672:	9501      	str	r5, [sp, #4]
	return ret;
    a674:	9d01      	ldr	r5, [sp, #4]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    lastframe = millis();
    a676:	600d      	str	r5, [r1, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
    a678:	1ad3      	subs	r3, r2, r3
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    a67a:	f04f 0100 	mov.w	r1, #0
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    a67e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    a682:	bf08      	it	eq
    a684:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    a686:	fb02 f206 	mul.w	r2, r2, r6
    br = 0;
    a68a:	6021      	str	r1, [r4, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    a68c:	fbb2 f3f3 	udiv	r3, r2, r3
    a690:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    a692:	b003      	add	sp, #12
    a694:	bc70      	pop	{r4, r5, r6}
    a696:	4770      	bx	lr
    a698:	1fffac84 	.word	0x1fffac84
    a69c:	1ffface8 	.word	0x1ffface8
    a6a0:	1fffac8c 	.word	0x1fffac8c

0000a6a4 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6a8:	6843      	ldr	r3, [r0, #4]
    a6aa:	4c2d      	ldr	r4, [pc, #180]	; (a760 <CFastLED::show(unsigned char)+0xbc>)
    a6ac:	b083      	sub	sp, #12
    a6ae:	4606      	mov	r6, r0
    a6b0:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	d14b      	bne.n	a74e <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    a6b6:	f000 fe6b 	bl	b390 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    a6ba:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    a6bc:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    a6be:	b11b      	cbz	r3, a6c8 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    a6c0:	4648      	mov	r0, r9
    a6c2:	68b1      	ldr	r1, [r6, #8]
    a6c4:	4798      	blx	r3
    a6c6:	4681      	mov	r9, r0
    a6c8:	4b26      	ldr	r3, [pc, #152]	; (a764 <CFastLED::show(unsigned char)+0xc0>)
    a6ca:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    a6cc:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a6ce:	2c00      	cmp	r4, #0
    a6d0:	d036      	beq.n	a740 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    a6d2:	8873      	ldrh	r3, [r6, #2]
    a6d4:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    a6d6:	6861      	ldr	r1, [r4, #4]
    a6d8:	6962      	ldr	r2, [r4, #20]
    a6da:	2b63      	cmp	r3, #99	; 0x63
    a6dc:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    a6de:	bf98      	it	ls
    a6e0:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    a6e2:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    a6e6:	f88d 5004 	strb.w	r5, [sp, #4]
    a6ea:	f88d 5005 	strb.w	r5, [sp, #5]
    a6ee:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    a6f2:	f1b9 0f00 	cmp.w	r9, #0
    a6f6:	d01c      	beq.n	a732 <CFastLED::show(unsigned char)+0x8e>
    a6f8:	f104 030b 	add.w	r3, r4, #11
    a6fc:	f10d 0e04 	add.w	lr, sp, #4
    a700:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    a704:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    a708:	f1bb 0f00 	cmp.w	fp, #0
    a70c:	d00d      	beq.n	a72a <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    a70e:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    a712:	f10a 0001 	add.w	r0, sl, #1
    a716:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    a71a:	f1ba 0f00 	cmp.w	sl, #0
    a71e:	d004      	beq.n	a72a <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    a720:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    a724:	0c00      	lsrs	r0, r0, #16
    a726:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    a72a:	4563      	cmp	r3, ip
    a72c:	f10e 0e01 	add.w	lr, lr, #1
    a730:	d1e8      	bne.n	a704 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    a732:	4620      	mov	r0, r4
    a734:	ab01      	add	r3, sp, #4
    a736:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    a738:	74a7      	strb	r7, [r4, #18]
    a73a:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a73c:	2c00      	cmp	r4, #0
    a73e:	d1c8      	bne.n	a6d2 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    a740:	4630      	mov	r0, r6
    a742:	2119      	movs	r1, #25
    a744:	f7ff ff86 	bl	a654 <CFastLED::countFPS(int)>
}
    a748:	b003      	add	sp, #12
    a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    a74e:	f000 fe1f 	bl	b390 <micros>
    a752:	6822      	ldr	r2, [r4, #0]
    a754:	6873      	ldr	r3, [r6, #4]
    a756:	1a80      	subs	r0, r0, r2
    a758:	4298      	cmp	r0, r3
    a75a:	d3aa      	bcc.n	a6b2 <CFastLED::show(unsigned char)+0xe>
    a75c:	e7ab      	b.n	a6b6 <CFastLED::show(unsigned char)+0x12>
    a75e:	bf00      	nop
    a760:	1fffac88 	.word	0x1fffac88
    a764:	1fffac80 	.word	0x1fffac80

0000a768 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    a768:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a76a:	4d0a      	ldr	r5, [pc, #40]	; (a794 <CFastLED::delay(unsigned long)+0x2c>)
    a76c:	b083      	sub	sp, #12
    a76e:	682b      	ldr	r3, [r5, #0]
    a770:	9300      	str	r3, [sp, #0]
	return ret;
    a772:	9f00      	ldr	r7, [sp, #0]
    a774:	4604      	mov	r4, r0
    a776:	460e      	mov	r6, r1
    a778:	7821      	ldrb	r1, [r4, #0]
    a77a:	4620      	mov	r0, r4
    a77c:	f7ff ff92 	bl	a6a4 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    a780:	f002 f91a 	bl	c9b8 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a784:	682b      	ldr	r3, [r5, #0]
    a786:	9301      	str	r3, [sp, #4]
	return ret;
    a788:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    a78a:	1bdb      	subs	r3, r3, r7
    a78c:	42b3      	cmp	r3, r6
    a78e:	d3f3      	bcc.n	a778 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    a790:	b003      	add	sp, #12
    a792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a794:	1ffface8 	.word	0x1ffface8

0000a798 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a79c:	6843      	ldr	r3, [r0, #4]
    a79e:	4c2c      	ldr	r4, [pc, #176]	; (a850 <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    a7a0:	b083      	sub	sp, #12
    a7a2:	4606      	mov	r6, r0
    a7a4:	468a      	mov	sl, r1
    a7a6:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d149      	bne.n	a840 <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    a7ac:	f000 fdf0 	bl	b390 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    a7b0:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    a7b2:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    a7b4:	b11b      	cbz	r3, a7be <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    a7b6:	4648      	mov	r0, r9
    a7b8:	68b1      	ldr	r1, [r6, #8]
    a7ba:	4798      	blx	r3
    a7bc:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    a7be:	4b25      	ldr	r3, [pc, #148]	; (a854 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    a7c0:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    a7c2:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a7c4:	2c00      	cmp	r4, #0
    a7c6:	d034      	beq.n	a832 <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    a7c8:	8873      	ldrh	r3, [r6, #2]
    a7ca:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    a7cc:	6962      	ldr	r2, [r4, #20]
    a7ce:	2b63      	cmp	r3, #99	; 0x63
    a7d0:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    a7d2:	bf98      	it	ls
    a7d4:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    a7d6:	f8d3 8000 	ldr.w	r8, [r3]
    a7da:	f88d 5004 	strb.w	r5, [sp, #4]
    a7de:	f88d 5005 	strb.w	r5, [sp, #5]
    a7e2:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    a7e6:	f1b9 0f00 	cmp.w	r9, #0
    a7ea:	d01a      	beq.n	a822 <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    a7ec:	f104 030b 	add.w	r3, r4, #11
    a7f0:	a801      	add	r0, sp, #4
    a7f2:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    a7f6:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    a7fa:	f1bb 0f00 	cmp.w	fp, #0
    a7fe:	d00c      	beq.n	a81a <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    a800:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    a804:	f10c 0101 	add.w	r1, ip, #1
    a808:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    a80c:	f1bc 0f00 	cmp.w	ip, #0
    a810:	d003      	beq.n	a81a <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    a812:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    a816:	0c09      	lsrs	r1, r1, #16
    a818:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    a81a:	4573      	cmp	r3, lr
    a81c:	f100 0001 	add.w	r0, r0, #1
    a820:	d1e9      	bne.n	a7f6 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    a822:	4620      	mov	r0, r4
    a824:	ab01      	add	r3, sp, #4
    a826:	4651      	mov	r1, sl
    a828:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    a82a:	74a7      	strb	r7, [r4, #18]
    a82c:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    a82e:	2c00      	cmp	r4, #0
    a830:	d1ca      	bne.n	a7c8 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    a832:	4630      	mov	r0, r6
    a834:	2119      	movs	r1, #25
    a836:	f7ff ff0d 	bl	a654 <CFastLED::countFPS(int)>
}
    a83a:	b003      	add	sp, #12
    a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    a840:	f000 fda6 	bl	b390 <micros>
    a844:	6822      	ldr	r2, [r4, #0]
    a846:	6873      	ldr	r3, [r6, #4]
    a848:	1a80      	subs	r0, r0, r2
    a84a:	4298      	cmp	r0, r3
    a84c:	d3ac      	bcc.n	a7a8 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    a84e:	e7ad      	b.n	a7ac <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    a850:	1fffac88 	.word	0x1fffac88
    a854:	1fffac80 	.word	0x1fffac80

0000a858 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    a858:	b510      	push	{r4, lr}
    a85a:	4604      	mov	r4, r0
    a85c:	b082      	sub	sp, #8
	if(writeData) {
    a85e:	b151      	cbz	r1, a876 <CFastLED::clear(bool)+0x1e>
    a860:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    a862:	461a      	mov	r2, r3
    a864:	a901      	add	r1, sp, #4
    a866:	f88d 3004 	strb.w	r3, [sp, #4]
    a86a:	f88d 3005 	strb.w	r3, [sp, #5]
    a86e:	f88d 3006 	strb.w	r3, [sp, #6]
    a872:	f7ff ff91 	bl	a798 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    a876:	4620      	mov	r0, r4
    a878:	f7ff fec6 	bl	a608 <CFastLED::clearData()>
}
    a87c:	b002      	add	sp, #8
    a87e:	bd10      	pop	{r4, pc}

0000a880 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    a880:	2000      	movs	r0, #0
    a882:	4770      	bx	lr

0000a884 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    a884:	4b04      	ldr	r3, [pc, #16]	; (a898 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    a886:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    a888:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    a88a:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    a88e:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    a890:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    a892:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    a894:	60da      	str	r2, [r3, #12]
    a896:	4770      	bx	lr
    a898:	1fffac70 	.word	0x1fffac70

0000a89c <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    a89c:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    a89e:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    a8a0:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    a8a2:	7882      	ldrb	r2, [r0, #2]
    a8a4:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    a8a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    a8aa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    a8ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    a8b2:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    a8b4:	0625      	lsls	r5, r4, #24
    a8b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a8ba:	d45f      	bmi.n	a97c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    a8bc:	f004 0540 	and.w	r5, r4, #64	; 0x40
    a8c0:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    a8c4:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    a8c8:	2d00      	cmp	r5, #0
    a8ca:	d146      	bne.n	a95a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    a8cc:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    a8d0:	2c00      	cmp	r4, #0
    a8d2:	d06c      	beq.n	a9ae <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    a8d4:	3355      	adds	r3, #85	; 0x55
    a8d6:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    a8d8:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    a8da:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    a8dc:	2eff      	cmp	r6, #255	; 0xff
    a8de:	d01c      	beq.n	a91a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    a8e0:	2e00      	cmp	r6, #0
    a8e2:	d079      	beq.n	a9d8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    a8e4:	b11c      	cbz	r4, a8ee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    a8e6:	fb06 4404 	mla	r4, r6, r4, r4
    a8ea:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    a8ee:	b11d      	cbz	r5, a8f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    a8f0:	fb06 5505 	mla	r5, r6, r5, r5
    a8f4:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    a8f8:	b11b      	cbz	r3, a902 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    a8fa:	fb06 3303 	mla	r3, r6, r3, r3
    a8fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    a902:	43f0      	mvns	r0, r6
    a904:	b2c0      	uxtb	r0, r0
    a906:	fb00 0000 	mla	r0, r0, r0, r0
    a90a:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    a90e:	4404      	add	r4, r0
            g += brightness_floor;
    a910:	4405      	add	r5, r0
            b += brightness_floor;
    a912:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    a914:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    a916:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    a918:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    a91a:	2aff      	cmp	r2, #255	; 0xff
    a91c:	d018      	beq.n	a950 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    a91e:	fb12 f002 	smulbb	r0, r2, r2
    a922:	3200      	adds	r2, #0
    a924:	bf18      	it	ne
    a926:	2201      	movne	r2, #1
    a928:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    a92c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    a930:	d056      	beq.n	a9e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    a932:	b11c      	cbz	r4, a93c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    a934:	fb02 4404 	mla	r4, r2, r4, r4
    a938:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    a93c:	b11d      	cbz	r5, a946 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    a93e:	fb02 5505 	mla	r5, r2, r5, r5
    a942:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    a946:	b11b      	cbz	r3, a950 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    a948:	fb02 3303 	mla	r3, r2, r3, r3
    a94c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    a950:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    a952:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    a954:	708b      	strb	r3, [r1, #2]
}
    a956:	bcf0      	pop	{r4, r5, r6, r7}
    a958:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    a95a:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    a95e:	bb5c      	cbnz	r4, a9b8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    a960:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    a964:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    a968:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    a96c:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    a96e:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    a970:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    a974:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    a976:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    a978:	463b      	mov	r3, r7
    a97a:	e7af      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    a97c:	f004 0740 	and.w	r7, r4, #64	; 0x40
    a980:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    a984:	b9e7      	cbnz	r7, a9c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    a986:	f004 0720 	and.w	r7, r4, #32
    a98a:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    a98e:	2f00      	cmp	r7, #0
    a990:	d136      	bne.n	aa00 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    a992:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    a996:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    a99a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    a99e:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    a9a2:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    a9a6:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    a9a8:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    a9aa:	b2c3      	uxtb	r3, r0
    a9ac:	e796      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    a9ae:	43dc      	mvns	r4, r3
    a9b0:	b2e4      	uxtb	r4, r4
                g = third;
    a9b2:	461d      	mov	r5, r3
                b = 0;
    a9b4:	4603      	mov	r3, r0
    a9b6:	e791      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    a9b8:	2400      	movs	r4, #0
                g = K255 - third;
    a9ba:	43dd      	mvns	r5, r3
    a9bc:	b2ed      	uxtb	r5, r5
    a9be:	e78d      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    a9c0:	f004 0420 	and.w	r4, r4, #32
    a9c4:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    a9c8:	b994      	cbnz	r4, a9f0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    a9ca:	f103 0455 	add.w	r4, r3, #85	; 0x55
    a9ce:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    a9d0:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    a9d4:	b2db      	uxtb	r3, r3
    a9d6:	e781      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    a9d8:	23ff      	movs	r3, #255	; 0xff
    a9da:	461d      	mov	r5, r3
    a9dc:	461c      	mov	r4, r3
    a9de:	e79c      	b.n	a91a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    a9e0:	4615      	mov	r5, r2
    a9e2:	4614      	mov	r4, r2
    a9e4:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    a9e6:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    a9e8:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    a9ea:	708b      	strb	r3, [r1, #2]
}
    a9ec:	bcf0      	pop	{r4, r5, r6, r7}
    a9ee:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    a9f0:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    a9f4:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    a9f6:	2500      	movs	r5, #0
                b = K85 - third;
    a9f8:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    a9fc:	b2db      	uxtb	r3, r3
    a9fe:	e76d      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    aa00:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    aa02:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    aa04:	b2c3      	uxtb	r3, r0
    aa06:	e769      	b.n	a8dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

0000aa08 <inoise8_raw(unsigned short, unsigned short)>:
    uint8_t ans = qadd8( n, n);        //   0..255
    return ans;
}

int8_t inoise8_raw(uint16_t x, uint16_t y)
{
    aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Find the unit cube containing the point
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
    aa0c:	4f76      	ldr	r7, [pc, #472]	; (abe8 <inoise8_raw(unsigned short, unsigned short)+0x1e0>)
    aa0e:	1203      	asrs	r3, r0, #8
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
    aa10:	18fa      	adds	r2, r7, r3
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    aa12:	5cfb      	ldrb	r3, [r7, r3]
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    aa14:	7852      	ldrb	r2, [r2, #1]

int8_t inoise8_raw(uint16_t x, uint16_t y)
{
  // Find the unit cube containing the point
  uint8_t X = x>>8;
  uint8_t Y = y>>8;
    aa16:	0a0c      	lsrs	r4, r1, #8
  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    aa18:	4422      	add	r2, r4
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    aa1a:	4423      	add	r3, r4
    aa1c:	b2db      	uxtb	r3, r3
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    aa1e:	b2d2      	uxtb	r2, r2
  uint8_t BB = P(B+1);
    aa20:	eb07 0c02 	add.w	ip, r7, r2
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
    aa24:	eb07 0e03 	add.w	lr, r7, r3
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
  uint8_t BB = P(B+1);

  // Get the relative position of the point in the cube
  uint8_t u = x;
    aa28:	b2c5      	uxtb	r5, r0
  uint8_t v = y;
    aa2a:	b2cc      	uxtb	r4, r1

  // Get a signed version of the above for the grad function
  int8_t xx = ((uint8_t)(x)>>1) & 0x7F;
    aa2c:	ea4f 0b55 	mov.w	fp, r5, lsr #1
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
    aa30:	0866      	lsrs	r6, r4, #1
///                Takes around 13 cycles on AVR
#if EASE8_C == 1
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)
{
    uint8_t j = i;
    if( j & 0x80 ) {
    aa32:	0600      	lsls	r0, r0, #24
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    aa34:	f817 8003 	ldrb.w	r8, [r7, r3]
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
  uint8_t BB = P(B+1);
    aa38:	f89c c001 	ldrb.w	ip, [ip, #1]
  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    aa3c:	5cba      	ldrb	r2, [r7, r2]
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
    aa3e:	f89e e001 	ldrb.w	lr, [lr, #1]
  // Get the relative position of the point in the cube
  uint8_t u = x;
  uint8_t v = y;

  // Get a signed version of the above for the grad function
  int8_t xx = ((uint8_t)(x)>>1) & 0x7F;
    aa42:	fa4f f38b 	sxtb.w	r3, fp
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
    aa46:	fa4f f986 	sxtb.w	r9, r6
    aa4a:	f100 80c3 	bmi.w	abd4 <inoise8_raw(unsigned short, unsigned short)+0x1cc>
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    aa4e:	fb05 5505 	mla	r5, r5, r5, r5
    aa52:	09ed      	lsrs	r5, r5, #7
    aa54:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
///                Takes around 13 cycles on AVR
#if EASE8_C == 1
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)
{
    uint8_t j = i;
    if( j & 0x80 ) {
    aa58:	0609      	lsls	r1, r1, #24
    aa5a:	f100 80b1 	bmi.w	abc0 <inoise8_raw(unsigned short, unsigned short)+0x1b8>
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    aa5e:	fb04 4404 	mla	r4, r4, r4, r4
    aa62:	09e4      	lsrs	r4, r4, #7
    aa64:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    aa68:	f817 1008 	ldrb.w	r1, [r7, r8]
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    aa6c:	0748      	lsls	r0, r1, #29
	  u = y; v = x;
    aa6e:	bf4b      	itete	mi
    aa70:	46ca      	movmi	sl, r9
  } else {
	  u = x; v = y;
    aa72:	46c8      	movpl	r8, r9
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    aa74:	4698      	movmi	r8, r3
  } else {
	  u = x; v = y;
    aa76:	469a      	movpl	sl, r3
  }

  if(hash&1) { u = -u; }
    aa78:	07c8      	lsls	r0, r1, #31
    aa7a:	bf44      	itt	mi
    aa7c:	f1ca 0a00 	rsbmi	sl, sl, #0
    aa80:	fa4f fa8a 	sxtbmi.w	sl, sl
  if(hash&2) { v = -v; }
    aa84:	0789      	lsls	r1, r1, #30
    aa86:	bf44      	itt	mi
    aa88:	f1c8 0800 	rsbmi	r8, r8, #0
    aa8c:	fa4f f888 	sxtbmi.w	r8, r8
///       If the first argument is even, result is rounded down.
///       If the first argument is odd, result is result up.
LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)
{
#if AVG7_C == 1
    return ((i + j) >> 1) + (i & 0x1);
    aa90:	44d0      	add	r8, sl
    aa92:	f00a 0a01 	and.w	sl, sl, #1
    aa96:	eb0a 0868 	add.w	r8, sl, r8, asr #1
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    aa9a:	f817 a002 	ldrb.w	sl, [r7, r2]
    aa9e:	f1ab 0280 	sub.w	r2, fp, #128	; 0x80
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    aaa2:	f01a 0f04 	tst.w	sl, #4
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    aaa6:	b252      	sxtb	r2, r2
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    aaa8:	bf16      	itet	ne
    aaaa:	4649      	movne	r1, r9
  } else {
	  u = x; v = y;
    aaac:	4611      	moveq	r1, r2
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    aaae:	4691      	movne	r9, r2
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    aab0:	f01a 0f01 	tst.w	sl, #1
    aab4:	bf1c      	itt	ne
    aab6:	4249      	negne	r1, r1
    aab8:	b249      	sxtbne	r1, r1
  if(hash&2) { v = -v; }
    aaba:	f01a 0f02 	tst.w	sl, #2
    aabe:	bf1c      	itt	ne
    aac0:	f1c9 0900 	rsbne	r9, r9, #0
    aac4:	fa4f f989 	sxtbne.w	r9, r9
    aac8:	4489      	add	r9, r1
    aaca:	f001 0101 	and.w	r1, r1, #1
    aace:	eb01 0169 	add.w	r1, r1, r9, asr #1
    aad2:	fa5f f888 	uxtb.w	r8, r8
    aad6:	b2c9      	uxtb	r1, r1
    aad8:	fa4f f088 	sxtb.w	r0, r8
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    aadc:	fa4f f981 	sxtb.w	r9, r1
    aae0:	4581      	cmp	r9, r0
    aae2:	dd50      	ble.n	ab86 <inoise8_raw(unsigned short, unsigned short)+0x17e>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    aae4:	ebc8 0001 	rsb	r0, r8, r1
    aae8:	b2c0      	uxtb	r0, r0
    aaea:	3501      	adds	r5, #1
    aaec:	fb05 f000 	mul.w	r0, r5, r0
    aaf0:	eb08 2020 	add.w	r0, r8, r0, asr #8
    aaf4:	b240      	sxtb	r0, r0
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);
    aaf6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    aafa:	f817 700c 	ldrb.w	r7, [r7, ip]
    aafe:	3e80      	subs	r6, #128	; 0x80
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    ab00:	f01e 0f04 	tst.w	lr, #4
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);
    ab04:	b276      	sxtb	r6, r6
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    ab06:	bf16      	itet	ne
    ab08:	4619      	movne	r1, r3
  } else {
	  u = x; v = y;
    ab0a:	4631      	moveq	r1, r6
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    ab0c:	4633      	movne	r3, r6
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    ab0e:	f01e 0f01 	tst.w	lr, #1
    ab12:	bf1c      	itt	ne
    ab14:	425b      	negne	r3, r3
    ab16:	b25b      	sxtbne	r3, r3
  if(hash&2) { v = -v; }
    ab18:	f01e 0f02 	tst.w	lr, #2
    ab1c:	bf1c      	itt	ne
    ab1e:	4249      	negne	r1, r1
    ab20:	b249      	sxtbne	r1, r1
    ab22:	4419      	add	r1, r3
    ab24:	f003 0301 	and.w	r3, r3, #1
    ab28:	eb03 0161 	add.w	r1, r3, r1, asr #1
    ab2c:	b2cb      	uxtb	r3, r1
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    ab2e:	f017 0f04 	tst.w	r7, #4
    ab32:	b259      	sxtb	r1, r3
    ab34:	d002      	beq.n	ab3c <inoise8_raw(unsigned short, unsigned short)+0x134>
    ab36:	4696      	mov	lr, r2
	  u = y; v = x;
    ab38:	4632      	mov	r2, r6
    ab3a:	4676      	mov	r6, lr
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    ab3c:	f017 0f01 	tst.w	r7, #1
    ab40:	bf1c      	itt	ne
    ab42:	4252      	negne	r2, r2
    ab44:	b252      	sxtbne	r2, r2
  if(hash&2) { v = -v; }
    ab46:	07bf      	lsls	r7, r7, #30
    ab48:	bf44      	itt	mi
    ab4a:	4276      	negmi	r6, r6
    ab4c:	b276      	sxtbmi	r6, r6
    ab4e:	4416      	add	r6, r2
    ab50:	f002 0201 	and.w	r2, r2, #1
    ab54:	eb02 0266 	add.w	r2, r2, r6, asr #1
    ab58:	b2d2      	uxtb	r2, r2
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    ab5a:	b256      	sxtb	r6, r2
    ab5c:	428e      	cmp	r6, r1
    ab5e:	dd1c      	ble.n	ab9a <inoise8_raw(unsigned short, unsigned short)+0x192>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    ab60:	1ad2      	subs	r2, r2, r3
    ab62:	b2d1      	uxtb	r1, r2
    ab64:	fb05 f201 	mul.w	r2, r5, r1
    ab68:	eb03 2322 	add.w	r3, r3, r2, asr #8
    ab6c:	b25b      	sxtb	r3, r3
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    ab6e:	4283      	cmp	r3, r0
        uint8_t delta = b - a;
    ab70:	b2c0      	uxtb	r0, r0
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    ab72:	dc1c      	bgt.n	abae <inoise8_raw(unsigned short, unsigned short)+0x1a6>
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    } else {
        uint8_t delta = a - b;
        uint8_t scaled = scale8( delta, frac);
        result = a - scaled;
    ab74:	1ac3      	subs	r3, r0, r3
    ab76:	b2db      	uxtb	r3, r3
    ab78:	fb04 3303 	mla	r3, r4, r3, r3
    ab7c:	eba0 2023 	sub.w	r0, r0, r3, asr #8
    ab80:	b240      	sxtb	r0, r0
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);

  int8_t ans = lerp7by8(X1,X2,v);

  return ans;
    ab82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    } else {
        uint8_t delta = a - b;
        uint8_t scaled = scale8( delta, frac);
        result = a - scaled;
    ab86:	ebc1 0108 	rsb	r1, r1, r8
    ab8a:	b2c9      	uxtb	r1, r1
    ab8c:	3501      	adds	r5, #1
    ab8e:	fb05 f101 	mul.w	r1, r5, r1
    ab92:	eba8 2021 	sub.w	r0, r8, r1, asr #8
    ab96:	b240      	sxtb	r0, r0
    ab98:	e7ad      	b.n	aaf6 <inoise8_raw(unsigned short, unsigned short)+0xee>
    ab9a:	1a9a      	subs	r2, r3, r2
    ab9c:	b2d2      	uxtb	r2, r2
    ab9e:	fb05 f202 	mul.w	r2, r5, r2
    aba2:	eba3 2322 	sub.w	r3, r3, r2, asr #8
    aba6:	b25b      	sxtb	r3, r3
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    aba8:	4283      	cmp	r3, r0
        uint8_t delta = b - a;
    abaa:	b2c0      	uxtb	r0, r0
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    abac:	dde2      	ble.n	ab74 <inoise8_raw(unsigned short, unsigned short)+0x16c>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    abae:	1a1b      	subs	r3, r3, r0
    abb0:	b2db      	uxtb	r3, r3
    abb2:	fb04 3303 	mla	r3, r4, r3, r3
    abb6:	eb00 2023 	add.w	r0, r0, r3, asr #8
    abba:	b240      	sxtb	r0, r0
    abbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abc0:	43e4      	mvns	r4, r4
    abc2:	b2e4      	uxtb	r4, r4
    abc4:	fb04 4404 	mla	r4, r4, r4, r4
    abc8:	09e4      	lsrs	r4, r4, #7
    abca:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    if( i & 0x80 ) {
        jj2 = 255 - jj2;
    abce:	f084 04ff 	eor.w	r4, r4, #255	; 0xff
    abd2:	e749      	b.n	aa68 <inoise8_raw(unsigned short, unsigned short)+0x60>
    abd4:	43ed      	mvns	r5, r5
    abd6:	b2ed      	uxtb	r5, r5
    uint8_t j = i;
    if( j & 0x80 ) {
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    abd8:	fb05 5505 	mla	r5, r5, r5, r5
    abdc:	09ed      	lsrs	r5, r5, #7
    abde:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if( i & 0x80 ) {
        jj2 = 255 - jj2;
    abe2:	f085 05ff 	eor.w	r5, r5, #255	; 0xff
    abe6:	e737      	b.n	aa58 <inoise8_raw(unsigned short, unsigned short)+0x50>
    abe8:	00010d48 	.word	0x00010d48

0000abec <inoise8(unsigned short, unsigned short)>:
  // return scale8((70+(ans)),234)<<1;
}



uint8_t inoise8(uint16_t x, uint16_t y) {
    abec:	b508      	push	{r3, lr}
  //return scale8(69+inoise8_raw(x,y),237)<<1;
    int8_t n = inoise8_raw( x, y);  // -64..+64
    abee:	f7ff ff0b 	bl	aa08 <inoise8_raw(unsigned short, unsigned short)>
    n+= 64;                         //   0..128
    abf2:	3040      	adds	r0, #64	; 0x40
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    abf4:	4603      	mov	r3, r0
    abf6:	fa83 f350 	uqadd8	r3, r3, r0
    uint8_t ans = qadd8( n, n);     //   0..255
    return ans;
}
    abfa:	b2d8      	uxtb	r0, r3
    abfc:	bd08      	pop	{r3, pc}
    abfe:	bf00      	nop

0000ac00 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    ac02:	b361      	cbz	r1, ac5e <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    ac04:	f101 3eff 	add.w	lr, r1, #4294967295
    ac08:	fa1f fe8e 	uxth.w	lr, lr
    ac0c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    ac10:	2200      	movs	r2, #0
    ac12:	f10e 0e06 	add.w	lr, lr, #6
    ac16:	4486      	add	lr, r0
    ac18:	1cc3      	adds	r3, r0, #3
    ac1a:	4615      	mov	r5, r2
    ac1c:	4614      	mov	r4, r2
        red32   += *p++;
    ac1e:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    ac22:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    ac26:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    ac2a:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    ac2c:	4573      	cmp	r3, lr
        red32   += *p++;
    ac2e:	443c      	add	r4, r7
        green32 += *p++;
    ac30:	4405      	add	r5, r0
        blue32  += *p++;
    ac32:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    ac34:	d1f3      	bne.n	ac1e <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    ac36:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ac3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ac3e:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ac42:	f3c4 1317 	ubfx	r3, r4, #4, #24
    ac46:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    ac4a:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    ac4e:	0a12      	lsrs	r2, r2, #8
    ac50:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    ac54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ac58:	1910      	adds	r0, r2, r4
}
    ac5a:	4408      	add	r0, r1
    ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    ac5e:	460c      	mov	r4, r1
    ac60:	460a      	mov	r2, r1
    ac62:	e7f7      	b.n	ac54 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

0000ac64 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    ac64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    ac68:	4b25      	ldr	r3, [pc, #148]	; (ad00 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    ac6a:	681c      	ldr	r4, [r3, #0]
    ac6c:	b085      	sub	sp, #20
    ac6e:	4607      	mov	r7, r0
    ac70:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ac72:	b19c      	cbz	r4, ac9c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    ac74:	f8df 9094 	ldr.w	r9, [pc, #148]	; ad0c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    ac78:	257d      	movs	r5, #125	; 0x7d
    ac7a:	e007      	b.n	ac8c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    ac7c:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    ac7e:	b281      	uxth	r1, r0
    ac80:	4630      	mov	r0, r6
    ac82:	f7ff ffbd 	bl	ac00 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    ac86:	68a4      	ldr	r4, [r4, #8]
    ac88:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ac8a:	b144      	cbz	r4, ac9e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    ac8c:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    ac90:	691b      	ldr	r3, [r3, #16]
    ac92:	454b      	cmp	r3, r9
    ac94:	d0f2      	beq.n	ac7c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    ac96:	4620      	mov	r0, r4
    ac98:	4798      	blx	r3
    ac9a:	e7f0      	b.n	ac7e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    ac9c:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    ac9e:	fb05 f507 	mul.w	r5, r5, r7
    aca2:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    aca4:	4b17      	ldr	r3, [pc, #92]	; (ad04 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    aca6:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    aca8:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    acaa:	d210      	bcs.n	acce <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    acac:	b323      	cbz	r3, acf8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    acae:	4a16      	ldr	r2, [pc, #88]	; (ad08 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    acb0:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    acb2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    acb6:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    acba:	f89d 100c 	ldrb.w	r1, [sp, #12]
    acbe:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    acc0:	4638      	mov	r0, r7
    acc2:	ea23 0301 	bic.w	r3, r3, r1
    acc6:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    acc8:	b005      	add	sp, #20
    acca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    acce:	fb08 f707 	mul.w	r7, r8, r7
    acd2:	fbb7 f0f5 	udiv	r0, r7, r5
    acd6:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    acd8:	b173      	cbz	r3, acf8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    acda:	4a0b      	ldr	r2, [pc, #44]	; (ad08 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    acdc:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    acde:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    ace2:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    ace6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    acea:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    acec:	4638      	mov	r0, r7
    acee:	430b      	orrs	r3, r1
    acf0:	7013      	strb	r3, [r2, #0]
}
    acf2:	b005      	add	sp, #20
    acf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    acf8:	4638      	mov	r0, r7
}
    acfa:	b005      	add	sp, #20
    acfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad00:	1fffac80 	.word	0x1fffac80
    ad04:	1fffac94 	.word	0x1fffac94
    ad08:	00010ee8 	.word	0x00010ee8
    ad0c:	0000046d 	.word	0x0000046d

0000ad10 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    ad10:	4b03      	ldr	r3, [pc, #12]	; (ad20 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    ad12:	4a04      	ldr	r2, [pc, #16]	; (ad24 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    ad14:	60da      	str	r2, [r3, #12]
    ad16:	fb01 f100 	mul.w	r1, r1, r0
    ad1a:	6099      	str	r1, [r3, #8]
    ad1c:	4770      	bx	lr
    ad1e:	bf00      	nop
    ad20:	1fffac70 	.word	0x1fffac70
    ad24:	0000ac65 	.word	0x0000ac65

0000ad28 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad28:	4807      	ldr	r0, [pc, #28]	; (ad48 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    ad2a:	b082      	sub	sp, #8
    ad2c:	6803      	ldr	r3, [r0, #0]
    ad2e:	9301      	str	r3, [sp, #4]
	return ret;
    ad30:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    ad32:	4411      	add	r1, r2
    ad34:	e001      	b.n	ad3a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    ad36:	4299      	cmp	r1, r3
    ad38:	d304      	bcc.n	ad44 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad3a:	6803      	ldr	r3, [r0, #0]
    ad3c:	9300      	str	r3, [sp, #0]
	return ret;
    ad3e:	9b00      	ldr	r3, [sp, #0]
    ad40:	429a      	cmp	r2, r3
    ad42:	d9f8      	bls.n	ad36 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    ad44:	b002      	add	sp, #8
    ad46:	4770      	bx	lr
    ad48:	1ffface8 	.word	0x1ffface8

0000ad4c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    ad4c:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad4e:	4a10      	ldr	r2, [pc, #64]	; (ad90 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    ad50:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    ad52:	b9a1      	cbnz	r1, ad7e <VisualMicroDebug::outPacketStart(bool)+0x32>
    ad54:	6813      	ldr	r3, [r2, #0]
    ad56:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    ad58:	6841      	ldr	r1, [r0, #4]
	return ret;
    ad5a:	9b00      	ldr	r3, [sp, #0]
    ad5c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    ad5e:	2931      	cmp	r1, #49	; 0x31
    ad60:	d80d      	bhi.n	ad7e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad62:	6813      	ldr	r3, [r2, #0]
    ad64:	9302      	str	r3, [sp, #8]
	return ret;
    ad66:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    ad68:	f104 0332 	add.w	r3, r4, #50	; 0x32
    ad6c:	1a59      	subs	r1, r3, r1
    ad6e:	e001      	b.n	ad74 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    ad70:	4299      	cmp	r1, r3
    ad72:	d304      	bcc.n	ad7e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad74:	6813      	ldr	r3, [r2, #0]
    ad76:	9301      	str	r3, [sp, #4]
	return ret;
    ad78:	9b01      	ldr	r3, [sp, #4]
    ad7a:	429c      	cmp	r4, r3
    ad7c:	d9f8      	bls.n	ad70 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad7e:	6813      	ldr	r3, [r2, #0]
    ad80:	9303      	str	r3, [sp, #12]
	return ret;
    ad82:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    ad84:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    ad86:	2001      	movs	r0, #1
    ad88:	b005      	add	sp, #20
    ad8a:	bc10      	pop	{r4}
    ad8c:	4770      	bx	lr
    ad8e:	bf00      	nop
    ad90:	1ffface8 	.word	0x1ffface8

0000ad94 <VisualMicroDebug::outPacketEnd()>:
    ad94:	4770      	bx	lr
    ad96:	bf00      	nop

0000ad98 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    ad98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ad9c:	f000 bb1a 	b.w	b3d4 <delay>

0000ada0 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    ada0:	2300      	movs	r3, #0
    ada2:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    ada4:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    ada6:	b171      	cbz	r1, adc6 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ada8:	4807      	ldr	r0, [pc, #28]	; (adc8 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    adaa:	b082      	sub	sp, #8
    adac:	6803      	ldr	r3, [r0, #0]
    adae:	9301      	str	r3, [sp, #4]
	return ret;
    adb0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    adb2:	4411      	add	r1, r2
    adb4:	e001      	b.n	adba <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    adb6:	4299      	cmp	r1, r3
    adb8:	d304      	bcc.n	adc4 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    adba:	6803      	ldr	r3, [r0, #0]
    adbc:	9300      	str	r3, [sp, #0]
	return ret;
    adbe:	9b00      	ldr	r3, [sp, #0]
    adc0:	429a      	cmp	r2, r3
    adc2:	d9f8      	bls.n	adb6 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    adc4:	b002      	add	sp, #8
    adc6:	4770      	bx	lr
    adc8:	1ffface8 	.word	0x1ffface8

0000adcc <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    adcc:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    adce:	4c13      	ldr	r4, [pc, #76]	; (ae1c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    add0:	b085      	sub	sp, #20
    add2:	6823      	ldr	r3, [r4, #0]
    add4:	9303      	str	r3, [sp, #12]
	return ret;
    add6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    add8:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    adda:	460d      	mov	r5, r1
    addc:	4810      	ldr	r0, [pc, #64]	; (ae20 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    adde:	2106      	movs	r1, #6
    ade0:	f001 fb10 	bl	c404 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    ade4:	2300      	movs	r3, #0
    ade6:	220a      	movs	r2, #10
    ade8:	4629      	mov	r1, r5
    adea:	480e      	ldr	r0, [pc, #56]	; (ae24 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    adec:	f001 fd1e 	bl	c82c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    adf0:	2106      	movs	r1, #6
    adf2:	480d      	ldr	r0, [pc, #52]	; (ae28 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    adf4:	f001 fb06 	bl	c404 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    adf8:	480a      	ldr	r0, [pc, #40]	; (ae24 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    adfa:	f001 fd07 	bl	c80c <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    adfe:	6823      	ldr	r3, [r4, #0]
    ae00:	9302      	str	r3, [sp, #8]
	return ret;
    ae02:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    ae04:	f102 0132 	add.w	r1, r2, #50	; 0x32
    ae08:	e001      	b.n	ae0e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    ae0a:	4299      	cmp	r1, r3
    ae0c:	d304      	bcc.n	ae18 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ae0e:	6823      	ldr	r3, [r4, #0]
    ae10:	9301      	str	r3, [sp, #4]
	return ret;
    ae12:	9b01      	ldr	r3, [sp, #4]
    ae14:	429a      	cmp	r2, r3
    ae16:	d9f8      	bls.n	ae0a <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    ae18:	b005      	add	sp, #20
    ae1a:	bd30      	pop	{r4, r5, pc}
    ae1c:	1ffface8 	.word	0x1ffface8
    ae20:	00010e64 	.word	0x00010e64
    ae24:	1fff878c 	.word	0x1fff878c
    ae28:	00010e6c 	.word	0x00010e6c

0000ae2c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    ae2c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    ae2e:	7e03      	ldrb	r3, [r0, #24]
    ae30:	b90b      	cbnz	r3, ae36 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    ae32:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    ae34:	bd38      	pop	{r3, r4, r5, pc}
    ae36:	460d      	mov	r5, r1
    ae38:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ae3a:	f001 fab9 	bl	c3b0 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    ae3e:	f010 0fff 	tst.w	r0, #255	; 0xff
    ae42:	d101      	bne.n	ae48 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    ae44:	2065      	movs	r0, #101	; 0x65
    ae46:	bd38      	pop	{r3, r4, r5, pc}
    ae48:	f001 fab2 	bl	c3b0 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    ae4c:	f010 0fff 	tst.w	r0, #255	; 0xff
    ae50:	d0f8      	beq.n	ae44 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    ae52:	f001 fa71 	bl	c338 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    ae56:	b2c0      	uxtb	r0, r0
    ae58:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    ae5c:	2b1e      	cmp	r3, #30
    ae5e:	d8f3      	bhi.n	ae48 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    ae60:	a201      	add	r2, pc, #4	; (adr r2, ae68 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ae66:	bf00      	nop
    ae68:	0000aef1 	.word	0x0000aef1
    ae6c:	0000ae49 	.word	0x0000ae49
    ae70:	0000ae49 	.word	0x0000ae49
    ae74:	0000ae49 	.word	0x0000ae49
    ae78:	0000ae49 	.word	0x0000ae49
    ae7c:	0000ae49 	.word	0x0000ae49
    ae80:	0000ae49 	.word	0x0000ae49
    ae84:	0000ae49 	.word	0x0000ae49
    ae88:	0000ae49 	.word	0x0000ae49
    ae8c:	0000ae49 	.word	0x0000ae49
    ae90:	0000ae49 	.word	0x0000ae49
    ae94:	0000aee5 	.word	0x0000aee5
    ae98:	0000ae49 	.word	0x0000ae49
    ae9c:	0000ae49 	.word	0x0000ae49
    aea0:	0000ae49 	.word	0x0000ae49
    aea4:	0000ae49 	.word	0x0000ae49
    aea8:	0000ae33 	.word	0x0000ae33
    aeac:	0000ae49 	.word	0x0000ae49
    aeb0:	0000ae49 	.word	0x0000ae49
    aeb4:	0000ae49 	.word	0x0000ae49
    aeb8:	0000ae49 	.word	0x0000ae49
    aebc:	0000ae49 	.word	0x0000ae49
    aec0:	0000ae49 	.word	0x0000ae49
    aec4:	0000ae49 	.word	0x0000ae49
    aec8:	0000ae49 	.word	0x0000ae49
    aecc:	0000ae33 	.word	0x0000ae33
    aed0:	0000ae49 	.word	0x0000ae49
    aed4:	0000ae49 	.word	0x0000ae49
    aed8:	0000ae49 	.word	0x0000ae49
    aedc:	0000ae49 	.word	0x0000ae49
    aee0:	0000ae35 	.word	0x0000ae35
		{

		case 'c':
			sendContinuedACK(breakPointId);
    aee4:	4620      	mov	r0, r4
    aee6:	4629      	mov	r1, r5
    aee8:	f7ff ff70 	bl	adcc <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    aeec:	2063      	movs	r0, #99	; 0x63
    aeee:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    aef0:	2300      	movs	r3, #0
    aef2:	7623      	strb	r3, [r4, #24]
			return 'c';
    aef4:	2063      	movs	r0, #99	; 0x63
    aef6:	bd38      	pop	{r3, r4, r5, pc}

0000aef8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    aef8:	b570      	push	{r4, r5, r6, lr}
    aefa:	4605      	mov	r5, r0
    aefc:	b082      	sub	sp, #8
    aefe:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    af00:	b1c9      	cbz	r1, af36 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    af02:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af04:	4c0d      	ldr	r4, [pc, #52]	; (af3c <VisualMicroDebug::start(bool, bool)+0x44>)
    af06:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    af08:	2100      	movs	r1, #0
    af0a:	4628      	mov	r0, r5
    af0c:	f7ff ff8e 	bl	ae2c <VisualMicroDebug::breakWait(unsigned char)>
    af10:	2863      	cmp	r0, #99	; 0x63
    af12:	d010      	beq.n	af36 <VisualMicroDebug::start(bool, bool)+0x3e>
    af14:	6823      	ldr	r3, [r4, #0]
    af16:	9301      	str	r3, [sp, #4]
	return ret;
    af18:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    af1a:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af1c:	6823      	ldr	r3, [r4, #0]
    af1e:	9300      	str	r3, [sp, #0]
	return ret;
    af20:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    af22:	429a      	cmp	r2, r3
    af24:	d8f0      	bhi.n	af08 <VisualMicroDebug::start(bool, bool)+0x10>
    af26:	4299      	cmp	r1, r3
    af28:	d2f8      	bcs.n	af1c <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    af2a:	2100      	movs	r1, #0
    af2c:	4628      	mov	r0, r5
    af2e:	f7ff ff7d 	bl	ae2c <VisualMicroDebug::breakWait(unsigned char)>
    af32:	2863      	cmp	r0, #99	; 0x63
    af34:	d1ee      	bne.n	af14 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    af36:	762e      	strb	r6, [r5, #24]
#endif

}
    af38:	b002      	add	sp, #8
    af3a:	bd70      	pop	{r4, r5, r6, pc}
    af3c:	1ffface8 	.word	0x1ffface8

0000af40 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    af40:	4b03      	ldr	r3, [pc, #12]	; (af50 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    af42:	2200      	movs	r2, #0
    af44:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    af46:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    af48:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    af4a:	615a      	str	r2, [r3, #20]
    af4c:	4770      	bx	lr
    af4e:	bf00      	nop
    af50:	1fffac98 	.word	0x1fffac98

0000af54 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    af54:	4a37      	ldr	r2, [pc, #220]	; (b034 <wait_for_cal+0xe0>)
    af56:	4938      	ldr	r1, [pc, #224]	; (b038 <wait_for_cal+0xe4>)
    af58:	6813      	ldr	r3, [r2, #0]
    af5a:	061b      	lsls	r3, r3, #24
    af5c:	d4fc      	bmi.n	af58 <wait_for_cal+0x4>
    af5e:	680b      	ldr	r3, [r1, #0]
    af60:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    af64:	d1f8      	bne.n	af58 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    af66:	b672      	cpsid	i
	if (calibrating) {
    af68:	4934      	ldr	r1, [pc, #208]	; (b03c <wait_for_cal+0xe8>)
    af6a:	780a      	ldrb	r2, [r1, #0]
    af6c:	2a00      	cmp	r2, #0
    af6e:	d05f      	beq.n	b030 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    af70:	4a33      	ldr	r2, [pc, #204]	; (b040 <wait_for_cal+0xec>)
    af72:	4834      	ldr	r0, [pc, #208]	; (b044 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    af74:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    af76:	4c34      	ldr	r4, [pc, #208]	; (b048 <wait_for_cal+0xf4>)
    af78:	6817      	ldr	r7, [r2, #0]
    af7a:	6806      	ldr	r6, [r0, #0]
    af7c:	6825      	ldr	r5, [r4, #0]
    af7e:	68d4      	ldr	r4, [r2, #12]
    af80:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    af82:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    af84:	3214      	adds	r2, #20
    af86:	6800      	ldr	r0, [r0, #0]
    af88:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    af8a:	4f30      	ldr	r7, [pc, #192]	; (b04c <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    af8c:	4435      	add	r5, r6
    af8e:	442c      	add	r4, r5
    af90:	4420      	add	r0, r4
    af92:	4402      	add	r2, r0
    af94:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    af98:	4e2d      	ldr	r6, [pc, #180]	; (b050 <wait_for_cal+0xfc>)
    af9a:	482e      	ldr	r0, [pc, #184]	; (b054 <wait_for_cal+0x100>)
    af9c:	4d2e      	ldr	r5, [pc, #184]	; (b058 <wait_for_cal+0x104>)
    af9e:	4c2f      	ldr	r4, [pc, #188]	; (b05c <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    afa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    afa4:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    afa6:	6837      	ldr	r7, [r6, #0]
    afa8:	6806      	ldr	r6, [r0, #0]
    afaa:	682d      	ldr	r5, [r5, #0]
    afac:	4a2c      	ldr	r2, [pc, #176]	; (b060 <wait_for_cal+0x10c>)
    afae:	6824      	ldr	r4, [r4, #0]
    afb0:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    afb2:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    afb4:	6800      	ldr	r0, [r0, #0]
    afb6:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    afb8:	4f2a      	ldr	r7, [pc, #168]	; (b064 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    afba:	4435      	add	r5, r6
    afbc:	442c      	add	r4, r5
    afbe:	4420      	add	r0, r4
    afc0:	4402      	add	r2, r0
    afc2:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    afc6:	4e28      	ldr	r6, [pc, #160]	; (b068 <wait_for_cal+0x114>)
    afc8:	4828      	ldr	r0, [pc, #160]	; (b06c <wait_for_cal+0x118>)
    afca:	4d29      	ldr	r5, [pc, #164]	; (b070 <wait_for_cal+0x11c>)
    afcc:	4c29      	ldr	r4, [pc, #164]	; (b074 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    afce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    afd2:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    afd4:	6837      	ldr	r7, [r6, #0]
    afd6:	6806      	ldr	r6, [r0, #0]
    afd8:	682d      	ldr	r5, [r5, #0]
    afda:	4a27      	ldr	r2, [pc, #156]	; (b078 <wait_for_cal+0x124>)
    afdc:	6824      	ldr	r4, [r4, #0]
    afde:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    afe0:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    afe2:	6800      	ldr	r0, [r0, #0]
    afe4:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    afe6:	4f25      	ldr	r7, [pc, #148]	; (b07c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    afe8:	4435      	add	r5, r6
    afea:	442c      	add	r4, r5
    afec:	4420      	add	r0, r4
    afee:	4402      	add	r2, r0
    aff0:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    aff4:	4e22      	ldr	r6, [pc, #136]	; (b080 <wait_for_cal+0x12c>)
    aff6:	4823      	ldr	r0, [pc, #140]	; (b084 <wait_for_cal+0x130>)
    aff8:	4d23      	ldr	r5, [pc, #140]	; (b088 <wait_for_cal+0x134>)
    affa:	4c24      	ldr	r4, [pc, #144]	; (b08c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    affc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b000:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    b002:	6837      	ldr	r7, [r6, #0]
    b004:	6806      	ldr	r6, [r0, #0]
    b006:	682d      	ldr	r5, [r5, #0]
    b008:	4a21      	ldr	r2, [pc, #132]	; (b090 <wait_for_cal+0x13c>)
    b00a:	6824      	ldr	r4, [r4, #0]
    b00c:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    b00e:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    b010:	6800      	ldr	r0, [r0, #0]
    b012:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    b014:	4435      	add	r5, r6
    b016:	442c      	add	r4, r5
    b018:	4420      	add	r0, r4
    b01a:	4402      	add	r2, r0
    b01c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    b020:	481c      	ldr	r0, [pc, #112]	; (b094 <wait_for_cal+0x140>)
    b022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b026:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    b028:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    b02a:	b662      	cpsie	i
}
    b02c:	bcf0      	pop	{r4, r5, r6, r7}
    b02e:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    b030:	b662      	cpsie	i
    b032:	4770      	bx	lr
    b034:	4003b024 	.word	0x4003b024
    b038:	400bb024 	.word	0x400bb024
    b03c:	1ffface1 	.word	0x1ffface1
    b040:	4003b038 	.word	0x4003b038
    b044:	4003b03c 	.word	0x4003b03c
    b048:	4003b040 	.word	0x4003b040
    b04c:	4003b02c 	.word	0x4003b02c
    b050:	4003b058 	.word	0x4003b058
    b054:	4003b05c 	.word	0x4003b05c
    b058:	4003b060 	.word	0x4003b060
    b05c:	4003b064 	.word	0x4003b064
    b060:	4003b06c 	.word	0x4003b06c
    b064:	4003b030 	.word	0x4003b030
    b068:	400bb038 	.word	0x400bb038
    b06c:	400bb03c 	.word	0x400bb03c
    b070:	400bb040 	.word	0x400bb040
    b074:	400bb044 	.word	0x400bb044
    b078:	400bb04c 	.word	0x400bb04c
    b07c:	400bb02c 	.word	0x400bb02c
    b080:	400bb058 	.word	0x400bb058
    b084:	400bb05c 	.word	0x400bb05c
    b088:	400bb060 	.word	0x400bb060
    b08c:	400bb064 	.word	0x400bb064
    b090:	400bb06c 	.word	0x400bb06c
    b094:	400bb030 	.word	0x400bb030

0000b098 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    b098:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b09a:	4829      	ldr	r0, [pc, #164]	; (b140 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b09c:	4a29      	ldr	r2, [pc, #164]	; (b144 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    b09e:	4b2a      	ldr	r3, [pc, #168]	; (b148 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b0a0:	4d2a      	ldr	r5, [pc, #168]	; (b14c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b0a2:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b0a4:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b0a6:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b0a8:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    b0aa:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b0ac:	4c28      	ldr	r4, [pc, #160]	; (b150 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    b0ae:	2b08      	cmp	r3, #8
    b0b0:	d030      	beq.n	b114 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b0b2:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b0b4:	4827      	ldr	r0, [pc, #156]	; (b154 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b0b6:	4928      	ldr	r1, [pc, #160]	; (b158 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b0b8:	d037      	beq.n	b12a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    b0ba:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    b0bc:	bf0c      	ite	eq
    b0be:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b0c0:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b0c2:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b0c4:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b0c6:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b0c8:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b0ca:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b0cc:	4b23      	ldr	r3, [pc, #140]	; (b15c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0ce:	4924      	ldr	r1, [pc, #144]	; (b160 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b0d0:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0d2:	4a24      	ldr	r2, [pc, #144]	; (b164 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b0d4:	b1bb      	cbz	r3, b106 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0d6:	2301      	movs	r3, #1
    b0d8:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b0da:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b0dc:	4b22      	ldr	r3, [pc, #136]	; (b168 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b0de:	4923      	ldr	r1, [pc, #140]	; (b16c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b0e0:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b0e2:	4a23      	ldr	r2, [pc, #140]	; (b170 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    b0e4:	2b01      	cmp	r3, #1
    b0e6:	d926      	bls.n	b136 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    b0e8:	2b04      	cmp	r3, #4
    b0ea:	d90f      	bls.n	b10c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    b0ec:	2b08      	cmp	r3, #8
    b0ee:	d91e      	bls.n	b12e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    b0f0:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    b0f2:	bf94      	ite	ls
    b0f4:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b0f6:	2387      	movhi	r3, #135	; 0x87
    b0f8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b0fa:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    b0fc:	4b1d      	ldr	r3, [pc, #116]	; (b174 <analog_init+0xdc>)
    b0fe:	2201      	movs	r2, #1
    b100:	701a      	strb	r2, [r3, #0]
}
    b102:	bc30      	pop	{r4, r5}
    b104:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b106:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b108:	6013      	str	r3, [r2, #0]
    b10a:	e7e7      	b.n	b0dc <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b10c:	2384      	movs	r3, #132	; 0x84
    b10e:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b110:	6013      	str	r3, [r2, #0]
    b112:	e7f3      	b.n	b0fc <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b114:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b118:	490f      	ldr	r1, [pc, #60]	; (b158 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b11a:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b11c:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b11e:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b120:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b122:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b124:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b126:	600b      	str	r3, [r1, #0]
    b128:	e7d0      	b.n	b0cc <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b12a:	2239      	movs	r2, #57	; 0x39
    b12c:	e7f7      	b.n	b11e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b12e:	2385      	movs	r3, #133	; 0x85
    b130:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b132:	6013      	str	r3, [r2, #0]
    b134:	e7e2      	b.n	b0fc <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b136:	2380      	movs	r3, #128	; 0x80
    b138:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b13a:	6013      	str	r3, [r2, #0]
    b13c:	e7de      	b.n	b0fc <analog_init+0x64>
    b13e:	bf00      	nop
    b140:	40074000 	.word	0x40074000
    b144:	40074001 	.word	0x40074001
    b148:	1fff8786 	.word	0x1fff8786
    b14c:	4003b008 	.word	0x4003b008
    b150:	4003b00c 	.word	0x4003b00c
    b154:	400bb008 	.word	0x400bb008
    b158:	400bb00c 	.word	0x400bb00c
    b15c:	1ffface4 	.word	0x1ffface4
    b160:	4003b020 	.word	0x4003b020
    b164:	400bb020 	.word	0x400bb020
    b168:	1fff8787 	.word	0x1fff8787
    b16c:	4003b024 	.word	0x4003b024
    b170:	400bb024 	.word	0x400bb024
    b174:	1ffface1 	.word	0x1ffface1

0000b178 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    b178:	2828      	cmp	r0, #40	; 0x28
    b17a:	d82f      	bhi.n	b1dc <analogRead+0x64>
	channel = pin2sc1a[pin];
    b17c:	4b33      	ldr	r3, [pc, #204]	; (b24c <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    b17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    b182:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    b184:	2eff      	cmp	r6, #255	; 0xff
    b186:	d02b      	beq.n	b1e0 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    b188:	4b31      	ldr	r3, [pc, #196]	; (b250 <analogRead+0xd8>)
    b18a:	781b      	ldrb	r3, [r3, #0]
    b18c:	2b00      	cmp	r3, #0
    b18e:	d12a      	bne.n	b1e6 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    b190:	0632      	lsls	r2, r6, #24
    b192:	d42c      	bmi.n	b1ee <analogRead+0x76>
#endif

	__disable_irq();
    b194:	b672      	cpsid	i
    b196:	4d2f      	ldr	r5, [pc, #188]	; (b254 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    b198:	4c2f      	ldr	r4, [pc, #188]	; (b258 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    b19a:	462f      	mov	r7, r5
    b19c:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    b19e:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    b1a0:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    b1a2:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    b1a4:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    b1a6:	6823      	ldr	r3, [r4, #0]
    b1a8:	061b      	lsls	r3, r3, #24
    b1aa:	d40c      	bmi.n	b1c6 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    b1ac:	783b      	ldrb	r3, [r7, #0]
    b1ae:	b91b      	cbnz	r3, b1b8 <analogRead+0x40>
    b1b0:	e7f4      	b.n	b19c <analogRead+0x24>
    b1b2:	782b      	ldrb	r3, [r5, #0]
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d0f1      	beq.n	b19c <analogRead+0x24>
		__enable_irq();
    b1b8:	b662      	cpsie	i
		yield();
    b1ba:	f001 fbfd 	bl	c9b8 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    b1be:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    b1c0:	6823      	ldr	r3, [r4, #0]
    b1c2:	0618      	lsls	r0, r3, #24
    b1c4:	d5f5      	bpl.n	b1b2 <analogRead+0x3a>
			result = ADC0_RA;
    b1c6:	4b25      	ldr	r3, [pc, #148]	; (b25c <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    b1c8:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    b1ca:	2200      	movs	r2, #0
    b1cc:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    b1ce:	b662      	cpsie	i
			result >>= analog_right_shift;
    b1d0:	4a23      	ldr	r2, [pc, #140]	; (b260 <analogRead+0xe8>)
    b1d2:	7810      	ldrb	r0, [r2, #0]
    b1d4:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    b1dc:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    b1de:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    b1e0:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    b1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    b1e6:	f7ff feb5 	bl	af54 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    b1ea:	0632      	lsls	r2, r6, #24
    b1ec:	d5d2      	bpl.n	b194 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    b1ee:	b672      	cpsid	i
    b1f0:	4d1c      	ldr	r5, [pc, #112]	; (b264 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    b1f2:	f8df 807c 	ldr.w	r8, [pc, #124]	; b270 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    b1f6:	4c1c      	ldr	r4, [pc, #112]	; (b268 <analogRead+0xf0>)
    b1f8:	f006 0740 	and.w	r7, r6, #64	; 0x40
    b1fc:	b2ff      	uxtb	r7, r7
    b1fe:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    b202:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    b206:	b1df      	cbz	r7, b240 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    b208:	f023 0310 	bic.w	r3, r3, #16
    b20c:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    b210:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    b212:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    b214:	4a13      	ldr	r2, [pc, #76]	; (b264 <analogRead+0xec>)
    b216:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    b218:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    b21a:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    b21c:	6823      	ldr	r3, [r4, #0]
    b21e:	0619      	lsls	r1, r3, #24
    b220:	d40c      	bmi.n	b23c <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    b222:	7813      	ldrb	r3, [r2, #0]
    b224:	b91b      	cbnz	r3, b22e <analogRead+0xb6>
    b226:	e7ec      	b.n	b202 <analogRead+0x8a>
    b228:	782b      	ldrb	r3, [r5, #0]
    b22a:	2b00      	cmp	r3, #0
    b22c:	d0e9      	beq.n	b202 <analogRead+0x8a>
		__enable_irq();
    b22e:	b662      	cpsie	i
		yield();
    b230:	f001 fbc2 	bl	c9b8 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    b234:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    b236:	6823      	ldr	r3, [r4, #0]
    b238:	061b      	lsls	r3, r3, #24
    b23a:	d5f5      	bpl.n	b228 <analogRead+0xb0>
			result = ADC1_RA;
    b23c:	4b0b      	ldr	r3, [pc, #44]	; (b26c <analogRead+0xf4>)
    b23e:	e7c3      	b.n	b1c8 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    b240:	f043 0310 	orr.w	r3, r3, #16
    b244:	f8c8 3000 	str.w	r3, [r8]
    b248:	e7e2      	b.n	b210 <analogRead+0x98>
    b24a:	bf00      	nop
    b24c:	00010ebc 	.word	0x00010ebc
    b250:	1ffface1 	.word	0x1ffface1
    b254:	1ffface3 	.word	0x1ffface3
    b258:	4003b000 	.word	0x4003b000
    b25c:	4003b010 	.word	0x4003b010
    b260:	1ffface0 	.word	0x1ffface0
    b264:	1ffface2 	.word	0x1ffface2
    b268:	400bb000 	.word	0x400bb000
    b26c:	400bb010 	.word	0x400bb010
    b270:	400bb00c 	.word	0x400bb00c

0000b274 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    b274:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    b276:	4c10      	ldr	r4, [pc, #64]	; (b2b8 <fault_isr+0x44>)
    b278:	e008      	b.n	b28c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    b27a:	6823      	ldr	r3, [r4, #0]
    b27c:	0559      	lsls	r1, r3, #21
    b27e:	d40d      	bmi.n	b29c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    b280:	6823      	ldr	r3, [r4, #0]
    b282:	051a      	lsls	r2, r3, #20
    b284:	d40f      	bmi.n	b2a6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    b286:	6823      	ldr	r3, [r4, #0]
    b288:	04db      	lsls	r3, r3, #19
    b28a:	d411      	bmi.n	b2b0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    b28c:	6823      	ldr	r3, [r4, #0]
    b28e:	0358      	lsls	r0, r3, #13
    b290:	d5f3      	bpl.n	b27a <fault_isr+0x6>
    b292:	f000 fa37 	bl	b704 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    b296:	6823      	ldr	r3, [r4, #0]
    b298:	0559      	lsls	r1, r3, #21
    b29a:	d5f1      	bpl.n	b280 <fault_isr+0xc>
    b29c:	f001 fc10 	bl	cac0 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    b2a0:	6823      	ldr	r3, [r4, #0]
    b2a2:	051a      	lsls	r2, r3, #20
    b2a4:	d5ef      	bpl.n	b286 <fault_isr+0x12>
    b2a6:	f001 fca1 	bl	cbec <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    b2aa:	6823      	ldr	r3, [r4, #0]
    b2ac:	04db      	lsls	r3, r3, #19
    b2ae:	d5ed      	bpl.n	b28c <fault_isr+0x18>
    b2b0:	f001 fd32 	bl	cd18 <uart2_status_isr>
    b2b4:	e7ea      	b.n	b28c <fault_isr+0x18>
    b2b6:	bf00      	nop
    b2b8:	40048034 	.word	0x40048034

0000b2bc <unused_isr>:
	}
}

void unused_isr(void)
{
    b2bc:	b508      	push	{r3, lr}
	fault_isr();
    b2be:	f7ff ffd9 	bl	b274 <fault_isr>
    b2c2:	bf00      	nop

0000b2c4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    b2c4:	4b01      	ldr	r3, [pc, #4]	; (b2cc <startup_early_hook+0x8>)
    b2c6:	2210      	movs	r2, #16
    b2c8:	801a      	strh	r2, [r3, #0]
    b2ca:	4770      	bx	lr
    b2cc:	40052000 	.word	0x40052000

0000b2d0 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    b2d0:	4770      	bx	lr
    b2d2:	bf00      	nop

0000b2d4 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    b2d4:	7800      	ldrb	r0, [r0, #0]
}
    b2d6:	fab0 f080 	clz	r0, r0
    b2da:	0940      	lsrs	r0, r0, #5
    b2dc:	4770      	bx	lr
    b2de:	bf00      	nop

0000b2e0 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    b2e0:	2301      	movs	r3, #1
    b2e2:	7003      	strb	r3, [r0, #0]
    b2e4:	4770      	bx	lr
    b2e6:	bf00      	nop

0000b2e8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    b2e8:	4a1c      	ldr	r2, [pc, #112]	; (b35c <pinMode.part.2+0x74>)
    b2ea:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b2ee:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    b2f0:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b2f2:	d011      	beq.n	b318 <pinMode.part.2+0x30>
    b2f4:	2904      	cmp	r1, #4
    b2f6:	d01b      	beq.n	b330 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    b2f8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    b2fc:	2200      	movs	r2, #0
    b2fe:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    b302:	b129      	cbz	r1, b310 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    b304:	2902      	cmp	r1, #2
    b306:	d020      	beq.n	b34a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    b308:	2903      	cmp	r1, #3
    b30a:	d022      	beq.n	b352 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    b30c:	601a      	str	r2, [r3, #0]
    b30e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    b310:	f44f 7280 	mov.w	r2, #256	; 0x100
    b314:	601a      	str	r2, [r3, #0]
    b316:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b318:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b31c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b320:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b324:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    b326:	681a      	ldr	r2, [r3, #0]
    b328:	f022 0220 	bic.w	r2, r2, #32
    b32c:	601a      	str	r2, [r3, #0]
    b32e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b330:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b334:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b338:	2001      	movs	r0, #1
    b33a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b33e:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    b340:	681a      	ldr	r2, [r3, #0]
    b342:	f042 0220 	orr.w	r2, r2, #32
    b346:	601a      	str	r2, [r3, #0]
    b348:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    b34a:	f240 1203 	movw	r2, #259	; 0x103
    b34e:	601a      	str	r2, [r3, #0]
    b350:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    b352:	f44f 7281 	mov.w	r2, #258	; 0x102
    b356:	601a      	str	r2, [r3, #0]
    b358:	4770      	bx	lr
    b35a:	bf00      	nop
    b35c:	00010ee8 	.word	0x00010ee8

0000b360 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    b360:	b430      	push	{r4, r5}
	RTC_SR = 0;
    b362:	4b05      	ldr	r3, [pc, #20]	; (b378 <rtc_set+0x18>)
	RTC_TPR = 0;
    b364:	4d05      	ldr	r5, [pc, #20]	; (b37c <rtc_set+0x1c>)
	RTC_TSR = t;
    b366:	4c06      	ldr	r4, [pc, #24]	; (b380 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    b368:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    b36a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    b36c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    b36e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    b370:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    b372:	6019      	str	r1, [r3, #0]
}
    b374:	bc30      	pop	{r4, r5}
    b376:	4770      	bx	lr
    b378:	4003d014 	.word	0x4003d014
    b37c:	4003d004 	.word	0x4003d004
    b380:	4003d000 	.word	0x4003d000

0000b384 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    b384:	2821      	cmp	r0, #33	; 0x21
    b386:	d801      	bhi.n	b38c <pinMode+0x8>
    b388:	f7ff bfae 	b.w	b2e8 <pinMode.part.2>
    b38c:	4770      	bx	lr
    b38e:	bf00      	nop

0000b390 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b390:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b392:	490c      	ldr	r1, [pc, #48]	; (b3c4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b394:	4b0c      	ldr	r3, [pc, #48]	; (b3c8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b396:	4a0d      	ldr	r2, [pc, #52]	; (b3cc <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b398:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    b39a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b39c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    b39e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b3a0:	0152      	lsls	r2, r2, #5
    b3a2:	d502      	bpl.n	b3aa <micros+0x1a>
    b3a4:	2b32      	cmp	r3, #50	; 0x32
    b3a6:	bf88      	it	hi
    b3a8:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b3aa:	4909      	ldr	r1, [pc, #36]	; (b3d0 <micros+0x40>)
    b3ac:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    b3b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b3b4:	33ff      	adds	r3, #255	; 0xff
    b3b6:	fba1 1303 	umull	r1, r3, r1, r3
    b3ba:	fb02 f000 	mul.w	r0, r2, r0
}
    b3be:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    b3c2:	4770      	bx	lr
    b3c4:	1ffface8 	.word	0x1ffface8
    b3c8:	e000e018 	.word	0xe000e018
    b3cc:	e000ed04 	.word	0xe000ed04
    b3d0:	aaaaaaab 	.word	0xaaaaaaab

0000b3d4 <delay>:

void delay(uint32_t ms)
{
    b3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b3d8:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b3da:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b3dc:	4f20      	ldr	r7, [pc, #128]	; (b460 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b3de:	4b21      	ldr	r3, [pc, #132]	; (b464 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b3e0:	4a21      	ldr	r2, [pc, #132]	; (b468 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b3e2:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    b3e4:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b3e6:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    b3e8:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b3ea:	0152      	lsls	r2, r2, #5
    b3ec:	d502      	bpl.n	b3f4 <delay+0x20>
    b3ee:	2b32      	cmp	r3, #50	; 0x32
    b3f0:	bf88      	it	hi
    b3f2:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    b3f4:	b395      	cbz	r5, b45c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b3f6:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    b3fa:	4e1c      	ldr	r6, [pc, #112]	; (b46c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b3fc:	f8df 9064 	ldr.w	r9, [pc, #100]	; b464 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b400:	f8df 8064 	ldr.w	r8, [pc, #100]	; b468 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b404:	33ff      	adds	r3, #255	; 0xff
    b406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b40a:	fba6 1303 	umull	r1, r3, r6, r3
    b40e:	fb02 f404 	mul.w	r4, r2, r4
    b412:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b416:	b672      	cpsid	i
	current = SYST_CVR;
    b418:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    b41c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b41e:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    b422:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    b424:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    b428:	33ff      	adds	r3, #255	; 0xff
    b42a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b42e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    b432:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    b436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b43a:	d002      	beq.n	b442 <delay+0x6e>
    b43c:	2932      	cmp	r1, #50	; 0x32
    b43e:	bf88      	it	hi
    b440:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    b442:	fb00 3302 	mla	r3, r0, r2, r3
    b446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    b44a:	d304      	bcc.n	b456 <delay+0x82>
				ms--;
				if (ms == 0) return;
    b44c:	3d01      	subs	r5, #1
    b44e:	d005      	beq.n	b45c <delay+0x88>
				start += 1000;
    b450:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    b454:	e7df      	b.n	b416 <delay+0x42>
			}
			yield();
    b456:	f001 faaf 	bl	c9b8 <yield>
		}
    b45a:	e7dc      	b.n	b416 <delay+0x42>
    b45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b460:	1ffface8 	.word	0x1ffface8
    b464:	e000e018 	.word	0xe000e018
    b468:	e000ed04 	.word	0xe000ed04
    b46c:	aaaaaaab 	.word	0xaaaaaaab

0000b470 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    b472:	4b2d      	ldr	r3, [pc, #180]	; (b528 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    b474:	492d      	ldr	r1, [pc, #180]	; (b52c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    b476:	f8df e0d0 	ldr.w	lr, [pc, #208]	; b548 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    b47a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; b54c <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    b47e:	4e2c      	ldr	r6, [pc, #176]	; (b530 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    b480:	4d2c      	ldr	r5, [pc, #176]	; (b534 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    b482:	4c2d      	ldr	r4, [pc, #180]	; (b538 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    b484:	4a2d      	ldr	r2, [pc, #180]	; (b53c <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    b486:	4f2e      	ldr	r7, [pc, #184]	; (b540 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    b488:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b48c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    b48e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    b492:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    b494:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b498:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    b49a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    b49e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    b4a0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    b4a4:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    b4a6:	2000      	movs	r0, #0
    b4a8:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    b4aa:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    b4ac:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    b4b0:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    b4b4:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    b4b8:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    b4ba:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    b4bc:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    b4be:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    b4c0:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    b4c2:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    b4c4:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b4c6:	2209      	movs	r2, #9
    b4c8:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    b4cc:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    b4d0:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    b4d4:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    b4d8:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    b4dc:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    b4e0:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    b4e4:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    b4e6:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b4ea:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    b4ee:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    b4f2:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    b4f6:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    b4f8:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b4fc:	4811      	ldr	r0, [pc, #68]	; (b544 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    b4fe:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    b500:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    b504:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    b508:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    b50a:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    b50c:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    b50e:	f7ff fdc3 	bl	b098 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    b512:	2019      	movs	r0, #25
    b514:	f7ff ff5e 	bl	b3d4 <delay>
	usb_init();
    b518:	f000 fe5c 	bl	c1d4 <usb_init>
	delay(275);
    b51c:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    b520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    b524:	f7ff bf56 	b.w	b3d4 <delay>
    b528:	e000e108 	.word	0xe000e108
    b52c:	40038004 	.word	0x40038004
    b530:	40038014 	.word	0x40038014
    b534:	40038024 	.word	0x40038024
    b538:	4003802c 	.word	0x4003802c
    b53c:	4003801c 	.word	0x4003801c
    b540:	40038034 	.word	0x40038034
    b544:	400b8000 	.word	0x400b8000
    b548:	4003800c 	.word	0x4003800c
    b54c:	40038008 	.word	0x40038008

0000b550 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b550:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b552:	2b03      	cmp	r3, #3
    b554:	d814      	bhi.n	b580 <usb_rx+0x30>
	__disable_irq();
    b556:	b672      	cpsid	i
	ret = rx_first[endpoint];
    b558:	490a      	ldr	r1, [pc, #40]	; (b584 <usb_rx+0x34>)
    b55a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b55e:	b168      	cbz	r0, b57c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    b560:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b562:	4c09      	ldr	r4, [pc, #36]	; (b588 <usb_rx+0x38>)
    b564:	8805      	ldrh	r5, [r0, #0]
    b566:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    b56a:	6846      	ldr	r6, [r0, #4]
    b56c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b570:	1b52      	subs	r2, r2, r5
    b572:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b576:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b578:	bc70      	pop	{r4, r5, r6}
    b57a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    b57c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b57e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b580:	2000      	movs	r0, #0
    b582:	4770      	bx	lr
    b584:	1fffad44 	.word	0x1fffad44
    b588:	1fffaf94 	.word	0x1fffaf94

0000b58c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b58c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b58e:	2803      	cmp	r0, #3
    b590:	d80b      	bhi.n	b5aa <usb_tx_packet_count+0x1e>
	__disable_irq();
    b592:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b594:	4b07      	ldr	r3, [pc, #28]	; (b5b4 <usb_tx_packet_count+0x28>)
    b596:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    b59a:	b143      	cbz	r3, b5ae <usb_tx_packet_count+0x22>
    b59c:	2000      	movs	r0, #0
    b59e:	685b      	ldr	r3, [r3, #4]
    b5a0:	3001      	adds	r0, #1
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	d1fb      	bne.n	b59e <usb_tx_packet_count+0x12>
	__enable_irq();
    b5a6:	b662      	cpsie	i
	return count;
    b5a8:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b5aa:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    b5ac:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    b5ae:	4618      	mov	r0, r3
    b5b0:	e7f9      	b.n	b5a6 <usb_tx_packet_count+0x1a>
    b5b2:	bf00      	nop
    b5b4:	1fffad98 	.word	0x1fffad98

0000b5b8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b5b8:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b5ba:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b5bc:	4a2b      	ldr	r2, [pc, #172]	; (b66c <usb_rx_memory+0xb4>)
    b5be:	7813      	ldrb	r3, [r2, #0]
    b5c0:	071d      	lsls	r5, r3, #28
    b5c2:	d506      	bpl.n	b5d2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b5c4:	4b2a      	ldr	r3, [pc, #168]	; (b670 <usb_rx_memory+0xb8>)
    b5c6:	6a19      	ldr	r1, [r3, #32]
    b5c8:	2900      	cmp	r1, #0
    b5ca:	d036      	beq.n	b63a <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b5cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b5ce:	2900      	cmp	r1, #0
    b5d0:	d041      	beq.n	b656 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b5d2:	7853      	ldrb	r3, [r2, #1]
    b5d4:	071c      	lsls	r4, r3, #28
    b5d6:	d506      	bpl.n	b5e6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b5d8:	4b25      	ldr	r3, [pc, #148]	; (b670 <usb_rx_memory+0xb8>)
    b5da:	6c19      	ldr	r1, [r3, #64]	; 0x40
    b5dc:	2900      	cmp	r1, #0
    b5de:	d03e      	beq.n	b65e <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b5e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    b5e2:	2900      	cmp	r1, #0
    b5e4:	d039      	beq.n	b65a <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b5e6:	7893      	ldrb	r3, [r2, #2]
    b5e8:	0719      	lsls	r1, r3, #28
    b5ea:	d505      	bpl.n	b5f8 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b5ec:	4b20      	ldr	r3, [pc, #128]	; (b670 <usb_rx_memory+0xb8>)
    b5ee:	6e19      	ldr	r1, [r3, #96]	; 0x60
    b5f0:	2900      	cmp	r1, #0
    b5f2:	d036      	beq.n	b662 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b5f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
    b5f6:	b189      	cbz	r1, b61c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b5f8:	78d3      	ldrb	r3, [r2, #3]
    b5fa:	071b      	lsls	r3, r3, #28
    b5fc:	d507      	bpl.n	b60e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b5fe:	4b1c      	ldr	r3, [pc, #112]	; (b670 <usb_rx_memory+0xb8>)
    b600:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b604:	b37a      	cbz	r2, b666 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b606:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b60a:	2111      	movs	r1, #17
    b60c:	b13a      	cbz	r2, b61e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b60e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b610:	4b18      	ldr	r3, [pc, #96]	; (b674 <usb_rx_memory+0xbc>)
    b612:	2200      	movs	r2, #0
    b614:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b616:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    b618:	f000 be68 	b.w	c2ec <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b61c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    b61e:	4c15      	ldr	r4, [pc, #84]	; (b674 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b620:	4d15      	ldr	r5, [pc, #84]	; (b678 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    b622:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b624:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    b628:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    b62c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    b62e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    b630:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    b632:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    b634:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    b636:	bc30      	pop	{r4, r5}
    b638:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b63a:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    b63c:	4c0d      	ldr	r4, [pc, #52]	; (b674 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b63e:	4d0f      	ldr	r5, [pc, #60]	; (b67c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    b640:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b642:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    b646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b64a:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    b64c:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    b64e:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    b650:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    b652:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    b654:	e7ef      	b.n	b636 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b656:	2105      	movs	r1, #5
    b658:	e7e1      	b.n	b61e <usb_rx_memory+0x66>
    b65a:	2109      	movs	r1, #9
    b65c:	e7df      	b.n	b61e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b65e:	2208      	movs	r2, #8
    b660:	e7ec      	b.n	b63c <usb_rx_memory+0x84>
    b662:	220c      	movs	r2, #12
    b664:	e7ea      	b.n	b63c <usb_rx_memory+0x84>
    b666:	2210      	movs	r2, #16
    b668:	e7e8      	b.n	b63c <usb_rx_memory+0x84>
    b66a:	bf00      	nop
    b66c:	00011024 	.word	0x00011024
    b670:	1fff8000 	.word	0x1fff8000
    b674:	1fffadc1 	.word	0x1fffadc1
    b678:	004000c8 	.word	0x004000c8
    b67c:	00400088 	.word	0x00400088

0000b680 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    b680:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    b682:	2b03      	cmp	r3, #3
    b684:	d81d      	bhi.n	b6c2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b686:	4a1b      	ldr	r2, [pc, #108]	; (b6f4 <usb_tx+0x74>)
    b688:	0140      	lsls	r0, r0, #5
    b68a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    b68e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b690:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    b692:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    b694:	4c18      	ldr	r4, [pc, #96]	; (b6f8 <usb_tx+0x78>)
    b696:	5ce2      	ldrb	r2, [r4, r3]
    b698:	2a03      	cmp	r2, #3
    b69a:	d81b      	bhi.n	b6d4 <usb_tx+0x54>
    b69c:	e8df f002 	tbb	[pc, r2]
    b6a0:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    b6a4:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b6a6:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    b6a8:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b6aa:	f010 0f08 	tst.w	r0, #8
    b6ae:	bf14      	ite	ne
    b6b0:	23c8      	movne	r3, #200	; 0xc8
    b6b2:	2388      	moveq	r3, #136	; 0x88
    b6b4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    b6b8:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b6ba:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    b6bc:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    b6be:	b662      	cpsie	i
}
    b6c0:	bc30      	pop	{r4, r5}
    b6c2:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    b6c4:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    b6c6:	2202      	movs	r2, #2
		break;
    b6c8:	e7ed      	b.n	b6a6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    b6ca:	2205      	movs	r2, #5
    b6cc:	e7eb      	b.n	b6a6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    b6ce:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    b6d0:	2204      	movs	r2, #4
		break;
    b6d2:	e7e8      	b.n	b6a6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    b6d4:	4a09      	ldr	r2, [pc, #36]	; (b6fc <usb_tx+0x7c>)
    b6d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    b6da:	b138      	cbz	r0, b6ec <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    b6dc:	4a08      	ldr	r2, [pc, #32]	; (b700 <usb_tx+0x80>)
    b6de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    b6e2:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    b6e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    b6e8:	b662      	cpsie	i
		return;
    b6ea:	e7e9      	b.n	b6c0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    b6ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b6f0:	4a03      	ldr	r2, [pc, #12]	; (b700 <usb_tx+0x80>)
    b6f2:	e7f7      	b.n	b6e4 <usb_tx+0x64>
    b6f4:	1fff8000 	.word	0x1fff8000
    b6f8:	1fffadd0 	.word	0x1fffadd0
    b6fc:	1fffad98 	.word	0x1fffad98
    b700:	1fffada8 	.word	0x1fffada8

0000b704 <usb_isr>:
}



void usb_isr(void)
{
    b704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b708:	f8df b30c 	ldr.w	fp, [pc, #780]	; ba18 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    b70c:	f8df a30c 	ldr.w	sl, [pc, #780]	; ba1c <usb_isr+0x318>
}



void usb_isr(void)
{
    b710:	b087      	sub	sp, #28
    b712:	e044      	b.n	b79e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    b714:	4fab      	ldr	r7, [pc, #684]	; (b9c4 <usb_isr+0x2c0>)
    b716:	ea4f 0893 	mov.w	r8, r3, lsr #2
    b71a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    b71e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b720:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    b724:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    b728:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b72a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    b72e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b732:	2b00      	cmp	r3, #0
    b734:	f040 8102 	bne.w	b93c <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    b738:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    b73c:	0c1b      	lsrs	r3, r3, #16
    b73e:	b299      	uxth	r1, r3
    b740:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    b744:	2b00      	cmp	r3, #0
    b746:	f000 80f0 	beq.w	b92a <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    b74a:	4b9f      	ldr	r3, [pc, #636]	; (b9c8 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    b74c:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    b750:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    b754:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    b758:	2a00      	cmp	r2, #0
    b75a:	f000 82c5 	beq.w	bce8 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    b75e:	4d9b      	ldr	r5, [pc, #620]	; (b9cc <usb_isr+0x2c8>)
    b760:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    b764:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    b766:	4c9a      	ldr	r4, [pc, #616]	; (b9d0 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    b768:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    b76c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    b770:	4419      	add	r1, r3
    b772:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    b776:	f000 fd99 	bl	c2ac <usb_malloc>
					if (packet) {
    b77a:	2800      	cmp	r0, #0
    b77c:	f000 82ad 	beq.w	bcda <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    b780:	4a94      	ldr	r2, [pc, #592]	; (b9d4 <usb_isr+0x2d0>)
    b782:	4b95      	ldr	r3, [pc, #596]	; (b9d8 <usb_isr+0x2d4>)
    b784:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    b788:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    b78c:	bf18      	it	ne
    b78e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    b790:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    b794:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    b798:	2308      	movs	r3, #8
    b79a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b79e:	f89b 4000 	ldrb.w	r4, [fp]
    b7a2:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b7a4:	0761      	lsls	r1, r4, #29
    b7a6:	d51a      	bpl.n	b7de <usb_isr+0xda>
		if (usb_configuration) {
    b7a8:	4b8c      	ldr	r3, [pc, #560]	; (b9dc <usb_isr+0x2d8>)
    b7aa:	781b      	ldrb	r3, [r3, #0]
    b7ac:	b1a3      	cbz	r3, b7d8 <usb_isr+0xd4>
			t = usb_reboot_timer;
    b7ae:	498c      	ldr	r1, [pc, #560]	; (b9e0 <usb_isr+0x2dc>)
    b7b0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b7b2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b7b6:	b122      	cbz	r2, b7c2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    b7b8:	3b01      	subs	r3, #1
    b7ba:	b2db      	uxtb	r3, r3
    b7bc:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    b7be:	b903      	cbnz	r3, b7c2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    b7c0:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    b7c2:	4988      	ldr	r1, [pc, #544]	; (b9e4 <usb_isr+0x2e0>)
    b7c4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b7c6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b7ca:	b12a      	cbz	r2, b7d8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    b7cc:	3b01      	subs	r3, #1
    b7ce:	b2db      	uxtb	r3, r3
    b7d0:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    b7d2:	2b00      	cmp	r3, #0
    b7d4:	f000 8257 	beq.w	bc86 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    b7d8:	2304      	movs	r3, #4
    b7da:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    b7de:	f004 0308 	and.w	r3, r4, #8
    b7e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b7e6:	2b00      	cmp	r3, #0
    b7e8:	f000 80cc 	beq.w	b984 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    b7ec:	f89a 3000 	ldrb.w	r3, [sl]
    b7f0:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    b7f2:	091e      	lsrs	r6, r3, #4
    b7f4:	d18e      	bne.n	b714 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    b7f6:	089c      	lsrs	r4, r3, #2
    b7f8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; b9c4 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    b7fc:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    b800:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    b804:	f3c2 0283 	ubfx	r2, r2, #2, #4
    b808:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    b80a:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    b80c:	2a0c      	cmp	r2, #12
    b80e:	f200 8088 	bhi.w	b922 <usb_isr+0x21e>
    b812:	e8df f002 	tbb	[pc, r2]
    b816:	7c7c      	.short	0x7c7c
    b818:	86868686 	.word	0x86868686
    b81c:	86478686 	.word	0x86478686
    b820:	8686      	.short	0x8686
    b822:	07          	.byte	0x07
    b823:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    b824:	6808      	ldr	r0, [r1, #0]
    b826:	4d70      	ldr	r5, [pc, #448]	; (b9e8 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    b828:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    b82a:	4f70      	ldr	r7, [pc, #448]	; (b9ec <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    b82c:	4e70      	ldr	r6, [pc, #448]	; (b9f0 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    b82e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    b830:	b281      	uxth	r1, r0
    b832:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b836:	4b67      	ldr	r3, [pc, #412]	; (b9d4 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    b838:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    b83a:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    b83e:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    b840:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b842:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    b846:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    b848:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    b84c:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    b850:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    b854:	4c5b      	ldr	r4, [pc, #364]	; (b9c4 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    b856:	f200 80e3 	bhi.w	ba20 <usb_isr+0x31c>
    b85a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    b85e:	f080 8346 	bcs.w	beee <usb_isr+0x7ea>
    b862:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    b866:	f000 82fc 	beq.w	be62 <usb_isr+0x75e>
    b86a:	f200 828d 	bhi.w	bd88 <usb_isr+0x684>
    b86e:	2980      	cmp	r1, #128	; 0x80
    b870:	f000 8377 	beq.w	bf62 <usb_isr+0x85e>
    b874:	2982      	cmp	r1, #130	; 0x82
    b876:	f040 82fa 	bne.w	be6e <usb_isr+0x76a>
    b87a:	88a9      	ldrh	r1, [r5, #4]
    b87c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    b880:	2904      	cmp	r1, #4
    b882:	f200 82f4 	bhi.w	be6e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    b886:	485b      	ldr	r0, [pc, #364]	; (b9f4 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    b888:	4c5b      	ldr	r4, [pc, #364]	; (b9f8 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    b88a:	0089      	lsls	r1, r1, #2
    b88c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    b88e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    b890:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    b892:	7802      	ldrb	r2, [r0, #0]
    b894:	0793      	lsls	r3, r2, #30
    b896:	f140 8458 	bpl.w	c14a <usb_isr+0xa46>
    b89a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    b89e:	f04f 0e02 	mov.w	lr, #2
    b8a2:	e342      	b.n	bf2a <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    b8a4:	4f51      	ldr	r7, [pc, #324]	; (b9ec <usb_isr+0x2e8>)
    b8a6:	683a      	ldr	r2, [r7, #0]
		if (data) {
    b8a8:	b332      	cbz	r2, b8f8 <usb_isr+0x1f4>
			size = ep0_tx_len;
    b8aa:	4b54      	ldr	r3, [pc, #336]	; (b9fc <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8ac:	4e50      	ldr	r6, [pc, #320]	; (b9f0 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b8ae:	4954      	ldr	r1, [pc, #336]	; (ba00 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    b8b0:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8b2:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b8b4:	780d      	ldrb	r5, [r1, #0]
    b8b6:	2840      	cmp	r0, #64	; 0x40
    b8b8:	4686      	mov	lr, r0
    b8ba:	f045 0802 	orr.w	r8, r5, #2
    b8be:	bf28      	it	cs
    b8c0:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8c4:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    b8c6:	f084 0401 	eor.w	r4, r4, #1
    b8ca:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    b8cc:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8d0:	bf0c      	ite	eq
    b8d2:	2488      	moveq	r4, #136	; 0x88
    b8d4:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b8d6:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    b8da:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    b8dc:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8e0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b8e4:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    b8e6:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8e8:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    b8ec:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    b8ee:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    b8f0:	2800      	cmp	r0, #0
    b8f2:	f000 8145 	beq.w	bb80 <usb_isr+0x47c>
    b8f6:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    b8f8:	4b3b      	ldr	r3, [pc, #236]	; (b9e8 <usb_isr+0x2e4>)
    b8fa:	881a      	ldrh	r2, [r3, #0]
    b8fc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    b900:	d10f      	bne.n	b922 <usb_isr+0x21e>
			setup.bRequest = 0;
    b902:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    b904:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    b906:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    b908:	4b3e      	ldr	r3, [pc, #248]	; (ba04 <usb_isr+0x300>)
    b90a:	701a      	strb	r2, [r3, #0]
    b90c:	e009      	b.n	b922 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b90e:	4a36      	ldr	r2, [pc, #216]	; (b9e8 <usb_isr+0x2e4>)
    b910:	8810      	ldrh	r0, [r2, #0]
    b912:	f242 0221 	movw	r2, #8225	; 0x2021
    b916:	4290      	cmp	r0, r2
    b918:	f000 8137 	beq.w	bb8a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b91c:	4a2d      	ldr	r2, [pc, #180]	; (b9d4 <usb_isr+0x2d0>)
    b91e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b922:	4a39      	ldr	r2, [pc, #228]	; (ba08 <usb_isr+0x304>)
    b924:	2301      	movs	r3, #1
    b926:	7013      	strb	r3, [r2, #0]
    b928:	e736      	b.n	b798 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b92a:	4a2a      	ldr	r2, [pc, #168]	; (b9d4 <usb_isr+0x2d0>)
    b92c:	4b2a      	ldr	r3, [pc, #168]	; (b9d8 <usb_isr+0x2d4>)
    b92e:	f019 0f08 	tst.w	r9, #8
    b932:	bf18      	it	ne
    b934:	4613      	movne	r3, r2
    b936:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    b93a:	e72d      	b.n	b798 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    b93c:	f000 fcd6 	bl	c2ec <usb_free>
				packet = tx_first[endpoint];
    b940:	4a32      	ldr	r2, [pc, #200]	; (ba0c <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    b942:	4933      	ldr	r1, [pc, #204]	; (ba10 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    b944:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    b948:	2b00      	cmp	r3, #0
    b94a:	f000 81d1 	beq.w	bcf0 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    b94e:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    b950:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    b952:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    b956:	f103 0208 	add.w	r2, r3, #8
    b95a:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    b95e:	2c03      	cmp	r4, #3
    b960:	d805      	bhi.n	b96e <usb_isr+0x26a>
    b962:	e8df f004 	tbb	[pc, r4]
    b966:	022c      	.short	0x022c
    b968:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    b96a:	2202      	movs	r2, #2
    b96c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    b96e:	881a      	ldrh	r2, [r3, #0]
    b970:	f019 0f08 	tst.w	r9, #8
    b974:	bf0c      	ite	eq
    b976:	2388      	moveq	r3, #136	; 0x88
    b978:	23c8      	movne	r3, #200	; 0xc8
    b97a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b97e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    b982:	e709      	b.n	b798 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    b984:	07e0      	lsls	r0, r4, #31
    b986:	f100 8181 	bmi.w	bc8c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    b98a:	0621      	lsls	r1, r4, #24
    b98c:	f100 81f2 	bmi.w	bd74 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    b990:	07a2      	lsls	r2, r4, #30
    b992:	d506      	bpl.n	b9a2 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    b994:	4a1f      	ldr	r2, [pc, #124]	; (ba14 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    b996:	4920      	ldr	r1, [pc, #128]	; (ba18 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    b998:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    b99a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    b99c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    b99e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    b9a0:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    b9a2:	06e3      	lsls	r3, r4, #27
    b9a4:	d502      	bpl.n	b9ac <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    b9a6:	4b1c      	ldr	r3, [pc, #112]	; (ba18 <usb_isr+0x314>)
    b9a8:	2210      	movs	r2, #16
    b9aa:	701a      	strb	r2, [r3, #0]
	}

}
    b9ac:	b007      	add	sp, #28
    b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    b9b2:	2204      	movs	r2, #4
    b9b4:	558a      	strb	r2, [r1, r6]
						break;
    b9b6:	e7da      	b.n	b96e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    b9b8:	2205      	movs	r2, #5
    b9ba:	558a      	strb	r2, [r1, r6]
						break;
    b9bc:	e7d7      	b.n	b96e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    b9be:	2203      	movs	r2, #3
    b9c0:	558a      	strb	r2, [r1, r6]
						break;
    b9c2:	e7d4      	b.n	b96e <usb_isr+0x26a>
    b9c4:	1fff8000 	.word	0x1fff8000
    b9c8:	1fffad44 	.word	0x1fffad44
    b9cc:	1fffacf0 	.word	0x1fffacf0
    b9d0:	1fffaf94 	.word	0x1fffaf94
    b9d4:	004000c8 	.word	0x004000c8
    b9d8:	00400088 	.word	0x00400088
    b9dc:	1fffadcc 	.word	0x1fffadcc
    b9e0:	1fffad55 	.word	0x1fffad55
    b9e4:	1fffadd4 	.word	0x1fffadd4
    b9e8:	1fffadb8 	.word	0x1fffadb8
    b9ec:	1fffacec 	.word	0x1fffacec
    b9f0:	1fffad54 	.word	0x1fffad54
    b9f4:	400720c0 	.word	0x400720c0
    b9f8:	1fffadc4 	.word	0x1fffadc4
    b9fc:	1fffad00 	.word	0x1fffad00
    ba00:	1fffadc0 	.word	0x1fffadc0
    ba04:	40072098 	.word	0x40072098
    ba08:	40072094 	.word	0x40072094
    ba0c:	1fffad98 	.word	0x1fffad98
    ba10:	1fffadd0 	.word	0x1fffadd0
    ba14:	40072088 	.word	0x40072088
    ba18:	40072080 	.word	0x40072080
    ba1c:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    ba20:	f242 0021 	movw	r0, #8225	; 0x2021
    ba24:	4281      	cmp	r1, r0
    ba26:	f000 812a 	beq.w	bc7e <usb_isr+0x57a>
    ba2a:	f200 80d8 	bhi.w	bbde <usb_isr+0x4da>
    ba2e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    ba32:	f000 8276 	beq.w	bf22 <usb_isr+0x81e>
    ba36:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    ba3a:	f040 8218 	bne.w	be6e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    ba3e:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    ba40:	49b3      	ldr	r1, [pc, #716]	; (bd10 <usb_isr+0x60c>)
    ba42:	78a8      	ldrb	r0, [r5, #2]
    ba44:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    ba46:	0612      	lsls	r2, r2, #24
    ba48:	f100 833a 	bmi.w	c0c0 <usb_isr+0x9bc>
    ba4c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    ba50:	49b0      	ldr	r1, [pc, #704]	; (bd14 <usb_isr+0x610>)
    ba52:	0613      	lsls	r3, r2, #24
    ba54:	f100 830c 	bmi.w	c070 <usb_isr+0x96c>
    ba58:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    ba5c:	49ad      	ldr	r1, [pc, #692]	; (bd14 <usb_isr+0x610>)
    ba5e:	0615      	lsls	r5, r2, #24
    ba60:	f100 8301 	bmi.w	c066 <usb_isr+0x962>
    ba64:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    ba68:	49aa      	ldr	r1, [pc, #680]	; (bd14 <usb_isr+0x610>)
    ba6a:	0614      	lsls	r4, r2, #24
    ba6c:	f100 82f6 	bmi.w	c05c <usb_isr+0x958>
    ba70:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    ba74:	49a7      	ldr	r1, [pc, #668]	; (bd14 <usb_isr+0x610>)
    ba76:	0610      	lsls	r0, r2, #24
    ba78:	f100 834a 	bmi.w	c110 <usb_isr+0xa0c>
    ba7c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    ba80:	49a4      	ldr	r1, [pc, #656]	; (bd14 <usb_isr+0x610>)
    ba82:	0612      	lsls	r2, r2, #24
    ba84:	f100 833f 	bmi.w	c106 <usb_isr+0xa02>
    ba88:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    ba8c:	49a1      	ldr	r1, [pc, #644]	; (bd14 <usb_isr+0x610>)
    ba8e:	0613      	lsls	r3, r2, #24
    ba90:	f100 8334 	bmi.w	c0fc <usb_isr+0x9f8>
    ba94:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    ba98:	499e      	ldr	r1, [pc, #632]	; (bd14 <usb_isr+0x610>)
    ba9a:	0615      	lsls	r5, r2, #24
    ba9c:	f100 8329 	bmi.w	c0f2 <usb_isr+0x9ee>
    baa0:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    baa4:	499b      	ldr	r1, [pc, #620]	; (bd14 <usb_isr+0x610>)
    baa6:	0614      	lsls	r4, r2, #24
    baa8:	f100 831e 	bmi.w	c0e8 <usb_isr+0x9e4>
    baac:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    bab0:	4998      	ldr	r1, [pc, #608]	; (bd14 <usb_isr+0x610>)
    bab2:	0610      	lsls	r0, r2, #24
    bab4:	f100 8313 	bmi.w	c0de <usb_isr+0x9da>
    bab8:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    babc:	4995      	ldr	r1, [pc, #596]	; (bd14 <usb_isr+0x610>)
    babe:	0612      	lsls	r2, r2, #24
    bac0:	f100 8308 	bmi.w	c0d4 <usb_isr+0x9d0>
    bac4:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    bac8:	4992      	ldr	r1, [pc, #584]	; (bd14 <usb_isr+0x610>)
    baca:	0613      	lsls	r3, r2, #24
    bacc:	f100 82fd 	bmi.w	c0ca <usb_isr+0x9c6>
    bad0:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    bad4:	498f      	ldr	r1, [pc, #572]	; (bd14 <usb_isr+0x610>)
    bad6:	0615      	lsls	r5, r2, #24
    bad8:	f100 8331 	bmi.w	c13e <usb_isr+0xa3a>
    badc:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    bae0:	498c      	ldr	r1, [pc, #560]	; (bd14 <usb_isr+0x610>)
    bae2:	0614      	lsls	r4, r2, #24
    bae4:	f100 8325 	bmi.w	c132 <usb_isr+0xa2e>
    bae8:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    baec:	4989      	ldr	r1, [pc, #548]	; (bd14 <usb_isr+0x610>)
    baee:	0610      	lsls	r0, r2, #24
    baf0:	f100 8319 	bmi.w	c126 <usb_isr+0xa22>
    baf4:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    baf8:	4986      	ldr	r1, [pc, #536]	; (bd14 <usb_isr+0x610>)
    bafa:	0612      	lsls	r2, r2, #24
    bafc:	f100 830d 	bmi.w	c11a <usb_isr+0xa16>
    bb00:	4885      	ldr	r0, [pc, #532]	; (bd18 <usb_isr+0x614>)
    bb02:	4a86      	ldr	r2, [pc, #536]	; (bd1c <usb_isr+0x618>)
    bb04:	4986      	ldr	r1, [pc, #536]	; (bd20 <usb_isr+0x61c>)
    bb06:	9001      	str	r0, [sp, #4]
    bb08:	4886      	ldr	r0, [pc, #536]	; (bd24 <usb_isr+0x620>)
    bb0a:	4d87      	ldr	r5, [pc, #540]	; (bd28 <usb_isr+0x624>)
    bb0c:	4c87      	ldr	r4, [pc, #540]	; (bd2c <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bb0e:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    bb10:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bb12:	9605      	str	r6, [sp, #20]
    bb14:	9502      	str	r5, [sp, #8]
    bb16:	4680      	mov	r8, r0
    bb18:	460f      	mov	r7, r1
    bb1a:	4616      	mov	r6, r2
    bb1c:	461d      	mov	r5, r3
    bb1e:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    bb20:	6830      	ldr	r0, [r6, #0]
			while (p) {
    bb22:	b128      	cbz	r0, bb30 <usb_isr+0x42c>
				n = p->next;
    bb24:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    bb26:	f000 fbe1 	bl	c2ec <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    bb2a:	4620      	mov	r0, r4
    bb2c:	2c00      	cmp	r4, #0
    bb2e:	d1f9      	bne.n	bb24 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    bb30:	2300      	movs	r3, #0
    bb32:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    bb34:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    bb36:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    bb38:	461a      	mov	r2, r3
    bb3a:	2300      	movs	r3, #0
    bb3c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    bb40:	b128      	cbz	r0, bb4e <usb_isr+0x44a>
				n = p->next;
    bb42:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    bb44:	f000 fbd2 	bl	c2ec <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    bb48:	4620      	mov	r0, r4
    bb4a:	2c00      	cmp	r4, #0
    bb4c:	d1f9      	bne.n	bb42 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    bb4e:	2200      	movs	r2, #0
    bb50:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    bb52:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    bb54:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    bb58:	4611      	mov	r1, r2
    bb5a:	2200      	movs	r2, #0
    bb5c:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    bb60:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    bb62:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    bb64:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    bb66:	f04f 0100 	mov.w	r1, #0
    bb6a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    bb6e:	2b03      	cmp	r3, #3
    bb70:	f200 812b 	bhi.w	bdca <usb_isr+0x6c6>
    bb74:	e8df f013 	tbh	[pc, r3, lsl #1]
    bb78:	01250170 	.word	0x01250170
    bb7c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bb80:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    bb84:	bf18      	it	ne
    bb86:	2200      	movne	r2, #0
    bb88:	e6b5      	b.n	b8f6 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    bb8a:	4a69      	ldr	r2, [pc, #420]	; (bd30 <usb_isr+0x62c>)
    bb8c:	780d      	ldrb	r5, [r1, #0]
    bb8e:	7848      	ldrb	r0, [r1, #1]
    bb90:	7015      	strb	r5, [r2, #0]
    bb92:	7050      	strb	r0, [r2, #1]
    bb94:	788d      	ldrb	r5, [r1, #2]
    bb96:	78c8      	ldrb	r0, [r1, #3]
    bb98:	7095      	strb	r5, [r2, #2]
    bb9a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    bb9c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    bb9e:	790d      	ldrb	r5, [r1, #4]
    bba0:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    bba2:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    bba4:	794d      	ldrb	r5, [r1, #5]
    bba6:	7989      	ldrb	r1, [r1, #6]
    bba8:	7155      	strb	r5, [r2, #5]
    bbaa:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    bbac:	f000 819b 	beq.w	bee6 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbb0:	4960      	ldr	r1, [pc, #384]	; (bd34 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbb2:	4e61      	ldr	r6, [pc, #388]	; (bd38 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbb4:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbb6:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bbb8:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbbc:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbbe:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bbc2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbc4:	bf0c      	ite	eq
    bbc6:	2188      	moveq	r1, #136	; 0x88
    bbc8:	21c8      	movne	r1, #200	; 0xc8
    bbca:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbce:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    bbd2:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbd6:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    bbd8:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbda:	6051      	str	r1, [r2, #4]
    bbdc:	e69e      	b.n	b91c <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bbde:	f242 2021 	movw	r0, #8737	; 0x2221
    bbe2:	4281      	cmp	r1, r0
    bbe4:	f040 81cb 	bne.w	bf7e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    bbe8:	4b54      	ldr	r3, [pc, #336]	; (bd3c <usb_isr+0x638>)
    bbea:	4c55      	ldr	r4, [pc, #340]	; (bd40 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    bbec:	4955      	ldr	r1, [pc, #340]	; (bd44 <usb_isr+0x640>)
    bbee:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    bbf0:	681d      	ldr	r5, [r3, #0]
    bbf2:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    bbf4:	f8cd e004 	str.w	lr, [sp, #4]
    bbf8:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    bbfa:	2000      	movs	r0, #0
    bbfc:	9002      	str	r0, [sp, #8]
    bbfe:	4680      	mov	r8, r0
    bc00:	4684      	mov	ip, r0
    bc02:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc04:	494b      	ldr	r1, [pc, #300]	; (bd34 <usb_isr+0x630>)
    bc06:	780d      	ldrb	r5, [r1, #0]
    bc08:	f045 0e02 	orr.w	lr, r5, #2
    bc0c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    bc10:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc12:	9b01      	ldr	r3, [sp, #4]
    bc14:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc16:	9b03      	ldr	r3, [sp, #12]
    bc18:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc1a:	bf0c      	ite	eq
    bc1c:	2488      	moveq	r4, #136	; 0x88
    bc1e:	24c8      	movne	r4, #200	; 0xc8
    bc20:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bc24:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc28:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    bc2c:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    bc2e:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc30:	f8df e0e0 	ldr.w	lr, [pc, #224]	; bd14 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    bc34:	4b40      	ldr	r3, [pc, #256]	; (bd38 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    bc36:	f8df 80fc 	ldr.w	r8, [pc, #252]	; bd34 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    bc3a:	2800      	cmp	r0, #0
    bc3c:	f040 811e 	bne.w	be7c <usb_isr+0x778>
    bc40:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    bc44:	d11b      	bne.n	bc7e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc46:	f044 0c02 	orr.w	ip, r4, #2
    bc4a:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    bc4e:	9c02      	ldr	r4, [sp, #8]
    bc50:	f8df e0c0 	ldr.w	lr, [pc, #192]	; bd14 <usb_isr+0x610>
    bc54:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc56:	2a00      	cmp	r2, #0
    bc58:	f040 8126 	bne.w	bea8 <usb_isr+0x7a4>
    bc5c:	0402      	lsls	r2, r0, #16
    bc5e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    bc62:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc66:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bc6a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    bc6c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    bc6e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bc70:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    bc72:	2840      	cmp	r0, #64	; 0x40
    bc74:	d103      	bne.n	bc7e <usb_isr+0x57a>
    bc76:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    bc78:	4a33      	ldr	r2, [pc, #204]	; (bd48 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    bc7a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    bc7c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bc7e:	4a33      	ldr	r2, [pc, #204]	; (bd4c <usb_isr+0x648>)
    bc80:	2301      	movs	r3, #1
    bc82:	7013      	strb	r3, [r2, #0]
    bc84:	e64d      	b.n	b922 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    bc86:	f000 fc9d 	bl	c5c4 <usb_serial_flush_callback>
    bc8a:	e5a5      	b.n	b7d8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bc8c:	4b21      	ldr	r3, [pc, #132]	; (bd14 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    bc8e:	482f      	ldr	r0, [pc, #188]	; (bd4c <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    bc90:	4928      	ldr	r1, [pc, #160]	; (bd34 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    bc92:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    bc94:	f04f 0e02 	mov.w	lr, #2
    bc98:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bc9c:	4f2c      	ldr	r7, [pc, #176]	; (bd50 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    bc9e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bca0:	492c      	ldr	r1, [pc, #176]	; (bd54 <usb_isr+0x650>)
    bca2:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    bca4:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    bca6:	4e2c      	ldr	r6, [pc, #176]	; (bd58 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    bca8:	4d2c      	ldr	r5, [pc, #176]	; (bd5c <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    bcaa:	4c2d      	ldr	r4, [pc, #180]	; (bd60 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    bcac:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bcae:	210d      	movs	r1, #13
    bcb0:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    bcb2:	21ff      	movs	r1, #255	; 0xff
    bcb4:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    bcb6:	f8df e0b8 	ldr.w	lr, [pc, #184]	; bd70 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    bcba:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    bcbc:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bcbe:	4d29      	ldr	r5, [pc, #164]	; (bd64 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bcc0:	4a29      	ldr	r2, [pc, #164]	; (bd68 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    bcc2:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bcc6:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    bcc8:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bcca:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bcce:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    bcd0:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bcd2:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    bcd4:	b007      	add	sp, #28
    bcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    bcda:	4a24      	ldr	r2, [pc, #144]	; (bd6c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    bcdc:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    bce0:	7813      	ldrb	r3, [r2, #0]
    bce2:	3301      	adds	r3, #1
    bce4:	7013      	strb	r3, [r2, #0]
    bce6:	e557      	b.n	b798 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    bce8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    bcec:	4d0e      	ldr	r5, [pc, #56]	; (bd28 <usb_isr+0x624>)
    bcee:	e53a      	b.n	b766 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    bcf0:	5d8b      	ldrb	r3, [r1, r6]
    bcf2:	2b03      	cmp	r3, #3
    bcf4:	f200 80f0 	bhi.w	bed8 <usb_isr+0x7d4>
    bcf8:	a201      	add	r2, pc, #4	; (adr r2, bd00 <usb_isr+0x5fc>)
    bcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bcfe:	bf00      	nop
    bd00:	0000b799 	.word	0x0000b799
    bd04:	0000b799 	.word	0x0000b799
    bd08:	0000bdbd 	.word	0x0000bdbd
    bd0c:	0000bdb7 	.word	0x0000bdb7
    bd10:	1fffadcc 	.word	0x1fffadcc
    bd14:	1fff8000 	.word	0x1fff8000
    bd18:	1fffada8 	.word	0x1fffada8
    bd1c:	1fffad44 	.word	0x1fffad44
    bd20:	1fffad98 	.word	0x1fffad98
    bd24:	1fffadd0 	.word	0x1fffadd0
    bd28:	1fffacf0 	.word	0x1fffacf0
    bd2c:	1fffaf94 	.word	0x1fffaf94
    bd30:	1fffaf9c 	.word	0x1fffaf9c
    bd34:	1fffadc0 	.word	0x1fffadc0
    bd38:	1fffad54 	.word	0x1fffad54
    bd3c:	1ffface8 	.word	0x1ffface8
    bd40:	1fffafa4 	.word	0x1fffafa4
    bd44:	1fffade4 	.word	0x1fffade4
    bd48:	1fffad00 	.word	0x1fffad00
    bd4c:	40072094 	.word	0x40072094
    bd50:	400720c0 	.word	0x400720c0
    bd54:	00400088 	.word	0x00400088
    bd58:	40072088 	.word	0x40072088
    bd5c:	40072080 	.word	0x40072080
    bd60:	40072098 	.word	0x40072098
    bd64:	1fffad04 	.word	0x1fffad04
    bd68:	1fffad58 	.word	0x1fffad58
    bd6c:	1fffadc1 	.word	0x1fffadc1
    bd70:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bd74:	49c1      	ldr	r1, [pc, #772]	; (c07c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    bd76:	4bc2      	ldr	r3, [pc, #776]	; (c080 <usb_isr+0x97c>)
    bd78:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bd7a:	200d      	movs	r0, #13
    bd7c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    bd7e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bd80:	07a2      	lsls	r2, r4, #30
    bd82:	f57f ae0e 	bpl.w	b9a2 <usb_isr+0x29e>
    bd86:	e605      	b.n	b994 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bd88:	f240 3202 	movw	r2, #770	; 0x302
    bd8c:	4291      	cmp	r1, r2
    bd8e:	f040 80ee 	bne.w	bf6e <usb_isr+0x86a>
    bd92:	88a9      	ldrh	r1, [r5, #4]
    bd94:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    bd98:	2904      	cmp	r1, #4
    bd9a:	d868      	bhi.n	be6e <usb_isr+0x76a>
    bd9c:	886a      	ldrh	r2, [r5, #2]
    bd9e:	2a00      	cmp	r2, #0
    bda0:	d165      	bne.n	be6e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    bda2:	48b6      	ldr	r0, [pc, #728]	; (c07c <usb_isr+0x978>)
    bda4:	f8cd e004 	str.w	lr, [sp, #4]
    bda8:	0089      	lsls	r1, r1, #2
    bdaa:	4408      	add	r0, r1
    bdac:	7801      	ldrb	r1, [r0, #0]
    bdae:	f041 0102 	orr.w	r1, r1, #2
    bdb2:	7001      	strb	r1, [r0, #0]
    bdb4:	e721      	b.n	bbfa <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bdb6:	2301      	movs	r3, #1
    bdb8:	558b      	strb	r3, [r1, r6]
						break;
    bdba:	e4ed      	b.n	b798 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    bdbc:	2300      	movs	r3, #0
    bdbe:	558b      	strb	r3, [r1, r6]
						break;
    bdc0:	e4ea      	b.n	b798 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bdc2:	f04f 0301 	mov.w	r3, #1
    bdc6:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    bdca:	3501      	adds	r5, #1
    bdcc:	2d04      	cmp	r5, #4
    bdce:	f106 0604 	add.w	r6, r6, #4
    bdd2:	f107 0704 	add.w	r7, r7, #4
    bdd6:	f108 0801 	add.w	r8, r8, #1
    bdda:	f47f aea1 	bne.w	bb20 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    bdde:	4ca9      	ldr	r4, [pc, #676]	; (c084 <usb_isr+0x980>)
			*reg = epconf;
    bde0:	4ba9      	ldr	r3, [pc, #676]	; (c088 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    bde2:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    bde4:	4da9      	ldr	r5, [pc, #676]	; (c08c <usb_isr+0x988>)
    bde6:	9f04      	ldr	r7, [sp, #16]
    bde8:	9e05      	ldr	r6, [sp, #20]
    bdea:	2100      	movs	r1, #0
    bdec:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    bdee:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    bdf0:	0713      	lsls	r3, r2, #28
    bdf2:	f100 8105 	bmi.w	c000 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    bdf6:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    bdf8:	49a5      	ldr	r1, [pc, #660]	; (c090 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    bdfa:	f8df 82a0 	ldr.w	r8, [pc, #672]	; c09c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    bdfe:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    be00:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be02:	f04f 0100 	mov.w	r1, #0
    be06:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    be0a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    be0e:	f100 80e0 	bmi.w	bfd2 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    be12:	49a0      	ldr	r1, [pc, #640]	; (c094 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    be14:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    be16:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be18:	2100      	movs	r1, #0
    be1a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    be1e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    be22:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be24:	f8df 8274 	ldr.w	r8, [pc, #628]	; c09c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    be28:	f100 8101 	bmi.w	c02e <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    be2c:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    be2e:	499a      	ldr	r1, [pc, #616]	; (c098 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be30:	4c9a      	ldr	r4, [pc, #616]	; (c09c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    be32:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be34:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    be36:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be38:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    be3c:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    be40:	f100 80b0 	bmi.w	bfa4 <usb_isr+0x8a0>
    be44:	7833      	ldrb	r3, [r6, #0]
    be46:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    be48:	2100      	movs	r1, #0
    be4a:	f083 0201 	eor.w	r2, r3, #1
    be4e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    be52:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    be56:	e6d0      	b.n	bbfa <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    be58:	f04f 0300 	mov.w	r3, #0
    be5c:	f888 3000 	strb.w	r3, [r8]
    be60:	e7b3      	b.n	bdca <usb_isr+0x6c6>
    be62:	88a9      	ldrh	r1, [r5, #4]
    be64:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    be68:	2904      	cmp	r1, #4
    be6a:	f240 808d 	bls.w	bf88 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    be6e:	4a83      	ldr	r2, [pc, #524]	; (c07c <usb_isr+0x978>)
    be70:	230f      	movs	r3, #15
    be72:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    be74:	4a8a      	ldr	r2, [pc, #552]	; (c0a0 <usb_isr+0x99c>)
    be76:	2301      	movs	r3, #1
    be78:	7013      	strb	r3, [r2, #0]
    be7a:	e552      	b.n	b922 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    be7c:	2840      	cmp	r0, #64	; 0x40
    be7e:	f67f aee2 	bls.w	bc46 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    be82:	f044 0402 	orr.w	r4, r4, #2
    be86:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    be8a:	9e02      	ldr	r6, [sp, #8]
    be8c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    be8e:	b1ba      	cbz	r2, bec0 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    be90:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    be94:	4a83      	ldr	r2, [pc, #524]	; (c0a4 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    be96:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    be98:	4633      	mov	r3, r6
    be9a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    be9c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bea0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bea2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    bea6:	e6e7      	b.n	bc78 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    bea8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    beac:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    beae:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    beb0:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    beb2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    beb4:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    beb8:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    beba:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    bebe:	e6d8      	b.n	bc72 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    bec0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    bec4:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bec6:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bec8:	4a77      	ldr	r2, [pc, #476]	; (c0a8 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    beca:	f888 5000 	strb.w	r5, [r8]
    bece:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    bed0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bed2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    bed6:	e6cf      	b.n	bc78 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    bed8:	f019 0f08 	tst.w	r9, #8
    bedc:	bf0c      	ite	eq
    bede:	2302      	moveq	r3, #2
    bee0:	2303      	movne	r3, #3
    bee2:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    bee4:	e458      	b.n	b798 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    bee6:	4a71      	ldr	r2, [pc, #452]	; (c0ac <usb_isr+0x9a8>)
    bee8:	210f      	movs	r1, #15
    beea:	7011      	strb	r1, [r2, #0]
    beec:	e660      	b.n	bbb0 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    beee:	4a70      	ldr	r2, [pc, #448]	; (c0b0 <usb_isr+0x9ac>)
    bef0:	6854      	ldr	r4, [r2, #4]
    bef2:	2c00      	cmp	r4, #0
    bef4:	d0bb      	beq.n	be6e <usb_isr+0x76a>
    bef6:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bef8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    befc:	e003      	b.n	bf06 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    befe:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    bf00:	6854      	ldr	r4, [r2, #4]
    bf02:	2c00      	cmp	r4, #0
    bf04:	d0b3      	beq.n	be6e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bf06:	8813      	ldrh	r3, [r2, #0]
    bf08:	4283      	cmp	r3, r0
    bf0a:	d1f8      	bne.n	befe <usb_isr+0x7fa>
    bf0c:	8853      	ldrh	r3, [r2, #2]
    bf0e:	4573      	cmp	r3, lr
    bf10:	d1f5      	bne.n	befe <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    bf12:	0a00      	lsrs	r0, r0, #8
    bf14:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    bf16:	bf0c      	ite	eq
    bf18:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    bf1c:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    bf20:	e003      	b.n	bf2a <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    bf22:	4a64      	ldr	r2, [pc, #400]	; (c0b4 <usb_isr+0x9b0>)
    bf24:	4c64      	ldr	r4, [pc, #400]	; (c0b8 <usb_isr+0x9b4>)
    bf26:	7812      	ldrb	r2, [r2, #0]
    bf28:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    bf2a:	88e8      	ldrh	r0, [r5, #6]
    bf2c:	4570      	cmp	r0, lr
    bf2e:	f080 813f 	bcs.w	c1b0 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf32:	4962      	ldr	r1, [pc, #392]	; (c0bc <usb_isr+0x9b8>)
    bf34:	780d      	ldrb	r5, [r1, #0]
    bf36:	2840      	cmp	r0, #64	; 0x40
    bf38:	4684      	mov	ip, r0
    bf3a:	f045 0e02 	orr.w	lr, r5, #2
    bf3e:	bf28      	it	cs
    bf40:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    bf44:	eb04 030c 	add.w	r3, r4, ip
    bf48:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    bf4c:	9302      	str	r3, [sp, #8]
    bf4e:	2301      	movs	r3, #1
    bf50:	6054      	str	r4, [r2, #4]
    bf52:	ebcc 0000 	rsb	r0, ip, r0
    bf56:	ea4f 480c 	mov.w	r8, ip, lsl #16
    bf5a:	2200      	movs	r2, #0
    bf5c:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf5e:	24c8      	movs	r4, #200	; 0xc8
    bf60:	e65e      	b.n	bc20 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    bf62:	4c55      	ldr	r4, [pc, #340]	; (c0b8 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    bf64:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    bf68:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    bf6a:	7062      	strb	r2, [r4, #1]
    bf6c:	e7dd      	b.n	bf2a <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    bf6e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    bf72:	f47f af7c 	bne.w	be6e <usb_isr+0x76a>
    bf76:	2301      	movs	r3, #1
    bf78:	2200      	movs	r2, #0
    bf7a:	9301      	str	r3, [sp, #4]
    bf7c:	e63d      	b.n	bbfa <usb_isr+0x4f6>
    bf7e:	f242 3221 	movw	r2, #8993	; 0x2321
    bf82:	4291      	cmp	r1, r2
    bf84:	d0f7      	beq.n	bf76 <usb_isr+0x872>
    bf86:	e772      	b.n	be6e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    bf88:	886a      	ldrh	r2, [r5, #2]
    bf8a:	2a00      	cmp	r2, #0
    bf8c:	f47f af6f 	bne.w	be6e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    bf90:	483a      	ldr	r0, [pc, #232]	; (c07c <usb_isr+0x978>)
    bf92:	f8cd e004 	str.w	lr, [sp, #4]
    bf96:	0089      	lsls	r1, r1, #2
    bf98:	4408      	add	r0, r1
    bf9a:	7801      	ldrb	r1, [r0, #0]
    bf9c:	f021 0102 	bic.w	r1, r1, #2
    bfa0:	7001      	strb	r1, [r0, #0]
    bfa2:	e62a      	b.n	bbfa <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    bfa4:	f000 f982 	bl	c2ac <usb_malloc>
				if (p) {
    bfa8:	2800      	cmp	r0, #0
    bfaa:	f000 80ef 	beq.w	c18c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    bfae:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bfb0:	4a3d      	ldr	r2, [pc, #244]	; (c0a8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    bfb2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bfb6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    bfba:	f000 f977 	bl	c2ac <usb_malloc>
				if (p) {
    bfbe:	2800      	cmp	r0, #0
    bfc0:	f000 80de 	beq.w	c180 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    bfc4:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bfc6:	4a37      	ldr	r2, [pc, #220]	; (c0a4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    bfc8:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bfcc:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    bfd0:	e738      	b.n	be44 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    bfd2:	f000 f96b 	bl	c2ac <usb_malloc>
				if (p) {
    bfd6:	2800      	cmp	r0, #0
    bfd8:	f000 80c0 	beq.w	c15c <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    bfdc:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bfde:	4a32      	ldr	r2, [pc, #200]	; (c0a8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    bfe0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bfe4:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    bfe8:	f000 f960 	bl	c2ac <usb_malloc>
				if (p) {
    bfec:	2800      	cmp	r0, #0
    bfee:	f000 80af 	beq.w	c150 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    bff2:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bff4:	4a2b      	ldr	r2, [pc, #172]	; (c0a4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    bff6:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bffa:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    bffe:	e708      	b.n	be12 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c000:	f000 f954 	bl	c2ac <usb_malloc>
				if (p) {
    c004:	2800      	cmp	r0, #0
    c006:	f000 80cd 	beq.w	c1a4 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    c00a:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c00c:	4a26      	ldr	r2, [pc, #152]	; (c0a8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c00e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c012:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c016:	f000 f949 	bl	c2ac <usb_malloc>
				if (p) {
    c01a:	2800      	cmp	r0, #0
    c01c:	f000 80bc 	beq.w	c198 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    c020:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c022:	4a20      	ldr	r2, [pc, #128]	; (c0a4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c024:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c028:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    c02c:	e6e3      	b.n	bdf6 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c02e:	f000 f93d 	bl	c2ac <usb_malloc>
				if (p) {
    c032:	2800      	cmp	r0, #0
    c034:	f000 809e 	beq.w	c174 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    c038:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c03a:	4a1b      	ldr	r2, [pc, #108]	; (c0a8 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c03c:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c040:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c044:	f000 f932 	bl	c2ac <usb_malloc>
				if (p) {
    c048:	2800      	cmp	r0, #0
    c04a:	f000 808d 	beq.w	c168 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    c04e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c050:	4a14      	ldr	r2, [pc, #80]	; (c0a4 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c052:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c056:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    c05a:	e6e7      	b.n	be2c <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    c05c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    c05e:	3808      	subs	r0, #8
    c060:	f000 f944 	bl	c2ec <usb_free>
    c064:	e504      	b.n	ba70 <usb_isr+0x36c>
    c066:	6b48      	ldr	r0, [r1, #52]	; 0x34
    c068:	3808      	subs	r0, #8
    c06a:	f000 f93f 	bl	c2ec <usb_free>
    c06e:	e4f9      	b.n	ba64 <usb_isr+0x360>
    c070:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    c072:	3808      	subs	r0, #8
    c074:	f000 f93a 	bl	c2ec <usb_free>
    c078:	e4ee      	b.n	ba58 <usb_isr+0x354>
    c07a:	bf00      	nop
    c07c:	400720c0 	.word	0x400720c0
    c080:	40072080 	.word	0x40072080
    c084:	00011024 	.word	0x00011024
    c088:	400720c4 	.word	0x400720c4
    c08c:	1fffadc1 	.word	0x1fffadc1
    c090:	400720c8 	.word	0x400720c8
    c094:	400720cc 	.word	0x400720cc
    c098:	400720d0 	.word	0x400720d0
    c09c:	1fff8000 	.word	0x1fff8000
    c0a0:	40072094 	.word	0x40072094
    c0a4:	004000c8 	.word	0x004000c8
    c0a8:	00400088 	.word	0x00400088
    c0ac:	1fffad55 	.word	0x1fffad55
    c0b0:	00011028 	.word	0x00011028
    c0b4:	1fffadcc 	.word	0x1fffadcc
    c0b8:	1fffadc4 	.word	0x1fffadc4
    c0bc:	1fffadc0 	.word	0x1fffadc0
    c0c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c0c2:	3808      	subs	r0, #8
    c0c4:	f000 f912 	bl	c2ec <usb_free>
    c0c8:	e4c0      	b.n	ba4c <usb_isr+0x348>
    c0ca:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    c0cc:	3808      	subs	r0, #8
    c0ce:	f000 f90d 	bl	c2ec <usb_free>
    c0d2:	e4fd      	b.n	bad0 <usb_isr+0x3cc>
    c0d4:	6f48      	ldr	r0, [r1, #116]	; 0x74
    c0d6:	3808      	subs	r0, #8
    c0d8:	f000 f908 	bl	c2ec <usb_free>
    c0dc:	e4f2      	b.n	bac4 <usb_isr+0x3c0>
    c0de:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    c0e0:	3808      	subs	r0, #8
    c0e2:	f000 f903 	bl	c2ec <usb_free>
    c0e6:	e4e7      	b.n	bab8 <usb_isr+0x3b4>
    c0e8:	6e48      	ldr	r0, [r1, #100]	; 0x64
    c0ea:	3808      	subs	r0, #8
    c0ec:	f000 f8fe 	bl	c2ec <usb_free>
    c0f0:	e4dc      	b.n	baac <usb_isr+0x3a8>
    c0f2:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    c0f4:	3808      	subs	r0, #8
    c0f6:	f000 f8f9 	bl	c2ec <usb_free>
    c0fa:	e4d1      	b.n	baa0 <usb_isr+0x39c>
    c0fc:	6d48      	ldr	r0, [r1, #84]	; 0x54
    c0fe:	3808      	subs	r0, #8
    c100:	f000 f8f4 	bl	c2ec <usb_free>
    c104:	e4c6      	b.n	ba94 <usb_isr+0x390>
    c106:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    c108:	3808      	subs	r0, #8
    c10a:	f000 f8ef 	bl	c2ec <usb_free>
    c10e:	e4bb      	b.n	ba88 <usb_isr+0x384>
    c110:	6c48      	ldr	r0, [r1, #68]	; 0x44
    c112:	3808      	subs	r0, #8
    c114:	f000 f8ea 	bl	c2ec <usb_free>
    c118:	e4b0      	b.n	ba7c <usb_isr+0x378>
    c11a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    c11e:	3808      	subs	r0, #8
    c120:	f000 f8e4 	bl	c2ec <usb_free>
    c124:	e4ec      	b.n	bb00 <usb_isr+0x3fc>
    c126:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    c12a:	3808      	subs	r0, #8
    c12c:	f000 f8de 	bl	c2ec <usb_free>
    c130:	e4e0      	b.n	baf4 <usb_isr+0x3f0>
    c132:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    c136:	3808      	subs	r0, #8
    c138:	f000 f8d8 	bl	c2ec <usb_free>
    c13c:	e4d4      	b.n	bae8 <usb_isr+0x3e4>
    c13e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    c142:	3808      	subs	r0, #8
    c144:	f000 f8d2 	bl	c2ec <usb_free>
    c148:	e4c8      	b.n	badc <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    c14a:	f04f 0e02 	mov.w	lr, #2
    c14e:	e6ec      	b.n	bf2a <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c150:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c152:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    c156:	3201      	adds	r2, #1
    c158:	702a      	strb	r2, [r5, #0]
    c15a:	e65a      	b.n	be12 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c15c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c15e:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    c162:	3201      	adds	r2, #1
    c164:	702a      	strb	r2, [r5, #0]
    c166:	e73f      	b.n	bfe8 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c168:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c16a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    c16e:	3201      	adds	r2, #1
    c170:	702a      	strb	r2, [r5, #0]
    c172:	e65b      	b.n	be2c <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c174:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c176:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    c17a:	3201      	adds	r2, #1
    c17c:	702a      	strb	r2, [r5, #0]
    c17e:	e761      	b.n	c044 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c180:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c182:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    c186:	3201      	adds	r2, #1
    c188:	702a      	strb	r2, [r5, #0]
    c18a:	e65b      	b.n	be44 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c18c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c18e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    c192:	3201      	adds	r2, #1
    c194:	702a      	strb	r2, [r5, #0]
    c196:	e710      	b.n	bfba <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c198:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c19a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    c19e:	3201      	adds	r2, #1
    c1a0:	702a      	strb	r2, [r5, #0]
    c1a2:	e628      	b.n	bdf6 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c1a4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c1a6:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    c1aa:	3201      	adds	r2, #1
    c1ac:	702a      	strb	r2, [r5, #0]
    c1ae:	e732      	b.n	c016 <usb_isr+0x912>
    c1b0:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    c1b4:	46f4      	mov	ip, lr
    c1b6:	bf28      	it	cs
    c1b8:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    c1bc:	eb04 030c 	add.w	r3, r4, ip
    c1c0:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    c1c2:	2301      	movs	r3, #1
    c1c4:	ebcc 000e 	rsb	r0, ip, lr
    c1c8:	ea4f 480c 	mov.w	r8, ip, lsl #16
    c1cc:	2200      	movs	r2, #0
    c1ce:	9301      	str	r3, [sp, #4]
    c1d0:	e518      	b.n	bc04 <usb_isr+0x500>
    c1d2:	bf00      	nop

0000c1d4 <usb_init>:
}



void usb_init(void)
{
    c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    c1d6:	f000 fe0b 	bl	cdf0 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c1da:	4b29      	ldr	r3, [pc, #164]	; (c280 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c1dc:	4829      	ldr	r0, [pc, #164]	; (c284 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c1de:	4c2a      	ldr	r4, [pc, #168]	; (c288 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c1e0:	4f2a      	ldr	r7, [pc, #168]	; (c28c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c1e2:	4d2b      	ldr	r5, [pc, #172]	; (c290 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c1e4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; c2a4 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    c1e8:	f8df e0bc 	ldr.w	lr, [pc, #188]	; c2a8 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    c1ec:	4e29      	ldr	r6, [pc, #164]	; (c294 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c1ee:	2200      	movs	r2, #0
    c1f0:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    c1f2:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c1f4:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    c1f6:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c1f8:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    c1fa:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c1fc:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    c1fe:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c200:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    c202:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c204:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    c206:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c208:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    c20a:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c20c:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    c20e:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c210:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    c212:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c214:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    c216:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c218:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    c21a:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c21c:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    c21e:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c220:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    c222:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c224:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    c226:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c228:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    c22a:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c22c:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    c22e:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c234:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    c236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c23a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    c23e:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c240:	f3c3 2107 	ubfx	r1, r3, #8, #8
    c244:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c246:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    c24a:	4913      	ldr	r1, [pc, #76]	; (c298 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c24c:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c24e:	0e1b      	lsrs	r3, r3, #24
    c250:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c252:	23ff      	movs	r3, #255	; 0xff
    c254:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c258:	4d10      	ldr	r5, [pc, #64]	; (c29c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    c25a:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c25e:	4810      	ldr	r0, [pc, #64]	; (c2a0 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    c260:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    c262:	2301      	movs	r3, #1
    c264:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    c266:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c26a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c26c:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c270:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    c272:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c276:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c278:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c27a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    c27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c280:	1fff8000 	.word	0x1fff8000
    c284:	40048034 	.word	0x40048034
    c288:	4007209c 	.word	0x4007209c
    c28c:	400720b0 	.word	0x400720b0
    c290:	400720b4 	.word	0x400720b4
    c294:	40072094 	.word	0x40072094
    c298:	40072010 	.word	0x40072010
    c29c:	e000e449 	.word	0xe000e449
    c2a0:	e000e108 	.word	0xe000e108
    c2a4:	40072080 	.word	0x40072080
    c2a8:	40072088 	.word	0x40072088

0000c2ac <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    c2ac:	b672      	cpsid	i
	avail = usb_buffer_available;
    c2ae:	480d      	ldr	r0, [pc, #52]	; (c2e4 <usb_malloc+0x38>)
    c2b0:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    c2b2:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    c2b6:	2b0b      	cmp	r3, #11
    c2b8:	dc10      	bgt.n	c2dc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    c2ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    c2be:	40d9      	lsrs	r1, r3
    c2c0:	ea22 0201 	bic.w	r2, r2, r1
    c2c4:	6002      	str	r2, [r0, #0]
	__enable_irq();
    c2c6:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    c2c8:	4807      	ldr	r0, [pc, #28]	; (c2e8 <usb_malloc+0x3c>)
    c2ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    c2ce:	00db      	lsls	r3, r3, #3
    c2d0:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    c2d2:	2100      	movs	r1, #0
    c2d4:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    c2d6:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    c2d8:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    c2da:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    c2dc:	b662      	cpsie	i
		return NULL;
    c2de:	2000      	movs	r0, #0
    c2e0:	4770      	bx	lr
    c2e2:	bf00      	nop
    c2e4:	1fff8788 	.word	0x1fff8788
    c2e8:	1fff83bc 	.word	0x1fff83bc

0000c2ec <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c2ec:	4b0d      	ldr	r3, [pc, #52]	; (c324 <usb_free+0x38>)
    c2ee:	4a0e      	ldr	r2, [pc, #56]	; (c328 <usb_free+0x3c>)
    c2f0:	1ac3      	subs	r3, r0, r3
    c2f2:	fba2 2303 	umull	r2, r3, r2, r3
    c2f6:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    c2f8:	2b0b      	cmp	r3, #11
    c2fa:	d80c      	bhi.n	c316 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c2fc:	4a0b      	ldr	r2, [pc, #44]	; (c32c <usb_free+0x40>)
    c2fe:	7812      	ldrb	r2, [r2, #0]
    c300:	b952      	cbnz	r2, c318 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    c302:	b672      	cpsid	i
	usb_buffer_available |= mask;
    c304:	480a      	ldr	r0, [pc, #40]	; (c330 <usb_free+0x44>)
    c306:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    c30a:	6802      	ldr	r2, [r0, #0]
    c30c:	fa21 f303 	lsr.w	r3, r1, r3
    c310:	431a      	orrs	r2, r3
    c312:	6002      	str	r2, [r0, #0]
	__enable_irq();
    c314:	b662      	cpsie	i
    c316:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c318:	4a06      	ldr	r2, [pc, #24]	; (c334 <usb_free+0x48>)
    c31a:	7812      	ldrb	r2, [r2, #0]
    c31c:	2a00      	cmp	r2, #0
    c31e:	d0f0      	beq.n	c302 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    c320:	f7ff b94a 	b.w	b5b8 <usb_rx_memory>
    c324:	1fff83bc 	.word	0x1fff83bc
    c328:	38e38e39 	.word	0x38e38e39
    c32c:	1fffadc1 	.word	0x1fffadc1
    c330:	1fff8788 	.word	0x1fff8788
    c334:	1fffadcc 	.word	0x1fffadcc

0000c338 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    c338:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    c33a:	4d0f      	ldr	r5, [pc, #60]	; (c378 <usb_serial_getchar+0x40>)
    c33c:	6828      	ldr	r0, [r5, #0]
    c33e:	b178      	cbz	r0, c360 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    c340:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    c342:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    c344:	18c1      	adds	r1, r0, r3
    c346:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    c348:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    c34a:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    c34c:	d202      	bcs.n	c354 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    c34e:	8043      	strh	r3, [r0, #2]
	}
	return c;
    c350:	4620      	mov	r0, r4
}
    c352:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    c354:	f7ff ffca 	bl	c2ec <usb_free>
		rx_packet = NULL;
    c358:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    c35a:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    c35c:	602b      	str	r3, [r5, #0]
    c35e:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c360:	4b06      	ldr	r3, [pc, #24]	; (c37c <usb_serial_getchar+0x44>)
    c362:	781b      	ldrb	r3, [r3, #0]
    c364:	b12b      	cbz	r3, c372 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c366:	2003      	movs	r0, #3
    c368:	f7ff f8f2 	bl	b550 <usb_rx>
    c36c:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    c36e:	2800      	cmp	r0, #0
    c370:	d1e6      	bne.n	c340 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c372:	f04f 30ff 	mov.w	r0, #4294967295
    c376:	bd38      	pop	{r3, r4, r5, pc}
    c378:	1fffade0 	.word	0x1fffade0
    c37c:	1fffadcc 	.word	0x1fffadcc

0000c380 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    c380:	b510      	push	{r4, lr}
	if (!rx_packet) {
    c382:	4c09      	ldr	r4, [pc, #36]	; (c3a8 <usb_serial_peekchar+0x28>)
    c384:	6820      	ldr	r0, [r4, #0]
    c386:	b118      	cbz	r0, c390 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    c388:	8843      	ldrh	r3, [r0, #2]
    c38a:	4418      	add	r0, r3
    c38c:	7a00      	ldrb	r0, [r0, #8]
}
    c38e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c390:	4b06      	ldr	r3, [pc, #24]	; (c3ac <usb_serial_peekchar+0x2c>)
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	b12b      	cbz	r3, c3a2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c396:	2003      	movs	r0, #3
    c398:	f7ff f8da 	bl	b550 <usb_rx>
    c39c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c39e:	2800      	cmp	r0, #0
    c3a0:	d1f2      	bne.n	c388 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c3a2:	f04f 30ff 	mov.w	r0, #4294967295
    c3a6:	bd10      	pop	{r4, pc}
    c3a8:	1fffade0 	.word	0x1fffade0
    c3ac:	1fffadcc 	.word	0x1fffadcc

0000c3b0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c3b0:	4b04      	ldr	r3, [pc, #16]	; (c3c4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c3b2:	4a05      	ldr	r2, [pc, #20]	; (c3c8 <usb_serial_available+0x18>)
    c3b4:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c3b6:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c3b8:	b11b      	cbz	r3, c3c2 <usb_serial_available+0x12>
    c3ba:	881a      	ldrh	r2, [r3, #0]
    c3bc:	885b      	ldrh	r3, [r3, #2]
    c3be:	1ad3      	subs	r3, r2, r3
    c3c0:	4418      	add	r0, r3
	return count;
}
    c3c2:	4770      	bx	lr
    c3c4:	1fffade0 	.word	0x1fffade0
    c3c8:	1fffaf94 	.word	0x1fffaf94

0000c3cc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c3cc:	4b0b      	ldr	r3, [pc, #44]	; (c3fc <usb_serial_flush_input+0x30>)
    c3ce:	781b      	ldrb	r3, [r3, #0]
    c3d0:	b19b      	cbz	r3, c3fa <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    c3d2:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    c3d4:	4c0a      	ldr	r4, [pc, #40]	; (c400 <usb_serial_flush_input+0x34>)
    c3d6:	6820      	ldr	r0, [r4, #0]
    c3d8:	b148      	cbz	r0, c3ee <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c3da:	f7ff ff87 	bl	c2ec <usb_free>
		rx_packet = NULL;
    c3de:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c3e0:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    c3e2:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c3e4:	f7ff f8b4 	bl	b550 <usb_rx>
		if (!rx) break;
    c3e8:	b130      	cbz	r0, c3f8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c3ea:	f7ff ff7f 	bl	c2ec <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c3ee:	2003      	movs	r0, #3
    c3f0:	f7ff f8ae 	bl	b550 <usb_rx>
		if (!rx) break;
    c3f4:	2800      	cmp	r0, #0
    c3f6:	d1f8      	bne.n	c3ea <usb_serial_flush_input+0x1e>
    c3f8:	bd10      	pop	{r4, pc}
    c3fa:	4770      	bx	lr
    c3fc:	1fffadcc 	.word	0x1fffadcc
    c400:	1fffade0 	.word	0x1fffade0

0000c404 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c408:	f8df 90f8 	ldr.w	r9, [pc, #248]	; c504 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c40c:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c40e:	2201      	movs	r2, #1
    c410:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    c414:	9101      	str	r1, [sp, #4]
    c416:	b369      	cbz	r1, c474 <usb_serial_write+0x70>
    c418:	f8df 80ec 	ldr.w	r8, [pc, #236]	; c508 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c41c:	4f36      	ldr	r7, [pc, #216]	; (c4f8 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    c41e:	9e01      	ldr	r6, [sp, #4]
    c420:	4683      	mov	fp, r0
		if (!tx_packet) {
    c422:	f8d8 0000 	ldr.w	r0, [r8]
    c426:	b3b0      	cbz	r0, c496 <usb_serial_write+0x92>
    c428:	4d34      	ldr	r5, [pc, #208]	; (c4fc <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    c42a:	8844      	ldrh	r4, [r0, #2]
    c42c:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    c430:	42b1      	cmp	r1, r6
    c432:	bf28      	it	cs
    c434:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    c436:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    c43a:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    c43c:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    c440:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    c442:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    c444:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    c448:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    c44c:	b151      	cbz	r1, c464 <usb_serial_write+0x60>
    c44e:	3c01      	subs	r4, #1
    c450:	4422      	add	r2, r4
    c452:	4459      	add	r1, fp
    c454:	f81b 4b01 	ldrb.w	r4, [fp], #1
    c458:	f802 4f01 	strb.w	r4, [r2, #1]!
    c45c:	458b      	cmp	fp, r1
    c45e:	d1f9      	bne.n	c454 <usb_serial_write+0x50>
    c460:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    c464:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    c468:	d80b      	bhi.n	c482 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c46a:	4a25      	ldr	r2, [pc, #148]	; (c500 <usb_serial_write+0xfc>)
    c46c:	2105      	movs	r1, #5
    c46e:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    c470:	2e00      	cmp	r6, #0
    c472:	d1d6      	bne.n	c422 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    c474:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    c476:	2300      	movs	r3, #0
    c478:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    c47c:	b003      	add	sp, #12
    c47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    c482:	2240      	movs	r2, #64	; 0x40
    c484:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c486:	4601      	mov	r1, r0
    c488:	2004      	movs	r0, #4
    c48a:	f7ff f8f9 	bl	b680 <usb_tx>
			tx_packet = NULL;
    c48e:	2200      	movs	r2, #0
    c490:	f8c8 2000 	str.w	r2, [r8]
    c494:	e7e9      	b.n	c46a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c496:	783a      	ldrb	r2, [r7, #0]
    c498:	b32a      	cbz	r2, c4e6 <usb_serial_write+0xe2>
    c49a:	4d18      	ldr	r5, [pc, #96]	; (c4fc <usb_serial_write+0xf8>)
    c49c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    c4a0:	f04f 0a01 	mov.w	sl, #1
    c4a4:	e007      	b.n	c4b6 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c4a6:	3c01      	subs	r4, #1
    c4a8:	d016      	beq.n	c4d8 <usb_serial_write+0xd4>
    c4aa:	782a      	ldrb	r2, [r5, #0]
    c4ac:	b9a2      	cbnz	r2, c4d8 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    c4ae:	f000 fa83 	bl	c9b8 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c4b2:	783a      	ldrb	r2, [r7, #0]
    c4b4:	b1ba      	cbz	r2, c4e6 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    c4b6:	2004      	movs	r0, #4
    c4b8:	f7ff f868 	bl	b58c <usb_tx_packet_count>
    c4bc:	2807      	cmp	r0, #7
    c4be:	d8f2      	bhi.n	c4a6 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    c4c0:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    c4c4:	f7ff fef2 	bl	c2ac <usb_malloc>
    c4c8:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    c4cc:	2800      	cmp	r0, #0
    c4ce:	d1ac      	bne.n	c42a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    c4d0:	4b0c      	ldr	r3, [pc, #48]	; (c504 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c4d2:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    c4d4:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c4d6:	d1e8      	bne.n	c4aa <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    c4d8:	2301      	movs	r3, #1
					return -1;
    c4da:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    c4de:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    c4e0:	b003      	add	sp, #12
    c4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    c4e6:	2300      	movs	r3, #0
					return -1;
    c4e8:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    c4ec:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    c4f0:	b003      	add	sp, #12
    c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4f6:	bf00      	nop
    c4f8:	1fffadcc 	.word	0x1fffadcc
    c4fc:	1fffaddc 	.word	0x1fffaddc
    c500:	1fffadd4 	.word	0x1fffadd4
    c504:	1fffadd5 	.word	0x1fffadd5
    c508:	1fffadd8 	.word	0x1fffadd8

0000c50c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c50c:	b500      	push	{lr}
    c50e:	b083      	sub	sp, #12
    c510:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    c512:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c514:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    c518:	4618      	mov	r0, r3
    c51a:	f7ff ff73 	bl	c404 <usb_serial_write>
}
    c51e:	b003      	add	sp, #12
    c520:	f85d fb04 	ldr.w	pc, [sp], #4

0000c524 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    c524:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    c526:	4d0e      	ldr	r5, [pc, #56]	; (c560 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    c528:	4c0e      	ldr	r4, [pc, #56]	; (c564 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    c52a:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    c52c:	2301      	movs	r3, #1
    c52e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    c530:	b128      	cbz	r0, c53e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c532:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    c534:	2300      	movs	r3, #0
    c536:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c538:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    c53c:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    c53e:	4b0a      	ldr	r3, [pc, #40]	; (c568 <usb_serial_write_buffer_free+0x44>)
    c540:	781b      	ldrb	r3, [r3, #0]
    c542:	b913      	cbnz	r3, c54a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    c544:	2000      	movs	r0, #0
    c546:	7020      	strb	r0, [r4, #0]
			return 0;
    c548:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c54a:	2004      	movs	r0, #4
    c54c:	f7ff f81e 	bl	b58c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    c550:	2807      	cmp	r0, #7
    c552:	d8f7      	bhi.n	c544 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    c554:	f7ff feaa 	bl	c2ac <usb_malloc>
    c558:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c55a:	2800      	cmp	r0, #0
    c55c:	d1e9      	bne.n	c532 <usb_serial_write_buffer_free+0xe>
    c55e:	e7f1      	b.n	c544 <usb_serial_write_buffer_free+0x20>
    c560:	1fffadd8 	.word	0x1fffadd8
    c564:	1fffadd5 	.word	0x1fffadd5
    c568:	1fffadcc 	.word	0x1fffadcc

0000c56c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c56e:	4b11      	ldr	r3, [pc, #68]	; (c5b4 <usb_serial_flush_output+0x48>)
    c570:	781b      	ldrb	r3, [r3, #0]
    c572:	b18b      	cbz	r3, c598 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c574:	4e10      	ldr	r6, [pc, #64]	; (c5b8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    c576:	4d11      	ldr	r5, [pc, #68]	; (c5bc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c578:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    c57a:	2701      	movs	r7, #1
    c57c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    c57e:	b164      	cbz	r4, c59a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c580:	4a0f      	ldr	r2, [pc, #60]	; (c5c0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    c582:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    c584:	2700      	movs	r7, #0
    c586:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c588:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    c58a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c58c:	2004      	movs	r0, #4
    c58e:	f7ff f877 	bl	b680 <usb_tx>
		tx_packet = NULL;
    c592:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c594:	2300      	movs	r3, #0
    c596:	702b      	strb	r3, [r5, #0]
    c598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    c59a:	f7ff fe87 	bl	c2ac <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    c59e:	4b08      	ldr	r3, [pc, #32]	; (c5c0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    c5a0:	b128      	cbz	r0, c5ae <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    c5a2:	4601      	mov	r1, r0
    c5a4:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    c5a6:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c5a8:	f7ff f86a 	bl	b680 <usb_tx>
    c5ac:	e7f2      	b.n	c594 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    c5ae:	701f      	strb	r7, [r3, #0]
    c5b0:	e7f0      	b.n	c594 <usb_serial_flush_output+0x28>
    c5b2:	bf00      	nop
    c5b4:	1fffadcc 	.word	0x1fffadcc
    c5b8:	1fffadd8 	.word	0x1fffadd8
    c5bc:	1fffadd5 	.word	0x1fffadd5
    c5c0:	1fffadd4 	.word	0x1fffadd4

0000c5c4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    c5c4:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c5c6:	4b0e      	ldr	r3, [pc, #56]	; (c600 <usb_serial_flush_callback+0x3c>)
    c5c8:	781b      	ldrb	r3, [r3, #0]
    c5ca:	b973      	cbnz	r3, c5ea <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    c5cc:	4c0d      	ldr	r4, [pc, #52]	; (c604 <usb_serial_flush_callback+0x40>)
    c5ce:	6821      	ldr	r1, [r4, #0]
    c5d0:	b161      	cbz	r1, c5ec <usb_serial_flush_callback+0x28>
    c5d2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c5d6:	884b      	ldrh	r3, [r1, #2]
    c5d8:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c5da:	2004      	movs	r0, #4
    c5dc:	f7ff f850 	bl	b680 <usb_tx>
		tx_packet = NULL;
    c5e0:	6025      	str	r5, [r4, #0]
    c5e2:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    c5e4:	4b08      	ldr	r3, [pc, #32]	; (c608 <usb_serial_flush_callback+0x44>)
    c5e6:	2201      	movs	r2, #1
    c5e8:	701a      	strb	r2, [r3, #0]
    c5ea:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    c5ec:	f7ff fe5e 	bl	c2ac <usb_malloc>
		if (tx) {
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d0f7      	beq.n	c5e4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c5f4:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    c5fa:	2004      	movs	r0, #4
    c5fc:	f7ff b840 	b.w	b680 <usb_tx>
    c600:	1fffadd5 	.word	0x1fffadd5
    c604:	1fffadd8 	.word	0x1fffadd8
    c608:	1fffadd4 	.word	0x1fffadd4

0000c60c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    c60c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c60e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c612:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    c614:	7f43      	ldrb	r3, [r0, #29]
    c616:	b933      	cbnz	r3, c626 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    c618:	7f01      	ldrb	r1, [r0, #28]
    c61a:	2901      	cmp	r1, #1
    c61c:	d007      	beq.n	c62e <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    c61e:	2903      	cmp	r1, #3
    c620:	d00f      	beq.n	c642 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    c622:	2301      	movs	r3, #1
    c624:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c626:	b902      	cbnz	r2, c62a <EventResponder::triggerEventNotImmediate()+0x1e>
    c628:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    c62a:	bc10      	pop	{r4}
    c62c:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    c62e:	4c12      	ldr	r4, [pc, #72]	; (c678 <EventResponder::triggerEventNotImmediate()+0x6c>)
    c630:	6821      	ldr	r1, [r4, #0]
    c632:	b1a1      	cbz	r1, c65e <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    c634:	4911      	ldr	r1, [pc, #68]	; (c67c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    c636:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    c638:	680b      	ldr	r3, [r1, #0]
    c63a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    c63c:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    c63e:	6158      	str	r0, [r3, #20]
    c640:	e7ef      	b.n	c622 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    c642:	4c0f      	ldr	r4, [pc, #60]	; (c680 <EventResponder::triggerEventNotImmediate()+0x74>)
    c644:	6821      	ldr	r1, [r4, #0]
    c646:	b181      	cbz	r1, c66a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    c648:	490e      	ldr	r1, [pc, #56]	; (c684 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    c64a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c64c:	680b      	ldr	r3, [r1, #0]
    c64e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    c650:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    c652:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c654:	4b0c      	ldr	r3, [pc, #48]	; (c688 <EventResponder::triggerEventNotImmediate()+0x7c>)
    c656:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c65a:	6019      	str	r1, [r3, #0]
    c65c:	e7e1      	b.n	c622 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    c65e:	4b07      	ldr	r3, [pc, #28]	; (c67c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    c660:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    c662:	6181      	str	r1, [r0, #24]
				firstYield = this;
    c664:	6020      	str	r0, [r4, #0]
				lastYield = this;
    c666:	6018      	str	r0, [r3, #0]
    c668:	e7db      	b.n	c622 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    c66a:	4b06      	ldr	r3, [pc, #24]	; (c684 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    c66c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    c66e:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    c670:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    c672:	6018      	str	r0, [r3, #0]
    c674:	e7ee      	b.n	c654 <EventResponder::triggerEventNotImmediate()+0x48>
    c676:	bf00      	nop
    c678:	1fffadf8 	.word	0x1fffadf8
    c67c:	1fffadf4 	.word	0x1fffadf4
    c680:	1fffade8 	.word	0x1fffade8
    c684:	1fffadec 	.word	0x1fffadec
    c688:	e000ed04 	.word	0xe000ed04

0000c68c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    c68c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    c68e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    c690:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    c692:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    c694:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    c696:	d002      	beq.n	c69e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    c698:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    c69a:	f7ff bfb7 	b.w	c60c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    c69e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    c6a0:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    c6a2:	4718      	bx	r3

0000c6a4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c6a4:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c6a6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c6aa:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c6ac:	4c0c      	ldr	r4, [pc, #48]	; (c6e0 <EventResponder::runFromInterrupt()+0x3c>)
    c6ae:	6820      	ldr	r0, [r4, #0]
		if (first) {
    c6b0:	b180      	cbz	r0, c6d4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c6b2:	4e0c      	ldr	r6, [pc, #48]	; (c6e4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c6b4:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    c6b6:	6943      	ldr	r3, [r0, #20]
    c6b8:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    c6ba:	b173      	cbz	r3, c6da <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c6bc:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c6be:	b902      	cbnz	r2, c6c2 <EventResponder::runFromInterrupt()+0x1e>
    c6c0:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    c6c2:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c6c4:	6883      	ldr	r3, [r0, #8]
    c6c6:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c6c8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c6cc:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c6ce:	6820      	ldr	r0, [r4, #0]
		if (first) {
    c6d0:	2800      	cmp	r0, #0
    c6d2:	d1f0      	bne.n	c6b6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c6d4:	b902      	cbnz	r2, c6d8 <EventResponder::runFromInterrupt()+0x34>
    c6d6:	b662      	cpsie	i
    c6d8:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c6da:	6033      	str	r3, [r6, #0]
    c6dc:	e7ef      	b.n	c6be <EventResponder::runFromInterrupt()+0x1a>
    c6de:	bf00      	nop
    c6e0:	1fffade8 	.word	0x1fffade8
    c6e4:	1fffadec 	.word	0x1fffadec

0000c6e8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    c6e8:	f7ff bfdc 	b.w	c6a4 <EventResponder::runFromInterrupt()>

0000c6ec <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    c6ec:	4a18      	ldr	r2, [pc, #96]	; (c750 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    c6ee:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    c6f0:	6814      	ldr	r4, [r2, #0]
    c6f2:	2c00      	cmp	r4, #0
    c6f4:	d027      	beq.n	c746 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    c6f6:	6803      	ldr	r3, [r0, #0]
    c6f8:	6821      	ldr	r1, [r4, #0]
    c6fa:	428b      	cmp	r3, r1
    c6fc:	d20e      	bcs.n	c71c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    c6fe:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    c700:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    c702:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    c704:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    c706:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    c708:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    c70a:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    c70c:	2302      	movs	r3, #2
    c70e:	7503      	strb	r3, [r0, #20]
}
    c710:	bc30      	pop	{r4, r5}
    c712:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    c714:	6811      	ldr	r1, [r2, #0]
    c716:	428b      	cmp	r3, r1
    c718:	4614      	mov	r4, r2
    c71a:	d308      	bcc.n	c72e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    c71c:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    c71e:	1a5b      	subs	r3, r3, r1
    c720:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    c722:	2a00      	cmp	r2, #0
    c724:	d1f6      	bne.n	c714 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    c726:	6082      	str	r2, [r0, #8]
		_prev = timer;
    c728:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    c72a:	60a0      	str	r0, [r4, #8]
    c72c:	e7ee      	b.n	c70c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    c72e:	68d2      	ldr	r2, [r2, #12]
    c730:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    c732:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    c734:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    c736:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    c738:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    c73a:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    c73c:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    c73e:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    c740:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    c742:	bc30      	pop	{r4, r5}
    c744:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    c746:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    c748:	60c4      	str	r4, [r0, #12]
		listActive = this;
    c74a:	6010      	str	r0, [r2, #0]
    c74c:	e7de      	b.n	c70c <MillisTimer::addToActiveList()+0x20>
    c74e:	bf00      	nop
    c750:	1fffadf0 	.word	0x1fffadf0

0000c754 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    c756:	4e22      	ldr	r6, [pc, #136]	; (c7e0 <MillisTimer::runFromTimer()+0x8c>)
    c758:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    c75a:	b32c      	cbz	r4, c7a8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    c75c:	6823      	ldr	r3, [r4, #0]
    c75e:	2b00      	cmp	r3, #0
    c760:	d13a      	bne.n	c7d8 <MillisTimer::runFromTimer()+0x84>
    c762:	4f20      	ldr	r7, [pc, #128]	; (c7e4 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    c764:	461d      	mov	r5, r3
    c766:	e004      	b.n	c772 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    c768:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    c76a:	b1ec      	cbz	r4, c7a8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    c76c:	6823      	ldr	r3, [r4, #0]
    c76e:	2b00      	cmp	r3, #0
    c770:	d132      	bne.n	c7d8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    c772:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    c774:	b103      	cbz	r3, c778 <MillisTimer::runFromTimer()+0x24>
    c776:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    c778:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    c77a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    c77c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    c77e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    c780:	681b      	ldr	r3, [r3, #0]
    c782:	42bb      	cmp	r3, r7
    c784:	d121      	bne.n	c7ca <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    c786:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    c788:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    c78a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    c78c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    c78e:	d020      	beq.n	c7d2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    c790:	f7ff ff3c 	bl	c60c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    c794:	6863      	ldr	r3, [r4, #4]
    c796:	2b00      	cmp	r3, #0
    c798:	d0e6      	beq.n	c768 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    c79a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    c79c:	4620      	mov	r0, r4
    c79e:	f7ff ffa5 	bl	c6ec <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    c7a2:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    c7a4:	2c00      	cmp	r4, #0
    c7a6:	d1e1      	bne.n	c76c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c7a8:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    c7ac:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    c7ae:	4a0e      	ldr	r2, [pc, #56]	; (c7e8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    c7b0:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    c7b2:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    c7b4:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    c7b6:	b903      	cbnz	r3, c7ba <MillisTimer::runFromTimer()+0x66>
    c7b8:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    c7ba:	b128      	cbz	r0, c7c8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    c7bc:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    c7be:	f7ff ff95 	bl	c6ec <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    c7c2:	4620      	mov	r0, r4
    c7c4:	2800      	cmp	r0, #0
    c7c6:	d1f9      	bne.n	c7bc <MillisTimer::runFromTimer()+0x68>
    c7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    c7ca:	4622      	mov	r2, r4
    c7cc:	2100      	movs	r1, #0
    c7ce:	4798      	blx	r3
    c7d0:	e7e0      	b.n	c794 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    c7d2:	6883      	ldr	r3, [r0, #8]
    c7d4:	4798      	blx	r3
    c7d6:	e7dd      	b.n	c794 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    c7d8:	3b01      	subs	r3, #1
    c7da:	6023      	str	r3, [r4, #0]
			break;
    c7dc:	e7e4      	b.n	c7a8 <MillisTimer::runFromTimer()+0x54>
    c7de:	bf00      	nop
    c7e0:	1fffadf0 	.word	0x1fffadf0
    c7e4:	0000c68d 	.word	0x0000c68d
    c7e8:	1fffae00 	.word	0x1fffae00

0000c7ec <systick_isr>: